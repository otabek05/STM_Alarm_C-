
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ae38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  0801afc8  0801afc8  0002afc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bdc4  0801bdc4  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bdc4  0801bdc4  0002bdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bdcc  0801bdcc  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801bdcc  0801bdcc  0002bdcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0801bdd8  0801bdd8  0002bdd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801bde4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003022c  2**0
                  CONTENTS
 10 .bss          0000324c  2000022c  2000022c  0003022c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003478  20003478  0003022c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0006b48b  00000000  00000000  0003029f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008fc7  00000000  00000000  0009b72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000028b8  00000000  00000000  000a46f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002041  00000000  00000000  000a6fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ddf8  00000000  00000000  000a8ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003238b  00000000  00000000  000d6de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100367  00000000  00000000  00109174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000dd08  00000000  00000000  002094dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  002171e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000022c 	.word	0x2000022c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801afb0 	.word	0x0801afb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000230 	.word	0x20000230
 80001cc:	0801afb0 	.word	0x0801afb0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a6 	b.w	8000f6c <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9e08      	ldr	r6, [sp, #32]
 8000caa:	460d      	mov	r5, r1
 8000cac:	4604      	mov	r4, r0
 8000cae:	460f      	mov	r7, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14a      	bne.n	8000d4a <__udivmoddi4+0xa6>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4694      	mov	ip, r2
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0xe2>
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	b143      	cbz	r3, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	f1c3 0220 	rsb	r2, r3, #32
 8000cc8:	409f      	lsls	r7, r3
 8000cca:	fa20 f202 	lsr.w	r2, r0, r2
 8000cce:	4317      	orrs	r7, r2
 8000cd0:	409c      	lsls	r4, r3
 8000cd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd6:	fa1f f58c 	uxth.w	r5, ip
 8000cda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cde:	0c22      	lsrs	r2, r4, #16
 8000ce0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce8:	fb01 f005 	mul.w	r0, r1, r5
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d90a      	bls.n	8000d06 <__udivmoddi4+0x62>
 8000cf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf8:	f080 811c 	bcs.w	8000f34 <__udivmoddi4+0x290>
 8000cfc:	4290      	cmp	r0, r2
 8000cfe:	f240 8119 	bls.w	8000f34 <__udivmoddi4+0x290>
 8000d02:	3902      	subs	r1, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	b2a4      	uxth	r4, r4
 8000d0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d16:	fb00 f505 	mul.w	r5, r0, r5
 8000d1a:	42a5      	cmp	r5, r4
 8000d1c:	d90a      	bls.n	8000d34 <__udivmoddi4+0x90>
 8000d1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x294>
 8000d2a:	42a5      	cmp	r5, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x294>
 8000d30:	4464      	add	r4, ip
 8000d32:	3802      	subs	r0, #2
 8000d34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d38:	1b64      	subs	r4, r4, r5
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	b11e      	cbz	r6, 8000d46 <__udivmoddi4+0xa2>
 8000d3e:	40dc      	lsrs	r4, r3
 8000d40:	2300      	movs	r3, #0
 8000d42:	e9c6 4300 	strd	r4, r3, [r6]
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0xbc>
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f000 80ed 	beq.w	8000f2e <__udivmoddi4+0x28a>
 8000d54:	2100      	movs	r1, #0
 8000d56:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	fab3 f183 	clz	r1, r3
 8000d64:	2900      	cmp	r1, #0
 8000d66:	d149      	bne.n	8000dfc <__udivmoddi4+0x158>
 8000d68:	42ab      	cmp	r3, r5
 8000d6a:	d302      	bcc.n	8000d72 <__udivmoddi4+0xce>
 8000d6c:	4282      	cmp	r2, r0
 8000d6e:	f200 80f8 	bhi.w	8000f62 <__udivmoddi4+0x2be>
 8000d72:	1a84      	subs	r4, r0, r2
 8000d74:	eb65 0203 	sbc.w	r2, r5, r3
 8000d78:	2001      	movs	r0, #1
 8000d7a:	4617      	mov	r7, r2
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d0e2      	beq.n	8000d46 <__udivmoddi4+0xa2>
 8000d80:	e9c6 4700 	strd	r4, r7, [r6]
 8000d84:	e7df      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000d86:	b902      	cbnz	r2, 8000d8a <__udivmoddi4+0xe6>
 8000d88:	deff      	udf	#255	; 0xff
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8090 	bne.w	8000eb4 <__udivmoddi4+0x210>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fa1f fe8c 	uxth.w	lr, ip
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da4:	fb07 2015 	mls	r0, r7, r5, r2
 8000da8:	0c22      	lsrs	r2, r4, #16
 8000daa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dae:	fb0e f005 	mul.w	r0, lr, r5
 8000db2:	4290      	cmp	r0, r2
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x124>
 8000db6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x122>
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	f200 80cb 	bhi.w	8000f5c <__udivmoddi4+0x2b8>
 8000dc6:	4645      	mov	r5, r8
 8000dc8:	1a12      	subs	r2, r2, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x14e>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x14c>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	f200 80bb 	bhi.w	8000f66 <__udivmoddi4+0x2c2>
 8000df0:	4610      	mov	r0, r2
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfa:	e79f      	b.n	8000d3c <__udivmoddi4+0x98>
 8000dfc:	f1c1 0720 	rsb	r7, r1, #32
 8000e00:	408b      	lsls	r3, r1
 8000e02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e12:	40fd      	lsrs	r5, r7
 8000e14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e18:	4323      	orrs	r3, r4
 8000e1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	fb09 5518 	mls	r5, r9, r8, r5
 8000e26:	0c1c      	lsrs	r4, r3, #16
 8000e28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3a:	d90b      	bls.n	8000e54 <__udivmoddi4+0x1b0>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e44:	f080 8088 	bcs.w	8000f58 <__udivmoddi4+0x2b4>
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	f240 8085 	bls.w	8000f58 <__udivmoddi4+0x2b4>
 8000e4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e52:	4464      	add	r4, ip
 8000e54:	1b64      	subs	r4, r4, r5
 8000e56:	b29d      	uxth	r5, r3
 8000e58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x1da>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e74:	d26c      	bcs.n	8000f50 <__udivmoddi4+0x2ac>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	d96a      	bls.n	8000f50 <__udivmoddi4+0x2ac>
 8000e7a:	3b02      	subs	r3, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e82:	fba3 9502 	umull	r9, r5, r3, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	42ac      	cmp	r4, r5
 8000e8c:	46c8      	mov	r8, r9
 8000e8e:	46ae      	mov	lr, r5
 8000e90:	d356      	bcc.n	8000f40 <__udivmoddi4+0x29c>
 8000e92:	d053      	beq.n	8000f3c <__udivmoddi4+0x298>
 8000e94:	b156      	cbz	r6, 8000eac <__udivmoddi4+0x208>
 8000e96:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	40ca      	lsrs	r2, r1
 8000ea4:	40cc      	lsrs	r4, r1
 8000ea6:	4317      	orrs	r7, r2
 8000ea8:	e9c6 7400 	strd	r7, r4, [r6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb4:	f1c3 0120 	rsb	r1, r3, #32
 8000eb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ebc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec4:	409d      	lsls	r5, r3
 8000ec6:	432a      	orrs	r2, r5
 8000ec8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ed8:	0c11      	lsrs	r1, r2, #16
 8000eda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ede:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee2:	428d      	cmp	r5, r1
 8000ee4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ee8:	d908      	bls.n	8000efc <__udivmoddi4+0x258>
 8000eea:	eb1c 0101 	adds.w	r1, ip, r1
 8000eee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef2:	d22f      	bcs.n	8000f54 <__udivmoddi4+0x2b0>
 8000ef4:	428d      	cmp	r5, r1
 8000ef6:	d92d      	bls.n	8000f54 <__udivmoddi4+0x2b0>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1b49      	subs	r1, r1, r5
 8000efe:	b292      	uxth	r2, r2
 8000f00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f04:	fb07 1115 	mls	r1, r7, r5, r1
 8000f08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f10:	4291      	cmp	r1, r2
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x282>
 8000f14:	eb1c 0202 	adds.w	r2, ip, r2
 8000f18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1c:	d216      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000f1e:	4291      	cmp	r1, r2
 8000f20:	d914      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000f22:	3d02      	subs	r5, #2
 8000f24:	4462      	add	r2, ip
 8000f26:	1a52      	subs	r2, r2, r1
 8000f28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f2c:	e738      	b.n	8000da0 <__udivmoddi4+0xfc>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e708      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000f34:	4639      	mov	r1, r7
 8000f36:	e6e6      	b.n	8000d06 <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x90>
 8000f3c:	4548      	cmp	r0, r9
 8000f3e:	d2a9      	bcs.n	8000e94 <__udivmoddi4+0x1f0>
 8000f40:	ebb9 0802 	subs.w	r8, r9, r2
 8000f44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	e7a3      	b.n	8000e94 <__udivmoddi4+0x1f0>
 8000f4c:	4645      	mov	r5, r8
 8000f4e:	e7ea      	b.n	8000f26 <__udivmoddi4+0x282>
 8000f50:	462b      	mov	r3, r5
 8000f52:	e794      	b.n	8000e7e <__udivmoddi4+0x1da>
 8000f54:	4640      	mov	r0, r8
 8000f56:	e7d1      	b.n	8000efc <__udivmoddi4+0x258>
 8000f58:	46d0      	mov	r8, sl
 8000f5a:	e77b      	b.n	8000e54 <__udivmoddi4+0x1b0>
 8000f5c:	3d02      	subs	r5, #2
 8000f5e:	4462      	add	r2, ip
 8000f60:	e732      	b.n	8000dc8 <__udivmoddi4+0x124>
 8000f62:	4608      	mov	r0, r1
 8000f64:	e70a      	b.n	8000d7c <__udivmoddi4+0xd8>
 8000f66:	4464      	add	r4, ip
 8000f68:	3802      	subs	r0, #2
 8000f6a:	e742      	b.n	8000df2 <__udivmoddi4+0x14e>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000f74:	2204      	movs	r2, #4
 8000f76:	4909      	ldr	r1, [pc, #36]	; (8000f9c <default_ip_assign+0x2c>)
 8000f78:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000f7c:	f001 fc72 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000f80:	2204      	movs	r2, #4
 8000f82:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <default_ip_assign+0x30>)
 8000f84:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000f88:	f001 fc6c 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	4905      	ldr	r1, [pc, #20]	; (8000fa4 <default_ip_assign+0x34>)
 8000f90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f94:	f001 fc66 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000254 	.word	0x20000254
 8000fa0:	2000025c 	.word	0x2000025c
 8000fa4:	20000258 	.word	0x20000258

08000fa8 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f001 fbaa 	bl	8002708 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f001 fb5b 	bl	8002670 <WIZCHIP_READ>
   default_ip_assign();
 8000fba:	f7ff ffd9 	bl	8000f70 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8000fbe:	2206      	movs	r2, #6
 8000fc0:	4903      	ldr	r1, [pc, #12]	; (8000fd0 <default_ip_update+0x28>)
 8000fc2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000fc6:	f001 fc4d 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000274 	.word	0x20000274

08000fd4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f001 fb94 	bl	8002708 <WIZCHIP_WRITE>
	getMR(); // for delay
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f001 fb45 	bl	8002670 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8000fe6:	2206      	movs	r2, #6
 8000fe8:	4903      	ldr	r1, [pc, #12]	; (8000ff8 <default_ip_conflict+0x24>)
 8000fea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000fee:	f001 fc39 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000274 	.word	0x20000274

08000ffc <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <reg_dhcp_cbfunc+0x50>)
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <reg_dhcp_cbfunc+0x54>)
 800100c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <reg_dhcp_cbfunc+0x58>)
 8001010:	4a11      	ldr	r2, [pc, #68]	; (8001058 <reg_dhcp_cbfunc+0x5c>)
 8001012:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <reg_dhcp_cbfunc+0x60>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <reg_dhcp_cbfunc+0x64>)
 8001018:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <reg_dhcp_cbfunc+0x2a>
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <reg_dhcp_cbfunc+0x50>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <reg_dhcp_cbfunc+0x36>
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <reg_dhcp_cbfunc+0x58>)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <reg_dhcp_cbfunc+0x42>
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <reg_dhcp_cbfunc+0x60>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000010 	.word	0x20000010
 8001050:	08000f71 	.word	0x08000f71
 8001054:	20000014 	.word	0x20000014
 8001058:	08000fa9 	.word	0x08000fa9
 800105c:	20000018 	.word	0x20000018
 8001060:	08000fd5 	.word	0x08000fd5

08001064 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800106a:	463b      	mov	r3, r7
 800106c:	2206      	movs	r2, #6
 800106e:	4619      	mov	r1, r3
 8001070:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001074:	f001 fb96 	bl	80027a4 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001078:	4b72      	ldr	r3, [pc, #456]	; (8001244 <makeDHCPMSG+0x1e0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001080:	4b70      	ldr	r3, [pc, #448]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001088:	4b6e      	ldr	r3, [pc, #440]	; (8001244 <makeDHCPMSG+0x1e0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2206      	movs	r2, #6
 800108e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001098:	4b6a      	ldr	r3, [pc, #424]	; (8001244 <makeDHCPMSG+0x1e0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3304      	adds	r3, #4
 800109e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80010a0:	4b69      	ldr	r3, [pc, #420]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0e1b      	lsrs	r3, r3, #24
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0c1a      	lsrs	r2, r3, #16
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0a1a      	lsrs	r2, r3, #8
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3302      	adds	r3, #2
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80010c8:	4b5f      	ldr	r3, [pc, #380]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3303      	adds	r3, #3
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80010d4:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80010dc:	4b59      	ldr	r3, [pc, #356]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	330a      	adds	r3, #10
 80010e2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3301      	adds	r3, #1
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80010f2:	4b54      	ldr	r3, [pc, #336]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80010fa:	4b52      	ldr	r3, [pc, #328]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001102:	4b50      	ldr	r3, [pc, #320]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2200      	movs	r2, #0
 8001108:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800110a:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <makeDHCPMSG+0x1e0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001112:	4b4c      	ldr	r3, [pc, #304]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800111a:	4b4a      	ldr	r3, [pc, #296]	; (8001244 <makeDHCPMSG+0x1e0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800112a:	4b46      	ldr	r3, [pc, #280]	; (8001244 <makeDHCPMSG+0x1e0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8001132:	4b44      	ldr	r3, [pc, #272]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800113a:	4b42      	ldr	r3, [pc, #264]	; (8001244 <makeDHCPMSG+0x1e0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8001142:	4b40      	ldr	r3, [pc, #256]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800114a:	4b3e      	ldr	r3, [pc, #248]	; (8001244 <makeDHCPMSG+0x1e0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8001152:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <makeDHCPMSG+0x1e0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <makeDHCPMSG+0x1e0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a35      	ldr	r2, [pc, #212]	; (800124c <makeDHCPMSG+0x1e8>)
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <makeDHCPMSG+0x1e0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a32      	ldr	r2, [pc, #200]	; (800124c <makeDHCPMSG+0x1e8>)
 8001182:	7852      	ldrb	r2, [r2, #1]
 8001184:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a30      	ldr	r2, [pc, #192]	; (800124c <makeDHCPMSG+0x1e8>)
 800118c:	7892      	ldrb	r2, [r2, #2]
 800118e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a2d      	ldr	r2, [pc, #180]	; (800124c <makeDHCPMSG+0x1e8>)
 8001196:	78d2      	ldrb	r2, [r2, #3]
 8001198:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <makeDHCPMSG+0x1e0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a2b      	ldr	r2, [pc, #172]	; (800124c <makeDHCPMSG+0x1e8>)
 80011a0:	7912      	ldrb	r2, [r2, #4]
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <makeDHCPMSG+0x1e8>)
 80011ac:	7952      	ldrb	r2, [r2, #5]
 80011ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80011b2:	2306      	movs	r3, #6
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e008      	b.n	80011ca <makeDHCPMSG+0x166>
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4413      	add	r3, r2
 80011c0:	2200      	movs	r2, #0
 80011c2:	771a      	strb	r2, [r3, #28]
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	3301      	adds	r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d9f3      	bls.n	80011b8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e009      	b.n	80011ea <makeDHCPMSG+0x186>
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	4413      	add	r3, r2
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	3301      	adds	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b3f      	cmp	r3, #63	; 0x3f
 80011ee:	d9f2      	bls.n	80011d6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e009      	b.n	800120a <makeDHCPMSG+0x1a6>
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	4413      	add	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	3301      	adds	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	daf1      	bge.n	80011f6 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2263      	movs	r2, #99	; 0x63
 8001218:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <makeDHCPMSG+0x1e0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2282      	movs	r2, #130	; 0x82
 8001222:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2253      	movs	r2, #83	; 0x53
 800122c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2263      	movs	r2, #99	; 0x63
 8001236:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000270 	.word	0x20000270
 8001248:	2000026c 	.word	0x2000026c
 800124c:	20000274 	.word	0x20000274

08001250 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800125a:	f7ff ff03 	bl	8001064 <makeDHCPMSG>

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800125e:	2304      	movs	r3, #4
 8001260:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001262:	4ba9      	ldr	r3, [pc, #676]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	1c59      	adds	r1, r3, #1
 800126a:	80b9      	strh	r1, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	2235      	movs	r2, #53	; 0x35
 8001270:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001274:	4ba4      	ldr	r3, [pc, #656]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	80b9      	strh	r1, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	2201      	movs	r2, #1
 8001282:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8001286:	4ba0      	ldr	r3, [pc, #640]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	1c59      	adds	r1, r3, #1
 800128e:	80b9      	strh	r1, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	2201      	movs	r2, #1
 8001294:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001298:	4b9b      	ldr	r3, [pc, #620]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	1c59      	adds	r1, r3, #1
 80012a0:	80b9      	strh	r1, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	223d      	movs	r2, #61	; 0x3d
 80012a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80012aa:	4b97      	ldr	r3, [pc, #604]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	80b9      	strh	r1, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	2207      	movs	r2, #7
 80012b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80012bc:	4b92      	ldr	r3, [pc, #584]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	1c59      	adds	r1, r3, #1
 80012c4:	80b9      	strh	r1, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80012ce:	4b8e      	ldr	r3, [pc, #568]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	1c59      	adds	r1, r3, #1
 80012d6:	80b9      	strh	r1, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	4b8c      	ldr	r3, [pc, #560]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80012dc:	7819      	ldrb	r1, [r3, #0]
 80012de:	1813      	adds	r3, r2, r0
 80012e0:	460a      	mov	r2, r1
 80012e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	1c59      	adds	r1, r3, #1
 80012ee:	80b9      	strh	r1, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	4b86      	ldr	r3, [pc, #536]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80012f4:	7859      	ldrb	r1, [r3, #1]
 80012f6:	1813      	adds	r3, r2, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	1c59      	adds	r1, r3, #1
 8001306:	80b9      	strh	r1, [r7, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	4b80      	ldr	r3, [pc, #512]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 800130c:	7899      	ldrb	r1, [r3, #2]
 800130e:	1813      	adds	r3, r2, r0
 8001310:	460a      	mov	r2, r1
 8001312:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001316:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	1c59      	adds	r1, r3, #1
 800131e:	80b9      	strh	r1, [r7, #4]
 8001320:	4618      	mov	r0, r3
 8001322:	4b7a      	ldr	r3, [pc, #488]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 8001324:	78d9      	ldrb	r1, [r3, #3]
 8001326:	1813      	adds	r3, r2, r0
 8001328:	460a      	mov	r2, r1
 800132a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	1c59      	adds	r1, r3, #1
 8001336:	80b9      	strh	r1, [r7, #4]
 8001338:	4618      	mov	r0, r3
 800133a:	4b74      	ldr	r3, [pc, #464]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 800133c:	7919      	ldrb	r1, [r3, #4]
 800133e:	1813      	adds	r3, r2, r0
 8001340:	460a      	mov	r2, r1
 8001342:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	1c59      	adds	r1, r3, #1
 800134e:	80b9      	strh	r1, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	4b6e      	ldr	r3, [pc, #440]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 8001354:	7959      	ldrb	r1, [r3, #5]
 8001356:	1813      	adds	r3, r2, r0
 8001358:	460a      	mov	r2, r1
 800135a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800135e:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	1c59      	adds	r1, r3, #1
 8001366:	80b9      	strh	r1, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	220c      	movs	r2, #12
 800136c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001370:	4b65      	ldr	r3, [pc, #404]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	1c59      	adds	r1, r3, #1
 8001378:	80b9      	strh	r1, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	2200      	movs	r2, #0
 800137e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	80fb      	strh	r3, [r7, #6]
 8001386:	e00f      	b.n	80013a8 <send_DHCP_DISCOVER+0x158>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001388:	88f9      	ldrh	r1, [r7, #6]
 800138a:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	1c58      	adds	r0, r3, #1
 8001392:	80b8      	strh	r0, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	4b5e      	ldr	r3, [pc, #376]	; (8001510 <send_DHCP_DISCOVER+0x2c0>)
 8001398:	5c59      	ldrb	r1, [r3, r1]
 800139a:	1813      	adds	r3, r2, r0
 800139c:	460a      	mov	r2, r1
 800139e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	3301      	adds	r3, #1
 80013a6:	80fb      	strh	r3, [r7, #6]
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	4a59      	ldr	r2, [pc, #356]	; (8001510 <send_DHCP_DISCOVER+0x2c0>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ea      	bne.n	8001388 <send_DHCP_DISCOVER+0x138>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80013b2:	4b55      	ldr	r3, [pc, #340]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	88bb      	ldrh	r3, [r7, #4]
 80013b8:	1c59      	adds	r1, r3, #1
 80013ba:	80b9      	strh	r1, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	4b53      	ldr	r3, [pc, #332]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80013c0:	78d9      	ldrb	r1, [r3, #3]
 80013c2:	1813      	adds	r3, r2, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80013ca:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	1c59      	adds	r1, r3, #1
 80013d2:	80b9      	strh	r1, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	4b4d      	ldr	r3, [pc, #308]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80013d8:	7919      	ldrb	r1, [r3, #4]
 80013da:	1813      	adds	r3, r2, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80013e2:	4b49      	ldr	r3, [pc, #292]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	88bb      	ldrh	r3, [r7, #4]
 80013e8:	1c59      	adds	r1, r3, #1
 80013ea:	80b9      	strh	r1, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80013f0:	7959      	ldrb	r1, [r3, #5]
 80013f2:	1813      	adds	r3, r2, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2d9      	uxtb	r1, r3
 80013fe:	4b42      	ldr	r3, [pc, #264]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	88b8      	ldrh	r0, [r7, #4]
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	3304      	adds	r3, #4
 8001408:	1ac3      	subs	r3, r0, r3
 800140a:	3103      	adds	r1, #3
 800140c:	b2c9      	uxtb	r1, r1
 800140e:	4413      	add	r3, r2
 8001410:	460a      	mov	r2, r1
 8001412:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001416:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	1c59      	adds	r1, r3, #1
 800141e:	80b9      	strh	r1, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	2237      	movs	r2, #55	; 0x37
 8001424:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	88bb      	ldrh	r3, [r7, #4]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	80b9      	strh	r1, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	2206      	movs	r2, #6
 8001436:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	80b9      	strh	r1, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	2201      	movs	r2, #1
 8001448:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	80b9      	strh	r1, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	2203      	movs	r2, #3
 800145a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	1c59      	adds	r1, r3, #1
 8001466:	80b9      	strh	r1, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	2206      	movs	r2, #6
 800146c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001470:	4b25      	ldr	r3, [pc, #148]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	1c59      	adds	r1, r3, #1
 8001478:	80b9      	strh	r1, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	220f      	movs	r2, #15
 800147e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	80b9      	strh	r1, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	223a      	movs	r2, #58	; 0x3a
 8001490:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	1c59      	adds	r1, r3, #1
 800149c:	80b9      	strh	r1, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	223b      	movs	r2, #59	; 0x3b
 80014a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	1c59      	adds	r1, r3, #1
 80014ae:	80b9      	strh	r1, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	22ff      	movs	r2, #255	; 0xff
 80014b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	80fb      	strh	r3, [r7, #6]
 80014bc:	e009      	b.n	80014d2 <send_DHCP_DISCOVER+0x282>
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	4413      	add	r3, r2
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	3301      	adds	r3, #1
 80014d0:	80fb      	strh	r3, [r7, #6]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80014d8:	d3f1      	bcc.n	80014be <send_DHCP_DISCOVER+0x26e>

	// send broadcasting packet
	ip[0] = 255;
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80014de:	23ff      	movs	r3, #255	; 0xff
 80014e0:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80014e2:	23ff      	movs	r3, #255	; 0xff
 80014e4:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80014e6:	23ff      	movs	r3, #255	; 0xff
 80014e8:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <send_DHCP_DISCOVER+0x2c4>)
 80014ec:	7818      	ldrb	r0, [r3, #0]
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	463b      	mov	r3, r7
 80014f4:	2243      	movs	r2, #67	; 0x43
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80014fc:	f002 f82c 	bl	8003558 <sendto>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000270 	.word	0x20000270
 800150c:	20000274 	.word	0x20000274
 8001510:	20000008 	.word	0x20000008
 8001514:	20000248 	.word	0x20000248

08001518 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001522:	f7ff fd9f 	bl	8001064 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <send_DHCP_REQUEST+0x7c>)
 8001528:	f993 3000 	ldrsb.w	r3, [r3]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d004      	beq.n	800153a <send_DHCP_REQUEST+0x22>
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <send_DHCP_REQUEST+0x7c>)
 8001532:	f993 3000 	ldrsb.w	r3, [r3]
 8001536:	2b04      	cmp	r3, #4
 8001538:	d134      	bne.n	80015a4 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <send_DHCP_REQUEST+0x80>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	330a      	adds	r3, #10
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	330a      	adds	r3, #10
 800154a:	3301      	adds	r3, #1
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a11      	ldr	r2, [pc, #68]	; (800159c <send_DHCP_REQUEST+0x84>)
 8001556:	7812      	ldrb	r2, [r2, #0]
 8001558:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <send_DHCP_REQUEST+0x80>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <send_DHCP_REQUEST+0x84>)
 8001560:	7852      	ldrb	r2, [r2, #1]
 8001562:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <send_DHCP_REQUEST+0x84>)
 800156a:	7892      	ldrb	r2, [r2, #2]
 800156c:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <send_DHCP_REQUEST+0x84>)
 8001574:	78d2      	ldrb	r2, [r2, #3]
 8001576:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	e010      	b.n	80015b4 <send_DHCP_REQUEST+0x9c>
 8001592:	bf00      	nop
 8001594:	20000264 	.word	0x20000264
 8001598:	20000270 	.word	0x20000270
 800159c:	20000254 	.word	0x20000254
 80015a0:	2000024c 	.word	0x2000024c
   }
   else
   {
   	ip[0] = 255;
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80015a8:	23ff      	movs	r3, #255	; 0xff
 80015aa:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80015ac:	23ff      	movs	r3, #255	; 0xff
 80015ae:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80015b0:	23ff      	movs	r3, #255	; 0xff
 80015b2:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80015b4:	2304      	movs	r3, #4
 80015b6:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80015b8:	4b8d      	ldr	r3, [pc, #564]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	897b      	ldrh	r3, [r7, #10]
 80015be:	1c59      	adds	r1, r3, #1
 80015c0:	8179      	strh	r1, [r7, #10]
 80015c2:	4413      	add	r3, r2
 80015c4:	2235      	movs	r2, #53	; 0x35
 80015c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	897b      	ldrh	r3, [r7, #10]
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	8179      	strh	r1, [r7, #10]
 80015d4:	4413      	add	r3, r2
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80015dc:	4b84      	ldr	r3, [pc, #528]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	897b      	ldrh	r3, [r7, #10]
 80015e2:	1c59      	adds	r1, r3, #1
 80015e4:	8179      	strh	r1, [r7, #10]
 80015e6:	4413      	add	r3, r2
 80015e8:	2203      	movs	r2, #3
 80015ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80015ee:	4b80      	ldr	r3, [pc, #512]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	1c59      	adds	r1, r3, #1
 80015f6:	8179      	strh	r1, [r7, #10]
 80015f8:	4413      	add	r3, r2
 80015fa:	223d      	movs	r2, #61	; 0x3d
 80015fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001600:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	897b      	ldrh	r3, [r7, #10]
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	8179      	strh	r1, [r7, #10]
 800160a:	4413      	add	r3, r2
 800160c:	2207      	movs	r2, #7
 800160e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001612:	4b77      	ldr	r3, [pc, #476]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	897b      	ldrh	r3, [r7, #10]
 8001618:	1c59      	adds	r1, r3, #1
 800161a:	8179      	strh	r1, [r7, #10]
 800161c:	4413      	add	r3, r2
 800161e:	2201      	movs	r2, #1
 8001620:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001624:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	897b      	ldrh	r3, [r7, #10]
 800162a:	1c59      	adds	r1, r3, #1
 800162c:	8179      	strh	r1, [r7, #10]
 800162e:	4618      	mov	r0, r3
 8001630:	4b70      	ldr	r3, [pc, #448]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 8001632:	7819      	ldrb	r1, [r3, #0]
 8001634:	1813      	adds	r3, r2, r0
 8001636:	460a      	mov	r2, r1
 8001638:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800163c:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	897b      	ldrh	r3, [r7, #10]
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	8179      	strh	r1, [r7, #10]
 8001646:	4618      	mov	r0, r3
 8001648:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 800164a:	7859      	ldrb	r1, [r3, #1]
 800164c:	1813      	adds	r3, r2, r0
 800164e:	460a      	mov	r2, r1
 8001650:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001654:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	897b      	ldrh	r3, [r7, #10]
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	8179      	strh	r1, [r7, #10]
 800165e:	4618      	mov	r0, r3
 8001660:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 8001662:	7899      	ldrb	r1, [r3, #2]
 8001664:	1813      	adds	r3, r2, r0
 8001666:	460a      	mov	r2, r1
 8001668:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800166c:	4b60      	ldr	r3, [pc, #384]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	897b      	ldrh	r3, [r7, #10]
 8001672:	1c59      	adds	r1, r3, #1
 8001674:	8179      	strh	r1, [r7, #10]
 8001676:	4618      	mov	r0, r3
 8001678:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 800167a:	78d9      	ldrb	r1, [r3, #3]
 800167c:	1813      	adds	r3, r2, r0
 800167e:	460a      	mov	r2, r1
 8001680:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001684:	4b5a      	ldr	r3, [pc, #360]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	897b      	ldrh	r3, [r7, #10]
 800168a:	1c59      	adds	r1, r3, #1
 800168c:	8179      	strh	r1, [r7, #10]
 800168e:	4618      	mov	r0, r3
 8001690:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 8001692:	7919      	ldrb	r1, [r3, #4]
 8001694:	1813      	adds	r3, r2, r0
 8001696:	460a      	mov	r2, r1
 8001698:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800169c:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	1c59      	adds	r1, r3, #1
 80016a4:	8179      	strh	r1, [r7, #10]
 80016a6:	4618      	mov	r0, r3
 80016a8:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 80016aa:	7959      	ldrb	r1, [r3, #5]
 80016ac:	1813      	adds	r3, r2, r0
 80016ae:	460a      	mov	r2, r1
 80016b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2bff      	cmp	r3, #255	; 0xff
 80016b8:	f040 8084 	bne.w	80017c4 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80016bc:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	897b      	ldrh	r3, [r7, #10]
 80016c2:	1c59      	adds	r1, r3, #1
 80016c4:	8179      	strh	r1, [r7, #10]
 80016c6:	4413      	add	r3, r2
 80016c8:	2232      	movs	r2, #50	; 0x32
 80016ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80016ce:	4b48      	ldr	r3, [pc, #288]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	897b      	ldrh	r3, [r7, #10]
 80016d4:	1c59      	adds	r1, r3, #1
 80016d6:	8179      	strh	r1, [r7, #10]
 80016d8:	4413      	add	r3, r2
 80016da:	2204      	movs	r2, #4
 80016dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80016e0:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	897b      	ldrh	r3, [r7, #10]
 80016e6:	1c59      	adds	r1, r3, #1
 80016e8:	8179      	strh	r1, [r7, #10]
 80016ea:	4618      	mov	r0, r3
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 80016ee:	7819      	ldrb	r1, [r3, #0]
 80016f0:	1813      	adds	r3, r2, r0
 80016f2:	460a      	mov	r2, r1
 80016f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80016f8:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	897b      	ldrh	r3, [r7, #10]
 80016fe:	1c59      	adds	r1, r3, #1
 8001700:	8179      	strh	r1, [r7, #10]
 8001702:	4618      	mov	r0, r3
 8001704:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 8001706:	7859      	ldrb	r1, [r3, #1]
 8001708:	1813      	adds	r3, r2, r0
 800170a:	460a      	mov	r2, r1
 800170c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001710:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	897b      	ldrh	r3, [r7, #10]
 8001716:	1c59      	adds	r1, r3, #1
 8001718:	8179      	strh	r1, [r7, #10]
 800171a:	4618      	mov	r0, r3
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 800171e:	7899      	ldrb	r1, [r3, #2]
 8001720:	1813      	adds	r3, r2, r0
 8001722:	460a      	mov	r2, r1
 8001724:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	897b      	ldrh	r3, [r7, #10]
 800172e:	1c59      	adds	r1, r3, #1
 8001730:	8179      	strh	r1, [r7, #10]
 8001732:	4618      	mov	r0, r3
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 8001736:	78d9      	ldrb	r1, [r3, #3]
 8001738:	1813      	adds	r3, r2, r0
 800173a:	460a      	mov	r2, r1
 800173c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	897b      	ldrh	r3, [r7, #10]
 8001746:	1c59      	adds	r1, r3, #1
 8001748:	8179      	strh	r1, [r7, #10]
 800174a:	4413      	add	r3, r2
 800174c:	2236      	movs	r2, #54	; 0x36
 800174e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	897b      	ldrh	r3, [r7, #10]
 8001758:	1c59      	adds	r1, r3, #1
 800175a:	8179      	strh	r1, [r7, #10]
 800175c:	4413      	add	r3, r2
 800175e:	2204      	movs	r2, #4
 8001760:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	897b      	ldrh	r3, [r7, #10]
 800176a:	1c59      	adds	r1, r3, #1
 800176c:	8179      	strh	r1, [r7, #10]
 800176e:	4618      	mov	r0, r3
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 8001772:	7819      	ldrb	r1, [r3, #0]
 8001774:	1813      	adds	r3, r2, r0
 8001776:	460a      	mov	r2, r1
 8001778:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	897b      	ldrh	r3, [r7, #10]
 8001782:	1c59      	adds	r1, r3, #1
 8001784:	8179      	strh	r1, [r7, #10]
 8001786:	4618      	mov	r0, r3
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 800178a:	7859      	ldrb	r1, [r3, #1]
 800178c:	1813      	adds	r3, r2, r0
 800178e:	460a      	mov	r2, r1
 8001790:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	897b      	ldrh	r3, [r7, #10]
 800179a:	1c59      	adds	r1, r3, #1
 800179c:	8179      	strh	r1, [r7, #10]
 800179e:	4618      	mov	r0, r3
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 80017a2:	7899      	ldrb	r1, [r3, #2]
 80017a4:	1813      	adds	r3, r2, r0
 80017a6:	460a      	mov	r2, r1
 80017a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	897b      	ldrh	r3, [r7, #10]
 80017b2:	1c59      	adds	r1, r3, #1
 80017b4:	8179      	strh	r1, [r7, #10]
 80017b6:	4618      	mov	r0, r3
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 80017ba:	78d9      	ldrb	r1, [r3, #3]
 80017bc:	1813      	adds	r3, r2, r0
 80017be:	460a      	mov	r2, r1
 80017c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	897b      	ldrh	r3, [r7, #10]
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	8179      	strh	r1, [r7, #10]
 80017ce:	4413      	add	r3, r2
 80017d0:	220c      	movs	r2, #12
 80017d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	1c59      	adds	r1, r3, #1
 80017de:	8179      	strh	r1, [r7, #10]
 80017e0:	4413      	add	r3, r2
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e019      	b.n	8001822 <send_DHCP_REQUEST+0x30a>
 80017ee:	bf00      	nop
 80017f0:	20000270 	.word	0x20000270
 80017f4:	20000274 	.word	0x20000274
 80017f8:	20000254 	.word	0x20000254
 80017fc:	2000024c 	.word	0x2000024c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001800:	4b86      	ldr	r3, [pc, #536]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	897b      	ldrh	r3, [r7, #10]
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	8179      	strh	r1, [r7, #10]
 800180a:	4618      	mov	r0, r3
 800180c:	4984      	ldr	r1, [pc, #528]	; (8001a20 <send_DHCP_REQUEST+0x508>)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	440b      	add	r3, r1
 8001812:	7819      	ldrb	r1, [r3, #0]
 8001814:	1813      	adds	r3, r2, r0
 8001816:	460a      	mov	r2, r1
 8001818:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4a7f      	ldr	r2, [pc, #508]	; (8001a20 <send_DHCP_REQUEST+0x508>)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1e8      	bne.n	8001800 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800182e:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001830:	78db      	ldrb	r3, [r3, #3]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	897b      	ldrh	r3, [r7, #10]
 800183c:	1c59      	adds	r1, r3, #1
 800183e:	8179      	strh	r1, [r7, #10]
 8001840:	461d      	mov	r5, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 fede 	bl	8002604 <NibbleToHex>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	1963      	adds	r3, r4, r5
 800184e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001852:	4b74      	ldr	r3, [pc, #464]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001854:	78da      	ldrb	r2, [r3, #3]
 8001856:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	1c59      	adds	r1, r3, #1
 800185e:	8179      	strh	r1, [r7, #10]
 8001860:	461d      	mov	r5, r3
 8001862:	4610      	mov	r0, r2
 8001864:	f000 fece 	bl	8002604 <NibbleToHex>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	1963      	adds	r3, r4, r5
 800186e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001872:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001874:	791b      	ldrb	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800187c:	681c      	ldr	r4, [r3, #0]
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	1c59      	adds	r1, r3, #1
 8001882:	8179      	strh	r1, [r7, #10]
 8001884:	461d      	mov	r5, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f000 febc 	bl	8002604 <NibbleToHex>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	1963      	adds	r3, r4, r5
 8001892:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001898:	791a      	ldrb	r2, [r3, #4]
 800189a:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800189c:	681c      	ldr	r4, [r3, #0]
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	1c59      	adds	r1, r3, #1
 80018a2:	8179      	strh	r1, [r7, #10]
 80018a4:	461d      	mov	r5, r3
 80018a6:	4610      	mov	r0, r2
 80018a8:	f000 feac 	bl	8002604 <NibbleToHex>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	1963      	adds	r3, r4, r5
 80018b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80018b6:	4b5b      	ldr	r3, [pc, #364]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 80018b8:	795b      	ldrb	r3, [r3, #5]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80018c0:	681c      	ldr	r4, [r3, #0]
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	1c59      	adds	r1, r3, #1
 80018c6:	8179      	strh	r1, [r7, #10]
 80018c8:	461d      	mov	r5, r3
 80018ca:	4610      	mov	r0, r2
 80018cc:	f000 fe9a 	bl	8002604 <NibbleToHex>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	1963      	adds	r3, r4, r5
 80018d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80018da:	4b52      	ldr	r3, [pc, #328]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 80018dc:	795a      	ldrb	r2, [r3, #5]
 80018de:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80018e0:	681c      	ldr	r4, [r3, #0]
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	1c59      	adds	r1, r3, #1
 80018e6:	8179      	strh	r1, [r7, #10]
 80018e8:	461d      	mov	r5, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	f000 fe8a 	bl	8002604 <NibbleToHex>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	1963      	adds	r3, r4, r5
 80018f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	b2d9      	uxtb	r1, r3
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	8978      	ldrh	r0, [r7, #10]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3307      	adds	r3, #7
 8001908:	1ac3      	subs	r3, r0, r3
 800190a:	3106      	adds	r1, #6
 800190c:	b2c9      	uxtb	r1, r1
 800190e:	4413      	add	r3, r2
 8001910:	460a      	mov	r2, r1
 8001912:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	897b      	ldrh	r3, [r7, #10]
 800191c:	1c59      	adds	r1, r3, #1
 800191e:	8179      	strh	r1, [r7, #10]
 8001920:	4413      	add	r3, r2
 8001922:	2237      	movs	r2, #55	; 0x37
 8001924:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001928:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	897b      	ldrh	r3, [r7, #10]
 800192e:	1c59      	adds	r1, r3, #1
 8001930:	8179      	strh	r1, [r7, #10]
 8001932:	4413      	add	r3, r2
 8001934:	2208      	movs	r2, #8
 8001936:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	1c59      	adds	r1, r3, #1
 8001942:	8179      	strh	r1, [r7, #10]
 8001944:	4413      	add	r3, r2
 8001946:	2201      	movs	r2, #1
 8001948:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	897b      	ldrh	r3, [r7, #10]
 8001952:	1c59      	adds	r1, r3, #1
 8001954:	8179      	strh	r1, [r7, #10]
 8001956:	4413      	add	r3, r2
 8001958:	2203      	movs	r2, #3
 800195a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	8179      	strh	r1, [r7, #10]
 8001968:	4413      	add	r3, r2
 800196a:	2206      	movs	r2, #6
 800196c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	897b      	ldrh	r3, [r7, #10]
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	8179      	strh	r1, [r7, #10]
 800197a:	4413      	add	r3, r2
 800197c:	220f      	movs	r2, #15
 800197e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	1c59      	adds	r1, r3, #1
 800198a:	8179      	strh	r1, [r7, #10]
 800198c:	4413      	add	r3, r2
 800198e:	223a      	movs	r2, #58	; 0x3a
 8001990:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	897b      	ldrh	r3, [r7, #10]
 800199a:	1c59      	adds	r1, r3, #1
 800199c:	8179      	strh	r1, [r7, #10]
 800199e:	4413      	add	r3, r2
 80019a0:	223b      	movs	r2, #59	; 0x3b
 80019a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	897b      	ldrh	r3, [r7, #10]
 80019ac:	1c59      	adds	r1, r3, #1
 80019ae:	8179      	strh	r1, [r7, #10]
 80019b0:	4413      	add	r3, r2
 80019b2:	221f      	movs	r2, #31
 80019b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	897b      	ldrh	r3, [r7, #10]
 80019be:	1c59      	adds	r1, r3, #1
 80019c0:	8179      	strh	r1, [r7, #10]
 80019c2:	4413      	add	r3, r2
 80019c4:	2221      	movs	r2, #33	; 0x21
 80019c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	1c59      	adds	r1, r3, #1
 80019d2:	8179      	strh	r1, [r7, #10]
 80019d4:	4413      	add	r3, r2
 80019d6:	22ff      	movs	r2, #255	; 0xff
 80019d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e009      	b.n	80019f6 <send_DHCP_REQUEST+0x4de>
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	33ec      	adds	r3, #236	; 0xec
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80019fc:	dbf1      	blt.n	80019e2 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <send_DHCP_REQUEST+0x510>)
 8001a00:	7818      	ldrb	r0, [r3, #0]
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2243      	movs	r2, #67	; 0x43
 8001a0a:	9200      	str	r2, [sp, #0]
 8001a0c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001a10:	f001 fda2 	bl	8003558 <sendto>

}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1c:	20000270 	.word	0x20000270
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000274 	.word	0x20000274
 8001a28:	20000248 	.word	0x20000248

08001a2c <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001a36:	f7ff fb15 	bl	8001064 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001a3e:	4b9f      	ldr	r3, [pc, #636]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	330a      	adds	r3, #10
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001a48:	4b9c      	ldr	r3, [pc, #624]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	330a      	adds	r3, #10
 8001a4e:	3301      	adds	r3, #1
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001a54:	4b99      	ldr	r3, [pc, #612]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	897b      	ldrh	r3, [r7, #10]
 8001a5a:	1c59      	adds	r1, r3, #1
 8001a5c:	8179      	strh	r1, [r7, #10]
 8001a5e:	4413      	add	r3, r2
 8001a60:	2235      	movs	r2, #53	; 0x35
 8001a62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001a66:	4b95      	ldr	r3, [pc, #596]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	897b      	ldrh	r3, [r7, #10]
 8001a6c:	1c59      	adds	r1, r3, #1
 8001a6e:	8179      	strh	r1, [r7, #10]
 8001a70:	4413      	add	r3, r2
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001a78:	4b90      	ldr	r3, [pc, #576]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	897b      	ldrh	r3, [r7, #10]
 8001a7e:	1c59      	adds	r1, r3, #1
 8001a80:	8179      	strh	r1, [r7, #10]
 8001a82:	4413      	add	r3, r2
 8001a84:	2204      	movs	r2, #4
 8001a86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	897b      	ldrh	r3, [r7, #10]
 8001a90:	1c59      	adds	r1, r3, #1
 8001a92:	8179      	strh	r1, [r7, #10]
 8001a94:	4413      	add	r3, r2
 8001a96:	223d      	movs	r2, #61	; 0x3d
 8001a98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001a9c:	4b87      	ldr	r3, [pc, #540]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	897b      	ldrh	r3, [r7, #10]
 8001aa2:	1c59      	adds	r1, r3, #1
 8001aa4:	8179      	strh	r1, [r7, #10]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001aae:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	897b      	ldrh	r3, [r7, #10]
 8001ab4:	1c59      	adds	r1, r3, #1
 8001ab6:	8179      	strh	r1, [r7, #10]
 8001ab8:	4413      	add	r3, r2
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001ac0:	4b7e      	ldr	r3, [pc, #504]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	897b      	ldrh	r3, [r7, #10]
 8001ac6:	1c59      	adds	r1, r3, #1
 8001ac8:	8179      	strh	r1, [r7, #10]
 8001aca:	4618      	mov	r0, r3
 8001acc:	4b7c      	ldr	r3, [pc, #496]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001ace:	7819      	ldrb	r1, [r3, #0]
 8001ad0:	1813      	adds	r3, r2, r0
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001ad8:	4b78      	ldr	r3, [pc, #480]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	897b      	ldrh	r3, [r7, #10]
 8001ade:	1c59      	adds	r1, r3, #1
 8001ae0:	8179      	strh	r1, [r7, #10]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001ae6:	7859      	ldrb	r1, [r3, #1]
 8001ae8:	1813      	adds	r3, r2, r0
 8001aea:	460a      	mov	r2, r1
 8001aec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001af0:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	1c59      	adds	r1, r3, #1
 8001af8:	8179      	strh	r1, [r7, #10]
 8001afa:	4618      	mov	r0, r3
 8001afc:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001afe:	7899      	ldrb	r1, [r3, #2]
 8001b00:	1813      	adds	r3, r2, r0
 8001b02:	460a      	mov	r2, r1
 8001b04:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001b08:	4b6c      	ldr	r3, [pc, #432]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	897b      	ldrh	r3, [r7, #10]
 8001b0e:	1c59      	adds	r1, r3, #1
 8001b10:	8179      	strh	r1, [r7, #10]
 8001b12:	4618      	mov	r0, r3
 8001b14:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001b16:	78d9      	ldrb	r1, [r3, #3]
 8001b18:	1813      	adds	r3, r2, r0
 8001b1a:	460a      	mov	r2, r1
 8001b1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001b20:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	1c59      	adds	r1, r3, #1
 8001b28:	8179      	strh	r1, [r7, #10]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001b2e:	7919      	ldrb	r1, [r3, #4]
 8001b30:	1813      	adds	r3, r2, r0
 8001b32:	460a      	mov	r2, r1
 8001b34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001b38:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	8179      	strh	r1, [r7, #10]
 8001b42:	4618      	mov	r0, r3
 8001b44:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001b46:	7959      	ldrb	r1, [r3, #5]
 8001b48:	1813      	adds	r3, r2, r0
 8001b4a:	460a      	mov	r2, r1
 8001b4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001b50:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	1c59      	adds	r1, r3, #1
 8001b58:	8179      	strh	r1, [r7, #10]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	2232      	movs	r2, #50	; 0x32
 8001b5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001b62:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	1c59      	adds	r1, r3, #1
 8001b6a:	8179      	strh	r1, [r7, #10]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2204      	movs	r2, #4
 8001b70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001b74:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	8179      	strh	r1, [r7, #10]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001b82:	7819      	ldrb	r1, [r3, #0]
 8001b84:	1813      	adds	r3, r2, r0
 8001b86:	460a      	mov	r2, r1
 8001b88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	1c59      	adds	r1, r3, #1
 8001b94:	8179      	strh	r1, [r7, #10]
 8001b96:	4618      	mov	r0, r3
 8001b98:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001b9a:	7859      	ldrb	r1, [r3, #1]
 8001b9c:	1813      	adds	r3, r2, r0
 8001b9e:	460a      	mov	r2, r1
 8001ba0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001ba4:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	897b      	ldrh	r3, [r7, #10]
 8001baa:	1c59      	adds	r1, r3, #1
 8001bac:	8179      	strh	r1, [r7, #10]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001bb2:	7899      	ldrb	r1, [r3, #2]
 8001bb4:	1813      	adds	r3, r2, r0
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	1c59      	adds	r1, r3, #1
 8001bc4:	8179      	strh	r1, [r7, #10]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001bca:	78d9      	ldrb	r1, [r3, #3]
 8001bcc:	1813      	adds	r3, r2, r0
 8001bce:	460a      	mov	r2, r1
 8001bd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001bd4:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	897b      	ldrh	r3, [r7, #10]
 8001bda:	1c59      	adds	r1, r3, #1
 8001bdc:	8179      	strh	r1, [r7, #10]
 8001bde:	4413      	add	r3, r2
 8001be0:	2236      	movs	r2, #54	; 0x36
 8001be2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001be6:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	897b      	ldrh	r3, [r7, #10]
 8001bec:	1c59      	adds	r1, r3, #1
 8001bee:	8179      	strh	r1, [r7, #10]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	897b      	ldrh	r3, [r7, #10]
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	8179      	strh	r1, [r7, #10]
 8001c02:	4618      	mov	r0, r3
 8001c04:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c06:	7819      	ldrb	r1, [r3, #0]
 8001c08:	1813      	adds	r3, r2, r0
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	8179      	strh	r1, [r7, #10]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c1e:	7859      	ldrb	r1, [r3, #1]
 8001c20:	1813      	adds	r3, r2, r0
 8001c22:	460a      	mov	r2, r1
 8001c24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	8179      	strh	r1, [r7, #10]
 8001c32:	4618      	mov	r0, r3
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c36:	7899      	ldrb	r1, [r3, #2]
 8001c38:	1813      	adds	r3, r2, r0
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	1c59      	adds	r1, r3, #1
 8001c48:	8179      	strh	r1, [r7, #10]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c4e:	78d9      	ldrb	r1, [r3, #3]
 8001c50:	1813      	adds	r3, r2, r0
 8001c52:	460a      	mov	r2, r1
 8001c54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	897b      	ldrh	r3, [r7, #10]
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	8179      	strh	r1, [r7, #10]
 8001c62:	4413      	add	r3, r2
 8001c64:	22ff      	movs	r2, #255	; 0xff
 8001c66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e009      	b.n	8001c84 <send_DHCP_DECLINE+0x258>
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	33ec      	adds	r3, #236	; 0xec
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001c8a:	dbf1      	blt.n	8001c70 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001c8c:	23ff      	movs	r3, #255	; 0xff
 8001c8e:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001c90:	23ff      	movs	r3, #255	; 0xff
 8001c92:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001c94:	23ff      	movs	r3, #255	; 0xff
 8001c96:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001c98:	23ff      	movs	r3, #255	; 0xff
 8001c9a:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <send_DHCP_DECLINE+0x2a0>)
 8001c9e:	7818      	ldrb	r0, [r3, #0]
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2243      	movs	r2, #67	; 0x43
 8001ca8:	9200      	str	r2, [sp, #0]
 8001caa:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001cae:	f001 fc53 	bl	8003558 <sendto>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000270 	.word	0x20000270
 8001cc0:	20000274 	.word	0x20000274
 8001cc4:	20000254 	.word	0x20000254
 8001cc8:	2000024c 	.word	0x2000024c
 8001ccc:	20000248 	.word	0x20000248

08001cd0 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001cda:	4baa      	ldr	r3, [pc, #680]	; (8001f84 <parseDHCPMSG+0x2b4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fe6b 	bl	80029ba <getSn_RX_RSR>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	823b      	strh	r3, [r7, #16]
 8001ce8:	8a3b      	ldrh	r3, [r7, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d011      	beq.n	8001d12 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001cee:	4ba5      	ldr	r3, [pc, #660]	; (8001f84 <parseDHCPMSG+0x2b4>)
 8001cf0:	7818      	ldrb	r0, [r3, #0]
 8001cf2:	4ba5      	ldr	r3, [pc, #660]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001cf4:	6819      	ldr	r1, [r3, #0]
 8001cf6:	1d3c      	adds	r4, r7, #4
 8001cf8:	8a3a      	ldrh	r2, [r7, #16]
 8001cfa:	1cbb      	adds	r3, r7, #2
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4623      	mov	r3, r4
 8001d00:	f001 fd60 	bl	80037c4 <recvfrom>
 8001d04:	4603      	mov	r3, r0
 8001d06:	823b      	strh	r3, [r7, #16]
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;

   if (svr_port == DHCP_SERVER_PORT) {
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	2b43      	cmp	r3, #67	; 0x43
 8001d0c:	f040 81a7 	bne.w	800205e <parseDHCPMSG+0x38e>
 8001d10:	e001      	b.n	8001d16 <parseDHCPMSG+0x46>
   else return 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e1a5      	b.n	8002062 <parseDHCPMSG+0x392>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001d16:	4b9c      	ldr	r3, [pc, #624]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	7f1a      	ldrb	r2, [r3, #28]
 8001d1c:	4b9b      	ldr	r3, [pc, #620]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d124      	bne.n	8001d6e <parseDHCPMSG+0x9e>
 8001d24:	4b98      	ldr	r3, [pc, #608]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	7f5a      	ldrb	r2, [r3, #29]
 8001d2a:	4b98      	ldr	r3, [pc, #608]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d11d      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d32:	4b95      	ldr	r3, [pc, #596]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	7f9a      	ldrb	r2, [r3, #30]
 8001d38:	4b94      	ldr	r3, [pc, #592]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d3a:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d116      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d40:	4b91      	ldr	r3, [pc, #580]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	7fda      	ldrb	r2, [r3, #31]
 8001d46:	4b91      	ldr	r3, [pc, #580]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d48:	78db      	ldrb	r3, [r3, #3]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d10f      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001d4e:	4b8e      	ldr	r3, [pc, #568]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001d56:	4b8d      	ldr	r3, [pc, #564]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d58:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d107      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001d5e:	4b8a      	ldr	r3, [pc, #552]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001d66:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <parseDHCPMSG+0xa2>
         return 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e177      	b.n	8002062 <parseDHCPMSG+0x392>
		p = (uint8_t *)(&pDHCPMSG->op);
 8001d72:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	33f0      	adds	r3, #240	; 0xf0
 8001d7c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001d7e:	8a3b      	ldrh	r3, [r7, #16]
 8001d80:	3bf0      	subs	r3, #240	; 0xf0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4413      	add	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001d88:	e164      	b.n	8002054 <parseDHCPMSG+0x384>

			switch ( *p ) {
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b36      	cmp	r3, #54	; 0x36
 8001d90:	dc76      	bgt.n	8001e80 <parseDHCPMSG+0x1b0>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f2c0 8151 	blt.w	800203a <parseDHCPMSG+0x36a>
 8001d98:	2b36      	cmp	r3, #54	; 0x36
 8001d9a:	f200 814e 	bhi.w	800203a <parseDHCPMSG+0x36a>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <parseDHCPMSG+0xd4>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001e8d 	.word	0x08001e8d
 8001da8:	08001ead 	.word	0x08001ead
 8001dac:	0800203b 	.word	0x0800203b
 8001db0:	08001eeb 	.word	0x08001eeb
 8001db4:	0800203b 	.word	0x0800203b
 8001db8:	0800203b 	.word	0x0800203b
 8001dbc:	08001f37 	.word	0x08001f37
 8001dc0:	0800203b 	.word	0x0800203b
 8001dc4:	0800203b 	.word	0x0800203b
 8001dc8:	0800203b 	.word	0x0800203b
 8001dcc:	0800203b 	.word	0x0800203b
 8001dd0:	0800203b 	.word	0x0800203b
 8001dd4:	0800203b 	.word	0x0800203b
 8001dd8:	0800203b 	.word	0x0800203b
 8001ddc:	0800203b 	.word	0x0800203b
 8001de0:	0800203b 	.word	0x0800203b
 8001de4:	0800203b 	.word	0x0800203b
 8001de8:	0800203b 	.word	0x0800203b
 8001dec:	0800203b 	.word	0x0800203b
 8001df0:	0800203b 	.word	0x0800203b
 8001df4:	0800203b 	.word	0x0800203b
 8001df8:	0800203b 	.word	0x0800203b
 8001dfc:	0800203b 	.word	0x0800203b
 8001e00:	0800203b 	.word	0x0800203b
 8001e04:	0800203b 	.word	0x0800203b
 8001e08:	0800203b 	.word	0x0800203b
 8001e0c:	0800203b 	.word	0x0800203b
 8001e10:	0800203b 	.word	0x0800203b
 8001e14:	0800203b 	.word	0x0800203b
 8001e18:	0800203b 	.word	0x0800203b
 8001e1c:	0800203b 	.word	0x0800203b
 8001e20:	0800203b 	.word	0x0800203b
 8001e24:	0800203b 	.word	0x0800203b
 8001e28:	0800203b 	.word	0x0800203b
 8001e2c:	0800203b 	.word	0x0800203b
 8001e30:	0800203b 	.word	0x0800203b
 8001e34:	0800203b 	.word	0x0800203b
 8001e38:	0800203b 	.word	0x0800203b
 8001e3c:	0800203b 	.word	0x0800203b
 8001e40:	0800203b 	.word	0x0800203b
 8001e44:	0800203b 	.word	0x0800203b
 8001e48:	0800203b 	.word	0x0800203b
 8001e4c:	0800203b 	.word	0x0800203b
 8001e50:	0800203b 	.word	0x0800203b
 8001e54:	0800203b 	.word	0x0800203b
 8001e58:	0800203b 	.word	0x0800203b
 8001e5c:	0800203b 	.word	0x0800203b
 8001e60:	0800203b 	.word	0x0800203b
 8001e64:	0800203b 	.word	0x0800203b
 8001e68:	0800203b 	.word	0x0800203b
 8001e6c:	0800203b 	.word	0x0800203b
 8001e70:	08001f9d 	.word	0x08001f9d
 8001e74:	0800203b 	.word	0x0800203b
 8001e78:	08001e95 	.word	0x08001e95
 8001e7c:	08001ff9 	.word	0x08001ff9
 8001e80:	2bff      	cmp	r3, #255	; 0xff
 8001e82:	f040 80da 	bne.w	800203a <parseDHCPMSG+0x36a>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	617b      	str	r3, [r7, #20]
   				break;
 8001e8a:	e0e3      	b.n	8002054 <parseDHCPMSG+0x384>
            case padOption :
   				p++;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
   				break;
 8001e92:	e0df      	b.n	8002054 <parseDHCPMSG+0x384>
   			case dhcpMessageType :
   				p++;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
   				p++;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	617a      	str	r2, [r7, #20]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	74fb      	strb	r3, [r7, #19]
   				break;
 8001eaa:	e0d3      	b.n	8002054 <parseDHCPMSG+0x384>
   			case subnetMask :
   				p++;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
   				p++;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	617a      	str	r2, [r7, #20]
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001ec2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	617a      	str	r2, [r7, #20]
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001ece:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	617a      	str	r2, [r7, #20]
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001eda:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	617a      	str	r2, [r7, #20]
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001ee6:	70da      	strb	r2, [r3, #3]
   				break;
 8001ee8:	e0b4      	b.n	8002054 <parseDHCPMSG+0x384>
   			case routersOnSubnet :
   				p++;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	617a      	str	r2, [r7, #20]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	617a      	str	r2, [r7, #20]
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f04:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	617a      	str	r2, [r7, #20]
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f10:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	617a      	str	r2, [r7, #20]
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f1c:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	617a      	str	r2, [r7, #20]
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f28:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001f2a:	7afb      	ldrb	r3, [r7, #11]
 8001f2c:	3b04      	subs	r3, #4
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
   				break;
 8001f34:	e08e      	b.n	8002054 <parseDHCPMSG+0x384>
   			case dns :
   				p++;                  
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	617a      	str	r2, [r7, #20]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	617a      	str	r2, [r7, #20]
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f50:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	617a      	str	r2, [r7, #20]
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f5c:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	617a      	str	r2, [r7, #20]
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f68:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	617a      	str	r2, [r7, #20]
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f74:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	3b04      	subs	r3, #4
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
   				break;
 8001f80:	e068      	b.n	8002054 <parseDHCPMSG+0x384>
 8001f82:	bf00      	nop
 8001f84:	20000248 	.word	0x20000248
 8001f88:	20000270 	.word	0x20000270
 8001f8c:	20000274 	.word	0x20000274
 8001f90:	2000025c 	.word	0x2000025c
 8001f94:	20000258 	.word	0x20000258
 8001f98:	20000260 	.word	0x20000260
   			case dhcpIPaddrLeaseTime :
   				p++;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	617a      	str	r2, [r7, #20]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	617a      	str	r2, [r7, #20]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <parseDHCPMSG+0x39c>)
 8001fb8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <parseDHCPMSG+0x39c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	021a      	lsls	r2, r3, #8
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1c59      	adds	r1, r3, #1
 8001fc4:	6179      	str	r1, [r7, #20]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a28      	ldr	r2, [pc, #160]	; (800206c <parseDHCPMSG+0x39c>)
 8001fcc:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <parseDHCPMSG+0x39c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	021a      	lsls	r2, r3, #8
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	1c59      	adds	r1, r3, #1
 8001fd8:	6179      	str	r1, [r7, #20]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <parseDHCPMSG+0x39c>)
 8001fe0:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <parseDHCPMSG+0x39c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	021a      	lsls	r2, r3, #8
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	1c59      	adds	r1, r3, #1
 8001fec:	6179      	str	r1, [r7, #20]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <parseDHCPMSG+0x39c>)
 8001ff4:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8001ff6:	e02d      	b.n	8002054 <parseDHCPMSG+0x384>
   			case dhcpServerIdentifier :
   				p++;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	617a      	str	r2, [r7, #20]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	617a      	str	r2, [r7, #20]
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <parseDHCPMSG+0x3a0>)
 8002012:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	617a      	str	r2, [r7, #20]
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <parseDHCPMSG+0x3a0>)
 800201e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	617a      	str	r2, [r7, #20]
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <parseDHCPMSG+0x3a0>)
 800202a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	617a      	str	r2, [r7, #20]
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <parseDHCPMSG+0x3a0>)
 8002036:	70da      	strb	r2, [r3, #3]
   				break;
 8002038:	e00c      	b.n	8002054 <parseDHCPMSG+0x384>
   			default :
   				p++;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	617a      	str	r2, [r7, #20]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800204a:	7afb      	ldrb	r3, [r7, #11]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	4413      	add	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
   				break;
 8002052:	bf00      	nop
		while ( p < e ) {
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	f4ff ae96 	bcc.w	8001d8a <parseDHCPMSG+0xba>
			} // switch
		} // while
	} // if
	return	type;
 800205e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002062:	4618      	mov	r0, r3
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	20000000 	.word	0x20000000
 8002070:	2000024c 	.word	0x2000024c

08002074 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800207a:	4b7f      	ldr	r3, [pc, #508]	; (8002278 <DHCP_run+0x204>)
 800207c:	f993 3000 	ldrsb.w	r3, [r3]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d101      	bne.n	8002088 <DHCP_run+0x14>
 8002084:	2305      	movs	r3, #5
 8002086:	e0f3      	b.n	8002270 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8002088:	4b7c      	ldr	r3, [pc, #496]	; (800227c <DHCP_run+0x208>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3301      	adds	r3, #1
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002096:	4618      	mov	r0, r3
 8002098:	f000 faea 	bl	8002670 <WIZCHIP_READ>
 800209c:	4603      	mov	r3, r0
 800209e:	2b22      	cmp	r3, #34	; 0x22
 80020a0:	d006      	beq.n	80020b0 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80020a2:	4b76      	ldr	r3, [pc, #472]	; (800227c <DHCP_run+0x208>)
 80020a4:	7818      	ldrb	r0, [r3, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	2244      	movs	r2, #68	; 0x44
 80020aa:	2102      	movs	r1, #2
 80020ac:	f000 fdd0 	bl	8002c50 <socket>

	ret = DHCP_RUNNING;
 80020b0:	2301      	movs	r3, #1
 80020b2:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80020b4:	f7ff fe0c 	bl	8001cd0 <parseDHCPMSG>
 80020b8:	4603      	mov	r3, r0
 80020ba:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80020bc:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <DHCP_run+0x204>)
 80020be:	f993 3000 	ldrsb.w	r3, [r3]
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	f200 80d0 	bhi.w	8002268 <DHCP_run+0x1f4>
 80020c8:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <DHCP_run+0x5c>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020e5 	.word	0x080020e5
 80020d4:	08002109 	.word	0x08002109
 80020d8:	0800214d 	.word	0x0800214d
 80020dc:	0800219d 	.word	0x0800219d
 80020e0:	080021f7 	.word	0x080021f7
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80020e4:	4b66      	ldr	r3, [pc, #408]	; (8002280 <DHCP_run+0x20c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <DHCP_run+0x20c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80020f0:	4b63      	ldr	r3, [pc, #396]	; (8002280 <DHCP_run+0x20c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80020f6:	4b62      	ldr	r3, [pc, #392]	; (8002280 <DHCP_run+0x20c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80020fc:	f7ff f8a8 	bl	8001250 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8002100:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <DHCP_run+0x204>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
   		break;
 8002106:	e0b2      	b.n	800226e <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d119      	bne.n	8002142 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800210e:	4b5d      	ldr	r3, [pc, #372]	; (8002284 <DHCP_run+0x210>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	7c1a      	ldrb	r2, [r3, #16]
 8002114:	4b5a      	ldr	r3, [pc, #360]	; (8002280 <DHCP_run+0x20c>)
 8002116:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002118:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <DHCP_run+0x210>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	7c5a      	ldrb	r2, [r3, #17]
 800211e:	4b58      	ldr	r3, [pc, #352]	; (8002280 <DHCP_run+0x20c>)
 8002120:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8002122:	4b58      	ldr	r3, [pc, #352]	; (8002284 <DHCP_run+0x210>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	7c9a      	ldrb	r2, [r3, #18]
 8002128:	4b55      	ldr	r3, [pc, #340]	; (8002280 <DHCP_run+0x20c>)
 800212a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 800212c:	4b55      	ldr	r3, [pc, #340]	; (8002284 <DHCP_run+0x210>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	7cda      	ldrb	r2, [r3, #19]
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <DHCP_run+0x20c>)
 8002134:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002136:	f7ff f9ef 	bl	8001518 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800213a:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <DHCP_run+0x204>)
 800213c:	2202      	movs	r2, #2
 800213e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002140:	e095      	b.n	800226e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002142:	f000 f8b1 	bl	80022a8 <check_DHCP_timeout>
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
         break;
 800214a:	e090      	b.n	800226e <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	2b05      	cmp	r3, #5
 8002150:	d116      	bne.n	8002180 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8002152:	f000 f909 	bl	8002368 <check_DHCP_leasedIP>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800215c:	4b4a      	ldr	r3, [pc, #296]	; (8002288 <DHCP_run+0x214>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4798      	blx	r3
					reset_DHCP_timeout();
 8002162:	f000 f9ab 	bl	80024bc <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <DHCP_run+0x204>)
 8002168:	2203      	movs	r2, #3
 800216a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800216c:	e07f      	b.n	800226e <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800216e:	f000 f9a5 	bl	80024bc <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8002172:	4b46      	ldr	r3, [pc, #280]	; (800228c <DHCP_run+0x218>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <DHCP_run+0x204>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
		break;
 800217e:	e076      	b.n	800226e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	2b06      	cmp	r3, #6
 8002184:	d105      	bne.n	8002192 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8002186:	f000 f999 	bl	80024bc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <DHCP_run+0x204>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
		break;
 8002190:	e06d      	b.n	800226e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002192:	f000 f889 	bl	80022a8 <check_DHCP_timeout>
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
		break;
 800219a:	e068      	b.n	800226e <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800219c:	2304      	movs	r3, #4
 800219e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <DHCP_run+0x21c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d060      	beq.n	800226c <DHCP_run+0x1f8>
 80021aa:	4b39      	ldr	r3, [pc, #228]	; (8002290 <DHCP_run+0x21c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	085a      	lsrs	r2, r3, #1
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <DHCP_run+0x220>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d259      	bcs.n	800226c <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80021bc:	4b30      	ldr	r3, [pc, #192]	; (8002280 <DHCP_run+0x20c>)
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <DHCP_run+0x224>)
 80021c2:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <DHCP_run+0x20c>)
 80021c6:	785a      	ldrb	r2, [r3, #1]
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <DHCP_run+0x224>)
 80021ca:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80021cc:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <DHCP_run+0x20c>)
 80021ce:	789a      	ldrb	r2, [r3, #2]
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <DHCP_run+0x224>)
 80021d2:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80021d4:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <DHCP_run+0x20c>)
 80021d6:	78da      	ldrb	r2, [r3, #3]
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <DHCP_run+0x224>)
 80021da:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <DHCP_run+0x228>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	4a2e      	ldr	r2, [pc, #184]	; (800229c <DHCP_run+0x228>)
 80021e4:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80021e6:	f7ff f997 	bl	8001518 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80021ea:	f000 f967 	bl	80024bc <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <DHCP_run+0x204>)
 80021f0:	2204      	movs	r2, #4
 80021f2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80021f4:	e03a      	b.n	800226c <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80021f6:	2304      	movs	r3, #4
 80021f8:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d125      	bne.n	800224c <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <DHCP_run+0x22c>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <DHCP_run+0x224>)
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <DHCP_run+0x20c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d111      	bne.n	8002236 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <DHCP_run+0x224>)
 8002214:	785a      	ldrb	r2, [r3, #1]
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <DHCP_run+0x20c>)
 8002218:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800221a:	429a      	cmp	r2, r3
 800221c:	d10b      	bne.n	8002236 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <DHCP_run+0x224>)
 8002220:	789a      	ldrb	r2, [r3, #2]
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <DHCP_run+0x20c>)
 8002224:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d105      	bne.n	8002236 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <DHCP_run+0x224>)
 800222c:	78da      	ldrb	r2, [r3, #3]
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <DHCP_run+0x20c>)
 8002230:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d004      	beq.n	8002240 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8002236:	2303      	movs	r3, #3
 8002238:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <DHCP_run+0x230>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002240:	f000 f93c 	bl	80024bc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <DHCP_run+0x204>)
 8002246:	2203      	movs	r2, #3
 8002248:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800224a:	e010      	b.n	800226e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800224c:	79bb      	ldrb	r3, [r7, #6]
 800224e:	2b06      	cmp	r3, #6
 8002250:	d105      	bne.n	800225e <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8002252:	f000 f933 	bl	80024bc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <DHCP_run+0x204>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
	   	break;
 800225c:	e007      	b.n	800226e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800225e:	f000 f823 	bl	80022a8 <check_DHCP_timeout>
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
	   	break;
 8002266:	e002      	b.n	800226e <DHCP_run+0x1fa>
		default :
   		break;
 8002268:	bf00      	nop
 800226a:	e000      	b.n	800226e <DHCP_run+0x1fa>
		break;
 800226c:	bf00      	nop
	}

	return ret;
 800226e:	79fb      	ldrb	r3, [r7, #7]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000264 	.word	0x20000264
 800227c:	20000248 	.word	0x20000248
 8002280:	20000254 	.word	0x20000254
 8002284:	20000270 	.word	0x20000270
 8002288:	20000010 	.word	0x20000010
 800228c:	20000018 	.word	0x20000018
 8002290:	20000000 	.word	0x20000000
 8002294:	20000268 	.word	0x20000268
 8002298:	20000250 	.word	0x20000250
 800229c:	2000026c 	.word	0x2000026c
 80022a0:	20000265 	.word	0x20000265
 80022a4:	20000014 	.word	0x20000014

080022a8 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80022ae:	2301      	movs	r3, #1
 80022b0:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <check_DHCP_timeout+0xb0>)
 80022b4:	f993 3000 	ldrsb.w	r3, [r3]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	dc2d      	bgt.n	8002318 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <check_DHCP_timeout+0xb4>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <check_DHCP_timeout+0xb8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d242      	bcs.n	800234e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80022c8:	4b26      	ldr	r3, [pc, #152]	; (8002364 <check_DHCP_timeout+0xbc>)
 80022ca:	f993 3000 	ldrsb.w	r3, [r3]
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d00c      	beq.n	80022ec <check_DHCP_timeout+0x44>
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	dc0d      	bgt.n	80022f2 <check_DHCP_timeout+0x4a>
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d002      	beq.n	80022e0 <check_DHCP_timeout+0x38>
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d003      	beq.n	80022e6 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80022de:	e008      	b.n	80022f2 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80022e0:	f7fe ffb6 	bl	8001250 <send_DHCP_DISCOVER>
				break;
 80022e4:	e006      	b.n	80022f4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80022e6:	f7ff f917 	bl	8001518 <send_DHCP_REQUEST>
				break;
 80022ea:	e003      	b.n	80022f4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80022ec:	f7ff f914 	bl	8001518 <send_DHCP_REQUEST>
				break;
 80022f0:	e000      	b.n	80022f4 <check_DHCP_timeout+0x4c>
				break;
 80022f2:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <check_DHCP_timeout+0xb8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <check_DHCP_timeout+0xb8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	330a      	adds	r3, #10
 8002300:	4a16      	ldr	r2, [pc, #88]	; (800235c <check_DHCP_timeout+0xb4>)
 8002302:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <check_DHCP_timeout+0xb0>)
 8002306:	f993 3000 	ldrsb.w	r3, [r3]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	3301      	adds	r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	b25a      	sxtb	r2, r3
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <check_DHCP_timeout+0xb0>)
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	e01a      	b.n	800234e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <check_DHCP_timeout+0xbc>)
 800231a:	f993 3000 	ldrsb.w	r3, [r3]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d00c      	beq.n	800233c <check_DHCP_timeout+0x94>
 8002322:	2b04      	cmp	r3, #4
 8002324:	dc10      	bgt.n	8002348 <check_DHCP_timeout+0xa0>
 8002326:	2b01      	cmp	r3, #1
 8002328:	d002      	beq.n	8002330 <check_DHCP_timeout+0x88>
 800232a:	2b02      	cmp	r3, #2
 800232c:	d006      	beq.n	800233c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800232e:	e00b      	b.n	8002348 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <check_DHCP_timeout+0xbc>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002336:	2300      	movs	r3, #0
 8002338:	71fb      	strb	r3, [r7, #7]
				break;
 800233a:	e006      	b.n	800234a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800233c:	f7fe ff88 	bl	8001250 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <check_DHCP_timeout+0xbc>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
				break;
 8002346:	e000      	b.n	800234a <check_DHCP_timeout+0xa2>
				break;
 8002348:	bf00      	nop
		}
		reset_DHCP_timeout();
 800234a:	f000 f8b7 	bl	80024bc <reset_DHCP_timeout>
	}
	return ret;
 800234e:	79fb      	ldrb	r3, [r7, #7]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000265 	.word	0x20000265
 800235c:	20000004 	.word	0x20000004
 8002360:	20000268 	.word	0x20000268
 8002364:	20000264 	.word	0x20000264

08002368 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800236e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002372:	f000 f97d 	bl	8002670 <WIZCHIP_READ>
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800237a:	2103      	movs	r1, #3
 800237c:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002380:	f000 f9c2 	bl	8002708 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <check_DHCP_leasedIP+0x6c>)
 8002386:	7818      	ldrb	r0, [r3, #0]
 8002388:	f241 3388 	movw	r3, #5000	; 0x1388
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <check_DHCP_leasedIP+0x70>)
 8002390:	2211      	movs	r2, #17
 8002392:	4912      	ldr	r1, [pc, #72]	; (80023dc <check_DHCP_leasedIP+0x74>)
 8002394:	f001 f8e0 	bl	8003558 <sendto>
 8002398:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80023a2:	f000 f9b1 	bl	8002708 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f113 0f0d 	cmn.w	r3, #13
 80023ac:	d101      	bne.n	80023b2 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00c      	b.n	80023cc <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80023b2:	f7ff fb3b 	bl	8001a2c <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <check_DHCP_leasedIP+0x78>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80023bc:	bf00      	nop
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <check_DHCP_leasedIP+0x78>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d9f9      	bls.n	80023be <check_DHCP_leasedIP+0x56>

		return 0;
 80023ca:	2300      	movs	r3, #0
	}
}	
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000248 	.word	0x20000248
 80023d8:	20000254 	.word	0x20000254
 80023dc:	0801afc8 	.word	0x0801afc8
 80023e0:	20000268 	.word	0x20000268

080023e4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80023f4:	2206      	movs	r2, #6
 80023f6:	492b      	ldr	r1, [pc, #172]	; (80024a4 <DHCP_init+0xc0>)
 80023f8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80023fc:	f000 f9d2 	bl	80027a4 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002400:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <DHCP_init+0xc0>)
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <DHCP_init+0xc0>)
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	4313      	orrs	r3, r2
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <DHCP_init+0xc0>)
 800240e:	789b      	ldrb	r3, [r3, #2]
 8002410:	4313      	orrs	r3, r2
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <DHCP_init+0xc0>)
 8002416:	78db      	ldrb	r3, [r3, #3]
 8002418:	4313      	orrs	r3, r2
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <DHCP_init+0xc0>)
 800241e:	791b      	ldrb	r3, [r3, #4]
 8002420:	4313      	orrs	r3, r2
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <DHCP_init+0xc0>)
 8002426:	795b      	ldrb	r3, [r3, #5]
 8002428:	4313      	orrs	r3, r2
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d117      	bne.n	8002460 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <DHCP_init+0xc0>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <DHCP_init+0xc0>)
 8002438:	2208      	movs	r2, #8
 800243a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <DHCP_init+0xc0>)
 800243e:	22dc      	movs	r2, #220	; 0xdc
 8002440:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <DHCP_init+0xc0>)
 8002444:	2200      	movs	r2, #0
 8002446:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <DHCP_init+0xc0>)
 800244a:	2200      	movs	r2, #0
 800244c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <DHCP_init+0xc0>)
 8002450:	2200      	movs	r2, #0
 8002452:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002454:	2206      	movs	r2, #6
 8002456:	4913      	ldr	r1, [pc, #76]	; (80024a4 <DHCP_init+0xc0>)
 8002458:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800245c:	f000 fa02 	bl	8002864 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <DHCP_init+0xc4>)
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002466:	4a11      	ldr	r2, [pc, #68]	; (80024ac <DHCP_init+0xc8>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <DHCP_init+0xcc>)
 800246e:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <DHCP_init+0xd0>)
 8002470:	601a      	str	r2, [r3, #0]

	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	2204      	movs	r2, #4
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800247e:	f000 f9f1 	bl	8002864 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	2204      	movs	r2, #4
 8002488:	4619      	mov	r1, r3
 800248a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800248e:	f000 f9e9 	bl	8002864 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002492:	f000 f813 	bl	80024bc <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <DHCP_init+0xd4>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000274 	.word	0x20000274
 80024a8:	20000248 	.word	0x20000248
 80024ac:	20000270 	.word	0x20000270
 80024b0:	2000026c 	.word	0x2000026c
 80024b4:	12345678 	.word	0x12345678
 80024b8:	20000264 	.word	0x20000264

080024bc <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <reset_DHCP_timeout+0x20>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <reset_DHCP_timeout+0x24>)
 80024c8:	220a      	movs	r2, #10
 80024ca:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <reset_DHCP_timeout+0x28>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	20000268 	.word	0x20000268
 80024e0:	20000004 	.word	0x20000004
 80024e4:	20000265 	.word	0x20000265

080024e8 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <DHCP_time_handler+0x18>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	4a03      	ldr	r2, [pc, #12]	; (8002500 <DHCP_time_handler+0x18>)
 80024f4:	6013      	str	r3, [r2, #0]
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	20000268 	.word	0x20000268

08002504 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <getIPfromDHCP+0x3c>)
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3301      	adds	r3, #1
 8002518:	4a09      	ldr	r2, [pc, #36]	; (8002540 <getIPfromDHCP+0x3c>)
 800251a:	7852      	ldrb	r2, [r2, #1]
 800251c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3302      	adds	r3, #2
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <getIPfromDHCP+0x3c>)
 8002524:	7892      	ldrb	r2, [r2, #2]
 8002526:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3303      	adds	r3, #3
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <getIPfromDHCP+0x3c>)
 800252e:	78d2      	ldrb	r2, [r2, #3]
 8002530:	701a      	strb	r2, [r3, #0]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000254 	.word	0x20000254

08002544 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <getGWfromDHCP+0x3c>)
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3301      	adds	r3, #1
 8002558:	4a09      	ldr	r2, [pc, #36]	; (8002580 <getGWfromDHCP+0x3c>)
 800255a:	7852      	ldrb	r2, [r2, #1]
 800255c:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3302      	adds	r3, #2
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <getGWfromDHCP+0x3c>)
 8002564:	7892      	ldrb	r2, [r2, #2]
 8002566:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3303      	adds	r3, #3
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <getGWfromDHCP+0x3c>)
 800256e:	78d2      	ldrb	r2, [r2, #3]
 8002570:	701a      	strb	r2, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000258 	.word	0x20000258

08002584 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <getSNfromDHCP+0x3c>)
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3301      	adds	r3, #1
 8002598:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <getSNfromDHCP+0x3c>)
 800259a:	7852      	ldrb	r2, [r2, #1]
 800259c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3302      	adds	r3, #2
 80025a2:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <getSNfromDHCP+0x3c>)
 80025a4:	7892      	ldrb	r2, [r2, #2]
 80025a6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3303      	adds	r3, #3
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <getSNfromDHCP+0x3c>)
 80025ae:	78d2      	ldrb	r2, [r2, #3]
 80025b0:	701a      	strb	r2, [r3, #0]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	2000025c 	.word	0x2000025c

080025c4 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a09      	ldr	r2, [pc, #36]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025da:	7852      	ldrb	r2, [r2, #1]
 80025dc:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3302      	adds	r3, #2
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025e4:	7892      	ldrb	r2, [r2, #2]
 80025e6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3303      	adds	r3, #3
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025ee:	78d2      	ldrb	r2, [r2, #3]
 80025f0:	701a      	strb	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000260 	.word	0x20000260

08002604 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	2b09      	cmp	r3, #9
 800261a:	d803      	bhi.n	8002624 <NibbleToHex+0x20>
    return nibble + '0';
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	3330      	adds	r3, #48	; 0x30
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e002      	b.n	800262a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	3337      	adds	r3, #55	; 0x37
 8002628:	b2db      	uxtb	r3, r3
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <DNS_init+0x2c>)
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <DNS_init+0x30>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <DNS_init+0x34>)
 8002652:	f241 1222 	movw	r2, #4386	; 0x1122
 8002656:	801a      	strh	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	20000280 	.word	0x20000280
 8002668:	2000027c 	.word	0x2000027c
 800266c:	20000282 	.word	0x20000282

08002670 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <WIZCHIP_READ+0x94>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800267e:	4b21      	ldr	r3, [pc, #132]	; (8002704 <WIZCHIP_READ+0x94>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <WIZCHIP_READ+0x94>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <WIZCHIP_READ+0x24>
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <WIZCHIP_READ+0x94>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d114      	bne.n	80026be <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <WIZCHIP_READ+0x94>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	0c12      	lsrs	r2, r2, #16
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	4610      	mov	r0, r2
 80026a0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <WIZCHIP_READ+0x94>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	0a12      	lsrs	r2, r2, #8
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	4610      	mov	r0, r2
 80026ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <WIZCHIP_READ+0x94>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4610      	mov	r0, r2
 80026ba:	4798      	blx	r3
 80026bc:	e011      	b.n	80026e2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <WIZCHIP_READ+0x94>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	f107 020c 	add.w	r2, r7, #12
 80026dc:	2103      	movs	r1, #3
 80026de:	4610      	mov	r0, r2
 80026e0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <WIZCHIP_READ+0x94>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	4798      	blx	r3
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <WIZCHIP_READ+0x94>)
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <WIZCHIP_READ+0x94>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4798      	blx	r3
   return ret;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000020 	.word	0x20000020

08002708 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4798      	blx	r3
   WIZCHIP.CS._select();
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b00      	cmp	r3, #0
 800272e:	d119      	bne.n	8002764 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	0c12      	lsrs	r2, r2, #16
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	4610      	mov	r0, r2
 800273c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	0a12      	lsrs	r2, r2, #8
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	4610      	mov	r0, r2
 800274a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4610      	mov	r0, r2
 8002756:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	4610      	mov	r0, r2
 8002760:	4798      	blx	r3
 8002762:	e013      	b.n	800278c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	b2db      	uxtb	r3, r3
 800276a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	b2db      	uxtb	r3, r3
 8002772:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	2104      	movs	r1, #4
 8002788:	4610      	mov	r0, r2
 800278a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002792:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	4798      	blx	r3
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000020 	.word	0x20000020

080027a4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80027b2:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80027b8:	4b29      	ldr	r3, [pc, #164]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <WIZCHIP_READ_BUF+0x2a>
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d126      	bne.n	800281c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	0c12      	lsrs	r2, r2, #16
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	4610      	mov	r0, r2
 80027da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	0a12      	lsrs	r2, r2, #8
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	4610      	mov	r0, r2
 80027e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	4610      	mov	r0, r2
 80027f4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	82fb      	strh	r3, [r7, #22]
 80027fa:	e00a      	b.n	8002812 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	8afa      	ldrh	r2, [r7, #22]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	188c      	adds	r4, r1, r2
 8002806:	4798      	blx	r3
 8002808:	4603      	mov	r3, r0
 800280a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800280c:	8afb      	ldrh	r3, [r7, #22]
 800280e:	3301      	adds	r3, #1
 8002810:	82fb      	strh	r3, [r7, #22]
 8002812:	8afa      	ldrh	r2, [r7, #22]
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	429a      	cmp	r2, r3
 8002818:	d3f0      	bcc.n	80027fc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800281a:	e017      	b.n	800284c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	b2db      	uxtb	r3, r3
 8002822:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b2db      	uxtb	r3, r3
 800282a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f107 0210 	add.w	r2, r7, #16
 800283a:	2103      	movs	r1, #3
 800283c:	4610      	mov	r0, r2
 800283e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	4611      	mov	r1, r2
 8002848:	68b8      	ldr	r0, [r7, #8]
 800284a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002852:	4b03      	ldr	r3, [pc, #12]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	4798      	blx	r3
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}
 8002860:	20000020 	.word	0x20000020

08002864 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002878:	4b29      	ldr	r3, [pc, #164]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002886:	4b26      	ldr	r3, [pc, #152]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d126      	bne.n	80028dc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	0c12      	lsrs	r2, r2, #16
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	4610      	mov	r0, r2
 800289a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800289c:	4b20      	ldr	r3, [pc, #128]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	0a12      	lsrs	r2, r2, #8
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	4610      	mov	r0, r2
 80028a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4610      	mov	r0, r2
 80028b4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	82fb      	strh	r3, [r7, #22]
 80028ba:	e00a      	b.n	80028d2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	8afa      	ldrh	r2, [r7, #22]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	440a      	add	r2, r1
 80028c6:	7812      	ldrb	r2, [r2, #0]
 80028c8:	4610      	mov	r0, r2
 80028ca:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028cc:	8afb      	ldrh	r3, [r7, #22]
 80028ce:	3301      	adds	r3, #1
 80028d0:	82fb      	strh	r3, [r7, #22]
 80028d2:	8afa      	ldrh	r2, [r7, #22]
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3f0      	bcc.n	80028bc <WIZCHIP_WRITE_BUF+0x58>
 80028da:	e017      	b.n	800290c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f107 0210 	add.w	r2, r7, #16
 80028fa:	2103      	movs	r1, #3
 80028fc:	4610      	mov	r0, r2
 80028fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	88fa      	ldrh	r2, [r7, #6]
 8002906:	4611      	mov	r1, r2
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002912:	4b03      	ldr	r3, [pc, #12]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4798      	blx	r3
}
 8002918:	bf00      	nop
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000020 	.word	0x20000020

08002924 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800292e:	2300      	movs	r3, #0
 8002930:	81fb      	strh	r3, [r7, #14]
 8002932:	2300      	movs	r3, #0
 8002934:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3301      	adds	r3, #1
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fe94 	bl	8002670 <WIZCHIP_READ>
 8002948:	4603      	mov	r3, r0
 800294a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800294c:	89bb      	ldrh	r3, [r7, #12]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	b29c      	uxth	r4, r3
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	3301      	adds	r3, #1
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fe86 	bl	8002670 <WIZCHIP_READ>
 8002964:	4603      	mov	r3, r0
 8002966:	b29b      	uxth	r3, r3
 8002968:	4423      	add	r3, r4
 800296a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800296c:	89bb      	ldrh	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01a      	beq.n	80029a8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	3301      	adds	r3, #1
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fe76 	bl	8002670 <WIZCHIP_READ>
 8002984:	4603      	mov	r3, r0
 8002986:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002988:	89fb      	ldrh	r3, [r7, #14]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	b29c      	uxth	r4, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	3301      	adds	r3, #1
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fe68 	bl	8002670 <WIZCHIP_READ>
 80029a0:	4603      	mov	r3, r0
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4423      	add	r3, r4
 80029a6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80029a8:	89fa      	ldrh	r2, [r7, #14]
 80029aa:	89bb      	ldrh	r3, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1c2      	bne.n	8002936 <getSn_TX_FSR+0x12>
   return val;
 80029b0:	89fb      	ldrh	r3, [r7, #14]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd90      	pop	{r4, r7, pc}

080029ba <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80029ba:	b590      	push	{r4, r7, lr}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	81fb      	strh	r3, [r7, #14]
 80029c8:	2300      	movs	r3, #0
 80029ca:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3301      	adds	r3, #1
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fe49 	bl	8002670 <WIZCHIP_READ>
 80029de:	4603      	mov	r3, r0
 80029e0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80029e2:	89bb      	ldrh	r3, [r7, #12]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	b29c      	uxth	r4, r3
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	3301      	adds	r3, #1
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fe3b 	bl	8002670 <WIZCHIP_READ>
 80029fa:	4603      	mov	r3, r0
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4423      	add	r3, r4
 8002a00:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002a02:	89bb      	ldrh	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01a      	beq.n	8002a3e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fe2b 	bl	8002670 <WIZCHIP_READ>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a1e:	89fb      	ldrh	r3, [r7, #14]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	b29c      	uxth	r4, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	3301      	adds	r3, #1
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fe1d 	bl	8002670 <WIZCHIP_READ>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4423      	add	r3, r4
 8002a3c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002a3e:	89fa      	ldrh	r2, [r7, #14]
 8002a40:	89bb      	ldrh	r3, [r7, #12]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d1c2      	bne.n	80029cc <getSn_RX_RSR+0x12>
   return val;
 8002a46:	89fb      	ldrh	r3, [r7, #14]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}

08002a50 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d048      	beq.n	8002b00 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3301      	adds	r3, #1
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fdf8 	bl	8002670 <WIZCHIP_READ>
 8002a80:	4603      	mov	r3, r0
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b29c      	uxth	r4, r3
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fdeb 	bl	8002670 <WIZCHIP_READ>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	4423      	add	r3, r4
 8002aa0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002aa2:	89fb      	ldrh	r3, [r7, #14]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	79fa      	ldrb	r2, [r7, #7]
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	3202      	adds	r2, #2
 8002aac:	00d2      	lsls	r2, r2, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002ab2:	88bb      	ldrh	r3, [r7, #4]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6839      	ldr	r1, [r7, #0]
 8002ab8:	68b8      	ldr	r0, [r7, #8]
 8002aba:	f7ff fed3 	bl	8002864 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002abe:	89fa      	ldrh	r2, [r7, #14]
 8002ac0:	88bb      	ldrh	r3, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	3301      	adds	r3, #1
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7ff fe12 	bl	8002708 <WIZCHIP_WRITE>
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	3301      	adds	r3, #1
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002af0:	461a      	mov	r2, r3
 8002af2:	89fb      	ldrh	r3, [r7, #14]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff fe05 	bl	8002708 <WIZCHIP_WRITE>
 8002afe:	e000      	b.n	8002b02 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002b00:	bf00      	nop
}
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd90      	pop	{r4, r7, pc}

08002b08 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002b20:	88bb      	ldrh	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d048      	beq.n	8002bb8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fd9c 	bl	8002670 <WIZCHIP_READ>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	b29c      	uxth	r4, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	3301      	adds	r3, #1
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fd8f 	bl	8002670 <WIZCHIP_READ>
 8002b52:	4603      	mov	r3, r0
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	4423      	add	r3, r4
 8002b58:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	79fa      	ldrb	r2, [r7, #7]
 8002b60:	0092      	lsls	r2, r2, #2
 8002b62:	3203      	adds	r2, #3
 8002b64:	00d2      	lsls	r2, r2, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002b6a:	88bb      	ldrh	r3, [r7, #4]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	68b8      	ldr	r0, [r7, #8]
 8002b72:	f7ff fe17 	bl	80027a4 <WIZCHIP_READ_BUF>
   ptr += len;
 8002b76:	89fa      	ldrh	r2, [r7, #14]
 8002b78:	88bb      	ldrh	r3, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	3301      	adds	r3, #1
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	89fb      	ldrh	r3, [r7, #14]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f7ff fdb6 	bl	8002708 <WIZCHIP_WRITE>
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002ba8:	461a      	mov	r2, r3
 8002baa:	89fb      	ldrh	r3, [r7, #14]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f7ff fda9 	bl	8002708 <WIZCHIP_WRITE>
 8002bb6:	e000      	b.n	8002bba <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002bb8:	bf00      	nop
}
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd90      	pop	{r4, r7, pc}

08002bc0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	460a      	mov	r2, r1
 8002bca:	71fb      	strb	r3, [r7, #7]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	3301      	adds	r3, #1
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fd45 	bl	8002670 <WIZCHIP_READ>
 8002be6:	4603      	mov	r3, r0
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	b29c      	uxth	r4, r3
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fd38 	bl	8002670 <WIZCHIP_READ>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4423      	add	r3, r4
 8002c06:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8002c08:	89fa      	ldrh	r2, [r7, #14]
 8002c0a:	88bb      	ldrh	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	3301      	adds	r3, #1
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	89fb      	ldrh	r3, [r7, #14]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f7ff fd6d 	bl	8002708 <WIZCHIP_WRITE>
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	3301      	adds	r3, #1
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	89fb      	ldrh	r3, [r7, #14]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f7ff fd60 	bl	8002708 <WIZCHIP_WRITE>
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}

08002c50 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4604      	mov	r4, r0
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4623      	mov	r3, r4
 8002c60:	71fb      	strb	r3, [r7, #7]
 8002c62:	4603      	mov	r3, r0
 8002c64:	71bb      	strb	r3, [r7, #6]
 8002c66:	460b      	mov	r3, r1
 8002c68:	80bb      	strh	r3, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d902      	bls.n	8002c7a <socket+0x2a>
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295
 8002c78:	e0f0      	b.n	8002e5c <socket+0x20c>
	switch(protocol)
 8002c7a:	79bb      	ldrb	r3, [r7, #6]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d005      	beq.n	8002c8c <socket+0x3c>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	dd11      	ble.n	8002ca8 <socket+0x58>
 8002c84:	3b02      	subs	r3, #2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d80e      	bhi.n	8002ca8 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002c8a:	e010      	b.n	8002cae <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	2204      	movs	r2, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002c98:	f7ff fd84 	bl	80027a4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <socket+0x5e>
 8002ca2:	f06f 0302 	mvn.w	r3, #2
 8002ca6:	e0d9      	b.n	8002e5c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002ca8:	f06f 0304 	mvn.w	r3, #4
 8002cac:	e0d6      	b.n	8002e5c <socket+0x20c>
         break;
 8002cae:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <socket+0x70>
 8002cba:	f06f 0305 	mvn.w	r3, #5
 8002cbe:	e0cd      	b.n	8002e5c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d028      	beq.n	8002d18 <socket+0xc8>
	{
   	switch(protocol)
 8002cc6:	79bb      	ldrb	r3, [r7, #6]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d002      	beq.n	8002cd2 <socket+0x82>
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d008      	beq.n	8002ce2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002cd0:	e022      	b.n	8002d18 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11a      	bne.n	8002d12 <socket+0xc2>
 8002cdc:	f06f 0305 	mvn.w	r3, #5
 8002ce0:	e0bc      	b.n	8002e5c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db02      	blt.n	8002cfa <socket+0xaa>
 8002cf4:	f06f 0305 	mvn.w	r3, #5
 8002cf8:	e0b0      	b.n	8002e5c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db04      	blt.n	8002d16 <socket+0xc6>
 8002d0c:	f06f 0305 	mvn.w	r3, #5
 8002d10:	e0a4      	b.n	8002e5c <socket+0x20c>
   	      break;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <socket+0xc8>
   	      break;
 8002d16:	bf00      	nop
   	}
   }
	close(sn);
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f8ac 	bl	8002e78 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	3301      	adds	r3, #1
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2e:	f023 030f 	bic.w	r3, r3, #15
 8002d32:	b25a      	sxtb	r2, r3
 8002d34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7ff fce2 	bl	8002708 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002d44:	88bb      	ldrh	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d110      	bne.n	8002d6c <socket+0x11c>
	{
	   port = sock_any_port++;
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <socket+0x214>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	b291      	uxth	r1, r2
 8002d52:	4a44      	ldr	r2, [pc, #272]	; (8002e64 <socket+0x214>)
 8002d54:	8011      	strh	r1, [r2, #0]
 8002d56:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002d58:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <socket+0x214>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d103      	bne.n	8002d6c <socket+0x11c>
 8002d64:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <socket+0x214>)
 8002d66:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002d6a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	3301      	adds	r3, #1
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d78:	461a      	mov	r2, r3
 8002d7a:	88bb      	ldrh	r3, [r7, #4]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f7ff fcbf 	bl	8002708 <WIZCHIP_WRITE>
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	3301      	adds	r3, #1
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d96:	461a      	mov	r2, r3
 8002d98:	88bb      	ldrh	r3, [r7, #4]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f7ff fcb2 	bl	8002708 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	3301      	adds	r3, #1
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fca8 	bl	8002708 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002db8:	bf00      	nop
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fc52 	bl	8002670 <WIZCHIP_READ>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f3      	bne.n	8002dba <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <socket+0x218>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	4013      	ands	r3, r2
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <socket+0x218>)
 8002dee:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	f003 0201 	and.w	r2, r3, #1
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	b21a      	sxth	r2, r3
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <socket+0x218>)
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b21b      	sxth	r3, r3
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <socket+0x218>)
 8002e0c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	2201      	movs	r2, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <socket+0x21c>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	4013      	ands	r3, r2
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <socket+0x21c>)
 8002e2a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <socket+0x220>)
 8002e30:	2100      	movs	r1, #0
 8002e32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <socket+0x224>)
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002e3e:	bf00      	nop
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	3301      	adds	r3, #1
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fc0f 	bl	8002670 <WIZCHIP_READ>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f3      	beq.n	8002e40 <socket+0x1f0>
   return (int8_t)sn;
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd90      	pop	{r4, r7, pc}
 8002e64:	2000001c 	.word	0x2000001c
 8002e68:	20000284 	.word	0x20000284
 8002e6c:	20000286 	.word	0x20000286
 8002e70:	20000288 	.word	0x20000288
 8002e74:	20000298 	.word	0x20000298

08002e78 <close>:

int8_t close(uint8_t sn)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d902      	bls.n	8002e8e <close+0x16>
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8c:	e055      	b.n	8002f3a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	3301      	adds	r3, #1
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e9a:	2110      	movs	r1, #16
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fc33 	bl	8002708 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002ea2:	bf00      	nop
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fbdd 	bl	8002670 <WIZCHIP_READ>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f3      	bne.n	8002ea4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ec8:	211f      	movs	r1, #31
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fc1c 	bl	8002708 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <close+0xcc>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <close+0xcc>)
 8002eec:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	b21a      	sxth	r2, r3
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <close+0xd0>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	4013      	ands	r3, r2
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <close+0xd0>)
 8002f0a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <close+0xd4>)
 8002f10:	2100      	movs	r1, #0
 8002f12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <close+0xd8>)
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002f1e:	bf00      	nop
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3301      	adds	r3, #1
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fb9f 	bl	8002670 <WIZCHIP_READ>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f3      	bne.n	8002f20 <close+0xa8>
	return SOCK_OK;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000284 	.word	0x20000284
 8002f48:	20000286 	.word	0x20000286
 8002f4c:	20000288 	.word	0x20000288
 8002f50:	20000298 	.word	0x20000298

08002f54 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
 8002f60:	4613      	mov	r3, r2
 8002f62:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d902      	bls.n	8002f70 <connect+0x1c>
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	e0c6      	b.n	80030fe <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	3301      	adds	r3, #1
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fb79 	bl	8002670 <WIZCHIP_READ>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d002      	beq.n	8002f8e <connect+0x3a>
 8002f88:	f06f 0304 	mvn.w	r3, #4
 8002f8c:	e0b7      	b.n	80030fe <connect+0x1aa>
   CHECK_SOCKINIT();
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	3301      	adds	r3, #1
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fb68 	bl	8002670 <WIZCHIP_READ>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b13      	cmp	r3, #19
 8002fa4:	d002      	beq.n	8002fac <connect+0x58>
 8002fa6:	f06f 0302 	mvn.w	r3, #2
 8002faa:	e0a8      	b.n	80030fe <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	3201      	adds	r2, #1
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	3202      	adds	r2, #2
 8002fc8:	7812      	ldrb	r2, [r2, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	3203      	adds	r2, #3
 8002fd6:	7812      	ldrb	r2, [r2, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d002      	beq.n	8002fea <connect+0x96>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <connect+0x9c>
 8002fea:	f06f 030b 	mvn.w	r3, #11
 8002fee:	e086      	b.n	80030fe <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <connect+0xa8>
 8002ff6:	f06f 030a 	mvn.w	r3, #10
 8002ffa:	e080      	b.n	80030fe <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	3301      	adds	r3, #1
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003008:	2204      	movs	r2, #4
 800300a:	6839      	ldr	r1, [r7, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fc29 	bl	8002864 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	3301      	adds	r3, #1
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301e:	461a      	mov	r2, r3
 8003020:	88bb      	ldrh	r3, [r7, #4]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	b29b      	uxth	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f7ff fb6c 	bl	8002708 <WIZCHIP_WRITE>
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	3301      	adds	r3, #1
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800303c:	461a      	mov	r2, r3
 800303e:	88bb      	ldrh	r3, [r7, #4]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7ff fb5f 	bl	8002708 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3301      	adds	r3, #1
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003056:	2104      	movs	r1, #4
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fb55 	bl	8002708 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800305e:	bf00      	nop
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3301      	adds	r3, #1
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff faff 	bl	8002670 <WIZCHIP_READ>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f3      	bne.n	8003060 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <connect+0x1b4>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	fa42 f303 	asr.w	r3, r2, r3
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d02b      	beq.n	80030e4 <connect+0x190>
 800308c:	2300      	movs	r3, #0
 800308e:	e036      	b.n	80030fe <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3301      	adds	r3, #1
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fae7 	bl	8002670 <WIZCHIP_READ>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00c      	beq.n	80030c6 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3301      	adds	r3, #1
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80030b8:	2108      	movs	r1, #8
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fb24 	bl	8002708 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80030c0:	f06f 030c 	mvn.w	r3, #12
 80030c4:	e01b      	b.n	80030fe <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	3301      	adds	r3, #1
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff facc 	bl	8002670 <WIZCHIP_READ>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80030de:	f06f 0303 	mvn.w	r3, #3
 80030e2:	e00c      	b.n	80030fe <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	3301      	adds	r3, #1
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fabd 	bl	8002670 <WIZCHIP_READ>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b17      	cmp	r3, #23
 80030fa:	d1c9      	bne.n	8003090 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80030fc:	2301      	movs	r3, #1
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000284 	.word	0x20000284

0800310c <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d902      	bls.n	8003122 <disconnect+0x16>
 800311c:	f04f 33ff 	mov.w	r3, #4294967295
 8003120:	e062      	b.n	80031e8 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	3301      	adds	r3, #1
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff faa0 	bl	8002670 <WIZCHIP_READ>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	2b01      	cmp	r3, #1
 8003138:	d002      	beq.n	8003140 <disconnect+0x34>
 800313a:	f06f 0304 	mvn.w	r3, #4
 800313e:	e053      	b.n	80031e8 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	3301      	adds	r3, #1
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800314c:	2108      	movs	r1, #8
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fada 	bl	8002708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003154:	bf00      	nop
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	3301      	adds	r3, #1
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fa84 	bl	8002670 <WIZCHIP_READ>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f3      	bne.n	8003156 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2201      	movs	r2, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	b21b      	sxth	r3, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	b21a      	sxth	r2, r3
 800317c:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <disconnect+0xe4>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b21b      	sxth	r3, r3
 8003182:	4013      	ands	r3, r2
 8003184:	b21b      	sxth	r3, r3
 8003186:	b29a      	uxth	r2, r3
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <disconnect+0xe4>)
 800318a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <disconnect+0xe8>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	fa42 f303 	asr.w	r3, r2, r3
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <disconnect+0xc2>
 80031a0:	2300      	movs	r3, #0
 80031a2:	e021      	b.n	80031e8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	3301      	adds	r3, #1
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fa5d 	bl	8002670 <WIZCHIP_READ>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <disconnect+0xc2>
	   {
	      close(sn);
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fe58 	bl	8002e78 <close>
	      return SOCKERR_TIMEOUT;
 80031c8:	f06f 030c 	mvn.w	r3, #12
 80031cc:	e00c      	b.n	80031e8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	3301      	adds	r3, #1
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fa48 	bl	8002670 <WIZCHIP_READ>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1de      	bne.n	80031a4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000286 	.word	0x20000286
 80031f4:	20000284 	.word	0x20000284

080031f8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	6039      	str	r1, [r7, #0]
 8003202:	71fb      	strb	r3, [r7, #7]
 8003204:	4613      	mov	r3, r2
 8003206:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800320c:	2300      	movs	r3, #0
 800320e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	2b08      	cmp	r3, #8
 8003214:	d902      	bls.n	800321c <send+0x24>
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e0de      	b.n	80033da <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	3301      	adds	r3, #1
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fa23 	bl	8002670 <WIZCHIP_READ>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	2b01      	cmp	r3, #1
 8003232:	d002      	beq.n	800323a <send+0x42>
 8003234:	f06f 0304 	mvn.w	r3, #4
 8003238:	e0cf      	b.n	80033da <send+0x1e2>
   CHECK_SOCKDATA();
 800323a:	88bb      	ldrh	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <send+0x4e>
 8003240:	f06f 030d 	mvn.w	r3, #13
 8003244:	e0c9      	b.n	80033da <send+0x1e2>
   tmp = getSn_SR(sn);
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	3301      	adds	r3, #1
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fa0c 	bl	8002670 <WIZCHIP_READ>
 8003258:	4603      	mov	r3, r0
 800325a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b17      	cmp	r3, #23
 8003260:	d005      	beq.n	800326e <send+0x76>
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b1c      	cmp	r3, #28
 8003266:	d002      	beq.n	800326e <send+0x76>
 8003268:	f06f 0306 	mvn.w	r3, #6
 800326c:	e0b5      	b.n	80033da <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800326e:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <send+0x1ec>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	fa42 f303 	asr.w	r3, r2, r3
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d039      	beq.n	80032f6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3301      	adds	r3, #1
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f9ee 	bl	8002670 <WIZCHIP_READ>
 8003294:	4603      	mov	r3, r0
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d019      	beq.n	80032da <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	3301      	adds	r3, #1
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80032b2:	2110      	movs	r1, #16
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fa27 	bl	8002708 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2201      	movs	r2, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	b21b      	sxth	r3, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <send+0x1ec>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b21b      	sxth	r3, r3
 80032ce:	4013      	ands	r3, r2
 80032d0:	b21b      	sxth	r3, r3
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <send+0x1ec>)
 80032d6:	801a      	strh	r2, [r3, #0]
 80032d8:	e00d      	b.n	80032f6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <send+0xfa>
      {
         close(sn);
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fdc6 	bl	8002e78 <close>
         return SOCKERR_TIMEOUT;
 80032ec:	f06f 030c 	mvn.w	r3, #12
 80032f0:	e073      	b.n	80033da <send+0x1e2>
      }
      else return SOCK_BUSY;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e071      	b.n	80033da <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3301      	adds	r3, #1
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff f9b4 	bl	8002670 <WIZCHIP_READ>
 8003308:	4603      	mov	r3, r0
 800330a:	b29b      	uxth	r3, r3
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003310:	88ba      	ldrh	r2, [r7, #4]
 8003312:	89bb      	ldrh	r3, [r7, #12]
 8003314:	429a      	cmp	r2, r3
 8003316:	d901      	bls.n	800331c <send+0x124>
 8003318:	89bb      	ldrh	r3, [r7, #12]
 800331a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fb00 	bl	8002924 <getSn_TX_FSR>
 8003324:	4603      	mov	r3, r0
 8003326:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	3301      	adds	r3, #1
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff f99b 	bl	8002670 <WIZCHIP_READ>
 800333a:	4603      	mov	r3, r0
 800333c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b17      	cmp	r3, #23
 8003342:	d009      	beq.n	8003358 <send+0x160>
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b1c      	cmp	r3, #28
 8003348:	d006      	beq.n	8003358 <send+0x160>
      {
         close(sn);
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fd93 	bl	8002e78 <close>
         return SOCKERR_SOCKSTATUS;
 8003352:	f06f 0306 	mvn.w	r3, #6
 8003356:	e040      	b.n	80033da <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <send+0x1f0>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	fa42 f303 	asr.w	r3, r2, r3
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <send+0x180>
 800336c:	88ba      	ldrh	r2, [r7, #4]
 800336e:	89bb      	ldrh	r3, [r7, #12]
 8003370:	429a      	cmp	r2, r3
 8003372:	d901      	bls.n	8003378 <send+0x180>
 8003374:	2300      	movs	r3, #0
 8003376:	e030      	b.n	80033da <send+0x1e2>
      if(len <= freesize) break;
 8003378:	88ba      	ldrh	r2, [r7, #4]
 800337a:	89bb      	ldrh	r3, [r7, #12]
 800337c:	429a      	cmp	r2, r3
 800337e:	d900      	bls.n	8003382 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8003380:	e7cc      	b.n	800331c <send+0x124>
      if(len <= freesize) break;
 8003382:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003384:	88ba      	ldrh	r2, [r7, #4]
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fb60 	bl	8002a50 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	3301      	adds	r3, #1
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800339c:	2120      	movs	r1, #32
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff f9b2 	bl	8002708 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80033a4:	bf00      	nop
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	3301      	adds	r3, #1
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f95c 	bl	8002670 <WIZCHIP_READ>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f3      	bne.n	80033a6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	2201      	movs	r2, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	b21a      	sxth	r2, r3
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <send+0x1ec>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <send+0x1ec>)
 80033d6:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80033d8:	88bb      	ldrh	r3, [r7, #4]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000286 	.word	0x20000286
 80033e8:	20000284 	.word	0x20000284

080033ec <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	71fb      	strb	r3, [r7, #7]
 80033f8:	4613      	mov	r3, r2
 80033fa:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b08      	cmp	r3, #8
 8003408:	d902      	bls.n	8003410 <recv+0x24>
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	e09c      	b.n	800354a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	3301      	adds	r3, #1
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f929 	bl	8002670 <WIZCHIP_READ>
 800341e:	4603      	mov	r3, r0
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	2b01      	cmp	r3, #1
 8003426:	d002      	beq.n	800342e <recv+0x42>
 8003428:	f06f 0304 	mvn.w	r3, #4
 800342c:	e08d      	b.n	800354a <recv+0x15e>
   CHECK_SOCKDATA();
 800342e:	88bb      	ldrh	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <recv+0x4e>
 8003434:	f06f 030d 	mvn.w	r3, #13
 8003438:	e087      	b.n	800354a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	3301      	adds	r3, #1
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff f912 	bl	8002670 <WIZCHIP_READ>
 800344c:	4603      	mov	r3, r0
 800344e:	b29b      	uxth	r3, r3
 8003450:	029b      	lsls	r3, r3, #10
 8003452:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003454:	89ba      	ldrh	r2, [r7, #12]
 8003456:	88bb      	ldrh	r3, [r7, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	d201      	bcs.n	8003460 <recv+0x74>
 800345c:	89bb      	ldrh	r3, [r7, #12]
 800345e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff faa9 	bl	80029ba <getSn_RX_RSR>
 8003468:	4603      	mov	r3, r0
 800346a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	3301      	adds	r3, #1
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff f8f9 	bl	8002670 <WIZCHIP_READ>
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b17      	cmp	r3, #23
 8003486:	d026      	beq.n	80034d6 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b1c      	cmp	r3, #28
 800348c:	d11c      	bne.n	80034c8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800348e:	89bb      	ldrh	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d133      	bne.n	80034fc <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fa44 	bl	8002924 <getSn_TX_FSR>
 800349c:	4603      	mov	r3, r0
 800349e:	461c      	mov	r4, r3
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	3301      	adds	r3, #1
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff f8df 	bl	8002670 <WIZCHIP_READ>
 80034b2:	4603      	mov	r3, r0
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	429c      	cmp	r4, r3
 80034b8:	d10d      	bne.n	80034d6 <recv+0xea>
               {
                  close(sn);
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fcdb 	bl	8002e78 <close>
                  return SOCKERR_SOCKSTATUS;
 80034c2:	f06f 0306 	mvn.w	r3, #6
 80034c6:	e040      	b.n	800354a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fcd4 	bl	8002e78 <close>
               return SOCKERR_SOCKSTATUS;
 80034d0:	f06f 0306 	mvn.w	r3, #6
 80034d4:	e039      	b.n	800354a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80034d6:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <recv+0x168>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	fa42 f303 	asr.w	r3, r2, r3
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <recv+0x108>
 80034ea:	89bb      	ldrh	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <recv+0x108>
 80034f0:	2300      	movs	r3, #0
 80034f2:	e02a      	b.n	800354a <recv+0x15e>
         if(recvsize != 0) break;
 80034f4:	89bb      	ldrh	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80034fa:	e7b1      	b.n	8003460 <recv+0x74>
               if(recvsize != 0) break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <recv+0x116>
         if(recvsize != 0) break;
 8003500:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003502:	89ba      	ldrh	r2, [r7, #12]
 8003504:	88bb      	ldrh	r3, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d201      	bcs.n	800350e <recv+0x122>
 800350a:	89bb      	ldrh	r3, [r7, #12]
 800350c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800350e:	88ba      	ldrh	r2, [r7, #4]
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	6839      	ldr	r1, [r7, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff faf7 	bl	8002b08 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	3301      	adds	r3, #1
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003526:	2140      	movs	r1, #64	; 0x40
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f8ed 	bl	8002708 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800352e:	bf00      	nop
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3301      	adds	r3, #1
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff f897 	bl	8002670 <WIZCHIP_READ>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f3      	bne.n	8003530 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003548:	88bb      	ldrh	r3, [r7, #4]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bd90      	pop	{r4, r7, pc}
 8003552:	bf00      	nop
 8003554:	20000284 	.word	0x20000284

08003558 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	4603      	mov	r3, r0
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	4613      	mov	r3, r2
 8003568:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d902      	bls.n	800357e <sendto+0x26>
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	e11b      	b.n	80037b6 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	3301      	adds	r3, #1
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f872 	bl	8002670 <WIZCHIP_READ>
 800358c:	4603      	mov	r3, r0
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3b02      	subs	r3, #2
 8003594:	2b02      	cmp	r3, #2
 8003596:	d902      	bls.n	800359e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003598:	f06f 0304 	mvn.w	r3, #4
 800359c:	e10b      	b.n	80037b6 <sendto+0x25e>
         break;
 800359e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80035a0:	89bb      	ldrh	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <sendto+0x54>
 80035a6:	f06f 030d 	mvn.w	r3, #13
 80035aa:	e104      	b.n	80037b6 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	3201      	adds	r2, #1
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	3202      	adds	r2, #2
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	3203      	adds	r2, #3
 80035d6:	7812      	ldrb	r2, [r2, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10e      	bne.n	8003600 <sendto+0xa8>
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3301      	adds	r3, #1
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff f840 	bl	8002670 <WIZCHIP_READ>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d002      	beq.n	8003600 <sendto+0xa8>
 80035fa:	f06f 030b 	mvn.w	r3, #11
 80035fe:	e0da      	b.n	80037b6 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8003600:	8c3b      	ldrh	r3, [r7, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <sendto+0xcc>
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	3301      	adds	r3, #1
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f82e 	bl	8002670 <WIZCHIP_READ>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d002      	beq.n	8003624 <sendto+0xcc>
 800361e:	f06f 030a 	mvn.w	r3, #10
 8003622:	e0c8      	b.n	80037b6 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3301      	adds	r3, #1
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f81d 	bl	8002670 <WIZCHIP_READ>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	2b42      	cmp	r3, #66	; 0x42
 800363e:	d008      	beq.n	8003652 <sendto+0xfa>
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b22      	cmp	r3, #34	; 0x22
 8003644:	d005      	beq.n	8003652 <sendto+0xfa>
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b32      	cmp	r3, #50	; 0x32
 800364a:	d002      	beq.n	8003652 <sendto+0xfa>
 800364c:	f06f 0306 	mvn.w	r3, #6
 8003650:	e0b1      	b.n	80037b6 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	3301      	adds	r3, #1
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800365e:	2204      	movs	r2, #4
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f8fe 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3301      	adds	r3, #1
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003674:	461a      	mov	r2, r3
 8003676:	8c3b      	ldrh	r3, [r7, #32]
 8003678:	0a1b      	lsrs	r3, r3, #8
 800367a:	b29b      	uxth	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7ff f841 	bl	8002708 <WIZCHIP_WRITE>
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	3301      	adds	r3, #1
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003692:	461a      	mov	r2, r3
 8003694:	8c3b      	ldrh	r3, [r7, #32]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f7ff f834 	bl	8002708 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	3301      	adds	r3, #1
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe ffdf 	bl	8002670 <WIZCHIP_READ>
 80036b2:	4603      	mov	r3, r0
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	029b      	lsls	r3, r3, #10
 80036b8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80036ba:	89ba      	ldrh	r2, [r7, #12]
 80036bc:	8abb      	ldrh	r3, [r7, #20]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d901      	bls.n	80036c6 <sendto+0x16e>
 80036c2:	8abb      	ldrh	r3, [r7, #20]
 80036c4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff f92b 	bl	8002924 <getSn_TX_FSR>
 80036ce:	4603      	mov	r3, r0
 80036d0:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	3301      	adds	r3, #1
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe ffc6 	bl	8002670 <WIZCHIP_READ>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <sendto+0x198>
 80036ea:	f06f 0303 	mvn.w	r3, #3
 80036ee:	e062      	b.n	80037b6 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80036f0:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <sendto+0x268>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	fa42 f303 	asr.w	r3, r2, r3
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <sendto+0x1b8>
 8003704:	89ba      	ldrh	r2, [r7, #12]
 8003706:	8abb      	ldrh	r3, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d901      	bls.n	8003710 <sendto+0x1b8>
 800370c:	2300      	movs	r3, #0
 800370e:	e052      	b.n	80037b6 <sendto+0x25e>
      if(len <= freesize) break;
 8003710:	89ba      	ldrh	r2, [r7, #12]
 8003712:	8abb      	ldrh	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	d900      	bls.n	800371a <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8003718:	e7d5      	b.n	80036c6 <sendto+0x16e>
      if(len <= freesize) break;
 800371a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800371c:	89ba      	ldrh	r2, [r7, #12]
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff f994 	bl	8002a50 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3301      	adds	r3, #1
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003734:	2120      	movs	r1, #32
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe ffe6 	bl	8002708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800373c:	bf00      	nop
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	3301      	adds	r3, #1
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe ff90 	bl	8002670 <WIZCHIP_READ>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f3      	bne.n	800373e <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	3301      	adds	r3, #1
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe ff84 	bl	8002670 <WIZCHIP_READ>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	3301      	adds	r3, #1
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003786:	2110      	movs	r1, #16
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe ffbd 	bl	8002708 <WIZCHIP_WRITE>
         break;
 800378e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003790:	89bb      	ldrh	r3, [r7, #12]
 8003792:	e010      	b.n	80037b6 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0db      	beq.n	8003756 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	3301      	adds	r3, #1
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037aa:	2108      	movs	r1, #8
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe ffab 	bl	8002708 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80037b2:	f06f 030c 	mvn.w	r3, #12
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000284 	.word	0x20000284

080037c4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	4603      	mov	r3, r0
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	4613      	mov	r3, r2
 80037d4:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d902      	bls.n	80037e6 <recvfrom+0x22>
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	e1d4      	b.n	8003b90 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	3301      	adds	r3, #1
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe ff3e 	bl	8002670 <WIZCHIP_READ>
 80037f4:	4603      	mov	r3, r0
 80037f6:	777b      	strb	r3, [r7, #29]
 80037f8:	7f7b      	ldrb	r3, [r7, #29]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3b02      	subs	r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d902      	bls.n	800380a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003804:	f06f 0304 	mvn.w	r3, #4
 8003808:	e1c2      	b.n	8003b90 <recvfrom+0x3cc>
         break;
 800380a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800380c:	89bb      	ldrh	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <recvfrom+0x54>
 8003812:	f06f 030d 	mvn.w	r3, #13
 8003816:	e1bb      	b.n	8003b90 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	4a88      	ldr	r2, [pc, #544]	; (8003a3c <recvfrom+0x278>)
 800381c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d128      	bne.n	8003876 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff f8c7 	bl	80029ba <getSn_RX_RSR>
 800382c:	4603      	mov	r3, r0
 800382e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	3301      	adds	r3, #1
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe ff17 	bl	8002670 <WIZCHIP_READ>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <recvfrom+0x8a>
 8003848:	f06f 0303 	mvn.w	r3, #3
 800384c:	e1a0      	b.n	8003b90 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800384e:	4b7c      	ldr	r3, [pc, #496]	; (8003a40 <recvfrom+0x27c>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	fa42 f303 	asr.w	r3, r2, r3
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <recvfrom+0xa8>
 8003862:	8bfb      	ldrh	r3, [r7, #30]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <recvfrom+0xa8>
 8003868:	2300      	movs	r3, #0
 800386a:	e191      	b.n	8003b90 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800386c:	8bfb      	ldrh	r3, [r7, #30]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d100      	bne.n	8003874 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8003872:	e7d7      	b.n	8003824 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003874:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8003876:	7f7b      	ldrb	r3, [r7, #29]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	2b04      	cmp	r3, #4
 800387e:	d079      	beq.n	8003974 <recvfrom+0x1b0>
 8003880:	2b04      	cmp	r3, #4
 8003882:	f300 8142 	bgt.w	8003b0a <recvfrom+0x346>
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <recvfrom+0xce>
 800388a:	2b03      	cmp	r3, #3
 800388c:	f000 80dc 	beq.w	8003a48 <recvfrom+0x284>
 8003890:	e13b      	b.n	8003b0a <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	4a69      	ldr	r2, [pc, #420]	; (8003a3c <recvfrom+0x278>)
 8003896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d152      	bne.n	8003944 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800389e:	f107 0114 	add.w	r1, r7, #20
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2208      	movs	r2, #8
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff f92e 	bl	8002b08 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	3301      	adds	r3, #1
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038b8:	2140      	movs	r1, #64	; 0x40
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe ff24 	bl	8002708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80038c0:	bf00      	nop
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	3301      	adds	r3, #1
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fece 	bl	8002670 <WIZCHIP_READ>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f3      	bne.n	80038c2 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80038da:	7d3a      	ldrb	r2, [r7, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3301      	adds	r3, #1
 80038e4:	7d7a      	ldrb	r2, [r7, #21]
 80038e6:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3302      	adds	r3, #2
 80038ec:	7dba      	ldrb	r2, [r7, #22]
 80038ee:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3303      	adds	r3, #3
 80038f4:	7dfa      	ldrb	r2, [r7, #23]
 80038f6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80038f8:	7e3b      	ldrb	r3, [r7, #24]
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	b29a      	uxth	r2, r3
 8003908:	7e7b      	ldrb	r3, [r7, #25]
 800390a:	b29b      	uxth	r3, r3
 800390c:	4413      	add	r3, r2
 800390e:	b29a      	uxth	r2, r3
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8003914:	7eba      	ldrb	r2, [r7, #26]
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	b291      	uxth	r1, r2
 800391a:	4a48      	ldr	r2, [pc, #288]	; (8003a3c <recvfrom+0x278>)
 800391c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	4a46      	ldr	r2, [pc, #280]	; (8003a3c <recvfrom+0x278>)
 8003924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	b299      	uxth	r1, r3
 800392c:	7efb      	ldrb	r3, [r7, #27]
 800392e:	b29a      	uxth	r2, r3
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	440a      	add	r2, r1
 8003934:	b291      	uxth	r1, r2
 8003936:	4a41      	ldr	r2, [pc, #260]	; (8003a3c <recvfrom+0x278>)
 8003938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	4a41      	ldr	r2, [pc, #260]	; (8003a44 <recvfrom+0x280>)
 8003940:	2180      	movs	r1, #128	; 0x80
 8003942:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	4a3d      	ldr	r2, [pc, #244]	; (8003a3c <recvfrom+0x278>)
 8003948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800394c:	89ba      	ldrh	r2, [r7, #12]
 800394e:	429a      	cmp	r2, r3
 8003950:	d202      	bcs.n	8003958 <recvfrom+0x194>
 8003952:	89bb      	ldrh	r3, [r7, #12]
 8003954:	83fb      	strh	r3, [r7, #30]
 8003956:	e004      	b.n	8003962 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	4a38      	ldr	r2, [pc, #224]	; (8003a3c <recvfrom+0x278>)
 800395c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003960:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8003962:	8bfb      	ldrh	r3, [r7, #30]
 8003964:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003966:	8bfa      	ldrh	r2, [r7, #30]
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f8cb 	bl	8002b08 <wiz_recv_data>
			break;
 8003972:	e0d6      	b.n	8003b22 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	4a31      	ldr	r2, [pc, #196]	; (8003a3c <recvfrom+0x278>)
 8003978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d146      	bne.n	8003a0e <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8003980:	f107 0114 	add.w	r1, r7, #20
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2202      	movs	r2, #2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f8bd 	bl	8002b08 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	3301      	adds	r3, #1
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe feb3 	bl	8002708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80039a2:	bf00      	nop
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	3301      	adds	r3, #1
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fe5d 	bl	8002670 <WIZCHIP_READ>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f3      	bne.n	80039a4 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80039bc:	7d3a      	ldrb	r2, [r7, #20]
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	b291      	uxth	r1, r2
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <recvfrom+0x278>)
 80039c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <recvfrom+0x278>)
 80039cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	7d7b      	ldrb	r3, [r7, #21]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4413      	add	r3, r2
 80039da:	b29a      	uxth	r2, r3
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	3a02      	subs	r2, #2
 80039e0:	b291      	uxth	r1, r2
 80039e2:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <recvfrom+0x278>)
 80039e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <recvfrom+0x278>)
 80039ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d906      	bls.n	8003a06 <recvfrom+0x242>
   			{
   			   close(sn);
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fa3c 	bl	8002e78 <close>
   			   return SOCKFATAL_PACKLEN;
 8003a00:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8003a04:	e0c4      	b.n	8003b90 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <recvfrom+0x280>)
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <recvfrom+0x278>)
 8003a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a16:	89ba      	ldrh	r2, [r7, #12]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d202      	bcs.n	8003a22 <recvfrom+0x25e>
 8003a1c:	89bb      	ldrh	r3, [r7, #12]
 8003a1e:	83fb      	strh	r3, [r7, #30]
 8003a20:	e004      	b.n	8003a2c <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <recvfrom+0x278>)
 8003a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a2a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003a2c:	8bfa      	ldrh	r2, [r7, #30]
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f868 	bl	8002b08 <wiz_recv_data>
		   break;
 8003a38:	e073      	b.n	8003b22 <recvfrom+0x35e>
 8003a3a:	bf00      	nop
 8003a3c:	20000288 	.word	0x20000288
 8003a40:	20000284 	.word	0x20000284
 8003a44:	20000298 	.word	0x20000298
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	4a53      	ldr	r2, [pc, #332]	; (8003b98 <recvfrom+0x3d4>)
 8003a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d144      	bne.n	8003ade <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8003a54:	f107 0114 	add.w	r1, r7, #20
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2206      	movs	r2, #6
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff f853 	bl	8002b08 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	3301      	adds	r3, #1
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a6e:	2140      	movs	r1, #64	; 0x40
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fe49 	bl	8002708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003a76:	bf00      	nop
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fdf3 	bl	8002670 <WIZCHIP_READ>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f3      	bne.n	8003a78 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8003a90:	7d3a      	ldrb	r2, [r7, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	7d7a      	ldrb	r2, [r7, #21]
 8003a9c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	7dba      	ldrb	r2, [r7, #22]
 8003aa4:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3303      	adds	r3, #3
 8003aaa:	7dfa      	ldrb	r2, [r7, #23]
 8003aac:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8003aae:	7e3a      	ldrb	r2, [r7, #24]
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	b291      	uxth	r1, r2
 8003ab4:	4a38      	ldr	r2, [pc, #224]	; (8003b98 <recvfrom+0x3d4>)
 8003ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	4a36      	ldr	r2, [pc, #216]	; (8003b98 <recvfrom+0x3d4>)
 8003abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	b299      	uxth	r1, r3
 8003ac6:	7e7b      	ldrb	r3, [r7, #25]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	440a      	add	r2, r1
 8003ace:	b291      	uxth	r1, r2
 8003ad0:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <recvfrom+0x3d4>)
 8003ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <recvfrom+0x3d8>)
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	; (8003b98 <recvfrom+0x3d4>)
 8003ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ae6:	89ba      	ldrh	r2, [r7, #12]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d202      	bcs.n	8003af2 <recvfrom+0x32e>
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	83fb      	strh	r3, [r7, #30]
 8003af0:	e004      	b.n	8003afc <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <recvfrom+0x3d4>)
 8003af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003afa:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003afc:	8bfa      	ldrh	r2, [r7, #30]
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff f800 	bl	8002b08 <wiz_recv_data>
			break;
 8003b08:	e00b      	b.n	8003b22 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8003b0a:	8bfa      	ldrh	r2, [r7, #30]
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f855 	bl	8002bc0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	491f      	ldr	r1, [pc, #124]	; (8003b98 <recvfrom+0x3d4>)
 8003b1a:	8bfa      	ldrh	r2, [r7, #30]
 8003b1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8003b20:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	3301      	adds	r3, #1
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b2e:	2140      	movs	r1, #64	; 0x40
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fde9 	bl	8002708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8003b36:	bf00      	nop
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fd93 	bl	8002670 <WIZCHIP_READ>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f3      	bne.n	8003b38 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <recvfrom+0x3d4>)
 8003b54:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	8bfa      	ldrh	r2, [r7, #30]
 8003b5c:	1a8a      	subs	r2, r1, r2
 8003b5e:	b291      	uxth	r1, r2
 8003b60:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <recvfrom+0x3d4>)
 8003b62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <recvfrom+0x3d4>)
 8003b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <recvfrom+0x3d8>)
 8003b76:	5cd2      	ldrb	r2, [r2, r3]
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	b2d1      	uxtb	r1, r2
 8003b80:	4a06      	ldr	r2, [pc, #24]	; (8003b9c <recvfrom+0x3d8>)
 8003b82:	54d1      	strb	r1, [r2, r3]
 8003b84:	e003      	b.n	8003b8e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <recvfrom+0x3d8>)
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8003b8e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000288 	.word	0x20000288
 8003b9c:	20000298 	.word	0x20000298

08003ba0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	bf00      	nop
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	70fb      	strb	r3, [r7, #3]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	2300      	movs	r3, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	807b      	strh	r3, [r7, #2]
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	807b      	strh	r3, [r7, #2]
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <reg_wizchip_cs_cbfunc+0x16>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <reg_wizchip_cs_cbfunc+0x44>)
 8003c82:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <reg_wizchip_cs_cbfunc+0x48>)
 8003c88:	615a      	str	r2, [r3, #20]
 8003c8a:	e006      	b.n	8003c9a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6153      	str	r3, [r2, #20]
   }
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000020 	.word	0x20000020
 8003cac:	08003bbd 	.word	0x08003bbd
 8003cb0:	08003bcb 	.word	0x08003bcb

08003cb4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003cbe:	bf00      	nop
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f9      	beq.n	8003cc0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <reg_wizchip_spi_cbfunc+0x24>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cda:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <reg_wizchip_spi_cbfunc+0x50>)
 8003cdc:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <reg_wizchip_spi_cbfunc+0x54>)
 8003ce2:	61da      	str	r2, [r3, #28]
 8003ce4:	e006      	b.n	8003cf4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003ce6:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	61d3      	str	r3, [r2, #28]
   }
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	20000020 	.word	0x20000020
 8003d04:	08003c11 	.word	0x08003c11
 8003d08:	08003c21 	.word	0x08003c21

08003d0c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003d16:	bf00      	nop
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f9      	beq.n	8003d18 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <reg_wizchip_spiburst_cbfunc+0x24>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d106      	bne.n	8003d3e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <reg_wizchip_spiburst_cbfunc+0x50>)
 8003d34:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d38:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d3c:	e006      	b.n	8003d4c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003d3e:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	20000020 	.word	0x20000020
 8003d5c:	08003c37 	.word	0x08003c37
 8003d60:	08003c4f 	.word	0x08003c4f

08003d64 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	71fb      	strb	r3, [r7, #7]
#if    _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	f200 80c2 	bhi.w	8003f08 <ctlwizchip+0x1a4>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <ctlwizchip+0x28>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dd3 	.word	0x08003dd3
 8003d94:	08003dff 	.word	0x08003dff
 8003d98:	08003df3 	.word	0x08003df3
 8003d9c:	08003e0d 	.word	0x08003e0d
 8003da0:	08003e19 	.word	0x08003e19
 8003da4:	08003e27 	.word	0x08003e27
 8003da8:	08003e4d 	.word	0x08003e4d
 8003dac:	08003e73 	.word	0x08003e73
 8003db0:	08003ead 	.word	0x08003ead
 8003db4:	08003eb3 	.word	0x08003eb3
 8003db8:	08003ebb 	.word	0x08003ebb
 8003dbc:	08003f0f 	.word	0x08003f0f
 8003dc0:	08003ec3 	.word	0x08003ec3
 8003dc4:	08003ed1 	.word	0x08003ed1
 8003dc8:	08003eed 	.word	0x08003eed
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003dcc:	f000 f8a8 	bl	8003f20 <wizchip_sw_reset>
         break;
 8003dd0:	e09e      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3308      	adds	r3, #8
 8003de0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f8e5 	bl	8003fb8 <wizchip_init>
 8003dee:	4603      	mov	r3, r0
 8003df0:	e08f      	b.n	8003f12 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f96a 	bl	80040d0 <wizchip_clrinterrupt>
         break;
 8003dfc:	e088      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003dfe:	f000 f985 	bl	800410c <wizchip_getinterrupt>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	801a      	strh	r2, [r3, #0]
         break;
 8003e0a:	e081      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f9a0 	bl	8004156 <wizchip_setinterruptmask>
         break;         
 8003e16:	e07b      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003e18:	f000 f9b8 	bl	800418c <wizchip_getinterruptmask>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	801a      	strh	r2, [r3, #0]
         break;
 8003e24:	e074      	b.n	8003f10 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003e36:	f7fe fc67 	bl	8002708 <WIZCHIP_WRITE>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4619      	mov	r1, r3
 8003e42:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003e46:	f7fe fc5f 	bl	8002708 <WIZCHIP_WRITE>
         break;
 8003e4a:	e061      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003e4c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003e50:	f7fe fc0e 	bl	8002670 <WIZCHIP_READ>
 8003e54:	4603      	mov	r3, r0
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	b29c      	uxth	r4, r3
 8003e5c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003e60:	f7fe fc06 	bl	8002670 <WIZCHIP_READ>
 8003e64:	4603      	mov	r3, r0
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4423      	add	r3, r4
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	801a      	strh	r2, [r3, #0]
         break;
 8003e70:	e04e      	b.n	8003f10 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003e72:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e74:	789a      	ldrb	r2, [r3, #2]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	4a27      	ldr	r2, [pc, #156]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e80:	78d2      	ldrb	r2, [r2, #3]
 8003e82:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	3302      	adds	r3, #2
 8003e88:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e8a:	7912      	ldrb	r2, [r2, #4]
 8003e8c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	3303      	adds	r3, #3
 8003e92:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e94:	7952      	ldrb	r2, [r2, #5]
 8003e96:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e9e:	7992      	ldrb	r2, [r2, #6]
 8003ea0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	3305      	adds	r3, #5
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
         break;
 8003eaa:	e031      	b.n	8003f10 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003eac:	f000 f9c0 	bl	8004230 <wizphy_reset>
         break;
 8003eb0:	e02e      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003eb2:	6838      	ldr	r0, [r7, #0]
 8003eb4:	f000 f9e3 	bl	800427e <wizphy_setphyconf>
         break;
 8003eb8:	e02a      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003eba:	6838      	ldr	r0, [r7, #0]
 8003ebc:	f000 fa22 	bl	8004304 <wizphy_getphyconf>
         break;
 8003ec0:	e026      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fa86 	bl	80043d8 <wizphy_setphypmode>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	e020      	b.n	8003f12 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003ed0:	f000 f995 	bl	80041fe <wizphy_getphypmode>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2bff      	cmp	r3, #255	; 0xff
 8003edc:	d102      	bne.n	8003ee4 <ctlwizchip+0x180>
 8003ede:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee2:	e016      	b.n	8003f12 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	7dfa      	ldrb	r2, [r7, #23]
 8003ee8:	701a      	strb	r2, [r3, #0]
         break;
 8003eea:	e011      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003eec:	f000 f971 	bl	80041d2 <wizphy_getphylink>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	2bff      	cmp	r3, #255	; 0xff
 8003ef8:	d102      	bne.n	8003f00 <ctlwizchip+0x19c>
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	e008      	b.n	8003f12 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	7dfa      	ldrb	r2, [r7, #23]
 8003f04:	701a      	strb	r2, [r3, #0]
         break;
 8003f06:	e003      	b.n	8003f10 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0c:	e001      	b.n	8003f12 <ctlwizchip+0x1ae>
         break;
 8003f0e:	bf00      	nop
   }
   return 0;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd90      	pop	{r4, r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000020 	.word	0x20000020

08003f20 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	2206      	movs	r2, #6
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003f30:	f7fe fc38 	bl	80027a4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	2204      	movs	r2, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f40:	f7fe fc30 	bl	80027a4 <WIZCHIP_READ_BUF>
 8003f44:	f107 0310 	add.w	r3, r7, #16
 8003f48:	2204      	movs	r2, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003f50:	f7fe fc28 	bl	80027a4 <WIZCHIP_READ_BUF>
 8003f54:	f107 030c 	add.w	r3, r7, #12
 8003f58:	2204      	movs	r2, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003f60:	f7fe fc20 	bl	80027a4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003f64:	2180      	movs	r1, #128	; 0x80
 8003f66:	2000      	movs	r0, #0
 8003f68:	f7fe fbce 	bl	8002708 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7fe fb7f 	bl	8002670 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003f72:	1d3b      	adds	r3, r7, #4
 8003f74:	2206      	movs	r2, #6
 8003f76:	4619      	mov	r1, r3
 8003f78:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003f7c:	f7fe fc72 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	2204      	movs	r2, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f8c:	f7fe fc6a 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003f90:	f107 0310 	add.w	r3, r7, #16
 8003f94:	2204      	movs	r2, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003f9c:	f7fe fc62 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003fac:	f7fe fc5a 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8003fb0:	bf00      	nop
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003fc6:	f7ff ffab 	bl	8003f20 <wizchip_sw_reset>
   if(txsize)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03b      	beq.n	8004048 <wizchip_init+0x90>
   {
      tmp = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e015      	b.n	8004006 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8003fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	7bbb      	ldrb	r3, [r7, #14]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8003fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	dd02      	ble.n	8003ffa <wizchip_init+0x42>
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff8:	e066      	b.n	80040c8 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3301      	adds	r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	73fb      	strb	r3, [r7, #15]
 8004006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400a:	2b07      	cmp	r3, #7
 800400c:	dde5      	ble.n	8003fda <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
 8004012:	e015      	b.n	8004040 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	3301      	adds	r3, #1
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004022:	4618      	mov	r0, r3
 8004024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	4619      	mov	r1, r3
 8004030:	f7fe fb6a 	bl	8002708 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	3301      	adds	r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004044:	2b07      	cmp	r3, #7
 8004046:	dde5      	ble.n	8004014 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d03b      	beq.n	80040c6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
 8004056:	e015      	b.n	8004084 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8004058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	4413      	add	r3, r2
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	7bbb      	ldrb	r3, [r7, #14]
 8004064:	4413      	add	r3, r2
 8004066:	b2db      	uxtb	r3, r3
 8004068:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800406a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800406e:	2b10      	cmp	r3, #16
 8004070:	dd02      	ble.n	8004078 <wizchip_init+0xc0>
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
 8004076:	e027      	b.n	80040c8 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	3301      	adds	r3, #1
 8004080:	b2db      	uxtb	r3, r3
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004088:	2b07      	cmp	r3, #7
 800408a:	dde5      	ble.n	8004058 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	e015      	b.n	80040be <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8004092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	3301      	adds	r3, #1
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80040a0:	4618      	mov	r0, r3
 80040a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	4619      	mov	r1, r3
 80040ae:	f7fe fb2b 	bl	8002708 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80040b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	3301      	adds	r3, #1
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	73fb      	strb	r3, [r7, #15]
 80040be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c2:	2b07      	cmp	r3, #7
 80040c4:	dde5      	ble.n	8004092 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	f023 030f 	bic.w	r3, r3, #15
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	4619      	mov	r1, r3
 80040f0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80040f4:	f7fe fb08 	bl	8002708 <WIZCHIP_WRITE>
   setSIR(sir);
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	4619      	mov	r1, r3
 80040fc:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8004100:	f7fe fb02 	bl	8002708 <WIZCHIP_WRITE>
#endif   
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800411e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8004122:	f7fe faa5 	bl	8002670 <WIZCHIP_READ>
 8004126:	4603      	mov	r3, r0
 8004128:	f023 030f 	bic.w	r3, r3, #15
 800412c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800412e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8004132:	f7fe fa9d 	bl	8002670 <WIZCHIP_READ>
 8004136:	4603      	mov	r3, r0
 8004138:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800413a:	79bb      	ldrb	r3, [r7, #6]
 800413c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800413e:	88bb      	ldrh	r3, [r7, #4]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	b29a      	uxth	r2, r3
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	b29b      	uxth	r3, r3
 8004148:	4413      	add	r3, r2
 800414a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800414c:	88bb      	ldrh	r3, [r7, #4]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	4603      	mov	r3, r0
 800415e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	b29b      	uxth	r3, r3
 800416a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	4619      	mov	r1, r3
 8004170:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8004174:	f7fe fac8 	bl	8002708 <WIZCHIP_WRITE>
   setSIMR(simr);
 8004178:	7bbb      	ldrb	r3, [r7, #14]
 800417a:	4619      	mov	r1, r3
 800417c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8004180:	f7fe fac2 	bl	8002708 <WIZCHIP_WRITE>
#endif   
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800419e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80041a2:	f7fe fa65 	bl	8002670 <WIZCHIP_READ>
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80041aa:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80041ae:	f7fe fa5f 	bl	8002670 <WIZCHIP_READ>
 80041b2:	4603      	mov	r3, r0
 80041b4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80041b6:	79bb      	ldrb	r3, [r7, #6]
 80041b8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80041ba:	88bb      	ldrh	r3, [r7, #4]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	b29a      	uxth	r2, r3
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80041c8:	88bb      	ldrh	r3, [r7, #4]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80041d8:	2300      	movs	r3, #0
 80041da:	71fb      	strb	r3, [r7, #7]
       tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80041dc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80041e0:	f7fe fa46 	bl	8002670 <WIZCHIP_READ>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80041ee:	2301      	movs	r3, #1
 80041f0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004208:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800420c:	f7fe fa30 	bl	8002670 <WIZCHIP_READ>
 8004210:	4603      	mov	r3, r0
 8004212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004216:	2b30      	cmp	r3, #48	; 0x30
 8004218:	d102      	bne.n	8004220 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800421a:	2301      	movs	r3, #1
 800421c:	71fb      	strb	r3, [r7, #7]
 800421e:	e001      	b.n	8004224 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004220:	2300      	movs	r3, #0
 8004222:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004224:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004236:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800423a:	f7fe fa19 	bl	8002670 <WIZCHIP_READ>
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004248:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	4619      	mov	r1, r3
 800424e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004252:	f7fe fa59 	bl	8002708 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004256:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800425a:	f7fe fa09 	bl	8002670 <WIZCHIP_READ>
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004268:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	4619      	mov	r1, r3
 800426e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004272:	f7fe fa49 	bl	8002708 <WIZCHIP_WRITE>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d104      	bne.n	800429c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	e003      	b.n	80042a4 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	785b      	ldrb	r3, [r3, #1]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d104      	bne.n	80042b6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e019      	b.n	80042ea <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	78db      	ldrb	r3, [r3, #3]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10d      	bne.n	80042da <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	789b      	ldrb	r3, [r3, #2]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d104      	bne.n	80042d0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	f043 0318 	orr.w	r3, r3, #24
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e00c      	b.n	80042ea <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	f043 0308 	orr.w	r3, r3, #8
 80042d6:	73fb      	strb	r3, [r7, #15]
 80042d8:	e007      	b.n	80042ea <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	789b      	ldrb	r3, [r3, #2]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d103      	bne.n	80042ea <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	f043 0310 	orr.w	r3, r3, #16
 80042e8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	4619      	mov	r1, r3
 80042ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80042f2:	f7fe fa09 	bl	8002708 <WIZCHIP_WRITE>
   wizphy_reset();
 80042f6:	f7ff ff9b 	bl	8004230 <wizphy_reset>
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004310:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004314:	f7fe f9ac 	bl	8002670 <WIZCHIP_READ>
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	119b      	asrs	r3, r3, #6
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004332:	2b20      	cmp	r3, #32
 8004334:	d001      	beq.n	800433a <wizphy_getphyconf+0x36>
 8004336:	2b38      	cmp	r3, #56	; 0x38
 8004338:	d103      	bne.n	8004342 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	705a      	strb	r2, [r3, #1]
         break;
 8004340:	e003      	b.n	800434a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	705a      	strb	r2, [r3, #1]
         break;
 8004348:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004350:	3b10      	subs	r3, #16
 8004352:	2b10      	cmp	r3, #16
 8004354:	bf8c      	ite	hi
 8004356:	2201      	movhi	r2, #1
 8004358:	2200      	movls	r2, #0
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	2a00      	cmp	r2, #0
 800435e:	d10f      	bne.n	8004380 <wizphy_getphyconf+0x7c>
 8004360:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <wizphy_getphyconf+0xcc>)
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	bf14      	ite	ne
 800436e:	2301      	movne	r3, #1
 8004370:	2300      	moveq	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	709a      	strb	r2, [r3, #2]
         break;
 800437e:	e003      	b.n	8004388 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	709a      	strb	r2, [r3, #2]
         break;
 8004386:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800438e:	3b08      	subs	r3, #8
 8004390:	2b18      	cmp	r3, #24
 8004392:	bf8c      	ite	hi
 8004394:	2201      	movhi	r2, #1
 8004396:	2200      	movls	r2, #0
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	2a00      	cmp	r2, #0
 800439c:	d10f      	bne.n	80043be <wizphy_getphyconf+0xba>
 800439e:	4a0d      	ldr	r2, [pc, #52]	; (80043d4 <wizphy_getphyconf+0xd0>)
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	70da      	strb	r2, [r3, #3]
         break;
 80043bc:	e003      	b.n	80043c6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	70da      	strb	r2, [r3, #3]
         break;
 80043c4:	bf00      	nop
   }
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	00010101 	.word	0x00010101
 80043d4:	01010001 	.word	0x01010001

080043d8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80043e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80043ea:	f7fe f941 	bl	8002670 <WIZCHIP_READ>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <wizphy_setphypmode+0x2a>
 80043fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004400:	e030      	b.n	8004464 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004408:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d104      	bne.n	800441a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e003      	b.n	8004422 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004420:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	4619      	mov	r1, r3
 8004426:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800442a:	f7fe f96d 	bl	8002708 <WIZCHIP_WRITE>
   wizphy_reset();
 800442e:	f7ff feff 	bl	8004230 <wizphy_reset>
   tmp = getPHYCFGR();
 8004432:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004436:	f7fe f91b 	bl	8002670 <WIZCHIP_READ>
 800443a:	4603      	mov	r3, r0
 800443c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <wizphy_setphypmode+0x88>
 800444e:	2300      	movs	r3, #0
 8004450:	e008      	b.n	8004464 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <wizphy_setphypmode+0x88>
 800445c:	2300      	movs	r3, #0
 800445e:	e001      	b.n	8004464 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2206      	movs	r2, #6
 8004478:	4619      	mov	r1, r3
 800447a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800447e:	f7fe f9f1 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	330e      	adds	r3, #14
 8004486:	2204      	movs	r2, #4
 8004488:	4619      	mov	r1, r3
 800448a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800448e:	f7fe f9e9 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	330a      	adds	r3, #10
 8004496:	2204      	movs	r2, #4
 8004498:	4619      	mov	r1, r3
 800449a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800449e:	f7fe f9e1 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3306      	adds	r3, #6
 80044a6:	2204      	movs	r2, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80044ae:	f7fe f9d9 	bl	8002864 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	7c9a      	ldrb	r2, [r3, #18]
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044b8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7cda      	ldrb	r2, [r3, #19]
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044c0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7d1a      	ldrb	r2, [r3, #20]
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044c8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7d5a      	ldrb	r2, [r3, #21]
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044d0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	7d9a      	ldrb	r2, [r3, #22]
 80044d6:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <wizchip_setnetinfo+0x7c>)
 80044d8:	701a      	strb	r2, [r3, #0]
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200002a0 	.word	0x200002a0
 80044e8:	200002a4 	.word	0x200002a4

080044ec <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <cJSON_GetErrorPtr+0x18>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <cJSON_GetErrorPtr+0x18>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4413      	add	r3, r2
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	200002a8 	.word	0x200002a8

08004508 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <case_insensitive_strcmp+0x16>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800451e:	2301      	movs	r3, #1
 8004520:	e056      	b.n	80045d0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d10d      	bne.n	8004546 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800452a:	2300      	movs	r3, #0
 800452c:	e050      	b.n	80045d0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8004536:	2300      	movs	r3, #0
 8004538:	e04a      	b.n	80045d0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3301      	adds	r3, #1
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	3301      	adds	r3, #1
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <case_insensitive_strcmp+0xd4>)
 8004552:	4413      	add	r3, r2
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d103      	bne.n	8004566 <case_insensitive_strcmp+0x5e>
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	f103 0220 	add.w	r2, r3, #32
 8004564:	e000      	b.n	8004568 <case_insensitive_strcmp+0x60>
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	73bb      	strb	r3, [r7, #14]
 800456e:	7bbb      	ldrb	r3, [r7, #14]
 8004570:	3301      	adds	r3, #1
 8004572:	491a      	ldr	r1, [pc, #104]	; (80045dc <case_insensitive_strcmp+0xd4>)
 8004574:	440b      	add	r3, r1
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d102      	bne.n	8004586 <case_insensitive_strcmp+0x7e>
 8004580:	7bbb      	ldrb	r3, [r7, #14]
 8004582:	3320      	adds	r3, #32
 8004584:	e000      	b.n	8004588 <case_insensitive_strcmp+0x80>
 8004586:	7bbb      	ldrb	r3, [r7, #14]
 8004588:	429a      	cmp	r2, r3
 800458a:	d0d0      	beq.n	800452e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	737b      	strb	r3, [r7, #13]
 8004592:	7b7b      	ldrb	r3, [r7, #13]
 8004594:	3301      	adds	r3, #1
 8004596:	4a11      	ldr	r2, [pc, #68]	; (80045dc <case_insensitive_strcmp+0xd4>)
 8004598:	4413      	add	r3, r2
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d103      	bne.n	80045ac <case_insensitive_strcmp+0xa4>
 80045a4:	7b7b      	ldrb	r3, [r7, #13]
 80045a6:	f103 0220 	add.w	r2, r3, #32
 80045aa:	e000      	b.n	80045ae <case_insensitive_strcmp+0xa6>
 80045ac:	7b7a      	ldrb	r2, [r7, #13]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	733b      	strb	r3, [r7, #12]
 80045b4:	7b3b      	ldrb	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	4908      	ldr	r1, [pc, #32]	; (80045dc <case_insensitive_strcmp+0xd4>)
 80045ba:	440b      	add	r3, r1
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d102      	bne.n	80045cc <case_insensitive_strcmp+0xc4>
 80045c6:	7b3b      	ldrb	r3, [r7, #12]
 80045c8:	3320      	adds	r3, #32
 80045ca:	e000      	b.n	80045ce <case_insensitive_strcmp+0xc6>
 80045cc:	7b3b      	ldrb	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	0801b9d8 	.word	0x0801b9d8

080045e0 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <cJSON_strdup+0x1c>
    {
        return NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e015      	b.n	8004628 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fb fe47 	bl	8000290 <strlen>
 8004602:	4603      	mov	r3, r0
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	4798      	blx	r3
 8004610:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <cJSON_strdup+0x3c>
    {
        return NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	e005      	b.n	8004628 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	68b8      	ldr	r0, [r7, #8]
 8004622:	f013 fc9a 	bl	8017f5a <memcpy>

    return copy;
 8004626:	68bb      	ldr	r3, [r7, #8]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2028      	movs	r0, #40	; 0x28
 800463e:	4798      	blx	r3
 8004640:	60f8      	str	r0, [r7, #12]
    if (node)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8004648:	2228      	movs	r2, #40	; 0x28
 800464a:	2100      	movs	r1, #0
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f013 fb79 	bl	8017d44 <memset>
    }

    return node;
 8004652:	68fb      	ldr	r3, [r7, #12]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8004668:	e037      	b.n	80046da <cJSON_Delete+0x7e>
    {
        next = item->next;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d108      	bne.n	800468e <cJSON_Delete+0x32>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ffe7 	bl	800465c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <cJSON_Delete+0x52>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <cJSON_Delete+0x90>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6912      	ldr	r2, [r2, #16]
 80046aa:	4610      	mov	r0, r2
 80046ac:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <cJSON_Delete+0x72>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <cJSON_Delete+0x90>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6a12      	ldr	r2, [r2, #32]
 80046ca:	4610      	mov	r0, r2
 80046cc:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <cJSON_Delete+0x90>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
        item = next;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1c4      	bne.n	800466a <cJSON_Delete+0xe>
    }
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000048 	.word	0x20000048

080046f0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80046f4:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b098      	sub	sp, #96	; 0x60
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
    double number = 0;
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800471a:	f7ff ffe9 	bl	80046f0 <get_decimal_point>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <parse_number+0x36>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <parse_number+0x3a>
    {
        return false;
 8004736:	2300      	movs	r3, #0
 8004738:	e0a0      	b.n	800487c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800473a:	2300      	movs	r3, #0
 800473c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800473e:	e03d      	b.n	80047bc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800474a:	440b      	add	r3, r1
 800474c:	4413      	add	r3, r2
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b45      	cmp	r3, #69	; 0x45
 8004752:	dc17      	bgt.n	8004784 <parse_number+0x84>
 8004754:	2b2b      	cmp	r3, #43	; 0x2b
 8004756:	db40      	blt.n	80047da <parse_number+0xda>
 8004758:	3b2b      	subs	r3, #43	; 0x2b
 800475a:	2201      	movs	r2, #1
 800475c:	409a      	lsls	r2, r3
 800475e:	4b4c      	ldr	r3, [pc, #304]	; (8004890 <parse_number+0x190>)
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <parse_number+0x88>
 8004770:	f002 0308 	and.w	r3, r2, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d111      	bne.n	80047a6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8004782:	e02a      	b.n	80047da <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8004784:	2b65      	cmp	r3, #101	; 0x65
 8004786:	d128      	bne.n	80047da <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004792:	440b      	add	r3, r1
 8004794:	4413      	add	r3, r2
 8004796:	7819      	ldrb	r1, [r3, #0]
 8004798:	f107 0208 	add.w	r2, r7, #8
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479e:	4413      	add	r3, r2
 80047a0:	460a      	mov	r2, r1
 80047a2:	701a      	strb	r2, [r3, #0]
                break;
 80047a4:	e007      	b.n	80047b6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80047a6:	f107 0208 	add.w	r2, r7, #8
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	4413      	add	r3, r2
 80047ae:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80047b2:	701a      	strb	r2, [r3, #0]
                break;
 80047b4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80047b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b8:	3301      	adds	r3, #1
 80047ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047be:	2b3e      	cmp	r3, #62	; 0x3e
 80047c0:	d80d      	bhi.n	80047de <parse_number+0xde>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <parse_number+0xde>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ce:	441a      	add	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3b3      	bcc.n	8004740 <parse_number+0x40>
        }
    }
loop_end:
 80047d8:	e001      	b.n	80047de <parse_number+0xde>
                goto loop_end;
 80047da:	bf00      	nop
 80047dc:	e000      	b.n	80047e0 <parse_number+0xe0>
loop_end:
 80047de:	bf00      	nop
    number_c_string[i] = '\0';
 80047e0:	f107 0208 	add.w	r2, r7, #8
 80047e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e6:	4413      	add	r3, r2
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80047ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047f0:	f107 0308 	add.w	r3, r7, #8
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f012 fc36 	bl	8017068 <strtod>
 80047fc:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8004800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	429a      	cmp	r2, r3
 8004808:	d101      	bne.n	800480e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800480a:	2300      	movs	r3, #0
 800480c:	e036      	b.n	800487c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004814:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8004818:	a31b      	add	r3, pc, #108	; (adr r3, 8004888 <parse_number+0x188>)
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004822:	f7fc f97f 	bl	8000b24 <__aeabi_dcmpge>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004832:	615a      	str	r2, [r3, #20]
 8004834:	e015      	b.n	8004862 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	4b16      	ldr	r3, [pc, #88]	; (8004894 <parse_number+0x194>)
 800483c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004840:	f7fc f966 	bl	8000b10 <__aeabi_dcmple>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004850:	615a      	str	r2, [r3, #20]
 8004852:	e006      	b.n	8004862 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8004854:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004858:	f7fc f98e 	bl	8000b78 <__aeabi_d2iz>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2208      	movs	r2, #8
 8004866:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800486e:	f107 0208 	add.w	r2, r7, #8
 8004872:	1a8a      	subs	r2, r1, r2
 8004874:	441a      	add	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	609a      	str	r2, [r3, #8]
    return true;
 800487a:	2301      	movs	r3, #1
}
 800487c:	4618      	mov	r0, r3
 800487e:	3760      	adds	r7, #96	; 0x60
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	f3af 8000 	nop.w
 8004888:	ffc00000 	.word	0xffc00000
 800488c:	41dfffff 	.word	0x41dfffff
 8004890:	04007fe5 	.word	0x04007fe5
 8004894:	c1e00000 	.word	0xc1e00000

08004898 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <ensure+0x20>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <ensure+0x24>
    {
        return NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e083      	b.n	80049c4 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <ensure+0x3c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d301      	bcc.n	80048d4 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e077      	b.n	80049c4 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	da01      	bge.n	80048de <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	e072      	b.n	80049c4 <ensure+0x12c>
    }

    needed += p->offset + 1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	3301      	adds	r3, #1
 80048e8:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d805      	bhi.n	8004900 <ensure+0x68>
    {
        return p->buffer + p->offset;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4413      	add	r3, r2
 80048fe:	e061      	b.n	80049c4 <ensure+0x12c>
    }

    if (p->noalloc) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <ensure+0x74>
        return NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	e05b      	b.n	80049c4 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d308      	bcc.n	8004926 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	db03      	blt.n	8004922 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800491a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	e004      	b.n	800492c <ensure+0x94>
        }
        else
        {
            return NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	e04e      	b.n	80049c4 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d018      	beq.n	8004966 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	4610      	mov	r0, r2
 8004940:	4798      	blx	r3
 8004942:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d132      	bne.n	80049b0 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	4610      	mov	r0, r2
 8004954:	4798      	blx	r3
            p->length = 0;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]

            return NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	e02e      	b.n	80049c4 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	68b8      	ldr	r0, [r7, #8]
 800496c:	4798      	blx	r3
 800496e:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	4610      	mov	r0, r2
 8004980:	4798      	blx	r3
            p->length = 0;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

            return NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	e018      	b.n	80049c4 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6819      	ldr	r1, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	3301      	adds	r3, #1
 800499c:	461a      	mov	r2, r3
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f013 fadb 	bl	8017f5a <memcpy>
        p->hooks.deallocate(p->buffer);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	4610      	mov	r0, r2
 80049ae:	4798      	blx	r3
    }
    p->length = newsize;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4413      	add	r3, r2
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <update_offset+0x3a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00f      	beq.n	8004a06 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4413      	add	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689c      	ldr	r4, [r3, #8]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7fb fc4a 	bl	8000290 <strlen>
 80049fc:	4603      	mov	r3, r0
 80049fe:	18e2      	adds	r2, r4, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	e000      	b.n	8004a08 <update_offset+0x3c>
        return;
 8004a06:	bf00      	nop
}
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd90      	pop	{r4, r7, pc}
	...

08004a10 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8004a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	ed87 0b02 	vstr	d0, [r7, #8]
 8004a1c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	68fe      	ldr	r6, [r7, #12]
 8004a24:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	687e      	ldr	r6, [r7, #4]
 8004a2c:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004a30:	f7fc f882 	bl	8000b38 <__aeabi_dcmpgt>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <compare_double+0x34>
 8004a3a:	68bc      	ldr	r4, [r7, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004a42:	e003      	b.n	8004a4c <compare_double+0x3c>
 8004a44:	683c      	ldr	r4, [r7, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004a4c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8004a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a58:	f7fb fc26 	bl	80002a8 <__aeabi_dsub>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4690      	mov	r8, r2
 8004a62:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <compare_double+0x8c>)
 8004a6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a70:	f7fb fdd2 	bl	8000618 <__aeabi_dmul>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	2101      	movs	r1, #1
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4649      	mov	r1, r9
 8004a80:	f7fc f846 	bl	8000b10 <__aeabi_dcmple>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <compare_double+0x7e>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	461c      	mov	r4, r3
 8004a8e:	b2e3      	uxtb	r3, r4
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a9a:	bf00      	nop
 8004a9c:	3cb00000 	.word	0x3cb00000

08004aa0 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa2:	b093      	sub	sp, #76	; 0x4c
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004ab4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	f107 0318 	add.w	r3, r7, #24
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	611a      	str	r2, [r3, #16]
 8004ad4:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8004ad6:	f7ff fe0b 	bl	80046f0 <get_decimal_point>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <print_number+0x56>
    {
        return false;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e0b4      	b.n	8004c60 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8004af6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004afa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004afe:	f7fc f825 	bl	8000b4c <__aeabi_dcmpun>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d121      	bne.n	8004b4c <print_number+0xac>
 8004b08:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004b10:	2301      	movs	r3, #1
 8004b12:	461e      	mov	r6, r3
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295
 8004b18:	4b53      	ldr	r3, [pc, #332]	; (8004c68 <print_number+0x1c8>)
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f7fc f815 	bl	8000b4c <__aeabi_dcmpun>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <print_number+0xa0>
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	4b4e      	ldr	r3, [pc, #312]	; (8004c68 <print_number+0x1c8>)
 8004b2e:	4620      	mov	r0, r4
 8004b30:	4629      	mov	r1, r5
 8004b32:	f7fb ffed 	bl	8000b10 <__aeabi_dcmple>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <print_number+0xa0>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	461e      	mov	r6, r3
 8004b40:	b2f3      	uxtb	r3, r6
 8004b42:	f083 0301 	eor.w	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	4946      	ldr	r1, [pc, #280]	; (8004c6c <print_number+0x1cc>)
 8004b52:	4618      	mov	r0, r3
 8004b54:	f013 f802 	bl	8017b5c <siprintf>
 8004b58:	6478      	str	r0, [r7, #68]	; 0x44
 8004b5a:	e03f      	b.n	8004bdc <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fb fcef 	bl	8000544 <__aeabi_i2d>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b6e:	f7fb ffbb 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	493b      	ldr	r1, [pc, #236]	; (8004c70 <print_number+0x1d0>)
 8004b82:	4618      	mov	r0, r3
 8004b84:	f012 ffea 	bl	8017b5c <siprintf>
 8004b88:	6478      	str	r0, [r7, #68]	; 0x44
 8004b8a:	e027      	b.n	8004bdc <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8004b8c:	f107 0014 	add.w	r0, r7, #20
 8004b90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b94:	4937      	ldr	r1, [pc, #220]	; (8004c74 <print_number+0x1d4>)
 8004b96:	f012 ffe1 	bl	8017b5c <siprintf>
 8004b9a:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8004b9c:	f107 0208 	add.w	r2, r7, #8
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4934      	ldr	r1, [pc, #208]	; (8004c78 <print_number+0x1d8>)
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f012 fff8 	bl	8017b9c <siscanf>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d10c      	bne.n	8004bcc <print_number+0x12c>
 8004bb2:	ed97 7b02 	vldr	d7, [r7, #8]
 8004bb6:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8004bba:	eeb0 0a47 	vmov.f32	s0, s14
 8004bbe:	eef0 0a67 	vmov.f32	s1, s15
 8004bc2:	f7ff ff25 	bl	8004a10 <compare_double>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8004bcc:	f107 0014 	add.w	r0, r7, #20
 8004bd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bd4:	4929      	ldr	r1, [pc, #164]	; (8004c7c <print_number+0x1dc>)
 8004bd6:	f012 ffc1 	bl	8017b5c <siprintf>
 8004bda:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8004bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db02      	blt.n	8004be8 <print_number+0x148>
 8004be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be4:	2b19      	cmp	r3, #25
 8004be6:	dd01      	ble.n	8004bec <print_number+0x14c>
    {
        return false;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e039      	b.n	8004c60 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8004bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bee:	3301      	adds	r3, #1
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6838      	ldr	r0, [r7, #0]
 8004bf4:	f7ff fe50 	bl	8004898 <ensure>
 8004bf8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8004bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <print_number+0x164>
    {
        return false;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e02d      	b.n	8004c60 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	643b      	str	r3, [r7, #64]	; 0x40
 8004c08:	e01a      	b.n	8004c40 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8004c0a:	f107 0214 	add.w	r2, r7, #20
 8004c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c10:	4413      	add	r3, r2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d105      	bne.n	8004c28 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8004c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c20:	4413      	add	r3, r2
 8004c22:	222e      	movs	r2, #46	; 0x2e
 8004c24:	701a      	strb	r2, [r3, #0]
            continue;
 8004c26:	e008      	b.n	8004c3a <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8004c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f107 0114 	add.w	r1, r7, #20
 8004c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c34:	440a      	add	r2, r1
 8004c36:	7812      	ldrb	r2, [r2, #0]
 8004c38:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8004c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d3e0      	bcc.n	8004c0a <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8004c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4c:	4413      	add	r3, r2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c58:	441a      	add	r2, r3
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	609a      	str	r2, [r3, #8]

    return true;
 8004c5e:	2301      	movs	r3, #1
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	374c      	adds	r7, #76	; 0x4c
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c68:	7fefffff 	.word	0x7fefffff
 8004c6c:	0801afe8 	.word	0x0801afe8
 8004c70:	0801aff0 	.word	0x0801aff0
 8004c74:	0801aff4 	.word	0x0801aff4
 8004c78:	0801affc 	.word	0x0801affc
 8004c7c:	0801b000 	.word	0x0801b000

08004c80 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	e04c      	b.n	8004d30 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b2f      	cmp	r3, #47	; 0x2f
 8004ca0:	d90f      	bls.n	8004cc2 <parse_hex4+0x42>
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b39      	cmp	r3, #57	; 0x39
 8004cac:	d809      	bhi.n	8004cc2 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	3b30      	subs	r3, #48	; 0x30
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e02d      	b.n	8004d1e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	d90f      	bls.n	8004cee <parse_hex4+0x6e>
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b46      	cmp	r3, #70	; 0x46
 8004cd8:	d809      	bhi.n	8004cee <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4413      	add	r3, r2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3b37      	subs	r3, #55	; 0x37
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e017      	b.n	8004d1e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b60      	cmp	r3, #96	; 0x60
 8004cf8:	d90f      	bls.n	8004d1a <parse_hex4+0x9a>
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b66      	cmp	r3, #102	; 0x66
 8004d04:	d809      	bhi.n	8004d1a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	3b57      	subs	r3, #87	; 0x57
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e001      	b.n	8004d1e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e00c      	b.n	8004d38 <parse_hex4+0xb8>
        }

        if (i < 3)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d802      	bhi.n	8004d2a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d9af      	bls.n	8004c96 <parse_hex4+0x16>
        }
    }

    return h;
 8004d36:	68fb      	ldr	r3, [r7, #12]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	f340 80b7 	ble.w	8004eee <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	3302      	adds	r3, #2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff ff7b 	bl	8004c80 <parse_hex4>
 8004d8a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004d92:	d304      	bcc.n	8004d9e <utf16_literal_to_utf8+0x5a>
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8004d9a:	f0c0 80aa 	bcc.w	8004ef2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8004da4:	d337      	bcc.n	8004e16 <utf16_literal_to_utf8+0xd2>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004dac:	d233      	bcs.n	8004e16 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3306      	adds	r3, #6
 8004db2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8004db8:	230c      	movs	r3, #12
 8004dba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	f340 8096 	ble.w	8004ef6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b5c      	cmp	r3, #92	; 0x5c
 8004dd0:	f040 8093 	bne.w	8004efa <utf16_literal_to_utf8+0x1b6>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b75      	cmp	r3, #117	; 0x75
 8004ddc:	f040 808d 	bne.w	8004efa <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	3302      	adds	r3, #2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff4b 	bl	8004c80 <parse_hex4>
 8004dea:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004df2:	f0c0 8084 	bcc.w	8004efe <utf16_literal_to_utf8+0x1ba>
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8004dfc:	d27f      	bcs.n	8004efe <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	029a      	lsls	r2, r3, #10
 8004e02:	4b43      	ldr	r3, [pc, #268]	; (8004f10 <utf16_literal_to_utf8+0x1cc>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8004e14:	e004      	b.n	8004e20 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8004e16:	2306      	movs	r3, #6
 8004e18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	2b7f      	cmp	r3, #127	; 0x7f
 8004e24:	d803      	bhi.n	8004e2e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2c:	e01f      	b.n	8004e6e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e34:	d206      	bcs.n	8004e44 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8004e36:	2302      	movs	r3, #2
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8004e3c:	23c0      	movs	r3, #192	; 0xc0
 8004e3e:	f887 3020 	strb.w	r3, [r7, #32]
 8004e42:	e014      	b.n	8004e6e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4a:	d206      	bcs.n	8004e5a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8004e52:	23e0      	movs	r3, #224	; 0xe0
 8004e54:	f887 3020 	strb.w	r3, [r7, #32]
 8004e58:	e009      	b.n	8004e6e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004e60:	d24f      	bcs.n	8004f02 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8004e62:	2304      	movs	r3, #4
 8004e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8004e68:	23f0      	movs	r3, #240	; 0xf0
 8004e6a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8004e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e72:	3b01      	subs	r3, #1
 8004e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e78:	e015      	b.n	8004ea6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6819      	ldr	r1, [r3, #0]
 8004e88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004e8c:	440b      	add	r3, r1
 8004e8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8004e9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ea6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8004eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d909      	bls.n	8004eca <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	b2d9      	uxtb	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	e007      	b.n	8004eda <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee2:	441a      	add	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8004ee8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004eec:	e00b      	b.n	8004f06 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8004eee:	bf00      	nop
 8004ef0:	e008      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8004ef2:	bf00      	nop
 8004ef4:	e006      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004ef6:	bf00      	nop
 8004ef8:	e004      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8004f02:	bf00      	nop

fail:
    return 0;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3728      	adds	r7, #40	; 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	000ffc00 	.word	0x000ffc00

08004f14 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4413      	add	r3, r2
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	3301      	adds	r3, #1
 8004f36:	4413      	add	r3, r2
 8004f38:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b22      	cmp	r3, #34	; 0x22
 8004f50:	f040 8103 	bne.w	800515a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8004f5c:	e017      	b.n	8004f8e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b5c      	cmp	r3, #92	; 0x5c
 8004f64:	d110      	bne.n	8004f88 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	f080 80f1 	bcs.w	800515e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	61bb      	str	r3, [r7, #24]
                input_end++;
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	3301      	adds	r3, #1
 8004f86:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6a3a      	ldr	r2, [r7, #32]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d203      	bcs.n	8004fa8 <parse_string+0x94>
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b22      	cmp	r3, #34	; 0x22
 8004fa6:	d1da      	bne.n	8004f5e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	f080 80d3 	bcs.w	8005162 <parse_string+0x24e>
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b22      	cmp	r3, #34	; 0x22
 8004fc2:	f040 80ce 	bne.w	8005162 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	4413      	add	r3, r2
 8004fd0:	6a3a      	ldr	r2, [r7, #32]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	3201      	adds	r2, #1
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
 8004fe8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80ba 	beq.w	8005166 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8004ff6:	e094      	b.n	8005122 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b5c      	cmp	r3, #92	; 0x5c
 8004ffe:	d008      	beq.n	8005012 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	1c53      	adds	r3, r2, #1
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	60f9      	str	r1, [r7, #12]
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e087      	b.n	8005122 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8005012:	2302      	movs	r3, #2
 8005014:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8005016:	6a3a      	ldr	r2, [r7, #32]
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	f340 80a4 	ble.w	800516a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	3301      	adds	r3, #1
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b75      	cmp	r3, #117	; 0x75
 800502a:	f300 80a0 	bgt.w	800516e <parse_string+0x25a>
 800502e:	2b5c      	cmp	r3, #92	; 0x5c
 8005030:	da04      	bge.n	800503c <parse_string+0x128>
 8005032:	2b22      	cmp	r3, #34	; 0x22
 8005034:	d05c      	beq.n	80050f0 <parse_string+0x1dc>
 8005036:	2b2f      	cmp	r3, #47	; 0x2f
 8005038:	d05a      	beq.n	80050f0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800503a:	e098      	b.n	800516e <parse_string+0x25a>
            switch (input_pointer[1])
 800503c:	3b5c      	subs	r3, #92	; 0x5c
 800503e:	2b19      	cmp	r3, #25
 8005040:	f200 8095 	bhi.w	800516e <parse_string+0x25a>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <parse_string+0x138>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	080050f1 	.word	0x080050f1
 8005050:	0800516f 	.word	0x0800516f
 8005054:	0800516f 	.word	0x0800516f
 8005058:	0800516f 	.word	0x0800516f
 800505c:	0800516f 	.word	0x0800516f
 8005060:	0800516f 	.word	0x0800516f
 8005064:	080050b5 	.word	0x080050b5
 8005068:	0800516f 	.word	0x0800516f
 800506c:	0800516f 	.word	0x0800516f
 8005070:	0800516f 	.word	0x0800516f
 8005074:	080050c1 	.word	0x080050c1
 8005078:	0800516f 	.word	0x0800516f
 800507c:	0800516f 	.word	0x0800516f
 8005080:	0800516f 	.word	0x0800516f
 8005084:	0800516f 	.word	0x0800516f
 8005088:	0800516f 	.word	0x0800516f
 800508c:	0800516f 	.word	0x0800516f
 8005090:	0800516f 	.word	0x0800516f
 8005094:	080050cd 	.word	0x080050cd
 8005098:	0800516f 	.word	0x0800516f
 800509c:	0800516f 	.word	0x0800516f
 80050a0:	0800516f 	.word	0x0800516f
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	0800516f 	.word	0x0800516f
 80050ac:	080050e5 	.word	0x080050e5
 80050b0:	08005101 	.word	0x08005101
                    *output_pointer++ = '\b';
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	60fa      	str	r2, [r7, #12]
 80050ba:	2208      	movs	r2, #8
 80050bc:	701a      	strb	r2, [r3, #0]
                    break;
 80050be:	e02c      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\f';
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	60fa      	str	r2, [r7, #12]
 80050c6:	220c      	movs	r2, #12
 80050c8:	701a      	strb	r2, [r3, #0]
                    break;
 80050ca:	e026      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\n';
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	60fa      	str	r2, [r7, #12]
 80050d2:	220a      	movs	r2, #10
 80050d4:	701a      	strb	r2, [r3, #0]
                    break;
 80050d6:	e020      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\r';
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	60fa      	str	r2, [r7, #12]
 80050de:	220d      	movs	r2, #13
 80050e0:	701a      	strb	r2, [r3, #0]
                    break;
 80050e2:	e01a      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\t';
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	60fa      	str	r2, [r7, #12]
 80050ea:	2209      	movs	r2, #9
 80050ec:	701a      	strb	r2, [r3, #0]
                    break;
 80050ee:	e014      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	60f9      	str	r1, [r7, #12]
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	701a      	strb	r2, [r3, #0]
                    break;
 80050fe:	e00c      	b.n	800511a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8005100:	f107 030c 	add.w	r3, r7, #12
 8005104:	461a      	mov	r2, r3
 8005106:	6a39      	ldr	r1, [r7, #32]
 8005108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800510a:	f7ff fe1b 	bl	8004d44 <utf16_literal_to_utf8>
 800510e:	4603      	mov	r3, r0
 8005110:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d02c      	beq.n	8005172 <parse_string+0x25e>
                    break;
 8005118:	bf00      	nop
            }
            input_pointer += sequence_length;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	4413      	add	r3, r2
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8005122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	429a      	cmp	r2, r3
 8005128:	f4ff af66 	bcc.w	8004ff8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2210      	movs	r2, #16
 8005136:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	461a      	mov	r2, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	609a      	str	r2, [r3, #8]

    return true;
 8005156:	2301      	movs	r3, #1
 8005158:	e01e      	b.n	8005198 <parse_string+0x284>
        goto fail;
 800515a:	bf00      	nop
 800515c:	e00a      	b.n	8005174 <parse_string+0x260>
                    goto fail;
 800515e:	bf00      	nop
 8005160:	e008      	b.n	8005174 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8005162:	bf00      	nop
 8005164:	e006      	b.n	8005174 <parse_string+0x260>
            goto fail; /* allocation failure */
 8005166:	bf00      	nop
 8005168:	e004      	b.n	8005174 <parse_string+0x260>
                goto fail;
 800516a:	bf00      	nop
 800516c:	e002      	b.n	8005174 <parse_string+0x260>
                    goto fail;
 800516e:	bf00      	nop
 8005170:	e000      	b.n	8005174 <parse_string+0x260>
                        goto fail;
 8005172:	bf00      	nop

fail:
    if (output != NULL)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	69f8      	ldr	r0, [r7, #28]
 8005180:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	461a      	mov	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	609a      	str	r2, [r3, #8]
    }

    return false;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <print_string_ptr+0x28>
    {
        return false;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e110      	b.n	80053ea <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d111      	bne.n	80051f2 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80051ce:	2103      	movs	r1, #3
 80051d0:	6838      	ldr	r0, [r7, #0]
 80051d2:	f7ff fb61 	bl	8004898 <ensure>
 80051d6:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <print_string_ptr+0x42>
        {
            return false;
 80051de:	2300      	movs	r3, #0
 80051e0:	e103      	b.n	80053ea <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4a83      	ldr	r2, [pc, #524]	; (80053f4 <print_string_ptr+0x254>)
 80051e6:	8811      	ldrh	r1, [r2, #0]
 80051e8:	7892      	ldrb	r2, [r2, #2]
 80051ea:	8019      	strh	r1, [r3, #0]
 80051ec:	709a      	strb	r2, [r3, #2]

        return true;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0fb      	b.n	80053ea <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	e024      	b.n	8005242 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b22      	cmp	r3, #34	; 0x22
 80051fe:	dc0f      	bgt.n	8005220 <print_string_ptr+0x80>
 8005200:	2b08      	cmp	r3, #8
 8005202:	db13      	blt.n	800522c <print_string_ptr+0x8c>
 8005204:	3b08      	subs	r3, #8
 8005206:	4a7c      	ldr	r2, [pc, #496]	; (80053f8 <print_string_ptr+0x258>)
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <print_string_ptr+0x84>
 800521e:	e005      	b.n	800522c <print_string_ptr+0x8c>
 8005220:	2b5c      	cmp	r3, #92	; 0x5c
 8005222:	d103      	bne.n	800522c <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	3301      	adds	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
                break;
 800522a:	e007      	b.n	800523c <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b1f      	cmp	r3, #31
 8005232:	d802      	bhi.n	800523a <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	3305      	adds	r3, #5
 8005238:	617b      	str	r3, [r7, #20]
                }
                break;
 800523a:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1d6      	bne.n	80051f8 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	461a      	mov	r2, r3
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	4413      	add	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3303      	adds	r3, #3
 800525c:	4619      	mov	r1, r3
 800525e:	6838      	ldr	r0, [r7, #0]
 8005260:	f7ff fb1a 	bl	8004898 <ensure>
 8005264:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <print_string_ptr+0xd0>
    {
        return false;
 800526c:	2300      	movs	r3, #0
 800526e:	e0bc      	b.n	80053ea <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d117      	bne.n	80052a6 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2222      	movs	r2, #34	; 0x22
 800527a:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3301      	adds	r3, #1
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4618      	mov	r0, r3
 8005286:	f012 fe68 	bl	8017f5a <memcpy>
        output[output_length + 1] = '\"';
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	2222      	movs	r2, #34	; 0x22
 8005294:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3302      	adds	r3, #2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]

        return true;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e0a1      	b.n	80053ea <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2222      	movs	r2, #34	; 0x22
 80052aa:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3301      	adds	r3, #1
 80052b0:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e086      	b.n	80053c6 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b1f      	cmp	r3, #31
 80052be:	d90c      	bls.n	80052da <print_string_ptr+0x13a>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b22      	cmp	r3, #34	; 0x22
 80052c6:	d008      	beq.n	80052da <print_string_ptr+0x13a>
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b5c      	cmp	r3, #92	; 0x5c
 80052ce:	d004      	beq.n	80052da <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e06f      	b.n	80053ba <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	61ba      	str	r2, [r7, #24]
 80052e0:	225c      	movs	r2, #92	; 0x5c
 80052e2:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b22      	cmp	r3, #34	; 0x22
 80052ea:	dc3d      	bgt.n	8005368 <print_string_ptr+0x1c8>
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	db59      	blt.n	80053a4 <print_string_ptr+0x204>
 80052f0:	3b08      	subs	r3, #8
 80052f2:	2b1a      	cmp	r3, #26
 80052f4:	d856      	bhi.n	80053a4 <print_string_ptr+0x204>
 80052f6:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <print_string_ptr+0x15c>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	0800537d 	.word	0x0800537d
 8005300:	0800539d 	.word	0x0800539d
 8005304:	0800538d 	.word	0x0800538d
 8005308:	080053a5 	.word	0x080053a5
 800530c:	08005385 	.word	0x08005385
 8005310:	08005395 	.word	0x08005395
 8005314:	080053a5 	.word	0x080053a5
 8005318:	080053a5 	.word	0x080053a5
 800531c:	080053a5 	.word	0x080053a5
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053a5 	.word	0x080053a5
 8005328:	080053a5 	.word	0x080053a5
 800532c:	080053a5 	.word	0x080053a5
 8005330:	080053a5 	.word	0x080053a5
 8005334:	080053a5 	.word	0x080053a5
 8005338:	080053a5 	.word	0x080053a5
 800533c:	080053a5 	.word	0x080053a5
 8005340:	080053a5 	.word	0x080053a5
 8005344:	080053a5 	.word	0x080053a5
 8005348:	080053a5 	.word	0x080053a5
 800534c:	080053a5 	.word	0x080053a5
 8005350:	080053a5 	.word	0x080053a5
 8005354:	080053a5 	.word	0x080053a5
 8005358:	080053a5 	.word	0x080053a5
 800535c:	080053a5 	.word	0x080053a5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	08005375 	.word	0x08005375
 8005368:	2b5c      	cmp	r3, #92	; 0x5c
 800536a:	d11b      	bne.n	80053a4 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	225c      	movs	r2, #92	; 0x5c
 8005370:	701a      	strb	r2, [r3, #0]
                    break;
 8005372:	e022      	b.n	80053ba <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2222      	movs	r2, #34	; 0x22
 8005378:	701a      	strb	r2, [r3, #0]
                    break;
 800537a:	e01e      	b.n	80053ba <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2262      	movs	r2, #98	; 0x62
 8005380:	701a      	strb	r2, [r3, #0]
                    break;
 8005382:	e01a      	b.n	80053ba <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2266      	movs	r2, #102	; 0x66
 8005388:	701a      	strb	r2, [r3, #0]
                    break;
 800538a:	e016      	b.n	80053ba <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	226e      	movs	r2, #110	; 0x6e
 8005390:	701a      	strb	r2, [r3, #0]
                    break;
 8005392:	e012      	b.n	80053ba <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2272      	movs	r2, #114	; 0x72
 8005398:	701a      	strb	r2, [r3, #0]
                    break;
 800539a:	e00e      	b.n	80053ba <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2274      	movs	r2, #116	; 0x74
 80053a0:	701a      	strb	r2, [r3, #0]
                    break;
 80053a2:	e00a      	b.n	80053ba <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	4914      	ldr	r1, [pc, #80]	; (80053fc <print_string_ptr+0x25c>)
 80053ac:	69b8      	ldr	r0, [r7, #24]
 80053ae:	f012 fbd5 	bl	8017b5c <siprintf>
                    output_pointer += 4;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	3304      	adds	r3, #4
 80053b6:	61bb      	str	r3, [r7, #24]
                    break;
 80053b8:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3301      	adds	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	3301      	adds	r3, #1
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f47f af74 	bne.w	80052b8 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	2222      	movs	r2, #34	; 0x22
 80053da:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3302      	adds	r3, #2
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]

    return true;
 80053e8:	2301      	movs	r3, #1
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	0801b008 	.word	0x0801b008
 80053f8:	04000037 	.word	0x04000037
 80053fc:	0801b00c 	.word	0x0801b00c

08005400 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fec5 	bl	80051a0 <print_string_ptr>
 8005416:	4603      	mov	r3, r0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <buffer_skip_whitespace+0x16>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	e02c      	b.n	8005494 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <buffer_skip_whitespace+0x2c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d306      	bcc.n	800545a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	e021      	b.n	8005494 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00d      	beq.n	800547c <buffer_skip_whitespace+0x5c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d207      	bcs.n	800547c <buffer_skip_whitespace+0x5c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4413      	add	r3, r2
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b20      	cmp	r3, #32
 800547a:	d9e9      	bls.n	8005450 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d104      	bne.n	8005492 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	1e5a      	subs	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8005492:	687b      	ldr	r3, [r7, #4]
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <skip_utf8_bom+0x1e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <skip_utf8_bom+0x1e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <skip_utf8_bom+0x22>
    {
        return NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	e01c      	b.n	80054fc <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d018      	beq.n	80054fa <skip_utf8_bom+0x5a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d211      	bcs.n	80054fa <skip_utf8_bom+0x5a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4413      	add	r3, r2
 80054e0:	2203      	movs	r2, #3
 80054e2:	4908      	ldr	r1, [pc, #32]	; (8005504 <skip_utf8_bom+0x64>)
 80054e4:	4618      	mov	r0, r3
 80054e6:	f012 fc52 	bl	8017d8e <strncmp>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	1cda      	adds	r2, r3, #3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80054fa:	687b      	ldr	r3, [r7, #4]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	0801b014 	.word	0x0801b014

08005508 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	e00c      	b.n	8005538 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7fa feb6 	bl	8000290 <strlen>
 8005524:	4603      	mov	r3, r0
 8005526:	3301      	adds	r3, #1
 8005528:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	6979      	ldr	r1, [r7, #20]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f805 	bl	8005540 <cJSON_ParseWithLengthOpts>
 8005536:	4603      	mov	r3, r0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08e      	sub	sp, #56	; 0x38
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800554e:	f107 0318 	add.w	r3, r7, #24
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	605a      	str	r2, [r3, #4]
 8005558:	609a      	str	r2, [r3, #8]
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	611a      	str	r2, [r3, #16]
 800555e:	615a      	str	r2, [r3, #20]
 8005560:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8005566:	4b41      	ldr	r3, [pc, #260]	; (800566c <cJSON_ParseWithLengthOpts+0x12c>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800556c:	4b3f      	ldr	r3, [pc, #252]	; (800566c <cJSON_ParseWithLengthOpts+0x12c>)
 800556e:	2200      	movs	r2, #0
 8005570:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d042      	beq.n	80055fe <cJSON_ParseWithLengthOpts+0xbe>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03f      	beq.n	80055fe <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800558a:	4a39      	ldr	r2, [pc, #228]	; (8005670 <cJSON_ParseWithLengthOpts+0x130>)
 800558c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005590:	ca07      	ldmia	r2, {r0, r1, r2}
 8005592:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8005596:	4836      	ldr	r0, [pc, #216]	; (8005670 <cJSON_ParseWithLengthOpts+0x130>)
 8005598:	f7ff f84a 	bl	8004630 <cJSON_New_Item>
 800559c:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02e      	beq.n	8005602 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80055a4:	f107 0318 	add.w	r3, r7, #24
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff ff79 	bl	80054a0 <skip_utf8_bom>
 80055ae:	4603      	mov	r3, r0
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ff35 	bl	8005420 <buffer_skip_whitespace>
 80055b6:	4603      	mov	r3, r0
 80055b8:	4619      	mov	r1, r3
 80055ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80055bc:	f000 f8fc 	bl	80057b8 <parse_value>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01f      	beq.n	8005606 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00e      	beq.n	80055ea <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80055cc:	f107 0318 	add.w	r3, r7, #24
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff ff25 	bl	8005420 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80055d6:	6a3a      	ldr	r2, [r7, #32]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d215      	bcs.n	800560a <cJSON_ParseWithLengthOpts+0xca>
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	4413      	add	r3, r2
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10f      	bne.n	800560a <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d004      	beq.n	80055fa <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
    }

    return item;
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	e031      	b.n	8005662 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80055fe:	bf00      	nop
 8005600:	e004      	b.n	800560c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8005602:	bf00      	nop
 8005604:	e002      	b.n	800560c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800560a:	bf00      	nop

fail:
    if (item != NULL)
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8005612:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005614:	f7ff f822 	bl	800465c <cJSON_Delete>
    }

    if (value != NULL)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d020      	beq.n	8005660 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	429a      	cmp	r2, r3
 800562c:	d202      	bcs.n	8005634 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	e005      	b.n	8005640 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3b01      	subs	r3, #1
 800563e:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d004      	beq.n	8005650 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	441a      	add	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <cJSON_ParseWithLengthOpts+0x12c>)
 8005652:	461a      	mov	r2, r3
 8005654:	f107 0310 	add.w	r3, r7, #16
 8005658:	e893 0003 	ldmia.w	r3, {r0, r1}
 800565c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3738      	adds	r7, #56	; 0x38
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	200002a8 	.word	0x200002a8
 8005670:	20000048 	.word	0x20000048

08005674 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800567c:	2200      	movs	r2, #0
 800567e:	2100      	movs	r1, #0
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff41 	bl	8005508 <cJSON_ParseWithOpts>
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08e      	sub	sp, #56	; 0x38
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 80056a0:	f107 0310 	add.w	r3, r7, #16
 80056a4:	2224      	movs	r2, #36	; 0x24
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f012 fb4b 	bl	8017d44 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a38      	ldr	r2, [pc, #224]	; (8005794 <print+0x104>)
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	4610      	mov	r0, r2
 80056b8:	4798      	blx	r3
 80056ba:	4603      	mov	r3, r0
 80056bc:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 80056be:	4b35      	ldr	r3, [pc, #212]	; (8005794 <print+0x104>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80056d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d040      	beq.n	800575c <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80056da:	f107 0310 	add.w	r3, r7, #16
 80056de:	4619      	mov	r1, r3
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f955 	bl	8005990 <print_value>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d039      	beq.n	8005760 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 80056ec:	f107 0310 	add.w	r3, r7, #16
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff f96b 	bl	80049cc <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	6938      	ldr	r0, [r7, #16]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	3201      	adds	r2, #1
 8005708:	4611      	mov	r1, r2
 800570a:	4798      	blx	r3
 800570c:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	2b00      	cmp	r3, #0
 8005712:	d027      	beq.n	8005764 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	e01e      	b.n	8005758 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	3201      	adds	r2, #1
 8005722:	4610      	mov	r0, r2
 8005724:	4798      	blx	r3
 8005726:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01c      	beq.n	8005768 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800572e:	6939      	ldr	r1, [r7, #16]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4293      	cmp	r3, r2
 8005738:	bf28      	it	cs
 800573a:	4613      	movcs	r3, r2
 800573c:	461a      	mov	r2, r3
 800573e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005740:	f012 fc0b 	bl	8017f5a <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005748:	4413      	add	r3, r2
 800574a:	2200      	movs	r2, #0
 800574c:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
    }

    return printed;
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	e016      	b.n	800578a <print+0xfa>
        goto fail;
 800575c:	bf00      	nop
 800575e:	e004      	b.n	800576a <print+0xda>
        goto fail;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <print+0xda>
            goto fail;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <print+0xda>
            goto fail;
 8005768:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4610      	mov	r0, r2
 8005778:	4798      	blx	r3
    }

    if (printed != NULL)
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <print+0xf8>
    {
        hooks->deallocate(printed);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005786:	4798      	blx	r3
    }

    return NULL;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3738      	adds	r7, #56	; 0x38
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	0801b80c 	.word	0x0801b80c

08005798 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <cJSON_Print+0x1c>)
 80057a2:	2101      	movs	r1, #1
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ff73 	bl	8005690 <print>
 80057aa:	4603      	mov	r3, r0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000048 	.word	0x20000048

080057b8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <parse_value+0x18>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <parse_value+0x1c>
    {
        return false; /* no input */
 80057d0:	2300      	movs	r3, #0
 80057d2:	e0d2      	b.n	800597a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01d      	beq.n	8005816 <parse_value+0x5e>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	1d1a      	adds	r2, r3, #4
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d816      	bhi.n	8005816 <parse_value+0x5e>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	2204      	movs	r2, #4
 80057f4:	4963      	ldr	r1, [pc, #396]	; (8005984 <parse_value+0x1cc>)
 80057f6:	4618      	mov	r0, r3
 80057f8:	f012 fac9 	bl	8017d8e <strncmp>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2204      	movs	r2, #4
 8005806:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	1d1a      	adds	r2, r3, #4
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	609a      	str	r2, [r3, #8]
        return true;
 8005812:	2301      	movs	r3, #1
 8005814:	e0b1      	b.n	800597a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01d      	beq.n	8005858 <parse_value+0xa0>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	1d5a      	adds	r2, r3, #5
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d816      	bhi.n	8005858 <parse_value+0xa0>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	4413      	add	r3, r2
 8005834:	2205      	movs	r2, #5
 8005836:	4954      	ldr	r1, [pc, #336]	; (8005988 <parse_value+0x1d0>)
 8005838:	4618      	mov	r0, r3
 800583a:	f012 faa8 	bl	8017d8e <strncmp>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	1d5a      	adds	r2, r3, #5
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	609a      	str	r2, [r3, #8]
        return true;
 8005854:	2301      	movs	r3, #1
 8005856:	e090      	b.n	800597a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d020      	beq.n	80058a0 <parse_value+0xe8>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d819      	bhi.n	80058a0 <parse_value+0xe8>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4413      	add	r3, r2
 8005876:	2204      	movs	r2, #4
 8005878:	4944      	ldr	r1, [pc, #272]	; (800598c <parse_value+0x1d4>)
 800587a:	4618      	mov	r0, r3
 800587c:	f012 fa87 	bl	8017d8e <strncmp>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	1d1a      	adds	r2, r3, #4
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	609a      	str	r2, [r3, #8]
        return true;
 800589c:	2301      	movs	r3, #1
 800589e:	e06c      	b.n	800597a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d013      	beq.n	80058ce <parse_value+0x116>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d20d      	bcs.n	80058ce <parse_value+0x116>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	4413      	add	r3, r2
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b22      	cmp	r3, #34	; 0x22
 80058c0:	d105      	bne.n	80058ce <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fb25 	bl	8004f14 <parse_string>
 80058ca:	4603      	mov	r3, r0
 80058cc:	e055      	b.n	800597a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d023      	beq.n	800591c <parse_value+0x164>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d21d      	bcs.n	800591c <parse_value+0x164>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4413      	add	r3, r2
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b2d      	cmp	r3, #45	; 0x2d
 80058ee:	d00f      	beq.n	8005910 <parse_value+0x158>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4413      	add	r3, r2
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b2f      	cmp	r3, #47	; 0x2f
 80058fe:	d90d      	bls.n	800591c <parse_value+0x164>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4413      	add	r3, r2
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b39      	cmp	r3, #57	; 0x39
 800590e:	d805      	bhi.n	800591c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fe fef4 	bl	8004700 <parse_number>
 8005918:	4603      	mov	r3, r0
 800591a:	e02e      	b.n	800597a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d013      	beq.n	800594a <parse_value+0x192>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d20d      	bcs.n	800594a <parse_value+0x192>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	4413      	add	r3, r2
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b5b      	cmp	r3, #91	; 0x5b
 800593c:	d105      	bne.n	800594a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f909 	bl	8005b58 <parse_array>
 8005946:	4603      	mov	r3, r0
 8005948:	e017      	b.n	800597a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d013      	beq.n	8005978 <parse_value+0x1c0>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d20d      	bcs.n	8005978 <parse_value+0x1c0>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4413      	add	r3, r2
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b7b      	cmp	r3, #123	; 0x7b
 800596a:	d105      	bne.n	8005978 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa3c 	bl	8005dec <parse_object>
 8005974:	4603      	mov	r3, r0
 8005976:	e000      	b.n	800597a <parse_value+0x1c2>
    }

    return false;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	0801afe8 	.word	0x0801afe8
 8005988:	0801b018 	.word	0x0801b018
 800598c:	0801b020 	.word	0x0801b020

08005990 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <print_value+0x1a>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <print_value+0x1e>
    {
        return false;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e0c9      	b.n	8005b42 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b80      	cmp	r3, #128	; 0x80
 80059b6:	f000 808e 	beq.w	8005ad6 <print_value+0x146>
 80059ba:	2b80      	cmp	r3, #128	; 0x80
 80059bc:	f300 80c0 	bgt.w	8005b40 <print_value+0x1b0>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	dc49      	bgt.n	8005a58 <print_value+0xc8>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f340 80bb 	ble.w	8005b40 <print_value+0x1b0>
 80059ca:	3b01      	subs	r3, #1
 80059cc:	2b1f      	cmp	r3, #31
 80059ce:	f200 80b7 	bhi.w	8005b40 <print_value+0x1b0>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <print_value+0x48>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	08005a83 	.word	0x08005a83
 80059dc:	08005aa7 	.word	0x08005aa7
 80059e0:	08005b41 	.word	0x08005b41
 80059e4:	08005a5f 	.word	0x08005a5f
 80059e8:	08005b41 	.word	0x08005b41
 80059ec:	08005b41 	.word	0x08005b41
 80059f0:	08005b41 	.word	0x08005b41
 80059f4:	08005acb 	.word	0x08005acb
 80059f8:	08005b41 	.word	0x08005b41
 80059fc:	08005b41 	.word	0x08005b41
 8005a00:	08005b41 	.word	0x08005b41
 8005a04:	08005b41 	.word	0x08005b41
 8005a08:	08005b41 	.word	0x08005b41
 8005a0c:	08005b41 	.word	0x08005b41
 8005a10:	08005b41 	.word	0x08005b41
 8005a14:	08005b1d 	.word	0x08005b1d
 8005a18:	08005b41 	.word	0x08005b41
 8005a1c:	08005b41 	.word	0x08005b41
 8005a20:	08005b41 	.word	0x08005b41
 8005a24:	08005b41 	.word	0x08005b41
 8005a28:	08005b41 	.word	0x08005b41
 8005a2c:	08005b41 	.word	0x08005b41
 8005a30:	08005b41 	.word	0x08005b41
 8005a34:	08005b41 	.word	0x08005b41
 8005a38:	08005b41 	.word	0x08005b41
 8005a3c:	08005b41 	.word	0x08005b41
 8005a40:	08005b41 	.word	0x08005b41
 8005a44:	08005b41 	.word	0x08005b41
 8005a48:	08005b41 	.word	0x08005b41
 8005a4c:	08005b41 	.word	0x08005b41
 8005a50:	08005b41 	.word	0x08005b41
 8005a54:	08005b29 	.word	0x08005b29
 8005a58:	2b40      	cmp	r3, #64	; 0x40
 8005a5a:	d06b      	beq.n	8005b34 <print_value+0x1a4>
 8005a5c:	e070      	b.n	8005b40 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8005a5e:	2105      	movs	r1, #5
 8005a60:	6838      	ldr	r0, [r7, #0]
 8005a62:	f7fe ff19 	bl	8004898 <ensure>
 8005a66:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <print_value+0xe2>
            {
                return false;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e067      	b.n	8005b42 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a35      	ldr	r2, [pc, #212]	; (8005b4c <print_value+0x1bc>)
 8005a76:	6810      	ldr	r0, [r2, #0]
 8005a78:	6018      	str	r0, [r3, #0]
 8005a7a:	7912      	ldrb	r2, [r2, #4]
 8005a7c:	711a      	strb	r2, [r3, #4]
            return true;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e05f      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8005a82:	2106      	movs	r1, #6
 8005a84:	6838      	ldr	r0, [r7, #0]
 8005a86:	f7fe ff07 	bl	8004898 <ensure>
 8005a8a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <print_value+0x106>
            {
                return false;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e055      	b.n	8005b42 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a2d      	ldr	r2, [pc, #180]	; (8005b50 <print_value+0x1c0>)
 8005a9a:	6810      	ldr	r0, [r2, #0]
 8005a9c:	6018      	str	r0, [r3, #0]
 8005a9e:	8892      	ldrh	r2, [r2, #4]
 8005aa0:	809a      	strh	r2, [r3, #4]
            return true;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e04d      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8005aa6:	2105      	movs	r1, #5
 8005aa8:	6838      	ldr	r0, [r7, #0]
 8005aaa:	f7fe fef5 	bl	8004898 <ensure>
 8005aae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <print_value+0x12a>
            {
                return false;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e043      	b.n	8005b42 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a25      	ldr	r2, [pc, #148]	; (8005b54 <print_value+0x1c4>)
 8005abe:	6810      	ldr	r0, [r2, #0]
 8005ac0:	6018      	str	r0, [r3, #0]
 8005ac2:	7912      	ldrb	r2, [r2, #4]
 8005ac4:	711a      	strb	r2, [r3, #4]
            return true;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e03b      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fe ffe7 	bl	8004aa0 <print_number>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	e035      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <print_value+0x156>
            {
                return false;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e02d      	b.n	8005b42 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fa fbd0 	bl	8000290 <strlen>
 8005af0:	4603      	mov	r3, r0
 8005af2:	3301      	adds	r3, #1
 8005af4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	6838      	ldr	r0, [r7, #0]
 8005afa:	f7fe fecd 	bl	8004898 <ensure>
 8005afe:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <print_value+0x17a>
            {
                return false;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e01b      	b.n	8005b42 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4619      	mov	r1, r3
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f012 fa21 	bl	8017f5a <memcpy>
            return true;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e012      	b.n	8005b42 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff fc6e 	bl	8005400 <print_string>
 8005b24:	4603      	mov	r3, r0
 8005b26:	e00c      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f8d8 	bl	8005ce0 <print_array>
 8005b30:	4603      	mov	r3, r0
 8005b32:	e006      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa57 	bl	8005fea <print_object>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	e000      	b.n	8005b42 <print_value+0x1b2>

        default:
            return false;
 8005b40:	2300      	movs	r3, #0
    }
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	0801afe8 	.word	0x0801afe8
 8005b50:	0801b018 	.word	0x0801b018
 8005b54:	0801b020 	.word	0x0801b020

08005b58 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b72:	d301      	bcc.n	8005b78 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8005b74:	2300      	movs	r3, #0
 8005b76:	e0af      	b.n	8005cd8 <parse_array+0x180>
    }
    input_buffer->depth++;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b5b      	cmp	r3, #91	; 0x5b
 8005b90:	f040 8094 	bne.w	8005cbc <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8005b9e:	6838      	ldr	r0, [r7, #0]
 8005ba0:	f7ff fc3e 	bl	8005420 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00d      	beq.n	8005bc6 <parse_array+0x6e>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d207      	bcs.n	8005bc6 <parse_array+0x6e>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b5d      	cmp	r3, #93	; 0x5d
 8005bc4:	d061      	beq.n	8005c8a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <parse_array+0x80>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d305      	bcc.n	8005be4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	1e5a      	subs	r2, r3, #1
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	609a      	str	r2, [r3, #8]
        goto fail;
 8005be2:	e072      	b.n	8005cca <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	1e5a      	subs	r2, r3, #1
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	3310      	adds	r3, #16
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fd1c 	bl	8004630 <cJSON_New_Item>
 8005bf8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d05f      	beq.n	8005cc0 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	e007      	b.n	8005c20 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005c2a:	6838      	ldr	r0, [r7, #0]
 8005c2c:	f7ff fbf8 	bl	8005420 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6938      	ldr	r0, [r7, #16]
 8005c34:	f7ff fdc0 	bl	80057b8 <parse_value>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d042      	beq.n	8005cc4 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005c3e:	6838      	ldr	r0, [r7, #0]
 8005c40:	f7ff fbee 	bl	8005420 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00d      	beq.n	8005c66 <parse_array+0x10e>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d207      	bcs.n	8005c66 <parse_array+0x10e>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4413      	add	r3, r2
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b2c      	cmp	r3, #44	; 0x2c
 8005c64:	d0c3      	beq.n	8005bee <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d02d      	beq.n	8005cc8 <parse_array+0x170>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d227      	bcs.n	8005cc8 <parse_array+0x170>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4413      	add	r3, r2
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b5d      	cmp	r3, #93	; 0x5d
 8005c86:	d11f      	bne.n	8005cc8 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8005c88:	e000      	b.n	8005c8c <parse_array+0x134>
        goto success;
 8005c8a:	bf00      	nop
    input_buffer->depth--;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	1e5a      	subs	r2, r3, #1
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <parse_array+0x14a>
        head->prev = current_item;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	60da      	str	r2, [r3, #12]
    item->child = head;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	609a      	str	r2, [r3, #8]

    return true;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e00d      	b.n	8005cd8 <parse_array+0x180>
        goto fail;
 8005cbc:	bf00      	nop
 8005cbe:	e004      	b.n	8005cca <parse_array+0x172>
            goto fail; /* allocation failure */
 8005cc0:	bf00      	nop
 8005cc2:	e002      	b.n	8005cca <parse_array+0x172>
            goto fail; /* failed to parse value */
 8005cc4:	bf00      	nop
 8005cc6:	e000      	b.n	8005cca <parse_array+0x172>
        goto fail; /* expected end of array */
 8005cc8:	bf00      	nop

fail:
    if (head != NULL)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8005cd0:	6978      	ldr	r0, [r7, #20]
 8005cd2:	f7fe fcc3 	bl	800465c <cJSON_Delete>
    }

    return false;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <print_array+0x22>
    {
        return false;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e070      	b.n	8005de4 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8005d02:	2101      	movs	r1, #1
 8005d04:	6838      	ldr	r0, [r7, #0]
 8005d06:	f7fe fdc7 	bl	8004898 <ensure>
 8005d0a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <print_array+0x36>
    {
        return false;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e066      	b.n	8005de4 <print_array+0x104>
    }

    *output_pointer = '[';
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	225b      	movs	r2, #91	; 0x5b
 8005d1a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8005d30:	e03d      	b.n	8005dae <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6938      	ldr	r0, [r7, #16]
 8005d36:	f7ff fe2b 	bl	8005990 <print_value>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <print_array+0x64>
        {
            return false;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e04f      	b.n	8005de4 <print_array+0x104>
        }
        update_offset(output_buffer);
 8005d44:	6838      	ldr	r0, [r7, #0]
 8005d46:	f7fe fe41 	bl	80049cc <update_offset>
        if (current_element->next)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d02a      	beq.n	8005da8 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <print_array+0x7e>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e000      	b.n	8005d60 <print_array+0x80>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	4619      	mov	r1, r3
 8005d68:	6838      	ldr	r0, [r7, #0]
 8005d6a:	f7fe fd95 	bl	8004898 <ensure>
 8005d6e:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <print_array+0x9a>
            {
                return false;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e034      	b.n	8005de4 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	617a      	str	r2, [r7, #20]
 8005d80:	222c      	movs	r2, #44	; 0x2c
 8005d82:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	617a      	str	r2, [r7, #20]
 8005d92:	2220      	movs	r2, #32
 8005d94:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	441a      	add	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1be      	bne.n	8005d32 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8005db4:	2102      	movs	r1, #2
 8005db6:	6838      	ldr	r0, [r7, #0]
 8005db8:	f7fe fd6e 	bl	8004898 <ensure>
 8005dbc:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <print_array+0xe8>
    {
        return false;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e00d      	b.n	8005de4 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	617a      	str	r2, [r7, #20]
 8005dce:	225d      	movs	r2, #93	; 0x5d
 8005dd0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	1e5a      	subs	r2, r3, #1
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	60da      	str	r2, [r3, #12]

    return true;
 8005de2:	2301      	movs	r3, #1
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e06:	d301      	bcc.n	8005e0c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e0ea      	b.n	8005fe2 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80d0 	beq.w	8005fbe <parse_object+0x1d2>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	f080 80c9 	bcs.w	8005fbe <parse_object+0x1d2>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b7b      	cmp	r3, #123	; 0x7b
 8005e3a:	f040 80c0 	bne.w	8005fbe <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8005e48:	6838      	ldr	r0, [r7, #0]
 8005e4a:	f7ff fae9 	bl	8005420 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00e      	beq.n	8005e72 <parse_object+0x86>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d208      	bcs.n	8005e72 <parse_object+0x86>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4413      	add	r3, r2
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b7d      	cmp	r3, #125	; 0x7d
 8005e6e:	f000 808d 	beq.w	8005f8c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <parse_object+0x98>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d305      	bcc.n	8005e90 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	1e5a      	subs	r2, r3, #1
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	609a      	str	r2, [r3, #8]
        goto fail;
 8005e8e:	e0a1      	b.n	8005fd4 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	1e5a      	subs	r2, r3, #1
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	3310      	adds	r3, #16
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fbc6 	bl	8004630 <cJSON_New_Item>
 8005ea4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 808a 	beq.w	8005fc2 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	e007      	b.n	8005ece <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005ed8:	6838      	ldr	r0, [r7, #0]
 8005eda:	f7ff faa1 	bl	8005420 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6938      	ldr	r0, [r7, #16]
 8005ee2:	f7ff f817 	bl	8004f14 <parse_string>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d06c      	beq.n	8005fc6 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8005eec:	6838      	ldr	r0, [r7, #0]
 8005eee:	f7ff fa97 	bl	8005420 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2200      	movs	r2, #0
 8005efe:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d061      	beq.n	8005fca <parse_object+0x1de>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d25b      	bcs.n	8005fca <parse_object+0x1de>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b3a      	cmp	r3, #58	; 0x3a
 8005f20:	d153      	bne.n	8005fca <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005f2c:	6838      	ldr	r0, [r7, #0]
 8005f2e:	f7ff fa77 	bl	8005420 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6938      	ldr	r0, [r7, #16]
 8005f36:	f7ff fc3f 	bl	80057b8 <parse_value>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d046      	beq.n	8005fce <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005f40:	6838      	ldr	r0, [r7, #0]
 8005f42:	f7ff fa6d 	bl	8005420 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00d      	beq.n	8005f68 <parse_object+0x17c>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d207      	bcs.n	8005f68 <parse_object+0x17c>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4413      	add	r3, r2
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b2c      	cmp	r3, #44	; 0x2c
 8005f66:	d098      	beq.n	8005e9a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d031      	beq.n	8005fd2 <parse_object+0x1e6>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d22b      	bcs.n	8005fd2 <parse_object+0x1e6>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	4413      	add	r3, r2
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b7d      	cmp	r3, #125	; 0x7d
 8005f88:	d123      	bne.n	8005fd2 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8005f8a:	e000      	b.n	8005f8e <parse_object+0x1a2>
        goto success; /* empty object */
 8005f8c:	bf00      	nop
    input_buffer->depth--;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	1e5a      	subs	r2, r3, #1
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <parse_object+0x1b8>
        head->prev = current_item;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2240      	movs	r2, #64	; 0x40
 8005fa8:	60da      	str	r2, [r3, #12]
    item->child = head;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	609a      	str	r2, [r3, #8]
    return true;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e011      	b.n	8005fe2 <parse_object+0x1f6>
        goto fail; /* not an object */
 8005fbe:	bf00      	nop
 8005fc0:	e008      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8005fc2:	bf00      	nop
 8005fc4:	e006      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8005fc6:	bf00      	nop
 8005fc8:	e004      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8005fca:	bf00      	nop
 8005fcc:	e002      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8005fd2:	bf00      	nop

fail:
    if (head != NULL)
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8005fda:	6978      	ldr	r0, [r7, #20]
 8005fdc:	f7fe fb3e 	bl	800465c <cJSON_Delete>
    }

    return false;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b088      	sub	sp, #32
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <print_object+0x22>
    {
        return false;
 8006008:	2300      	movs	r3, #0
 800600a:	e108      	b.n	800621e <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <print_object+0x2e>
 8006014:	2302      	movs	r3, #2
 8006016:	e000      	b.n	800601a <print_object+0x30>
 8006018:	2301      	movs	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	4619      	mov	r1, r3
 8006022:	6838      	ldr	r0, [r7, #0]
 8006024:	f7fe fc38 	bl	8004898 <ensure>
 8006028:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <print_object+0x4a>
    {
        return false;
 8006030:	2300      	movs	r3, #0
 8006032:	e0f4      	b.n	800621e <print_object+0x234>
    }

    *output_pointer++ = '{';
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	61fa      	str	r2, [r7, #28]
 800603a:	227b      	movs	r2, #123	; 0x7b
 800603c:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	61fa      	str	r2, [r7, #28]
 8006056:	220a      	movs	r2, #10
 8006058:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	441a      	add	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	609a      	str	r2, [r3, #8]

    while (current_item)
 8006066:	e0a0      	b.n	80061aa <print_object+0x1c0>
    {
        if (output_buffer->format)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d022      	beq.n	80060b6 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4619      	mov	r1, r3
 8006076:	6838      	ldr	r0, [r7, #0]
 8006078:	f7fe fc0e 	bl	8004898 <ensure>
 800607c:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <print_object+0x9e>
            {
                return false;
 8006084:	2300      	movs	r3, #0
 8006086:	e0ca      	b.n	800621e <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e007      	b.n	800609e <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	61fa      	str	r2, [r7, #28]
 8006094:	2209      	movs	r2, #9
 8006096:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3301      	adds	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d3f2      	bcc.n	800608e <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	441a      	add	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff f86f 	bl	80051a0 <print_string_ptr>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <print_object+0xe2>
        {
            return false;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e0a8      	b.n	800621e <print_object+0x234>
        }
        update_offset(output_buffer);
 80060cc:	6838      	ldr	r0, [r7, #0]
 80060ce:	f7fe fc7d 	bl	80049cc <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <print_object+0xf4>
 80060da:	2302      	movs	r3, #2
 80060dc:	e000      	b.n	80060e0 <print_object+0xf6>
 80060de:	2301      	movs	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	6838      	ldr	r0, [r7, #0]
 80060e6:	f7fe fbd7 	bl	8004898 <ensure>
 80060ea:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <print_object+0x10c>
        {
            return false;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e093      	b.n	800621e <print_object+0x234>
        }
        *output_pointer++ = ':';
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	61fa      	str	r2, [r7, #28]
 80060fc:	223a      	movs	r2, #58	; 0x3a
 80060fe:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	61fa      	str	r2, [r7, #28]
 800610e:	2209      	movs	r2, #9
 8006110:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	441a      	add	r2, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	69b8      	ldr	r0, [r7, #24]
 8006122:	f7ff fc35 	bl	8005990 <print_value>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <print_object+0x146>
        {
            return false;
 800612c:	2300      	movs	r3, #0
 800612e:	e076      	b.n	800621e <print_object+0x234>
        }
        update_offset(output_buffer);
 8006130:	6838      	ldr	r0, [r7, #0]
 8006132:	f7fe fc4b 	bl	80049cc <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <print_object+0x158>
 800613e:	2201      	movs	r2, #1
 8006140:	e000      	b.n	8006144 <print_object+0x15a>
 8006142:	2200      	movs	r2, #0
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <print_object+0x166>
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <print_object+0x168>
 8006150:	2300      	movs	r3, #0
 8006152:	4413      	add	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3301      	adds	r3, #1
 800615a:	4619      	mov	r1, r3
 800615c:	6838      	ldr	r0, [r7, #0]
 800615e:	f7fe fb9b 	bl	8004898 <ensure>
 8006162:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <print_object+0x184>
        {
            return false;
 800616a:	2300      	movs	r3, #0
 800616c:	e057      	b.n	800621e <print_object+0x234>
        }
        if (current_item->next)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	61fa      	str	r2, [r7, #28]
 800617c:	222c      	movs	r2, #44	; 0x2c
 800617e:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	61fa      	str	r2, [r7, #28]
 800618e:	220a      	movs	r2, #10
 8006190:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	441a      	add	r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f af5b 	bne.w	8006068 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <print_object+0x1d8>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	e000      	b.n	80061c4 <print_object+0x1da>
 80061c2:	2302      	movs	r3, #2
 80061c4:	4619      	mov	r1, r3
 80061c6:	6838      	ldr	r0, [r7, #0]
 80061c8:	f7fe fb66 	bl	8004898 <ensure>
 80061cc:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <print_object+0x1ee>
    {
        return false;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e022      	b.n	800621e <print_object+0x234>
    }
    if (output_buffer->format)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d010      	beq.n	8006202 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80061e0:	2300      	movs	r3, #0
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	e007      	b.n	80061f6 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	61fa      	str	r2, [r7, #28]
 80061ec:	2209      	movs	r2, #9
 80061ee:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3301      	adds	r3, #1
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d3f1      	bcc.n	80061e6 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	61fa      	str	r2, [r7, #28]
 8006208:	227d      	movs	r2, #125	; 0x7d
 800620a:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2200      	movs	r2, #0
 8006210:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	1e5a      	subs	r2, r3, #1
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	60da      	str	r2, [r3, #12]

    return true;
 800621c:	2301      	movs	r3, #1
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <get_array_item>:

    return (int)size;
}

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <get_array_item+0x18>
    {
        return NULL;
 800623a:	2300      	movs	r3, #0
 800623c:	e010      	b.n	8006260 <get_array_item+0x3a>
    }

    current_child = array->child;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8006244:	e005      	b.n	8006252 <get_array_item+0x2c>
    {
        index--;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <get_array_item+0x38>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f3      	bne.n	8006246 <get_array_item+0x20>
    }

    return current_child;
 800625e:	68fb      	ldr	r3, [r7, #12]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	da01      	bge.n	8006280 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	e005      	b.n	800628c <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff ffce 	bl	8006226 <get_array_item>
 800628a:	4603      	mov	r3, r0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <get_object_item+0x1c>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <get_object_item+0x20>
    {
        return NULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e033      	b.n	800631c <get_object_item+0x88>
    }

    current_element = object->child;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d017      	beq.n	80062f0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80062c0:	e002      	b.n	80062c8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01c      	beq.n	8006308 <get_object_item+0x74>
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d018      	beq.n	8006308 <get_object_item+0x74>
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	4619      	mov	r1, r3
 80062dc:	68b8      	ldr	r0, [r7, #8]
 80062de:	f7f9 ff77 	bl	80001d0 <strcmp>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1ec      	bne.n	80062c2 <get_object_item+0x2e>
 80062e8:	e00e      	b.n	8006308 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <get_object_item+0x74>
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	4619      	mov	r1, r3
 80062fc:	68b8      	ldr	r0, [r7, #8]
 80062fe:	f7fe f903 	bl	8004508 <case_insensitive_strcmp>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f0      	bne.n	80062ea <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <get_object_item+0x82>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <get_object_item+0x86>
        return NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	e000      	b.n	800631c <get_object_item+0x88>
    }

    return current_element;
 800631a:	697b      	ldr	r3, [r7, #20]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 800632e:	2201      	movs	r2, #1
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff ffae 	bl	8006294 <get_object_item>
 8006338:	4603      	mov	r3, r0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	605a      	str	r2, [r3, #4]
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d006      	beq.n	8006386 <add_item_to_array+0x22>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <add_item_to_array+0x22>
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d101      	bne.n	800638a <add_item_to_array+0x26>
    {
        return false;
 8006386:	2300      	movs	r3, #0
 8006388:	e01e      	b.n	80063c8 <add_item_to_array+0x64>
    }

    child = array->child;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	e00d      	b.n	80063c6 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff ffc2 	bl	8006342 <suffix_object>
            array->child->prev = item;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 80063c6:	2301      	movs	r3, #1
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80063d8:	687b      	ldr	r3, [r7, #4]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b086      	sub	sp, #24
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d009      	beq.n	8006416 <add_item_to_object+0x30>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d006      	beq.n	8006416 <add_item_to_object+0x30>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <add_item_to_object+0x30>
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d101      	bne.n	800641a <add_item_to_object+0x34>
    {
        return false;
 8006416:	2300      	movs	r3, #0
 8006418:	e036      	b.n	8006488 <add_item_to_object+0xa2>
    }

    if (constant_key)
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d009      	beq.n	8006434 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8006420:	68b8      	ldr	r0, [r7, #8]
 8006422:	f7ff ffd5 	bl	80063d0 <cast_away_const>
 8006426:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	e00e      	b.n	8006452 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	68b8      	ldr	r0, [r7, #8]
 8006438:	f7fe f8d2 	bl	80045e0 <cJSON_strdup>
 800643c:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <add_item_to_object+0x62>
        {
            return false;
 8006444:	2300      	movs	r3, #0
 8006446:	e01f      	b.n	8006488 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006450:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <add_item_to_object+0x8c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d005      	beq.n	8006472 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6a12      	ldr	r2, [r2, #32]
 800646e:	4610      	mov	r0, r2
 8006470:	4798      	blx	r3
    }

    item->string = new_key;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f7ff ff6f 	bl	8006364 <add_item_to_array>
 8006486:	4603      	mov	r3, r0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 800649c:	2300      	movs	r3, #0
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <cJSON_AddItemToObject+0x28>)
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	68b9      	ldr	r1, [r7, #8]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f7ff ff9d 	bl	80063e6 <add_item_to_object>
 80064ac:	4603      	mov	r3, r0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000048 	.word	0x20000048

080064bc <cJSON_AddStringToObject>:
    cJSON_Delete(number_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f819 	bl	8006500 <cJSON_CreateString>
 80064ce:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 80064d0:	2300      	movs	r3, #0
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	4b09      	ldr	r3, [pc, #36]	; (80064fc <cJSON_AddStringToObject+0x40>)
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7ff ff83 	bl	80063e6 <add_item_to_object>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	e003      	b.n	80064f2 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 80064ea:	6978      	ldr	r0, [r7, #20]
 80064ec:	f7fe f8b6 	bl	800465c <cJSON_Delete>
    return NULL;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000048 	.word	0x20000048

08006500 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8006508:	480f      	ldr	r0, [pc, #60]	; (8006548 <cJSON_CreateString+0x48>)
 800650a:	f7fe f891 	bl	8004630 <cJSON_New_Item>
 800650e:	60f8      	str	r0, [r7, #12]
    if(item)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d012      	beq.n	800653c <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2210      	movs	r2, #16
 800651a:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 800651c:	490a      	ldr	r1, [pc, #40]	; (8006548 <cJSON_CreateString+0x48>)
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fe f85e 	bl	80045e0 <cJSON_strdup>
 8006524:	4602      	mov	r2, r0
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d104      	bne.n	800653c <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7fe f892 	bl	800465c <cJSON_Delete>
            return NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <cJSON_CreateString+0x3e>
        }
    }

    return item;
 800653c:	68fb      	ldr	r3, [r7, #12]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000048 	.word	0x20000048

0800654c <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8006552:	4807      	ldr	r0, [pc, #28]	; (8006570 <cJSON_CreateObject+0x24>)
 8006554:	f7fe f86c 	bl	8004630 <cJSON_New_Item>
 8006558:	6078      	str	r0, [r7, #4]
    if (item)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2240      	movs	r2, #64	; 0x40
 8006564:	60da      	str	r2, [r3, #12]
    }

    return item;
 8006566:	687b      	ldr	r3, [r7, #4]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20000048 	.word	0x20000048

08006574 <cJSON_IsTrue>:

    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <cJSON_IsTrue+0x12>
    {
        return false;
 8006582:	2300      	movs	r3, #0
 8006584:	e007      	b.n	8006596 <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	bf0c      	ite	eq
 8006590:	2301      	moveq	r3, #1
 8006592:	2300      	movne	r3, #0
 8006594:	b2db      	uxtb	r3, r3
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <cJSON_IsBool+0x12>
    {
        return false;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e008      	b.n	80065c6 <cJSON_IsBool+0x24>
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0303 	and.w	r3, r3, #3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <cJSON_IsNumber+0x12>
    {
        return false;
 80065e0:	2300      	movs	r3, #0
 80065e2:	e007      	b.n	80065f4 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	bf0c      	ite	eq
 80065ee:	2301      	moveq	r3, #1
 80065f0:	2300      	movne	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <cJSON_IsString+0x12>
    {
        return false;
 800660e:	2300      	movs	r3, #0
 8006610:	e007      	b.n	8006622 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b10      	cmp	r3, #16
 800661a:	bf0c      	ite	eq
 800661c:	2301      	moveq	r3, #1
 800661e:	2300      	movne	r3, #0
 8006620:	b2db      	uxtb	r3, r3
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <cJSON_IsArray+0x12>
    {
        return false;
 800663c:	2300      	movs	r3, #0
 800663e:	e007      	b.n	8006650 <cJSON_IsArray+0x22>
    }

    return (item->type & 0xFF) == cJSON_Array;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b20      	cmp	r3, #32
 8006648:	bf0c      	ite	eq
 800664a:	2301      	moveq	r3, #1
 800664c:	2300      	movne	r3, #0
 800664e:	b2db      	uxtb	r3, r3
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "../../Lib/MQTT/MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	601a      	str	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <getNextPacketId+0x1c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	e000      	b.n	800669e <getNextPacketId+0x1e>
 800669c:	2301      	movs	r3, #1
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 80066b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066b4:	b087      	sub	sp, #28
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80066be:	f04f 33ff 	mov.w	r3, #4294967295
 80066c2:	617b      	str	r3, [r7, #20]
        sent = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80066c8:	e018      	b.n	80066fc <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ce:	689c      	ldr	r4, [r3, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	18d6      	adds	r6, r2, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fdd9 	bl	8007294 <TimerLeftMS>
 80066e2:	4603      	mov	r3, r0
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47a0      	blx	r4
 80066ec:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	db0e      	blt.n	8006712 <sendPacket+0x60>
            break;
        sent += rc;
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	4413      	add	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	429a      	cmp	r2, r3
 8006702:	da07      	bge.n	8006714 <sendPacket+0x62>
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fd83 	bl	8007210 <TimerIsExpired>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0dc      	beq.n	80066ca <sendPacket+0x18>
 8006710:	e000      	b.n	8006714 <sendPacket+0x62>
            break;
 8006712:	bf00      	nop
    }
    if (sent == length)
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	d10b      	bne.n	8006734 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	4619      	mov	r1, r3
 8006728:	4610      	mov	r0, r2
 800672a:	f000 fd9b 	bl	8007264 <TimerCountdown>
        rc = SUCCESSS;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	e002      	b.n	800673a <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8006734:	f04f 33ff 	mov.w	r3, #4294967295
 8006738:	617b      	str	r3, [r7, #20]
    return rc;
 800673a:	697b      	ldr	r3, [r7, #20]
}
 800673c:	4618      	mov	r0, r3
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006744 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	e009      	b.n	8006772 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	3304      	adds	r3, #4
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4413      	add	r3, r2
 8006768:	2200      	movs	r2, #0
 800676a:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	3301      	adds	r3, #1
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b04      	cmp	r3, #4
 8006776:	ddf2      	ble.n	800675e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a3a      	ldr	r2, [r7, #32]
 8006788:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678e:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006794:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3354      	adds	r3, #84	; 0x54
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fd1e 	bl	80071f4 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 80067b8:	bf00      	nop
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 80067c0:	b590      	push	{r4, r7, lr}
 80067c2:	b08b      	sub	sp, #44	; 0x2c
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 80067cc:	2301      	movs	r3, #1
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 80067d4:	2304      	movs	r3, #4
 80067d6:	61fb      	str	r3, [r7, #28]

    *value = 0;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 80067de:	f04f 33ff 	mov.w	r3, #4294967295
 80067e2:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	3301      	adds	r3, #1
 80067e8:	623b      	str	r3, [r7, #32]
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	dd03      	ble.n	80067fa <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	61bb      	str	r3, [r7, #24]
            goto exit;
 80067f8:	e021      	b.n	800683e <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fe:	685c      	ldr	r4, [r3, #4]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006804:	f107 0117 	add.w	r1, r7, #23
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	47a0      	blx	r4
 800680e:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d112      	bne.n	800683c <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	441a      	add	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	01db      	lsls	r3, r3, #7
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	b25b      	sxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	dbd1      	blt.n	80067de <decodePacket+0x1e>
exit:
 800683a:	e000      	b.n	800683e <decodePacket+0x7e>
            goto exit;
 800683c:	bf00      	nop
    return len;
 800683e:	6a3b      	ldr	r3, [r7, #32]
}
 8006840:	4618      	mov	r0, r3
 8006842:	372c      	adds	r7, #44	; 0x2c
 8006844:	46bd      	mov	sp, r7
 8006846:	bd90      	pop	{r4, r7, pc}

08006848 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8006848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800684a:	b089      	sub	sp, #36	; 0x24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
    int len = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006868:	685c      	ldr	r4, [r3, #4]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	695e      	ldr	r6, [r3, #20]
 8006872:	68b8      	ldr	r0, [r7, #8]
 8006874:	f000 fd0e 	bl	8007294 <TimerLeftMS>
 8006878:	4603      	mov	r3, r0
 800687a:	2201      	movs	r2, #1
 800687c:	4631      	mov	r1, r6
 800687e:	4628      	mov	r0, r5
 8006880:	47a0      	blx	r4
 8006882:	4603      	mov	r3, r0
 8006884:	2b01      	cmp	r3, #1
 8006886:	d13b      	bne.n	8006900 <readPacket+0xb8>
        goto exit;

    len = 1;
 8006888:	2301      	movs	r3, #1
 800688a:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800688c:	68b8      	ldr	r0, [r7, #8]
 800688e:	f000 fd01 	bl	8007294 <TimerLeftMS>
 8006892:	4602      	mov	r2, r0
 8006894:	f107 0310 	add.w	r3, r7, #16
 8006898:	4619      	mov	r1, r3
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7ff ff90 	bl	80067c0 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	3301      	adds	r3, #1
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4611      	mov	r1, r2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 f866 	bl	800797c <MQTTPacket_encode>
 80068b0:	4602      	mov	r2, r0
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	4413      	add	r3, r2
 80068b6:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dd16      	ble.n	80068ec <readPacket+0xa4>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c2:	685c      	ldr	r4, [r3, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	695a      	ldr	r2, [r3, #20]
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	18d6      	adds	r6, r2, r3
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	68b8      	ldr	r0, [r7, #8]
 80068d6:	f000 fcdd 	bl	8007294 <TimerLeftMS>
 80068da:	4603      	mov	r3, r0
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47a0      	blx	r4
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d10b      	bne.n	8006904 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80068f4:	7d3b      	ldrb	r3, [r7, #20]
 80068f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	e002      	b.n	8006906 <readPacket+0xbe>
        goto exit;
 8006900:	bf00      	nop
 8006902:	e000      	b.n	8006906 <readPacket+0xbe>
        goto exit;
 8006904:	bf00      	nop
exit:
    return rc;
 8006906:	69fb      	ldr	r3, [r7, #28]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3724      	adds	r7, #36	; 0x24
 800690c:	46bd      	mov	sp, r7
 800690e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006910 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	461a      	mov	r2, r3
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	4413      	add	r3, r2
 800692e:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8006930:	e039      	b.n	80069a6 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b2f      	cmp	r3, #47	; 0x2f
 8006938:	d103      	bne.n	8006942 <isTopicMatched+0x32>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b2f      	cmp	r3, #47	; 0x2f
 8006940:	d13a      	bne.n	80069b8 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b2b      	cmp	r3, #43	; 0x2b
 8006948:	d009      	beq.n	800695e <isTopicMatched+0x4e>
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b23      	cmp	r3, #35	; 0x23
 8006950:	d005      	beq.n	800695e <isTopicMatched+0x4e>
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	781a      	ldrb	r2, [r3, #0]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d12e      	bne.n	80069bc <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b2b      	cmp	r3, #43	; 0x2b
 8006964:	d112      	bne.n	800698c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	3301      	adds	r3, #1
 800696a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800696c:	e005      	b.n	800697a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	3301      	adds	r3, #1
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	3301      	adds	r3, #1
 8006978:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	429a      	cmp	r2, r3
 8006980:	d20b      	bcs.n	800699a <isTopicMatched+0x8a>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b2f      	cmp	r3, #47	; 0x2f
 8006988:	d1f1      	bne.n	800696e <isTopicMatched+0x5e>
 800698a:	e006      	b.n	800699a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b23      	cmp	r3, #35	; 0x23
 8006992:	d102      	bne.n	800699a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	3b01      	subs	r3, #1
 8006998:	613b      	str	r3, [r7, #16]
        curf++;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	3301      	adds	r3, #1
 800699e:	617b      	str	r3, [r7, #20]
        curn++;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	3301      	adds	r3, #1
 80069a4:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d007      	beq.n	80069be <isTopicMatched+0xae>
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d3bd      	bcc.n	8006932 <isTopicMatched+0x22>
 80069b6:	e002      	b.n	80069be <isTopicMatched+0xae>
            break;
 80069b8:	bf00      	nop
 80069ba:	e000      	b.n	80069be <isTopicMatched+0xae>
            break;
 80069bc:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d105      	bne.n	80069d2 <isTopicMatched+0xc2>
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <isTopicMatched+0xc2>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <isTopicMatched+0xc4>
 80069d2:	2300      	movs	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b08a      	sub	sp, #40	; 0x28
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 80069ee:	f04f 33ff 	mov.w	r3, #4294967295
 80069f2:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80069f4:	2300      	movs	r3, #0
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
 80069f8:	e03f      	b.n	8006a7a <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	3304      	adds	r3, #4
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	4413      	add	r3, r2
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d034      	beq.n	8006a74 <deliverMessage+0x92>
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	3304      	adds	r3, #4
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	4413      	add	r3, r2
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4619      	mov	r1, r3
 8006a18:	68b8      	ldr	r0, [r7, #8]
 8006a1a:	f001 f97f 	bl	8007d1c <MQTTPacket_equals>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10c      	bne.n	8006a3e <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	3304      	adds	r3, #4
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff ff6c 	bl	8006910 <isTopicMatched>
 8006a38:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01a      	beq.n	8006a74 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	3304      	adds	r3, #4
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	4413      	add	r3, r2
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d012      	beq.n	8006a74 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8006a4e:	f107 0318 	add.w	r3, r7, #24
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff fe00 	bl	800665c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	3304      	adds	r3, #4
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	4413      	add	r3, r2
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f107 0218 	add.w	r2, r7, #24
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4798      	blx	r3
                rc = SUCCESSS;
 8006a70:	2300      	movs	r3, #0
 8006a72:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	3301      	adds	r3, #1
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	ddbc      	ble.n	80069fa <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d112      	bne.n	8006aae <deliverMessage+0xcc>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00e      	beq.n	8006aae <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8006a90:	f107 0310 	add.w	r3, r7, #16
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff fddf 	bl	800665c <NewMessageData>
        c->defaultMessageHandler(&md);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa2:	f107 0210 	add.w	r2, r7, #16
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4798      	blx	r3
        rc = SUCCESSS;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8006aae:	6a3b      	ldr	r3, [r7, #32]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	; 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <keepalive>:


int keepalive(MQTTClient* c)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8006ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac4:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d102      	bne.n	8006ad4 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
        goto exit;
 8006ad2:	e033      	b.n	8006b3c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3354      	adds	r3, #84	; 0x54
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fb99 	bl	8007210 <TimerIsExpired>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d02a      	beq.n	8006b3a <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7f1b      	ldrb	r3, [r3, #28]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d126      	bne.n	8006b3a <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8006aec:	f107 0308 	add.w	r3, r7, #8
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fb7f 	bl	80071f4 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8006af6:	f107 0308 	add.w	r3, r7, #8
 8006afa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fb9c 	bl	800723c <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f000 fe68 	bl	80077e4 <MQTTSerialize_pingreq>
 8006b14:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	dd0f      	ble.n	8006b3c <keepalive+0x84>
 8006b1c:	f107 0308 	add.w	r3, r7, #8
 8006b20:	461a      	mov	r2, r3
 8006b22:	6939      	ldr	r1, [r7, #16]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fdc4 	bl	80066b2 <sendPacket>
 8006b2a:	6178      	str	r0, [r7, #20]
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d104      	bne.n	8006b3c <keepalive+0x84>
                c->ping_outstanding = 1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	771a      	strb	r2, [r3, #28]
 8006b38:	e000      	b.n	8006b3c <keepalive+0x84>
        }
    }

exit:
 8006b3a:	bf00      	nop
    return rc;
 8006b3c:	697b      	ldr	r3, [r7, #20]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8006b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4a:	b095      	sub	sp, #84	; 0x54
 8006b4c:	af06      	add	r7, sp, #24
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff fe77 	bl	8006848 <readPacket>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8006b5e:	2300      	movs	r3, #0
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8006b62:	2300      	movs	r3, #0
 8006b64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8006b66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b68:	3b02      	subs	r3, #2
 8006b6a:	2b0b      	cmp	r3, #11
 8006b6c:	f200 80c0 	bhi.w	8006cf0 <cycle+0x1a8>
 8006b70:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <cycle+0x30>)
 8006b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006cf1 	.word	0x08006cf1
 8006b7c:	08006ba9 	.word	0x08006ba9
 8006b80:	08006cf1 	.word	0x08006cf1
 8006b84:	08006c71 	.word	0x08006c71
 8006b88:	08006cf1 	.word	0x08006cf1
 8006b8c:	08006cf1 	.word	0x08006cf1
 8006b90:	08006cf1 	.word	0x08006cf1
 8006b94:	08006cf1 	.word	0x08006cf1
 8006b98:	08006cf1 	.word	0x08006cf1
 8006b9c:	08006cf1 	.word	0x08006cf1
 8006ba0:	08006cf1 	.word	0x08006cf1
 8006ba4:	08006ce3 	.word	0x08006ce3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8006bb0:	4616      	mov	r6, r2
 8006bb2:	f107 0210 	add.w	r2, r7, #16
 8006bb6:	1d15      	adds	r5, r2, #4
 8006bb8:	f107 0210 	add.w	r2, r7, #16
 8006bbc:	1c54      	adds	r4, r2, #1
 8006bbe:	f107 010c 	add.w	r1, r7, #12
 8006bc2:	f107 0210 	add.w	r2, r7, #16
 8006bc6:	1c90      	adds	r0, r2, #2
 8006bc8:	9604      	str	r6, [sp, #16]
 8006bca:	9303      	str	r3, [sp, #12]
 8006bcc:	f107 0310 	add.w	r3, r7, #16
 8006bd0:	330c      	adds	r3, #12
 8006bd2:	9302      	str	r3, [sp, #8]
 8006bd4:	f107 0310 	add.w	r3, r7, #16
 8006bd8:	3308      	adds	r3, #8
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	f107 0320 	add.w	r3, r7, #32
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	462b      	mov	r3, r5
 8006be4:	4622      	mov	r2, r4
 8006be6:	f000 fe0c 	bl	8007802 <MQTTDeserialize_publish>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	f040 8083 	bne.w	8006cf8 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8006bf8:	f107 0210 	add.w	r2, r7, #16
 8006bfc:	f107 0320 	add.w	r3, r7, #32
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff feed 	bl	80069e2 <deliverMessage>
            if (msg.qos != QOS0)
 8006c08:	7c3b      	ldrb	r3, [r7, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d06d      	beq.n	8006cea <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8006c0e:	7c3b      	ldrb	r3, [r7, #16]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d10c      	bne.n	8006c2e <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6918      	ldr	r0, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	8abb      	ldrh	r3, [r7, #20]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	2300      	movs	r3, #0
 8006c24:	2204      	movs	r2, #4
 8006c26:	f001 f946 	bl	8007eb6 <MQTTSerialize_ack>
 8006c2a:	6378      	str	r0, [r7, #52]	; 0x34
 8006c2c:	e00e      	b.n	8006c4c <cycle+0x104>
                else if (msg.qos == QOS2)
 8006c2e:	7c3b      	ldrb	r3, [r7, #16]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d10b      	bne.n	8006c4c <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6918      	ldr	r0, [r3, #16]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	8abb      	ldrh	r3, [r7, #20]
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	2300      	movs	r3, #0
 8006c44:	2205      	movs	r2, #5
 8006c46:	f001 f936 	bl	8007eb6 <MQTTSerialize_ack>
 8006c4a:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	dc03      	bgt.n	8006c5a <cycle+0x112>
                    rc = FAILURE;
 8006c52:	f04f 33ff 	mov.w	r3, #4294967295
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30
 8006c58:	e005      	b.n	8006c66 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff fd27 	bl	80066b2 <sendPacket>
 8006c64:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d13d      	bne.n	8006cea <cycle+0x1a2>
                    goto exit; // there was a problem
 8006c6e:	e044      	b.n	8006cfa <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695c      	ldr	r4, [r3, #20]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f107 020a 	add.w	r2, r7, #10
 8006c7c:	f107 0109 	add.w	r1, r7, #9
 8006c80:	f107 0008 	add.w	r0, r7, #8
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4623      	mov	r3, r4
 8006c88:	f000 fe2d 	bl	80078e6 <MQTTDeserialize_ack>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d003      	beq.n	8006c9a <cycle+0x152>
                rc = FAILURE;
 8006c92:	f04f 33ff 	mov.w	r3, #4294967295
 8006c96:	633b      	str	r3, [r7, #48]	; 0x30
 8006c98:	e01e      	b.n	8006cd8 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6918      	ldr	r0, [r3, #16]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	897b      	ldrh	r3, [r7, #10]
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	2206      	movs	r2, #6
 8006cac:	f001 f903 	bl	8007eb6 <MQTTSerialize_ack>
 8006cb0:	6378      	str	r0, [r7, #52]	; 0x34
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dc03      	bgt.n	8006cc0 <cycle+0x178>
                rc = FAILURE;
 8006cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cbe:	e00b      	b.n	8006cd8 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff fcf4 	bl	80066b2 <sendPacket>
 8006cca:	6338      	str	r0, [r7, #48]	; 0x30
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <cycle+0x190>
                rc = FAILURE; // there was a problem
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d106      	bne.n	8006cee <cycle+0x1a6>
                goto exit; // there was a problem
 8006ce0:	e00b      	b.n	8006cfa <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	771a      	strb	r2, [r3, #28]
            break;
 8006ce8:	e002      	b.n	8006cf0 <cycle+0x1a8>
            break;
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <cycle+0x1a8>
            break;
 8006cee:	bf00      	nop
    }
    keepalive(c);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff fee1 	bl	8006ab8 <keepalive>
 8006cf6:	e000      	b.n	8006cfa <cycle+0x1b2>
                goto exit;
 8006cf8:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <cycle+0x1bc>
        rc = packet_type;
 8006d00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	373c      	adds	r7, #60	; 0x3c
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0e:	bf00      	nop

08006d10 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8006d1e:	f107 030c 	add.w	r3, r7, #12
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fa66 	bl	80071f4 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	f107 030c 	add.w	r3, r7, #12
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fa83 	bl	800723c <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff ff03 	bl	8006b48 <cycle>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d102      	bne.n	8006d50 <MQTTYield+0x40>
    {
        rc = FAILURE;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	617b      	str	r3, [r7, #20]
    }

    return rc;
 8006d50:	697b      	ldr	r3, [r7, #20]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b086      	sub	sp, #24
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6a:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fa4f 	bl	8007210 <TimerIsExpired>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d109      	bne.n	8006d8c <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff fee4 	bl	8006b48 <cycle>
 8006d80:	6178      	str	r0, [r7, #20]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d1f0      	bne.n	8006d6c <waitfor+0x12>
 8006d8a:	e000      	b.n	8006d8e <waitfor+0x34>
            break; // we timed out
 8006d8c:	bf00      	nop

    return rc;
 8006d8e:	697b      	ldr	r3, [r7, #20]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b09e      	sub	sp, #120	; 0x78
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8006da2:	f04f 33ff 	mov.w	r3, #4294967295
 8006da6:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8006da8:	4a3d      	ldr	r2, [pc, #244]	; (8006ea0 <MQTTConnect+0x108>)
 8006daa:	f107 0310 	add.w	r3, r7, #16
 8006dae:	4611      	mov	r1, r2
 8006db0:	2258      	movs	r2, #88	; 0x58
 8006db2:	4618      	mov	r0, r3
 8006db4:	f011 f8d1 	bl	8017f5a <memcpy>
    int len = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d15d      	bne.n	8006e80 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8006dc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fa13 	bl	80071f4 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fa2f 	bl	800723c <TimerCountdownMS>

    if (options == 0)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d102      	bne.n	8006dea <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8006de4:	f107 0310 	add.w	r3, r7, #16
 8006de8:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	8b1b      	ldrh	r3, [r3, #24]
 8006dee:	461a      	mov	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4610      	mov	r0, r2
 8006e02:	f000 fa2f 	bl	8007264 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6918      	ldr	r0, [r3, #16]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	4619      	mov	r1, r3
 8006e12:	f000 fb5f 	bl	80074d4 <MQTTSerialize_connect>
 8006e16:	6738      	str	r0, [r7, #112]	; 0x70
 8006e18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd32      	ble.n	8006e84 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 8006e1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006e22:	461a      	mov	r2, r3
 8006e24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff fc43 	bl	80066b2 <sendPacket>
 8006e2c:	6778      	str	r0, [r7, #116]	; 0x74
 8006e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d129      	bne.n	8006e88 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8006e34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006e38:	461a      	mov	r2, r3
 8006e3a:	2102      	movs	r1, #2
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ff8c 	bl	8006d5a <waitfor>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d117      	bne.n	8006e78 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 8006e48:	23ff      	movs	r3, #255	; 0xff
 8006e4a:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695a      	ldr	r2, [r3, #20]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f107 010f 	add.w	r1, r7, #15
 8006e5c:	f107 000e 	add.w	r0, r7, #14
 8006e60:	f000 fc24 	bl	80076ac <MQTTDeserialize_connack>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d102      	bne.n	8006e70 <MQTTConnect+0xd8>
            rc = connack_rc;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	677b      	str	r3, [r7, #116]	; 0x74
 8006e6e:	e00c      	b.n	8006e8a <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8006e70:	f04f 33ff 	mov.w	r3, #4294967295
 8006e74:	677b      	str	r3, [r7, #116]	; 0x74
 8006e76:	e008      	b.n	8006e8a <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 8006e78:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7c:	677b      	str	r3, [r7, #116]	; 0x74
 8006e7e:	e004      	b.n	8006e8a <MQTTConnect+0xf2>
		goto exit;
 8006e80:	bf00      	nop
 8006e82:	e002      	b.n	8006e8a <MQTTConnect+0xf2>
        goto exit;
 8006e84:	bf00      	nop
 8006e86:	e000      	b.n	8006e8a <MQTTConnect+0xf2>
        goto exit; // there was a problem
 8006e88:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 8006e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <MQTTConnect+0xfe>
        c->isconnected = 1;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3778      	adds	r7, #120	; 0x78
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	0801b028 	.word	0x0801b028

08006ea4 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8006ea4:	b5b0      	push	{r4, r5, r7, lr}
 8006ea6:	b094      	sub	sp, #80	; 0x50
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8006eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	623b      	str	r3, [r7, #32]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 8083 	beq.w	8006fe2 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 8006edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 f987 	bl	80071f4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006eee:	4611      	mov	r1, r2
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 f9a3 	bl	800723c <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691c      	ldr	r4, [r3, #16]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	461d      	mov	r5, r3
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff fbbd 	bl	8006680 <getNextPacketId>
 8006f06:	4603      	mov	r3, r0
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f107 031f 	add.w	r3, r7, #31
 8006f0e:	9302      	str	r3, [sp, #8]
 8006f10:	f107 0320 	add.w	r3, r7, #32
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	2301      	movs	r3, #1
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4620      	mov	r0, r4
 8006f22:	f001 f844 	bl	8007fae <MQTTSerialize_subscribe>
 8006f26:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 8006f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	dd5b      	ble.n	8006fe6 <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8006f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f32:	461a      	mov	r2, r3
 8006f34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f7ff fbbb 	bl	80066b2 <sendPacket>
 8006f3c:	63f8      	str	r0, [r7, #60]	; 0x3c
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d152      	bne.n	8006fea <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8006f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2109      	movs	r1, #9
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff ff04 	bl	8006d5a <waitfor>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b09      	cmp	r3, #9
 8006f56:	d140      	bne.n	8006fda <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61bb      	str	r3, [r7, #24]
 8006f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f60:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	68d2      	ldr	r2, [r2, #12]
 8006f6a:	4614      	mov	r4, r2
 8006f6c:	f107 0114 	add.w	r1, r7, #20
 8006f70:	f107 0218 	add.w	r2, r7, #24
 8006f74:	f107 0012 	add.w	r0, r7, #18
 8006f78:	9401      	str	r4, [sp, #4]
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	2101      	movs	r1, #1
 8006f80:	f001 f88f 	bl	80080a2 <MQTTDeserialize_suback>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 8006f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f90:	2b80      	cmp	r3, #128	; 0x80
 8006f92:	d02b      	beq.n	8006fec <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006f94:	2300      	movs	r3, #0
 8006f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f98:	e01b      	b.n	8006fd2 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	4413      	add	r3, r2
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d110      	bne.n	8006fcc <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fae:	3304      	adds	r3, #4
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	609a      	str	r2, [r3, #8]
                    rc = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006fca:	e00f      	b.n	8006fec <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	3301      	adds	r3, #1
 8006fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	dde0      	ble.n	8006f9a <MQTTSubscribe+0xf6>
 8006fd8:	e008      	b.n	8006fec <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 8006fda:	f04f 33ff 	mov.w	r3, #4294967295
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fe0:	e004      	b.n	8006fec <MQTTSubscribe+0x148>
		goto exit;
 8006fe2:	bf00      	nop
 8006fe4:	e002      	b.n	8006fec <MQTTSubscribe+0x148>
        goto exit;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 8006fea:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8006fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3740      	adds	r7, #64	; 0x40
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bdb0      	pop	{r4, r5, r7, pc}

08006ff6 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8006ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff8:	b097      	sub	sp, #92	; 0x5c
 8006ffa:	af08      	add	r7, sp, #32
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8007002:	f04f 33ff 	mov.w	r3, #4294967295
 8007006:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8007008:	2300      	movs	r3, #0
 800700a:	61fb      	str	r3, [r7, #28]
 800700c:	2300      	movs	r3, #0
 800700e:	623b      	str	r3, [r7, #32]
 8007010:	2300      	movs	r3, #0
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 809b 	beq.w	800715c <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 8007026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f8e2 	bl	80071f4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007038:	4611      	mov	r1, r2
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f8fe 	bl	800723c <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d003      	beq.n	8007050 <MQTTPublish+0x5a>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b02      	cmp	r3, #2
 800704e:	d106      	bne.n	800705e <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f7ff fb15 	bl	8006680 <getNextPacketId>
 8007056:	4603      	mov	r3, r0
 8007058:	b29a      	uxth	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	469c      	mov	ip, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	469e      	mov	lr, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	785d      	ldrb	r5, [r3, #1]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8007080:	9206      	str	r2, [sp, #24]
 8007082:	9305      	str	r3, [sp, #20]
 8007084:	ac02      	add	r4, sp, #8
 8007086:	f107 031c 	add.w	r3, r7, #28
 800708a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800708e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007092:	9601      	str	r6, [sp, #4]
 8007094:	9500      	str	r5, [sp, #0]
 8007096:	4673      	mov	r3, lr
 8007098:	2200      	movs	r2, #0
 800709a:	4661      	mov	r1, ip
 800709c:	6838      	ldr	r0, [r7, #0]
 800709e:	f000 fe94 	bl	8007dca <MQTTSerialize_publish>
 80070a2:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	dd5a      	ble.n	8007160 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 80070aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070ae:	461a      	mov	r2, r3
 80070b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f7ff fafd 	bl	80066b2 <sendPacket>
 80070b8:	6378      	str	r0, [r7, #52]	; 0x34
 80070ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d151      	bne.n	8007164 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d122      	bne.n	800710e <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80070c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070cc:	461a      	mov	r2, r3
 80070ce:	2104      	movs	r1, #4
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f7ff fe42 	bl	8006d5a <waitfor>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d114      	bne.n	8007106 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	695c      	ldr	r4, [r3, #20]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f107 021a 	add.w	r2, r7, #26
 80070e8:	f107 0119 	add.w	r1, r7, #25
 80070ec:	f107 0018 	add.w	r0, r7, #24
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	4623      	mov	r3, r4
 80070f4:	f000 fbf7 	bl	80078e6 <MQTTDeserialize_ack>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d035      	beq.n	800716a <MQTTPublish+0x174>
                rc = FAILURE;
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
 8007104:	e031      	b.n	800716a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	637b      	str	r3, [r7, #52]	; 0x34
 800710c:	e02d      	b.n	800716a <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d128      	bne.n	8007168 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8007116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800711a:	461a      	mov	r2, r3
 800711c:	2107      	movs	r1, #7
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7ff fe1b 	bl	8006d5a <waitfor>
 8007124:	4603      	mov	r3, r0
 8007126:	2b07      	cmp	r3, #7
 8007128:	d114      	bne.n	8007154 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	695c      	ldr	r4, [r3, #20]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f107 0216 	add.w	r2, r7, #22
 8007136:	f107 0115 	add.w	r1, r7, #21
 800713a:	f107 0014 	add.w	r0, r7, #20
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	4623      	mov	r3, r4
 8007142:	f000 fbd0 	bl	80078e6 <MQTTDeserialize_ack>
 8007146:	4603      	mov	r3, r0
 8007148:	2b01      	cmp	r3, #1
 800714a:	d00e      	beq.n	800716a <MQTTPublish+0x174>
                rc = FAILURE;
 800714c:	f04f 33ff 	mov.w	r3, #4294967295
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
 8007152:	e00a      	b.n	800716a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8007154:	f04f 33ff 	mov.w	r3, #4294967295
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
 800715a:	e006      	b.n	800716a <MQTTPublish+0x174>
		goto exit;
 800715c:	bf00      	nop
 800715e:	e004      	b.n	800716a <MQTTPublish+0x174>
        goto exit;
 8007160:	bf00      	nop
 8007162:	e002      	b.n	800716a <MQTTPublish+0x174>
        goto exit; // there was a problem
 8007164:	bf00      	nop
 8007166:	e000      	b.n	800716a <MQTTPublish+0x174>
    }

exit:
 8007168:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800716c:	4618      	mov	r0, r3
 800716e:	373c      	adds	r7, #60	; 0x3c
 8007170:	46bd      	mov	sp, r7
 8007172:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007174 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 800717c:	f04f 33ff 	mov.w	r3, #4294967295
 8007180:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 8007186:	f107 0308 	add.w	r3, r7, #8
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f832 	bl	80071f4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	f107 0308 	add.w	r3, r7, #8
 8007198:	4611      	mov	r1, r2
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f84e 	bl	800723c <TimerCountdownMS>

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691a      	ldr	r2, [r3, #16]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f000 fb0b 	bl	80077c6 <MQTTSerialize_disconnect>
 80071b0:	6138      	str	r0, [r7, #16]
    if (len > 0)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	dd07      	ble.n	80071c8 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 80071b8:	f107 0308 	add.w	r3, r7, #8
 80071bc:	461a      	mov	r2, r3
 80071be:	6939      	ldr	r1, [r7, #16]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fa76 	bl	80066b2 <sendPacket>
 80071c6:	6178      	str	r0, [r7, #20]

    c->isconnected = 0;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80071ce:	697b      	ldr	r3, [r7, #20]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0
	MilliTimer++;
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <MilliTimer_Handler+0x18>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	4a03      	ldr	r2, [pc, #12]	; (80071f0 <MilliTimer_Handler+0x18>)
 80071e4:	6013      	str	r3, [r2, #0]
}
 80071e6:	bf00      	nop
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	200002b0 	.word	0x200002b0

080071f4 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	605a      	str	r2, [r3, #4]
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
	...

08007210 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <TimerIsExpired+0x28>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	0fdb      	lsrs	r3, r3, #31
 8007228:	b2db      	uxtb	r3, r3
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	200002b0 	.word	0x200002b0

0800723c <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8007246:	4b06      	ldr	r3, [pc, #24]	; (8007260 <TimerCountdownMS+0x24>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	441a      	add	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	605a      	str	r2, [r3, #4]
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	200002b0 	.word	0x200002b0

08007264 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007274:	fb03 f202 	mul.w	r2, r3, r2
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <TimerCountdown+0x2c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	441a      	add	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	605a      	str	r2, [r3, #4]
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	200002b0 	.word	0x200002b0

08007294 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	4b06      	ldr	r3, [pc, #24]	; (80072bc <TimerLeftMS+0x28>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	200002b0 	.word	0x200002b0

080072c0 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a07      	ldr	r2, [pc, #28]	; (80072f0 <NewNetwork+0x30>)
 80072d4:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a06      	ldr	r2, [pc, #24]	; (80072f4 <NewNetwork+0x34>)
 80072da:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a06      	ldr	r2, [pc, #24]	; (80072f8 <NewNetwork+0x38>)
 80072e0:	60da      	str	r2, [r3, #12]
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	080072fd 	.word	0x080072fd
 80072f4:	08007357 	.word	0x08007357
 80072f8:	0800739f 	.word	0x0800739f

080072fc <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	3301      	adds	r3, #1
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007318:	4618      	mov	r0, r3
 800731a:	f7fb f9a9 	bl	8002670 <WIZCHIP_READ>
 800731e:	4603      	mov	r3, r0
 8007320:	2b17      	cmp	r3, #23
 8007322:	d113      	bne.n	800734c <w5x00_read+0x50>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	4618      	mov	r0, r3
 800732c:	f7fb fb45 	bl	80029ba <getSn_RX_RSR>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	b292      	uxth	r2, r2
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	4618      	mov	r0, r3
 8007344:	f7fc f852 	bl	80033ec <recv>
 8007348:	4603      	mov	r3, r0
 800734a:	e000      	b.n	800734e <w5x00_read+0x52>

	return SOCK_ERROR;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
 8007362:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	3301      	adds	r3, #1
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007372:	4618      	mov	r0, r3
 8007374:	f7fb f97c 	bl	8002670 <WIZCHIP_READ>
 8007378:	4603      	mov	r3, r0
 800737a:	2b17      	cmp	r3, #23
 800737c:	d10a      	bne.n	8007394 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	b292      	uxth	r2, r2
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	4618      	mov	r0, r3
 800738c:	f7fb ff34 	bl	80031f8 <send>
 8007390:	4603      	mov	r3, r0
 8007392:	e000      	b.n	8007396 <w5x00_write+0x40>

	return SOCK_ERROR;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fb fead 	bl	800310c <disconnect>
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	4613      	mov	r3, r2
 80073c6:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 80073c8:	f243 0339 	movw	r3, #12345	; 0x3039
 80073cc:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	b2d8      	uxtb	r0, r3
 80073d4:	8afa      	ldrh	r2, [r7, #22]
 80073d6:	2300      	movs	r3, #0
 80073d8:	2101      	movs	r1, #1
 80073da:	f7fb fc39 	bl	8002c50 <socket>
 80073de:	4603      	mov	r3, r0
 80073e0:	461a      	mov	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d001      	beq.n	80073ee <ConnectNetwork+0x34>
		return SOCK_ERROR;
 80073ea:	2300      	movs	r3, #0
 80073ec:	e00d      	b.n	800740a <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fb fdab 	bl	8002f54 <connect>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b01      	cmp	r3, #1
 8007402:	d001      	beq.n	8007408 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8007404:	2300      	movs	r3, #0
 8007406:	e000      	b.n	800740a <ConnectNetwork+0x50>

	return SOCK_OK;
 8007408:	2301      	movs	r3, #1
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8007412:	b590      	push	{r4, r7, lr}
 8007414:	b085      	sub	sp, #20
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
	int len = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	7a1b      	ldrb	r3, [r3, #8]
 8007422:	2b03      	cmp	r3, #3
 8007424:	d102      	bne.n	800742c <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8007426:	230c      	movs	r3, #12
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	e005      	b.n	8007438 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7a1b      	ldrb	r3, [r3, #8]
 8007430:	2b04      	cmp	r3, #4
 8007432:	d101      	bne.n	8007438 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8007434:	230a      	movs	r3, #10
 8007436:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	330c      	adds	r3, #12
 800743c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007440:	f000 fc53 	bl	8007cea <MQTTstrlen>
 8007444:	4603      	mov	r3, r0
 8007446:	3302      	adds	r3, #2
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7edb      	ldrb	r3, [r3, #27]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d013      	beq.n	800747e <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3324      	adds	r3, #36	; 0x24
 800745a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800745e:	f000 fc44 	bl	8007cea <MQTTstrlen>
 8007462:	4603      	mov	r3, r0
 8007464:	1c9c      	adds	r4, r3, #2
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3330      	adds	r3, #48	; 0x30
 800746a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800746e:	f000 fc3c 	bl	8007cea <MQTTstrlen>
 8007472:	4603      	mov	r3, r0
 8007474:	4423      	add	r3, r4
 8007476:	3302      	adds	r3, #2
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <MQTTSerialize_connectLength+0x7c>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3340      	adds	r3, #64	; 0x40
 8007492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007496:	f000 fc28 	bl	8007cea <MQTTstrlen>
 800749a:	4603      	mov	r3, r0
 800749c:	3302      	adds	r3, #2
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4413      	add	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d103      	bne.n	80074b4 <MQTTSerialize_connectLength+0xa2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00a      	beq.n	80074ca <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	334c      	adds	r3, #76	; 0x4c
 80074b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074bc:	f000 fc15 	bl	8007cea <MQTTstrlen>
 80074c0:	4603      	mov	r3, r0
 80074c2:	3302      	adds	r3, #2
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 80074ca:	68fb      	ldr	r3, [r7, #12]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd90      	pop	{r4, r7, pc}

080074d4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08a      	sub	sp, #40	; 0x28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80074e4:	2300      	movs	r3, #0
 80074e6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
	int len = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80074f0:	f04f 33ff 	mov.w	r3, #4294967295
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7ff ff8b 	bl	8007412 <MQTTSerialize_connectLength>
 80074fc:	6238      	str	r0, [r7, #32]
 80074fe:	6a38      	ldr	r0, [r7, #32]
 8007500:	f000 faa8 	bl	8007a54 <MQTTPacket_len>
 8007504:	4602      	mov	r2, r0
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4293      	cmp	r3, r2
 800750a:	da03      	bge.n	8007514 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800750c:	f06f 0301 	mvn.w	r3, #1
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8007512:	e0c2      	b.n	800769a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8007518:	7e3b      	ldrb	r3, [r7, #24]
 800751a:	2201      	movs	r2, #1
 800751c:	f362 1307 	bfi	r3, r2, #4, #4
 8007520:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8007522:	7e3a      	ldrb	r2, [r7, #24]
 8007524:	f107 031c 	add.w	r3, r7, #28
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fb21 	bl	8007b72 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	6a39      	ldr	r1, [r7, #32]
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fa21 	bl	800797c <MQTTPacket_encode>
 800753a:	4602      	mov	r2, r0
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	4413      	add	r3, r2
 8007540:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	7a1b      	ldrb	r3, [r3, #8]
 8007546:	2b04      	cmp	r3, #4
 8007548:	d10c      	bne.n	8007564 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800754a:	f107 031c 	add.w	r3, r7, #28
 800754e:	4955      	ldr	r1, [pc, #340]	; (80076a4 <MQTTSerialize_connect+0x1d0>)
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fb4c 	bl	8007bee <writeCString>
		writeChar(&ptr, (char) 4);
 8007556:	f107 031c 	add.w	r3, r7, #28
 800755a:	2104      	movs	r1, #4
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fb08 	bl	8007b72 <writeChar>
 8007562:	e00b      	b.n	800757c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8007564:	f107 031c 	add.w	r3, r7, #28
 8007568:	494f      	ldr	r1, [pc, #316]	; (80076a8 <MQTTSerialize_connect+0x1d4>)
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fb3f 	bl	8007bee <writeCString>
		writeChar(&ptr, (char) 3);
 8007570:	f107 031c 	add.w	r3, r7, #28
 8007574:	2103      	movs	r1, #3
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fafb 	bl	8007b72 <writeChar>
	}

	flags.all = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	7e9b      	ldrb	r3, [r3, #26]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	b2da      	uxtb	r2, r3
 800758a:	7d3b      	ldrb	r3, [r7, #20]
 800758c:	f362 0341 	bfi	r3, r2, #1, #1
 8007590:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7edb      	ldrb	r3, [r3, #27]
 8007596:	2b00      	cmp	r3, #0
 8007598:	bf14      	ite	ne
 800759a:	2301      	movne	r3, #1
 800759c:	2300      	moveq	r3, #0
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	7d3b      	ldrb	r3, [r7, #20]
 80075a2:	f362 0382 	bfi	r3, r2, #2, #1
 80075a6:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80075a8:	7d3b      	ldrb	r3, [r7, #20]
 80075aa:	f003 0304 	and.w	r3, r3, #4
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d013      	beq.n	80075dc <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	7d3b      	ldrb	r3, [r7, #20]
 80075c2:	f362 03c4 	bfi	r3, r2, #3, #2
 80075c6:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	7d3b      	ldrb	r3, [r7, #20]
 80075d6:	f362 1345 	bfi	r3, r2, #5, #1
 80075da:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <MQTTSerialize_connect+0x118>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80075ec:	7d3b      	ldrb	r3, [r7, #20]
 80075ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d103      	bne.n	8007604 <MQTTSerialize_connect+0x130>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8007604:	7d3b      	ldrb	r3, [r7, #20]
 8007606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800760c:	7d3a      	ldrb	r2, [r7, #20]
 800760e:	f107 031c 	add.w	r3, r7, #28
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f000 faac 	bl	8007b72 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8b1b      	ldrh	r3, [r3, #24]
 800761e:	461a      	mov	r2, r3
 8007620:	f107 031c 	add.w	r3, r7, #28
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fab8 	bl	8007b9c <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f107 001c 	add.w	r0, r7, #28
 8007632:	330c      	adds	r3, #12
 8007634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007636:	f000 faf9 	bl	8007c2c <writeMQTTString>
	if (options->willFlag)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7edb      	ldrb	r3, [r3, #27]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00d      	beq.n	800765e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f107 001c 	add.w	r0, r7, #28
 8007648:	3324      	adds	r3, #36	; 0x24
 800764a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800764c:	f000 faee 	bl	8007c2c <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f107 001c 	add.w	r0, r7, #28
 8007656:	3330      	adds	r3, #48	; 0x30
 8007658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800765a:	f000 fae7 	bl	8007c2c <writeMQTTString>
	}
	if (flags.bits.username)
 800765e:	7d3b      	ldrb	r3, [r7, #20]
 8007660:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d006      	beq.n	8007678 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f107 001c 	add.w	r0, r7, #28
 8007670:	3340      	adds	r3, #64	; 0x40
 8007672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007674:	f000 fada 	bl	8007c2c <writeMQTTString>
	if (flags.bits.password)
 8007678:	7d3b      	ldrb	r3, [r7, #20]
 800767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f107 001c 	add.w	r0, r7, #28
 800768a:	334c      	adds	r3, #76	; 0x4c
 800768c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800768e:	f000 facd 	bl	8007c2c <writeMQTTString>

	rc = ptr - buf;
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800769c:	4618      	mov	r0, r3
 800769e:	3728      	adds	r7, #40	; 0x28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	0801b080 	.word	0x0801b080
 80076a8:	0801b088 	.word	0x0801b088

080076ac <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	; 0x28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80076ba:	2300      	movs	r3, #0
 80076bc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80076ce:	f107 0318 	add.w	r3, r7, #24
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fa39 	bl	8007b4a <readChar>
 80076d8:	4603      	mov	r3, r0
 80076da:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 80076dc:	7f3b      	ldrb	r3, [r7, #28]
 80076de:	f023 030f 	bic.w	r3, r3, #15
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d12e      	bne.n	8007746 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f107 0214 	add.w	r2, r7, #20
 80076ee:	4611      	mov	r1, r2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 f9f9 	bl	8007ae8 <MQTTPacket_decodeBuf>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24
 80076f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	4413      	add	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4413      	add	r3, r2
 8007706:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	6a3a      	ldr	r2, [r7, #32]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b01      	cmp	r3, #1
 8007710:	dd1b      	ble.n	800774a <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8007712:	f107 0318 	add.w	r3, r7, #24
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fa17 	bl	8007b4a <readChar>
 800771c:	4603      	mov	r3, r0
 800771e:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8007720:	7c3b      	ldrb	r3, [r7, #16]
 8007722:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007726:	b2db      	uxtb	r3, r3
 8007728:	461a      	mov	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800772e:	f107 0318 	add.w	r3, r7, #24
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fa09 	bl	8007b4a <readChar>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8007740:	2301      	movs	r3, #1
 8007742:	627b      	str	r3, [r7, #36]	; 0x24
 8007744:	e002      	b.n	800774c <MQTTDeserialize_connack+0xa0>
		goto exit;
 8007746:	bf00      	nop
 8007748:	e000      	b.n	800774c <MQTTDeserialize_connack+0xa0>
		goto exit;
 800774a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800774e:	4618      	mov	r0, r3
 8007750:	3728      	adds	r7, #40	; 0x28
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b088      	sub	sp, #32
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	4613      	mov	r3, r2
 8007762:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8007764:	2300      	movs	r3, #0
 8007766:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8007768:	f04f 33ff 	mov.w	r3, #4294967295
 800776c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b01      	cmp	r3, #1
 8007776:	dc03      	bgt.n	8007780 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007778:	f06f 0301 	mvn.w	r3, #1
 800777c:	61fb      	str	r3, [r7, #28]
		goto exit;
 800777e:	e01d      	b.n	80077bc <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	b2da      	uxtb	r2, r3
 800778c:	7e3b      	ldrb	r3, [r7, #24]
 800778e:	f362 1307 	bfi	r3, r2, #4, #4
 8007792:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8007794:	7e3a      	ldrb	r2, [r7, #24]
 8007796:	f107 0314 	add.w	r3, r7, #20
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f000 f9e8 	bl	8007b72 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2100      	movs	r1, #0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 f8e8 	bl	800797c <MQTTPacket_encode>
 80077ac:	4602      	mov	r2, r0
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	4413      	add	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80077bc:	69fb      	ldr	r3, [r7, #28]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 80077d0:	220e      	movs	r2, #14
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff ffbe 	bl	8007756 <MQTTSerialize_zero>
 80077da:	4603      	mov	r3, r0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 80077ee:	220c      	movs	r2, #12
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff ffaf 	bl	8007756 <MQTTSerialize_zero>
 80077f8:	4603      	mov	r3, r0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b08a      	sub	sp, #40	; 0x28
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
 800780e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8007814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007816:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8007824:	f107 0318 	add.w	r3, r7, #24
 8007828:	4618      	mov	r0, r3
 800782a:	f000 f98e 	bl	8007b4a <readChar>
 800782e:	4603      	mov	r3, r0
 8007830:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8007832:	7f3b      	ldrb	r3, [r7, #28]
 8007834:	f023 030f 	bic.w	r3, r3, #15
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b30      	cmp	r3, #48	; 0x30
 800783c:	d14b      	bne.n	80078d6 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800783e:	7f3b      	ldrb	r3, [r7, #28]
 8007840:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007844:	b2db      	uxtb	r3, r3
 8007846:	461a      	mov	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800784c:	7f3b      	ldrb	r3, [r7, #28]
 800784e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8007852:	b2db      	uxtb	r3, r3
 8007854:	461a      	mov	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800785a:	7f3b      	ldrb	r3, [r7, #28]
 800785c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007860:	b2db      	uxtb	r3, r3
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	f107 0214 	add.w	r2, r7, #20
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f000 f939 	bl	8007ae8 <MQTTPacket_decodeBuf>
 8007876:	6278      	str	r0, [r7, #36]	; 0x24
 8007878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	4413      	add	r3, r2
 800787e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4413      	add	r3, r2
 8007886:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8007888:	f107 0318 	add.w	r3, r7, #24
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	4619      	mov	r1, r3
 8007890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007892:	f000 f9f9 	bl	8007c88 <readMQTTLenString>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01e      	beq.n	80078da <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	6a3a      	ldr	r2, [r7, #32]
 80078a0:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	db19      	blt.n	80078da <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dd08      	ble.n	80078c0 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80078ae:	f107 0318 	add.w	r3, r7, #24
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f92e 	bl	8007b14 <readInt>
 80078b8:	4603      	mov	r3, r0
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	6a3a      	ldr	r2, [r7, #32]
 80078c4:	1ad2      	subs	r2, r2, r3
 80078c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c8:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ce:	601a      	str	r2, [r3, #0]
	rc = 1;
 80078d0:	2301      	movs	r3, #1
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
 80078d4:	e002      	b.n	80078dc <MQTTDeserialize_publish+0xda>
		goto exit;
 80078d6:	bf00      	nop
 80078d8:	e000      	b.n	80078dc <MQTTDeserialize_publish+0xda>
		goto exit;
 80078da:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3728      	adds	r7, #40	; 0x28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b08a      	sub	sp, #40	; 0x28
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	607a      	str	r2, [r7, #4]
 80078f2:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8007904:	f107 0318 	add.w	r3, r7, #24
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f91e 	bl	8007b4a <readChar>
 800790e:	4603      	mov	r3, r0
 8007910:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8007912:	7f3b      	ldrb	r3, [r7, #28]
 8007914:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007918:	b2db      	uxtb	r3, r3
 800791a:	461a      	mov	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8007920:	7f3b      	ldrb	r3, [r7, #28]
 8007922:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007926:	b2db      	uxtb	r3, r3
 8007928:	461a      	mov	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	f107 0214 	add.w	r2, r7, #20
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f8d6 	bl	8007ae8 <MQTTPacket_decodeBuf>
 800793c:	6278      	str	r0, [r7, #36]	; 0x24
 800793e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	4413      	add	r3, r2
 8007944:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	4413      	add	r3, r2
 800794c:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	6a3a      	ldr	r2, [r7, #32]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b01      	cmp	r3, #1
 8007956:	dd0b      	ble.n	8007970 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8007958:	f107 0318 	add.w	r3, r7, #24
 800795c:	4618      	mov	r0, r3
 800795e:	f000 f8d9 	bl	8007b14 <readInt>
 8007962:	4603      	mov	r3, r0
 8007964:	b29a      	uxth	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
 800796e:	e000      	b.n	8007972 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8007970:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007974:	4618      	mov	r0, r3
 8007976:	3728      	adds	r7, #40	; 0x28
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	425a      	negs	r2, r3
 800798e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007996:	bf58      	it	pl
 8007998:	4253      	negpl	r3, r2
 800799a:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	da00      	bge.n	80079a4 <MQTTPacket_encode+0x28>
 80079a2:	337f      	adds	r3, #127	; 0x7f
 80079a4:	11db      	asrs	r3, r3, #7
 80079a6:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	dd03      	ble.n	80079b6 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079b4:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	60fa      	str	r2, [r7, #12]
 80079bc:	461a      	mov	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4413      	add	r3, r2
 80079c2:	7afa      	ldrb	r2, [r7, #11]
 80079c4:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	dcde      	bgt.n	800798a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80079cc:	68fb      	ldr	r3, [r7, #12]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 80079e4:	2301      	movs	r3, #1
 80079e6:	617b      	str	r3, [r7, #20]
	int len = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80079f2:	f04f 33ff 	mov.w	r3, #4294967295
 80079f6:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	3301      	adds	r3, #1
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	dd03      	ble.n	8007a0c <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8007a04:	f04f 33ff 	mov.w	r3, #4294967295
 8007a08:	60fb      	str	r3, [r7, #12]
			goto exit;
 8007a0a:	e01d      	b.n	8007a48 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8007a0c:	f107 020b 	add.w	r2, r7, #11
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2101      	movs	r1, #1
 8007a14:	4610      	mov	r0, r2
 8007a16:	4798      	blx	r3
 8007a18:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d112      	bne.n	8007a46 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	7afb      	ldrb	r3, [r7, #11]
 8007a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a2a:	6979      	ldr	r1, [r7, #20]
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	441a      	add	r2, r3
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	01db      	lsls	r3, r3, #7
 8007a3a:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
 8007a3e:	b25b      	sxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dbd6      	blt.n	80079f2 <MQTTPacket_decode+0x18>
exit:
 8007a44:	e000      	b.n	8007a48 <MQTTPacket_decode+0x6e>
			goto exit;
 8007a46:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8007a48:	693b      	ldr	r3, [r7, #16]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b7f      	cmp	r3, #127	; 0x7f
 8007a66:	dc03      	bgt.n	8007a70 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	607b      	str	r3, [r7, #4]
 8007a6e:	e012      	b.n	8007a96 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a76:	da03      	bge.n	8007a80 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3302      	adds	r3, #2
 8007a7c:	607b      	str	r3, [r7, #4]
 8007a7e:	e00a      	b.n	8007a96 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a08      	ldr	r2, [pc, #32]	; (8007aa4 <MQTTPacket_len+0x50>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	dc03      	bgt.n	8007a90 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3303      	adds	r3, #3
 8007a8c:	607b      	str	r3, [r7, #4]
 8007a8e:	e002      	b.n	8007a96 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3304      	adds	r3, #4
 8007a94:	607b      	str	r3, [r7, #4]
	return rem_len;
 8007a96:	687b      	ldr	r3, [r7, #4]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	001ffffe 	.word	0x001ffffe

08007aa8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	e00a      	b.n	8007ace <bufchar+0x26>
		*c = *bufptr++;
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <bufchar+0x3c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	4909      	ldr	r1, [pc, #36]	; (8007ae4 <bufchar+0x3c>)
 8007ac0:	600a      	str	r2, [r1, #0]
 8007ac2:	781a      	ldrb	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	dbf0      	blt.n	8007ab8 <bufchar+0x10>
	return count;
 8007ad6:	683b      	ldr	r3, [r7, #0]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	200002b4 	.word	0x200002b4

08007ae8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8007af2:	4a06      	ldr	r2, [pc, #24]	; (8007b0c <MQTTPacket_decodeBuf+0x24>)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	4805      	ldr	r0, [pc, #20]	; (8007b10 <MQTTPacket_decodeBuf+0x28>)
 8007afc:	f7ff ff6d 	bl	80079da <MQTTPacket_decode>
 8007b00:	4603      	mov	r3, r0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	200002b4 	.word	0x200002b4
 8007b10:	08007aa9 	.word	0x08007aa9

08007b14 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	3201      	adds	r2, #1
 8007b2c:	7812      	ldrb	r2, [r2, #0]
 8007b2e:	4413      	add	r3, r2
 8007b30:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	1c9a      	adds	r2, r3, #2
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	601a      	str	r2, [r3, #0]
	return len;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b085      	sub	sp, #20
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
	return c;
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	601a      	str	r2, [r3, #0]
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	da00      	bge.n	8007bae <writeInt+0x12>
 8007bac:	33ff      	adds	r3, #255	; 0xff
 8007bae:	121b      	asrs	r3, r3, #8
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	425a      	negs	r2, r3
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	bf58      	it	pl
 8007bce:	4253      	negpl	r3, r2
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	601a      	str	r2, [r3, #0]
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8007bf8:	6838      	ldr	r0, [r7, #0]
 8007bfa:	f7f8 fb49 	bl	8000290 <strlen>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8007c02:	68f9      	ldr	r1, [r7, #12]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7ff ffc9 	bl	8007b9c <writeInt>
	memcpy(*pptr, string, len);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f010 f9a1 	bl	8017f5a <memcpy>
	*pptr += len;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	441a      	add	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	601a      	str	r2, [r3, #0]
}
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	4638      	mov	r0, r7
 8007c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dd12      	ble.n	8007c66 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4619      	mov	r1, r3
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7ff ffa9 	bl	8007b9c <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f010 f981 	bl	8017f5a <memcpy>
		*pptr += mqttstring.lenstring.len;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	441a      	add	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8007c64:	e00c      	b.n	8007c80 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff ffbc 	bl	8007bee <writeCString>
}
 8007c76:	e003      	b.n	8007c80 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8007c78:	2100      	movs	r1, #0
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff ff8e 	bl	8007b9c <writeInt>
}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	dd1a      	ble.n	8007cda <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8007ca4:	68b8      	ldr	r0, [r7, #8]
 8007ca6:	f7ff ff35 	bl	8007b14 <readInt>
 8007caa:	4602      	mov	r2, r0
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	6852      	ldr	r2, [r2, #4]
 8007cb8:	4413      	add	r3, r2
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d30c      	bcc.n	8007cda <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	6852      	ldr	r2, [r2, #4]
 8007cd0:	441a      	add	r2, r3
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	601a      	str	r2, [r3, #0]
			rc = 1;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8007ce0:	697b      	ldr	r3, [r7, #20]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	1d3b      	adds	r3, r7, #4
 8007cf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d006      	beq.n	8007d0e <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7f8 fac4 	bl	8000290 <strlen>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e001      	b.n	8007d12 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	617b      	str	r3, [r7, #20]
	return rc;
 8007d12:	697b      	ldr	r3, [r7, #20]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]
		blen = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7f8 faa5 	bl	8000290 <strlen>
 8007d46:	4603      	mov	r3, r0
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	e005      	b.n	8007d58 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8007d58:	6838      	ldr	r0, [r7, #0]
 8007d5a:	f7f8 fa99 	bl	8000290 <strlen>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d10a      	bne.n	8007d80 <MQTTPacket_equals+0x64>
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6938      	ldr	r0, [r7, #16]
 8007d72:	f010 f80c 	bl	8017d8e <strncmp>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <MQTTPacket_equals+0x64>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <MQTTPacket_equals+0x66>
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	4638      	mov	r0, r7
 8007d94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007da2:	f7ff ffa2 	bl	8007cea <MQTTstrlen>
 8007da6:	4603      	mov	r3, r0
 8007da8:	1c9a      	adds	r2, r3, #2
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	4413      	add	r3, r2
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4413      	add	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dd02      	ble.n	8007dc0 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	3302      	adds	r3, #2
 8007dbe:	617b      	str	r3, [r7, #20]
	return len;
 8007dc0:	697b      	ldr	r3, [r7, #20]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b08a      	sub	sp, #40	; 0x28
 8007dce:	af02      	add	r7, sp, #8
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	603b      	str	r3, [r7, #0]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8007dde:	2300      	movs	r3, #0
 8007de0:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8007dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007df4:	6838      	ldr	r0, [r7, #0]
 8007df6:	f7ff ffc8 	bl	8007d8a <MQTTSerialize_publishLength>
 8007dfa:	61b8      	str	r0, [r7, #24]
 8007dfc:	69b8      	ldr	r0, [r7, #24]
 8007dfe:	f7ff fe29 	bl	8007a54 <MQTTPacket_len>
 8007e02:	4602      	mov	r2, r0
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4293      	cmp	r3, r2
 8007e08:	da03      	bge.n	8007e12 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007e0a:	f06f 0301 	mvn.w	r3, #1
 8007e0e:	61fb      	str	r3, [r7, #28]
		goto exit;
 8007e10:	e04c      	b.n	8007eac <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8007e12:	7c3b      	ldrb	r3, [r7, #16]
 8007e14:	2203      	movs	r2, #3
 8007e16:	f362 1307 	bfi	r3, r2, #4, #4
 8007e1a:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8007e1c:	79fb      	ldrb	r3, [r7, #7]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	7c3b      	ldrb	r3, [r7, #16]
 8007e26:	f362 03c3 	bfi	r3, r2, #3, #1
 8007e2a:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	7c3b      	ldrb	r3, [r7, #16]
 8007e36:	f362 0342 	bfi	r3, r2, #1, #2
 8007e3a:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8007e3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	7c3b      	ldrb	r3, [r7, #16]
 8007e48:	f362 0300 	bfi	r3, r2, #0, #1
 8007e4c:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8007e4e:	7c3a      	ldrb	r2, [r7, #16]
 8007e50:	f107 0314 	add.w	r3, r7, #20
 8007e54:	4611      	mov	r1, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7ff fe8b 	bl	8007b72 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	69b9      	ldr	r1, [r7, #24]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff fd8b 	bl	800797c <MQTTPacket_encode>
 8007e66:	4602      	mov	r2, r0
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8007e6e:	f107 0014 	add.w	r0, r7, #20
 8007e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e78:	f7ff fed8 	bl	8007c2c <writeMQTTString>

	if (qos > 0)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	dd06      	ble.n	8007e90 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8007e82:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007e84:	f107 0314 	add.w	r3, r7, #20
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff fe86 	bl	8007b9c <writeInt>

	memcpy(ptr, payload, payloadlen);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e96:	4618      	mov	r0, r3
 8007e98:	f010 f85f 	bl	8017f5a <memcpy>
	ptr += payloadlen;
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea0:	4413      	add	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007eac:	69fb      	ldr	r3, [r7, #28]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3720      	adds	r7, #32
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b088      	sub	sp, #32
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	71fb      	strb	r3, [r7, #7]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	dc03      	bgt.n	8007ee6 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007ede:	f06f 0301 	mvn.w	r3, #1
 8007ee2:	61fb      	str	r3, [r7, #28]
		goto exit;
 8007ee4:	e037      	b.n	8007f56 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8007ee6:	79fb      	ldrb	r3, [r7, #7]
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	7e3b      	ldrb	r3, [r7, #24]
 8007ef0:	f362 1307 	bfi	r3, r2, #4, #4
 8007ef4:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8007ef6:	79bb      	ldrb	r3, [r7, #6]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	7e3b      	ldrb	r3, [r7, #24]
 8007f00:	f362 03c3 	bfi	r3, r2, #3, #1
 8007f04:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	2b06      	cmp	r3, #6
 8007f0a:	bf0c      	ite	eq
 8007f0c:	2301      	moveq	r3, #1
 8007f0e:	2300      	movne	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	7e3b      	ldrb	r3, [r7, #24]
 8007f1a:	f362 0342 	bfi	r3, r2, #1, #2
 8007f1e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8007f20:	7e3a      	ldrb	r2, [r7, #24]
 8007f22:	f107 0314 	add.w	r3, r7, #20
 8007f26:	4611      	mov	r1, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff fe22 	bl	8007b72 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2102      	movs	r1, #2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fd22 	bl	800797c <MQTTPacket_encode>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8007f40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007f42:	f107 0314 	add.w	r3, r7, #20
 8007f46:	4611      	mov	r1, r2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fe27 	bl	8007b9c <writeInt>
	rc = ptr - buf;
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007f56:	69fb      	ldr	r3, [r7, #28]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3720      	adds	r7, #32
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	e013      	b.n	8007f9c <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4613      	mov	r3, r2
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	461a      	mov	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	4413      	add	r3, r2
 8007f84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f88:	f7ff feaf 	bl	8007cea <MQTTstrlen>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	3303      	adds	r3, #3
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	4413      	add	r3, r2
 8007f94:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	dbe7      	blt.n	8007f74 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b08a      	sub	sp, #40	; 0x28
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	461a      	mov	r2, r3
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	71fb      	strb	r3, [r7, #7]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8007fc8:	2300      	movs	r3, #0
 8007fca:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8007fd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fdc:	f7ff ffc0 	bl	8007f60 <MQTTSerialize_subscribeLength>
 8007fe0:	61f8      	str	r0, [r7, #28]
 8007fe2:	69f8      	ldr	r0, [r7, #28]
 8007fe4:	f7ff fd36 	bl	8007a54 <MQTTPacket_len>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	4293      	cmp	r3, r2
 8007fee:	da03      	bge.n	8007ff8 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007ff0:	f06f 0301 	mvn.w	r3, #1
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8007ff6:	e04f      	b.n	8008098 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8007ffc:	7d3b      	ldrb	r3, [r7, #20]
 8007ffe:	2208      	movs	r2, #8
 8008000:	f362 1307 	bfi	r3, r2, #4, #4
 8008004:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	7d3b      	ldrb	r3, [r7, #20]
 8008010:	f362 03c3 	bfi	r3, r2, #3, #1
 8008014:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8008016:	7d3b      	ldrb	r3, [r7, #20]
 8008018:	2201      	movs	r2, #1
 800801a:	f362 0342 	bfi	r3, r2, #1, #2
 800801e:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8008020:	7d3a      	ldrb	r2, [r7, #20]
 8008022:	f107 0318 	add.w	r3, r7, #24
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff fda2 	bl	8007b72 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	69f9      	ldr	r1, [r7, #28]
 8008032:	4618      	mov	r0, r3
 8008034:	f7ff fca2 	bl	800797c <MQTTPacket_encode>
 8008038:	4602      	mov	r2, r0
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	4413      	add	r3, r2
 800803e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8008040:	88ba      	ldrh	r2, [r7, #4]
 8008042:	f107 0318 	add.w	r3, r7, #24
 8008046:	4611      	mov	r1, r2
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fda7 	bl	8007b9c <writeInt>

	for (i = 0; i < count; ++i)
 800804e:	2300      	movs	r3, #0
 8008050:	623b      	str	r3, [r7, #32]
 8008052:	e019      	b.n	8008088 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8008054:	6a3a      	ldr	r2, [r7, #32]
 8008056:	4613      	mov	r3, r2
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	461a      	mov	r2, r3
 8008060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008062:	4413      	add	r3, r2
 8008064:	f107 0018 	add.w	r0, r7, #24
 8008068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800806a:	f7ff fddf 	bl	8007c2c <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008072:	4413      	add	r3, r2
 8008074:	781a      	ldrb	r2, [r3, #0]
 8008076:	f107 0318 	add.w	r3, r7, #24
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff fd78 	bl	8007b72 <writeChar>
	for (i = 0; i < count; ++i)
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	3301      	adds	r3, #1
 8008086:	623b      	str	r3, [r7, #32]
 8008088:	6a3a      	ldr	r2, [r7, #32]
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	429a      	cmp	r2, r3
 800808e:	dbe1      	blt.n	8008054 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800809a:	4618      	mov	r0, r3
 800809c:	3728      	adds	r7, #40	; 0x28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b08a      	sub	sp, #40	; 0x28
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	607a      	str	r2, [r7, #4]
 80080ae:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80080b0:	2300      	movs	r3, #0
 80080b2:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80080c0:	f107 0318 	add.w	r3, r7, #24
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fd40 	bl	8007b4a <readChar>
 80080ca:	4603      	mov	r3, r0
 80080cc:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 80080ce:	7f3b      	ldrb	r3, [r7, #28]
 80080d0:	f023 030f 	bic.w	r3, r3, #15
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b90      	cmp	r3, #144	; 0x90
 80080d8:	d142      	bne.n	8008160 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	f107 0214 	add.w	r2, r7, #20
 80080e0:	4611      	mov	r1, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff fd00 	bl	8007ae8 <MQTTPacket_decodeBuf>
 80080e8:	6278      	str	r0, [r7, #36]	; 0x24
 80080ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	4413      	add	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4413      	add	r3, r2
 80080f8:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	6a3a      	ldr	r2, [r7, #32]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b01      	cmp	r3, #1
 8008102:	dd2f      	ble.n	8008164 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8008104:	f107 0318 	add.w	r3, r7, #24
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fd03 	bl	8007b14 <readInt>
 800810e:	4603      	mov	r3, r0
 8008110:	b29a      	uxth	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800811c:	e019      	b.n	8008152 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	429a      	cmp	r2, r3
 8008126:	da03      	bge.n	8008130 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8008128:	f04f 33ff 	mov.w	r3, #4294967295
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800812e:	e01a      	b.n	8008166 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8008130:	f107 0318 	add.w	r3, r7, #24
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff fd08 	bl	8007b4a <readChar>
 800813a:	4603      	mov	r3, r0
 800813c:	4618      	mov	r0, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	1c59      	adds	r1, r3, #1
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6011      	str	r1, [r2, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	4413      	add	r3, r2
 800814e:	4602      	mov	r2, r0
 8008150:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	6a3a      	ldr	r2, [r7, #32]
 8008156:	429a      	cmp	r2, r3
 8008158:	d8e1      	bhi.n	800811e <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800815a:	2301      	movs	r3, #1
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
 800815e:	e002      	b.n	8008166 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8008160:	bf00      	nop
 8008162:	e000      	b.n	8008166 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8008164:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008168:	4618      	mov	r0, r3
 800816a:	3728      	adds	r7, #40	; 0x28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4618      	mov	r0, r3
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781a      	ldrb	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	701a      	strb	r2, [r3, #0]
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <_ZN5AT24CC1EP17I2C_HandleTypeDef>:
#include <cstring>

#define EEPROM_ID         0x50<<1
#define EEPROM_PAGE_SIZE  32

AT24C::AT24C(I2C_HandleTypeDef *hi2c) : _hi2c(hi2c) {}
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
	...

080081dc <_ZN5AT24C10ReadStringB5cxx11Et>:
    std::vector<uint8_t> data(value.begin(), value.end());
    data.push_back(';'); // End marker
    return WriteBytes(CalculateAddress(key), data.data(), data.size()) == HAL_OK;
}

std::string AT24C::ReadString(uint16_t key) {
 80081dc:	b5b0      	push	{r4, r5, r7, lr}
 80081de:	b08c      	sub	sp, #48	; 0x30
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	80fb      	strh	r3, [r7, #6]
    std::vector<uint8_t> data(128); // Assuming a maximum string length
 80081ea:	f107 0320 	add.w	r3, r7, #32
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fc10 	bl	8008a14 <_ZNSaIhEC1Ev>
 80081f4:	f107 0220 	add.w	r2, r7, #32
 80081f8:	f107 0314 	add.w	r3, r7, #20
 80081fc:	2180      	movs	r1, #128	; 0x80
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fc6a 	bl	8008ad8 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
 8008204:	f107 0320 	add.w	r3, r7, #32
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fc0f 	bl	8008a2c <_ZNSaIhED1Ev>
    if (ReadBytes(CalculateAddress(key), data.data(), data.size()) == HAL_OK) {
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	4619      	mov	r1, r3
 8008212:	68b8      	ldr	r0, [r7, #8]
 8008214:	f000 fb7d 	bl	8008912 <_ZN5AT24C16CalculateAddressEt>
 8008218:	4604      	mov	r4, r0
 800821a:	f107 0314 	add.w	r3, r7, #20
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fc3c 	bl	8008a9c <_ZNSt6vectorIhSaIhEE4dataEv>
 8008224:	4605      	mov	r5, r0
 8008226:	f107 0314 	add.w	r3, r7, #20
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fc45 	bl	8008aba <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8008230:	4603      	mov	r3, r0
 8008232:	462a      	mov	r2, r5
 8008234:	4621      	mov	r1, r4
 8008236:	68b8      	ldr	r0, [r7, #8]
 8008238:	f000 fbd0 	bl	80089dc <_ZN5AT24C9ReadBytesEjPhj>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	bf0c      	ite	eq
 8008242:	2301      	moveq	r3, #1
 8008244:	2300      	movne	r3, #0
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d040      	beq.n	80082ce <_ZN5AT24C10ReadStringB5cxx11Et+0xf2>
        auto endPos = std::find(data.begin(), data.end(), ';');
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fc5b 	bl	8008b0c <_ZNSt6vectorIhSaIhEE5beginEv>
 8008256:	4604      	mov	r4, r0
 8008258:	f107 0314 	add.w	r3, r7, #20
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fc65 	bl	8008b2c <_ZNSt6vectorIhSaIhEE3endEv>
 8008262:	4601      	mov	r1, r0
 8008264:	233b      	movs	r3, #59	; 0x3b
 8008266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800826a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800826e:	461a      	mov	r2, r3
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fc6c 	bl	8008b4e <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEcET_S7_S7_RKT0_>
 8008276:	4603      	mov	r3, r0
 8008278:	613b      	str	r3, [r7, #16]
        if (endPos != data.end()) {
 800827a:	f107 0314 	add.w	r3, r7, #20
 800827e:	4618      	mov	r0, r3
 8008280:	f000 fc54 	bl	8008b2c <_ZNSt6vectorIhSaIhEE3endEv>
 8008284:	4603      	mov	r3, r0
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
 8008288:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800828c:	f107 0310 	add.w	r3, r7, #16
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fc6f 	bl	8008b76 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d017      	beq.n	80082ce <_ZN5AT24C10ReadStringB5cxx11Et+0xf2>
            return std::string(data.begin(), endPos);
 800829e:	f107 0314 	add.w	r3, r7, #20
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fc32 	bl	8008b0c <_ZNSt6vectorIhSaIhEE5beginEv>
 80082a8:	4604      	mov	r4, r0
 80082aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082ae:	4618      	mov	r0, r3
 80082b0:	f00d fc9b 	bl	8015bea <_ZNSaIcEC1Ev>
 80082b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	4621      	mov	r1, r4
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 fc72 	bl	8008ba6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEvEET_SD_RKS3_>
 80082c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082c6:	4618      	mov	r0, r3
 80082c8:	f00d fc91 	bl	8015bee <_ZNSaIcED1Ev>
 80082cc:	e010      	b.n	80082f0 <_ZN5AT24C10ReadStringB5cxx11Et+0x114>
        }
    }
    return "";
 80082ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082d2:	4618      	mov	r0, r3
 80082d4:	f00d fc89 	bl	8015bea <_ZNSaIcEC1Ev>
 80082d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082dc:	461a      	mov	r2, r3
 80082de:	4909      	ldr	r1, [pc, #36]	; (8008304 <_ZN5AT24C10ReadStringB5cxx11Et+0x128>)
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f00d ff99 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80082e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082ea:	4618      	mov	r0, r3
 80082ec:	f00d fc7f 	bl	8015bee <_ZNSaIcED1Ev>
}
 80082f0:	f107 0314 	add.w	r3, r7, #20
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fba5 	bl	8008a44 <_ZNSt6vectorIhSaIhEED1Ev>
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	3730      	adds	r7, #48	; 0x30
 80082fe:	46bd      	mov	sp, r7
 8008300:	bdb0      	pop	{r4, r5, r7, pc}
 8008302:	bf00      	nop
 8008304:	0801b090 	.word	0x0801b090

08008308 <_ZN5AT24C7WriteIPEtRKSt5arrayIhLj4EE>:

bool AT24C::WriteIP(uint16_t key, const std::array<uint8_t, 4>& ip) {
 8008308:	b5b0      	push	{r4, r5, r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	460b      	mov	r3, r1
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	817b      	strh	r3, [r7, #10]
    return WriteBytes(CalculateAddress(key), ip.data(), ip.size()) == HAL_OK;
 8008316:	897b      	ldrh	r3, [r7, #10]
 8008318:	4619      	mov	r1, r3
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 faf9 	bl	8008912 <_ZN5AT24C16CalculateAddressEt>
 8008320:	4604      	mov	r4, r0
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fc5a 	bl	8008bdc <_ZNKSt5arrayIhLj4EE4dataEv>
 8008328:	4605      	mov	r5, r0
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fc63 	bl	8008bf6 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8008330:	4603      	mov	r3, r0
 8008332:	462a      	mov	r2, r5
 8008334:	4621      	mov	r1, r4
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 fafb 	bl	8008932 <_ZN5AT24C10WriteBytesEjPKhj>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	bf0c      	ite	eq
 8008342:	2301      	moveq	r3, #1
 8008344:	2300      	movne	r3, #0
 8008346:	b2db      	uxtb	r3, r3
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bdb0      	pop	{r4, r5, r7, pc}

08008350 <_ZN5AT24C6ReadIPEtRSt5arrayIhLj4EE>:

bool AT24C::ReadIP(uint16_t key, std::array<uint8_t, 4>& ip) {
 8008350:	b5b0      	push	{r4, r5, r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	460b      	mov	r3, r1
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	817b      	strh	r3, [r7, #10]
    if (ReadBytes(CalculateAddress(key), ip.data(), ip.size()) != HAL_OK) {
 800835e:	897b      	ldrh	r3, [r7, #10]
 8008360:	4619      	mov	r1, r3
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 fad5 	bl	8008912 <_ZN5AT24C16CalculateAddressEt>
 8008368:	4604      	mov	r4, r0
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fc4e 	bl	8008c0c <_ZNSt5arrayIhLj4EE4dataEv>
 8008370:	4605      	mov	r5, r0
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fc3f 	bl	8008bf6 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8008378:	4603      	mov	r3, r0
 800837a:	462a      	mov	r2, r5
 800837c:	4621      	mov	r1, r4
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fb2c 	bl	80089dc <_ZN5AT24C9ReadBytesEjPhj>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	bf14      	ite	ne
 800838a:	2301      	movne	r3, #1
 800838c:	2300      	moveq	r3, #0
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <_ZN5AT24C6ReadIPEtRSt5arrayIhLj4EE+0x48>
        return false; // Failed to read from EEPROM
 8008394:	2300      	movs	r3, #0
 8008396:	e00d      	b.n	80083b4 <_ZN5AT24C6ReadIPEtRSt5arrayIhLj4EE+0x64>
    }

    // Check if the read IP address is {0, 0, 0, 0}
    if (ip == std::array<uint8_t, 4>{0, 0, 0, 0}) {
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	f107 0314 	add.w	r3, r7, #20
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fc3f 	bl	8008c26 <_ZSteqIhLj4EEbRKSt5arrayIT_XT0_EES4_>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <_ZN5AT24C6ReadIPEtRSt5arrayIhLj4EE+0x62>
        return false; // Considered as "empty"
 80083ae:	2300      	movs	r3, #0
 80083b0:	e000      	b.n	80083b4 <_ZN5AT24C6ReadIPEtRSt5arrayIhLj4EE+0x64>
    }

    return true; // Successfully read a non-empty IP address
 80083b2:	2301      	movs	r3, #1
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bdb0      	pop	{r4, r5, r7, pc}

080083bc <_ZN5AT24C8WriteIntEti>:

bool AT24C::WriteInt(uint16_t key, int value) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	460b      	mov	r3, r1
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	817b      	strh	r3, [r7, #10]
    uint8_t data[4];
    data[0] = (value >> 24) & 0xFF;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	0e1b      	lsrs	r3, r3, #24
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	753b      	strb	r3, [r7, #20]
    data[1] = (value >> 16) & 0xFF;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	141b      	asrs	r3, r3, #16
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	757b      	strb	r3, [r7, #21]
    data[2] = (value >> 8) & 0xFF;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	121b      	asrs	r3, r3, #8
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	75bb      	strb	r3, [r7, #22]
    data[3] = value & 0xFF;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	75fb      	strb	r3, [r7, #23]
    return WriteBytes(CalculateAddress(key), data, sizeof(data)) == HAL_OK;
 80083e8:	897b      	ldrh	r3, [r7, #10]
 80083ea:	4619      	mov	r1, r3
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 fa90 	bl	8008912 <_ZN5AT24C16CalculateAddressEt>
 80083f2:	4601      	mov	r1, r0
 80083f4:	f107 0214 	add.w	r2, r7, #20
 80083f8:	2304      	movs	r3, #4
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 fa99 	bl	8008932 <_ZN5AT24C10WriteBytesEjPKhj>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf0c      	ite	eq
 8008406:	2301      	moveq	r3, #1
 8008408:	2300      	movne	r3, #0
 800840a:	b2db      	uxtb	r3, r3
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <_ZN5AT24C7ReadIntEt>:

int AT24C::ReadInt(uint16_t key) {
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	807b      	strh	r3, [r7, #2]
    uint8_t data[4];
    if (ReadBytes(CalculateAddress(key), data, sizeof(data)) == HAL_OK) {
 8008420:	887b      	ldrh	r3, [r7, #2]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fa74 	bl	8008912 <_ZN5AT24C16CalculateAddressEt>
 800842a:	4601      	mov	r1, r0
 800842c:	f107 0208 	add.w	r2, r7, #8
 8008430:	2304      	movs	r3, #4
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fad2 	bl	80089dc <_ZN5AT24C9ReadBytesEjPhj>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	bf0c      	ite	eq
 800843e:	2301      	moveq	r3, #1
 8008440:	2300      	movne	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00c      	beq.n	8008462 <_ZN5AT24C7ReadIntEt+0x4e>
        int value = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
 8008448:	7a3b      	ldrb	r3, [r7, #8]
 800844a:	061a      	lsls	r2, r3, #24
 800844c:	7a7b      	ldrb	r3, [r7, #9]
 800844e:	041b      	lsls	r3, r3, #16
 8008450:	431a      	orrs	r2, r3
 8008452:	7abb      	ldrb	r3, [r7, #10]
 8008454:	021b      	lsls	r3, r3, #8
 8008456:	4313      	orrs	r3, r2
 8008458:	7afa      	ldrb	r2, [r7, #11]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]
        return value;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	e001      	b.n	8008466 <_ZN5AT24C7ReadIntEt+0x52>
    }
    return -1; // Error or not found
 8008462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fad8 	bl	8008a2c <_ZNSaIhED1Ev>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fbe3 	bl	8008c5c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff ffeb 	bl	8008486 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <_ZN5AT24C17WriteDigitalInputEtRKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>:

bool AT24C::WriteDigitalInput(uint16_t key, const std::array<std::string, 16>& strings){
 80084ba:	b5b0      	push	{r4, r5, r7, lr}
 80084bc:	b08c      	sub	sp, #48	; 0x30
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	460b      	mov	r3, r1
 80084c4:	607a      	str	r2, [r7, #4]
 80084c6:	817b      	strh	r3, [r7, #10]
	  std::vector<uint8_t> data;
 80084c8:	f107 0310 	add.w	r3, r7, #16
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff ffe7 	bl	80084a0 <_ZNSt6vectorIhSaIhEEC1Ev>
	    for (const auto& str : strings) {
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80084d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d8:	f000 fbe8 	bl	8008cac <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE5beginEv>
 80084dc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80084de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e0:	f000 fbf0 	bl	8008cc4 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE3endEv>
 80084e4:	6278      	str	r0, [r7, #36]	; 0x24
 80084e6:	e021      	b.n	800852c <_ZN5AT24C17WriteDigitalInputEtRKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x72>
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	623b      	str	r3, [r7, #32]
	        std::copy(str.begin(), str.end(), std::back_inserter(data));
 80084ec:	6a38      	ldr	r0, [r7, #32]
 80084ee:	f00d fcde 	bl	8015eae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80084f2:	4604      	mov	r4, r0
 80084f4:	6a38      	ldr	r0, [r7, #32]
 80084f6:	f00d fcdc 	bl	8015eb2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80084fa:	4605      	mov	r5, r0
 80084fc:	f107 0310 	add.w	r3, r7, #16
 8008500:	4618      	mov	r0, r3
 8008502:	f000 fbed 	bl	8008ce0 <_ZSt13back_inserterISt6vectorIhSaIhEEESt20back_insert_iteratorIT_ERS4_>
 8008506:	4603      	mov	r3, r0
 8008508:	461a      	mov	r2, r3
 800850a:	4629      	mov	r1, r5
 800850c:	4620      	mov	r0, r4
 800850e:	f000 fbf6 	bl	8008cfe <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt20back_insert_iteratorISt6vectorIhSaIhEEEET0_T_SH_SG_>
	        data.push_back(';'); // Delimiter
 8008512:	233b      	movs	r3, #59	; 0x3b
 8008514:	77fb      	strb	r3, [r7, #31]
 8008516:	f107 021f 	add.w	r2, r7, #31
 800851a:	f107 0310 	add.w	r3, r7, #16
 800851e:	4611      	mov	r1, r2
 8008520:	4618      	mov	r0, r3
 8008522:	f000 faaa 	bl	8008a7a <_ZNSt6vectorIhSaIhEE9push_backEOh>
	    for (const auto& str : strings) {
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	3318      	adds	r3, #24
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800852c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	429a      	cmp	r2, r3
 8008532:	d1d9      	bne.n	80084e8 <_ZN5AT24C17WriteDigitalInputEtRKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x2e>
	    }

	    return WriteBytes(CalculateAddress(key), data.data(), data.size()) == HAL_OK;
 8008534:	897b      	ldrh	r3, [r7, #10]
 8008536:	4619      	mov	r1, r3
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 f9ea 	bl	8008912 <_ZN5AT24C16CalculateAddressEt>
 800853e:	4604      	mov	r4, r0
 8008540:	f107 0310 	add.w	r3, r7, #16
 8008544:	4618      	mov	r0, r3
 8008546:	f000 faa9 	bl	8008a9c <_ZNSt6vectorIhSaIhEE4dataEv>
 800854a:	4605      	mov	r5, r0
 800854c:	f107 0310 	add.w	r3, r7, #16
 8008550:	4618      	mov	r0, r3
 8008552:	f000 fab2 	bl	8008aba <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8008556:	4603      	mov	r3, r0
 8008558:	462a      	mov	r2, r5
 800855a:	4621      	mov	r1, r4
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 f9e8 	bl	8008932 <_ZN5AT24C10WriteBytesEjPKhj>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	bf0c      	ite	eq
 8008568:	2301      	moveq	r3, #1
 800856a:	2300      	movne	r3, #0
 800856c:	b2dc      	uxtb	r4, r3
}
 800856e:	f107 0310 	add.w	r3, r7, #16
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fa66 	bl	8008a44 <_ZNSt6vectorIhSaIhEED1Ev>
	    return WriteBytes(CalculateAddress(key), data.data(), data.size()) == HAL_OK;
 8008578:	4623      	mov	r3, r4
}
 800857a:	4618      	mov	r0, r3
 800857c:	3730      	adds	r7, #48	; 0x30
 800857e:	46bd      	mov	sp, r7
 8008580:	bdb0      	pop	{r4, r5, r7, pc}

08008582 <_ZN5AT24C16ReadDigitalInputEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>:


bool AT24C::ReadDigitalInput(uint16_t key, std::array<std::string, 16>& strings){
 8008582:	b5b0      	push	{r4, r5, r7, lr}
 8008584:	b094      	sub	sp, #80	; 0x50
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	460b      	mov	r3, r1
 800858c:	607a      	str	r2, [r7, #4]
 800858e:	817b      	strh	r3, [r7, #10]
	 std::vector<uint8_t> data(1024); // Assume max total length for the strings
 8008590:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fa3d 	bl	8008a14 <_ZNSaIhEC1Ev>
 800859a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800859e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fa96 	bl	8008ad8 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
 80085ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fa3b 	bl	8008a2c <_ZNSaIhED1Ev>
	    bool readSuccess = false;
 80085b6:	2300      	movs	r3, #0
 80085b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	    size_t stringIndex = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	64bb      	str	r3, [r7, #72]	; 0x48

	    // Attempt to read the bytes from EEPROM
	    if (ReadBytes(CalculateAddress(key), data.data(), data.size()) == HAL_OK) {
 80085c0:	897b      	ldrh	r3, [r7, #10]
 80085c2:	4619      	mov	r1, r3
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 f9a4 	bl	8008912 <_ZN5AT24C16CalculateAddressEt>
 80085ca:	4604      	mov	r4, r0
 80085cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 fa63 	bl	8008a9c <_ZNSt6vectorIhSaIhEE4dataEv>
 80085d6:	4605      	mov	r5, r0
 80085d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 fa6c 	bl	8008aba <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80085e2:	4603      	mov	r3, r0
 80085e4:	462a      	mov	r2, r5
 80085e6:	4621      	mov	r1, r4
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 f9f7 	bl	80089dc <_ZN5AT24C9ReadBytesEjPhj>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bf0c      	ite	eq
 80085f4:	2301      	moveq	r3, #1
 80085f6:	2300      	movne	r3, #0
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d056      	beq.n	80086ac <_ZN5AT24C16ReadDigitalInputEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x12a>
	        std::string currentString;
 80085fe:	f107 0318 	add.w	r3, r7, #24
 8008602:	4618      	mov	r0, r3
 8008604:	f00d fc05 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	        for (auto byte : data) {
 8008608:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800860c:	643b      	str	r3, [r7, #64]	; 0x40
 800860e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008610:	f000 fa7c 	bl	8008b0c <_ZNSt6vectorIhSaIhEE5beginEv>
 8008614:	4603      	mov	r3, r0
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800861a:	f000 fa87 	bl	8008b2c <_ZNSt6vectorIhSaIhEE3endEv>
 800861e:	4603      	mov	r3, r0
 8008620:	613b      	str	r3, [r7, #16]
 8008622:	e033      	b.n	800868c <_ZN5AT24C16ReadDigitalInputEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x10a>
 8008624:	f107 0314 	add.w	r3, r7, #20
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fb90 	bl	8008d4e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>
 800862e:	4603      	mov	r3, r0
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	            if (byte == ';') { // Delimiter found
 8008636:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800863a:	2b3b      	cmp	r3, #59	; 0x3b
 800863c:	d119      	bne.n	8008672 <_ZN5AT24C16ReadDigitalInputEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0xf0>
	                strings[stringIndex++] = currentString;
 800863e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	64ba      	str	r2, [r7, #72]	; 0x48
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fb8d 	bl	8008d66 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>
 800864c:	4602      	mov	r2, r0
 800864e:	f107 0318 	add.w	r3, r7, #24
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f00d fbf9 	bl	8015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	                currentString.clear();
 800865a:	f107 0318 	add.w	r3, r7, #24
 800865e:	4618      	mov	r0, r3
 8008660:	f00d fc4e 	bl	8015f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	                readSuccess = true; // At least one string read successfully
 8008664:	2301      	movs	r3, #1
 8008666:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	                if (stringIndex == 16) break; // Array is full
 800866a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800866c:	2b10      	cmp	r3, #16
 800866e:	d108      	bne.n	8008682 <_ZN5AT24C16ReadDigitalInputEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x100>
 8008670:	e017      	b.n	80086a2 <_ZN5AT24C16ReadDigitalInputEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x120>
	            } else {
	                currentString += static_cast<char>(byte);
 8008672:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008676:	f107 0318 	add.w	r3, r7, #24
 800867a:	4611      	mov	r1, r2
 800867c:	4618      	mov	r0, r3
 800867e:	f00d fc6b 	bl	8015f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	        for (auto byte : data) {
 8008682:	f107 0314 	add.w	r3, r7, #20
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fb51 	bl	8008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
 800868c:	f107 0210 	add.w	r2, r7, #16
 8008690:	f107 0314 	add.w	r3, r7, #20
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fa6d 	bl	8008b76 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1c0      	bne.n	8008624 <_ZN5AT24C16ReadDigitalInputEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0xa2>
	            }
	        }
	    }
 80086a2:	f107 0318 	add.w	r3, r7, #24
 80086a6:	4618      	mov	r0, r3
 80086a8:	f00d fbca 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	    // Clear any unused entries in the array
	    for (size_t i = stringIndex; i < 16; ++i) {
 80086ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ae:	647b      	str	r3, [r7, #68]	; 0x44
 80086b0:	e00a      	b.n	80086c8 <_ZN5AT24C16ReadDigitalInputEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x146>
	        strings[i].clear();
 80086b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fb56 	bl	8008d66 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>
 80086ba:	4603      	mov	r3, r0
 80086bc:	4618      	mov	r0, r3
 80086be:	f00d fc1f 	bl	8015f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	    for (size_t i = stringIndex; i < 16; ++i) {
 80086c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c4:	3301      	adds	r3, #1
 80086c6:	647b      	str	r3, [r7, #68]	; 0x44
 80086c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ca:	2b0f      	cmp	r3, #15
 80086cc:	d9f1      	bls.n	80086b2 <_ZN5AT24C16ReadDigitalInputEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x130>
	    }

	    return readSuccess;
 80086ce:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
}
 80086d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f9b4 	bl	8008a44 <_ZNSt6vectorIhSaIhEED1Ev>
	    return readSuccess;
 80086dc:	4623      	mov	r3, r4
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3750      	adds	r7, #80	; 0x50
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bdb0      	pop	{r4, r5, r7, pc}

080086e6 <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>:


bool AT24C::ReadArrayString(uint16_t key, std::array<std::string, 8 >& strings) {
 80086e6:	b5b0      	push	{r4, r5, r7, lr}
 80086e8:	b094      	sub	sp, #80	; 0x50
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	60f8      	str	r0, [r7, #12]
 80086ee:	460b      	mov	r3, r1
 80086f0:	607a      	str	r2, [r7, #4]
 80086f2:	817b      	strh	r3, [r7, #10]
    std::vector<uint8_t> data(1024); // Assume max total length for the strings
 80086f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 f98b 	bl	8008a14 <_ZNSaIhEC1Ev>
 80086fe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800870a:	4618      	mov	r0, r3
 800870c:	f000 f9e4 	bl	8008ad8 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
 8008710:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f989 	bl	8008a2c <_ZNSaIhED1Ev>
    bool readSuccess = false;
 800871a:	2300      	movs	r3, #0
 800871c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t stringIndex = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	64bb      	str	r3, [r7, #72]	; 0x48

    // Attempt to read the bytes from EEPROM
    if (ReadBytes(CalculateAddress(key), data.data(), data.size()) == HAL_OK) {
 8008724:	897b      	ldrh	r3, [r7, #10]
 8008726:	4619      	mov	r1, r3
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f8f2 	bl	8008912 <_ZN5AT24C16CalculateAddressEt>
 800872e:	4604      	mov	r4, r0
 8008730:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f9b1 	bl	8008a9c <_ZNSt6vectorIhSaIhEE4dataEv>
 800873a:	4605      	mov	r5, r0
 800873c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008740:	4618      	mov	r0, r3
 8008742:	f000 f9ba 	bl	8008aba <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8008746:	4603      	mov	r3, r0
 8008748:	462a      	mov	r2, r5
 800874a:	4621      	mov	r1, r4
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f945 	bl	80089dc <_ZN5AT24C9ReadBytesEjPhj>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	bf0c      	ite	eq
 8008758:	2301      	moveq	r3, #1
 800875a:	2300      	movne	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d056      	beq.n	8008810 <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x12a>
        std::string currentString;
 8008762:	f107 0318 	add.w	r3, r7, #24
 8008766:	4618      	mov	r0, r3
 8008768:	f00d fb53 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
        for (auto byte : data) {
 800876c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008770:	643b      	str	r3, [r7, #64]	; 0x40
 8008772:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008774:	f000 f9ca 	bl	8008b0c <_ZNSt6vectorIhSaIhEE5beginEv>
 8008778:	4603      	mov	r3, r0
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800877e:	f000 f9d5 	bl	8008b2c <_ZNSt6vectorIhSaIhEE3endEv>
 8008782:	4603      	mov	r3, r0
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	e033      	b.n	80087f0 <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x10a>
 8008788:	f107 0314 	add.w	r3, r7, #20
 800878c:	4618      	mov	r0, r3
 800878e:	f000 fade 	bl	8008d4e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>
 8008792:	4603      	mov	r3, r0
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (byte == ';') { // Delimiter found
 800879a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800879e:	2b3b      	cmp	r3, #59	; 0x3b
 80087a0:	d119      	bne.n	80087d6 <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0xf0>
                strings[stringIndex++] = currentString;
 80087a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 faea 	bl	8008d84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 80087b0:	4602      	mov	r2, r0
 80087b2:	f107 0318 	add.w	r3, r7, #24
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f00d fb47 	bl	8015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
                currentString.clear();
 80087be:	f107 0318 	add.w	r3, r7, #24
 80087c2:	4618      	mov	r0, r3
 80087c4:	f00d fb9c 	bl	8015f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
                readSuccess = true; // At least one string read successfully
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if (stringIndex == 8) break; // Array is full
 80087ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d108      	bne.n	80087e6 <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x100>
 80087d4:	e017      	b.n	8008806 <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x120>
            } else {
                currentString += static_cast<char>(byte);
 80087d6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80087da:	f107 0318 	add.w	r3, r7, #24
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f00d fbb9 	bl	8015f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
        for (auto byte : data) {
 80087e6:	f107 0314 	add.w	r3, r7, #20
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 fa9f 	bl	8008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
 80087f0:	f107 0210 	add.w	r2, r7, #16
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 f9bb 	bl	8008b76 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1c0      	bne.n	8008788 <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0xa2>
            }
        }
    }
 8008806:	f107 0318 	add.w	r3, r7, #24
 800880a:	4618      	mov	r0, r3
 800880c:	f00d fb18 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    // Clear any unused entries in the array
    for (size_t i = stringIndex; i < 8; ++i) {
 8008810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008812:	647b      	str	r3, [r7, #68]	; 0x44
 8008814:	e00a      	b.n	800882c <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x146>
        strings[i].clear();
 8008816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fab3 	bl	8008d84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 800881e:	4603      	mov	r3, r0
 8008820:	4618      	mov	r0, r3
 8008822:	f00d fb6d 	bl	8015f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    for (size_t i = stringIndex; i < 8; ++i) {
 8008826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008828:	3301      	adds	r3, #1
 800882a:	647b      	str	r3, [r7, #68]	; 0x44
 800882c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800882e:	2b07      	cmp	r3, #7
 8008830:	d9f1      	bls.n	8008816 <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x130>
    }

    return readSuccess;
 8008832:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
}
 8008836:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800883a:	4618      	mov	r0, r3
 800883c:	f000 f902 	bl	8008a44 <_ZNSt6vectorIhSaIhEED1Ev>
    return readSuccess;
 8008840:	4623      	mov	r3, r4
}
 8008842:	4618      	mov	r0, r3
 8008844:	3750      	adds	r7, #80	; 0x50
 8008846:	46bd      	mov	sp, r7
 8008848:	bdb0      	pop	{r4, r5, r7, pc}

0800884a <_ZN5AT24C16WriteArrayStringEtRKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>:


bool AT24C::WriteArrayString(uint16_t key, const std::array<std::string, 8>& strings) {
 800884a:	b5b0      	push	{r4, r5, r7, lr}
 800884c:	b08c      	sub	sp, #48	; 0x30
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	460b      	mov	r3, r1
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	817b      	strh	r3, [r7, #10]
    std::vector<uint8_t> data;
 8008858:	f107 0310 	add.w	r3, r7, #16
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff fe1f 	bl	80084a0 <_ZNSt6vectorIhSaIhEEC1Ev>
    for (const auto& str : strings) {
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28
 8008866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008868:	f000 fa9b 	bl	8008da2 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE5beginEv>
 800886c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800886e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008870:	f000 faa3 	bl	8008dba <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE3endEv>
 8008874:	6278      	str	r0, [r7, #36]	; 0x24
 8008876:	e021      	b.n	80088bc <_ZN5AT24C16WriteArrayStringEtRKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x72>
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	623b      	str	r3, [r7, #32]
        std::copy(str.begin(), str.end(), std::back_inserter(data));
 800887c:	6a38      	ldr	r0, [r7, #32]
 800887e:	f00d fb16 	bl	8015eae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8008882:	4604      	mov	r4, r0
 8008884:	6a38      	ldr	r0, [r7, #32]
 8008886:	f00d fb14 	bl	8015eb2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 800888a:	4605      	mov	r5, r0
 800888c:	f107 0310 	add.w	r3, r7, #16
 8008890:	4618      	mov	r0, r3
 8008892:	f000 fa25 	bl	8008ce0 <_ZSt13back_inserterISt6vectorIhSaIhEEESt20back_insert_iteratorIT_ERS4_>
 8008896:	4603      	mov	r3, r0
 8008898:	461a      	mov	r2, r3
 800889a:	4629      	mov	r1, r5
 800889c:	4620      	mov	r0, r4
 800889e:	f000 fa2e 	bl	8008cfe <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt20back_insert_iteratorISt6vectorIhSaIhEEEET0_T_SH_SG_>
        data.push_back(';'); // Delimiter
 80088a2:	233b      	movs	r3, #59	; 0x3b
 80088a4:	77fb      	strb	r3, [r7, #31]
 80088a6:	f107 021f 	add.w	r2, r7, #31
 80088aa:	f107 0310 	add.w	r3, r7, #16
 80088ae:	4611      	mov	r1, r2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 f8e2 	bl	8008a7a <_ZNSt6vectorIhSaIhEE9push_backEOh>
    for (const auto& str : strings) {
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	3318      	adds	r3, #24
 80088ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d1d9      	bne.n	8008878 <_ZN5AT24C16WriteArrayStringEtRKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x2e>
    }

    return WriteBytes(CalculateAddress(key), data.data(), data.size()) == HAL_OK;
 80088c4:	897b      	ldrh	r3, [r7, #10]
 80088c6:	4619      	mov	r1, r3
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f822 	bl	8008912 <_ZN5AT24C16CalculateAddressEt>
 80088ce:	4604      	mov	r4, r0
 80088d0:	f107 0310 	add.w	r3, r7, #16
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f8e1 	bl	8008a9c <_ZNSt6vectorIhSaIhEE4dataEv>
 80088da:	4605      	mov	r5, r0
 80088dc:	f107 0310 	add.w	r3, r7, #16
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 f8ea 	bl	8008aba <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80088e6:	4603      	mov	r3, r0
 80088e8:	462a      	mov	r2, r5
 80088ea:	4621      	mov	r1, r4
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 f820 	bl	8008932 <_ZN5AT24C10WriteBytesEjPKhj>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bf0c      	ite	eq
 80088f8:	2301      	moveq	r3, #1
 80088fa:	2300      	movne	r3, #0
 80088fc:	b2dc      	uxtb	r4, r3
}
 80088fe:	f107 0310 	add.w	r3, r7, #16
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f89e 	bl	8008a44 <_ZNSt6vectorIhSaIhEED1Ev>
    return WriteBytes(CalculateAddress(key), data.data(), data.size()) == HAL_OK;
 8008908:	4623      	mov	r3, r4
}
 800890a:	4618      	mov	r0, r3
 800890c:	3730      	adds	r7, #48	; 0x30
 800890e:	46bd      	mov	sp, r7
 8008910:	bdb0      	pop	{r4, r5, r7, pc}

08008912 <_ZN5AT24C16CalculateAddressEt>:


size_t AT24C::CalculateAddress(uint16_t key) {
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	807b      	strh	r3, [r7, #2]
    // Example: Each key represents a new block of 100 bytes
    return static_cast<size_t>(key) * 100;
 800891e:	887b      	ldrh	r3, [r7, #2]
 8008920:	2264      	movs	r2, #100	; 0x64
 8008922:	fb02 f303 	mul.w	r3, r2, r3
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <_ZN5AT24C10WriteBytesEjPKhj>:



HAL_StatusTypeDef AT24C::WriteBytes(size_t address, const uint8_t *data, size_t length) {
 8008932:	b590      	push	{r4, r7, lr}
 8008934:	b091      	sub	sp, #68	; 0x44
 8008936:	af04      	add	r7, sp, #16
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
 800893e:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef error = HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    size_t bytesLeft = length;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t currentOffset = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	627b      	str	r3, [r7, #36]	; 0x24

    while (bytesLeft > 0) {
 800894e:	e03c      	b.n	80089ca <_ZN5AT24C10WriteBytesEjPKhj+0x98>
        size_t currentPageStart = address + currentOffset;
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	4413      	add	r3, r2
 8008956:	623b      	str	r3, [r7, #32]
        size_t currentPageEnd = ((currentPageStart / EEPROM_PAGE_SIZE) + 1) * EEPROM_PAGE_SIZE;
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	095b      	lsrs	r3, r3, #5
 800895c:	3301      	adds	r3, #1
 800895e:	015b      	lsls	r3, r3, #5
 8008960:	61fb      	str	r3, [r7, #28]
        size_t spaceInCurrentPage = currentPageEnd - currentPageStart;
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	61bb      	str	r3, [r7, #24]
        size_t bytesToWriteNow = (bytesLeft < spaceInCurrentPage) ? bytesLeft : spaceInCurrentPage;
 800896a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	429a      	cmp	r2, r3
 8008970:	d201      	bcs.n	8008976 <_ZN5AT24C10WriteBytesEjPKhj+0x44>
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	e000      	b.n	8008978 <_ZN5AT24C10WriteBytesEjPKhj+0x46>
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	617b      	str	r3, [r7, #20]

        error = HAL_I2C_Mem_Write(_hi2c, EEPROM_ID, currentPageStart, I2C_MEMADD_SIZE_16BIT, const_cast<uint8_t*>(data + currentOffset), bytesToWriteNow, 1000);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	b299      	uxth	r1, r3
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	4413      	add	r3, r2
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	b292      	uxth	r2, r2
 800898c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008990:	9402      	str	r4, [sp, #8]
 8008992:	9201      	str	r2, [sp, #4]
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	2310      	movs	r3, #16
 8008998:	460a      	mov	r2, r1
 800899a:	21a0      	movs	r1, #160	; 0xa0
 800899c:	f007 fe46 	bl	801062c <HAL_I2C_Mem_Write>
 80089a0:	4603      	mov	r3, r0
 80089a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (error != HAL_OK) {
 80089a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <_ZN5AT24C10WriteBytesEjPKhj+0x82>
            return error;
 80089ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089b2:	e00f      	b.n	80089d4 <_ZN5AT24C10WriteBytesEjPKhj+0xa2>
        }
        HAL_Delay(5); // EEPROM page write delay, adjust as necessary for your EEPROM
 80089b4:	2005      	movs	r0, #5
 80089b6:	f006 fbeb 	bl	800f190 <HAL_Delay>

        currentOffset += bytesToWriteNow;
 80089ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	4413      	add	r3, r2
 80089c0:	627b      	str	r3, [r7, #36]	; 0x24
        bytesLeft -= bytesToWriteNow;
 80089c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (bytesLeft > 0) {
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1bf      	bne.n	8008950 <_ZN5AT24C10WriteBytesEjPKhj+0x1e>
    }

    return error;
 80089d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3734      	adds	r7, #52	; 0x34
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd90      	pop	{r4, r7, pc}

080089dc <_ZN5AT24C9ReadBytesEjPhj>:

HAL_StatusTypeDef AT24C::ReadBytes(size_t address, uint8_t *data, size_t length) {
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af04      	add	r7, sp, #16
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	603b      	str	r3, [r7, #0]
    return HAL_I2C_Mem_Read(_hi2c, EEPROM_ID, address, I2C_MEMADD_SIZE_16BIT, data, length, 1000);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80089fa:	9102      	str	r1, [sp, #8]
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	2310      	movs	r3, #16
 8008a04:	21a0      	movs	r1, #160	; 0xa0
 8008a06:	f007 ff0b 	bl	8010820 <HAL_I2C_Mem_Read>
 8008a0a:	4603      	mov	r3, r0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <_ZNSaIhEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f9d9 	bl	8008dd4 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f9d8 	bl	8008dea <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8008a44:	b5b0      	push	{r4, r5, r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681c      	ldr	r4, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 f9d2 	bl	8008e00 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008a5c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4629      	mov	r1, r5
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 f9d7 	bl	8008e16 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f906 	bl	8008c7c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bdb0      	pop	{r4, r5, r7, pc}

08008a7a <_ZNSt6vectorIhSaIhEE9push_backEOh>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8008a84:	6838      	ldr	r0, [r7, #0]
 8008a86:	f000 f9d4 	bl	8008e32 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f9da 	bl	8008e48 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <_ZNSt6vectorIhSaIhEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f9fa 	bl	8008ea4 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8008ad8:	b590      	push	{r4, r7, lr}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8008ae4:	68fc      	ldr	r4, [r7, #12]
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	68b8      	ldr	r0, [r7, #8]
 8008aea:	f000 f9e7 	bl	8008ebc <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 8008aee:	4603      	mov	r3, r0
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	4619      	mov	r1, r3
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 fa09 	bl	8008f0c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_default_initialize(__n); }
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 fa19 	bl	8008f34 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd90      	pop	{r4, r7, pc}

08008b0c <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	f107 030c 	add.w	r3, r7, #12
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 fa21 	bl	8008f64 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	1d1a      	adds	r2, r3, #4
 8008b38:	f107 030c 	add.w	r3, r7, #12
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fa10 	bl	8008f64 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEcET_S7_S7_RKT0_>:
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
		typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);
      return std::__find_if(__first, __last,
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fa12 	bl	8008f84 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8008b60:	4603      	mov	r3, r0
 8008b62:	461a      	mov	r2, r3
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 fa1b 	bl	8008fa2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>
 8008b6c:	4603      	mov	r3, r0
			    __gnu_cxx::__ops::__iter_equals_val(__val));
    }
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008b76:	b590      	push	{r4, r7, lr}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fa24 	bl	8008fce <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8008b86:	4603      	mov	r3, r0
 8008b88:	681c      	ldr	r4, [r3, #0]
 8008b8a:	6838      	ldr	r0, [r7, #0]
 8008b8c:	f000 fa1f 	bl	8008fce <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8008b90:	4603      	mov	r3, r0
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	429c      	cmp	r4, r3
 8008b96:	bf14      	ite	ne
 8008b98:	2301      	movne	r3, #1
 8008b9a:	2300      	moveq	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd90      	pop	{r4, r7, pc}

08008ba6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEvEET_SD_RKS3_>:
      template<typename _InputIterator,
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
        basic_string(_InputIterator __beg, _InputIterator __end,
 8008ba6:	b590      	push	{r4, r7, lr}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	60f8      	str	r0, [r7, #12]
 8008bae:	60b9      	str	r1, [r7, #8]
 8008bb0:	607a      	str	r2, [r7, #4]
 8008bb2:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a)
 8008bb4:	68fc      	ldr	r4, [r7, #12]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f00d f830 	bl	8015c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f00d facd 	bl	8016162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 fa09 	bl	8008fe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd90      	pop	{r4, r7, pc}

08008bdc <_ZNKSt5arrayIhLj4EE4dataEv>:
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fa0b 	bl	8009002 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8008bec:	4603      	mov	r3, r0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <_ZNKSt5arrayIhLj4EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8008bf6:	b480      	push	{r7}
 8008bf8:	b083      	sub	sp, #12
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	2304      	movs	r3, #4
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <_ZNSt5arrayIhLj4EE4dataEv>:
      data() noexcept
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 f9f3 	bl	8009002 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <_ZSteqIhLj4EEbRKSt5arrayIT_XT0_EES4_>:

  // Array comparisons.
  template<typename _Tp, std::size_t _Nm>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
 8008c26:	b5b0      	push	{r4, r5, r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f9f1 	bl	8009018 <_ZNKSt5arrayIhLj4EE5beginEv>
 8008c36:	4604      	mov	r4, r0
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f9f9 	bl	8009030 <_ZNKSt5arrayIhLj4EE3endEv>
 8008c3e:	4605      	mov	r5, r0
 8008c40:	6838      	ldr	r0, [r7, #0]
 8008c42:	f000 f9e9 	bl	8009018 <_ZNKSt5arrayIhLj4EE5beginEv>
 8008c46:	4603      	mov	r3, r0
 8008c48:	461a      	mov	r2, r3
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 f9fc 	bl	800904a <_ZSt5equalIPKhS1_EbT_S2_T0_>
 8008c52:	4603      	mov	r3, r0
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bdb0      	pop	{r4, r5, r7, pc}

08008c5c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7ff fed5 	bl	8008a14 <_ZNSaIhEC1Ev>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 f9fc 	bl	800906a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8008c92:	461a      	mov	r2, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f9fc 	bl	8009092 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff fbe6 	bl	800846e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE5beginEv>:
      begin() const noexcept
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f9ff 	bl	80090b8 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4dataEv>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE3endEv>:
      end() const noexcept
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f9f3 	bl	80090b8 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4dataEv>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <_ZSt13back_inserterISt6vectorIhSaIhEEESt20back_insert_iteratorIT_ERS4_>:
    back_inserter(_Container& __x)
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
    { return back_insert_iterator<_Container>(__x); }
 8008ce8:	f107 030c 	add.w	r3, r7, #12
 8008cec:	6879      	ldr	r1, [r7, #4]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f9ef 	bl	80090d2 <_ZNSt20back_insert_iteratorISt6vectorIhSaIhEEEC1ERS2_>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt20back_insert_iteratorISt6vectorIhSaIhEEEET0_T_SH_SG_>:
    copy(_II __first, _II __last, _OI __result)
 8008cfe:	b590      	push	{r4, r7, lr}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 f9f1 	bl	80090f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEET_SB_>
 8008d10:	4604      	mov	r4, r0
 8008d12:	68b8      	ldr	r0, [r7, #8]
 8008d14:	f000 f9ed 	bl	80090f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEET_SB_>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 f9f2 	bl	8009108 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt20back_insert_iteratorISt6vectorIhSaIhEEEET1_T0_SH_SG_>
 8008d24:	4603      	mov	r3, r0
    }
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd90      	pop	{r4, r7, pc}

08008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	601a      	str	r2, [r3, #0]
	return *this;
 8008d40:	687b      	ldr	r3, [r7, #4]
      }
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>:
      operator[](size_type __n) noexcept
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b082      	sub	sp, #8
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 f9e9 	bl	800914c <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_refERA16_KS5_j>
 8008d7a:	4603      	mov	r3, r0
      }
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>:
      operator[](size_type __n) noexcept
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f9ec 	bl	8009170 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_refERA8_KS5_j>
 8008d98:	4603      	mov	r3, r0
      }
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE5beginEv>:
      begin() const noexcept
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f9f2 	bl	8009194 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4dataEv>
 8008db0:	4603      	mov	r3, r0
 8008db2:	4618      	mov	r0, r3
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE3endEv>:
      end() const noexcept
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f9e6 	bl	8009194 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4dataEv>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	33c0      	adds	r3, #192	; 0xc0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4618      	mov	r0, r3
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8008e22:	68b9      	ldr	r1, [r7, #8]
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 f9e8 	bl	80091fa <_ZSt8_DestroyIPhEvT_S1_>
    }
 8008e2a:	bf00      	nop
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8008e48:	b5b0      	push	{r4, r5, r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d011      	beq.n	8008e82 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008e5e:	687c      	ldr	r4, [r7, #4]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685d      	ldr	r5, [r3, #4]
 8008e64:	6838      	ldr	r0, [r7, #0]
 8008e66:	f000 f9d5 	bl	8009214 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	4629      	mov	r1, r5
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 f9da 	bl	800922a <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8008e80:	e00c      	b.n	8008e9c <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff fe52 	bl	8008b2c <_ZNSt6vectorIhSaIhEE3endEv>
 8008e88:	4604      	mov	r4, r0
 8008e8a:	6838      	ldr	r0, [r7, #0]
 8008e8c:	f000 f9c2 	bl	8009214 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8008e90:	4603      	mov	r3, r0
 8008e92:	461a      	mov	r2, r3
 8008e94:	4621      	mov	r1, r4
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f9f0 	bl	800927c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bdb0      	pop	{r4, r5, r7, pc}

08008ea4 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8008ebc:	b590      	push	{r4, r7, lr}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8008ec6:	f107 030c 	add.w	r3, r7, #12
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 faa7 	bl	8009420 <_ZNSaIhEC1ERKS_>
 8008ed2:	f107 030c 	add.w	r3, r7, #12
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fa88 	bl	80093ec <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8008edc:	4602      	mov	r2, r0
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	bf8c      	ite	hi
 8008ee4:	2301      	movhi	r3, #1
 8008ee6:	2300      	movls	r3, #0
 8008ee8:	b2dc      	uxtb	r4, r3
 8008eea:	f107 030c 	add.w	r3, r7, #12
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff fd9c 	bl	8008a2c <_ZNSaIhED1Ev>
 8008ef4:	2c00      	cmp	r4, #0
 8008ef6:	d002      	beq.n	8008efe <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8008ef8:	4803      	ldr	r0, [pc, #12]	; (8008f08 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x4c>)
 8008efa:	f00c fe7f 	bl	8015bfc <_ZSt20__throw_length_errorPKc>
	return __n;
 8008efe:	687b      	ldr	r3, [r7, #4]
      }
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd90      	pop	{r4, r7, pc}
 8008f08:	0801b094 	.word	0x0801b094

08008f0c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 f946 	bl	80091ae <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 fa89 	bl	800943c <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8008f34:	b590      	push	{r4, r7, lr}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7ff ff5b 	bl	8008e00 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008f4a:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fa8d 	bl	8009470 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8008f56:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	605a      	str	r2, [r3, #4]
      }
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd90      	pop	{r4, r7, pc}

08008f64 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 8008f8c:	f107 030c 	add.w	r3, r7, #12
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 fa7b 	bl	800948e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 8008fa2:	b590      	push	{r4, r7, lr}
 8008fa4:	b085      	sub	sp, #20
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 8008fae:	f107 030c 	add.w	r3, r7, #12
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fa7a 	bl	80094ac <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return __find_if(__first, __last, __pred,
 8008fb8:	4623      	mov	r3, r4
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 fa7f 	bl	80094c2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>
 8008fc4:	4603      	mov	r3, r0
    }
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd90      	pop	{r4, r7, pc}

08008fce <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008fce:	b480      	push	{r7}
 8008fd0:	b083      	sub	sp, #12
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	68b9      	ldr	r1, [r7, #8]
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 fafd 	bl	80095f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_St12__false_type>
        }
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <_ZNKSt5arrayIhLj4EE5beginEv>:
      begin() const noexcept
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7ff fddb 	bl	8008bdc <_ZNKSt5arrayIhLj4EE4dataEv>
 8009026:	4603      	mov	r3, r0
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <_ZNKSt5arrayIhLj4EE3endEv>:
      end() const noexcept
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff fdcf 	bl	8008bdc <_ZNKSt5arrayIhLj4EE4dataEv>
 800903e:	4603      	mov	r3, r0
 8009040:	3304      	adds	r3, #4
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <_ZSt5equalIPKhS1_EbT_S2_T0_>:
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
 800904a:	b580      	push	{r7, lr}
 800904c:	b084      	sub	sp, #16
 800904e:	af00      	add	r7, sp, #0
 8009050:	60f8      	str	r0, [r7, #12]
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	607a      	str	r2, [r7, #4]
      return std::__equal_aux(__first1, __last1, __first2);
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	68b9      	ldr	r1, [r7, #8]
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 fadb 	bl	8009616 <_ZSt11__equal_auxIPKhS1_EbT_S2_T0_>
 8009060:	4603      	mov	r3, r0
    }
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	605a      	str	r2, [r3, #4]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	609a      	str	r2, [r3, #8]
	{ }
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4618      	mov	r0, r3
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	60f8      	str	r0, [r7, #12]
 800909a:	60b9      	str	r1, [r7, #8]
 800909c:	607a      	str	r2, [r7, #4]
	if (__p)
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 facf 	bl	800964e <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 80090b0:	bf00      	nop
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4dataEv>:
      data() const noexcept
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fad2 	bl	800966c <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_ptrERA16_KS5_>
 80090c8:	4603      	mov	r3, r0
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <_ZNSt20back_insert_iteratorISt6vectorIhSaIhEEEC1ERS2_>:
      back_insert_iterator(_Container& __x)
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
      : container(std::__addressof(__x)) { }
 80090dc:	6838      	ldr	r0, [r7, #0]
 80090de:	f000 fad0 	bl	8009682 <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 80090e2:	4602      	mov	r2, r0
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4618      	mov	r0, r3
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEET_SB_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80090f2:	b480      	push	{r7}
 80090f4:	b083      	sub	sp, #12
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4618      	mov	r0, r3
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt20back_insert_iteratorISt6vectorIhSaIhEEEET1_T0_SH_SG_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009108:	b5b0      	push	{r4, r5, r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fabf 	bl	8009698 <_ZSt12__niter_baseIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 800911a:	4604      	mov	r4, r0
 800911c:	68b8      	ldr	r0, [r7, #8]
 800911e:	f000 fabb 	bl	8009698 <_ZSt12__niter_baseIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8009122:	4605      	mov	r5, r0
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fac5 	bl	80096b4 <_ZSt12__niter_baseISt20back_insert_iteratorISt6vectorIhSaIhEEEET_S5_>
 800912a:	4603      	mov	r3, r0
 800912c:	461a      	mov	r2, r3
 800912e:	4629      	mov	r1, r5
 8009130:	4620      	mov	r0, r4
 8009132:	f000 faca 	bl	80096ca <_ZSt14__copy_move_a1ILb0EPKcSt20back_insert_iteratorISt6vectorIhSaIhEEEET1_T0_S8_S7_>
 8009136:	4602      	mov	r2, r0
 8009138:	1d3b      	adds	r3, r7, #4
 800913a:	4611      	mov	r1, r2
 800913c:	4618      	mov	r0, r3
 800913e:	f000 fad4 	bl	80096ea <_ZSt12__niter_wrapISt20back_insert_iteratorISt6vectorIhSaIhEEEET_RKS5_S5_>
 8009142:	4603      	mov	r3, r0
    }
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bdb0      	pop	{r4, r5, r7, pc}

0800914c <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_refERA16_KS5_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	4613      	mov	r3, r2
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	4413      	add	r3, r2
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	4413      	add	r3, r2
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_refERA8_KS5_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	4613      	mov	r3, r2
 800917e:	005b      	lsls	r3, r3, #1
 8009180:	4413      	add	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	4413      	add	r3, r2
 8009188:	4618      	mov	r0, r3
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4dataEv>:
      data() const noexcept
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 faaf 	bl	8009702 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_ptrERA8_KS5_>
 80091a4:	4603      	mov	r3, r0
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f930 	bl	8009420 <_ZNSaIhEC1ERKS_>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7ff ff51 	bl	800906a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d006      	beq.n	80091f0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fa96 	bl	8009718 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 80091ec:	4603      	mov	r3, r0
 80091ee:	e000      	b.n	80091f2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 80091f0:	2300      	movs	r3, #0
      }
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fa95 	bl	8009736 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4618      	mov	r0, r3
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7ff ffec 	bl	8009214 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800923c:	4603      	mov	r3, r0
 800923e:	461a      	mov	r2, r3
 8009240:	68b9      	ldr	r1, [r7, #8]
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 fa82 	bl	800974c <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJhEEEvPT_DpOT0_>
	}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f805 	bl	8009266 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800925c:	4603      	mov	r3, r0
      }
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800926e:	2301      	movs	r3, #1
      }
 8009270:	4618      	mov	r0, r3
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800927c:	b5b0      	push	{r4, r5, r7, lr}
 800927e:	b08c      	sub	sp, #48	; 0x30
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8009288:	4a57      	ldr	r2, [pc, #348]	; (80093e8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x16c>)
 800928a:	2101      	movs	r1, #1
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 fa74 	bl	800977a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8009292:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f7ff fc33 	bl	8008b0c <_ZNSt6vectorIhSaIhEE5beginEv>
 80092a6:	4603      	mov	r3, r0
 80092a8:	617b      	str	r3, [r7, #20]
 80092aa:	f107 0214 	add.w	r2, r7, #20
 80092ae:	f107 0308 	add.w	r3, r7, #8
 80092b2:	4611      	mov	r1, r2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 faa7 	bl	8009808 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80092ba:	4603      	mov	r3, r0
 80092bc:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff ff85 	bl	80091d2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80092c8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80092ce:	68fc      	ldr	r4, [r7, #12]
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	18d5      	adds	r5, r2, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7ff ff9c 	bl	8009214 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80092dc:	4603      	mov	r3, r0
 80092de:	461a      	mov	r2, r3
 80092e0:	4629      	mov	r1, r5
 80092e2:	4620      	mov	r0, r4
 80092e4:	f7ff ffa1 	bl	800922a <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80092e8:	2300      	movs	r3, #0
 80092ea:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80092ec:	f7ff ffb0 	bl	8009250 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d027      	beq.n	8009346 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xca>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80092f6:	f107 0308 	add.w	r3, r7, #8
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fe67 	bl	8008fce <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8009300:	4603      	mov	r3, r0
 8009302:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff fd7a 	bl	8008e00 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800930c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	4621      	mov	r1, r4
 8009312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009314:	f000 fa8c 	bl	8009830 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8009318:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800931a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931c:	3301      	adds	r3, #1
 800931e:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009320:	f107 0308 	add.w	r3, r7, #8
 8009324:	4618      	mov	r0, r3
 8009326:	f7ff fe52 	bl	8008fce <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800932a:	4603      	mov	r3, r0
 800932c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff fd65 	bl	8008e00 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009336:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800933a:	6a39      	ldr	r1, [r7, #32]
 800933c:	4620      	mov	r0, r4
 800933e:	f000 fa77 	bl	8009830 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8009342:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009344:	e026      	b.n	8009394 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x118>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8009346:	f107 0308 	add.w	r3, r7, #8
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff fe3f 	bl	8008fce <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8009350:	4603      	mov	r3, r0
 8009352:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff fd52 	bl	8008e00 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800935c:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	4621      	mov	r1, r4
 8009362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009364:	f000 fa78 	bl	8009858 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8009368:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	3301      	adds	r3, #1
 800936e:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8009370:	f107 0308 	add.w	r3, r7, #8
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff fe2a 	bl	8008fce <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800937a:	4603      	mov	r3, r0
 800937c:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff fd3d 	bl	8008e00 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009386:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8009388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800938a:	6a39      	ldr	r1, [r7, #32]
 800938c:	4620      	mov	r0, r4
 800938e:	f000 fa63 	bl	8009858 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8009392:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8009394:	f7ff ff5c 	bl	8009250 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8009398:	4603      	mov	r3, r0
 800939a:	f083 0301 	eor.w	r3, r3, #1
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d009      	beq.n	80093b8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x13c>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff fd2a 	bl	8008e00 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80093ac:	4603      	mov	r3, r0
 80093ae:	461a      	mov	r2, r3
 80093b0:	6a39      	ldr	r1, [r7, #32]
 80093b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093b4:	f7ff fd2f 	bl	8008e16 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80093b8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 80093c2:	461a      	mov	r2, r3
 80093c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093c6:	f7ff fe64 	bl	8009092 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093d4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	441a      	add	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	609a      	str	r2, [r3, #8]
    }
 80093e0:	bf00      	nop
 80093e2:	3730      	adds	r7, #48	; 0x30
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bdb0      	pop	{r4, r5, r7, pc}
 80093e8:	0801b0c8 	.word	0x0801b0c8

080093ec <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80093f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80093f8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa45 	bl	800988a <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8009400:	4603      	mov	r3, r0
 8009402:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009404:	f107 0208 	add.w	r2, r7, #8
 8009408:	f107 030c 	add.w	r3, r7, #12
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f000 fa47 	bl	80098a2 <_ZSt3minIjERKT_S2_S2_>
 8009414:	4603      	mov	r3, r0
 8009416:	681b      	ldr	r3, [r3, #0]
      }
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fa4c 	bl	80098ca <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff fec2 	bl	80091d2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800944e:	4602      	mov	r2, r0
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	441a      	add	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	609a      	str	r2, [r3, #8]
      }
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:

  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 800947c:	68b9      	ldr	r1, [r7, #8]
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fa2f 	bl	80098e2 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8009484:	4603      	mov	r3, r0
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	601a      	str	r2, [r3, #0]
      { }
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80094b4:	bf00      	nop
 80094b6:	4618      	mov	r0, r3
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b086      	sub	sp, #24
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	607a      	str	r2, [r7, #4]
 80094ce:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 80094d0:	f107 020c 	add.w	r2, r7, #12
 80094d4:	f107 0308 	add.w	r3, r7, #8
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 f994 	bl	8009808 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80094e0:	4603      	mov	r3, r0
 80094e2:	109b      	asrs	r3, r3, #2
 80094e4:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 80094e6:	e03e      	b.n	8009566 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 80094e8:	1d3b      	adds	r3, r7, #4
 80094ea:	68f9      	ldr	r1, [r7, #12]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 fa08 	bl	8009902 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEbT_>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	e077      	b.n	80095ec <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80094fc:	f107 030c 	add.w	r3, r7, #12
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff fc14 	bl	8008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
	  if (__pred(__first))
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	68f9      	ldr	r1, [r7, #12]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 f9f9 	bl	8009902 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEbT_>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	e068      	b.n	80095ec <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800951a:	f107 030c 	add.w	r3, r7, #12
 800951e:	4618      	mov	r0, r3
 8009520:	f7ff fc05 	bl	8008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
	  if (__pred(__first))
 8009524:	1d3b      	adds	r3, r7, #4
 8009526:	68f9      	ldr	r1, [r7, #12]
 8009528:	4618      	mov	r0, r3
 800952a:	f000 f9ea 	bl	8009902 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEbT_>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	e059      	b.n	80095ec <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8009538:	f107 030c 	add.w	r3, r7, #12
 800953c:	4618      	mov	r0, r3
 800953e:	f7ff fbf6 	bl	8008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
	  if (__pred(__first))
 8009542:	1d3b      	adds	r3, r7, #4
 8009544:	68f9      	ldr	r1, [r7, #12]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 f9db 	bl	8009902 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEbT_>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	e04a      	b.n	80095ec <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8009556:	f107 030c 	add.w	r3, r7, #12
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff fbe7 	bl	8008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	3b01      	subs	r3, #1
 8009564:	617b      	str	r3, [r7, #20]
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	dcbd      	bgt.n	80094e8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 800956c:	f107 020c 	add.w	r2, r7, #12
 8009570:	f107 0308 	add.w	r3, r7, #8
 8009574:	4611      	mov	r1, r2
 8009576:	4618      	mov	r0, r3
 8009578:	f000 f946 	bl	8009808 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800957c:	4603      	mov	r3, r0
 800957e:	2b03      	cmp	r3, #3
 8009580:	d006      	beq.n	8009590 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xce>
 8009582:	2b03      	cmp	r3, #3
 8009584:	dc31      	bgt.n	80095ea <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
 8009586:	2b01      	cmp	r3, #1
 8009588:	d020      	beq.n	80095cc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x10a>
 800958a:	2b02      	cmp	r3, #2
 800958c:	d00f      	beq.n	80095ae <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xec>
 800958e:	e02c      	b.n	80095ea <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 8009590:	1d3b      	adds	r3, r7, #4
 8009592:	68f9      	ldr	r1, [r7, #12]
 8009594:	4618      	mov	r0, r3
 8009596:	f000 f9b4 	bl	8009902 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEbT_>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	e023      	b.n	80095ec <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80095a4:	f107 030c 	add.w	r3, r7, #12
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff fbc0 	bl	8008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
	  if (__pred(__first))
 80095ae:	1d3b      	adds	r3, r7, #4
 80095b0:	68f9      	ldr	r1, [r7, #12]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 f9a5 	bl	8009902 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEbT_>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	e014      	b.n	80095ec <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80095c2:	f107 030c 	add.w	r3, r7, #12
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff fbb1 	bl	8008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
	  if (__pred(__first))
 80095cc:	1d3b      	adds	r3, r7, #4
 80095ce:	68f9      	ldr	r1, [r7, #12]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 f996 	bl	8009902 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEbT_>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	e005      	b.n	80095ec <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80095e0:	f107 030c 	add.w	r3, r7, #12
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7ff fba2 	bl	8008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
	  return __last;
 80095ea:	68bb      	ldr	r3, [r7, #8]
    }
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80095f4:	b590      	push	{r4, r7, lr}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8009602:	4623      	mov	r3, r4
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	68b9      	ldr	r1, [r7, #8]
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 f991 	bl	8009930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_St20forward_iterator_tag>
	}
 800960e:	bf00      	nop
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	bd90      	pop	{r4, r7, pc}

08009616 <_ZSt11__equal_auxIPKhS1_EbT_S2_T0_>:
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
 8009616:	b5b0      	push	{r4, r5, r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
      return std::__equal_aux1(std::__niter_base(__first1),
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 f9d2 	bl	80099cc <_ZSt12__niter_baseIPKhET_S2_>
 8009628:	4604      	mov	r4, r0
 800962a:	68b8      	ldr	r0, [r7, #8]
 800962c:	f000 f9ce 	bl	80099cc <_ZSt12__niter_baseIPKhET_S2_>
 8009630:	4605      	mov	r5, r0
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f9ca 	bl	80099cc <_ZSt12__niter_baseIPKhET_S2_>
 8009638:	4603      	mov	r3, r0
 800963a:	461a      	mov	r2, r3
 800963c:	4629      	mov	r1, r5
 800963e:	4620      	mov	r0, r4
 8009640:	f000 f9cf 	bl	80099e2 <_ZSt12__equal_aux1IPKhS1_EbT_S2_T0_>
 8009644:	4603      	mov	r3, r0
    }
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bdb0      	pop	{r4, r5, r7, pc}

0800964e <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 f9d1 	bl	8009a06 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8009664:	bf00      	nop
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_ptrERA16_KS5_>:
      _S_ptr(const _Type& __t) noexcept
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <_ZSt12__niter_baseIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 80096a0:	1d3b      	adds	r3, r7, #4
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f9bd 	bl	8009a22 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80096a8:	4603      	mov	r3, r0
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <_ZSt12__niter_baseISt20back_insert_iteratorISt6vectorIhSaIhEEEET_S5_>:
    __niter_base(_Iterator __it)
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
    { return __it; }
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <_ZSt14__copy_move_a1ILb0EPKcSt20back_insert_iteratorISt6vectorIhSaIhEEEET1_T0_S8_S7_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	68b9      	ldr	r1, [r7, #8]
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f9ac 	bl	8009a38 <_ZSt14__copy_move_a2ILb0EPKcSt20back_insert_iteratorISt6vectorIhSaIhEEEET1_T0_S8_S7_>
 80096e0:	4603      	mov	r3, r0
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <_ZSt12__niter_wrapISt20back_insert_iteratorISt6vectorIhSaIhEEEET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	6039      	str	r1, [r7, #0]
    { return __res; }
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	4618      	mov	r0, r3
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_ptrERA8_KS5_>:
      _S_ptr(const _Type& __t) noexcept
 8009702:	b480      	push	{r7}
 8009704:	b083      	sub	sp, #12
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009722:	2200      	movs	r2, #0
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f9a2 	bl	8009a70 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 800972c:	4603      	mov	r3, r0
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8009736:	b480      	push	{r7}
 8009738:	b083      	sub	sp, #12
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJhEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800974c:	b590      	push	{r4, r7, lr}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7ff fd5b 	bl	8009214 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800975e:	4603      	mov	r3, r0
 8009760:	781c      	ldrb	r4, [r3, #0]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	4619      	mov	r1, r3
 8009766:	2001      	movs	r0, #1
 8009768:	f7fe fd1c 	bl	80081a4 <_ZnwjPv>
 800976c:	4603      	mov	r3, r0
 800976e:	4622      	mov	r2, r4
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	bf00      	nop
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	bd90      	pop	{r4, r7, pc}

0800977a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800977a:	b590      	push	{r4, r7, lr}
 800977c:	b087      	sub	sp, #28
 800977e:	af00      	add	r7, sp, #0
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 f993 	bl	8009ab2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800978c:	4604      	mov	r4, r0
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7ff f993 	bl	8008aba <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8009794:	4603      	mov	r3, r0
 8009796:	1ae2      	subs	r2, r4, r3
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	429a      	cmp	r2, r3
 800979c:	bf34      	ite	cc
 800979e:	2301      	movcc	r3, #1
 80097a0:	2300      	movcs	r3, #0
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f00c fa27 	bl	8015bfc <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f7ff f983 	bl	8008aba <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80097b4:	4604      	mov	r4, r0
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f7ff f97f 	bl	8008aba <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80097bc:	4603      	mov	r3, r0
 80097be:	613b      	str	r3, [r7, #16]
 80097c0:	f107 0208 	add.w	r2, r7, #8
 80097c4:	f107 0310 	add.w	r3, r7, #16
 80097c8:	4611      	mov	r1, r2
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 f982 	bl	8009ad4 <_ZSt3maxIjERKT_S2_S2_>
 80097d0:	4603      	mov	r3, r0
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4423      	add	r3, r4
 80097d6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f7ff f96e 	bl	8008aba <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80097de:	4602      	mov	r2, r0
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d306      	bcc.n	80097f4 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f963 	bl	8009ab2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80097ec:	4602      	mov	r2, r0
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d904      	bls.n	80097fe <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f95c 	bl	8009ab2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80097fa:	4603      	mov	r3, r0
 80097fc:	e000      	b.n	8009800 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 80097fe:	697b      	ldr	r3, [r7, #20]
      }
 8009800:	4618      	mov	r0, r3
 8009802:	371c      	adds	r7, #28
 8009804:	46bd      	mov	sp, r7
 8009806:	bd90      	pop	{r4, r7, pc}

08009808 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009808:	b590      	push	{r4, r7, lr}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff fbdb 	bl	8008fce <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8009818:	4603      	mov	r3, r0
 800981a:	681c      	ldr	r4, [r3, #0]
 800981c:	6838      	ldr	r0, [r7, #0]
 800981e:	f7ff fbd6 	bl	8008fce <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8009822:	4603      	mov	r3, r0
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1ae3      	subs	r3, r4, r3
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	bd90      	pop	{r4, r7, pc}

08009830 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8009830:	b590      	push	{r4, r7, lr}
 8009832:	b087      	sub	sp, #28
 8009834:	af02      	add	r7, sp, #8
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
 800983c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800983e:	f88d 4000 	strb.w	r4, [sp]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	68b9      	ldr	r1, [r7, #8]
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f000 f957 	bl	8009afc <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 800984e:	4603      	mov	r3, r0
      }
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	bd90      	pop	{r4, r7, pc}

08009858 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009858:	b590      	push	{r4, r7, lr}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 f95a 	bl	8009b20 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800986c:	4604      	mov	r4, r0
 800986e:	68b8      	ldr	r0, [r7, #8]
 8009870:	f000 f956 	bl	8009b20 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8009874:	4601      	mov	r1, r0
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	4620      	mov	r0, r4
 800987c:	f000 f95f 	bl	8009b3e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8009880:	4603      	mov	r3, r0
    }
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	bd90      	pop	{r4, r7, pc}

0800988a <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800988a:	b580      	push	{r7, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f964 	bl	8009b60 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8009898:	4603      	mov	r3, r0
      }
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80098a2:	b480      	push	{r7}
 80098a4:	b083      	sub	sp, #12
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d201      	bcs.n	80098bc <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	e000      	b.n	80098be <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80098bc:	687b      	ldr	r3, [r7, #4]
    }
 80098be:	4618      	mov	r0, r3
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80098ca:	b480      	push	{r7}
 80098cc:	b083      	sub	sp, #12
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
      constexpr bool __can_fill
 80098ec:	2301      	movs	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f94b 	bl	8009b8e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 80098f8:	4603      	mov	r3, r0
    }
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEbT_>:
	operator()(_Iterator __it)
 8009902:	b580      	push	{r7, lr}
 8009904:	b082      	sub	sp, #8
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 800990c:	463b      	mov	r3, r7
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff fa1d 	bl	8008d4e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>
 8009914:	4603      	mov	r3, r0
 8009916:	781a      	ldrb	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	bf0c      	ite	eq
 8009922:	2301      	moveq	r3, #1
 8009924:	2300      	movne	r3, #0
 8009926:	b2db      	uxtb	r3, r3
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800993e:	68b8      	ldr	r0, [r7, #8]
 8009940:	f000 f944 	bl	8009bcc <_ZN9__gnu_cxx17__is_null_pointerINS_17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEbT_>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00b      	beq.n	8009962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_St20forward_iterator_tag+0x32>
 800994a:	1d3a      	adds	r2, r7, #4
 800994c:	f107 0308 	add.w	r3, r7, #8
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff f90f 	bl	8008b76 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_St20forward_iterator_tag+0x32>
 800995e:	2301      	movs	r3, #1
 8009960:	e000      	b.n	8009964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_St20forward_iterator_tag+0x34>
 8009962:	2300      	movs	r3, #0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_St20forward_iterator_tag+0x3e>
	  std::__throw_logic_error(__N("basic_string::"
 8009968:	4817      	ldr	r0, [pc, #92]	; (80099c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_St20forward_iterator_tag+0x98>)
 800996a:	f00c f944 	bl	8015bf6 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	68b8      	ldr	r0, [r7, #8]
 8009972:	f000 f936 	bl	8009be2 <_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_>
 8009976:	4603      	mov	r3, r0
 8009978:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b0f      	cmp	r3, #15
 800997e:	d910      	bls.n	80099a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_SD_St20forward_iterator_tag+0x72>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8009980:	f107 0314 	add.w	r3, r7, #20
 8009984:	2200      	movs	r2, #0
 8009986:	4619      	mov	r1, r3
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f00c f951 	bl	8015c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800998e:	4603      	mov	r3, r0
 8009990:	4619      	mov	r1, r3
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f00c f93e 	bl	8015c14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	4619      	mov	r1, r3
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f00c f93f 	bl	8015c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f00c f938 	bl	8015c18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80099a8:	4603      	mov	r3, r0
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	68b9      	ldr	r1, [r7, #8]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 f92a 	bl	8009c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvPcT_SE_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4619      	mov	r1, r3
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f00c f933 	bl	8015c24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80099be:	bf00      	nop
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	0801b0e4 	.word	0x0801b0e4

080099cc <_ZSt12__niter_baseIPKhET_S2_>:
    __niter_base(_Iterator __it)
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <_ZSt12__equal_aux1IPKhS1_EbT_S2_T0_>:
    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b086      	sub	sp, #24
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	607a      	str	r2, [r7, #4]
      const bool __simple = ((__is_integer<_ValueType1>::__value
 80099ee:	2301      	movs	r3, #1
 80099f0:	75fb      	strb	r3, [r7, #23]
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 f932 	bl	8009c60 <_ZNSt7__equalILb1EE5equalIhEEbPKT_S4_S4_>
 80099fc:	4603      	mov	r3, r0
    }
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	60f8      	str	r0, [r7, #12]
 8009a0e:	60b9      	str	r1, [r7, #8]
 8009a10:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	68b8      	ldr	r0, [r7, #8]
 8009a16:	f00c f8d3 	bl	8015bc0 <_ZdlPvj>
      }
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <_ZSt14__copy_move_a2ILb0EPKcSt20back_insert_iteratorISt6vectorIhSaIhEEEET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	68b9      	ldr	r1, [r7, #8]
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 f927 	bl	8009c9c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcSt20back_insert_iteratorISt6vectorIhSaIhEEEEET0_T_SB_SA_>
 8009a4e:	4603      	mov	r3, r0
    }
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009a60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f7ff ffeb 	bl	8009a58 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8009a82:	4602      	mov	r2, r0
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	4293      	cmp	r3, r2
 8009a88:	bf8c      	ite	hi
 8009a8a:	2301      	movhi	r3, #1
 8009a8c:	2300      	movls	r3, #0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	bf14      	ite	ne
 8009a94:	2301      	movne	r3, #1
 8009a96:	2300      	moveq	r3, #0
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8009a9e:	f00c f8a7 	bl	8015bf0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009aa2:	68b8      	ldr	r0, [r7, #8]
 8009aa4:	f00c f88e 	bl	8015bc4 <_Znwj>
 8009aa8:	4603      	mov	r3, r0
      }
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 f918 	bl	8009cf2 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff fc91 	bl	80093ec <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8009aca:	4603      	mov	r3, r0
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d201      	bcs.n	8009aee <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	e000      	b.n	8009af0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8009aee:	687b      	ldr	r3, [r7, #4]
    }
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 f8f9 	bl	8009d08 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8009b16:	4603      	mov	r3, r0
      }
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8009b28:	f107 030c 	add.w	r3, r7, #12
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 f907 	bl	8009d42 <_ZNSt13move_iteratorIPhEC1ES0_>
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	607a      	str	r2, [r7, #4]
 8009b4a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	68b9      	ldr	r1, [r7, #8]
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 f908 	bl	8009d66 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8009b56:	4603      	mov	r3, r0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff ff75 	bl	8009a58 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	4618      	mov	r0, r3
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <_ZSt11__addressofIhEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b084      	sub	sp, #16
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	6039      	str	r1, [r7, #0]
	  if (__n > 0)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d011      	beq.n	8009bc2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x34>
		= std::__addressof(*__first);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff ffea 	bl	8009b78 <_ZSt11__addressofIhEPT_RS0_>
 8009ba4:	60f8      	str	r0, [r7, #12]
	      std::_Construct(__val);
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 f8ef 	bl	8009d8a <_ZSt10_ConstructIhJEEvPT_DpOT0_>
	      ++__first;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	607b      	str	r3, [r7, #4]
	      __first = std::fill_n(__first, __n - 1, *__val);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f8f5 	bl	8009daa <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8009bc0:	6078      	str	r0, [r7, #4]
	  return __first;
 8009bc2:	687b      	ldr	r3, [r7, #4]
	}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <_ZN9__gnu_cxx17__is_null_pointerINS_17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEbT_>:
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
    { return false; }
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8009be2:	b590      	push	{r4, r7, lr}
 8009be4:	b083      	sub	sp, #12
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
 8009bec:	1d3b      	adds	r3, r7, #4
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff fc5c 	bl	80094ac <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return std::__distance(__first, __last,
 8009bf4:	4622      	mov	r2, r4
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f8f1 	bl	8009de0 <_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag>
 8009bfe:	4603      	mov	r3, r0
    }
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd90      	pop	{r4, r7, pc}

08009c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvPcT_SE_>:
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8009c14:	e015      	b.n	8009c42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvPcT_SE_+0x3a>
	    traits_type::assign(*__p, *__k1); // These types are off.
 8009c16:	f107 0308 	add.w	r3, r7, #8
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff f897 	bl	8008d4e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>
 8009c20:	4603      	mov	r3, r0
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	75fb      	strb	r3, [r7, #23]
 8009c26:	f107 0317 	add.w	r3, r7, #23
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7fe faaa 	bl	8008186 <_ZNSt11char_traitsIcE6assignERcRKc>
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8009c32:	f107 0308 	add.w	r3, r7, #8
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff f879 	bl	8008d2e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	1d3a      	adds	r2, r7, #4
 8009c44:	f107 0308 	add.w	r3, r7, #8
 8009c48:	4611      	mov	r1, r2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe ff93 	bl	8008b76 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1df      	bne.n	8009c16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvPcT_SE_+0xe>
	}
 8009c56:	bf00      	nop
 8009c58:	bf00      	nop
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <_ZNSt7__equalILb1EE5equalIhEEbPKT_S4_S4_>:
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
	  if (const size_t __len = (__last1 - __first1))
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00b      	beq.n	8009c92 <_ZNSt7__equalILb1EE5equalIhEEbPKT_S4_S4_+0x32>
	    return !std::__memcmp(__first1, __first2, __len);
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 f8c1 	bl	8009e06 <_ZSt8__memcmpIhhEiPKT_PKT0_j>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bf0c      	ite	eq
 8009c8a:	2301      	moveq	r3, #1
 8009c8c:	2300      	movne	r3, #0
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	e000      	b.n	8009c94 <_ZNSt7__equalILb1EE5equalIhEEbPKT_S4_S4_+0x34>
	  return true;
 8009c92:	2301      	movs	r3, #1
	}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcSt20back_insert_iteratorISt6vectorIhSaIhEEEEET0_T_SB_SA_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	617b      	str	r3, [r7, #20]
 8009cb0:	e017      	b.n	8009ce2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcSt20back_insert_iteratorISt6vectorIhSaIhEEEEET0_T_SB_SA_+0x46>
	      *__result = *__first;
 8009cb2:	1d3b      	adds	r3, r7, #4
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 f8b6 	bl	8009e26 <_ZNSt20back_insert_iteratorISt6vectorIhSaIhEEEdeEv>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	74fb      	strb	r3, [r7, #19]
 8009cc2:	f107 0313 	add.w	r3, r7, #19
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4610      	mov	r0, r2
 8009cca:	f000 f8b7 	bl	8009e3c <_ZNSt20back_insert_iteratorISt6vectorIhSaIhEEEaSEOh>
	      ++__first;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8009cd4:	1d3b      	adds	r3, r7, #4
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 f8c4 	bl	8009e64 <_ZNSt20back_insert_iteratorISt6vectorIhSaIhEEEppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	dce4      	bgt.n	8009cb2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcSt20back_insert_iteratorISt6vectorIhSaIhEEEEET0_T_SB_SA_+0x16>
	  return __result;
 8009ce8:	687b      	ldr	r3, [r7, #4]
	}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009d08:	b5b0      	push	{r4, r5, r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f8af 	bl	8009e7a <_ZSt12__niter_baseIPhET_S1_>
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	68b8      	ldr	r0, [r7, #8]
 8009d20:	f000 f8ab 	bl	8009e7a <_ZSt12__niter_baseIPhET_S1_>
 8009d24:	4605      	mov	r5, r0
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f8a7 	bl	8009e7a <_ZSt12__niter_baseIPhET_S1_>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	4629      	mov	r1, r5
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 f8ac 	bl	8009e90 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8009d38:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bdb0      	pop	{r4, r5, r7, pc}

08009d42 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b082      	sub	sp, #8
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8009d4c:	463b      	mov	r3, r7
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f8b9 	bl	8009ec6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8009d54:	4603      	mov	r3, r0
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b086      	sub	sp, #24
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	60f8      	str	r0, [r7, #12]
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009d72:	2301      	movs	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	68b9      	ldr	r1, [r7, #8]
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 f8ae 	bl	8009edc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8009d80:	4603      	mov	r3, r0
    }
 8009d82:	4618      	mov	r0, r3
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <_ZSt10_ConstructIhJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4619      	mov	r1, r3
 8009d96:	2001      	movs	r0, #1
 8009d98:	f7fe fa04 	bl	80081a4 <_ZnwjPv>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]
    }
 8009da2:	bf00      	nop
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8009daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8009db6:	68fc      	ldr	r4, [r7, #12]
 8009db8:	68b8      	ldr	r0, [r7, #8]
 8009dba:	f7fe f9d9 	bl	8008170 <_ZSt17__size_to_integerj>
 8009dbe:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8009dc0:	f107 030c 	add.w	r3, r7, #12
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 f899 	bl	8009efc <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8009dca:	4633      	mov	r3, r6
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f000 f89e 	bl	8009f12 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 8009dd6:	4603      	mov	r3, r0
    }
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009de0 <_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8009dec:	f107 020c 	add.w	r2, r7, #12
 8009df0:	f107 0308 	add.w	r3, r7, #8
 8009df4:	4611      	mov	r1, r2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff fd06 	bl	8009808 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8009dfc:	4603      	mov	r3, r0
    }
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <_ZSt8__memcmpIhhEiPKT_PKT0_j>:
    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	607a      	str	r2, [r7, #4]
	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	68b9      	ldr	r1, [r7, #8]
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f00d ff6a 	bl	8017cf0 <memcmp>
 8009e1c:	4603      	mov	r3, r0
    }
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <_ZNSt20back_insert_iteratorISt6vectorIhSaIhEEEdeEv>:
      operator*()
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
      { return *this; }
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <_ZNSt20back_insert_iteratorISt6vectorIhSaIhEEEaSEOh>:
      operator=(typename _Container::value_type&& __value)
 8009e3c:	b590      	push	{r4, r7, lr}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
	container->push_back(std::move(__value));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681c      	ldr	r4, [r3, #0]
 8009e4a:	6838      	ldr	r0, [r7, #0]
 8009e4c:	f7fe fff1 	bl	8008e32 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8009e50:	4603      	mov	r3, r0
 8009e52:	4619      	mov	r1, r3
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7fe fe10 	bl	8008a7a <_ZNSt6vectorIhSaIhEE9push_backEOh>
	return *this;
 8009e5a:	687b      	ldr	r3, [r7, #4]
      }
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd90      	pop	{r4, r7, pc}

08009e64 <_ZNSt20back_insert_iteratorISt6vectorIhSaIhEEEppEv>:
      operator++()
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
      { return *this; }
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4618      	mov	r0, r3
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dd05      	ble.n	8009eb8 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	68f9      	ldr	r1, [r7, #12]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f00d ff2c 	bl	8017d10 <memmove>
      return __result + __count;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	4413      	add	r3, r2
    }
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 f837 	bl	8009f60 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8009f04:	bf00      	nop
 8009f06:	4618      	mov	r0, r3
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60f8      	str	r0, [r7, #12]
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	607a      	str	r2, [r7, #4]
 8009f1e:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	e00a      	b.n	8009f40 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	4413      	add	r3, r2
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	4619      	mov	r1, r3
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 f82b 	bl	8009f90 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4413      	add	r3, r2
    }
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 f81e 	bl	8009fae <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009f72:	4604      	mov	r4, r0
 8009f74:	68b8      	ldr	r0, [r7, #8]
 8009f76:	f000 f81a 	bl	8009fae <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	4619      	mov	r1, r3
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 f825 	bl	8009fd0 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8009f86:	4603      	mov	r3, r0
    }
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd90      	pop	{r4, r7, pc}

08009f90 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	68b9      	ldr	r1, [r7, #8]
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 f838 	bl	800a016 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8009fb6:	1d3b      	adds	r3, r7, #4
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 f846 	bl	800a04a <_ZNKSt13move_iteratorIPhE4baseEv>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 f84e 	bl	800a062 <_ZSt12__miter_baseIPhET_S1_>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009fd0:	b5b0      	push	{r4, r5, r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f7ff ff4c 	bl	8009e7a <_ZSt12__niter_baseIPhET_S1_>
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	68b8      	ldr	r0, [r7, #8]
 8009fe6:	f7ff ff48 	bl	8009e7a <_ZSt12__niter_baseIPhET_S1_>
 8009fea:	4605      	mov	r5, r0
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff ff43 	bl	8009e7a <_ZSt12__niter_baseIPhET_S1_>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 f83c 	bl	800a078 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 800a000:	4602      	mov	r2, r0
 800a002:	1d3b      	adds	r3, r7, #4
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff ff9e 	bl	8009f48 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 800a00c:	4603      	mov	r3, r0
    }
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bdb0      	pop	{r4, r5, r7, pc}

0800a016 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 800a016:	b580      	push	{r7, lr}
 800a018:	b086      	sub	sp, #24
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	60f8      	str	r0, [r7, #12]
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	613b      	str	r3, [r7, #16]
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d005      	beq.n	800a042 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	4619      	mov	r1, r3
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f00d fe81 	bl	8017d44 <memset>
    }
 800a042:	bf00      	nop
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4618      	mov	r0, r3
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 800a062:	b480      	push	{r7}
 800a064:	b083      	sub	sp, #12
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 f805 	bl	800a098 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 800a08e:	4603      	mov	r3, r0
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	68b9      	ldr	r1, [r7, #8]
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 f805 	bl	800a0b8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 800a0ae:	4603      	mov	r3, r0
    }
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d005      	beq.n	800a0de <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	68f9      	ldr	r1, [r7, #12]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f00d fe19 	bl	8017d10 <memmove>
	  return __result + _Num;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	4413      	add	r3, r2
	}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3718      	adds	r7, #24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <_ZN14CircularBufferC1Ev>:
// CircularBuffer.cpp
#include "CircularBuffer.h"

CircularBuffer::CircularBuffer() : head(0), tail(0) {}
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4618      	mov	r0, r3
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <_ZN15EthernetManagerD1Ev>:
uint8_t EthernetManager::DHCP_SOCKET = 1;
uint8_t EthernetManager::DNS_SOCKET = 1;

EthernetManager* EthernetManager::instance = nullptr;

EthernetManager::~EthernetManager() {
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]

}
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4618      	mov	r0, r3
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <_ZN15EthernetManagerC1Ev>:

EthernetManager::EthernetManager() {
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	instance = this;
 800a130:	4a04      	ldr	r2, [pc, #16]	; (800a144 <_ZN15EthernetManagerC1Ev+0x1c>)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6013      	str	r3, [r2, #0]
}
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	200012b8 	.word	0x200012b8

0800a148 <_ZN15EthernetManager4initEP6ConfigP5Utils>:

void EthernetManager::init( Config *conf, Utils *utilClass) {
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
    utils = utilClass;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	601a      	str	r2, [r3, #0]
    config = conf;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	605a      	str	r2, [r3, #4]
    utils->playSound();
 800a160:	f004 fb72 	bl	800e848 <_ZN5Utils9playSoundEv>
    utils->print("Initializing Internet \r\n");
 800a164:	4803      	ldr	r0, [pc, #12]	; (800a174 <_ZN15EthernetManager4initEP6ConfigP5Utils+0x2c>)
 800a166:	f004 fb3f 	bl	800e7e8 <_ZN5Utils5printEPKcz>

}
 800a16a:	bf00      	nop
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	0801b110 	.word	0x0801b110

0800a178 <_ZN15EthernetManager7connectEv>:

bool EthernetManager::connect() {
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]

    resetAssert();
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f825 	bl	800a1d0 <_ZN15EthernetManager11resetAssertEv>
    HAL_Delay(100); // Delay for the reset
 800a186:	2064      	movs	r0, #100	; 0x64
 800a188:	f005 f802 	bl	800f190 <HAL_Delay>
    resetDeassert();
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f82f 	bl	800a1f0 <_ZN15EthernetManager13resetDeassertEv>
    HAL_Delay(300);
 800a192:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a196:	f004 fffb 	bl	800f190 <HAL_Delay>
    if (!initWIZCHIP()) {
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f8ae 	bl	800a2fc <_ZN15EthernetManager11initWIZCHIPEv>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f083 0301 	eor.w	r3, r3, #1
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <_ZN15EthernetManager7connectEv+0x38>
    	return false;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	e00b      	b.n	800a1c8 <_ZN15EthernetManager7connectEv+0x50>
    }

    if (! configureNetwork()) {
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f8fd 	bl	800a3b0 <_ZN15EthernetManager16configureNetworkEv>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f083 0301 	eor.w	r3, r3, #1
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <_ZN15EthernetManager7connectEv+0x4e>
    	return false;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e000      	b.n	800a1c8 <_ZN15EthernetManager7connectEv+0x50>
    }

     return true;
 800a1c6:	2301      	movs	r3, #1

}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <_ZN15EthernetManager11resetAssertEv>:

}



void EthernetManager::resetAssert() {
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]

    HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_RESET);
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2120      	movs	r1, #32
 800a1dc:	4803      	ldr	r0, [pc, #12]	; (800a1ec <_ZN15EthernetManager11resetAssertEv+0x1c>)
 800a1de:	f006 f899 	bl	8010314 <HAL_GPIO_WritePin>
}
 800a1e2:	bf00      	nop
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	40020800 	.word	0x40020800

0800a1f0 <_ZN15EthernetManager13resetDeassertEv>:

void EthernetManager::resetDeassert() {
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]

    HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_SET);
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	2120      	movs	r1, #32
 800a1fc:	4803      	ldr	r0, [pc, #12]	; (800a20c <_ZN15EthernetManager13resetDeassertEv+0x1c>)
 800a1fe:	f006 f889 	bl	8010314 <HAL_GPIO_WritePin>
}
 800a202:	bf00      	nop
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	40020800 	.word	0x40020800

0800a210 <_ZN15EthernetManager12W5500_SelectEv>:


void EthernetManager::W5500_Select() {
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 800a214:	2200      	movs	r2, #0
 800a216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a21a:	4802      	ldr	r0, [pc, #8]	; (800a224 <_ZN15EthernetManager12W5500_SelectEv+0x14>)
 800a21c:	f006 f87a 	bl	8010314 <HAL_GPIO_WritePin>
}
 800a220:	bf00      	nop
 800a222:	bd80      	pop	{r7, pc}
 800a224:	40020400 	.word	0x40020400

0800a228 <_ZN15EthernetManager14W5500_UnselectEv>:


void EthernetManager::W5500_Unselect() {
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 800a22c:	2201      	movs	r2, #1
 800a22e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a232:	4802      	ldr	r0, [pc, #8]	; (800a23c <_ZN15EthernetManager14W5500_UnselectEv+0x14>)
 800a234:	f006 f86e 	bl	8010314 <HAL_GPIO_WritePin>
}
 800a238:	bf00      	nop
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	40020400 	.word	0x40020400

0800a240 <_ZN15EthernetManager14W5500_ReadBuffEPht>:


void EthernetManager::W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	460b      	mov	r3, r1
 800a24a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 800a24c:	887a      	ldrh	r2, [r7, #2]
 800a24e:	f04f 33ff 	mov.w	r3, #4294967295
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	4803      	ldr	r0, [pc, #12]	; (800a264 <_ZN15EthernetManager14W5500_ReadBuffEPht+0x24>)
 800a256:	f009 fbdc 	bl	8013a12 <HAL_SPI_Receive>
}
 800a25a:	bf00      	nop
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	200016c4 	.word	0x200016c4

0800a268 <_ZN15EthernetManager15W5500_WriteBuffEPht>:

void EthernetManager::W5500_WriteBuff( uint8_t* buff, uint16_t len) {
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 800a274:	887a      	ldrh	r2, [r7, #2]
 800a276:	f04f 33ff 	mov.w	r3, #4294967295
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	4803      	ldr	r0, [pc, #12]	; (800a28c <_ZN15EthernetManager15W5500_WriteBuffEPht+0x24>)
 800a27e:	f009 fa85 	bl	801378c <HAL_SPI_Transmit>
}
 800a282:	bf00      	nop
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	200016c4 	.word	0x200016c4

0800a290 <_ZN15EthernetManager14W5500_ReadByteEv>:

uint8_t EthernetManager::W5500_ReadByte() {
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, 1);
 800a296:	1dfb      	adds	r3, r7, #7
 800a298:	2101      	movs	r1, #1
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff ffd0 	bl	800a240 <_ZN15EthernetManager14W5500_ReadBuffEPht>
    return byte;
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <_ZN15EthernetManager15W5500_WriteByteEh>:

void EthernetManager::W5500_WriteByte(uint8_t byte) {
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, 1);
 800a2b4:	1dfb      	adds	r3, r7, #7
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff ffd5 	bl	800a268 <_ZN15EthernetManager15W5500_WriteBuffEPht>
}
 800a2be:	bf00      	nop
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <_ZN15EthernetManager19Callback_IPAssignedEv>:

void EthernetManager::Callback_IPAssigned() {
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	af00      	add	r7, sp, #0
    	if (instance) {
 800a2cc:	4b06      	ldr	r3, [pc, #24]	; (800a2e8 <_ZN15EthernetManager19Callback_IPAssignedEv+0x20>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d006      	beq.n	800a2e2 <_ZN15EthernetManager19Callback_IPAssignedEv+0x1a>
    		instance->config->setIpAssigned(true);
 800a2d4:	4b04      	ldr	r3, [pc, #16]	; (800a2e8 <_ZN15EthernetManager19Callback_IPAssignedEv+0x20>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	2101      	movs	r1, #1
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f002 f9c6 	bl	800c66e <_ZN6Config13setIpAssignedEb>
    	}
}
 800a2e2:	bf00      	nop
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	200012b8 	.word	0x200012b8

0800a2ec <_ZN15EthernetManager19Callback_IPConflictEv>:

void EthernetManager::Callback_IPConflict() {
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
}
 800a2f0:	bf00      	nop
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
	...

0800a2fc <_ZN15EthernetManager11initWIZCHIPEv>:


bool EthernetManager::initWIZCHIP() {
 800a2fc:	b590      	push	{r4, r7, lr}
 800a2fe:	b089      	sub	sp, #36	; 0x24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
    utils->print("\r\nWIZCHIP Initialization called!\r\n");
 800a304:	4822      	ldr	r0, [pc, #136]	; (800a390 <_ZN15EthernetManager11initWIZCHIPEv+0x94>)
 800a306:	f004 fa6f 	bl	800e7e8 <_ZN5Utils5printEPKcz>
    W5500_Unselect();
 800a30a:	f7ff ff8d 	bl	800a228 <_ZN15EthernetManager14W5500_UnselectEv>
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800a30e:	4921      	ldr	r1, [pc, #132]	; (800a394 <_ZN15EthernetManager11initWIZCHIPEv+0x98>)
 800a310:	4821      	ldr	r0, [pc, #132]	; (800a398 <_ZN15EthernetManager11initWIZCHIPEv+0x9c>)
 800a312:	f7f9 fca9 	bl	8003c68 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800a316:	4921      	ldr	r1, [pc, #132]	; (800a39c <_ZN15EthernetManager11initWIZCHIPEv+0xa0>)
 800a318:	4821      	ldr	r0, [pc, #132]	; (800a3a0 <_ZN15EthernetManager11initWIZCHIPEv+0xa4>)
 800a31a:	f7f9 fccb 	bl	8003cb4 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800a31e:	4921      	ldr	r1, [pc, #132]	; (800a3a4 <_ZN15EthernetManager11initWIZCHIPEv+0xa8>)
 800a320:	4821      	ldr	r0, [pc, #132]	; (800a3a8 <_ZN15EthernetManager11initWIZCHIPEv+0xac>)
 800a322:	f7f9 fcf3 	bl	8003d0c <reg_wizchip_spiburst_cbfunc>

    uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 800a326:	4b21      	ldr	r3, [pc, #132]	; (800a3ac <_ZN15EthernetManager11initWIZCHIPEv+0xb0>)
 800a328:	f107 0410 	add.w	r4, r7, #16
 800a32c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a32e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (ctlwizchip(CW_INIT_WIZCHIP, (void*)memsize) == -1) {
 800a332:	f107 0310 	add.w	r3, r7, #16
 800a336:	4619      	mov	r1, r3
 800a338:	2001      	movs	r0, #1
 800a33a:	f7f9 fd13 	bl	8003d64 <ctlwizchip>
 800a33e:	4603      	mov	r3, r0
 800a340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a344:	bf0c      	ite	eq
 800a346:	2301      	moveq	r3, #1
 800a348:	2300      	movne	r3, #0
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <_ZN15EthernetManager11initWIZCHIPEv+0x58>
        return false;
 800a350:	2300      	movs	r3, #0
 800a352:	e019      	b.n	800a388 <_ZN15EthernetManager11initWIZCHIPEv+0x8c>
    }
    uint8_t tmp;
  //  uint8_t attempt = 0;
    do {
        if (ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1) {
 800a354:	f107 030f 	add.w	r3, r7, #15
 800a358:	4619      	mov	r1, r3
 800a35a:	200f      	movs	r0, #15
 800a35c:	f7f9 fd02 	bl	8003d64 <ctlwizchip>
 800a360:	4603      	mov	r3, r0
 800a362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a366:	bf0c      	ite	eq
 800a368:	2301      	moveq	r3, #1
 800a36a:	2300      	movne	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <_ZN15EthernetManager11initWIZCHIPEv+0x7a>
         //  Print("UNKNOWN PHY LINK STATUS.\r\n");
        	return false;
 800a372:	2300      	movs	r3, #0
 800a374:	e008      	b.n	800a388 <_ZN15EthernetManager11initWIZCHIPEv+0x8c>

        }
    }  while (tmp == PHY_LINK_OFF );
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0eb      	beq.n	800a354 <_ZN15EthernetManager11initWIZCHIPEv+0x58>

    if (tmp == PHY_LINK_OFF ) return false;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <_ZN15EthernetManager11initWIZCHIPEv+0x8a>
 800a382:	2300      	movs	r3, #0
 800a384:	e000      	b.n	800a388 <_ZN15EthernetManager11initWIZCHIPEv+0x8c>
    else return true;
 800a386:	2301      	movs	r3, #1
    utils->print("WIZCHIP Initialized successfully.\r\n");
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3724      	adds	r7, #36	; 0x24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd90      	pop	{r4, r7, pc}
 800a390:	0801b12c 	.word	0x0801b12c
 800a394:	0800a229 	.word	0x0800a229
 800a398:	0800a211 	.word	0x0800a211
 800a39c:	0800a2ab 	.word	0x0800a2ab
 800a3a0:	0800a291 	.word	0x0800a291
 800a3a4:	0800a269 	.word	0x0800a269
 800a3a8:	0800a241 	.word	0x0800a241
 800a3ac:	0801b150 	.word	0x0801b150

0800a3b0 <_ZN15EthernetManager16configureNetworkEv>:


bool EthernetManager::configureNetwork() {
 800a3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b4:	b0a4      	sub	sp, #144	; 0x90
 800a3b6:	af0e      	add	r7, sp, #56	; 0x38
 800a3b8:	61f8      	str	r0, [r7, #28]
	utils->print("Initializing Netwok Configuration!!! \r\n");
 800a3ba:	48af      	ldr	r0, [pc, #700]	; (800a678 <_ZN15EthernetManager16configureNetworkEv+0x2c8>)
 800a3bc:	f004 fa14 	bl	800e7e8 <_ZN5Utils5printEPKcz>
       uint8_t mac[6];
       getSHAR(mac); // Assuming you have a function getSHAR to get MAC address
 800a3c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a3c4:	2206      	movs	r2, #6
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800a3cc:	f7f8 f9ea 	bl	80027a4 <WIZCHIP_READ_BUF>
       HAL_Delay(300);
 800a3d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a3d4:	f004 fedc 	bl	800f190 <HAL_Delay>

       wiz_NetInfo net_info = {
 800a3d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3dc:	2200      	movs	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	605a      	str	r2, [r3, #4]
 800a3e2:	609a      	str	r2, [r3, #8]
 800a3e4:	60da      	str	r2, [r3, #12]
 800a3e6:	611a      	str	r2, [r3, #16]
 800a3e8:	f8c3 2013 	str.w	r2, [r3, #19]
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 800a3f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
           {0,}, // IP address (will be set by DHCP or static config)
           {0,}, // Gateway (will be set by DHCP or static config)
           {0,}, // Subnet Mask (will be set by DHCP or static config)
           {0,}, // DNS server (will be set by DHCP or static config)
           NETINFO_DHCP // Default to DHCP
       };
 800a3f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 800a3fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
       };
 800a3fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 800a402:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
       };
 800a406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 800a40a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
       };
 800a40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 800a412:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
       };
 800a416:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 800a41a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
       };
 800a41e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

       setSHAR(net_info.mac); // Apply MAC address
 800a422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a426:	2206      	movs	r2, #6
 800a428:	4619      	mov	r1, r3
 800a42a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800a42e:	f7f8 fa19 	bl	8002864 <WIZCHIP_WRITE_BUF>

       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 800a432:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a436:	4618      	mov	r0, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 800a438:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a43c:	461c      	mov	r4, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 800a43e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a442:	461d      	mov	r5, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 800a444:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a448:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800a44c:	f897 1041 	ldrb.w	r1, [r7, #65]	; 0x41
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800a450:	9102      	str	r1, [sp, #8]
 800a452:	9201      	str	r2, [sp, #4]
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	462b      	mov	r3, r5
 800a458:	4622      	mov	r2, r4
 800a45a:	4601      	mov	r1, r0
 800a45c:	4887      	ldr	r0, [pc, #540]	; (800a67c <_ZN15EthernetManager16configureNetworkEv+0x2cc>)
 800a45e:	f004 f9c3 	bl	800e7e8 <_ZN5Utils5printEPKcz>

       if (config->getDHCPEnabled()) {
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	4618      	mov	r0, r3
 800a468:	f001 ff87 	bl	800c37a <_ZNK6Config14getDHCPEnabledEv>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d05d      	beq.n	800a52e <_ZN15EthernetManager16configureNetworkEv+0x17e>
           // DHCP mode
    	   utils->print("DHCP mode has been enabled@ \r\n");
 800a472:	4883      	ldr	r0, [pc, #524]	; (800a680 <_ZN15EthernetManager16configureNetworkEv+0x2d0>)
 800a474:	f004 f9b8 	bl	800e7e8 <_ZN5Utils5printEPKcz>
           DHCP_init(DHCP_SOCKET, dhcp_buffer);
 800a478:	4b82      	ldr	r3, [pc, #520]	; (800a684 <_ZN15EthernetManager16configureNetworkEv+0x2d4>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	4982      	ldr	r1, [pc, #520]	; (800a688 <_ZN15EthernetManager16configureNetworkEv+0x2d8>)
 800a47e:	4618      	mov	r0, r3
 800a480:	f7f7 ffb0 	bl	80023e4 <DHCP_init>
           reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 800a484:	4a81      	ldr	r2, [pc, #516]	; (800a68c <_ZN15EthernetManager16configureNetworkEv+0x2dc>)
 800a486:	4982      	ldr	r1, [pc, #520]	; (800a690 <_ZN15EthernetManager16configureNetworkEv+0x2e0>)
 800a488:	4881      	ldr	r0, [pc, #516]	; (800a690 <_ZN15EthernetManager16configureNetworkEv+0x2e0>)
 800a48a:	f7f6 fdb7 	bl	8000ffc <reg_dhcp_cbfunc>

           uint8_t attempt = 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
           utils->print("Attempting DHCP lease...\r\n");
 800a494:	487f      	ldr	r0, [pc, #508]	; (800a694 <_ZN15EthernetManager16configureNetworkEv+0x2e4>)
 800a496:	f004 f9a7 	bl	800e7e8 <_ZN5Utils5printEPKcz>
           while (!config->getIpAssigned()) {
 800a49a:	e00d      	b.n	800a4b8 <_ZN15EthernetManager16configureNetworkEv+0x108>

        	   DHCP_run();
 800a49c:	f7f7 fdea 	bl	8002074 <DHCP_run>
        	   HAL_Delay(100);
 800a4a0:	2064      	movs	r0, #100	; 0x64
 800a4a2:	f004 fe75 	bl	800f190 <HAL_Delay>
        	   attempt ++;
 800a4a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        	   if(attempt == 10) break;
 800a4b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4b4:	2b0a      	cmp	r3, #10
 800a4b6:	d00b      	beq.n	800a4d0 <_ZN15EthernetManager16configureNetworkEv+0x120>
           while (!config->getIpAssigned()) {
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f001 ff68 	bl	800c392 <_ZNK6Config13getIpAssignedEv>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f083 0301 	eor.w	r3, r3, #1
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e6      	bne.n	800a49c <_ZN15EthernetManager16configureNetworkEv+0xec>
 800a4ce:	e000      	b.n	800a4d2 <_ZN15EthernetManager16configureNetworkEv+0x122>
        	   if(attempt == 10) break;
 800a4d0:	bf00      	nop

           }
           if (!config->getIpAssigned()) return false;
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f001 ff5b 	bl	800c392 <_ZNK6Config13getIpAssignedEv>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	f083 0301 	eor.w	r3, r3, #1
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <_ZN15EthernetManager16configureNetworkEv+0x13c>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	e0c0      	b.n	800a66e <_ZN15EthernetManager16configureNetworkEv+0x2be>
           // Get network configuration from DHCP
           getIPfromDHCP(net_info.ip);
 800a4ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4f0:	3306      	adds	r3, #6
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7f8 f806 	bl	8002504 <getIPfromDHCP>
           getGWfromDHCP(net_info.gw);
 800a4f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4fc:	330e      	adds	r3, #14
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7f8 f820 	bl	8002544 <getGWfromDHCP>
           getSNfromDHCP(net_info.sn);
 800a504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a508:	330a      	adds	r3, #10
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7f8 f83a 	bl	8002584 <getSNfromDHCP>
           getDNSfromDHCP(net_info.dns);
 800a510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a514:	3312      	adds	r3, #18
 800a516:	4618      	mov	r0, r3
 800a518:	f7f8 f854 	bl	80025c4 <getDNSfromDHCP>

           config->setDHCPNetworkConfig(&net_info);
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f001 fe30 	bl	800c18c <_ZN6Config20setDHCPNetworkConfigEP13wiz_NetInfo_t>
 800a52c:	e04b      	b.n	800a5c6 <_ZN15EthernetManager16configureNetworkEv+0x216>
       } else {
    	   config->setIpAssigned(true);
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	2101      	movs	r1, #1
 800a534:	4618      	mov	r0, r3
 800a536:	f002 f89a 	bl	800c66e <_ZN6Config13setIpAssignedEb>
    	   utils->print("STATIC mode has been enabled@ \r\n");
 800a53a:	4857      	ldr	r0, [pc, #348]	; (800a698 <_ZN15EthernetManager16configureNetworkEv+0x2e8>)
 800a53c:	f004 f954 	bl	800e7e8 <_ZN5Utils5printEPKcz>
           // Static IP mode
    	   std::memcpy(net_info.ip, config->getIP().data(), 4); // For std::array
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	4618      	mov	r0, r3
 800a546:	f001 fe98 	bl	800c27a <_ZNK6Config5getIPEv>
 800a54a:	4603      	mov	r3, r0
 800a54c:	647b      	str	r3, [r7, #68]	; 0x44
 800a54e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe fb5a 	bl	8008c0c <_ZNSt5arrayIhLj4EE4dataEv>
 800a558:	4603      	mov	r3, r0
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f8c7 302a 	str.w	r3, [r7, #42]	; 0x2a
    	   std::memcpy(net_info.gw, config->getGateway().data(), 4); // For std::array
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	4618      	mov	r0, r3
 800a566:	f001 fea5 	bl	800c2b4 <_ZNK6Config10getGatewayEv>
 800a56a:	4603      	mov	r3, r0
 800a56c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a56e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fb4a 	bl	8008c0c <_ZNSt5arrayIhLj4EE4dataEv>
 800a578:	4603      	mov	r3, r0
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
    	   std::memcpy(net_info.sn, config->getSubnet().data(), 4); // For std::array
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	4618      	mov	r0, r3
 800a586:	f001 feb2 	bl	800c2ee <_ZNK6Config9getSubnetEv>
 800a58a:	4603      	mov	r3, r0
 800a58c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a58e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe fb3a 	bl	8008c0c <_ZNSt5arrayIhLj4EE4dataEv>
 800a598:	4603      	mov	r3, r0
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
    	   std::memcpy(net_info.dns, config->getDNS().data(), 4); // For std::array
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f001 febf 	bl	800c328 <_ZNK6Config6getDNSEv>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	653b      	str	r3, [r7, #80]	; 0x50
 800a5ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe fb2a 	bl	8008c0c <_ZNSt5arrayIhLj4EE4dataEv>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f8c7 3036 	str.w	r3, [r7, #54]	; 0x36
           net_info.dhcp = NETINFO_STATIC;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
       }
       // Apply network settings to WIZnet chip
       wizchip_setnetinfo(&net_info);
 800a5c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7f9 ff4e 	bl	800446c <wizchip_setnetinfo>

       // Print network information
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800a5d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a5d4:	469c      	mov	ip, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800a5d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a5da:	469e      	mov	lr, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800a5dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a5e0:	4698      	mov	r8, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800a5e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a5e6:	4618      	mov	r0, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800a5e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a5ec:	461c      	mov	r4, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800a5ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a5f2:	461d      	mov	r5, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800a5f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a5f8:	461e      	mov	r6, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800a5fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a5fe:	61bb      	str	r3, [r7, #24]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 800a600:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a604:	617b      	str	r3, [r7, #20]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 800a606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a60a:	613b      	str	r3, [r7, #16]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 800a60c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a610:	60fb      	str	r3, [r7, #12]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 800a612:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a616:	60bb      	str	r3, [r7, #8]
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 800a618:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a61c:	607b      	str	r3, [r7, #4]
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 800a61e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a622:	4619      	mov	r1, r3
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 800a624:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a628:	461a      	mov	r2, r3
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 800a62a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800a62e:	930c      	str	r3, [sp, #48]	; 0x30
 800a630:	920b      	str	r2, [sp, #44]	; 0x2c
 800a632:	910a      	str	r1, [sp, #40]	; 0x28
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	9209      	str	r2, [sp, #36]	; 0x24
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	9208      	str	r2, [sp, #32]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	9207      	str	r2, [sp, #28]
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	9206      	str	r2, [sp, #24]
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	9205      	str	r2, [sp, #20]
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	9304      	str	r3, [sp, #16]
 800a64c:	9603      	str	r6, [sp, #12]
 800a64e:	9502      	str	r5, [sp, #8]
 800a650:	9401      	str	r4, [sp, #4]
 800a652:	9000      	str	r0, [sp, #0]
 800a654:	4643      	mov	r3, r8
 800a656:	4672      	mov	r2, lr
 800a658:	4661      	mov	r1, ip
 800a65a:	4810      	ldr	r0, [pc, #64]	; (800a69c <_ZN15EthernetManager16configureNetworkEv+0x2ec>)
 800a65c:	f004 f8c4 	bl	800e7e8 <_ZN5Utils5printEPKcz>

       // Initializing DNS if necessary
       DNS_init(DNS_SOCKET, dns_buffer);
 800a660:	4b0f      	ldr	r3, [pc, #60]	; (800a6a0 <_ZN15EthernetManager16configureNetworkEv+0x2f0>)
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	490f      	ldr	r1, [pc, #60]	; (800a6a4 <_ZN15EthernetManager16configureNetworkEv+0x2f4>)
 800a666:	4618      	mov	r0, r3
 800a668:	f7f7 ffe6 	bl	8002638 <DNS_init>

       return true;
 800a66c:	2301      	movs	r3, #1
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3758      	adds	r7, #88	; 0x58
 800a672:	46bd      	mov	sp, r7
 800a674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a678:	0801b160 	.word	0x0801b160
 800a67c:	0801b188 	.word	0x0801b188
 800a680:	0801b1b8 	.word	0x0801b1b8
 800a684:	20000054 	.word	0x20000054
 800a688:	200002b8 	.word	0x200002b8
 800a68c:	0800a2ed 	.word	0x0800a2ed
 800a690:	0800a2c9 	.word	0x0800a2c9
 800a694:	0801b1d8 	.word	0x0801b1d8
 800a698:	0801b1f4 	.word	0x0801b1f4
 800a69c:	0801b218 	.word	0x0801b218
 800a6a0:	20000055 	.word	0x20000055
 800a6a4:	20000ab8 	.word	0x20000ab8

0800a6a8 <_ZN9MuxSelectC1Ev>:

#include "MuxSelect.h"


MuxSelect::MuxSelect() {
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
	muxSelect[0] = {GPIOE,  GPIO_PIN_4};
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a35      	ldr	r2, [pc, #212]	; (800a788 <_ZN9MuxSelectC1Ev+0xe0>)
 800a6b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6b8:	e883 0003 	stmia.w	r3, {r0, r1}
	muxSelect[1] = {GPIOE,  GPIO_PIN_5};
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a33      	ldr	r2, [pc, #204]	; (800a78c <_ZN9MuxSelectC1Ev+0xe4>)
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6c6:	e883 0003 	stmia.w	r3, {r0, r1}
	muxSelect[2]  =  {GPIOE,  GPIO_PIN_6};
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a30      	ldr	r2, [pc, #192]	; (800a790 <_ZN9MuxSelectC1Ev+0xe8>)
 800a6ce:	3310      	adds	r3, #16
 800a6d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6d4:	e883 0003 	stmia.w	r3, {r0, r1}


	analogCase[7] = {GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET};
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	analogCase[6] = {GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET};
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	analogCase[5] = {GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET};
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	analogCase[4] = {GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET};
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a1c      	ldr	r2, [pc, #112]	; (800a794 <_ZN9MuxSelectC1Ev+0xec>)
 800a724:	3324      	adds	r3, #36	; 0x24
 800a726:	6812      	ldr	r2, [r2, #0]
 800a728:	4611      	mov	r1, r2
 800a72a:	8019      	strh	r1, [r3, #0]
 800a72c:	3302      	adds	r3, #2
 800a72e:	0c12      	lsrs	r2, r2, #16
 800a730:	701a      	strb	r2, [r3, #0]
	analogCase[3] = {GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET};
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	analogCase[2] = {GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET};
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a12      	ldr	r2, [pc, #72]	; (800a798 <_ZN9MuxSelectC1Ev+0xf0>)
 800a74e:	331e      	adds	r3, #30
 800a750:	8811      	ldrh	r1, [r2, #0]
 800a752:	7892      	ldrb	r2, [r2, #2]
 800a754:	8019      	strh	r1, [r3, #0]
 800a756:	709a      	strb	r2, [r3, #2]
	analogCase[1] = {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET};
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a10      	ldr	r2, [pc, #64]	; (800a79c <_ZN9MuxSelectC1Ev+0xf4>)
 800a75c:	331b      	adds	r3, #27
 800a75e:	8811      	ldrh	r1, [r2, #0]
 800a760:	7892      	ldrb	r2, [r2, #2]
 800a762:	8019      	strh	r1, [r3, #0]
 800a764:	709a      	strb	r2, [r3, #2]
	analogCase[0] = {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET};
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a0d      	ldr	r2, [pc, #52]	; (800a7a0 <_ZN9MuxSelectC1Ev+0xf8>)
 800a76a:	3318      	adds	r3, #24
 800a76c:	6812      	ldr	r2, [r2, #0]
 800a76e:	4611      	mov	r1, r2
 800a770:	8019      	strh	r1, [r3, #0]
 800a772:	3302      	adds	r3, #2
 800a774:	0c12      	lsrs	r2, r2, #16
 800a776:	701a      	strb	r2, [r3, #0]

}
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4618      	mov	r0, r3
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	0801b260 	.word	0x0801b260
 800a78c:	0801b268 	.word	0x0801b268
 800a790:	0801b270 	.word	0x0801b270
 800a794:	0801b278 	.word	0x0801b278
 800a798:	0801b27c 	.word	0x0801b27c
 800a79c:	0801b280 	.word	0x0801b280
 800a7a0:	0801b284 	.word	0x0801b284

0800a7a4 <_ZN9MuxSelect4initEP17ADC_HandleTypeDef>:

void MuxSelect::init(ADC_HandleTypeDef* hadc1Instance){
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
	hadc1 = hadc1Instance;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <_ZN9MuxSelect4readEv>:


float MuxSelect::read() {
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
    float voltage = 0.0f;
 800a7c8:	f04f 0300 	mov.w	r3, #0
 800a7cc:	60bb      	str	r3, [r7, #8]
    uint32_t adcValue;

    HAL_ADC_Start(hadc1);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f004 fd44 	bl	800f260 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(hadc1, 100) == HAL_OK) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7dc:	2164      	movs	r1, #100	; 0x64
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f004 fe43 	bl	800f46a <HAL_ADC_PollForConversion>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	bf0c      	ite	eq
 800a7ea:	2301      	moveq	r3, #1
 800a7ec:	2300      	movne	r3, #0
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d005      	beq.n	800a800 <_ZN9MuxSelect4readEv+0x40>
        adcValue = HAL_ADC_GetValue(hadc1);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f004 ffd1 	bl	800f7a0 <HAL_ADC_GetValue>
 800a7fe:	60f8      	str	r0, [r7, #12]
    }
    HAL_ADC_Stop(hadc1);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a804:	4618      	mov	r0, r3
 800a806:	f004 fdfd 	bl	800f404 <HAL_ADC_Stop>
    voltage = adcValueToVoltage(adcValue, 12, 3.3f);
 800a80a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a82c <_ZN9MuxSelect4readEv+0x6c>
 800a80e:	220c      	movs	r2, #12
 800a810:	68f9      	ldr	r1, [r7, #12]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f80c 	bl	800a830 <_ZN9MuxSelect17adcValueToVoltageEmhf>
 800a818:	ed87 0a02 	vstr	s0, [r7, #8]

    return voltage;
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	ee07 3a90 	vmov	s15, r3
}
 800a822:	eeb0 0a67 	vmov.f32	s0, s15
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	40533333 	.word	0x40533333

0800a830 <_ZN9MuxSelect17adcValueToVoltageEmhf>:

float MuxSelect::adcValueToVoltage(uint32_t adcValue, uint8_t resolution, float referenceVoltage) {
 800a830:	b480      	push	{r7}
 800a832:	b087      	sub	sp, #28
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	4613      	mov	r3, r2
 800a83c:	ed87 0a00 	vstr	s0, [r7]
 800a840:	71fb      	strb	r3, [r7, #7]
    float measuredVoltage = (adcValue * referenceVoltage) / (1 << resolution);
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	ee07 3a90 	vmov	s15, r3
 800a848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a84c:	edd7 7a00 	vldr	s15, [r7]
 800a850:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a854:	79fb      	ldrb	r3, [r7, #7]
 800a856:	2201      	movs	r2, #1
 800a858:	fa02 f303 	lsl.w	r3, r2, r3
 800a85c:	ee07 3a90 	vmov	s15, r3
 800a860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a868:	edc7 7a05 	vstr	s15, [r7, #20]
    float scalingFactor = 10.0; // Adjusted based on the voltage divider calculation
 800a86c:	4b07      	ldr	r3, [pc, #28]	; (800a88c <_ZN9MuxSelect17adcValueToVoltageEmhf+0x5c>)
 800a86e:	613b      	str	r3, [r7, #16]
    return measuredVoltage * scalingFactor;
 800a870:	ed97 7a05 	vldr	s14, [r7, #20]
 800a874:	edd7 7a04 	vldr	s15, [r7, #16]
 800a878:	ee67 7a27 	vmul.f32	s15, s14, s15

}
 800a87c:	eeb0 0a67 	vmov.f32	s0, s15
 800a880:	371c      	adds	r7, #28
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	41200000 	.word	0x41200000

0800a890 <_ZN9MuxSelect12SwitchAnalogEv>:


AnalogReadings MuxSelect::SwitchAnalog() {
 800a890:	b5b0      	push	{r4, r5, r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
    static AnalogReadings readings; // Static to maintain lifetime beyond the function call

    for (int i = 0; i < 8; i++) {
 800a89a:	2300      	movs	r3, #0
 800a89c:	60fb      	str	r3, [r7, #12]
 800a89e:	e03d      	b.n	800a91c <_ZN9MuxSelect12SwitchAnalogEv+0x8c>
        HAL_GPIO_WritePin(muxSelect[0].port, muxSelect[0].pin, analogCase[i].S0);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	889c      	ldrh	r4, [r3, #4]
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	4413      	add	r3, r2
 800a8b2:	440b      	add	r3, r1
 800a8b4:	331a      	adds	r3, #26
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	f005 fd2a 	bl	8010314 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(muxSelect[1].port, muxSelect[1].pin, analogCase[i].S1);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	6898      	ldr	r0, [r3, #8]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	899c      	ldrh	r4, [r3, #12]
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	005b      	lsls	r3, r3, #1
 800a8d0:	4413      	add	r3, r2
 800a8d2:	440b      	add	r3, r1
 800a8d4:	3319      	adds	r3, #25
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	4621      	mov	r1, r4
 800a8dc:	f005 fd1a 	bl	8010314 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(muxSelect[2].port, muxSelect[2].pin, analogCase[i].S2);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	6918      	ldr	r0, [r3, #16]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	8a9c      	ldrh	r4, [r3, #20]
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	4413      	add	r3, r2
 800a8f2:	440b      	add	r3, r1
 800a8f4:	3318      	adds	r3, #24
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	f005 fd0a 	bl	8010314 <HAL_GPIO_WritePin>

        readings.values[i] = read();
 800a900:	6838      	ldr	r0, [r7, #0]
 800a902:	f7ff ff5d 	bl	800a7c0 <_ZN9MuxSelect4readEv>
 800a906:	eef0 7a40 	vmov.f32	s15, s0
 800a90a:	4a0d      	ldr	r2, [pc, #52]	; (800a940 <_ZN9MuxSelect12SwitchAnalogEv+0xb0>)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 8; i++) {
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3301      	adds	r3, #1
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b07      	cmp	r3, #7
 800a920:	ddbe      	ble.n	800a8a0 <_ZN9MuxSelect12SwitchAnalogEv+0x10>
      //  HAL_Delay(100);
    }

    return readings; // Return the struct containing the array
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a06      	ldr	r2, [pc, #24]	; (800a940 <_ZN9MuxSelect12SwitchAnalogEv+0xb0>)
 800a926:	461c      	mov	r4, r3
 800a928:	4615      	mov	r5, r2
 800a92a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a92c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a92e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a932:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bdb0      	pop	{r4, r5, r7, pc}
 800a93e:	bf00      	nop
 800a940:	200012bc 	.word	0x200012bc

0800a944 <_ZN11UARTHandlerC1Ev>:
#include "UARTHandler.h"
#include <cstring> // For memset and memcpy
#include <array>
#include <string>

UARTHandler::UARTHandler() : bufferIndex(0), newDataAvailable(false) {
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	3310      	adds	r3, #16
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff fbcb 	bl	800a0ec <_ZN14CircularBufferC1Ev>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 261c 	strb.w	r2, [r3, #1564]	; 0x61c
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 261d 	strb.w	r2, [r3, #1565]	; 0x61d
    memset(receiveBuffer, 0, sizeof(receiveBuffer));
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800a974:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a978:	2100      	movs	r1, #0
 800a97a:	4618      	mov	r0, r3
 800a97c:	f00d f9e2 	bl	8017d44 <memset>
}
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config>:

void UARTHandler::init(UART_HandleTypeDef* uartHandle, Utils* utilsInstance, Config* configInstance) {
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b086      	sub	sp, #24
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
 800a996:	603b      	str	r3, [r7, #0]
    huart = uartHandle;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	609a      	str	r2, [r3, #8]
    utils = utilsInstance;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	601a      	str	r2, [r3, #0]
    config = configInstance;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	605a      	str	r2, [r3, #4]

    HAL_StatusTypeDef result = HAL_UART_Receive_IT(huart, &rxByte, 1);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6898      	ldr	r0, [r3, #8]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	330c      	adds	r3, #12
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	f00a f988 	bl	8014cca <HAL_UART_Receive_IT>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	75fb      	strb	r3, [r7, #23]

    if(result != HAL_OK) {

    }
}
 800a9be:	bf00      	nop
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <_ZN11UARTHandler15setRealTimeDataEb>:

void UARTHandler::setRealTimeData(bool requested){
 800a9c6:	b480      	push	{r7}
 800a9c8:	b083      	sub	sp, #12
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	70fb      	strb	r3, [r7, #3]
     realTimeData = requested;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	78fa      	ldrb	r2, [r7, #3]
 800a9d6:	f883 261d 	strb.w	r2, [r3, #1565]	; 0x61d
}
 800a9da:	bf00      	nop
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <_ZN11UARTHandler15getRealTimeDataEv>:

bool UARTHandler::getRealTimeData(){
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
	return realTimeData;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <_ZN11UARTHandler19isNewMessageArrivedEv>:

bool UARTHandler::isNewMessageArrived() {
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
    return newDataAvailable;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 361c 	ldrb.w	r3, [r3, #1564]	; 0x61c
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <_ZN11UARTHandler19setNewDataAvailableEb>:

void UARTHandler::setNewDataAvailable(bool isArrived) {
 800aa1a:	b480      	push	{r7}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	460b      	mov	r3, r1
 800aa24:	70fb      	strb	r3, [r7, #3]
    newDataAvailable = isArrived;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	78fa      	ldrb	r2, [r7, #3]
 800aa2a:	f883 261c 	strb.w	r2, [r3, #1564]	; 0x61c
}
 800aa2e:	bf00      	nop
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <_ZN11UARTHandler9onReceiveEv>:

void UARTHandler::onReceive() {
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]


    if (bufferIndex < sizeof(receiveBuffer) - 1) {
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 800aa48:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800aa4c:	d822      	bhi.n	800aa94 <_ZN11UARTHandler9onReceiveEv+0x5a>
        receiveBuffer[bufferIndex++] = rxByte;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 800aa54:	1c59      	adds	r1, r3, #1
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	f8c2 1618 	str.w	r1, [r2, #1560]	; 0x618
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	7b11      	ldrb	r1, [r2, #12]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	4413      	add	r3, r2
 800aa64:	460a      	mov	r2, r1
 800aa66:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        // Check for message end (e.g., newline character)
      //  utils->print("Entered to this function \r\n");
        if (rxByte == '\n') {
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	7b1b      	ldrb	r3, [r3, #12]
 800aa6e:	2b0a      	cmp	r3, #10
 800aa70:	d114      	bne.n	800aa9c <_ZN11UARTHandler9onReceiveEv+0x62>
            receiveBuffer[bufferIndex] = '\0';
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

            bufferIndex = 0; // Reset index for the next message
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            setNewDataAvailable(true);
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7ff ffc4 	bl	800aa1a <_ZN11UARTHandler19setNewDataAvailableEb>
 800aa92:	e003      	b.n	800aa9c <_ZN11UARTHandler9onReceiveEv+0x62>
        }
    } else {
        // Handle buffer overflow
      //  print("Buffer overflow \r\n");
        bufferIndex = 0; // Reset buffer index
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    }


    HAL_UART_Receive_IT(huart, &rxByte, 1); // Prepare to receive the next byte
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6898      	ldr	r0, [r3, #8]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	330c      	adds	r3, #12
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	f00a f90f 	bl	8014cca <HAL_UART_Receive_IT>

}
 800aaac:	bf00      	nop
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <_ZN11UARTHandler19processReceivedDataEv>:

void UARTHandler::processReceivedData() {
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08c      	sub	sp, #48	; 0x30
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
    if (!isNewMessageArrived()) return; // Early exit if no new data
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7ff ff9f 	bl	800aa00 <_ZN11UARTHandler19isNewMessageArrivedEv>
 800aac2:	4603      	mov	r3, r0
 800aac4:	f083 0301 	eor.w	r3, r3, #1
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f040 80e9 	bne.w	800aca2 <_ZN11UARTHandler19processReceivedDataEv+0x1ee>
    cJSON *json = cJSON_Parse(reinterpret_cast<const char*>(receiveBuffer));
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fa fdcc 	bl	8005674 <cJSON_Parse>
 800aadc:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (json == NULL) {
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10f      	bne.n	800ab04 <_ZN11UARTHandler19processReceivedDataEv+0x50>
        const char *error_ptr = cJSON_GetErrorPtr();
 800aae4:	f7f9 fd02 	bl	80044ec <cJSON_GetErrorPtr>
 800aae8:	60f8      	str	r0, [r7, #12]
        if (error_ptr != NULL) {
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 80c5 	beq.w	800ac7c <_ZN11UARTHandler19processReceivedDataEv+0x1c8>
            fprintf(stderr, "Error before: %s\n", error_ptr);
 800aaf2:	4b6e      	ldr	r3, [pc, #440]	; (800acac <_ZN11UARTHandler19processReceivedDataEv+0x1f8>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	496d      	ldr	r1, [pc, #436]	; (800acb0 <_ZN11UARTHandler19processReceivedDataEv+0x1fc>)
 800aafc:	4618      	mov	r0, r3
 800aafe:	f00c ffc9 	bl	8017a94 <fiprintf>
 800ab02:	e0bb      	b.n	800ac7c <_ZN11UARTHandler19processReceivedDataEv+0x1c8>
        }
    } else {
        cJSON *commandItem = cJSON_GetObjectItemCaseSensitive(json, "type");
 800ab04:	496b      	ldr	r1, [pc, #428]	; (800acb4 <_ZN11UARTHandler19processReceivedDataEv+0x200>)
 800ab06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab08:	f7fb fc0c 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800ab0c:	62b8      	str	r0, [r7, #40]	; 0x28
        cJSON *item = cJSON_GetObjectItemCaseSensitive(json, "data");
 800ab0e:	496a      	ldr	r1, [pc, #424]	; (800acb8 <_ZN11UARTHandler19processReceivedDataEv+0x204>)
 800ab10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab12:	f7fb fc07 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800ab16:	6278      	str	r0, [r7, #36]	; 0x24
        if (cJSON_IsNumber(commandItem)) {
 800ab18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab1a:	f7fb fd5a 	bl	80065d2 <cJSON_IsNumber>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	bf14      	ite	ne
 800ab24:	2301      	movne	r3, #1
 800ab26:	2300      	moveq	r3, #0
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 80a3 	beq.w	800ac76 <_ZN11UARTHandler19processReceivedDataEv+0x1c2>
            int type = commandItem->valueint;
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	623b      	str	r3, [r7, #32]

            switch(type) {
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	2b08      	cmp	r3, #8
 800ab3c:	f200 8098 	bhi.w	800ac70 <_ZN11UARTHandler19processReceivedDataEv+0x1bc>
 800ab40:	a201      	add	r2, pc, #4	; (adr r2, 800ab48 <_ZN11UARTHandler19processReceivedDataEv+0x94>)
 800ab42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab46:	bf00      	nop
 800ab48:	0800ab6d 	.word	0x0800ab6d
 800ab4c:	0800ab91 	.word	0x0800ab91
 800ab50:	0800abc9 	.word	0x0800abc9
 800ab54:	0800abdb 	.word	0x0800abdb
 800ab58:	0800abed 	.word	0x0800abed
 800ab5c:	0800abff 	.word	0x0800abff
 800ab60:	0800ac11 	.word	0x0800ac11
 800ab64:	0800ac23 	.word	0x0800ac23
 800ab68:	0800ac31 	.word	0x0800ac31
                case INFO_TYPE: {
                //	 utils->print("Message has been arrived: %d\r\n", type);
                	    char* data = config->getInfoList();
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 fdb1 	bl	800b6d8 <_ZN6Config11getInfoListEv>
 800ab76:	61b8      	str	r0, [r7, #24]
                	    size_t data_len = strlen(data);
 800ab78:	69b8      	ldr	r0, [r7, #24]
 800ab7a:	f7f5 fb89 	bl	8000290 <strlen>
 800ab7e:	6178      	str	r0, [r7, #20]
                	    HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(data), data_len, 1000); // +1 for the added "\r"
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab88:	69b9      	ldr	r1, [r7, #24]
 800ab8a:	484c      	ldr	r0, [pc, #304]	; (800acbc <_ZN11UARTHandler19processReceivedDataEv+0x208>)
 800ab8c:	f00a f812 	bl	8014bb4 <HAL_UART_Transmit>
                }
                case REAL_TIME_TYPE: {
                	utils->playSound();
 800ab90:	f003 fe5a 	bl	800e848 <_ZN5Utils9playSoundEv>
                	 if (cJSON_IsBool(item)) {
 800ab94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab96:	f7fb fd04 	bl	80065a2 <cJSON_IsBool>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	bf14      	ite	ne
 800aba0:	2301      	movne	r3, #1
 800aba2:	2300      	moveq	r3, #0
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d064      	beq.n	800ac74 <_ZN11UARTHandler19processReceivedDataEv+0x1c0>
                       bool status = cJSON_IsTrue(item) ? true : false;
 800abaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abac:	f7fb fce2 	bl	8006574 <cJSON_IsTrue>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	bf14      	ite	ne
 800abb6:	2301      	movne	r3, #1
 800abb8:	2300      	moveq	r3, #0
 800abba:	74fb      	strb	r3, [r7, #19]
            	       setRealTimeData(status);
 800abbc:	7cfb      	ldrb	r3, [r7, #19]
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7ff ff00 	bl	800a9c6 <_ZN11UARTHandler15setRealTimeDataEb>
                	 }
                	break;
 800abc6:	e055      	b.n	800ac74 <_ZN11UARTHandler19processReceivedDataEv+0x1c0>
                }
                case MQTT_SETTING_TYPE: {
                	utils->playSound();
 800abc8:	f003 fe3e 	bl	800e848 <_ZN5Utils9playSoundEv>
                	config->setMQTTBroker(item);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abd2:	4618      	mov	r0, r3
 800abd4:	f001 f8ae 	bl	800bd34 <_ZN6Config13setMQTTBrokerEP5cJSON>
                //	utils->print("MQTT config has been arrived!!! \r\n");
                    break;
 800abd8:	e04d      	b.n	800ac76 <_ZN11UARTHandler19processReceivedDataEv+0x1c2>
                }
                case NETWORK_SETTING_TYPE :{
                	config->setNetworkSettings(item);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abe0:	4618      	mov	r0, r3
 800abe2:	f001 f83b 	bl	800bc5c <_ZN6Config18setNetworkSettingsEP5cJSON>
                	utils->playSound();
 800abe6:	f003 fe2f 	bl	800e848 <_ZN5Utils9playSoundEv>
                //	utils->print("Netwokr Settings has been successfully configured \r\n");
                    break;
 800abea:	e044      	b.n	800ac76 <_ZN11UARTHandler19processReceivedDataEv+0x1c2>
                }
                case ANALOG_NAME: {
                	utils->playSound();
 800abec:	f003 fe2c 	bl	800e848 <_ZN5Utils9playSoundEv>
                	config->setAnalogInputNamesFromJson(json);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abf6:	4618      	mov	r0, r3
 800abf8:	f001 f8d4 	bl	800bda4 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON>
                //    utils->print("Analog Names has been arrived!!! \r\n");
                    break;
 800abfc:	e03b      	b.n	800ac76 <_ZN11UARTHandler19processReceivedDataEv+0x1c2>
                }
                case DIGITAL_NAME: {
                	utils->playSound();
 800abfe:	f003 fe23 	bl	800e848 <_ZN5Utils9playSoundEv>
                	config->setDigitalInputNamesFromJson(json);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f001 f96b 	bl	800bee4 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON>
            //    	utils->print("Digital Names has been arrived!!! \r\n");
                	break;
 800ac0e:	e032      	b.n	800ac76 <_ZN11UARTHandler19processReceivedDataEv+0x1c2>
                }
                case RELAY_NAME: {
                	utils->playSound();
 800ac10:	f003 fe1a 	bl	800e848 <_ZN5Utils9playSoundEv>
                	config->setRelayNamesFromJson(json);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f001 fa16 	bl	800c04c <_ZN6Config21setRelayNamesFromJsonEP5cJSON>
            //    	utils->print("Relay Names has been arrived!!! \r\n");
                	break;
 800ac20:	e029      	b.n	800ac76 <_ZN11UARTHandler19processReceivedDataEv+0x1c2>
                }

                case RELAY_SWITCH: {
                	//utils->playSound();
                	utils->usartSwitch(item);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f004 f98f 	bl	800ef4c <_ZN5Utils11usartSwitchEP5cJSON>
              //  	utils->print("Relay Switch has been arrived \r\n");
                	break;
 800ac2e:	e022      	b.n	800ac76 <_ZN11UARTHandler19processReceivedDataEv+0x1c2>
                }
                case EXTENTION_STATUS:{
                	utils->playSound();
 800ac30:	f003 fe0a 	bl	800e848 <_ZN5Utils9playSoundEv>
                	bool status = item->valueint == 1 ? true : false;
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	695b      	ldr	r3, [r3, #20]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	bf0c      	ite	eq
 800ac3c:	2301      	moveq	r3, #1
 800ac3e:	2300      	movne	r3, #0
 800ac40:	77fb      	strb	r3, [r7, #31]
                	utils->print("STATUS: %d \r\n", item->valueint);
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	4619      	mov	r1, r3
 800ac48:	481d      	ldr	r0, [pc, #116]	; (800acc0 <_ZN11UARTHandler19processReceivedDataEv+0x20c>)
 800ac4a:	f003 fdcd 	bl	800e7e8 <_ZN5Utils5printEPKcz>
                    config->setExtentionEnabled(status);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	7ffa      	ldrb	r2, [r7, #31]
 800ac54:	4611      	mov	r1, r2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 fd18 	bl	800c68c <_ZN6Config19setExtentionEnabledEb>
                    utils->print("3;%d", config->getExtentionEnabled());
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f001 fba2 	bl	800c3aa <_ZNK6Config19getExtentionEnabledEv>
 800ac66:	4603      	mov	r3, r0
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4816      	ldr	r0, [pc, #88]	; (800acc4 <_ZN11UARTHandler19processReceivedDataEv+0x210>)
 800ac6c:	f003 fdbc 	bl	800e7e8 <_ZN5Utils5printEPKcz>
                }
                default: {
                    // Handle unknown type
                    break;
 800ac70:	bf00      	nop
 800ac72:	e000      	b.n	800ac76 <_ZN11UARTHandler19processReceivedDataEv+0x1c2>
                	break;
 800ac74:	bf00      	nop
                }
            }
        }
        cJSON_Delete(json); // Ensure json is deleted here to avoid memory leak
 800ac76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac78:	f7f9 fcf0 	bl	800465c <cJSON_Delete>
    }

    setNewDataAvailable(false); // Reset the flag after processing
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff fecb 	bl	800aa1a <_ZN11UARTHandler19setNewDataAvailableEb>
    memset(receiveBuffer, 0, bufferIndex); // Clear the buffer
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f503 6083 	add.w	r0, r3, #1048	; 0x418
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 800ac90:	461a      	mov	r2, r3
 800ac92:	2100      	movs	r1, #0
 800ac94:	f00d f856 	bl	8017d44 <memset>
    bufferIndex = 0; // Ready for new data
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
 800aca0:	e000      	b.n	800aca4 <_ZN11UARTHandler19processReceivedDataEv+0x1f0>
    if (!isNewMessageArrived()) return; // Early exit if no new data
 800aca2:	bf00      	nop
}
 800aca4:	3730      	adds	r7, #48	; 0x30
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20000228 	.word	0x20000228
 800acb0:	0801b288 	.word	0x0801b288
 800acb4:	0801b29c 	.word	0x0801b29c
 800acb8:	0801b2a4 	.word	0x0801b2a4
 800acbc:	2000171c 	.word	0x2000171c
 800acc0:	0801b2ac 	.word	0x0801b2ac
 800acc4:	0801b2bc 	.word	0x0801b2bc

0800acc8 <_ZN11UARTHandler16SendRealTimeDataEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void UARTHandler::SendRealTimeData(std::string* data) {
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]


    utils->createUSARTRealTime(data);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	4618      	mov	r0, r3
 800acda:	f003 ffa1 	bl	800ec20 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    const char* serializedData = data->c_str();
 800acde:	6838      	ldr	r0, [r7, #0]
 800ace0:	f00b fa28 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800ace4:	60f8      	str	r0, [r7, #12]
    HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(const_cast<char*>(serializedData)), strlen(serializedData), 1000);
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7f5 fad2 	bl	8000290 <strlen>
 800acec:	4603      	mov	r3, r0
 800acee:	b29a      	uxth	r2, r3
 800acf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800acf4:	68f9      	ldr	r1, [r7, #12]
 800acf6:	4803      	ldr	r0, [pc, #12]	; (800ad04 <_ZN11UARTHandler16SendRealTimeDataEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>)
 800acf8:	f009 ff5c 	bl	8014bb4 <HAL_UART_Transmit>

}
 800acfc:	bf00      	nop
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	2000171c 	.word	0x2000171c

0800ad08 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7f5 fabd 	bl	8000290 <strlen>
 800ad16:	4603      	mov	r3, r0
      }
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 800ad20:	b590      	push	{r4, r7, lr}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	0fdb      	lsrs	r3, r3, #31
 800ad2e:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 800ad30:	7dfb      	ldrb	r3, [r7, #23]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d002      	beq.n	800ad3c <_ZNSt7__cxx119to_stringEi+0x1c>
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	425b      	negs	r3, r3
 800ad3a:	e000      	b.n	800ad3e <_ZNSt7__cxx119to_stringEi+0x1e>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 800ad40:	210a      	movs	r1, #10
 800ad42:	6938      	ldr	r0, [r7, #16]
 800ad44:	f001 fd97 	bl	800c876 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 800ad48:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 800ad4a:	7dfa      	ldrb	r2, [r7, #23]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	18d4      	adds	r4, r2, r3
 800ad50:	f107 0308 	add.w	r3, r7, #8
 800ad54:	4618      	mov	r0, r3
 800ad56:	f00a ff48 	bl	8015bea <_ZNSaIcEC1Ev>
 800ad5a:	f107 0308 	add.w	r3, r7, #8
 800ad5e:	222d      	movs	r2, #45	; 0x2d
 800ad60:	4621      	mov	r1, r4
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f00b f863 	bl	8015e2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 800ad68:	f107 0308 	add.w	r3, r7, #8
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f00a ff3e 	bl	8015bee <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f00b f8cc 	bl	8015f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	68f9      	ldr	r1, [r7, #12]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f001 fdb6 	bl	800c8f4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 800ad88:	bf00      	nop
  }
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	371c      	adds	r7, #28
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd90      	pop	{r4, r7, pc}

0800ad92 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>:
    struct array
 800ad92:	b5b0      	push	{r4, r5, r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2407      	movs	r4, #7
 800ad9e:	461d      	mov	r5, r3
 800ada0:	e004      	b.n	800adac <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev+0x1a>
 800ada2:	4628      	mov	r0, r5
 800ada4:	f00b f835 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800ada8:	3518      	adds	r5, #24
 800adaa:	3c01      	subs	r4, #1
 800adac:	2c00      	cmp	r4, #0
 800adae:	daf8      	bge.n	800ada2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev+0x10>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bdb0      	pop	{r4, r5, r7, pc}

0800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>:
 800adba:	b590      	push	{r4, r7, lr}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00a      	beq.n	800adde <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev+0x24>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	429c      	cmp	r4, r3
 800add2:	d004      	beq.n	800adde <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev+0x24>
 800add4:	3c18      	subs	r4, #24
 800add6:	4620      	mov	r0, r4
 800add8:	f00b f832 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800addc:	e7f7      	b.n	800adce <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev+0x14>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd90      	pop	{r4, r7, pc}

0800ade8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev>:
 800ade8:	b5b0      	push	{r4, r5, r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	240f      	movs	r4, #15
 800adf4:	461d      	mov	r5, r3
 800adf6:	e004      	b.n	800ae02 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev+0x1a>
 800adf8:	4628      	mov	r0, r5
 800adfa:	f00b f80a 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800adfe:	3518      	adds	r5, #24
 800ae00:	3c01      	subs	r4, #1
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	daf8      	bge.n	800adf8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev+0x10>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bdb0      	pop	{r4, r5, r7, pc}

0800ae10 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>:
 800ae10:	b590      	push	{r4, r7, lr}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev+0x24>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	429c      	cmp	r4, r3
 800ae28:	d004      	beq.n	800ae34 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev+0x24>
 800ae2a:	3c18      	subs	r4, #24
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f00b f807 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ae32:	e7f7      	b.n	800ae24 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev+0x14>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4618      	mov	r0, r3
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd90      	pop	{r4, r7, pc}

0800ae3e <_ZN6ConfigC1Ev>:
constexpr int KEEP_ALIVE_INTERVAL = 60;
constexpr char DEFAULT_PASSWORD[] = "pass";
constexpr int DEFAULT_QOS = 1;


Config::Config(){
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	775a      	strb	r2, [r3, #29]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	779a      	strb	r2, [r3, #30]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3324      	adds	r3, #36	; 0x24
 800ae56:	4618      	mov	r0, r3
 800ae58:	f00a ffdb 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	333c      	adds	r3, #60	; 0x3c
 800ae60:	4618      	mov	r0, r3
 800ae62:	f00a ffd6 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3354      	adds	r3, #84	; 0x54
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f00a ffd1 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	336c      	adds	r3, #108	; 0x6c
 800ae74:	4618      	mov	r0, r3
 800ae76:	f00a ffcc 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	3384      	adds	r3, #132	; 0x84
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f00a ffc7 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	33a0      	adds	r3, #160	; 0xa0
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7ff ff82 	bl	800ad92 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7ff ffa7 	bl	800ade8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7ff ff76 	bl	800ad92 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>

}
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <_ZN6Config4initEP5AT24C>:

void Config::init(AT24C* eepromInstance) {
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]


	eeprom = eepromInstance;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	601a      	str	r2, [r3, #0]


}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <_ZN6Config5setUpEv>:

void Config::setUp() {
 800aecc:	b590      	push	{r4, r7, lr}
 800aece:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800aed8:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800aedc:	6018      	str	r0, [r3, #0]
    static std::array<uint8_t, 4> ipStatic;

    setBrokerIP(eeprom->ReadIP(BROKER_IP_ID, ipStatic) ? ipStatic : DEFAULT_BROKER_IP);
 800aede:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800aee2:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4aa7      	ldr	r2, [pc, #668]	; (800b188 <_ZN6Config5setUpEv+0x2bc>)
 800aeec:	2101      	movs	r1, #1
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fd fa2e 	bl	8008350 <_ZN5AT24C6ReadIPEtRSt5arrayIhLj4EE>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d001      	beq.n	800aefe <_ZN6Config5setUpEv+0x32>
 800aefa:	4aa3      	ldr	r2, [pc, #652]	; (800b188 <_ZN6Config5setUpEv+0x2bc>)
 800aefc:	e000      	b.n	800af00 <_ZN6Config5setUpEv+0x34>
 800aefe:	4aa3      	ldr	r2, [pc, #652]	; (800b18c <_ZN6Config5setUpEv+0x2c0>)
 800af00:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800af04:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800af08:	4611      	mov	r1, r2
 800af0a:	6818      	ldr	r0, [r3, #0]
 800af0c:	f001 fb0f 	bl	800c52e <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>

    uint16_t port = eeprom->ReadInt(BROKER_PORT_ID);
 800af10:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800af14:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2102      	movs	r1, #2
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fd fa78 	bl	8008414 <_ZN5AT24C7ReadIntEt>
 800af24:	4603      	mov	r3, r0
 800af26:	b29b      	uxth	r3, r3
 800af28:	f8a7 332a 	strh.w	r3, [r7, #810]	; 0x32a
    setBrokerPort(port ? port : DEFAULT_PORT);
 800af2c:	f8b7 332a 	ldrh.w	r3, [r7, #810]	; 0x32a
 800af30:	2b00      	cmp	r3, #0
 800af32:	d003      	beq.n	800af3c <_ZN6Config5setUpEv+0x70>
 800af34:	f207 332a 	addw	r3, r7, #810	; 0x32a
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	e001      	b.n	800af40 <_ZN6Config5setUpEv+0x74>
 800af3c:	f240 735b 	movw	r3, #1883	; 0x75b
 800af40:	f507 7262 	add.w	r2, r7, #904	; 0x388
 800af44:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 800af48:	4619      	mov	r1, r3
 800af4a:	6810      	ldr	r0, [r2, #0]
 800af4c:	f001 fb04 	bl	800c558 <_ZN6Config13setBrokerPortEt>

    int dhcp = eeprom->ReadInt(DHCP_ENABLED_ID);
 800af50:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800af54:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2108      	movs	r1, #8
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fd fa58 	bl	8008414 <_ZN5AT24C7ReadIntEt>
 800af64:	f8c7 0384 	str.w	r0, [r7, #900]	; 0x384
    setDHCPEnabled(dhcp == -1 ? DEFAULT_DHCP_ENABLED : static_cast<bool>(dhcp));
 800af68:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800af6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af70:	d003      	beq.n	800af7a <_ZN6Config5setUpEv+0xae>
 800af72:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <_ZN6Config5setUpEv+0xb2>
 800af7a:	2201      	movs	r2, #1
 800af7c:	e000      	b.n	800af80 <_ZN6Config5setUpEv+0xb4>
 800af7e:	2200      	movs	r2, #0
 800af80:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800af84:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800af88:	4611      	mov	r1, r2
 800af8a:	6818      	ldr	r0, [r3, #0]
 800af8c:	f001 fb5b 	bl	800c646 <_ZN6Config14setDHCPEnabledEb>

    if (!getDHCPEnabled()) {
 800af90:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800af94:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800af98:	6818      	ldr	r0, [r3, #0]
 800af9a:	f001 f9ee 	bl	800c37a <_ZNK6Config14getDHCPEnabledEv>
 800af9e:	4603      	mov	r3, r0
 800afa0:	f083 0301 	eor.w	r3, r3, #1
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d063      	beq.n	800b072 <_ZN6Config5setUpEv+0x1a6>
        setIP(eeprom->ReadIP(IP_ID, ipStatic) ? ipStatic : DEFAULT_IP);
 800afaa:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800afae:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a74      	ldr	r2, [pc, #464]	; (800b188 <_ZN6Config5setUpEv+0x2bc>)
 800afb8:	2103      	movs	r1, #3
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fd f9c8 	bl	8008350 <_ZN5AT24C6ReadIPEtRSt5arrayIhLj4EE>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <_ZN6Config5setUpEv+0xfe>
 800afc6:	4a70      	ldr	r2, [pc, #448]	; (800b188 <_ZN6Config5setUpEv+0x2bc>)
 800afc8:	e000      	b.n	800afcc <_ZN6Config5setUpEv+0x100>
 800afca:	4a71      	ldr	r2, [pc, #452]	; (800b190 <_ZN6Config5setUpEv+0x2c4>)
 800afcc:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800afd0:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800afd4:	4611      	mov	r1, r2
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	f001 fad2 	bl	800c580 <_ZN6Config5setIPERKSt5arrayIhLj4EE>
        setGateway(eeprom->ReadIP(GATEWAY_ID, ipStatic) ? ipStatic : DEFAULT_GATEWAY);
 800afdc:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800afe0:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a67      	ldr	r2, [pc, #412]	; (800b188 <_ZN6Config5setUpEv+0x2bc>)
 800afea:	2104      	movs	r1, #4
 800afec:	4618      	mov	r0, r3
 800afee:	f7fd f9af 	bl	8008350 <_ZN5AT24C6ReadIPEtRSt5arrayIhLj4EE>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <_ZN6Config5setUpEv+0x130>
 800aff8:	4a63      	ldr	r2, [pc, #396]	; (800b188 <_ZN6Config5setUpEv+0x2bc>)
 800affa:	e000      	b.n	800affe <_ZN6Config5setUpEv+0x132>
 800affc:	4a65      	ldr	r2, [pc, #404]	; (800b194 <_ZN6Config5setUpEv+0x2c8>)
 800affe:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b002:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b006:	4611      	mov	r1, r2
 800b008:	6818      	ldr	r0, [r3, #0]
 800b00a:	f001 face 	bl	800c5aa <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>
        setSubnet(eeprom->ReadIP(SUBNET_ID, ipStatic) ? ipStatic : DEFAULT_SUBNET);
 800b00e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b012:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a5b      	ldr	r2, [pc, #364]	; (800b188 <_ZN6Config5setUpEv+0x2bc>)
 800b01c:	2105      	movs	r1, #5
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fd f996 	bl	8008350 <_ZN5AT24C6ReadIPEtRSt5arrayIhLj4EE>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <_ZN6Config5setUpEv+0x162>
 800b02a:	4a57      	ldr	r2, [pc, #348]	; (800b188 <_ZN6Config5setUpEv+0x2bc>)
 800b02c:	e000      	b.n	800b030 <_ZN6Config5setUpEv+0x164>
 800b02e:	4a5a      	ldr	r2, [pc, #360]	; (800b198 <_ZN6Config5setUpEv+0x2cc>)
 800b030:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b034:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b038:	4611      	mov	r1, r2
 800b03a:	6818      	ldr	r0, [r3, #0]
 800b03c:	f001 faca 	bl	800c5d4 <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>
        setDNS(eeprom->ReadIP(DNS_ID, ipStatic) ? ipStatic : DEFAULT_DNS);
 800b040:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b044:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a4e      	ldr	r2, [pc, #312]	; (800b188 <_ZN6Config5setUpEv+0x2bc>)
 800b04e:	2106      	movs	r1, #6
 800b050:	4618      	mov	r0, r3
 800b052:	f7fd f97d 	bl	8008350 <_ZN5AT24C6ReadIPEtRSt5arrayIhLj4EE>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <_ZN6Config5setUpEv+0x194>
 800b05c:	4a4a      	ldr	r2, [pc, #296]	; (800b188 <_ZN6Config5setUpEv+0x2bc>)
 800b05e:	e000      	b.n	800b062 <_ZN6Config5setUpEv+0x196>
 800b060:	4a4e      	ldr	r2, [pc, #312]	; (800b19c <_ZN6Config5setUpEv+0x2d0>)
 800b062:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b066:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b06a:	4611      	mov	r1, r2
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	f001 fac6 	bl	800c5fe <_ZN6Config6setDNSERKSt5arrayIhLj4EE>
    }


    int extension = eeprom->ReadInt(EXTENSION_ENABLED_ID);
 800b072:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b076:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2109      	movs	r1, #9
 800b080:	4618      	mov	r0, r3
 800b082:	f7fd f9c7 	bl	8008414 <_ZN5AT24C7ReadIntEt>
 800b086:	f8c7 0380 	str.w	r0, [r7, #896]	; 0x380
    setExtentionEnabled(extension == -1 ? DEFAULT_EXTENSION_ENABLED : static_cast<bool>(extension));
 800b08a:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b092:	d003      	beq.n	800b09c <_ZN6Config5setUpEv+0x1d0>
 800b094:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <_ZN6Config5setUpEv+0x1d4>
 800b09c:	2201      	movs	r2, #1
 800b09e:	e000      	b.n	800b0a2 <_ZN6Config5setUpEv+0x1d6>
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b0a6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	f001 faed 	bl	800c68c <_ZN6Config19setExtentionEnabledEb>

    int interval = eeprom->ReadInt(INTERVAL_TIME_ID);
 800b0b2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b0b6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	210a      	movs	r1, #10
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fd f9a7 	bl	8008414 <_ZN5AT24C7ReadIntEt>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    setIntervalTime(interval == -1 ? DEFAULT_INTERVAL_TIME : interval);
 800b0cc:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800b0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d4:	d004      	beq.n	800b0e0 <_ZN6Config5setUpEv+0x214>
 800b0d6:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	e000      	b.n	800b0e2 <_ZN6Config5setUpEv+0x216>
 800b0e0:	2203      	movs	r2, #3
 800b0e2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b0e6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	f001 fae1 	bl	800c6b4 <_ZN6Config15setIntervalTimeEm>

    setKeepAliveInterval(KEEP_ALIVE_INTERVAL);
 800b0f2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b0f6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b0fa:	213c      	movs	r1, #60	; 0x3c
 800b0fc:	6818      	ldr	r0, [r3, #0]
 800b0fe:	f001 fa93 	bl	800c628 <_ZN6Config20setKeepAliveIntervalEt>
    setUsername("iot_devices");
 800b102:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800b106:	4618      	mov	r0, r3
 800b108:	f00a fd6f 	bl	8015bea <_ZNSaIcEC1Ev>
 800b10c:	f507 7251 	add.w	r2, r7, #836	; 0x344
 800b110:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800b114:	4922      	ldr	r1, [pc, #136]	; (800b1a0 <_ZN6Config5setUpEv+0x2d4>)
 800b116:	4618      	mov	r0, r3
 800b118:	f00b f87e 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b11c:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800b120:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b124:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b128:	4611      	mov	r1, r2
 800b12a:	6818      	ldr	r0, [r3, #0]
 800b12c:	f001 fad5 	bl	800c6da <_ZN6Config11setUsernameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b130:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800b134:	4618      	mov	r0, r3
 800b136:	f00a fe83 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b13a:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800b13e:	4618      	mov	r0, r3
 800b140:	f00a fd55 	bl	8015bee <_ZNSaIcED1Ev>

    std::string passwd = eeprom->ReadString(PASSWORD_ID);
 800b144:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b148:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	6819      	ldr	r1, [r3, #0]
 800b150:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800b154:	220d      	movs	r2, #13
 800b156:	4618      	mov	r0, r3
 800b158:	f7fd f840 	bl	80081dc <_ZN5AT24C10ReadStringB5cxx11Et>
    setPassword(!passwd.empty() ? passwd : DEFAULT_PASSWORD);
 800b15c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800b160:	4618      	mov	r0, r3
 800b162:	f00a fed2 	bl	8015f0a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800b166:	4603      	mov	r3, r0
 800b168:	f083 0301 	eor.w	r3, r3, #1
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2400      	movs	r4, #0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d017      	beq.n	800b1a4 <_ZN6Config5setUpEv+0x2d8>
 800b174:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 800b178:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800b17c:	4611      	mov	r1, r2
 800b17e:	4618      	mov	r0, r3
 800b180:	f00b f816 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b184:	e01c      	b.n	800b1c0 <_ZN6Config5setUpEv+0x2f4>
 800b186:	bf00      	nop
 800b188:	200015dc 	.word	0x200015dc
 800b18c:	0801b810 	.word	0x0801b810
 800b190:	0801b814 	.word	0x0801b814
 800b194:	0801b818 	.word	0x0801b818
 800b198:	0801b81c 	.word	0x0801b81c
 800b19c:	0801b820 	.word	0x0801b820
 800b1a0:	0801b2c4 	.word	0x0801b2c4
 800b1a4:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f00a fd1e 	bl	8015bea <_ZNSaIcEC1Ev>
 800b1ae:	2401      	movs	r4, #1
 800b1b0:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800b1b4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800b1b8:	495d      	ldr	r1, [pc, #372]	; (800b330 <_ZN6Config5setUpEv+0x464>)
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f00b f82c 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b1c0:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800b1c4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b1c8:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	6818      	ldr	r0, [r3, #0]
 800b1d0:	f001 faa1 	bl	800c716 <_ZN6Config11setPasswordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b1d4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f00a fe31 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b1de:	2c00      	cmp	r4, #0
 800b1e0:	d004      	beq.n	800b1ec <_ZN6Config5setUpEv+0x320>
 800b1e2:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f00a fd01 	bl	8015bee <_ZNSaIcED1Ev>

    setTopicPublish("topic/pub");
 800b1ec:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f00a fcfa 	bl	8015bea <_ZNSaIcEC1Ev>
 800b1f6:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 800b1fa:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800b1fe:	494d      	ldr	r1, [pc, #308]	; (800b334 <_ZN6Config5setUpEv+0x468>)
 800b200:	4618      	mov	r0, r3
 800b202:	f00b f809 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b206:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800b20a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b20e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b212:	4611      	mov	r1, r2
 800b214:	6818      	ldr	r0, [r3, #0]
 800b216:	f001 fa9c 	bl	800c752 <_ZN6Config15setTopicPublishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b21a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800b21e:	4618      	mov	r0, r3
 800b220:	f00a fe0e 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b224:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800b228:	4618      	mov	r0, r3
 800b22a:	f00a fce0 	bl	8015bee <_ZNSaIcED1Ev>
    setQoS(DEFAULT_QOS);
 800b22e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b232:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b236:	2101      	movs	r1, #1
 800b238:	6818      	ldr	r0, [r3, #0]
 800b23a:	f001 fa99 	bl	800c770 <_ZN6Config6setQoSEi>

    std::array<std::string, 8> analog;
 800b23e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff fda5 	bl	800ad92 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>
    setAnalogInputNames(eeprom->ReadArrayString(ANALOGNAME_ID, analog) ? analog : DEFAULT_ANALOG_INPUT_NAMES);
 800b248:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b24c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 800b258:	2111      	movs	r1, #17
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fd fa43 	bl	80086e6 <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <_ZN6Config5setUpEv+0x3a0>
 800b266:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800b26a:	e000      	b.n	800b26e <_ZN6Config5setUpEv+0x3a2>
 800b26c:	4b32      	ldr	r3, [pc, #200]	; (800b338 <_ZN6Config5setUpEv+0x46c>)
 800b26e:	f507 7262 	add.w	r2, r7, #904	; 0x388
 800b272:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 800b276:	4619      	mov	r1, r3
 800b278:	6810      	ldr	r0, [r2, #0]
 800b27a:	f001 faa0 	bl	800c7be <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>

    std::array<std::string, 8 > relay;
 800b27e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff fd85 	bl	800ad92 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>
    setDigitalOutputNames(eeprom->ReadArrayString(RELAYNAME_ID, relay) ? relay : DEFAULT_DIGITAL_OUTPUT_NAMES);
 800b288:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b28c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 800b298:	2112      	movs	r1, #18
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fd fa23 	bl	80086e6 <_ZN5AT24C15ReadArrayStringEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <_ZN6Config5setUpEv+0x3e0>
 800b2a6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b2aa:	e000      	b.n	800b2ae <_ZN6Config5setUpEv+0x3e2>
 800b2ac:	4b23      	ldr	r3, [pc, #140]	; (800b33c <_ZN6Config5setUpEv+0x470>)
 800b2ae:	f507 7262 	add.w	r2, r7, #904	; 0x388
 800b2b2:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6810      	ldr	r0, [r2, #0]
 800b2ba:	f001 fac5 	bl	800c848 <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>

    std::array<std::string, MAX_DIGITAL_INPUTS> digital_input;
 800b2be:	f107 030c 	add.w	r3, r7, #12
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7ff fd90 	bl	800ade8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev>
    setDigitalInputNames(eeprom->ReadDigitalInput(DIGITALNAME_ID, digital_input) ? digital_input : DEFAULT_DIGITAL_INPUT_NAMES);
 800b2c8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800b2cc:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f107 020c 	add.w	r2, r7, #12
 800b2d8:	2110      	movs	r1, #16
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fd f951 	bl	8008582 <_ZN5AT24C16ReadDigitalInputEtRSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <_ZN6Config5setUpEv+0x420>
 800b2e6:	f107 030c 	add.w	r3, r7, #12
 800b2ea:	e000      	b.n	800b2ee <_ZN6Config5setUpEv+0x422>
 800b2ec:	4b14      	ldr	r3, [pc, #80]	; (800b340 <_ZN6Config5setUpEv+0x474>)
 800b2ee:	f507 7262 	add.w	r2, r7, #904	; 0x388
 800b2f2:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6810      	ldr	r0, [r2, #0]
 800b2fa:	f001 fa8e 	bl	800c81a <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>

}
 800b2fe:	f107 030c 	add.w	r3, r7, #12
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff fd84 	bl	800ae10 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
 800b308:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff fd54 	bl	800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800b312:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800b316:	4618      	mov	r0, r3
 800b318:	f7ff fd4f 	bl	800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800b31c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800b320:	4618      	mov	r0, r3
 800b322:	f00a fd8d 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b326:	f507 7763 	add.w	r7, r7, #908	; 0x38c
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd90      	pop	{r4, r7, pc}
 800b32e:	bf00      	nop
 800b330:	0801b824 	.word	0x0801b824
 800b334:	0801b2d0 	.word	0x0801b2d0
 800b338:	200012dc 	.word	0x200012dc
 800b33c:	2000151c 	.word	0x2000151c
 800b340:	2000139c 	.word	0x2000139c

0800b344 <_ZN6Config18getAnalogInputNameB5cxx11Ei>:


std::string Config::getAnalogInputName(int index){
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
	return analog_input_names[index];
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	33a0      	adds	r3, #160	; 0xa0
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	4611      	mov	r1, r2
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fd fd13 	bl	8008d84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 800b35e:	4603      	mov	r3, r0
 800b360:	4619      	mov	r1, r3
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f00a ff24 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <_ZN6Config19getDigitalInputNameB5cxx11Ei>:

std::string Config::getDigitalInputName(int index){
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
	return digital_input_names[index];
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	4611      	mov	r1, r2
 800b386:	4618      	mov	r0, r3
 800b388:	f7fd fced 	bl	8008d66 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>
 800b38c:	4603      	mov	r3, r0
 800b38e:	4619      	mov	r1, r3
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f00a ff0d 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <_ZN6Config20getDigitalOutputNameB5cxx11Ei>:

std::string Config::getDigitalOutputName(int index){
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b084      	sub	sp, #16
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60f8      	str	r0, [r7, #12]
 800b3a6:	60b9      	str	r1, [r7, #8]
 800b3a8:	607a      	str	r2, [r7, #4]
	return digital_output_names[index];
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fd fce5 	bl	8008d84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	4619      	mov	r1, r3
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f00a fef6 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <_ZN6Config14initmqttConfigEv>:

void Config::initmqttConfig() {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b098      	sub	sp, #96	; 0x60
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
    uint8_t mac[6];
    getSHAR(mac);
 800b3d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b3d8:	2206      	movs	r2, #6
 800b3da:	4619      	mov	r1, r3
 800b3dc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b3e0:	f7f7 f9e0 	bl	80027a4 <WIZCHIP_READ_BUF>
    char macString[18] = {0}; // Initialize macString with zeros
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	605a      	str	r2, [r3, #4]
 800b3f2:	609a      	str	r2, [r3, #8]
 800b3f4:	819a      	strh	r2, [r3, #12]
    for (int i = 0; i < 6; ++i) {
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3fa:	e026      	b.n	800b44a <_ZN6Config14initmqttConfigEv+0x7e>
        if (i > 0) {
 800b3fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dd0e      	ble.n	800b420 <_ZN6Config14initmqttConfigEv+0x54>
            strcat(macString, ":"); // Add ':' between bytes except for the first one
 800b402:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b406:	4618      	mov	r0, r3
 800b408:	f7f4 ff42 	bl	8000290 <strlen>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b414:	4413      	add	r3, r2
 800b416:	492c      	ldr	r1, [pc, #176]	; (800b4c8 <_ZN6Config14initmqttConfigEv+0xfc>)
 800b418:	461a      	mov	r2, r3
 800b41a:	460b      	mov	r3, r1
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	8013      	strh	r3, [r2, #0]
        }
        sprintf(macString + strlen(macString), "%02X", mac[i]); // Append two characters per byte
 800b420:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b424:	4618      	mov	r0, r3
 800b426:	f7f4 ff33 	bl	8000290 <strlen>
 800b42a:	4602      	mov	r2, r0
 800b42c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b430:	1898      	adds	r0, r3, r2
 800b432:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b438:	4413      	add	r3, r2
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	461a      	mov	r2, r3
 800b43e:	4923      	ldr	r1, [pc, #140]	; (800b4cc <_ZN6Config14initmqttConfigEv+0x100>)
 800b440:	f00c fb8c 	bl	8017b5c <siprintf>
    for (int i = 0; i < 6; ++i) {
 800b444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b446:	3301      	adds	r3, #1
 800b448:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b44a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b44c:	2b05      	cmp	r3, #5
 800b44e:	ddd5      	ble.n	800b3fc <_ZN6Config14initmqttConfigEv+0x30>
    }

     setSHAR(mac); // Commented out because it seems unnecessary here
 800b450:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b454:	2206      	movs	r2, #6
 800b456:	4619      	mov	r1, r3
 800b458:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b45c:	f7f7 fa02 	bl	8002864 <WIZCHIP_WRITE_BUF>
    std::string clientID = std::string(macString);
 800b460:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b464:	4618      	mov	r0, r3
 800b466:	f00a fbc0 	bl	8015bea <_ZNSaIcEC1Ev>
 800b46a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b46e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b476:	4618      	mov	r0, r3
 800b478:	f00a fece 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b47c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b480:	4618      	mov	r0, r3
 800b482:	f00a fbb4 	bl	8015bee <_ZNSaIcED1Ev>
    std::string data = "data/" + clientID;
 800b486:	f107 030c 	add.w	r3, r7, #12
 800b48a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b48e:	4910      	ldr	r1, [pc, #64]	; (800b4d0 <_ZN6Config14initmqttConfigEv+0x104>)
 800b490:	4618      	mov	r0, r3
 800b492:	f001 fa85 	bl	800c9a0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
  //  std::string data = "sub";
    // Set MQTT client ID and topic to subscribe
    setClientId(clientID);
 800b496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f001 f92b 	bl	800c6f8 <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    setTopicSubscribe(data);
 800b4a2:	f107 030c 	add.w	r3, r7, #12
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 f943 	bl	800c734 <_ZN6Config17setTopicSubscribeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
}
 800b4ae:	f107 030c 	add.w	r3, r7, #12
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f00a fcc4 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b4b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f00a fcbf 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b4c2:	3760      	adds	r7, #96	; 0x60
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	0801b2dc 	.word	0x0801b2dc
 800b4cc:	0801b2e0 	.word	0x0801b2e0
 800b4d0:	0801b2e8 	.word	0x0801b2e8

0800b4d4 <_Z16createListStringB5cxx11St5arrayIhLj4EE>:



std::string createListString(std::array<uint8_t, 4> arr ) {
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08a      	sub	sp, #40	; 0x28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
	std::string data;
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f00a fc97 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	for (size_t i = 0; i < arr.size(); ++i) {
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4e8:	e022      	b.n	800b530 <_Z16createListStringB5cxx11St5arrayIhLj4EE+0x5c>
		    if (i > 0) {
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d003      	beq.n	800b4f8 <_Z16createListStringB5cxx11St5arrayIhLj4EE+0x24>
		        // Add a period before all but the first number
		       data += ",";
 800b4f0:	4918      	ldr	r1, [pc, #96]	; (800b554 <_Z16createListStringB5cxx11St5arrayIhLj4EE+0x80>)
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f00a fe1a 	bl	801612c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		    }
		    data += std::to_string(arr[i]); // Convert each integer to a string
 800b4f8:	463b      	mov	r3, r7
 800b4fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f001 fa8f 	bl	800ca20 <_ZNSt5arrayIhLj4EEixEj>
 800b502:	4603      	mov	r3, r0
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	f107 030c 	add.w	r3, r7, #12
 800b50c:	4611      	mov	r1, r2
 800b50e:	4618      	mov	r0, r3
 800b510:	f7ff fc06 	bl	800ad20 <_ZNSt7__cxx119to_stringEi>
 800b514:	f107 030c 	add.w	r3, r7, #12
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f00a fddb 	bl	80160d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800b520:	f107 030c 	add.w	r3, r7, #12
 800b524:	4618      	mov	r0, r3
 800b526:	f00a fc8b 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	for (size_t i = 0; i < arr.size(); ++i) {
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	3301      	adds	r3, #1
 800b52e:	627b      	str	r3, [r7, #36]	; 0x24
 800b530:	463b      	mov	r3, r7
 800b532:	4618      	mov	r0, r3
 800b534:	f7fd fb5f 	bl	8008bf6 <_ZNKSt5arrayIhLj4EE4sizeEv>
 800b538:	4602      	mov	r2, r0
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	4293      	cmp	r3, r2
 800b53e:	bf34      	ite	cc
 800b540:	2301      	movcc	r3, #1
 800b542:	2300      	movcs	r3, #0
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1cf      	bne.n	800b4ea <_Z16createListStringB5cxx11St5arrayIhLj4EE+0x16>
		}

	return data;
 800b54a:	bf00      	nop
}
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	3728      	adds	r7, #40	; 0x28
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	0801b2f0 	.word	0x0801b2f0

0800b558 <_Z21createStringFromArraySt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>:


std::string createStringFromArray(std::array<std::string, MAX_DIGITAL_INPUTS>arr ) {
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08a      	sub	sp, #40	; 0x28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
	std::string data;
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f00a fc55 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

	for(size_t i = 0 ; i < arr.size(); i++ ) {
 800b568:	2300      	movs	r3, #0
 800b56a:	627b      	str	r3, [r7, #36]	; 0x24
 800b56c:	e028      	b.n	800b5c0 <_Z21createStringFromArraySt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x68>
		if (i > 0 ) {
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <_Z21createStringFromArraySt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x24>
			data += ",";
 800b574:	491b      	ldr	r1, [pc, #108]	; (800b5e4 <_Z21createStringFromArraySt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x8c>)
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f00a fdd8 	bl	801612c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		}
		std::string val = arr[i];
 800b57c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b57e:	6838      	ldr	r0, [r7, #0]
 800b580:	f7fd fbf1 	bl	8008d66 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>
 800b584:	4602      	mov	r2, r0
 800b586:	f107 030c 	add.w	r3, r7, #12
 800b58a:	4611      	mov	r1, r2
 800b58c:	4618      	mov	r0, r3
 800b58e:	f00a fe0f 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
		if (val != "") data +=val;
 800b592:	f107 030c 	add.w	r3, r7, #12
 800b596:	4914      	ldr	r1, [pc, #80]	; (800b5e8 <_Z21createStringFromArraySt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x90>)
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 fa5b 	bl	800ca54 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d005      	beq.n	800b5b0 <_Z21createStringFromArraySt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x58>
 800b5a4:	f107 030c 	add.w	r3, r7, #12
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f00a fd93 	bl	80160d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
	}
 800b5b0:	f107 030c 	add.w	r3, r7, #12
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f00a fc43 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	for(size_t i = 0 ; i < arr.size(); i++ ) {
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	3301      	adds	r3, #1
 800b5be:	627b      	str	r3, [r7, #36]	; 0x24
 800b5c0:	6838      	ldr	r0, [r7, #0]
 800b5c2:	f001 fa3c 	bl	800ca3e <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4sizeEv>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	bf34      	ite	cc
 800b5ce:	2301      	movcc	r3, #1
 800b5d0:	2300      	movcs	r3, #0
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1ca      	bne.n	800b56e <_Z21createStringFromArraySt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE+0x16>

	return data;
 800b5d8:	bf00      	nop

}
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	3728      	adds	r7, #40	; 0x28
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	0801b2f0 	.word	0x0801b2f0
 800b5e8:	0801b2f4 	.word	0x0801b2f4

0800b5ec <_Z25createStringFromArray8lenSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>:



std::string createStringFromArray8len(std::array<std::string, 8>arr) {
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	; 0x28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	std::string data;
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f00a fc0b 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

	for(size_t i = 0 ; i < arr.size(); i++ ) {
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b600:	e028      	b.n	800b654 <_Z25createStringFromArray8lenSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x68>
		if (i > 0 ) {
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <_Z25createStringFromArray8lenSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x24>
			data += ",";
 800b608:	491b      	ldr	r1, [pc, #108]	; (800b678 <_Z25createStringFromArray8lenSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x8c>)
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f00a fd8e 	bl	801612c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		}
		std::string val = arr[i];
 800b610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b612:	6838      	ldr	r0, [r7, #0]
 800b614:	f7fd fbb6 	bl	8008d84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 800b618:	4602      	mov	r2, r0
 800b61a:	f107 030c 	add.w	r3, r7, #12
 800b61e:	4611      	mov	r1, r2
 800b620:	4618      	mov	r0, r3
 800b622:	f00a fdc5 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
		if (val != "") data +=val;
 800b626:	f107 030c 	add.w	r3, r7, #12
 800b62a:	4914      	ldr	r1, [pc, #80]	; (800b67c <_Z25createStringFromArray8lenSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x90>)
 800b62c:	4618      	mov	r0, r3
 800b62e:	f001 fa11 	bl	800ca54 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d005      	beq.n	800b644 <_Z25createStringFromArray8lenSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x58>
 800b638:	f107 030c 	add.w	r3, r7, #12
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f00a fd49 	bl	80160d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
	}
 800b644:	f107 030c 	add.w	r3, r7, #12
 800b648:	4618      	mov	r0, r3
 800b64a:	f00a fbf9 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	for(size_t i = 0 ; i < arr.size(); i++ ) {
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	3301      	adds	r3, #1
 800b652:	627b      	str	r3, [r7, #36]	; 0x24
 800b654:	6838      	ldr	r0, [r7, #0]
 800b656:	f001 fa0e 	bl	800ca76 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4sizeEv>
 800b65a:	4602      	mov	r2, r0
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	4293      	cmp	r3, r2
 800b660:	bf34      	ite	cc
 800b662:	2301      	movcc	r3, #1
 800b664:	2300      	movcs	r3, #0
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1ca      	bne.n	800b602 <_Z25createStringFromArray8lenSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE+0x16>

	return data;
 800b66c:	bf00      	nop

}
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	3728      	adds	r7, #40	; 0x28
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	0801b2f0 	.word	0x0801b2f0
 800b67c:	0801b2f4 	.word	0x0801b2f4

0800b680 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEC1Ev>:
 800b680:	b5b0      	push	{r4, r5, r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	240a      	movs	r4, #10
 800b68c:	461d      	mov	r5, r3
 800b68e:	e004      	b.n	800b69a <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEC1Ev+0x1a>
 800b690:	4628      	mov	r0, r5
 800b692:	f00a fbbe 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800b696:	3518      	adds	r5, #24
 800b698:	3c01      	subs	r4, #1
 800b69a:	2c00      	cmp	r4, #0
 800b69c:	daf8      	bge.n	800b690 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEC1Ev+0x10>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bdb0      	pop	{r4, r5, r7, pc}

0800b6a8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EED1Ev>:
 800b6a8:	b590      	push	{r4, r7, lr}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00a      	beq.n	800b6cc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EED1Ev+0x24>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f503 7484 	add.w	r4, r3, #264	; 0x108
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	429c      	cmp	r4, r3
 800b6c0:	d004      	beq.n	800b6cc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EED1Ev+0x24>
 800b6c2:	3c18      	subs	r4, #24
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f00a fbbb 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b6ca:	e7f7      	b.n	800b6bc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EED1Ev+0x14>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd90      	pop	{r4, r7, pc}
	...

0800b6d8 <_ZN6Config11getInfoListEv>:

char* Config::getInfoList(){
 800b6d8:	b590      	push	{r4, r7, lr}
 800b6da:	f2ad 5d8c 	subw	sp, sp, #1420	; 0x58c
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b6e4:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b6e8:	6018      	str	r0, [r3, #0]
	std::string data = "1";
 800b6ea:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f00a fa7b 	bl	8015bea <_ZNSaIcEC1Ev>
 800b6f4:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 800b6f8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b6fc:	49ea      	ldr	r1, [pc, #936]	; (800baa8 <_ZN6Config11getInfoListEv+0x3d0>)
 800b6fe:	4618      	mov	r0, r3
 800b700:	f00a fd8a 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b704:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800b708:	4618      	mov	r0, r3
 800b70a:	f00a fa70 	bl	8015bee <_ZNSaIcED1Ev>
	std::string comma = ";";
 800b70e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b712:	4618      	mov	r0, r3
 800b714:	f00a fa69 	bl	8015bea <_ZNSaIcEC1Ev>
 800b718:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b71c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800b720:	49e2      	ldr	r1, [pc, #904]	; (800baac <_ZN6Config11getInfoListEv+0x3d4>)
 800b722:	4618      	mov	r0, r3
 800b724:	f00a fd78 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b728:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b72c:	4618      	mov	r0, r3
 800b72e:	f00a fa5e 	bl	8015bee <_ZNSaIcED1Ev>
	std::array<std::string,11 > lists;
 800b732:	f107 030c 	add.w	r3, r7, #12
 800b736:	4618      	mov	r0, r3
 800b738:	f7ff ffa2 	bl	800b680 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEC1Ev>


	lists[0] = getClientId();
 800b73c:	f107 030c 	add.w	r3, r7, #12
 800b740:	2100      	movs	r1, #0
 800b742:	4618      	mov	r0, r3
 800b744:	f001 f9a2 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800b748:	4604      	mov	r4, r0
 800b74a:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b74e:	f2a3 423c 	subw	r2, r3, #1084	; 0x43c
 800b752:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b756:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b75a:	6819      	ldr	r1, [r3, #0]
 800b75c:	4610      	mov	r0, r2
 800b75e:	f000 fe4b 	bl	800c3f8 <_ZNK6Config11getClientIdB5cxx11Ev>
 800b762:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800b766:	4619      	mov	r1, r3
 800b768:	4620      	mov	r0, r4
 800b76a:	f00a fb75 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800b76e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800b772:	4618      	mov	r0, r3
 800b774:	f00a fb64 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	lists[1] = createListString(getBrokerIP());
 800b778:	f107 030c 	add.w	r3, r7, #12
 800b77c:	2101      	movs	r1, #1
 800b77e:	4618      	mov	r0, r3
 800b780:	f001 f984 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800b784:	4604      	mov	r4, r0
 800b786:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b78a:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b78e:	6818      	ldr	r0, [r3, #0]
 800b790:	f000 fd4d 	bl	800c22e <_ZNK6Config11getBrokerIPEv>
 800b794:	4602      	mov	r2, r0
 800b796:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b79a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b7a4:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 800b7a8:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b7ac:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800b7b0:	6819      	ldr	r1, [r3, #0]
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f7ff fe8e 	bl	800b4d4 <_Z16createListStringB5cxx11St5arrayIhLj4EE>
 800b7b8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f00a fb4a 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800b7c4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f00a fb39 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	lists[2] = std::to_string(getBrokerPort());
 800b7ce:	f107 030c 	add.w	r3, r7, #12
 800b7d2:	2102      	movs	r1, #2
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f001 f959 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800b7da:	4604      	mov	r4, r0
 800b7dc:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b7e0:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b7e4:	6818      	ldr	r0, [r3, #0]
 800b7e6:	f000 fd3c 	bl	800c262 <_ZNK6Config13getBrokerPortEv>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b7f2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7ff fa91 	bl	800ad20 <_ZNSt7__cxx119to_stringEi>
 800b7fe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800b802:	4619      	mov	r1, r3
 800b804:	4620      	mov	r0, r4
 800b806:	f00a fb27 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800b80a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800b80e:	4618      	mov	r0, r3
 800b810:	f00a fb16 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	lists[3] = createListString(getIP());
 800b814:	f107 030c 	add.w	r3, r7, #12
 800b818:	2103      	movs	r1, #3
 800b81a:	4618      	mov	r0, r3
 800b81c:	f001 f936 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800b820:	4604      	mov	r4, r0
 800b822:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b826:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b82a:	6818      	ldr	r0, [r3, #0]
 800b82c:	f000 fd25 	bl	800c27a <_ZNK6Config5getIPEv>
 800b830:	4602      	mov	r2, r0
 800b832:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b836:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b840:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 800b844:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b848:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800b84c:	6819      	ldr	r1, [r3, #0]
 800b84e:	4610      	mov	r0, r2
 800b850:	f7ff fe40 	bl	800b4d4 <_Z16createListStringB5cxx11St5arrayIhLj4EE>
 800b854:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800b858:	4619      	mov	r1, r3
 800b85a:	4620      	mov	r0, r4
 800b85c:	f00a fafc 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800b860:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800b864:	4618      	mov	r0, r3
 800b866:	f00a faeb 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	lists[4] = createListString(getSubnet());
 800b86a:	f107 030c 	add.w	r3, r7, #12
 800b86e:	2104      	movs	r1, #4
 800b870:	4618      	mov	r0, r3
 800b872:	f001 f90b 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800b876:	4604      	mov	r4, r0
 800b878:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b87c:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b880:	6818      	ldr	r0, [r3, #0]
 800b882:	f000 fd34 	bl	800c2ee <_ZNK6Config9getSubnetEv>
 800b886:	4602      	mov	r2, r0
 800b888:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b88c:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800b890:	601a      	str	r2, [r3, #0]
 800b892:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b896:	f5a3 7275 	sub.w	r2, r3, #980	; 0x3d4
 800b89a:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b89e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800b8a2:	6819      	ldr	r1, [r3, #0]
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	f7ff fe15 	bl	800b4d4 <_Z16createListStringB5cxx11St5arrayIhLj4EE>
 800b8aa:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f00a fad1 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800b8b6:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f00a fac0 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	lists[5] = createListString(getGateway());
 800b8c0:	f107 030c 	add.w	r3, r7, #12
 800b8c4:	2105      	movs	r1, #5
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f001 f8e0 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b8d2:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b8d6:	6818      	ldr	r0, [r3, #0]
 800b8d8:	f000 fcec 	bl	800c2b4 <_ZNK6Config10getGatewayEv>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b8e2:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b8ec:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 800b8f0:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b8f4:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800b8f8:	6819      	ldr	r1, [r3, #0]
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	f7ff fdea 	bl	800b4d4 <_Z16createListStringB5cxx11St5arrayIhLj4EE>
 800b900:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800b904:	4619      	mov	r1, r3
 800b906:	4620      	mov	r0, r4
 800b908:	f00a faa6 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800b90c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800b910:	4618      	mov	r0, r3
 800b912:	f00a fa95 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	lists[6] = createListString(getDNS());
 800b916:	f107 030c 	add.w	r3, r7, #12
 800b91a:	2106      	movs	r1, #6
 800b91c:	4618      	mov	r0, r3
 800b91e:	f001 f8b5 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800b922:	4604      	mov	r4, r0
 800b924:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b928:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b92c:	6818      	ldr	r0, [r3, #0]
 800b92e:	f000 fcfb 	bl	800c328 <_ZNK6Config6getDNSEv>
 800b932:	4602      	mov	r2, r0
 800b934:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b938:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b93c:	601a      	str	r2, [r3, #0]
 800b93e:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b942:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 800b946:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b94a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800b94e:	6819      	ldr	r1, [r3, #0]
 800b950:	4610      	mov	r0, r2
 800b952:	f7ff fdbf 	bl	800b4d4 <_Z16createListStringB5cxx11St5arrayIhLj4EE>
 800b956:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800b95a:	4619      	mov	r1, r3
 800b95c:	4620      	mov	r0, r4
 800b95e:	f00a fa7b 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800b962:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800b966:	4618      	mov	r0, r3
 800b968:	f00a fa6a 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	lists[7] = createStringFromArray8len(getAnalogInputNames());
 800b96c:	f107 030c 	add.w	r3, r7, #12
 800b970:	2107      	movs	r1, #7
 800b972:	4618      	mov	r0, r3
 800b974:	f001 f88a 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800b978:	4604      	mov	r4, r0
 800b97a:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b97e:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800b982:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b986:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b98a:	6819      	ldr	r1, [r3, #0]
 800b98c:	4610      	mov	r0, r2
 800b98e:	f000 fd87 	bl	800c4a0 <_ZN6Config19getAnalogInputNamesB5cxx11Ev>
 800b992:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b996:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800b99a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800b99e:	4611      	mov	r1, r2
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7ff fe23 	bl	800b5ec <_Z25createStringFromArray8lenSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
 800b9a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f00a fa53 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800b9b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f00a fa42 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b9bc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7ff f9fa 	bl	800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
	lists[8] = createStringFromArray(getDigitalInputNames());
 800b9c6:	f107 030c 	add.w	r3, r7, #12
 800b9ca:	2108      	movs	r1, #8
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f001 f85d 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b9d8:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 800b9dc:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b9e0:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b9e4:	6819      	ldr	r1, [r3, #0]
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	f000 fd81 	bl	800c4ee <_ZN6Config20getDigitalInputNamesB5cxx11Ev>
 800b9ec:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800b9f0:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800b9f4:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff fdac 	bl	800b558 <_Z21createStringFromArraySt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>
 800ba00:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ba04:	4619      	mov	r1, r3
 800ba06:	4620      	mov	r0, r4
 800ba08:	f00a fa26 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800ba0c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ba10:	4618      	mov	r0, r3
 800ba12:	f00a fa15 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ba16:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7ff f9f8 	bl	800ae10 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
	lists[9] = createStringFromArray8len(getDigitalOutputNames());
 800ba20:	f107 030c 	add.w	r3, r7, #12
 800ba24:	2109      	movs	r1, #9
 800ba26:	4618      	mov	r0, r3
 800ba28:	f001 f830 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800ba32:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800ba36:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800ba3a:	6819      	ldr	r1, [r3, #0]
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	f000 fd66 	bl	800c50e <_ZN6Config21getDigitalOutputNamesB5cxx11Ev>
 800ba42:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800ba46:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ba4a:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800ba4e:	4611      	mov	r1, r2
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff fdcb 	bl	800b5ec <_Z25createStringFromArray8lenSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
 800ba56:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f00a f9fb 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800ba62:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800ba66:	4618      	mov	r0, r3
 800ba68:	f00a f9ea 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ba6c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff f9a2 	bl	800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
	lists[10] = getDHCPEnabled() ? std::to_string(1) : std::to_string(0);
 800ba76:	f107 030c 	add.w	r3, r7, #12
 800ba7a:	210a      	movs	r1, #10
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f001 f805 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800ba82:	4604      	mov	r4, r0
 800ba84:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800ba88:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800ba8c:	6818      	ldr	r0, [r3, #0]
 800ba8e:	f000 fc74 	bl	800c37a <_ZNK6Config14getDHCPEnabledEv>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00b      	beq.n	800bab0 <_ZN6Config11getInfoListEv+0x3d8>
 800ba98:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff f93e 	bl	800ad20 <_ZNSt7__cxx119to_stringEi>
 800baa4:	e00a      	b.n	800babc <_ZN6Config11getInfoListEv+0x3e4>
 800baa6:	bf00      	nop
 800baa8:	0801b2f8 	.word	0x0801b2f8
 800baac:	0801b2fc 	.word	0x0801b2fc
 800bab0:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800bab4:	2100      	movs	r1, #0
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7ff f932 	bl	800ad20 <_ZNSt7__cxx119to_stringEi>
 800babc:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800bac0:	4619      	mov	r1, r3
 800bac2:	4620      	mov	r0, r4
 800bac4:	f00a f9c8 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800bac8:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800bacc:	4618      	mov	r0, r3
 800bace:	f00a f9b7 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	for (size_t i = 0; i < lists.size(); i ++ ) {
 800bad2:	2300      	movs	r3, #0
 800bad4:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800bad8:	e01a      	b.n	800bb10 <_ZN6Config11getInfoListEv+0x438>
		data += comma;
 800bada:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800bade:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bae2:	4611      	mov	r1, r2
 800bae4:	4618      	mov	r0, r3
 800bae6:	f00a faf6 	bl	80160d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
		data += lists[i];
 800baea:	f107 030c 	add.w	r3, r7, #12
 800baee:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 ffca 	bl	800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>
 800baf8:	4602      	mov	r2, r0
 800bafa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bafe:	4611      	mov	r1, r2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f00a fae8 	bl	80160d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
	for (size_t i = 0; i < lists.size(); i ++ ) {
 800bb06:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800bb10:	f107 030c 	add.w	r3, r7, #12
 800bb14:	4618      	mov	r0, r3
 800bb16:	f000 ffc8 	bl	800caaa <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EE4sizeEv>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800bb20:	4293      	cmp	r3, r2
 800bb22:	bf34      	ite	cc
 800bb24:	2301      	movcc	r3, #1
 800bb26:	2300      	movcs	r3, #0
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1d5      	bne.n	800bada <_ZN6Config11getInfoListEv+0x402>
	}


	data = data+ "\r";
 800bb2e:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800bb32:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 800bb36:	4a20      	ldr	r2, [pc, #128]	; (800bbb8 <_ZN6Config11getInfoListEv+0x4e0>)
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f000 ffc1 	bl	800cac0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800bb3e:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 800bb42:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bb46:	4611      	mov	r1, r2
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f00a f985 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800bb4e:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800bb52:	4618      	mov	r0, r3
 800bb54:	f00a f974 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	char* result = new char[data.length() + 1]; // +1 for null terminator
 800bb58:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f00a f9ae 	bl	8015ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800bb62:	4603      	mov	r3, r0
 800bb64:	3301      	adds	r3, #1
 800bb66:	4618      	mov	r0, r3
 800bb68:	f00a f83d 	bl	8015be6 <_Znaj>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
	strcpy(result, data.c_str());
 800bb72:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bb76:	4618      	mov	r0, r3
 800bb78:	f00a fadc 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	4619      	mov	r1, r3
 800bb80:	f8d7 0580 	ldr.w	r0, [r7, #1408]	; 0x580
 800bb84:	f00c f9e1 	bl	8017f4a <strcpy>

	return result;
 800bb88:	f8d7 4580 	ldr.w	r4, [r7, #1408]	; 0x580
}
 800bb8c:	f107 030c 	add.w	r3, r7, #12
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7ff fd89 	bl	800b6a8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EED1Ev>
 800bb96:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f00a f950 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bba0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bba4:	4618      	mov	r0, r3
 800bba6:	f00a f94b 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return result;
 800bbaa:	4623      	mov	r3, r4
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	f207 578c 	addw	r7, r7, #1420	; 0x58c
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd90      	pop	{r4, r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	0801b300 	.word	0x0801b300

0800bbbc <_ZN6Config16extractIPAddressEP5cJSONPKc>:

std::array<uint8_t, 4> Config::extractIPAddress(cJSON* parent, const char* name) {
 800bbbc:	b590      	push	{r4, r7, lr}
 800bbbe:	b08b      	sub	sp, #44	; 0x2c
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
    std::array<uint8_t, 4> addressArray{};
 800bbc8:	2300      	movs	r3, #0
 800bbca:	617b      	str	r3, [r7, #20]
    cJSON* item = cJSON_GetObjectItemCaseSensitive(parent, name);
 800bbcc:	6879      	ldr	r1, [r7, #4]
 800bbce:	68b8      	ldr	r0, [r7, #8]
 800bbd0:	f7fa fba8 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800bbd4:	6238      	str	r0, [r7, #32]
    if (cJSON_IsArray(item)) {
 800bbd6:	6a38      	ldr	r0, [r7, #32]
 800bbd8:	f7fa fd29 	bl	800662e <cJSON_IsArray>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	bf14      	ite	ne
 800bbe2:	2301      	movne	r3, #1
 800bbe4:	2300      	moveq	r3, #0
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d024      	beq.n	800bc36 <_ZN6Config16extractIPAddressEP5cJSONPKc+0x7a>
        for (int i = 0; i < 4; ++i) {
 800bbec:	2300      	movs	r3, #0
 800bbee:	627b      	str	r3, [r7, #36]	; 0x24
 800bbf0:	e01e      	b.n	800bc30 <_ZN6Config16extractIPAddressEP5cJSONPKc+0x74>
            cJSON* byteItem = cJSON_GetArrayItem(item, i);
 800bbf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbf4:	6a38      	ldr	r0, [r7, #32]
 800bbf6:	f7fa fb39 	bl	800626c <cJSON_GetArrayItem>
 800bbfa:	61f8      	str	r0, [r7, #28]
            if (cJSON_IsNumber(byteItem)) {
 800bbfc:	69f8      	ldr	r0, [r7, #28]
 800bbfe:	f7fa fce8 	bl	80065d2 <cJSON_IsNumber>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	bf14      	ite	ne
 800bc08:	2301      	movne	r3, #1
 800bc0a:	2300      	moveq	r3, #0
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00b      	beq.n	800bc2a <_ZN6Config16extractIPAddressEP5cJSONPKc+0x6e>
                addressArray[i] = static_cast<uint8_t>(byteItem->valueint);
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	695c      	ldr	r4, [r3, #20]
 800bc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc18:	f107 0314 	add.w	r3, r7, #20
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f000 fefe 	bl	800ca20 <_ZNSt5arrayIhLj4EEixEj>
 800bc24:	4603      	mov	r3, r0
 800bc26:	b2e2      	uxtb	r2, r4
 800bc28:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 4; ++i) {
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	dddd      	ble.n	800bbf2 <_ZN6Config16extractIPAddressEP5cJSONPKc+0x36>
            }
        }
    }
    return addressArray;
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	61bb      	str	r3, [r7, #24]
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	7e3a      	ldrb	r2, [r7, #24]
 800bc3e:	f362 0307 	bfi	r3, r2, #0, #8
 800bc42:	7e7a      	ldrb	r2, [r7, #25]
 800bc44:	f362 230f 	bfi	r3, r2, #8, #8
 800bc48:	7eba      	ldrb	r2, [r7, #26]
 800bc4a:	f362 4317 	bfi	r3, r2, #16, #8
 800bc4e:	7efa      	ldrb	r2, [r7, #27]
 800bc50:	f362 631f 	bfi	r3, r2, #24, #8
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	372c      	adds	r7, #44	; 0x2c
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd90      	pop	{r4, r7, pc}

0800bc5c <_ZN6Config18setNetworkSettingsEP5cJSON>:



void Config::setNetworkSettings(cJSON* data) {
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b088      	sub	sp, #32
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
    cJSON* statusJson = cJSON_GetObjectItemCaseSensitive(data, "status");
 800bc66:	492e      	ldr	r1, [pc, #184]	; (800bd20 <_ZN6Config18setNetworkSettingsEP5cJSON+0xc4>)
 800bc68:	6838      	ldr	r0, [r7, #0]
 800bc6a:	f7fa fb5b 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800bc6e:	61f8      	str	r0, [r7, #28]
    if (cJSON_IsBool(statusJson)) {
 800bc70:	69f8      	ldr	r0, [r7, #28]
 800bc72:	f7fa fc96 	bl	80065a2 <cJSON_IsBool>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	bf14      	ite	ne
 800bc7c:	2301      	movne	r3, #1
 800bc7e:	2300      	moveq	r3, #0
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d047      	beq.n	800bd16 <_ZN6Config18setNetworkSettingsEP5cJSON+0xba>
    	 bool status = cJSON_IsTrue(statusJson) ? true : false;
 800bc86:	69f8      	ldr	r0, [r7, #28]
 800bc88:	f7fa fc74 	bl	8006574 <cJSON_IsTrue>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	bf14      	ite	ne
 800bc92:	2301      	movne	r3, #1
 800bc94:	2300      	moveq	r3, #0
 800bc96:	76fb      	strb	r3, [r7, #27]
       // bool status = cJSON_IsTrue(statusJson);


        if (!status) {
 800bc98:	7efb      	ldrb	r3, [r7, #27]
 800bc9a:	f083 0301 	eor.w	r3, r3, #1
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d033      	beq.n	800bd0c <_ZN6Config18setNetworkSettingsEP5cJSON+0xb0>
            setIP(extractIPAddress(data, "ip"));
 800bca4:	4a1f      	ldr	r2, [pc, #124]	; (800bd24 <_ZN6Config18setNetworkSettingsEP5cJSON+0xc8>)
 800bca6:	6839      	ldr	r1, [r7, #0]
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7ff ff87 	bl	800bbbc <_ZN6Config16extractIPAddressEP5cJSONPKc>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	60bb      	str	r3, [r7, #8]
 800bcb2:	f107 0308 	add.w	r3, r7, #8
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fc61 	bl	800c580 <_ZN6Config5setIPERKSt5arrayIhLj4EE>
            setGateway(extractIPAddress(data, "gateway"));
 800bcbe:	4a1a      	ldr	r2, [pc, #104]	; (800bd28 <_ZN6Config18setNetworkSettingsEP5cJSON+0xcc>)
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff ff7a 	bl	800bbbc <_ZN6Config16extractIPAddressEP5cJSONPKc>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	f107 030c 	add.w	r3, r7, #12
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fc69 	bl	800c5aa <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>
            setSubnet(extractIPAddress(data, "subnet"));
 800bcd8:	4a14      	ldr	r2, [pc, #80]	; (800bd2c <_ZN6Config18setNetworkSettingsEP5cJSON+0xd0>)
 800bcda:	6839      	ldr	r1, [r7, #0]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff ff6d 	bl	800bbbc <_ZN6Config16extractIPAddressEP5cJSONPKc>
 800bce2:	4603      	mov	r3, r0
 800bce4:	613b      	str	r3, [r7, #16]
 800bce6:	f107 0310 	add.w	r3, r7, #16
 800bcea:	4619      	mov	r1, r3
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 fc71 	bl	800c5d4 <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>
            setDNS(extractIPAddress(data, "dns"));
 800bcf2:	4a0f      	ldr	r2, [pc, #60]	; (800bd30 <_ZN6Config18setNetworkSettingsEP5cJSON+0xd4>)
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff ff60 	bl	800bbbc <_ZN6Config16extractIPAddressEP5cJSONPKc>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	f107 0314 	add.w	r3, r7, #20
 800bd04:	4619      	mov	r1, r3
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fc79 	bl	800c5fe <_ZN6Config6setDNSERKSt5arrayIhLj4EE>
        }

        setDHCPEnabled(status);
 800bd0c:	7efb      	ldrb	r3, [r7, #27]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fc98 	bl	800c646 <_ZN6Config14setDHCPEnabledEb>
    }
}
 800bd16:	bf00      	nop
 800bd18:	3720      	adds	r7, #32
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	0801b304 	.word	0x0801b304
 800bd24:	0801b30c 	.word	0x0801b30c
 800bd28:	0801b310 	.word	0x0801b310
 800bd2c:	0801b318 	.word	0x0801b318
 800bd30:	0801b320 	.word	0x0801b320

0800bd34 <_ZN6Config13setMQTTBrokerEP5cJSON>:


void Config::setMQTTBroker(cJSON* data) {
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
	if (data == nullptr) return;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d026      	beq.n	800bd92 <_ZN6Config13setMQTTBrokerEP5cJSON+0x5e>
	cJSON* numItem = cJSON_GetObjectItemCaseSensitive(data, "port");
 800bd44:	4915      	ldr	r1, [pc, #84]	; (800bd9c <_ZN6Config13setMQTTBrokerEP5cJSON+0x68>)
 800bd46:	6838      	ldr	r0, [r7, #0]
 800bd48:	f7fa faec 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800bd4c:	6178      	str	r0, [r7, #20]
	        if (cJSON_IsNumber(numItem)) {
 800bd4e:	6978      	ldr	r0, [r7, #20]
 800bd50:	f7fa fc3f 	bl	80065d2 <cJSON_IsNumber>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	bf14      	ite	ne
 800bd5a:	2301      	movne	r3, #1
 800bd5c:	2300      	moveq	r3, #0
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d017      	beq.n	800bd94 <_ZN6Config13setMQTTBrokerEP5cJSON+0x60>
	            int number = numItem->valueint;
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	695b      	ldr	r3, [r3, #20]
 800bd68:	613b      	str	r3, [r7, #16]
	            setBrokerPort(number);
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fbf1 	bl	800c558 <_ZN6Config13setBrokerPortEt>
	            setBrokerIP(extractIPAddress(data, "broker_ip"));
 800bd76:	4a0a      	ldr	r2, [pc, #40]	; (800bda0 <_ZN6Config13setMQTTBrokerEP5cJSON+0x6c>)
 800bd78:	6839      	ldr	r1, [r7, #0]
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7ff ff1e 	bl	800bbbc <_ZN6Config16extractIPAddressEP5cJSONPKc>
 800bd80:	4603      	mov	r3, r0
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	4619      	mov	r1, r3
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fbcf 	bl	800c52e <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>
 800bd90:	e000      	b.n	800bd94 <_ZN6Config13setMQTTBrokerEP5cJSON+0x60>
	if (data == nullptr) return;
 800bd92:	bf00      	nop
	  }

}
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	0801b324 	.word	0x0801b324
 800bda0:	0801b32c 	.word	0x0801b32c

0800bda4 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON>:



void Config::setAnalogInputNamesFromJson(cJSON* jsonData) {
 800bda4:	b5b0      	push	{r4, r5, r7, lr}
 800bda6:	b0be      	sub	sp, #248	; 0xf8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
    if (jsonData == nullptr) {
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 808f 	beq.w	800bed4 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x130>
        return; // Input is null, handle error as needed
    }

    cJSON* analogInputsJson = cJSON_GetObjectItemCaseSensitive(jsonData, "data");
 800bdb6:	494a      	ldr	r1, [pc, #296]	; (800bee0 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x13c>)
 800bdb8:	6838      	ldr	r0, [r7, #0]
 800bdba:	f7fa fab3 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800bdbe:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    if (!cJSON_IsArray(analogInputsJson)) {
 800bdc2:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800bdc6:	f7fa fc32 	bl	800662e <cJSON_IsArray>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	bf0c      	ite	eq
 800bdd0:	2301      	moveq	r3, #1
 800bdd2:	2300      	movne	r3, #0
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d17e      	bne.n	800bed8 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x134>
        return; // Not an array, handle error as needed
    }

    std::array<std::string, MAX_ANALOG_INPUTS> analogInputs;
 800bdda:	f107 030c 	add.w	r3, r7, #12
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe ffd7 	bl	800ad92 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>
    size_t index = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    cJSON* analogInputJson;

    // Iterate over the analog input names array
    cJSON_ArrayForEach(analogInputJson, analogInputsJson) {
 800bdea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x56>
 800bdf2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	e000      	b.n	800bdfc <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x58>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800be00:	e056      	b.n	800beb0 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x10c>
        if (cJSON_IsString(analogInputJson) && (analogInputJson->valuestring != NULL)) {
 800be02:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800be06:	f7fa fbfb 	bl	8006600 <cJSON_IsString>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d006      	beq.n	800be1e <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x7a>
 800be10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d001      	beq.n	800be1e <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x7a>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e000      	b.n	800be20 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x7c>
 800be1e:	2300      	movs	r3, #0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d040      	beq.n	800bea6 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x102>
            if (index < MAX_ANALOG_INPUTS) {
 800be24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be28:	2b07      	cmp	r3, #7
 800be2a:	d846      	bhi.n	800beba <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x116>
                size_t len = strlen(analogInputJson->valuestring);
 800be2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	4618      	mov	r0, r3
 800be34:	f7f4 fa2c 	bl	8000290 <strlen>
 800be38:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (len >= 2 && len < 10) {
 800be3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be40:	2b01      	cmp	r3, #1
 800be42:	d92b      	bls.n	800be9c <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0xf8>
 800be44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be48:	2b09      	cmp	r3, #9
 800be4a:	d827      	bhi.n	800be9c <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0xf8>
                analogInputs[index] = std::string(analogInputJson->valuestring);
 800be4c:	f107 030c 	add.w	r3, r7, #12
 800be50:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800be54:	4618      	mov	r0, r3
 800be56:	f7fc ff95 	bl	8008d84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 800be5a:	4605      	mov	r5, r0
 800be5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be60:	691c      	ldr	r4, [r3, #16]
 800be62:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800be66:	4618      	mov	r0, r3
 800be68:	f009 febf 	bl	8015bea <_ZNSaIcEC1Ev>
 800be6c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800be70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800be74:	4621      	mov	r1, r4
 800be76:	4618      	mov	r0, r3
 800be78:	f00a f9ce 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800be7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800be80:	4619      	mov	r1, r3
 800be82:	4628      	mov	r0, r5
 800be84:	f009 ffe8 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800be88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800be8c:	4618      	mov	r0, r3
 800be8e:	f009 ffd7 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800be92:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800be96:	4618      	mov	r0, r3
 800be98:	f009 fea9 	bl	8015bee <_ZNSaIcED1Ev>
                }
                ++index;
 800be9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bea0:	3301      	adds	r3, #1
 800bea2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    cJSON_ArrayForEach(analogInputJson, analogInputsJson) {
 800bea6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800beb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1a4      	bne.n	800be02 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x5e>
 800beb8:	e000      	b.n	800bebc <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x118>
            } else {
                break; // More items in the list than MAX_ANALOG_INPUTS, handle as needed
 800beba:	bf00      	nop
            }
        }
    }

    setAnalogInputNames(analogInputs);
 800bebc:	f107 030c 	add.w	r3, r7, #12
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fc7b 	bl	800c7be <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
}
 800bec8:	f107 030c 	add.w	r3, r7, #12
 800becc:	4618      	mov	r0, r3
 800bece:	f7fe ff74 	bl	800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800bed2:	e002      	b.n	800beda <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x136>
        return; // Input is null, handle error as needed
 800bed4:	bf00      	nop
 800bed6:	e000      	b.n	800beda <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x136>
        return; // Not an array, handle error as needed
 800bed8:	bf00      	nop
}
 800beda:	37f8      	adds	r7, #248	; 0xf8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bdb0      	pop	{r4, r5, r7, pc}
 800bee0:	0801b338 	.word	0x0801b338

0800bee4 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON>:


void Config::setDigitalInputNamesFromJson(cJSON* jsonData) {
 800bee4:	b5b0      	push	{r4, r5, r7, lr}
 800bee6:	b0ee      	sub	sp, #440	; 0x1b8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800beee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800bef2:	6018      	str	r0, [r3, #0]
 800bef4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800bef8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800befc:	6019      	str	r1, [r3, #0]
    if (jsonData == nullptr) {
 800befe:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800bf02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 8096 	beq.w	800c03a <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x156>
        return; // Input is null, handle error as needed
    }

    cJSON* digitalInputsJson = cJSON_GetObjectItemCaseSensitive(jsonData, "data");
 800bf0e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800bf12:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800bf16:	494c      	ldr	r1, [pc, #304]	; (800c048 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x164>)
 800bf18:	6818      	ldr	r0, [r3, #0]
 800bf1a:	f7fa fa03 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800bf1e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    if (!cJSON_IsArray(digitalInputsJson)) {
 800bf22:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800bf26:	f7fa fb82 	bl	800662e <cJSON_IsArray>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	bf0c      	ite	eq
 800bf30:	2301      	moveq	r3, #1
 800bf32:	2300      	movne	r3, #0
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f040 8081 	bne.w	800c03e <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x15a>
        return; // Not an array, handle error as needed
    }

    std::array<std::string, MAX_DIGITAL_INPUTS> digitalInputs;
 800bf3c:	f107 030c 	add.w	r3, r7, #12
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fe ff51 	bl	800ade8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev>
    size_t index = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    cJSON* digitalInputJson;

    // Iterate over the analog input names array
    cJSON_ArrayForEach(digitalInputJson, digitalInputsJson) {
 800bf4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d003      	beq.n	800bf5c <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x78>
 800bf54:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	e000      	b.n	800bf5e <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x7a>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800bf62:	e056      	b.n	800c012 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x12e>
            if (cJSON_IsString(digitalInputJson) && (digitalInputJson->valuestring != NULL)) {
 800bf64:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 800bf68:	f7fa fb4a 	bl	8006600 <cJSON_IsString>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d006      	beq.n	800bf80 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x9c>
 800bf72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d001      	beq.n	800bf80 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x9c>
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e000      	b.n	800bf82 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x9e>
 800bf80:	2300      	movs	r3, #0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d040      	beq.n	800c008 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x124>
                size_t valueStringLength = strlen(digitalInputJson->valuestring);
 800bf86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7f4 f97f 	bl	8000290 <strlen>
 800bf92:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
                // Check if the string length is within the specified bounds
                if (valueStringLength >= 2 && valueStringLength <= 8) {
 800bf96:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d934      	bls.n	800c008 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x124>
 800bf9e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800bfa2:	2b08      	cmp	r3, #8
 800bfa4:	d830      	bhi.n	800c008 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x124>
                    if (index < MAX_DIGITAL_INPUTS) {
 800bfa6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800bfaa:	2b0f      	cmp	r3, #15
 800bfac:	d827      	bhi.n	800bffe <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x11a>
                        digitalInputs[index] = std::string(digitalInputJson->valuestring);
 800bfae:	f107 030c 	add.w	r3, r7, #12
 800bfb2:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fc fed5 	bl	8008d66 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800bfc2:	691c      	ldr	r4, [r3, #16]
 800bfc4:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f009 fe0e 	bl	8015bea <_ZNSaIcEC1Ev>
 800bfce:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800bfd2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f00a f91d 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bfde:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f009 ff37 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800bfea:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800bfee:	4618      	mov	r0, r3
 800bff0:	f009 ff26 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bff4:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800bff8:	4618      	mov	r0, r3
 800bffa:	f009 fdf8 	bl	8015bee <_ZNSaIcED1Ev>
                    }
                     ++index;
 800bffe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800c002:	3301      	adds	r3, #1
 800c004:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    cJSON_ArrayForEach(digitalInputJson, digitalInputsJson) {
 800c008:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800c012:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1a4      	bne.n	800bf64 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x80>
                }
                // Optionally, handle the case where the string does not meet the length requirements
            }
        }

    setDigitalInputNames(digitalInputs);
 800c01a:	f107 020c 	add.w	r2, r7, #12
 800c01e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800c022:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800c026:	4611      	mov	r1, r2
 800c028:	6818      	ldr	r0, [r3, #0]
 800c02a:	f000 fbf6 	bl	800c81a <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>
}
 800c02e:	f107 030c 	add.w	r3, r7, #12
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe feec 	bl	800ae10 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
 800c038:	e002      	b.n	800c040 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x15c>
        return; // Input is null, handle error as needed
 800c03a:	bf00      	nop
 800c03c:	e000      	b.n	800c040 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x15c>
        return; // Not an array, handle error as needed
 800c03e:	bf00      	nop
}
 800c040:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800c044:	46bd      	mov	sp, r7
 800c046:	bdb0      	pop	{r4, r5, r7, pc}
 800c048:	0801b338 	.word	0x0801b338

0800c04c <_ZN6Config21setRelayNamesFromJsonEP5cJSON>:


void Config:: setRelayNamesFromJson(cJSON* jsonData){
 800c04c:	b5b0      	push	{r4, r5, r7, lr}
 800c04e:	b0be      	sub	sp, #248	; 0xf8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
	 if (jsonData == nullptr) {
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 808f 	beq.w	800c17c <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x130>
	        return; // Input is null, handle error as needed
	    }

	    cJSON* JsonData = cJSON_GetObjectItemCaseSensitive(jsonData, "data");
 800c05e:	494a      	ldr	r1, [pc, #296]	; (800c188 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x13c>)
 800c060:	6838      	ldr	r0, [r7, #0]
 800c062:	f7fa f95f 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800c066:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
	    if (!cJSON_IsArray(JsonData)) {
 800c06a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800c06e:	f7fa fade 	bl	800662e <cJSON_IsArray>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	bf0c      	ite	eq
 800c078:	2301      	moveq	r3, #1
 800c07a:	2300      	movne	r3, #0
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d17e      	bne.n	800c180 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x134>
	        return; // Not an array, handle error as needed
	    }

	    std::array<std::string, MAX_DIGITAL_OUTPUTS> relayList;
 800c082:	f107 030c 	add.w	r3, r7, #12
 800c086:	4618      	mov	r0, r3
 800c088:	f7fe fe83 	bl	800ad92 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>
	    size_t index = 0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	    cJSON* Json;

	    // Iterate over the analog input names array
	    cJSON_ArrayForEach(Json, JsonData) {
 800c092:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x56>
 800c09a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	e000      	b.n	800c0a4 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x58>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c0a8:	e056      	b.n	800c158 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x10c>
	        if (cJSON_IsString(Json) && (Json->valuestring != NULL)) {
 800c0aa:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c0ae:	f7fa faa7 	bl	8006600 <cJSON_IsString>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d006      	beq.n	800c0c6 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x7a>
 800c0b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d001      	beq.n	800c0c6 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x7a>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e000      	b.n	800c0c8 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x7c>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d040      	beq.n	800c14e <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x102>
	            if (index < MAX_DIGITAL_OUTPUTS) {
 800c0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0d0:	2b07      	cmp	r3, #7
 800c0d2:	d846      	bhi.n	800c162 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x116>
	            	size_t len = strlen(Json->valuestring);
 800c0d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7f4 f8d8 	bl	8000290 <strlen>
 800c0e0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	            	if (len >= 2 && len < 10) {
 800c0e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d92b      	bls.n	800c144 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0xf8>
 800c0ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0f0:	2b09      	cmp	r3, #9
 800c0f2:	d827      	bhi.n	800c144 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0xf8>

	                relayList[index] = std::string(Json->valuestring);
 800c0f4:	f107 030c 	add.w	r3, r7, #12
 800c0f8:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fc fe41 	bl	8008d84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 800c102:	4605      	mov	r5, r0
 800c104:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c108:	691c      	ldr	r4, [r3, #16]
 800c10a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c10e:	4618      	mov	r0, r3
 800c110:	f009 fd6b 	bl	8015bea <_ZNSaIcEC1Ev>
 800c114:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800c118:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c11c:	4621      	mov	r1, r4
 800c11e:	4618      	mov	r0, r3
 800c120:	f00a f87a 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800c124:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c128:	4619      	mov	r1, r3
 800c12a:	4628      	mov	r0, r5
 800c12c:	f009 fe94 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800c130:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c134:	4618      	mov	r0, r3
 800c136:	f009 fe83 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c13a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c13e:	4618      	mov	r0, r3
 800c140:	f009 fd55 	bl	8015bee <_ZNSaIcED1Ev>
	            	}
	                ++index;
 800c144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c148:	3301      	adds	r3, #1
 800c14a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	    cJSON_ArrayForEach(Json, JsonData) {
 800c14e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c158:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1a4      	bne.n	800c0aa <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x5e>
 800c160:	e000      	b.n	800c164 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x118>
	            } else {
	                break; // More items in the list than MAX_ANALOG_INPUTS, handle as needed
 800c162:	bf00      	nop
	            }
	        }
	    }

	    setDigitalOutputNames(relayList);
 800c164:	f107 030c 	add.w	r3, r7, #12
 800c168:	4619      	mov	r1, r3
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fb6c 	bl	800c848 <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
}
 800c170:	f107 030c 	add.w	r3, r7, #12
 800c174:	4618      	mov	r0, r3
 800c176:	f7fe fe20 	bl	800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800c17a:	e002      	b.n	800c182 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x136>
	        return; // Input is null, handle error as needed
 800c17c:	bf00      	nop
 800c17e:	e000      	b.n	800c182 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x136>
	        return; // Not an array, handle error as needed
 800c180:	bf00      	nop
}
 800c182:	37f8      	adds	r7, #248	; 0xf8
 800c184:	46bd      	mov	sp, r7
 800c186:	bdb0      	pop	{r4, r5, r7, pc}
 800c188:	0801b338 	.word	0x0801b338

0800c18c <_ZN6Config20setDHCPNetworkConfigEP13wiz_NetInfo_t>:

void Config::setDHCPNetworkConfig(wiz_NetInfo* net_info) {
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
    std::array<uint8_t, 4> ip = {net_info->ip[0], net_info->ip[1], net_info->ip[2], net_info->ip[3]};
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	799b      	ldrb	r3, [r3, #6]
 800c19a:	753b      	strb	r3, [r7, #20]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	79db      	ldrb	r3, [r3, #7]
 800c1a0:	757b      	strb	r3, [r7, #21]
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	7a1b      	ldrb	r3, [r3, #8]
 800c1a6:	75bb      	strb	r3, [r7, #22]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	7a5b      	ldrb	r3, [r3, #9]
 800c1ac:	75fb      	strb	r3, [r7, #23]
    std::array<uint8_t, 4> gateway = {net_info->gw[0], net_info->gw[1], net_info->gw[2], net_info->gw[3]};
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	7b9b      	ldrb	r3, [r3, #14]
 800c1b2:	743b      	strb	r3, [r7, #16]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	7bdb      	ldrb	r3, [r3, #15]
 800c1b8:	747b      	strb	r3, [r7, #17]
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	7c1b      	ldrb	r3, [r3, #16]
 800c1be:	74bb      	strb	r3, [r7, #18]
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	7c5b      	ldrb	r3, [r3, #17]
 800c1c4:	74fb      	strb	r3, [r7, #19]
    std::array<uint8_t, 4> subnet = {net_info->sn[0], net_info->sn[1], net_info->sn[2], net_info->sn[3]};
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	7a9b      	ldrb	r3, [r3, #10]
 800c1ca:	733b      	strb	r3, [r7, #12]
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	7adb      	ldrb	r3, [r3, #11]
 800c1d0:	737b      	strb	r3, [r7, #13]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	7b1b      	ldrb	r3, [r3, #12]
 800c1d6:	73bb      	strb	r3, [r7, #14]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	7b5b      	ldrb	r3, [r3, #13]
 800c1dc:	73fb      	strb	r3, [r7, #15]
    std::array<uint8_t, 4> dns = {net_info->dns[0], net_info->dns[1], net_info->dns[2], net_info->dns[3]};
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	7c9b      	ldrb	r3, [r3, #18]
 800c1e2:	723b      	strb	r3, [r7, #8]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	7cdb      	ldrb	r3, [r3, #19]
 800c1e8:	727b      	strb	r3, [r7, #9]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	7d1b      	ldrb	r3, [r3, #20]
 800c1ee:	72bb      	strb	r3, [r7, #10]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	7d5b      	ldrb	r3, [r3, #21]
 800c1f4:	72fb      	strb	r3, [r7, #11]

    setIP(ip);
 800c1f6:	f107 0314 	add.w	r3, r7, #20
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f9bf 	bl	800c580 <_ZN6Config5setIPERKSt5arrayIhLj4EE>
    setGateway(gateway);
 800c202:	f107 0310 	add.w	r3, r7, #16
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f9ce 	bl	800c5aa <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>
    setSubnet(subnet);
 800c20e:	f107 030c 	add.w	r3, r7, #12
 800c212:	4619      	mov	r1, r3
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f9dd 	bl	800c5d4 <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>
    setDNS(dns);
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f9ec 	bl	800c5fe <_ZN6Config6setDNSERKSt5arrayIhLj4EE>
}
 800c226:	bf00      	nop
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <_ZNK6Config11getBrokerIPEv>:


// Getters
std::array<uint8_t, 4> Config::getBrokerIP() const { return broker_ip; }
 800c22e:	b480      	push	{r7}
 800c230:	b085      	sub	sp, #20
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	60fb      	str	r3, [r7, #12]
 800c23c:	2300      	movs	r3, #0
 800c23e:	7b3a      	ldrb	r2, [r7, #12]
 800c240:	f362 0307 	bfi	r3, r2, #0, #8
 800c244:	7b7a      	ldrb	r2, [r7, #13]
 800c246:	f362 230f 	bfi	r3, r2, #8, #8
 800c24a:	7bba      	ldrb	r2, [r7, #14]
 800c24c:	f362 4317 	bfi	r3, r2, #16, #8
 800c250:	7bfa      	ldrb	r2, [r7, #15]
 800c252:	f362 631f 	bfi	r3, r2, #24, #8
 800c256:	4618      	mov	r0, r3
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <_ZNK6Config13getBrokerPortEv>:
uint16_t Config::getBrokerPort() const { return broker_port; }
 800c262:	b480      	push	{r7}
 800c264:	b083      	sub	sp, #12
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	891b      	ldrh	r3, [r3, #8]
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <_ZNK6Config5getIPEv>:
std::array<uint8_t, 4> Config::getIP() const { return ip; }
 800c27a:	b480      	push	{r7}
 800c27c:	b085      	sub	sp, #20
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	f107 030c 	add.w	r3, r7, #12
 800c288:	320a      	adds	r2, #10
 800c28a:	6810      	ldr	r0, [r2, #0]
 800c28c:	6018      	str	r0, [r3, #0]
 800c28e:	2300      	movs	r3, #0
 800c290:	7b3a      	ldrb	r2, [r7, #12]
 800c292:	f362 0307 	bfi	r3, r2, #0, #8
 800c296:	7b7a      	ldrb	r2, [r7, #13]
 800c298:	f362 230f 	bfi	r3, r2, #8, #8
 800c29c:	7bba      	ldrb	r2, [r7, #14]
 800c29e:	f362 4317 	bfi	r3, r2, #16, #8
 800c2a2:	7bfa      	ldrb	r2, [r7, #15]
 800c2a4:	f362 631f 	bfi	r3, r2, #24, #8
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <_ZNK6Config10getGatewayEv>:
std::array<uint8_t, 4> Config::getGateway() const { return gateway; }
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	f107 030c 	add.w	r3, r7, #12
 800c2c2:	320e      	adds	r2, #14
 800c2c4:	6810      	ldr	r0, [r2, #0]
 800c2c6:	6018      	str	r0, [r3, #0]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	7b3a      	ldrb	r2, [r7, #12]
 800c2cc:	f362 0307 	bfi	r3, r2, #0, #8
 800c2d0:	7b7a      	ldrb	r2, [r7, #13]
 800c2d2:	f362 230f 	bfi	r3, r2, #8, #8
 800c2d6:	7bba      	ldrb	r2, [r7, #14]
 800c2d8:	f362 4317 	bfi	r3, r2, #16, #8
 800c2dc:	7bfa      	ldrb	r2, [r7, #15]
 800c2de:	f362 631f 	bfi	r3, r2, #24, #8
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3714      	adds	r7, #20
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <_ZNK6Config9getSubnetEv>:
std::array<uint8_t, 4> Config::getSubnet() const { return subnet; }
 800c2ee:	b480      	push	{r7}
 800c2f0:	b085      	sub	sp, #20
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	f107 030c 	add.w	r3, r7, #12
 800c2fc:	3212      	adds	r2, #18
 800c2fe:	6810      	ldr	r0, [r2, #0]
 800c300:	6018      	str	r0, [r3, #0]
 800c302:	2300      	movs	r3, #0
 800c304:	7b3a      	ldrb	r2, [r7, #12]
 800c306:	f362 0307 	bfi	r3, r2, #0, #8
 800c30a:	7b7a      	ldrb	r2, [r7, #13]
 800c30c:	f362 230f 	bfi	r3, r2, #8, #8
 800c310:	7bba      	ldrb	r2, [r7, #14]
 800c312:	f362 4317 	bfi	r3, r2, #16, #8
 800c316:	7bfa      	ldrb	r2, [r7, #15]
 800c318:	f362 631f 	bfi	r3, r2, #24, #8
 800c31c:	4618      	mov	r0, r3
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <_ZNK6Config6getDNSEv>:
std::array<uint8_t, 4> Config::getDNS() const { return dns; }
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	f107 030c 	add.w	r3, r7, #12
 800c336:	3216      	adds	r2, #22
 800c338:	6810      	ldr	r0, [r2, #0]
 800c33a:	6018      	str	r0, [r3, #0]
 800c33c:	2300      	movs	r3, #0
 800c33e:	7b3a      	ldrb	r2, [r7, #12]
 800c340:	f362 0307 	bfi	r3, r2, #0, #8
 800c344:	7b7a      	ldrb	r2, [r7, #13]
 800c346:	f362 230f 	bfi	r3, r2, #8, #8
 800c34a:	7bba      	ldrb	r2, [r7, #14]
 800c34c:	f362 4317 	bfi	r3, r2, #16, #8
 800c350:	7bfa      	ldrb	r2, [r7, #15]
 800c352:	f362 631f 	bfi	r3, r2, #24, #8
 800c356:	4618      	mov	r0, r3
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr

0800c362 <_ZNK6Config20getKeepAliveIntervalEv>:
uint16_t Config::getKeepAliveInterval() const { return keep_alive_interval; }
 800c362:	b480      	push	{r7}
 800c364:	b083      	sub	sp, #12
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	8b5b      	ldrh	r3, [r3, #26]
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <_ZNK6Config14getDHCPEnabledEv>:
bool Config::getDHCPEnabled() const { return dhcp_enabled; }
 800c37a:	b480      	push	{r7}
 800c37c:	b083      	sub	sp, #12
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	7f1b      	ldrb	r3, [r3, #28]
 800c386:	4618      	mov	r0, r3
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <_ZNK6Config13getIpAssignedEv>:
bool Config::getIpAssigned() const {return ip_assigned;}
 800c392:	b480      	push	{r7}
 800c394:	b083      	sub	sp, #12
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	7f5b      	ldrb	r3, [r3, #29]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	370c      	adds	r7, #12
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <_ZNK6Config19getExtentionEnabledEv>:
bool Config::getExtentionEnabled() const {return extentionEnabled;}
 800c3aa:	b480      	push	{r7}
 800c3ac:	b083      	sub	sp, #12
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	7f9b      	ldrb	r3, [r3, #30]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <_ZNK6Config15getIntervalTimeEv>:

uint32_t Config::getIntervalTime()  const { return interval_time;}
 800c3c2:	b480      	push	{r7}
 800c3c4:	b083      	sub	sp, #12
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a1b      	ldr	r3, [r3, #32]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	370c      	adds	r7, #12
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <_ZNK6Config11getUsernameB5cxx11Ev>:
std::string Config::getUsername()const { return username; }
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b082      	sub	sp, #8
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	6039      	str	r1, [r7, #0]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	3324      	adds	r3, #36	; 0x24
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f009 fee0 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <_ZNK6Config11getClientIdB5cxx11Ev>:
std::string Config::getClientId()const  { return clientId; }
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	333c      	adds	r3, #60	; 0x3c
 800c406:	4619      	mov	r1, r3
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f009 fed1 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <_ZNK6Config11getPasswordB5cxx11Ev>:
std::string Config::getPassword()const { return password; }
 800c416:	b580      	push	{r7, lr}
 800c418:	b082      	sub	sp, #8
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	6039      	str	r1, [r7, #0]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	3354      	adds	r3, #84	; 0x54
 800c424:	4619      	mov	r1, r3
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f009 fec2 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <_ZNK6Config17getTopicSubscribeB5cxx11Ev>:
std::string Config::getTopicSubscribe()const { return topic_subscribe; }
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	336c      	adds	r3, #108	; 0x6c
 800c442:	4619      	mov	r1, r3
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f009 feb3 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <_ZNK6Config15getTopicPublishB5cxx11Ev>:
std::string Config::getTopicPublish()const {return topic_publish;}
 800c452:	b580      	push	{r7, lr}
 800c454:	b082      	sub	sp, #8
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	6039      	str	r1, [r7, #0]
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	3384      	adds	r3, #132	; 0x84
 800c460:	4619      	mov	r1, r3
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f009 fea4 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>:
 800c470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2507      	movs	r5, #7
 800c47e:	683c      	ldr	r4, [r7, #0]
 800c480:	461e      	mov	r6, r3
 800c482:	e006      	b.n	800c492 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_+0x22>
 800c484:	4621      	mov	r1, r4
 800c486:	4630      	mov	r0, r6
 800c488:	f009 fe92 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c48c:	3618      	adds	r6, #24
 800c48e:	3418      	adds	r4, #24
 800c490:	3d01      	subs	r5, #1
 800c492:	2d00      	cmp	r5, #0
 800c494:	daf6      	bge.n	800c484 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_+0x14>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4618      	mov	r0, r3
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4a0 <_ZN6Config19getAnalogInputNamesB5cxx11Ev>:
int Config::getQoS() const { return qos; }
std::array<std::string, MAX_ANALOG_INPUTS> Config::getAnalogInputNames() { return analog_input_names; }
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	33a0      	adds	r3, #160	; 0xa0
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff ffdd 	bl	800c470 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_>:
 800c4be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4c0:	b083      	sub	sp, #12
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	250f      	movs	r5, #15
 800c4cc:	683c      	ldr	r4, [r7, #0]
 800c4ce:	461e      	mov	r6, r3
 800c4d0:	e006      	b.n	800c4e0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_+0x22>
 800c4d2:	4621      	mov	r1, r4
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f009 fe6b 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c4da:	3618      	adds	r6, #24
 800c4dc:	3418      	adds	r4, #24
 800c4de:	3d01      	subs	r5, #1
 800c4e0:	2d00      	cmp	r5, #0
 800c4e2:	daf6      	bge.n	800c4d2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_+0x14>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4ee <_ZN6Config20getDigitalInputNamesB5cxx11Ev>:
std::array<std::string, MAX_DIGITAL_INPUTS> Config::getDigitalInputNames()  { return digital_input_names; }
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	6039      	str	r1, [r7, #0]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7ff ffdc 	bl	800c4be <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_>
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <_ZN6Config21getDigitalOutputNamesB5cxx11Ev>:
std::array<std::string, MAX_DIGITAL_OUTPUTS> Config::getDigitalOutputNames()  { return digital_output_names; }
 800c50e:	b580      	push	{r7, lr}
 800c510:	b082      	sub	sp, #8
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	6039      	str	r1, [r7, #0]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800c51e:	4619      	mov	r1, r3
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff ffa5 	bl	800c470 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>:

// Setters
void Config::setBrokerIP(const std::array<uint8_t, 4>& value) {
 800c52e:	b580      	push	{r7, lr}
 800c530:	b082      	sub	sp, #8
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	6039      	str	r1, [r7, #0]
	broker_ip = value;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	683a      	ldr	r2, [r7, #0]
 800c53c:	3304      	adds	r3, #4
 800c53e:	6810      	ldr	r0, [r2, #0]
 800c540:	6018      	str	r0, [r3, #0]
    eeprom->WriteIP(BROKER_IP_ID, value);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	2101      	movs	r1, #1
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fb fedc 	bl	8008308 <_ZN5AT24C7WriteIPEtRKSt5arrayIhLj4EE>
}
 800c550:	bf00      	nop
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <_ZN6Config13setBrokerPortEt>:
void Config::setBrokerPort(uint16_t value) {
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	460b      	mov	r3, r1
 800c562:	807b      	strh	r3, [r7, #2]
	broker_port = value;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	887a      	ldrh	r2, [r7, #2]
 800c568:	811a      	strh	r2, [r3, #8]
	eeprom->WriteInt(BROKER_PORT_ID, value);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	887a      	ldrh	r2, [r7, #2]
 800c570:	2102      	movs	r1, #2
 800c572:	4618      	mov	r0, r3
 800c574:	f7fb ff22 	bl	80083bc <_ZN5AT24C8WriteIntEti>
}
 800c578:	bf00      	nop
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <_ZN6Config5setIPERKSt5arrayIhLj4EE>:
void Config::setIP(const std::array<uint8_t, 4>& value) {
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
	ip = value;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	330a      	adds	r3, #10
 800c590:	6812      	ldr	r2, [r2, #0]
 800c592:	601a      	str	r2, [r3, #0]
	eeprom->WriteIP(IP_ID, value);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	2103      	movs	r1, #3
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fb feb3 	bl	8008308 <_ZN5AT24C7WriteIPEtRKSt5arrayIhLj4EE>
}
 800c5a2:	bf00      	nop
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>:
void Config::setGateway(const std::array<uint8_t, 4>& value) {
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b082      	sub	sp, #8
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	6039      	str	r1, [r7, #0]
	gateway = value;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	683a      	ldr	r2, [r7, #0]
 800c5b8:	330e      	adds	r3, #14
 800c5ba:	6812      	ldr	r2, [r2, #0]
 800c5bc:	601a      	str	r2, [r3, #0]
    eeprom->WriteIP(GATEWAY_ID, value);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	2104      	movs	r1, #4
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fb fe9e 	bl	8008308 <_ZN5AT24C7WriteIPEtRKSt5arrayIhLj4EE>
}
 800c5cc:	bf00      	nop
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>:

void Config::setSubnet(const std::array<uint8_t, 4>& value) {
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
	subnet = value;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	3312      	adds	r3, #18
 800c5e4:	6812      	ldr	r2, [r2, #0]
 800c5e6:	601a      	str	r2, [r3, #0]
	eeprom->WriteIP(SUBNET_ID, value);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	683a      	ldr	r2, [r7, #0]
 800c5ee:	2105      	movs	r1, #5
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fb fe89 	bl	8008308 <_ZN5AT24C7WriteIPEtRKSt5arrayIhLj4EE>
}
 800c5f6:	bf00      	nop
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <_ZN6Config6setDNSERKSt5arrayIhLj4EE>:
void Config::setDNS(const std::array<uint8_t, 4>& value) {
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	6039      	str	r1, [r7, #0]
	dns = value;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	3316      	adds	r3, #22
 800c60e:	6812      	ldr	r2, [r2, #0]
 800c610:	601a      	str	r2, [r3, #0]
	eeprom->WriteIP(DNS_ID, value);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	2106      	movs	r1, #6
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fb fe74 	bl	8008308 <_ZN5AT24C7WriteIPEtRKSt5arrayIhLj4EE>
}
 800c620:	bf00      	nop
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <_ZN6Config20setKeepAliveIntervalEt>:
void Config::setKeepAliveInterval(uint16_t value) {
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	460b      	mov	r3, r1
 800c632:	807b      	strh	r3, [r7, #2]
	keep_alive_interval = value;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	887a      	ldrh	r2, [r7, #2]
 800c638:	835a      	strh	r2, [r3, #26]
}
 800c63a:	bf00      	nop
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <_ZN6Config14setDHCPEnabledEb>:
void Config::setDHCPEnabled(bool value) {
 800c646:	b580      	push	{r7, lr}
 800c648:	b082      	sub	sp, #8
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	460b      	mov	r3, r1
 800c650:	70fb      	strb	r3, [r7, #3]
	dhcp_enabled = value;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	78fa      	ldrb	r2, [r7, #3]
 800c656:	771a      	strb	r2, [r3, #28]
	eeprom->WriteInt(DHCP_ENABLED_ID, value);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	78fa      	ldrb	r2, [r7, #3]
 800c65e:	2108      	movs	r1, #8
 800c660:	4618      	mov	r0, r3
 800c662:	f7fb feab 	bl	80083bc <_ZN5AT24C8WriteIntEti>

}
 800c666:	bf00      	nop
 800c668:	3708      	adds	r7, #8
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <_ZN6Config13setIpAssignedEb>:
void Config::setIpAssigned(bool value) {ip_assigned = value;}
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	460b      	mov	r3, r1
 800c678:	70fb      	strb	r3, [r7, #3]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	78fa      	ldrb	r2, [r7, #3]
 800c67e:	775a      	strb	r2, [r3, #29]
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <_ZN6Config19setExtentionEnabledEb>:
void Config::setExtentionEnabled(bool value) {
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	460b      	mov	r3, r1
 800c696:	70fb      	strb	r3, [r7, #3]
	extentionEnabled = value;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	78fa      	ldrb	r2, [r7, #3]
 800c69c:	779a      	strb	r2, [r3, #30]
	eeprom->WriteInt(EXTENSION_ENABLED_ID, value);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	78fa      	ldrb	r2, [r7, #3]
 800c6a4:	2109      	movs	r1, #9
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fb fe88 	bl	80083bc <_ZN5AT24C8WriteIntEti>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <_ZN6Config15setIntervalTimeEm>:
void Config::setIntervalTime(uint32_t value) {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
	interval_time = value;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	621a      	str	r2, [r3, #32]
	eeprom->WriteInt(INTERVAL_TIME_ID, value);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	210a      	movs	r1, #10
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fb fe75 	bl	80083bc <_ZN5AT24C8WriteIntEti>

}
 800c6d2:	bf00      	nop
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <_ZN6Config11setUsernameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Config::setUsername(const std::string& value) { username = value; }
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b082      	sub	sp, #8
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	6039      	str	r1, [r7, #0]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	3324      	adds	r3, #36	; 0x24
 800c6e8:	6839      	ldr	r1, [r7, #0]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f009 fbae 	bl	8015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800c6f0:	bf00      	nop
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setClientId(const std::string& value) { clientId = value; }
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	333c      	adds	r3, #60	; 0x3c
 800c706:	6839      	ldr	r1, [r7, #0]
 800c708:	4618      	mov	r0, r3
 800c70a:	f009 fb9f 	bl	8015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800c70e:	bf00      	nop
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <_ZN6Config11setPasswordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setPassword(const std::string& value) { password = value; }
 800c716:	b580      	push	{r7, lr}
 800c718:	b082      	sub	sp, #8
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	3354      	adds	r3, #84	; 0x54
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	4618      	mov	r0, r3
 800c728:	f009 fb90 	bl	8015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800c72c:	bf00      	nop
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <_ZN6Config17setTopicSubscribeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void Config::setTopicSubscribe(const std::string& value) { topic_subscribe = value; }
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	336c      	adds	r3, #108	; 0x6c
 800c742:	6839      	ldr	r1, [r7, #0]
 800c744:	4618      	mov	r0, r3
 800c746:	f009 fb81 	bl	8015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800c74a:	bf00      	nop
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <_ZN6Config15setTopicPublishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setTopicPublish(const std::string& value) { topic_publish = value; }
 800c752:	b580      	push	{r7, lr}
 800c754:	b082      	sub	sp, #8
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	6039      	str	r1, [r7, #0]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	3384      	adds	r3, #132	; 0x84
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	4618      	mov	r0, r3
 800c764:	f009 fb72 	bl	8015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800c768:	bf00      	nop
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <_ZN6Config6setQoSEi>:
void Config::setQoS(int value) { qos = value; }
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800c782:	bf00      	nop
 800c784:	370c      	adds	r7, #12
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>:
 800c78e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c790:	b083      	sub	sp, #12
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2507      	movs	r5, #7
 800c79c:	683c      	ldr	r4, [r7, #0]
 800c79e:	461e      	mov	r6, r3
 800c7a0:	e006      	b.n	800c7b0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_+0x22>
 800c7a2:	4621      	mov	r1, r4
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f009 fb51 	bl	8015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800c7aa:	3618      	adds	r6, #24
 800c7ac:	3418      	adds	r4, #24
 800c7ae:	3d01      	subs	r5, #1
 800c7b0:	2d00      	cmp	r5, #0
 800c7b2:	daf6      	bge.n	800c7a2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_+0x14>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	370c      	adds	r7, #12
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7be <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>:
void Config::setAnalogInputNames(const std::array<std::string, MAX_ANALOG_INPUTS>& value) {
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b082      	sub	sp, #8
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	6039      	str	r1, [r7, #0]
	eeprom->WriteArrayString(ANALOGNAME_ID, value);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	2111      	movs	r1, #17
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7fc f83a 	bl	800884a <_ZN5AT24C16WriteArrayStringEtRKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
	analog_input_names = value;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	33a0      	adds	r3, #160	; 0xa0
 800c7da:	6839      	ldr	r1, [r7, #0]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7ff ffd6 	bl	800c78e <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>

}
 800c7e2:	bf00      	nop
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_>:
 800c7ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ec:	b083      	sub	sp, #12
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	6039      	str	r1, [r7, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	250f      	movs	r5, #15
 800c7f8:	683c      	ldr	r4, [r7, #0]
 800c7fa:	461e      	mov	r6, r3
 800c7fc:	e006      	b.n	800c80c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_+0x22>
 800c7fe:	4621      	mov	r1, r4
 800c800:	4630      	mov	r0, r6
 800c802:	f009 fb23 	bl	8015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800c806:	3618      	adds	r6, #24
 800c808:	3418      	adds	r4, #24
 800c80a:	3d01      	subs	r5, #1
 800c80c:	2d00      	cmp	r5, #0
 800c80e:	daf6      	bge.n	800c7fe <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_+0x14>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	4618      	mov	r0, r3
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c81a <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>:
void Config::setDigitalInputNames(const std::array<std::string, MAX_DIGITAL_INPUTS>& value) {
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b082      	sub	sp, #8
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	6039      	str	r1, [r7, #0]
	digital_input_names = value;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7ff ffdc 	bl	800c7ea <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_>
	eeprom->WriteDigitalInput(DIGITALNAME_ID, value);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	2110      	movs	r1, #16
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fb fe3d 	bl	80084ba <_ZN5AT24C17WriteDigitalInputEtRKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>
}
 800c840:	bf00      	nop
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>:
void Config::setDigitalOutputNames(const std::array<std::string, MAX_DIGITAL_OUTPUTS>& value) {
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
	digital_output_names = value;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800c858:	6839      	ldr	r1, [r7, #0]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff ff97 	bl	800c78e <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>
    eeprom->WriteArrayString(RELAYNAME_ID, value);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	683a      	ldr	r2, [r7, #0]
 800c866:	2112      	movs	r1, #18
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fb ffee 	bl	800884a <_ZN5AT24C16WriteArrayStringEtRKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
}
 800c86e:	bf00      	nop
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 800c876:	b480      	push	{r7}
 800c878:	b087      	sub	sp, #28
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 800c880:	2301      	movs	r3, #1
 800c882:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	fb03 f303 	mul.w	r3, r3, r3
 800c88a:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 800c88c:	683a      	ldr	r2, [r7, #0]
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	fb02 f303 	mul.w	r3, r2, r3
 800c894:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	fb02 f303 	mul.w	r3, r2, r3
 800c89e:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d201      	bcs.n	800c8ac <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	e01d      	b.n	800c8e8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d202      	bcs.n	800c8ba <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	e016      	b.n	800c8e8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d202      	bcs.n	800c8c8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	3302      	adds	r3, #2
 800c8c6:	e00f      	b.n	800c8e8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d202      	bcs.n	800c8d6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	3303      	adds	r3, #3
 800c8d4:	e008      	b.n	800c8e8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8de:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 800c8e6:	e7db      	b.n	800c8a0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	371c      	adds	r7, #28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 800c8f4:	b480      	push	{r7}
 800c8f6:	b089      	sub	sp, #36	; 0x24
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	3b01      	subs	r3, #1
 800c904:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 800c906:	e024      	b.n	800c952 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x5e>
	{
	  auto const __num = (__val % 100) * 2;
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	4b23      	ldr	r3, [pc, #140]	; (800c998 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 800c90c:	fba3 1302 	umull	r1, r3, r3, r2
 800c910:	095b      	lsrs	r3, r3, #5
 800c912:	2164      	movs	r1, #100	; 0x64
 800c914:	fb01 f303 	mul.w	r3, r1, r3
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	617b      	str	r3, [r7, #20]
	  __val /= 100;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4a1d      	ldr	r2, [pc, #116]	; (800c998 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 800c922:	fba2 2303 	umull	r2, r3, r2, r3
 800c926:	095b      	lsrs	r3, r3, #5
 800c928:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	1c5a      	adds	r2, r3, #1
 800c92e:	68f9      	ldr	r1, [r7, #12]
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	440b      	add	r3, r1
 800c934:	4919      	ldr	r1, [pc, #100]	; (800c99c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800c936:	5c8a      	ldrb	r2, [r1, r2]
 800c938:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	3b01      	subs	r3, #1
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	4413      	add	r3, r2
 800c942:	4916      	ldr	r1, [pc, #88]	; (800c99c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	440a      	add	r2, r1
 800c948:	7812      	ldrb	r2, [r2, #0]
 800c94a:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	3b02      	subs	r3, #2
 800c950:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b63      	cmp	r3, #99	; 0x63
 800c956:	d8d7      	bhi.n	800c908 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x14>
	}
      if (__val >= 10)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b09      	cmp	r3, #9
 800c95c:	d910      	bls.n	800c980 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	005b      	lsls	r3, r3, #1
 800c962:	61bb      	str	r3, [r7, #24]
	  __first[1] = __digits[__num + 1];
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	3301      	adds	r3, #1
 800c96c:	490b      	ldr	r1, [pc, #44]	; (800c99c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800c96e:	5c8a      	ldrb	r2, [r1, r2]
 800c970:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 800c972:	4a0a      	ldr	r2, [pc, #40]	; (800c99c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	4413      	add	r3, r2
 800c978:	781a      	ldrb	r2, [r3, #0]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 800c97e:	e005      	b.n	800c98c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	b2db      	uxtb	r3, r3
 800c984:	3330      	adds	r3, #48	; 0x30
 800c986:	b2da      	uxtb	r2, r3
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	701a      	strb	r2, [r3, #0]
    }
 800c98c:	bf00      	nop
 800c98e:	3724      	adds	r7, #36	; 0x24
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	51eb851f 	.word	0x51eb851f
 800c99c:	0801b82c 	.word	0x0801b82c

0800c9a0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b088      	sub	sp, #32
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
 800c9ac:	68b8      	ldr	r0, [r7, #8]
 800c9ae:	f7fe f9ab 	bl	800ad08 <_ZNSt11char_traitsIcE6lengthEPKc>
 800c9b2:	61f8      	str	r0, [r7, #28]
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 800c9b4:	f107 0318 	add.w	r3, r7, #24
 800c9b8:	6879      	ldr	r1, [r7, #4]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f009 fbbc 	bl	8016138 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 800c9c0:	f107 0314 	add.w	r3, r7, #20
 800c9c4:	f107 0218 	add.w	r2, r7, #24
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 f88b 	bl	800cae6 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800c9d0:	f107 0314 	add.w	r3, r7, #20
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f009 fa22 	bl	8015e20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 800c9dc:	f107 0314 	add.w	r3, r7, #20
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f009 f904 	bl	8015bee <_ZNSaIcED1Ev>
 800c9e6:	f107 0318 	add.w	r3, r7, #24
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f009 f8ff 	bl	8015bee <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f009 fa62 	bl	8015eba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f009 fa5f 	bl	8015ec2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 800ca04:	69fa      	ldr	r2, [r7, #28]
 800ca06:	68b9      	ldr	r1, [r7, #8]
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f009 fb69 	bl	80160e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 800ca0e:	6879      	ldr	r1, [r7, #4]
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f009 fb5a 	bl	80160ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800ca16:	bf00      	nop
    }
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	3720      	adds	r7, #32
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <_ZNSt5arrayIhLj4EEixEj>:
      operator[](size_type __n) noexcept
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 f867 	bl	800cb02 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
 800ca34:	4603      	mov	r3, r0
      }
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800ca3e:	b480      	push	{r7}
 800ca40:	b083      	sub	sp, #12
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	2310      	movs	r3, #16
 800ca48:	4618      	mov	r0, r3
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 800ca5e:	6839      	ldr	r1, [r7, #0]
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 f85c 	bl	800cb1e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ca66:	4603      	mov	r3, r0
 800ca68:	f083 0301 	eor.w	r3, r3, #1
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4sizeEv>:
 800ca76:	b480      	push	{r7}
 800ca78:	b083      	sub	sp, #12
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	2308      	movs	r3, #8
 800ca80:	4618      	mov	r0, r3
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EEixEj>:
      operator[](size_type __n) noexcept
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 f852 	bl	800cb44 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EE6_S_refERA11_KS5_j>
 800caa0:	4603      	mov	r3, r0
      }
 800caa2:	4618      	mov	r0, r3
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800caaa:	b480      	push	{r7}
 800caac:	b083      	sub	sp, #12
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
 800cab2:	230b      	movs	r3, #11
 800cab4:	4618      	mov	r0, r3
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800cacc:	68b9      	ldr	r1, [r7, #8]
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f009 fb6e 	bl	80161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 800cad4:	6879      	ldr	r1, [r7, #4]
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f009 fb12 	bl	8016100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 800cadc:	bf00      	nop
    }
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b082      	sub	sp, #8
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	4618      	mov	r0, r3
 800caf6:	f000 f837 	bl	800cb68 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800cb02:	b480      	push	{r7}
 800cb04:	b083      	sub	sp, #12
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	4413      	add	r3, r2
 800cb12:	4618      	mov	r0, r3
 800cb14:	370c      	adds	r7, #12
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr

0800cb1e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b082      	sub	sp, #8
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f009 fb05 	bl	801613a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	bf0c      	ite	eq
 800cb36:	2301      	moveq	r3, #1
 800cb38:	2300      	movne	r3, #0
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj11EE6_S_refERA11_KS5_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	4613      	mov	r3, r2
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	4413      	add	r3, r2
 800cb56:	00db      	lsls	r3, r3, #3
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f009 f839 	bl	8015bec <_ZNSaIcEC1ERKS_>
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
	...

0800cb84 <_Z41__static_initialization_and_destruction_0ii>:
 800cb84:	b5b0      	push	{r4, r5, r7, lr}
 800cb86:	b0a2      	sub	sp, #136	; 0x88
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	f040 8285 	bne.w	800d0a0 <_Z41__static_initialization_and_destruction_0ii+0x51c>
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	f040 827f 	bne.w	800d0a0 <_Z41__static_initialization_and_destruction_0ii+0x51c>
    "Analog5", "Analog6", "Analog7", "Analog8"};
 800cba2:	4cf0      	ldr	r4, [pc, #960]	; (800cf64 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800cba4:	4625      	mov	r5, r4
 800cba6:	f107 0308 	add.w	r3, r7, #8
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f009 f81d 	bl	8015bea <_ZNSaIcEC1Ev>
 800cbb0:	f107 0308 	add.w	r3, r7, #8
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	49ec      	ldr	r1, [pc, #944]	; (800cf68 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f009 fb2d 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cbbe:	f107 0308 	add.w	r3, r7, #8
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f009 f813 	bl	8015bee <_ZNSaIcED1Ev>
 800cbc8:	3418      	adds	r4, #24
 800cbca:	f107 030c 	add.w	r3, r7, #12
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f009 f80b 	bl	8015bea <_ZNSaIcEC1Ev>
 800cbd4:	f107 030c 	add.w	r3, r7, #12
 800cbd8:	461a      	mov	r2, r3
 800cbda:	49e4      	ldr	r1, [pc, #912]	; (800cf6c <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f009 fb1b 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cbe2:	f107 030c 	add.w	r3, r7, #12
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f009 f801 	bl	8015bee <_ZNSaIcED1Ev>
 800cbec:	3418      	adds	r4, #24
 800cbee:	f107 0310 	add.w	r3, r7, #16
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f008 fff9 	bl	8015bea <_ZNSaIcEC1Ev>
 800cbf8:	f107 0310 	add.w	r3, r7, #16
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	49dc      	ldr	r1, [pc, #880]	; (800cf70 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800cc00:	4620      	mov	r0, r4
 800cc02:	f009 fb09 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cc06:	f107 0310 	add.w	r3, r7, #16
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f008 ffef 	bl	8015bee <_ZNSaIcED1Ev>
 800cc10:	3418      	adds	r4, #24
 800cc12:	f107 0314 	add.w	r3, r7, #20
 800cc16:	4618      	mov	r0, r3
 800cc18:	f008 ffe7 	bl	8015bea <_ZNSaIcEC1Ev>
 800cc1c:	f107 0314 	add.w	r3, r7, #20
 800cc20:	461a      	mov	r2, r3
 800cc22:	49d4      	ldr	r1, [pc, #848]	; (800cf74 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800cc24:	4620      	mov	r0, r4
 800cc26:	f009 faf7 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cc2a:	f107 0314 	add.w	r3, r7, #20
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f008 ffdd 	bl	8015bee <_ZNSaIcED1Ev>
 800cc34:	3418      	adds	r4, #24
 800cc36:	f107 0318 	add.w	r3, r7, #24
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f008 ffd5 	bl	8015bea <_ZNSaIcEC1Ev>
 800cc40:	f107 0318 	add.w	r3, r7, #24
 800cc44:	461a      	mov	r2, r3
 800cc46:	49cc      	ldr	r1, [pc, #816]	; (800cf78 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f009 fae5 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cc4e:	f107 0318 	add.w	r3, r7, #24
 800cc52:	4618      	mov	r0, r3
 800cc54:	f008 ffcb 	bl	8015bee <_ZNSaIcED1Ev>
 800cc58:	3418      	adds	r4, #24
 800cc5a:	f107 031c 	add.w	r3, r7, #28
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f008 ffc3 	bl	8015bea <_ZNSaIcEC1Ev>
 800cc64:	f107 031c 	add.w	r3, r7, #28
 800cc68:	461a      	mov	r2, r3
 800cc6a:	49c4      	ldr	r1, [pc, #784]	; (800cf7c <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f009 fad3 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cc72:	f107 031c 	add.w	r3, r7, #28
 800cc76:	4618      	mov	r0, r3
 800cc78:	f008 ffb9 	bl	8015bee <_ZNSaIcED1Ev>
 800cc7c:	3418      	adds	r4, #24
 800cc7e:	f107 0320 	add.w	r3, r7, #32
 800cc82:	4618      	mov	r0, r3
 800cc84:	f008 ffb1 	bl	8015bea <_ZNSaIcEC1Ev>
 800cc88:	f107 0320 	add.w	r3, r7, #32
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	49bc      	ldr	r1, [pc, #752]	; (800cf80 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800cc90:	4620      	mov	r0, r4
 800cc92:	f009 fac1 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cc96:	f107 0320 	add.w	r3, r7, #32
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f008 ffa7 	bl	8015bee <_ZNSaIcED1Ev>
 800cca0:	3418      	adds	r4, #24
 800cca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cca6:	4618      	mov	r0, r3
 800cca8:	f008 ff9f 	bl	8015bea <_ZNSaIcEC1Ev>
 800ccac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	49b4      	ldr	r1, [pc, #720]	; (800cf84 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f009 faaf 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ccba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f008 ff95 	bl	8015bee <_ZNSaIcED1Ev>
    "DI9", "DI10", "DI11", "DI12", "DI13", "DI14", "DI15", "DI16"};
 800ccc4:	4cb0      	ldr	r4, [pc, #704]	; (800cf88 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800ccc6:	4625      	mov	r5, r4
 800ccc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cccc:	4618      	mov	r0, r3
 800ccce:	f008 ff8c 	bl	8015bea <_ZNSaIcEC1Ev>
 800ccd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	49ac      	ldr	r1, [pc, #688]	; (800cf8c <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800ccda:	4628      	mov	r0, r5
 800ccdc:	f009 fa9c 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cce4:	4618      	mov	r0, r3
 800cce6:	f008 ff82 	bl	8015bee <_ZNSaIcED1Ev>
 800ccea:	3418      	adds	r4, #24
 800ccec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f008 ff7a 	bl	8015bea <_ZNSaIcEC1Ev>
 800ccf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	49a4      	ldr	r1, [pc, #656]	; (800cf90 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f009 fa8a 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cd04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f008 ff70 	bl	8015bee <_ZNSaIcED1Ev>
 800cd0e:	3418      	adds	r4, #24
 800cd10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd14:	4618      	mov	r0, r3
 800cd16:	f008 ff68 	bl	8015bea <_ZNSaIcEC1Ev>
 800cd1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd1e:	461a      	mov	r2, r3
 800cd20:	499c      	ldr	r1, [pc, #624]	; (800cf94 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800cd22:	4620      	mov	r0, r4
 800cd24:	f009 fa78 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cd28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f008 ff5e 	bl	8015bee <_ZNSaIcED1Ev>
 800cd32:	3418      	adds	r4, #24
 800cd34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f008 ff56 	bl	8015bea <_ZNSaIcEC1Ev>
 800cd3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd42:	461a      	mov	r2, r3
 800cd44:	4994      	ldr	r1, [pc, #592]	; (800cf98 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800cd46:	4620      	mov	r0, r4
 800cd48:	f009 fa66 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cd4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd50:	4618      	mov	r0, r3
 800cd52:	f008 ff4c 	bl	8015bee <_ZNSaIcED1Ev>
 800cd56:	3418      	adds	r4, #24
 800cd58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f008 ff44 	bl	8015bea <_ZNSaIcEC1Ev>
 800cd62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd66:	461a      	mov	r2, r3
 800cd68:	498c      	ldr	r1, [pc, #560]	; (800cf9c <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f009 fa54 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cd70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd74:	4618      	mov	r0, r3
 800cd76:	f008 ff3a 	bl	8015bee <_ZNSaIcED1Ev>
 800cd7a:	3418      	adds	r4, #24
 800cd7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cd80:	4618      	mov	r0, r3
 800cd82:	f008 ff32 	bl	8015bea <_ZNSaIcEC1Ev>
 800cd86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	4984      	ldr	r1, [pc, #528]	; (800cfa0 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f009 fa42 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cd94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f008 ff28 	bl	8015bee <_ZNSaIcED1Ev>
 800cd9e:	3418      	adds	r4, #24
 800cda0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cda4:	4618      	mov	r0, r3
 800cda6:	f008 ff20 	bl	8015bea <_ZNSaIcEC1Ev>
 800cdaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cdae:	461a      	mov	r2, r3
 800cdb0:	497c      	ldr	r1, [pc, #496]	; (800cfa4 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f009 fa30 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cdb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f008 ff16 	bl	8015bee <_ZNSaIcED1Ev>
 800cdc2:	3418      	adds	r4, #24
 800cdc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f008 ff0e 	bl	8015bea <_ZNSaIcEC1Ev>
 800cdce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	4974      	ldr	r1, [pc, #464]	; (800cfa8 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f009 fa1e 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cddc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cde0:	4618      	mov	r0, r3
 800cde2:	f008 ff04 	bl	8015bee <_ZNSaIcED1Ev>
 800cde6:	3418      	adds	r4, #24
 800cde8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cdec:	4618      	mov	r0, r3
 800cdee:	f008 fefc 	bl	8015bea <_ZNSaIcEC1Ev>
 800cdf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	496c      	ldr	r1, [pc, #432]	; (800cfac <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f009 fa0c 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ce00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ce04:	4618      	mov	r0, r3
 800ce06:	f008 fef2 	bl	8015bee <_ZNSaIcED1Ev>
 800ce0a:	3418      	adds	r4, #24
 800ce0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ce10:	4618      	mov	r0, r3
 800ce12:	f008 feea 	bl	8015bea <_ZNSaIcEC1Ev>
 800ce16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	4964      	ldr	r1, [pc, #400]	; (800cfb0 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f009 f9fa 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ce24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f008 fee0 	bl	8015bee <_ZNSaIcED1Ev>
 800ce2e:	3418      	adds	r4, #24
 800ce30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ce34:	4618      	mov	r0, r3
 800ce36:	f008 fed8 	bl	8015bea <_ZNSaIcEC1Ev>
 800ce3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ce3e:	461a      	mov	r2, r3
 800ce40:	495c      	ldr	r1, [pc, #368]	; (800cfb4 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 800ce42:	4620      	mov	r0, r4
 800ce44:	f009 f9e8 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ce48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f008 fece 	bl	8015bee <_ZNSaIcED1Ev>
 800ce52:	3418      	adds	r4, #24
 800ce54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f008 fec6 	bl	8015bea <_ZNSaIcEC1Ev>
 800ce5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ce62:	461a      	mov	r2, r3
 800ce64:	4954      	ldr	r1, [pc, #336]	; (800cfb8 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 800ce66:	4620      	mov	r0, r4
 800ce68:	f009 f9d6 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ce6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ce70:	4618      	mov	r0, r3
 800ce72:	f008 febc 	bl	8015bee <_ZNSaIcED1Ev>
 800ce76:	3418      	adds	r4, #24
 800ce78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f008 feb4 	bl	8015bea <_ZNSaIcEC1Ev>
 800ce82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ce86:	461a      	mov	r2, r3
 800ce88:	494c      	ldr	r1, [pc, #304]	; (800cfbc <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f009 f9c4 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ce90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ce94:	4618      	mov	r0, r3
 800ce96:	f008 feaa 	bl	8015bee <_ZNSaIcED1Ev>
 800ce9a:	3418      	adds	r4, #24
 800ce9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cea0:	4618      	mov	r0, r3
 800cea2:	f008 fea2 	bl	8015bea <_ZNSaIcEC1Ev>
 800cea6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ceaa:	461a      	mov	r2, r3
 800ceac:	4944      	ldr	r1, [pc, #272]	; (800cfc0 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f009 f9b2 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ceb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f008 fe98 	bl	8015bee <_ZNSaIcED1Ev>
 800cebe:	3418      	adds	r4, #24
 800cec0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cec4:	4618      	mov	r0, r3
 800cec6:	f008 fe90 	bl	8015bea <_ZNSaIcEC1Ev>
 800ceca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cece:	461a      	mov	r2, r3
 800ced0:	493c      	ldr	r1, [pc, #240]	; (800cfc4 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 800ced2:	4620      	mov	r0, r4
 800ced4:	f009 f9a0 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ced8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cedc:	4618      	mov	r0, r3
 800cede:	f008 fe86 	bl	8015bee <_ZNSaIcED1Ev>
 800cee2:	3418      	adds	r4, #24
 800cee4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cee8:	4618      	mov	r0, r3
 800ceea:	f008 fe7e 	bl	8015bea <_ZNSaIcEC1Ev>
 800ceee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cef2:	461a      	mov	r2, r3
 800cef4:	4934      	ldr	r1, [pc, #208]	; (800cfc8 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 800cef6:	4620      	mov	r0, r4
 800cef8:	f009 f98e 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cefc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cf00:	4618      	mov	r0, r3
 800cf02:	f008 fe74 	bl	8015bee <_ZNSaIcED1Ev>
    "Relay5", "Relay6", "Relay7", "Relay8"};
 800cf06:	4c31      	ldr	r4, [pc, #196]	; (800cfcc <_Z41__static_initialization_and_destruction_0ii+0x448>)
 800cf08:	4625      	mov	r5, r4
 800cf0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f008 fe6b 	bl	8015bea <_ZNSaIcEC1Ev>
 800cf14:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cf18:	461a      	mov	r2, r3
 800cf1a:	492d      	ldr	r1, [pc, #180]	; (800cfd0 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	f009 f97b 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cf22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cf26:	4618      	mov	r0, r3
 800cf28:	f008 fe61 	bl	8015bee <_ZNSaIcED1Ev>
 800cf2c:	3418      	adds	r4, #24
 800cf2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cf32:	4618      	mov	r0, r3
 800cf34:	f008 fe59 	bl	8015bea <_ZNSaIcEC1Ev>
 800cf38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	4925      	ldr	r1, [pc, #148]	; (800cfd4 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 800cf40:	4620      	mov	r0, r4
 800cf42:	f009 f969 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cf46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f008 fe4f 	bl	8015bee <_ZNSaIcED1Ev>
 800cf50:	3418      	adds	r4, #24
 800cf52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cf56:	4618      	mov	r0, r3
 800cf58:	f008 fe47 	bl	8015bea <_ZNSaIcEC1Ev>
 800cf5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cf60:	e03a      	b.n	800cfd8 <_Z41__static_initialization_and_destruction_0ii+0x454>
 800cf62:	bf00      	nop
 800cf64:	200012dc 	.word	0x200012dc
 800cf68:	0801b340 	.word	0x0801b340
 800cf6c:	0801b348 	.word	0x0801b348
 800cf70:	0801b350 	.word	0x0801b350
 800cf74:	0801b358 	.word	0x0801b358
 800cf78:	0801b360 	.word	0x0801b360
 800cf7c:	0801b368 	.word	0x0801b368
 800cf80:	0801b370 	.word	0x0801b370
 800cf84:	0801b378 	.word	0x0801b378
 800cf88:	2000139c 	.word	0x2000139c
 800cf8c:	0801b380 	.word	0x0801b380
 800cf90:	0801b384 	.word	0x0801b384
 800cf94:	0801b388 	.word	0x0801b388
 800cf98:	0801b38c 	.word	0x0801b38c
 800cf9c:	0801b390 	.word	0x0801b390
 800cfa0:	0801b394 	.word	0x0801b394
 800cfa4:	0801b398 	.word	0x0801b398
 800cfa8:	0801b39c 	.word	0x0801b39c
 800cfac:	0801b3a0 	.word	0x0801b3a0
 800cfb0:	0801b3a4 	.word	0x0801b3a4
 800cfb4:	0801b3ac 	.word	0x0801b3ac
 800cfb8:	0801b3b4 	.word	0x0801b3b4
 800cfbc:	0801b3bc 	.word	0x0801b3bc
 800cfc0:	0801b3c4 	.word	0x0801b3c4
 800cfc4:	0801b3cc 	.word	0x0801b3cc
 800cfc8:	0801b3d4 	.word	0x0801b3d4
 800cfcc:	2000151c 	.word	0x2000151c
 800cfd0:	0801b3dc 	.word	0x0801b3dc
 800cfd4:	0801b3e4 	.word	0x0801b3e4
 800cfd8:	461a      	mov	r2, r3
 800cfda:	493c      	ldr	r1, [pc, #240]	; (800d0cc <_Z41__static_initialization_and_destruction_0ii+0x548>)
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f009 f91b 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cfe2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f008 fe01 	bl	8015bee <_ZNSaIcED1Ev>
 800cfec:	3418      	adds	r4, #24
 800cfee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800cff2:	4618      	mov	r0, r3
 800cff4:	f008 fdf9 	bl	8015bea <_ZNSaIcEC1Ev>
 800cff8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800cffc:	461a      	mov	r2, r3
 800cffe:	4934      	ldr	r1, [pc, #208]	; (800d0d0 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 800d000:	4620      	mov	r0, r4
 800d002:	f009 f909 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d006:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d00a:	4618      	mov	r0, r3
 800d00c:	f008 fdef 	bl	8015bee <_ZNSaIcED1Ev>
 800d010:	3418      	adds	r4, #24
 800d012:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d016:	4618      	mov	r0, r3
 800d018:	f008 fde7 	bl	8015bea <_ZNSaIcEC1Ev>
 800d01c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d020:	461a      	mov	r2, r3
 800d022:	492c      	ldr	r1, [pc, #176]	; (800d0d4 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 800d024:	4620      	mov	r0, r4
 800d026:	f009 f8f7 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d02a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d02e:	4618      	mov	r0, r3
 800d030:	f008 fddd 	bl	8015bee <_ZNSaIcED1Ev>
 800d034:	3418      	adds	r4, #24
 800d036:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d03a:	4618      	mov	r0, r3
 800d03c:	f008 fdd5 	bl	8015bea <_ZNSaIcEC1Ev>
 800d040:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d044:	461a      	mov	r2, r3
 800d046:	4924      	ldr	r1, [pc, #144]	; (800d0d8 <_Z41__static_initialization_and_destruction_0ii+0x554>)
 800d048:	4620      	mov	r0, r4
 800d04a:	f009 f8e5 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d04e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d052:	4618      	mov	r0, r3
 800d054:	f008 fdcb 	bl	8015bee <_ZNSaIcED1Ev>
 800d058:	3418      	adds	r4, #24
 800d05a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d05e:	4618      	mov	r0, r3
 800d060:	f008 fdc3 	bl	8015bea <_ZNSaIcEC1Ev>
 800d064:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d068:	461a      	mov	r2, r3
 800d06a:	491c      	ldr	r1, [pc, #112]	; (800d0dc <_Z41__static_initialization_and_destruction_0ii+0x558>)
 800d06c:	4620      	mov	r0, r4
 800d06e:	f009 f8d3 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d072:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d076:	4618      	mov	r0, r3
 800d078:	f008 fdb9 	bl	8015bee <_ZNSaIcED1Ev>
 800d07c:	3418      	adds	r4, #24
 800d07e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d082:	4618      	mov	r0, r3
 800d084:	f008 fdb1 	bl	8015bea <_ZNSaIcEC1Ev>
 800d088:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d08c:	461a      	mov	r2, r3
 800d08e:	4914      	ldr	r1, [pc, #80]	; (800d0e0 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 800d090:	4620      	mov	r0, r4
 800d092:	f009 f8c1 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d096:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d09a:	4618      	mov	r0, r3
 800d09c:	f008 fda7 	bl	8015bee <_ZNSaIcED1Ev>
const std::array<std::string, 8> DEFAULT_DIGITAL_OUTPUT_NAMES = {
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d10d      	bne.n	800d0c2 <_Z41__static_initialization_and_destruction_0ii+0x53e>
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d108      	bne.n	800d0c2 <_Z41__static_initialization_and_destruction_0ii+0x53e>
 800d0b0:	480c      	ldr	r0, [pc, #48]	; (800d0e4 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 800d0b2:	f7fd fe82 	bl	800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
const std::array<std::string, 16> DEFAULT_DIGITAL_INPUT_NAMES = {
 800d0b6:	480c      	ldr	r0, [pc, #48]	; (800d0e8 <_Z41__static_initialization_and_destruction_0ii+0x564>)
 800d0b8:	f7fd feaa 	bl	800ae10 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
const std::array<std::string, 8> DEFAULT_ANALOG_INPUT_NAMES = {
 800d0bc:	480b      	ldr	r0, [pc, #44]	; (800d0ec <_Z41__static_initialization_and_destruction_0ii+0x568>)
 800d0be:	f7fd fe7c 	bl	800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
}
 800d0c2:	bf00      	nop
 800d0c4:	3788      	adds	r7, #136	; 0x88
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bdb0      	pop	{r4, r5, r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	0801b3ec 	.word	0x0801b3ec
 800d0d0:	0801b3f4 	.word	0x0801b3f4
 800d0d4:	0801b3fc 	.word	0x0801b3fc
 800d0d8:	0801b404 	.word	0x0801b404
 800d0dc:	0801b40c 	.word	0x0801b40c
 800d0e0:	0801b414 	.word	0x0801b414
 800d0e4:	2000151c 	.word	0x2000151c
 800d0e8:	2000139c 	.word	0x2000139c
 800d0ec:	200012dc 	.word	0x200012dc

0800d0f0 <_GLOBAL__sub_I_mac>:
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d0f8:	2001      	movs	r0, #1
 800d0fa:	f7ff fd43 	bl	800cb84 <_Z41__static_initialization_and_destruction_0ii>
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <_GLOBAL__sub_D_mac>:
 800d100:	b580      	push	{r7, lr}
 800d102:	af00      	add	r7, sp, #0
 800d104:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d108:	2000      	movs	r0, #0
 800d10a:	f7ff fd3b 	bl	800cb84 <_Z41__static_initialization_and_destruction_0ii>
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <main>:
static void MX_TIM1_Init(void);
static void MX_I2C1_Init(void);


int main(void)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0

  HAL_Init();
 800d116:	f001 ffc9 	bl	800f0ac <HAL_Init>

  SystemClock_Config();
 800d11a:	f000 f8ad 	bl	800d278 <_Z18SystemClock_Configv>


  MX_GPIO_Init();
 800d11e:	f000 fa7d 	bl	800d61c <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 800d122:	f000 f9b1 	bl	800d488 <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 800d126:	f000 fa4b 	bl	800d5c0 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 800d12a:	f000 f919 	bl	800d360 <_ZL12MX_ADC1_Initv>
  MX_TIM1_Init();
 800d12e:	f000 f9e7 	bl	800d500 <_ZL12MX_TIM1_Initv>
  MX_I2C1_Init();
 800d132:	f000 f975 	bl	800d420 <_ZL12MX_I2C1_Initv>

  HAL_TIM_Base_Start_IT(&htim1);
 800d136:	4842      	ldr	r0, [pc, #264]	; (800d240 <main+0x130>)
 800d138:	f007 f8c6 	bl	80142c8 <HAL_TIM_Base_Start_IT>

  AT24C eeprom(&hi2c1);
 800d13c:	1d3b      	adds	r3, r7, #4
 800d13e:	4941      	ldr	r1, [pc, #260]	; (800d244 <main+0x134>)
 800d140:	4618      	mov	r0, r3
 800d142:	f7fb f83b 	bl	80081bc <_ZN5AT24CC1EP17I2C_HandleTypeDef>


  muxSelect.init(&hadc1);
 800d146:	4940      	ldr	r1, [pc, #256]	; (800d248 <main+0x138>)
 800d148:	4840      	ldr	r0, [pc, #256]	; (800d24c <main+0x13c>)
 800d14a:	f7fd fb2b 	bl	800a7a4 <_ZN9MuxSelect4initEP17ADC_HandleTypeDef>

  config.init(&eeprom);
 800d14e:	1d3b      	adds	r3, r7, #4
 800d150:	4619      	mov	r1, r3
 800d152:	483f      	ldr	r0, [pc, #252]	; (800d250 <main+0x140>)
 800d154:	f7fd feac 	bl	800aeb0 <_ZN6Config4initEP5AT24C>

  config.setUp();
 800d158:	483d      	ldr	r0, [pc, #244]	; (800d250 <main+0x140>)
 800d15a:	f7fd feb7 	bl	800aecc <_ZN6Config5setUpEv>

  utils.init(&config, &muxSelect);
 800d15e:	4a3b      	ldr	r2, [pc, #236]	; (800d24c <main+0x13c>)
 800d160:	493b      	ldr	r1, [pc, #236]	; (800d250 <main+0x140>)
 800d162:	483c      	ldr	r0, [pc, #240]	; (800d254 <main+0x144>)
 800d164:	f001 fa56 	bl	800e614 <_ZN5Utils4initEP6ConfigP9MuxSelect>

  ethManager.init(&config, &utils);
 800d168:	4a3a      	ldr	r2, [pc, #232]	; (800d254 <main+0x144>)
 800d16a:	4939      	ldr	r1, [pc, #228]	; (800d250 <main+0x140>)
 800d16c:	483a      	ldr	r0, [pc, #232]	; (800d258 <main+0x148>)
 800d16e:	f7fc ffeb 	bl	800a148 <_ZN15EthernetManager4initEP6ConfigP5Utils>

  mqttClient.init(&config, &utils);
 800d172:	4a38      	ldr	r2, [pc, #224]	; (800d254 <main+0x144>)
 800d174:	4936      	ldr	r1, [pc, #216]	; (800d250 <main+0x140>)
 800d176:	4839      	ldr	r0, [pc, #228]	; (800d25c <main+0x14c>)
 800d178:	f000 fc36 	bl	800d9e8 <_ZN14MQTTConnection4initEP6ConfigP5Utils>

  uartHandler.init(&huart1, &utils, &config);
 800d17c:	4b34      	ldr	r3, [pc, #208]	; (800d250 <main+0x140>)
 800d17e:	4a35      	ldr	r2, [pc, #212]	; (800d254 <main+0x144>)
 800d180:	4937      	ldr	r1, [pc, #220]	; (800d260 <main+0x150>)
 800d182:	4838      	ldr	r0, [pc, #224]	; (800d264 <main+0x154>)
 800d184:	f7fd fc01 	bl	800a98a <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config>

  utils.print("It is coming up to here!! \r\n");
 800d188:	4837      	ldr	r0, [pc, #220]	; (800d268 <main+0x158>)
 800d18a:	f001 fb2d 	bl	800e7e8 <_ZN5Utils5printEPKcz>
  while (true)

  {


	mqttClient.mqttYield();
 800d18e:	4833      	ldr	r0, [pc, #204]	; (800d25c <main+0x14c>)
 800d190:	f000 fdb7 	bl	800dd02 <_ZN14MQTTConnection9mqttYieldEv>
	uartHandler.processReceivedData();
 800d194:	4833      	ldr	r0, [pc, #204]	; (800d264 <main+0x154>)
 800d196:	f7fd fc8d 	bl	800aab4 <_ZN11UARTHandler19processReceivedDataEv>

	if (uartHandler.getRealTimeData()) {
 800d19a:	4832      	ldr	r0, [pc, #200]	; (800d264 <main+0x154>)
 800d19c:	f7fd fc23 	bl	800a9e6 <_ZN11UARTHandler15getRealTimeDataEv>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00c      	beq.n	800d1c0 <main+0xb0>
		   if (timeValue == 2) {
 800d1a6:	4b31      	ldr	r3, [pc, #196]	; (800d26c <main+0x15c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	bf0c      	ite	eq
 800d1ae:	2301      	moveq	r3, #1
 800d1b0:	2300      	movne	r3, #0
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d003      	beq.n	800d1c0 <main+0xb0>
		    uartHandler.SendRealTimeData(&statusJsonUSARTBuffer);
 800d1b8:	492d      	ldr	r1, [pc, #180]	; (800d270 <main+0x160>)
 800d1ba:	482a      	ldr	r0, [pc, #168]	; (800d264 <main+0x154>)
 800d1bc:	f7fd fd84 	bl	800acc8 <_ZN11UARTHandler16SendRealTimeDataEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

		  }



	if (timeValue == static_cast<int>(config.getIntervalTime())) {
 800d1c0:	4823      	ldr	r0, [pc, #140]	; (800d250 <main+0x140>)
 800d1c2:	f7ff f8fe 	bl	800c3c2 <_ZNK6Config15getIntervalTimeEv>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	4b28      	ldr	r3, [pc, #160]	; (800d26c <main+0x15c>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	bf0c      	ite	eq
 800d1d2:	2301      	moveq	r3, #1
 800d1d4:	2300      	movne	r3, #0
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d0d8      	beq.n	800d18e <main+0x7e>

		if (!config.getIpAssigned()) {
 800d1dc:	481c      	ldr	r0, [pc, #112]	; (800d250 <main+0x140>)
 800d1de:	f7ff f8d8 	bl	800c392 <_ZNK6Config13getIpAssignedEv>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	f083 0301 	eor.w	r3, r3, #1
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00c      	beq.n	800d208 <main+0xf8>
		  if (ethManager.connect()){
 800d1ee:	481a      	ldr	r0, [pc, #104]	; (800d258 <main+0x148>)
 800d1f0:	f7fc ffc2 	bl	800a178 <_ZN15EthernetManager7connectEv>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d01d      	beq.n	800d236 <main+0x126>
			  config.initmqttConfig();
 800d1fa:	4815      	ldr	r0, [pc, #84]	; (800d250 <main+0x140>)
 800d1fc:	f7fe f8e6 	bl	800b3cc <_ZN6Config14initmqttConfigEv>
			  mqttClient.connect();
 800d200:	4816      	ldr	r0, [pc, #88]	; (800d25c <main+0x14c>)
 800d202:	f000 fc03 	bl	800da0c <_ZN14MQTTConnection7connectEv>
 800d206:	e016      	b.n	800d236 <main+0x126>
		  }

		}else {
			if (mqttClient.getIsConnected()) {
 800d208:	4814      	ldr	r0, [pc, #80]	; (800d25c <main+0x14c>)
 800d20a:	f000 fd9e 	bl	800dd4a <_ZN14MQTTConnection14getIsConnectedEv>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d008      	beq.n	800d226 <main+0x116>
				utils.createJSON(&statusJsonBuffer);
 800d214:	4917      	ldr	r1, [pc, #92]	; (800d274 <main+0x164>)
 800d216:	480f      	ldr	r0, [pc, #60]	; (800d254 <main+0x144>)
 800d218:	f001 fb6a 	bl	800e8f0 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
				mqttClient.publish(statusJsonBuffer);
 800d21c:	4915      	ldr	r1, [pc, #84]	; (800d274 <main+0x164>)
 800d21e:	480f      	ldr	r0, [pc, #60]	; (800d25c <main+0x14c>)
 800d220:	f000 fcbe 	bl	800dba0 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d224:	e007      	b.n	800d236 <main+0x126>
			}else {
			    mqttClient.init(&config, &utils);
 800d226:	4a0b      	ldr	r2, [pc, #44]	; (800d254 <main+0x144>)
 800d228:	4909      	ldr	r1, [pc, #36]	; (800d250 <main+0x140>)
 800d22a:	480c      	ldr	r0, [pc, #48]	; (800d25c <main+0x14c>)
 800d22c:	f000 fbdc 	bl	800d9e8 <_ZN14MQTTConnection4initEP6ConfigP5Utils>
			    mqttClient.connect();
 800d230:	480a      	ldr	r0, [pc, #40]	; (800d25c <main+0x14c>)
 800d232:	f000 fbeb 	bl	800da0c <_ZN14MQTTConnection7connectEv>
			}
		}

		timeValue = 0;
 800d236:	4b0d      	ldr	r3, [pc, #52]	; (800d26c <main+0x15c>)
 800d238:	2200      	movs	r2, #0
 800d23a:	601a      	str	r2, [r3, #0]
	mqttClient.mqttYield();
 800d23c:	e7a7      	b.n	800d18e <main+0x7e>
 800d23e:	bf00      	nop
 800d240:	20001628 	.word	0x20001628
 800d244:	20001670 	.word	0x20001670
 800d248:	200015e0 	.word	0x200015e0
 800d24c:	20001764 	.word	0x20001764
 800d250:	20001798 	.word	0x20001798
 800d254:	20001b38 	.word	0x20001b38
 800d258:	20001c40 	.word	0x20001c40
 800d25c:	20001c48 	.word	0x20001c48
 800d260:	2000171c 	.word	0x2000171c
 800d264:	20001cc0 	.word	0x20001cc0
 800d268:	0801b41c 	.word	0x0801b41c
 800d26c:	200022e0 	.word	0x200022e0
 800d270:	200022fc 	.word	0x200022fc
 800d274:	200022e4 	.word	0x200022e4

0800d278 <_Z18SystemClock_Configv>:

}


void SystemClock_Config(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b094      	sub	sp, #80	; 0x50
 800d27c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d27e:	f107 0320 	add.w	r3, r7, #32
 800d282:	2230      	movs	r2, #48	; 0x30
 800d284:	2100      	movs	r1, #0
 800d286:	4618      	mov	r0, r3
 800d288:	f00a fd5c 	bl	8017d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d28c:	f107 030c 	add.w	r3, r7, #12
 800d290:	2200      	movs	r2, #0
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	605a      	str	r2, [r3, #4]
 800d296:	609a      	str	r2, [r3, #8]
 800d298:	60da      	str	r2, [r3, #12]
 800d29a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d29c:	2300      	movs	r3, #0
 800d29e:	60bb      	str	r3, [r7, #8]
 800d2a0:	4b2d      	ldr	r3, [pc, #180]	; (800d358 <_Z18SystemClock_Configv+0xe0>)
 800d2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a4:	4a2c      	ldr	r2, [pc, #176]	; (800d358 <_Z18SystemClock_Configv+0xe0>)
 800d2a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2aa:	6413      	str	r3, [r2, #64]	; 0x40
 800d2ac:	4b2a      	ldr	r3, [pc, #168]	; (800d358 <_Z18SystemClock_Configv+0xe0>)
 800d2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2b4:	60bb      	str	r3, [r7, #8]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	607b      	str	r3, [r7, #4]
 800d2bc:	4b27      	ldr	r3, [pc, #156]	; (800d35c <_Z18SystemClock_Configv+0xe4>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a26      	ldr	r2, [pc, #152]	; (800d35c <_Z18SystemClock_Configv+0xe4>)
 800d2c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	4b24      	ldr	r3, [pc, #144]	; (800d35c <_Z18SystemClock_Configv+0xe4>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2d0:	607b      	str	r3, [r7, #4]
 800d2d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d2d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d2dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d2de:	2302      	movs	r3, #2
 800d2e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d2e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800d2e8:	2319      	movs	r3, #25
 800d2ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800d2ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800d2f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d2f2:	2302      	movs	r3, #2
 800d2f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d2f6:	2304      	movs	r3, #4
 800d2f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d2fa:	f107 0320 	add.w	r3, r7, #32
 800d2fe:	4618      	mov	r0, r3
 800d300:	f005 fd48 	bl	8012d94 <HAL_RCC_OscConfig>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	bf14      	ite	ne
 800d30a:	2301      	movne	r3, #1
 800d30c:	2300      	moveq	r3, #0
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 800d314:	f000 fabc 	bl	800d890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d318:	230f      	movs	r3, #15
 800d31a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d31c:	2302      	movs	r3, #2
 800d31e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d320:	2300      	movs	r3, #0
 800d322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d324:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d32a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d32e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d330:	f107 030c 	add.w	r3, r7, #12
 800d334:	2105      	movs	r1, #5
 800d336:	4618      	mov	r0, r3
 800d338:	f005 ffa4 	bl	8013284 <HAL_RCC_ClockConfig>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	bf14      	ite	ne
 800d342:	2301      	movne	r3, #1
 800d344:	2300      	moveq	r3, #0
 800d346:	b2db      	uxtb	r3, r3
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 800d34c:	f000 faa0 	bl	800d890 <Error_Handler>
  }
}
 800d350:	bf00      	nop
 800d352:	3750      	adds	r7, #80	; 0x50
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	40023800 	.word	0x40023800
 800d35c:	40007000 	.word	0x40007000

0800d360 <_ZL12MX_ADC1_Initv>:




static void MX_ADC1_Init(void)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0

/* USER CODE BEGIN ADC1_Init 0 */

/* USER CODE END ADC1_Init 0 */

ADC_ChannelConfTypeDef sConfig = {0};
 800d366:	463b      	mov	r3, r7
 800d368:	2200      	movs	r2, #0
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	605a      	str	r2, [r3, #4]
 800d36e:	609a      	str	r2, [r3, #8]
 800d370:	60da      	str	r2, [r3, #12]

/* USER CODE END ADC1_Init 1 */

/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
*/
hadc1.Instance = ADC1;
 800d372:	4b28      	ldr	r3, [pc, #160]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d374:	4a28      	ldr	r2, [pc, #160]	; (800d418 <_ZL12MX_ADC1_Initv+0xb8>)
 800d376:	601a      	str	r2, [r3, #0]
hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800d378:	4b26      	ldr	r3, [pc, #152]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d37a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d37e:	605a      	str	r2, [r3, #4]
hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d380:	4b24      	ldr	r3, [pc, #144]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d382:	2200      	movs	r2, #0
 800d384:	609a      	str	r2, [r3, #8]
hadc1.Init.ScanConvMode = ENABLE;
 800d386:	4b23      	ldr	r3, [pc, #140]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d388:	2201      	movs	r2, #1
 800d38a:	611a      	str	r2, [r3, #16]
hadc1.Init.ContinuousConvMode = DISABLE;
 800d38c:	4b21      	ldr	r3, [pc, #132]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d38e:	2200      	movs	r2, #0
 800d390:	761a      	strb	r2, [r3, #24]
hadc1.Init.DiscontinuousConvMode = ENABLE;
 800d392:	4b20      	ldr	r3, [pc, #128]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d394:	2201      	movs	r2, #1
 800d396:	f883 2020 	strb.w	r2, [r3, #32]
hadc1.Init.NbrOfDiscConversion = 1;
 800d39a:	4b1e      	ldr	r3, [pc, #120]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d39c:	2201      	movs	r2, #1
 800d39e:	625a      	str	r2, [r3, #36]	; 0x24
hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d3a0:	4b1c      	ldr	r3, [pc, #112]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	62da      	str	r2, [r3, #44]	; 0x2c
hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d3a6:	4b1b      	ldr	r3, [pc, #108]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d3a8:	4a1c      	ldr	r2, [pc, #112]	; (800d41c <_ZL12MX_ADC1_Initv+0xbc>)
 800d3aa:	629a      	str	r2, [r3, #40]	; 0x28
hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d3ac:	4b19      	ldr	r3, [pc, #100]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	60da      	str	r2, [r3, #12]
hadc1.Init.NbrOfConversion = 1;
 800d3b2:	4b18      	ldr	r3, [pc, #96]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	61da      	str	r2, [r3, #28]
hadc1.Init.DMAContinuousRequests = DISABLE;
 800d3b8:	4b16      	ldr	r3, [pc, #88]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d3c0:	4b14      	ldr	r3, [pc, #80]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	615a      	str	r2, [r3, #20]
if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d3c6:	4813      	ldr	r0, [pc, #76]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d3c8:	f001 ff06 	bl	800f1d8 <HAL_ADC_Init>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	bf14      	ite	ne
 800d3d2:	2301      	movne	r3, #1
 800d3d4:	2300      	moveq	r3, #0
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <_ZL12MX_ADC1_Initv+0x80>
{
  Error_Handler();
 800d3dc:	f000 fa58 	bl	800d890 <Error_Handler>
}

/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
*/
sConfig.Channel = ADC_CHANNEL_0;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	603b      	str	r3, [r7, #0]
sConfig.Rank = 1;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	60bb      	str	r3, [r7, #8]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d3ec:	463b      	mov	r3, r7
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	4808      	ldr	r0, [pc, #32]	; (800d414 <_ZL12MX_ADC1_Initv+0xb4>)
 800d3f2:	f002 fa01 	bl	800f7f8 <HAL_ADC_ConfigChannel>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	bf14      	ite	ne
 800d3fc:	2301      	movne	r3, #1
 800d3fe:	2300      	moveq	r3, #0
 800d400:	b2db      	uxtb	r3, r3
 800d402:	2b00      	cmp	r3, #0
 800d404:	d001      	beq.n	800d40a <_ZL12MX_ADC1_Initv+0xaa>
{
  Error_Handler();
 800d406:	f000 fa43 	bl	800d890 <Error_Handler>
}
/* USER CODE BEGIN ADC1_Init 2 */

/* USER CODE END ADC1_Init 2 */

}
 800d40a:	bf00      	nop
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	200015e0 	.word	0x200015e0
 800d418:	40012000 	.word	0x40012000
 800d41c:	0f000001 	.word	0x0f000001

0800d420 <_ZL12MX_I2C1_Initv>:



static void MX_I2C1_Init(void)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d424:	4b15      	ldr	r3, [pc, #84]	; (800d47c <_ZL12MX_I2C1_Initv+0x5c>)
 800d426:	4a16      	ldr	r2, [pc, #88]	; (800d480 <_ZL12MX_I2C1_Initv+0x60>)
 800d428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d42a:	4b14      	ldr	r3, [pc, #80]	; (800d47c <_ZL12MX_I2C1_Initv+0x5c>)
 800d42c:	4a15      	ldr	r2, [pc, #84]	; (800d484 <_ZL12MX_I2C1_Initv+0x64>)
 800d42e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d430:	4b12      	ldr	r3, [pc, #72]	; (800d47c <_ZL12MX_I2C1_Initv+0x5c>)
 800d432:	2200      	movs	r2, #0
 800d434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d436:	4b11      	ldr	r3, [pc, #68]	; (800d47c <_ZL12MX_I2C1_Initv+0x5c>)
 800d438:	2200      	movs	r2, #0
 800d43a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d43c:	4b0f      	ldr	r3, [pc, #60]	; (800d47c <_ZL12MX_I2C1_Initv+0x5c>)
 800d43e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d444:	4b0d      	ldr	r3, [pc, #52]	; (800d47c <_ZL12MX_I2C1_Initv+0x5c>)
 800d446:	2200      	movs	r2, #0
 800d448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d44a:	4b0c      	ldr	r3, [pc, #48]	; (800d47c <_ZL12MX_I2C1_Initv+0x5c>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d450:	4b0a      	ldr	r3, [pc, #40]	; (800d47c <_ZL12MX_I2C1_Initv+0x5c>)
 800d452:	2200      	movs	r2, #0
 800d454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d456:	4b09      	ldr	r3, [pc, #36]	; (800d47c <_ZL12MX_I2C1_Initv+0x5c>)
 800d458:	2200      	movs	r2, #0
 800d45a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d45c:	4807      	ldr	r0, [pc, #28]	; (800d47c <_ZL12MX_I2C1_Initv+0x5c>)
 800d45e:	f002 ff8b 	bl	8010378 <HAL_I2C_Init>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	bf14      	ite	ne
 800d468:	2301      	movne	r3, #1
 800d46a:	2300      	moveq	r3, #0
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d001      	beq.n	800d476 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800d472:	f000 fa0d 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d476:	bf00      	nop
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20001670 	.word	0x20001670
 800d480:	40005400 	.word	0x40005400
 800d484:	000186a0 	.word	0x000186a0

0800d488 <_ZL12MX_SPI2_Initv>:



static void MX_SPI2_Init(void)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800d48c:	4b1a      	ldr	r3, [pc, #104]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d48e:	4a1b      	ldr	r2, [pc, #108]	; (800d4fc <_ZL12MX_SPI2_Initv+0x74>)
 800d490:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800d492:	4b19      	ldr	r3, [pc, #100]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d494:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d498:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800d49a:	4b17      	ldr	r3, [pc, #92]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d49c:	2200      	movs	r2, #0
 800d49e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800d4a0:	4b15      	ldr	r3, [pc, #84]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d4a6:	4b14      	ldr	r3, [pc, #80]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d4ac:	4b12      	ldr	r3, [pc, #72]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800d4b2:	4b11      	ldr	r3, [pc, #68]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d4b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d4ba:	4b0f      	ldr	r3, [pc, #60]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d4c0:	4b0d      	ldr	r3, [pc, #52]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d4c6:	4b0c      	ldr	r3, [pc, #48]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d4cc:	4b0a      	ldr	r3, [pc, #40]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800d4d2:	4b09      	ldr	r3, [pc, #36]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d4d4:	220a      	movs	r2, #10
 800d4d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d4d8:	4807      	ldr	r0, [pc, #28]	; (800d4f8 <_ZL12MX_SPI2_Initv+0x70>)
 800d4da:	f006 f8ce 	bl	801367a <HAL_SPI_Init>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	bf14      	ite	ne
 800d4e4:	2301      	movne	r3, #1
 800d4e6:	2300      	moveq	r3, #0
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800d4ee:	f000 f9cf 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800d4f2:	bf00      	nop
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	200016c4 	.word	0x200016c4
 800d4fc:	40003800 	.word	0x40003800

0800d500 <_ZL12MX_TIM1_Initv>:


static void MX_TIM1_Init(void)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b086      	sub	sp, #24
 800d504:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d506:	f107 0308 	add.w	r3, r7, #8
 800d50a:	2200      	movs	r2, #0
 800d50c:	601a      	str	r2, [r3, #0]
 800d50e:	605a      	str	r2, [r3, #4]
 800d510:	609a      	str	r2, [r3, #8]
 800d512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d514:	463b      	mov	r3, r7
 800d516:	2200      	movs	r2, #0
 800d518:	601a      	str	r2, [r3, #0]
 800d51a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800d51c:	4b26      	ldr	r3, [pc, #152]	; (800d5b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800d51e:	4a27      	ldr	r2, [pc, #156]	; (800d5bc <_ZL12MX_TIM1_Initv+0xbc>)
 800d520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400;
 800d522:	4b25      	ldr	r3, [pc, #148]	; (800d5b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800d524:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800d528:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d52a:	4b23      	ldr	r3, [pc, #140]	; (800d5b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800d52c:	2200      	movs	r2, #0
 800d52e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800d530:	4b21      	ldr	r3, [pc, #132]	; (800d5b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800d532:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800d536:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d538:	4b1f      	ldr	r3, [pc, #124]	; (800d5b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800d53a:	2200      	movs	r2, #0
 800d53c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d53e:	4b1e      	ldr	r3, [pc, #120]	; (800d5b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800d540:	2200      	movs	r2, #0
 800d542:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d544:	4b1c      	ldr	r3, [pc, #112]	; (800d5b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800d546:	2280      	movs	r2, #128	; 0x80
 800d548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d54a:	481b      	ldr	r0, [pc, #108]	; (800d5b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800d54c:	f006 fe6c 	bl	8014228 <HAL_TIM_Base_Init>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	bf14      	ite	ne
 800d556:	2301      	movne	r3, #1
 800d558:	2300      	moveq	r3, #0
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d001      	beq.n	800d564 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 800d560:	f000 f996 	bl	800d890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d56a:	f107 0308 	add.w	r3, r7, #8
 800d56e:	4619      	mov	r1, r3
 800d570:	4811      	ldr	r0, [pc, #68]	; (800d5b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800d572:	f007 f809 	bl	8014588 <HAL_TIM_ConfigClockSource>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	bf14      	ite	ne
 800d57c:	2301      	movne	r3, #1
 800d57e:	2300      	moveq	r3, #0
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b00      	cmp	r3, #0
 800d584:	d001      	beq.n	800d58a <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800d586:	f000 f983 	bl	800d890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d58a:	2300      	movs	r3, #0
 800d58c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d58e:	2300      	movs	r3, #0
 800d590:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d592:	463b      	mov	r3, r7
 800d594:	4619      	mov	r1, r3
 800d596:	4808      	ldr	r0, [pc, #32]	; (800d5b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800d598:	f007 fa2c 	bl	80149f4 <HAL_TIMEx_MasterConfigSynchronization>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	bf14      	ite	ne
 800d5a2:	2301      	movne	r3, #1
 800d5a4:	2300      	moveq	r3, #0
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d001      	beq.n	800d5b0 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 800d5ac:	f000 f970 	bl	800d890 <Error_Handler>
  }


}
 800d5b0:	bf00      	nop
 800d5b2:	3718      	adds	r7, #24
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	20001628 	.word	0x20001628
 800d5bc:	40010000 	.word	0x40010000

0800d5c0 <_ZL19MX_USART1_UART_Initv>:



static void MX_USART1_UART_Init(void)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d5c4:	4b13      	ldr	r3, [pc, #76]	; (800d614 <_ZL19MX_USART1_UART_Initv+0x54>)
 800d5c6:	4a14      	ldr	r2, [pc, #80]	; (800d618 <_ZL19MX_USART1_UART_Initv+0x58>)
 800d5c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d5ca:	4b12      	ldr	r3, [pc, #72]	; (800d614 <_ZL19MX_USART1_UART_Initv+0x54>)
 800d5cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d5d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d5d2:	4b10      	ldr	r3, [pc, #64]	; (800d614 <_ZL19MX_USART1_UART_Initv+0x54>)
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d5d8:	4b0e      	ldr	r3, [pc, #56]	; (800d614 <_ZL19MX_USART1_UART_Initv+0x54>)
 800d5da:	2200      	movs	r2, #0
 800d5dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d5de:	4b0d      	ldr	r3, [pc, #52]	; (800d614 <_ZL19MX_USART1_UART_Initv+0x54>)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d5e4:	4b0b      	ldr	r3, [pc, #44]	; (800d614 <_ZL19MX_USART1_UART_Initv+0x54>)
 800d5e6:	220c      	movs	r2, #12
 800d5e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d5ea:	4b0a      	ldr	r3, [pc, #40]	; (800d614 <_ZL19MX_USART1_UART_Initv+0x54>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d5f0:	4b08      	ldr	r3, [pc, #32]	; (800d614 <_ZL19MX_USART1_UART_Initv+0x54>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d5f6:	4807      	ldr	r0, [pc, #28]	; (800d614 <_ZL19MX_USART1_UART_Initv+0x54>)
 800d5f8:	f007 fa8c 	bl	8014b14 <HAL_UART_Init>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	bf14      	ite	ne
 800d602:	2301      	movne	r3, #1
 800d604:	2300      	moveq	r3, #0
 800d606:	b2db      	uxtb	r3, r3
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800d60c:	f000 f940 	bl	800d890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d610:	bf00      	nop
 800d612:	bd80      	pop	{r7, pc}
 800d614:	2000171c 	.word	0x2000171c
 800d618:	40011000 	.word	0x40011000

0800d61c <_ZL12MX_GPIO_Initv>:


static void MX_GPIO_Init(void)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08c      	sub	sp, #48	; 0x30
 800d620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d622:	f107 031c 	add.w	r3, r7, #28
 800d626:	2200      	movs	r2, #0
 800d628:	601a      	str	r2, [r3, #0]
 800d62a:	605a      	str	r2, [r3, #4]
 800d62c:	609a      	str	r2, [r3, #8]
 800d62e:	60da      	str	r2, [r3, #12]
 800d630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d632:	2300      	movs	r3, #0
 800d634:	61bb      	str	r3, [r7, #24]
 800d636:	4b71      	ldr	r3, [pc, #452]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d63a:	4a70      	ldr	r2, [pc, #448]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d63c:	f043 0310 	orr.w	r3, r3, #16
 800d640:	6313      	str	r3, [r2, #48]	; 0x30
 800d642:	4b6e      	ldr	r3, [pc, #440]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d646:	f003 0310 	and.w	r3, r3, #16
 800d64a:	61bb      	str	r3, [r7, #24]
 800d64c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d64e:	2300      	movs	r3, #0
 800d650:	617b      	str	r3, [r7, #20]
 800d652:	4b6a      	ldr	r3, [pc, #424]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d656:	4a69      	ldr	r2, [pc, #420]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d658:	f043 0304 	orr.w	r3, r3, #4
 800d65c:	6313      	str	r3, [r2, #48]	; 0x30
 800d65e:	4b67      	ldr	r3, [pc, #412]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d662:	f003 0304 	and.w	r3, r3, #4
 800d666:	617b      	str	r3, [r7, #20]
 800d668:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d66a:	2300      	movs	r3, #0
 800d66c:	613b      	str	r3, [r7, #16]
 800d66e:	4b63      	ldr	r3, [pc, #396]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d672:	4a62      	ldr	r2, [pc, #392]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d678:	6313      	str	r3, [r2, #48]	; 0x30
 800d67a:	4b60      	ldr	r3, [pc, #384]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d682:	613b      	str	r3, [r7, #16]
 800d684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d686:	2300      	movs	r3, #0
 800d688:	60fb      	str	r3, [r7, #12]
 800d68a:	4b5c      	ldr	r3, [pc, #368]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68e:	4a5b      	ldr	r2, [pc, #364]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d690:	f043 0301 	orr.w	r3, r3, #1
 800d694:	6313      	str	r3, [r2, #48]	; 0x30
 800d696:	4b59      	ldr	r3, [pc, #356]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	60fb      	str	r3, [r7, #12]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	60bb      	str	r3, [r7, #8]
 800d6a6:	4b55      	ldr	r3, [pc, #340]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6aa:	4a54      	ldr	r2, [pc, #336]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d6ac:	f043 0302 	orr.w	r3, r3, #2
 800d6b0:	6313      	str	r3, [r2, #48]	; 0x30
 800d6b2:	4b52      	ldr	r3, [pc, #328]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b6:	f003 0302 	and.w	r3, r3, #2
 800d6ba:	60bb      	str	r3, [r7, #8]
 800d6bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d6be:	2300      	movs	r3, #0
 800d6c0:	607b      	str	r3, [r7, #4]
 800d6c2:	4b4e      	ldr	r3, [pc, #312]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c6:	4a4d      	ldr	r2, [pc, #308]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d6c8:	f043 0308 	orr.w	r3, r3, #8
 800d6cc:	6313      	str	r3, [r2, #48]	; 0x30
 800d6ce:	4b4b      	ldr	r3, [pc, #300]	; (800d7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800d6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d2:	f003 0308 	and.w	r3, r3, #8
 800d6d6:	607b      	str	r3, [r7, #4]
 800d6d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MUX1_Pin|MUX2_Pin|MUX3_Pin|switch1_Pin
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f24f 0172 	movw	r1, #61554	; 0xf072
 800d6e0:	4847      	ldr	r0, [pc, #284]	; (800d800 <_ZL12MX_GPIO_Initv+0x1e4>)
 800d6e2:	f002 fe17 	bl	8010314 <HAL_GPIO_WritePin>
                          |switch2_Pin|switch3_Pin|switch4_Pin|sound_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, switch5_Pin|switch6_Pin|switch7_Pin|switch8_Pin, GPIO_PIN_RESET);
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	21f0      	movs	r1, #240	; 0xf0
 800d6ea:	4846      	ldr	r0, [pc, #280]	; (800d804 <_ZL12MX_GPIO_Initv+0x1e8>)
 800d6ec:	f002 fe12 	bl	8010314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RESET_GPIO_Port, W5500_RESET_Pin, GPIO_PIN_RESET);
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	2120      	movs	r1, #32
 800d6f4:	4844      	ldr	r0, [pc, #272]	; (800d808 <_ZL12MX_GPIO_Initv+0x1ec>)
 800d6f6:	f002 fe0d 	bl	8010314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d700:	4842      	ldr	r0, [pc, #264]	; (800d80c <_ZL12MX_GPIO_Initv+0x1f0>)
 800d702:	f002 fe07 	bl	8010314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX1_Pin MUX2_Pin MUX3_Pin switch1_Pin
                           switch2_Pin switch3_Pin switch4_Pin sound_Pin */
  GPIO_InitStruct.Pin = MUX1_Pin|MUX2_Pin|MUX3_Pin|switch1_Pin
 800d706:	f24f 0372 	movw	r3, #61554	; 0xf072
 800d70a:	61fb      	str	r3, [r7, #28]
                          |switch2_Pin|switch3_Pin|switch4_Pin|sound_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d70c:	2301      	movs	r3, #1
 800d70e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d710:	2300      	movs	r3, #0
 800d712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d714:	2300      	movs	r3, #0
 800d716:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d718:	f107 031c 	add.w	r3, r7, #28
 800d71c:	4619      	mov	r1, r3
 800d71e:	4838      	ldr	r0, [pc, #224]	; (800d800 <_ZL12MX_GPIO_Initv+0x1e4>)
 800d720:	f002 fc44 	bl	800ffac <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 800d724:	f240 33cf 	movw	r3, #975	; 0x3cf
 800d728:	61fb      	str	r3, [r7, #28]
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d72a:	2300      	movs	r3, #0
 800d72c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d72e:	2302      	movs	r3, #2
 800d730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d732:	f107 031c 	add.w	r3, r7, #28
 800d736:	4619      	mov	r1, r3
 800d738:	4833      	ldr	r0, [pc, #204]	; (800d808 <_ZL12MX_GPIO_Initv+0x1ec>)
 800d73a:	f002 fc37 	bl	800ffac <HAL_GPIO_Init>

  /*Configure GPIO pins : switch5_Pin switch6_Pin switch7_Pin switch8_Pin */
  GPIO_InitStruct.Pin = switch5_Pin|switch6_Pin|switch7_Pin|switch8_Pin;
 800d73e:	23f0      	movs	r3, #240	; 0xf0
 800d740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d742:	2301      	movs	r3, #1
 800d744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d746:	2300      	movs	r3, #0
 800d748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d74a:	2300      	movs	r3, #0
 800d74c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d74e:	f107 031c 	add.w	r3, r7, #28
 800d752:	4619      	mov	r1, r3
 800d754:	482b      	ldr	r0, [pc, #172]	; (800d804 <_ZL12MX_GPIO_Initv+0x1e8>)
 800d756:	f002 fc29 	bl	800ffac <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RESET_Pin */
  GPIO_InitStruct.Pin = W5500_RESET_Pin;
 800d75a:	2320      	movs	r3, #32
 800d75c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d75e:	2301      	movs	r3, #1
 800d760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d762:	2300      	movs	r3, #0
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d766:	2300      	movs	r3, #0
 800d768:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_RESET_GPIO_Port, &GPIO_InitStruct);
 800d76a:	f107 031c 	add.w	r3, r7, #28
 800d76e:	4619      	mov	r1, r3
 800d770:	4825      	ldr	r0, [pc, #148]	; (800d808 <_ZL12MX_GPIO_Initv+0x1ec>)
 800d772:	f002 fc1b 	bl	800ffac <HAL_GPIO_Init>

  /*Configure GPIO pin : NetworkStatus_Pin */
  GPIO_InitStruct.Pin = NetworkStatus_Pin;
 800d776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d77a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d77c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800d780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d782:	2300      	movs	r3, #0
 800d784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NetworkStatus_GPIO_Port, &GPIO_InitStruct);
 800d786:	f107 031c 	add.w	r3, r7, #28
 800d78a:	4619      	mov	r1, r3
 800d78c:	481c      	ldr	r0, [pc, #112]	; (800d800 <_ZL12MX_GPIO_Initv+0x1e4>)
 800d78e:	f002 fc0d 	bl	800ffac <HAL_GPIO_Init>
  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 800d792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d798:	2301      	movs	r3, #1
 800d79a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d79c:	2300      	movs	r3, #0
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 800d7a4:	f107 031c 	add.w	r3, r7, #28
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4818      	ldr	r0, [pc, #96]	; (800d80c <_ZL12MX_GPIO_Initv+0x1f0>)
 800d7ac:	f002 fbfe 	bl	800ffac <HAL_GPIO_Init>

  /*Configure GPIO pins : DI5_Pin DI6_Pin DI7_Pin DI8_Pin */
  GPIO_InitStruct.Pin = DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin;
 800d7b0:	f44f 531c 	mov.w	r3, #9984	; 0x2700
 800d7b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d7ba:	2302      	movs	r3, #2
 800d7bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d7be:	f107 031c 	add.w	r3, r7, #28
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4812      	ldr	r0, [pc, #72]	; (800d810 <_ZL12MX_GPIO_Initv+0x1f4>)
 800d7c6:	f002 fbf1 	bl	800ffac <HAL_GPIO_Init>

  /*Configure GPIO pins : DI13_Pin DI14_Pin DI15_Pin DI16_Pin */
  GPIO_InitStruct.Pin = DI13_Pin|DI14_Pin|DI15_Pin|DI16_Pin;
 800d7ca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800d7ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d7d4:	2302      	movs	r3, #2
 800d7d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7d8:	f107 031c 	add.w	r3, r7, #28
 800d7dc:	4619      	mov	r1, r3
 800d7de:	4809      	ldr	r0, [pc, #36]	; (800d804 <_ZL12MX_GPIO_Initv+0x1e8>)
 800d7e0:	f002 fbe4 	bl	800ffac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	2100      	movs	r1, #0
 800d7e8:	2028      	movs	r0, #40	; 0x28
 800d7ea:	f002 fb08 	bl	800fdfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d7ee:	2028      	movs	r0, #40	; 0x28
 800d7f0:	f002 fb21 	bl	800fe36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d7f4:	bf00      	nop
 800d7f6:	3730      	adds	r7, #48	; 0x30
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	40023800 	.word	0x40023800
 800d800:	40021000 	.word	0x40021000
 800d804:	40020000 	.word	0x40020000
 800d808:	40020800 	.word	0x40020800
 800d80c:	40020400 	.word	0x40020400
 800d810:	40020c00 	.word	0x40020c00

0800d814 <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM1)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a06      	ldr	r2, [pc, #24]	; (800d83c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d104      	bne.n	800d830 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
    //	utils.print("TimeVal: %d \r\n", timeValue);
    	timeValue++;
 800d826:	4b06      	ldr	r3, [pc, #24]	; (800d840 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	3301      	adds	r3, #1
 800d82c:	4a04      	ldr	r2, [pc, #16]	; (800d840 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800d82e:	6013      	str	r3, [r2, #0]
    }
}
 800d830:	bf00      	nop
 800d832:	370c      	adds	r7, #12
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr
 800d83c:	40010000 	.word	0x40010000
 800d840:	200022e0 	.word	0x200022e0

0800d844 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	4603      	mov	r3, r0
 800d84c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11) {
 800d84e:	88fb      	ldrh	r3, [r7, #6]
 800d850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d854:	d102      	bne.n	800d85c <HAL_GPIO_EXTI_Callback+0x18>
     utils.print("Interrupt has been arrived \r\n");
 800d856:	4803      	ldr	r0, [pc, #12]	; (800d864 <HAL_GPIO_EXTI_Callback+0x20>)
 800d858:	f000 ffc6 	bl	800e7e8 <_ZN5Utils5printEPKcz>
    }
}
 800d85c:	bf00      	nop
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	0801b43c 	.word	0x0801b43c

0800d868 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a04      	ldr	r2, [pc, #16]	; (800d888 <HAL_UART_RxCpltCallback+0x20>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d102      	bne.n	800d880 <HAL_UART_RxCpltCallback+0x18>
      //utils.print("Interrupt has been recieved! \r\n");
       uartHandler.onReceive();
 800d87a:	4804      	ldr	r0, [pc, #16]	; (800d88c <HAL_UART_RxCpltCallback+0x24>)
 800d87c:	f7fd f8dd 	bl	800aa3a <_ZN11UARTHandler9onReceiveEv>
    }
}
 800d880:	bf00      	nop
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	40011000 	.word	0x40011000
 800d88c:	20001cc0 	.word	0x20001cc0

0800d890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d890:	b480      	push	{r7}
 800d892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d894:	b672      	cpsid	i
}
 800d896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d898:	e7fe      	b.n	800d898 <Error_Handler+0x8>

0800d89a <_ZN6ConfigD1Ev>:
#define ANALOGNAME_ID               17
#define RELAYNAME_ID                18

class AT24C;

class Config {
 800d89a:	b580      	push	{r7, lr}
 800d89c:	b082      	sub	sp, #8
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fd fa86 	bl	800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7fd faab 	bl	800ae10 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	33a0      	adds	r3, #160	; 0xa0
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fd fa7b 	bl	800adba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	3384      	adds	r3, #132	; 0x84
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f008 fab9 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	336c      	adds	r3, #108	; 0x6c
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f008 fab4 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	3354      	adds	r3, #84	; 0x54
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f008 faaf 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	333c      	adds	r3, #60	; 0x3c
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f008 faaa 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	3324      	adds	r3, #36	; 0x24
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f008 faa5 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d11c      	bne.n	800d94a <_Z41__static_initialization_and_destruction_0ii+0x4a>
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d916:	4293      	cmp	r3, r2
 800d918:	d117      	bne.n	800d94a <_Z41__static_initialization_and_destruction_0ii+0x4a>
MuxSelect muxSelect;
 800d91a:	4819      	ldr	r0, [pc, #100]	; (800d980 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d91c:	f7fc fec4 	bl	800a6a8 <_ZN9MuxSelectC1Ev>
Config config;
 800d920:	4818      	ldr	r0, [pc, #96]	; (800d984 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d922:	f7fd fa8c 	bl	800ae3e <_ZN6ConfigC1Ev>
Utils utils;
 800d926:	4818      	ldr	r0, [pc, #96]	; (800d988 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800d928:	f000 fe64 	bl	800e5f4 <_ZN5UtilsC1Ev>
EthernetManager ethManager;
 800d92c:	4817      	ldr	r0, [pc, #92]	; (800d98c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800d92e:	f7fc fbfb 	bl	800a128 <_ZN15EthernetManagerC1Ev>
MQTTConnection mqttClient;
 800d932:	4817      	ldr	r0, [pc, #92]	; (800d990 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800d934:	f000 f844 	bl	800d9c0 <_ZN14MQTTConnectionC1Ev>
UARTHandler uartHandler;
 800d938:	4816      	ldr	r0, [pc, #88]	; (800d994 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800d93a:	f7fd f803 	bl	800a944 <_ZN11UARTHandlerC1Ev>
static std::string statusJsonBuffer;
 800d93e:	4816      	ldr	r0, [pc, #88]	; (800d998 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800d940:	f008 fa67 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
static std::string statusJsonUSARTBuffer;
 800d944:	4815      	ldr	r0, [pc, #84]	; (800d99c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800d946:	f008 fa64 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d113      	bne.n	800d978 <_Z41__static_initialization_and_destruction_0ii+0x78>
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d956:	4293      	cmp	r3, r2
 800d958:	d10e      	bne.n	800d978 <_Z41__static_initialization_and_destruction_0ii+0x78>
 800d95a:	4810      	ldr	r0, [pc, #64]	; (800d99c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800d95c:	f008 fa70 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
static std::string statusJsonBuffer;
 800d960:	480d      	ldr	r0, [pc, #52]	; (800d998 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800d962:	f008 fa6d 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
MQTTConnection mqttClient;
 800d966:	480a      	ldr	r0, [pc, #40]	; (800d990 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800d968:	f000 f9a8 	bl	800dcbc <_ZN14MQTTConnectionD1Ev>
EthernetManager ethManager;
 800d96c:	4807      	ldr	r0, [pc, #28]	; (800d98c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800d96e:	f7fc fbd0 	bl	800a112 <_ZN15EthernetManagerD1Ev>
Config config;
 800d972:	4804      	ldr	r0, [pc, #16]	; (800d984 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d974:	f7ff ff91 	bl	800d89a <_ZN6ConfigD1Ev>
}
 800d978:	bf00      	nop
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	20001764 	.word	0x20001764
 800d984:	20001798 	.word	0x20001798
 800d988:	20001b38 	.word	0x20001b38
 800d98c:	20001c40 	.word	0x20001c40
 800d990:	20001c48 	.word	0x20001c48
 800d994:	20001cc0 	.word	0x20001cc0
 800d998:	200022e4 	.word	0x200022e4
 800d99c:	200022fc 	.word	0x200022fc

0800d9a0 <_GLOBAL__sub_I_hadc1>:
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d9a8:	2001      	movs	r0, #1
 800d9aa:	f7ff ffa9 	bl	800d900 <_Z41__static_initialization_and_destruction_0ii>
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <_GLOBAL__sub_D_hadc1>:
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	f7ff ffa1 	bl	800d900 <_Z41__static_initialization_and_destruction_0ii>
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <_ZN14MQTTConnectionC1Ev>:
uint8_t MQTTConnection::send_buffer[2048];
uint8_t MQTTConnection::recieve_buff[2048];
MQTTConnection* MQTTConnection::instance = nullptr;


MQTTConnection::MQTTConnection() {
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	721a      	strb	r2, [r3, #8]

	MQTTConnection::instance = this;
 800d9ce:	4a05      	ldr	r2, [pc, #20]	; (800d9e4 <_ZN14MQTTConnectionC1Ev+0x24>)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6013      	str	r3, [r2, #0]

}
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	370c      	adds	r7, #12
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	20003314 	.word	0x20003314

0800d9e8 <_ZN14MQTTConnection4initEP6ConfigP5Utils>:

void MQTTConnection::init(Config* configInstance, Utils * utilInstance) {
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
	    utils = utilInstance;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	601a      	str	r2, [r3, #0]
	    config = configInstance;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	68ba      	ldr	r2, [r7, #8]
 800d9fe:	605a      	str	r2, [r3, #4]
}
 800da00:	bf00      	nop
 800da02:	3714      	adds	r7, #20
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <_ZN14MQTTConnection7connectEv>:

bool MQTTConnection::connect() {
 800da0c:	b5b0      	push	{r4, r5, r7, lr}
 800da0e:	b0b6      	sub	sp, #216	; 0xd8
 800da10:	af04      	add	r7, sp, #16
 800da12:	6078      	str	r0, [r7, #4]
	NewNetwork(&network, 1);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	3368      	adds	r3, #104	; 0x68
 800da18:	2101      	movs	r1, #1
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7f9 fc50 	bl	80072c0 <NewNetwork>
	ConnectNetwork(&network, config->getBrokerIP().data(), config->getBrokerPort());
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fe fbff 	bl	800c22e <_ZNK6Config11getBrokerIPEv>
 800da30:	4603      	mov	r3, r0
 800da32:	667b      	str	r3, [r7, #100]	; 0x64
 800da34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fb f8e7 	bl	8008c0c <_ZNSt5arrayIhLj4EE4dataEv>
 800da3e:	4605      	mov	r5, r0
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	4618      	mov	r0, r3
 800da46:	f7fe fc0c 	bl	800c262 <_ZNK6Config13getBrokerPortEv>
 800da4a:	4603      	mov	r3, r0
 800da4c:	461a      	mov	r2, r3
 800da4e:	4629      	mov	r1, r5
 800da50:	4620      	mov	r0, r4
 800da52:	f7f9 fcb2 	bl	80073ba <ConnectNetwork>
    MQTTClientInit(&mqttClient, &network, 1000,send_buffer , sizeof(send_buffer), recieve_buff, sizeof(recieve_buff));
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f103 000c 	add.w	r0, r3, #12
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800da62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da66:	9302      	str	r3, [sp, #8]
 800da68:	4b48      	ldr	r3, [pc, #288]	; (800db8c <_ZN14MQTTConnection7connectEv+0x180>)
 800da6a:	9301      	str	r3, [sp, #4]
 800da6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	4b47      	ldr	r3, [pc, #284]	; (800db90 <_ZN14MQTTConnection7connectEv+0x184>)
 800da74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da78:	f7f8 fe64 	bl	8006744 <MQTTClientInit>
    // Set MQTT connection parameters
    MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 800da7c:	4a45      	ldr	r2, [pc, #276]	; (800db94 <_ZN14MQTTConnection7connectEv+0x188>)
 800da7e:	f107 030c 	add.w	r3, r7, #12
 800da82:	4611      	mov	r1, r2
 800da84:	2258      	movs	r2, #88	; 0x58
 800da86:	4618      	mov	r0, r3
 800da88:	f00a fa67 	bl	8017f5a <memcpy>
    connectData.MQTTVersion = 3;
 800da8c:	2303      	movs	r3, #3
 800da8e:	753b      	strb	r3, [r7, #20]
    connectData.clientID.cstring = strdup(config->getClientId().c_str());
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	685a      	ldr	r2, [r3, #4]
 800da94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800da98:	4611      	mov	r1, r2
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7fe fcac 	bl	800c3f8 <_ZNK6Config11getClientIdB5cxx11Ev>
 800daa0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800daa4:	4618      	mov	r0, r3
 800daa6:	f008 fb45 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800daaa:	4603      	mov	r3, r0
 800daac:	4618      	mov	r0, r3
 800daae:	f00a f951 	bl	8017d54 <strdup>
 800dab2:	4603      	mov	r3, r0
 800dab4:	61bb      	str	r3, [r7, #24]
 800dab6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800daba:	4618      	mov	r0, r3
 800dabc:	f008 f9c0 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    connectData.username.cstring = const_cast<char*>(config->getUsername().c_str());
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dac8:	4611      	mov	r1, r2
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fe fc85 	bl	800c3da <_ZNK6Config11getUsernameB5cxx11Ev>
 800dad0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dad4:	4618      	mov	r0, r3
 800dad6:	f008 fb2d 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800dada:	4603      	mov	r3, r0
 800dadc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dade:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dae2:	4618      	mov	r0, r3
 800dae4:	f008 f9ac 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    connectData.password.cstring = const_cast<char*>(config->getPassword().c_str());
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	685a      	ldr	r2, [r3, #4]
 800daec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800daf0:	4611      	mov	r1, r2
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fe fc8f 	bl	800c416 <_ZNK6Config11getPasswordB5cxx11Ev>
 800daf8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dafc:	4618      	mov	r0, r3
 800dafe:	f008 fb19 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800db02:	4603      	mov	r3, r0
 800db04:	65bb      	str	r3, [r7, #88]	; 0x58
 800db06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800db0a:	4618      	mov	r0, r3
 800db0c:	f008 f998 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    connectData.keepAliveInterval = config->getKeepAliveInterval();
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	4618      	mov	r0, r3
 800db16:	f7fe fc24 	bl	800c362 <_ZNK6Config20getKeepAliveIntervalEv>
 800db1a:	4603      	mov	r3, r0
 800db1c:	84bb      	strh	r3, [r7, #36]	; 0x24
    connectData.cleansession = 1;
 800db1e:	2301      	movs	r3, #1
 800db20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    // Attempt to connect to the MQTT broker
    if (MQTTConnect(&mqttClient, &connectData) != SUCCESS) {
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	330c      	adds	r3, #12
 800db28:	f107 020c 	add.w	r2, r7, #12
 800db2c:	4611      	mov	r1, r2
 800db2e:	4618      	mov	r0, r3
 800db30:	f7f9 f932 	bl	8006d98 <MQTTConnect>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	bf14      	ite	ne
 800db3a:	2301      	movne	r3, #1
 800db3c:	2300      	moveq	r3, #0
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	2b00      	cmp	r3, #0
 800db42:	d004      	beq.n	800db4e <_ZN14MQTTConnection7connectEv+0x142>
        utils->print("Connection failed!\n");
 800db44:	4814      	ldr	r0, [pc, #80]	; (800db98 <_ZN14MQTTConnection7connectEv+0x18c>)
 800db46:	f000 fe4f 	bl	800e7e8 <_ZN5Utils5printEPKcz>
        return false;
 800db4a:	2300      	movs	r3, #0
 800db4c:	e01a      	b.n	800db84 <_ZN14MQTTConnection7connectEv+0x178>
    }
    subscribe(config->getTopicSubscribe());
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	685a      	ldr	r2, [r3, #4]
 800db52:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800db56:	4611      	mov	r1, r2
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fe fc6b 	bl	800c434 <_ZNK6Config17getTopicSubscribeB5cxx11Ev>
 800db5e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800db62:	4619      	mov	r1, r3
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 f865 	bl	800dc34 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800db6a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800db6e:	4618      	mov	r0, r3
 800db70:	f008 f966 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    setIsConnected(true);
 800db74:	2101      	movs	r1, #1
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 f8d8 	bl	800dd2c <_ZN14MQTTConnection14setIsConnectedEb>

    utils->print("Successfully connected to MQTT broker.\r\n");
 800db7c:	4807      	ldr	r0, [pc, #28]	; (800db9c <_ZN14MQTTConnection7connectEv+0x190>)
 800db7e:	f000 fe33 	bl	800e7e8 <_ZN5Utils5printEPKcz>

    return true;
 800db82:	2301      	movs	r3, #1
}
 800db84:	4618      	mov	r0, r3
 800db86:	37c8      	adds	r7, #200	; 0xc8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bdb0      	pop	{r4, r5, r7, pc}
 800db8c:	20002b14 	.word	0x20002b14
 800db90:	20002314 	.word	0x20002314
 800db94:	0801b49c 	.word	0x0801b49c
 800db98:	0801b45c 	.word	0x0801b45c
 800db9c:	0801b470 	.word	0x0801b470

0800dba0 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool MQTTConnection::publish(const std::string& message) {
 800dba0:	b590      	push	{r4, r7, lr}
 800dba2:	b08f      	sub	sp, #60	; 0x3c
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
    MQTTMessage mqttMessage;
    mqttMessage.qos = QOS0;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	733b      	strb	r3, [r7, #12]
    mqttMessage.retained = 0;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	737b      	strb	r3, [r7, #13]
    mqttMessage.dup = 0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	73bb      	strb	r3, [r7, #14]
    const char* cMessage = message.c_str();
 800dbb6:	6838      	ldr	r0, [r7, #0]
 800dbb8:	f008 fabc 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800dbbc:	6378      	str	r0, [r7, #52]	; 0x34
    mqttMessage.payload = (void*)cMessage;
 800dbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc0:	617b      	str	r3, [r7, #20]
    mqttMessage.payloadlen = message.length();
 800dbc2:	6838      	ldr	r0, [r7, #0]
 800dbc4:	f008 f97b 	bl	8015ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	61bb      	str	r3, [r7, #24]

    if (MQTTPublish(&mqttClient, config->getTopicPublish().c_str(), &mqttMessage) != SUCCESS) {
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f103 040c 	add.w	r4, r3, #12
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	685a      	ldr	r2, [r3, #4]
 800dbd6:	f107 031c 	add.w	r3, r7, #28
 800dbda:	4611      	mov	r1, r2
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fe fc38 	bl	800c452 <_ZNK6Config15getTopicPublishB5cxx11Ev>
 800dbe2:	f107 031c 	add.w	r3, r7, #28
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f008 faa4 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800dbec:	4601      	mov	r1, r0
 800dbee:	f107 030c 	add.w	r3, r7, #12
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f7f9 f9fe 	bl	8006ff6 <MQTTPublish>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	bf14      	ite	ne
 800dc00:	2301      	movne	r3, #1
 800dc02:	2300      	moveq	r3, #0
 800dc04:	b2dc      	uxtb	r4, r3
 800dc06:	f107 031c 	add.w	r3, r7, #28
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f008 f918 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dc10:	2c00      	cmp	r4, #0
 800dc12:	d008      	beq.n	800dc26 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
    	setIsConnected(false);
 800dc14:	2100      	movs	r1, #0
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 f888 	bl	800dd2c <_ZN14MQTTConnection14setIsConnectedEb>
         utils->print("Publish failed! \r\n");
 800dc1c:	4804      	ldr	r0, [pc, #16]	; (800dc30 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>)
 800dc1e:	f000 fde3 	bl	800e7e8 <_ZN5Utils5printEPKcz>
        return false;
 800dc22:	2300      	movs	r3, #0
 800dc24:	e000      	b.n	800dc28 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>
    }

   //  utils->print("Message published successfully.\r\n");
    return true;
 800dc26:	2301      	movs	r3, #1
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	373c      	adds	r7, #60	; 0x3c
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd90      	pop	{r4, r7, pc}
 800dc30:	0801b4f4 	.word	0x0801b4f4

0800dc34 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void MQTTConnection::subscribe(std::string topic) {
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
	const char* subTopic = strdup(topic.c_str());
 800dc3e:	6838      	ldr	r0, [r7, #0]
 800dc40:	f008 fa78 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800dc44:	4603      	mov	r3, r0
 800dc46:	4618      	mov	r0, r3
 800dc48:	f00a f884 	bl	8017d54 <strdup>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	60fb      	str	r3, [r7, #12]
    if (MQTTSubscribe(&mqttClient, subTopic, QOS0,  handleMessage) != SUCCESS) {
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f103 000c 	add.w	r0, r3, #12
 800dc56:	4b0c      	ldr	r3, [pc, #48]	; (800dc88 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	68f9      	ldr	r1, [r7, #12]
 800dc5c:	f7f9 f922 	bl	8006ea4 <MQTTSubscribe>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	bf14      	ite	ne
 800dc66:	2301      	movne	r3, #1
 800dc68:	2300      	moveq	r3, #0
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d003      	beq.n	800dc78 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
       utils->print("Subscribe failed!\n");
 800dc70:	4806      	ldr	r0, [pc, #24]	; (800dc8c <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>)
 800dc72:	f000 fdb9 	bl	800e7e8 <_ZN5Utils5printEPKcz>
    } else {
       utils->print("Subscribed to topic successfully.\r\n");
    }
}
 800dc76:	e002      	b.n	800dc7e <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a>
       utils->print("Subscribed to topic successfully.\r\n");
 800dc78:	4805      	ldr	r0, [pc, #20]	; (800dc90 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 800dc7a:	f000 fdb5 	bl	800e7e8 <_ZN5Utils5printEPKcz>
}
 800dc7e:	bf00      	nop
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	0800dc95 	.word	0x0800dc95
 800dc8c:	0801b508 	.word	0x0801b508
 800dc90:	0801b51c 	.word	0x0801b51c

0800dc94 <_ZN14MQTTConnection13handleMessageEP11MessageData>:

void MQTTConnection::handleMessage(MessageData* data) {
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
//	print("Message has been arrived !!! \r\n");
	 if (MQTTConnection::instance) {
 800dc9c:	4b06      	ldr	r3, [pc, #24]	; (800dcb8 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x24>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d005      	beq.n	800dcb0 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x1c>
           MQTTConnection::instance->handleIncomingMessage(data);
 800dca4:	4b04      	ldr	r3, [pc, #16]	; (800dcb8 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x24>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6879      	ldr	r1, [r7, #4]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f000 f85a 	bl	800dd64 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData>
	  }
}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20003314 	.word	0x20003314

0800dcbc <_ZN14MQTTConnectionD1Ev>:

MQTTConnection::~MQTTConnection() {
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
    // Clean up resources, if necessary
    disconnect();
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f80f 	bl	800dce8 <_ZN14MQTTConnection10disconnectEv>
    if (MQTTConnection::instance == this) {
 800dcca:	4b06      	ldr	r3, [pc, #24]	; (800dce4 <_ZN14MQTTConnectionD1Ev+0x28>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d102      	bne.n	800dcda <_ZN14MQTTConnectionD1Ev+0x1e>
    	MQTTConnection::instance = nullptr;
 800dcd4:	4b03      	ldr	r3, [pc, #12]	; (800dce4 <_ZN14MQTTConnectionD1Ev+0x28>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	601a      	str	r2, [r3, #0]
    }
}
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	20003314 	.word	0x20003314

0800dce8 <_ZN14MQTTConnection10disconnectEv>:

void MQTTConnection::disconnect() {
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
    // Disconnect from the MQTT broker
    MQTTDisconnect(&mqttClient);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	330c      	adds	r3, #12
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7f9 fa3d 	bl	8007174 <MQTTDisconnect>
  //  utils->print("Disconnected from MQTT broker.\n");
}
 800dcfa:	bf00      	nop
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <_ZN14MQTTConnection9mqttYieldEv>:

void MQTTConnection::mqttYield() {
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
	 if (getIsConnected()) {
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f81d 	bl	800dd4a <_ZN14MQTTConnection14getIsConnectedEv>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d006      	beq.n	800dd24 <_ZN14MQTTConnection9mqttYieldEv+0x22>
		 MQTTYield(&mqttClient, 1000);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	330c      	adds	r3, #12
 800dd1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f8 fff6 	bl	8006d10 <MQTTYield>
	 }

}
 800dd24:	bf00      	nop
 800dd26:	3708      	adds	r7, #8
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <_ZN14MQTTConnection14setIsConnectedEb>:


void MQTTConnection::setIsConnected(bool val) {
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	460b      	mov	r3, r1
 800dd36:	70fb      	strb	r3, [r7, #3]
	isConnected = val;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	78fa      	ldrb	r2, [r7, #3]
 800dd3c:	721a      	strb	r2, [r3, #8]
}
 800dd3e:	bf00      	nop
 800dd40:	370c      	adds	r7, #12
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr

0800dd4a <_ZN14MQTTConnection14getIsConnectedEv>:

bool MQTTConnection::getIsConnected(){
 800dd4a:	b480      	push	{r7}
 800dd4c:	b083      	sub	sp, #12
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
	return isConnected;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	7a1b      	ldrb	r3, [r3, #8]
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	370c      	adds	r7, #12
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
	...

0800dd64 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData>:


void MQTTConnection::handleIncomingMessage(MessageData* data) {
 800dd64:	b590      	push	{r4, r7, lr}
 800dd66:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800dd70:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800dd74:	6018      	str	r0, [r3, #0]
 800dd76:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800dd7a:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800dd7e:	6019      	str	r1, [r3, #0]
	    if (data->message->payloadlen >= 1024) {
 800dd80:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800dd84:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd92:	d303      	bcc.n	800dd9c <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x38>
	        utils->print("Data size is bigger than expected \r\n");
 800dd94:	489d      	ldr	r0, [pc, #628]	; (800e00c <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2a8>)
 800dd96:	f000 fd27 	bl	800e7e8 <_ZN5Utils5printEPKcz>
	        return;
 800dd9a:	e132      	b.n	800e002 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x29e>
	    }
	    char payloadStr[1024]; // Static allocation
	    memcpy(payloadStr, data->message->payload, data->message->payloadlen);
 800dd9c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800dda0:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6899      	ldr	r1, [r3, #8]
 800ddaa:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ddae:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	68da      	ldr	r2, [r3, #12]
 800ddb8:	f107 0310 	add.w	r3, r7, #16
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f00a f8cc 	bl	8017f5a <memcpy>
	    payloadStr[data->message->payloadlen] = '\0'; // Null-terminate
 800ddc2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ddc6:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800ddd4:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 800ddd8:	2100      	movs	r1, #0
 800ddda:	54d1      	strb	r1, [r2, r3]

	    cJSON *json = cJSON_Parse(payloadStr);
 800dddc:	f107 0310 	add.w	r3, r7, #16
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7f7 fc47 	bl	8005674 <cJSON_Parse>
 800dde6:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
	    if (!json) {
 800ddea:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d103      	bne.n	800ddfa <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x96>
	    	utils->print("JSON format is not matching!!! \r\n");
 800ddf2:	4887      	ldr	r0, [pc, #540]	; (800e010 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2ac>)
 800ddf4:	f000 fcf8 	bl	800e7e8 <_ZN5Utils5printEPKcz>
	        return;
 800ddf8:	e103      	b.n	800e002 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x29e>
	    }
	    const cJSON *typeJson = cJSON_GetObjectItemCaseSensitive(json, "type");
 800ddfa:	4986      	ldr	r1, [pc, #536]	; (800e014 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2b0>)
 800ddfc:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 800de00:	f7f8 fa90 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800de04:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
	    int type = typeJson->valueint;
 800de08:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424

	    switch (type){
 800de12:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800de16:	3b01      	subs	r3, #1
 800de18:	2b04      	cmp	r3, #4
 800de1a:	f200 80e5 	bhi.w	800dfe8 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x284>
 800de1e:	a201      	add	r2, pc, #4	; (adr r2, 800de24 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0xc0>)
 800de20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de24:	0800de39 	.word	0x0800de39
 800de28:	0800de5b 	.word	0x0800de5b
 800de2c:	0800de7d 	.word	0x0800de7d
 800de30:	0800de9f 	.word	0x0800de9f
 800de34:	0800df85 	.word	0x0800df85
	    case 1:
	    	config->setAnalogInputNamesFromJson(json);
 800de38:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800de3c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fd ffab 	bl	800bda4 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON>
	    	utils->playSound();
 800de4e:	f000 fcfb 	bl	800e848 <_ZN5Utils9playSoundEv>
	    	utils->print("Analog names has been changed! \r\n");
 800de52:	4871      	ldr	r0, [pc, #452]	; (800e018 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2b4>)
 800de54:	f000 fcc8 	bl	800e7e8 <_ZN5Utils5printEPKcz>
	    	break;
 800de58:	e0cb      	b.n	800dff2 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x28e>
	    case 2:
	    	config->setDigitalInputNamesFromJson(json);
 800de5a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800de5e:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fe f83a 	bl	800bee4 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON>
	    	utils->print("Digital Input Names has been changed! \r\n");
 800de70:	486a      	ldr	r0, [pc, #424]	; (800e01c <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2b8>)
 800de72:	f000 fcb9 	bl	800e7e8 <_ZN5Utils5printEPKcz>
	    	utils->playSound();
 800de76:	f000 fce7 	bl	800e848 <_ZN5Utils9playSoundEv>
	    	break;
 800de7a:	e0ba      	b.n	800dff2 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x28e>
	    case 3:
	    	config->setRelayNamesFromJson(json);
 800de7c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800de80:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fe f8dd 	bl	800c04c <_ZN6Config21setRelayNamesFromJsonEP5cJSON>
	    	utils->print("Relay Names has been changed!! \r\n");
 800de92:	4863      	ldr	r0, [pc, #396]	; (800e020 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2bc>)
 800de94:	f000 fca8 	bl	800e7e8 <_ZN5Utils5printEPKcz>
	    	utils->playSound();
 800de98:	f000 fcd6 	bl	800e848 <_ZN5Utils9playSoundEv>
	    	break;
 800de9c:	e0a9      	b.n	800dff2 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x28e>
	    case 4: {
	            const cJSON *number = cJSON_GetObjectItemCaseSensitive(json, "number");
 800de9e:	4961      	ldr	r1, [pc, #388]	; (800e024 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2c0>)
 800dea0:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 800dea4:	f7f8 fa3e 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800dea8:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
	            const cJSON *status = cJSON_GetObjectItemCaseSensitive(json, "status");
 800deac:	495e      	ldr	r1, [pc, #376]	; (800e028 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2c4>)
 800deae:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 800deb2:	f7f8 fa37 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800deb6:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
	            if (!cJSON_IsNumber(number) || !cJSON_IsNumber(status)) return; // Changed && to || based on your logic needs
 800deba:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 800debe:	f7f8 fb88 	bl	80065d2 <cJSON_IsNumber>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d006      	beq.n	800ded6 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x172>
 800dec8:	f8d7 0418 	ldr.w	r0, [r7, #1048]	; 0x418
 800decc:	f7f8 fb81 	bl	80065d2 <cJSON_IsNumber>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d101      	bne.n	800deda <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x176>
 800ded6:	2301      	movs	r3, #1
 800ded8:	e000      	b.n	800dedc <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x178>
 800deda:	2300      	movs	r3, #0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f040 808d 	bne.w	800dffc <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x298>
	            if (number->valueint >= 1 && number->valueint <= 8) {
 800dee2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800dee6:	695b      	ldr	r3, [r3, #20]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	dd7f      	ble.n	800dfec <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x288>
 800deec:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800def0:	695b      	ldr	r3, [r3, #20]
 800def2:	2b08      	cmp	r3, #8
 800def4:	dc7a      	bgt.n	800dfec <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x288>
	                int arrayIndex = number->valueint - 1;
 800def6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800defa:	695b      	ldr	r3, [r3, #20]
 800defc:	3b01      	subs	r3, #1
 800defe:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	                PortAndPins targetSwitch = utils->switches[arrayIndex];
 800df02:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800df06:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800df12:	f5a3 6185 	sub.w	r1, r3, #1064	; 0x428
 800df16:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800df1a:	3301      	adds	r3, #1
 800df1c:	460c      	mov	r4, r1
 800df1e:	00db      	lsls	r3, r3, #3
 800df20:	4413      	add	r3, r2
 800df22:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df26:	e884 0003 	stmia.w	r4, {r0, r1}
	                bool success = utils->switchRelay(targetSwitch.port, targetSwitch.pin, status->valueint != 0); // Using the value as a bool
 800df2a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800df2e:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6818      	ldr	r0, [r3, #0]
 800df36:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800df3a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800df3e:	6819      	ldr	r1, [r3, #0]
 800df40:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800df44:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800df48:	889a      	ldrh	r2, [r3, #4]
 800df4a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800df4e:	695b      	ldr	r3, [r3, #20]
 800df50:	2b00      	cmp	r3, #0
 800df52:	bf14      	ite	ne
 800df54:	2301      	movne	r3, #1
 800df56:	2300      	moveq	r3, #0
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	f000 fc8b 	bl	800e874 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti>
 800df5e:	4603      	mov	r3, r0
 800df60:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
	                if (success) {
 800df64:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d007      	beq.n	800df7c <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x218>
	                    utils->print("The %d switch has been toggled.\r\n", number->valueint);
 800df6c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	4619      	mov	r1, r3
 800df74:	482d      	ldr	r0, [pc, #180]	; (800e02c <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2c8>)
 800df76:	f000 fc37 	bl	800e7e8 <_ZN5Utils5printEPKcz>
	                } else {
	                    utils->print("There is an issue with switch \r\n");
	                }
	            }
	        } break;
 800df7a:	e037      	b.n	800dfec <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x288>
	                    utils->print("There is an issue with switch \r\n");
 800df7c:	482c      	ldr	r0, [pc, #176]	; (800e030 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2cc>)
 800df7e:	f000 fc33 	bl	800e7e8 <_ZN5Utils5printEPKcz>
	        } break;
 800df82:	e033      	b.n	800dfec <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x288>
	    case 5: {
	    	       const cJSON *main = cJSON_GetObjectItemCaseSensitive(json, "extention_port_status");
 800df84:	492b      	ldr	r1, [pc, #172]	; (800e034 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x2d0>)
 800df86:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 800df8a:	f7f8 f9cb 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800df8e:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
	    	       if (!cJSON_IsNumber(main)) return;
 800df92:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 800df96:	f7f8 fb1c 	bl	80065d2 <cJSON_IsNumber>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	bf0c      	ite	eq
 800dfa0:	2301      	moveq	r3, #1
 800dfa2:	2300      	movne	r3, #0
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d12a      	bne.n	800e000 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x29c>
	    	       if (main->valueint == 0 || main->valueint == 1) {
 800dfaa:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800dfae:	695b      	ldr	r3, [r3, #20]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d004      	beq.n	800dfbe <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x25a>
 800dfb4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800dfb8:	695b      	ldr	r3, [r3, #20]
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d118      	bne.n	800dff0 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x28c>
	    	           config->setExtentionEnabled(main->valueint != 0); // Directly using the value as a bool
 800dfbe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800dfc2:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	685a      	ldr	r2, [r3, #4]
 800dfca:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800dfce:	695b      	ldr	r3, [r3, #20]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	bf14      	ite	ne
 800dfd4:	2301      	movne	r3, #1
 800dfd6:	2300      	moveq	r3, #0
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	4619      	mov	r1, r3
 800dfdc:	4610      	mov	r0, r2
 800dfde:	f7fe fb55 	bl	800c68c <_ZN6Config19setExtentionEnabledEb>
	    	           utils->playSound();
 800dfe2:	f000 fc31 	bl	800e848 <_ZN5Utils9playSoundEv>
	    	       }
	    	   } break;
 800dfe6:	e003      	b.n	800dff0 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x28c>
	    default:
	    	break;
 800dfe8:	bf00      	nop
 800dfea:	e002      	b.n	800dff2 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x28e>
	        } break;
 800dfec:	bf00      	nop
 800dfee:	e000      	b.n	800dff2 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x28e>
	    	   } break;
 800dff0:	bf00      	nop
	    }

	    cJSON_Delete(json);
 800dff2:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 800dff6:	f7f6 fb31 	bl	800465c <cJSON_Delete>
 800dffa:	e002      	b.n	800e002 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x29e>
	            if (!cJSON_IsNumber(number) || !cJSON_IsNumber(status)) return; // Changed && to || based on your logic needs
 800dffc:	bf00      	nop
 800dffe:	e000      	b.n	800e002 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x29e>
	    	       if (!cJSON_IsNumber(main)) return;
 800e000:	bf00      	nop
}
 800e002:	f207 4734 	addw	r7, r7, #1076	; 0x434
 800e006:	46bd      	mov	sp, r7
 800e008:	bd90      	pop	{r4, r7, pc}
 800e00a:	bf00      	nop
 800e00c:	0801b540 	.word	0x0801b540
 800e010:	0801b568 	.word	0x0801b568
 800e014:	0801b58c 	.word	0x0801b58c
 800e018:	0801b594 	.word	0x0801b594
 800e01c:	0801b5b8 	.word	0x0801b5b8
 800e020:	0801b5e4 	.word	0x0801b5e4
 800e024:	0801b608 	.word	0x0801b608
 800e028:	0801b610 	.word	0x0801b610
 800e02c:	0801b618 	.word	0x0801b618
 800e030:	0801b63c 	.word	0x0801b63c
 800e034:	0801b660 	.word	0x0801b660

0800e038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e03e:	2300      	movs	r3, #0
 800e040:	607b      	str	r3, [r7, #4]
 800e042:	4b10      	ldr	r3, [pc, #64]	; (800e084 <HAL_MspInit+0x4c>)
 800e044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e046:	4a0f      	ldr	r2, [pc, #60]	; (800e084 <HAL_MspInit+0x4c>)
 800e048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e04c:	6453      	str	r3, [r2, #68]	; 0x44
 800e04e:	4b0d      	ldr	r3, [pc, #52]	; (800e084 <HAL_MspInit+0x4c>)
 800e050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e056:	607b      	str	r3, [r7, #4]
 800e058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e05a:	2300      	movs	r3, #0
 800e05c:	603b      	str	r3, [r7, #0]
 800e05e:	4b09      	ldr	r3, [pc, #36]	; (800e084 <HAL_MspInit+0x4c>)
 800e060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e062:	4a08      	ldr	r2, [pc, #32]	; (800e084 <HAL_MspInit+0x4c>)
 800e064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e068:	6413      	str	r3, [r2, #64]	; 0x40
 800e06a:	4b06      	ldr	r3, [pc, #24]	; (800e084 <HAL_MspInit+0x4c>)
 800e06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e06e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e072:	603b      	str	r3, [r7, #0]
 800e074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e076:	bf00      	nop
 800e078:	370c      	adds	r7, #12
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	40023800 	.word	0x40023800

0800e088 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b08a      	sub	sp, #40	; 0x28
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e090:	f107 0314 	add.w	r3, r7, #20
 800e094:	2200      	movs	r2, #0
 800e096:	601a      	str	r2, [r3, #0]
 800e098:	605a      	str	r2, [r3, #4]
 800e09a:	609a      	str	r2, [r3, #8]
 800e09c:	60da      	str	r2, [r3, #12]
 800e09e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a1b      	ldr	r2, [pc, #108]	; (800e114 <HAL_ADC_MspInit+0x8c>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d12f      	bne.n	800e10a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	613b      	str	r3, [r7, #16]
 800e0ae:	4b1a      	ldr	r3, [pc, #104]	; (800e118 <HAL_ADC_MspInit+0x90>)
 800e0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0b2:	4a19      	ldr	r2, [pc, #100]	; (800e118 <HAL_ADC_MspInit+0x90>)
 800e0b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0b8:	6453      	str	r3, [r2, #68]	; 0x44
 800e0ba:	4b17      	ldr	r3, [pc, #92]	; (800e118 <HAL_ADC_MspInit+0x90>)
 800e0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0c2:	613b      	str	r3, [r7, #16]
 800e0c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	60fb      	str	r3, [r7, #12]
 800e0ca:	4b13      	ldr	r3, [pc, #76]	; (800e118 <HAL_ADC_MspInit+0x90>)
 800e0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ce:	4a12      	ldr	r2, [pc, #72]	; (800e118 <HAL_ADC_MspInit+0x90>)
 800e0d0:	f043 0301 	orr.w	r3, r3, #1
 800e0d4:	6313      	str	r3, [r2, #48]	; 0x30
 800e0d6:	4b10      	ldr	r3, [pc, #64]	; (800e118 <HAL_ADC_MspInit+0x90>)
 800e0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0da:	f003 0301 	and.w	r3, r3, #1
 800e0de:	60fb      	str	r3, [r7, #12]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0ee:	f107 0314 	add.w	r3, r7, #20
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	4809      	ldr	r0, [pc, #36]	; (800e11c <HAL_ADC_MspInit+0x94>)
 800e0f6:	f001 ff59 	bl	800ffac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	2012      	movs	r0, #18
 800e100:	f001 fe7d 	bl	800fdfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e104:	2012      	movs	r0, #18
 800e106:	f001 fe96 	bl	800fe36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e10a:	bf00      	nop
 800e10c:	3728      	adds	r7, #40	; 0x28
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	40012000 	.word	0x40012000
 800e118:	40023800 	.word	0x40023800
 800e11c:	40020000 	.word	0x40020000

0800e120 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b08a      	sub	sp, #40	; 0x28
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e128:	f107 0314 	add.w	r3, r7, #20
 800e12c:	2200      	movs	r2, #0
 800e12e:	601a      	str	r2, [r3, #0]
 800e130:	605a      	str	r2, [r3, #4]
 800e132:	609a      	str	r2, [r3, #8]
 800e134:	60da      	str	r2, [r3, #12]
 800e136:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a21      	ldr	r2, [pc, #132]	; (800e1c4 <HAL_I2C_MspInit+0xa4>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d13c      	bne.n	800e1bc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e142:	2300      	movs	r3, #0
 800e144:	613b      	str	r3, [r7, #16]
 800e146:	4b20      	ldr	r3, [pc, #128]	; (800e1c8 <HAL_I2C_MspInit+0xa8>)
 800e148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14a:	4a1f      	ldr	r2, [pc, #124]	; (800e1c8 <HAL_I2C_MspInit+0xa8>)
 800e14c:	f043 0302 	orr.w	r3, r3, #2
 800e150:	6313      	str	r3, [r2, #48]	; 0x30
 800e152:	4b1d      	ldr	r3, [pc, #116]	; (800e1c8 <HAL_I2C_MspInit+0xa8>)
 800e154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e156:	f003 0302 	and.w	r3, r3, #2
 800e15a:	613b      	str	r3, [r7, #16]
 800e15c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800e15e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e164:	2312      	movs	r3, #18
 800e166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e168:	2300      	movs	r3, #0
 800e16a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e16c:	2303      	movs	r3, #3
 800e16e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e170:	2304      	movs	r3, #4
 800e172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e174:	f107 0314 	add.w	r3, r7, #20
 800e178:	4619      	mov	r1, r3
 800e17a:	4814      	ldr	r0, [pc, #80]	; (800e1cc <HAL_I2C_MspInit+0xac>)
 800e17c:	f001 ff16 	bl	800ffac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e180:	2300      	movs	r3, #0
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	4b10      	ldr	r3, [pc, #64]	; (800e1c8 <HAL_I2C_MspInit+0xa8>)
 800e186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e188:	4a0f      	ldr	r2, [pc, #60]	; (800e1c8 <HAL_I2C_MspInit+0xa8>)
 800e18a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e18e:	6413      	str	r3, [r2, #64]	; 0x40
 800e190:	4b0d      	ldr	r3, [pc, #52]	; (800e1c8 <HAL_I2C_MspInit+0xa8>)
 800e192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e198:	60fb      	str	r3, [r7, #12]
 800e19a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800e19c:	2200      	movs	r2, #0
 800e19e:	2100      	movs	r1, #0
 800e1a0:	201f      	movs	r0, #31
 800e1a2:	f001 fe2c 	bl	800fdfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800e1a6:	201f      	movs	r0, #31
 800e1a8:	f001 fe45 	bl	800fe36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	2100      	movs	r1, #0
 800e1b0:	2020      	movs	r0, #32
 800e1b2:	f001 fe24 	bl	800fdfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800e1b6:	2020      	movs	r0, #32
 800e1b8:	f001 fe3d 	bl	800fe36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e1bc:	bf00      	nop
 800e1be:	3728      	adds	r7, #40	; 0x28
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	40005400 	.word	0x40005400
 800e1c8:	40023800 	.word	0x40023800
 800e1cc:	40020400 	.word	0x40020400

0800e1d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b08a      	sub	sp, #40	; 0x28
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1d8:	f107 0314 	add.w	r3, r7, #20
 800e1dc:	2200      	movs	r2, #0
 800e1de:	601a      	str	r2, [r3, #0]
 800e1e0:	605a      	str	r2, [r3, #4]
 800e1e2:	609a      	str	r2, [r3, #8]
 800e1e4:	60da      	str	r2, [r3, #12]
 800e1e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a19      	ldr	r2, [pc, #100]	; (800e254 <HAL_SPI_MspInit+0x84>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d12c      	bne.n	800e24c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	613b      	str	r3, [r7, #16]
 800e1f6:	4b18      	ldr	r3, [pc, #96]	; (800e258 <HAL_SPI_MspInit+0x88>)
 800e1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1fa:	4a17      	ldr	r2, [pc, #92]	; (800e258 <HAL_SPI_MspInit+0x88>)
 800e1fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e200:	6413      	str	r3, [r2, #64]	; 0x40
 800e202:	4b15      	ldr	r3, [pc, #84]	; (800e258 <HAL_SPI_MspInit+0x88>)
 800e204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e20a:	613b      	str	r3, [r7, #16]
 800e20c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e20e:	2300      	movs	r3, #0
 800e210:	60fb      	str	r3, [r7, #12]
 800e212:	4b11      	ldr	r3, [pc, #68]	; (800e258 <HAL_SPI_MspInit+0x88>)
 800e214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e216:	4a10      	ldr	r2, [pc, #64]	; (800e258 <HAL_SPI_MspInit+0x88>)
 800e218:	f043 0302 	orr.w	r3, r3, #2
 800e21c:	6313      	str	r3, [r2, #48]	; 0x30
 800e21e:	4b0e      	ldr	r3, [pc, #56]	; (800e258 <HAL_SPI_MspInit+0x88>)
 800e220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e222:	f003 0302 	and.w	r3, r3, #2
 800e226:	60fb      	str	r3, [r7, #12]
 800e228:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800e22a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800e22e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e230:	2302      	movs	r3, #2
 800e232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e234:	2300      	movs	r3, #0
 800e236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e238:	2303      	movs	r3, #3
 800e23a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e23c:	2305      	movs	r3, #5
 800e23e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e240:	f107 0314 	add.w	r3, r7, #20
 800e244:	4619      	mov	r1, r3
 800e246:	4805      	ldr	r0, [pc, #20]	; (800e25c <HAL_SPI_MspInit+0x8c>)
 800e248:	f001 feb0 	bl	800ffac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e24c:	bf00      	nop
 800e24e:	3728      	adds	r7, #40	; 0x28
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	40003800 	.word	0x40003800
 800e258:	40023800 	.word	0x40023800
 800e25c:	40020400 	.word	0x40020400

0800e260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a0e      	ldr	r2, [pc, #56]	; (800e2a8 <HAL_TIM_Base_MspInit+0x48>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d115      	bne.n	800e29e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e272:	2300      	movs	r3, #0
 800e274:	60fb      	str	r3, [r7, #12]
 800e276:	4b0d      	ldr	r3, [pc, #52]	; (800e2ac <HAL_TIM_Base_MspInit+0x4c>)
 800e278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e27a:	4a0c      	ldr	r2, [pc, #48]	; (800e2ac <HAL_TIM_Base_MspInit+0x4c>)
 800e27c:	f043 0301 	orr.w	r3, r3, #1
 800e280:	6453      	str	r3, [r2, #68]	; 0x44
 800e282:	4b0a      	ldr	r3, [pc, #40]	; (800e2ac <HAL_TIM_Base_MspInit+0x4c>)
 800e284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e286:	f003 0301 	and.w	r3, r3, #1
 800e28a:	60fb      	str	r3, [r7, #12]
 800e28c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800e28e:	2200      	movs	r2, #0
 800e290:	2100      	movs	r1, #0
 800e292:	2019      	movs	r0, #25
 800e294:	f001 fdb3 	bl	800fdfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e298:	2019      	movs	r0, #25
 800e29a:	f001 fdcc 	bl	800fe36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800e29e:	bf00      	nop
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	40010000 	.word	0x40010000
 800e2ac:	40023800 	.word	0x40023800

0800e2b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08a      	sub	sp, #40	; 0x28
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2b8:	f107 0314 	add.w	r3, r7, #20
 800e2bc:	2200      	movs	r2, #0
 800e2be:	601a      	str	r2, [r3, #0]
 800e2c0:	605a      	str	r2, [r3, #4]
 800e2c2:	609a      	str	r2, [r3, #8]
 800e2c4:	60da      	str	r2, [r3, #12]
 800e2c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a1d      	ldr	r2, [pc, #116]	; (800e344 <HAL_UART_MspInit+0x94>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d133      	bne.n	800e33a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	613b      	str	r3, [r7, #16]
 800e2d6:	4b1c      	ldr	r3, [pc, #112]	; (800e348 <HAL_UART_MspInit+0x98>)
 800e2d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2da:	4a1b      	ldr	r2, [pc, #108]	; (800e348 <HAL_UART_MspInit+0x98>)
 800e2dc:	f043 0310 	orr.w	r3, r3, #16
 800e2e0:	6453      	str	r3, [r2, #68]	; 0x44
 800e2e2:	4b19      	ldr	r3, [pc, #100]	; (800e348 <HAL_UART_MspInit+0x98>)
 800e2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2e6:	f003 0310 	and.w	r3, r3, #16
 800e2ea:	613b      	str	r3, [r7, #16]
 800e2ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	60fb      	str	r3, [r7, #12]
 800e2f2:	4b15      	ldr	r3, [pc, #84]	; (800e348 <HAL_UART_MspInit+0x98>)
 800e2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2f6:	4a14      	ldr	r2, [pc, #80]	; (800e348 <HAL_UART_MspInit+0x98>)
 800e2f8:	f043 0302 	orr.w	r3, r3, #2
 800e2fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e2fe:	4b12      	ldr	r3, [pc, #72]	; (800e348 <HAL_UART_MspInit+0x98>)
 800e300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e302:	f003 0302 	and.w	r3, r3, #2
 800e306:	60fb      	str	r3, [r7, #12]
 800e308:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e30a:	23c0      	movs	r3, #192	; 0xc0
 800e30c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e30e:	2302      	movs	r3, #2
 800e310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e312:	2300      	movs	r3, #0
 800e314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e316:	2303      	movs	r3, #3
 800e318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e31a:	2307      	movs	r3, #7
 800e31c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e31e:	f107 0314 	add.w	r3, r7, #20
 800e322:	4619      	mov	r1, r3
 800e324:	4809      	ldr	r0, [pc, #36]	; (800e34c <HAL_UART_MspInit+0x9c>)
 800e326:	f001 fe41 	bl	800ffac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e32a:	2200      	movs	r2, #0
 800e32c:	2100      	movs	r1, #0
 800e32e:	2025      	movs	r0, #37	; 0x25
 800e330:	f001 fd65 	bl	800fdfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e334:	2025      	movs	r0, #37	; 0x25
 800e336:	f001 fd7e 	bl	800fe36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800e33a:	bf00      	nop
 800e33c:	3728      	adds	r7, #40	; 0x28
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	40011000 	.word	0x40011000
 800e348:	40023800 	.word	0x40023800
 800e34c:	40020400 	.word	0x40020400

0800e350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800e354:	f005 f976 	bl	8013644 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800e358:	e7fe      	b.n	800e358 <NMI_Handler+0x8>

0800e35a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e35a:	b480      	push	{r7}
 800e35c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e35e:	e7fe      	b.n	800e35e <HardFault_Handler+0x4>

0800e360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e360:	b480      	push	{r7}
 800e362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e364:	e7fe      	b.n	800e364 <MemManage_Handler+0x4>

0800e366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e366:	b480      	push	{r7}
 800e368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e36a:	e7fe      	b.n	800e36a <BusFault_Handler+0x4>

0800e36c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e36c:	b480      	push	{r7}
 800e36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e370:	e7fe      	b.n	800e370 <UsageFault_Handler+0x4>

0800e372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e372:	b480      	push	{r7}
 800e374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e376:	bf00      	nop
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e380:	b480      	push	{r7}
 800e382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e384:	bf00      	nop
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr

0800e38e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e38e:	b480      	push	{r7}
 800e390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e392:	bf00      	nop
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e3a0:	f000 fed6 	bl	800f150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  MilliTimer_Handler();
 800e3a4:	f7f8 ff18 	bl	80071d8 <MilliTimer_Handler>

  static uint16_t milli_count;
   milli_count++;
 800e3a8:	4b08      	ldr	r3, [pc, #32]	; (800e3cc <SysTick_Handler+0x30>)
 800e3aa:	881b      	ldrh	r3, [r3, #0]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	b29a      	uxth	r2, r3
 800e3b0:	4b06      	ldr	r3, [pc, #24]	; (800e3cc <SysTick_Handler+0x30>)
 800e3b2:	801a      	strh	r2, [r3, #0]
   if(milli_count==1000)
 800e3b4:	4b05      	ldr	r3, [pc, #20]	; (800e3cc <SysTick_Handler+0x30>)
 800e3b6:	881b      	ldrh	r3, [r3, #0]
 800e3b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e3bc:	d104      	bne.n	800e3c8 <SysTick_Handler+0x2c>
   {
   milli_count=0;
 800e3be:	4b03      	ldr	r3, [pc, #12]	; (800e3cc <SysTick_Handler+0x30>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	801a      	strh	r2, [r3, #0]
   DHCP_time_handler();
 800e3c4:	f7f4 f890 	bl	80024e8 <DHCP_time_handler>
   }

  /* USER CODE END SysTick_IRQn 1 */
}
 800e3c8:	bf00      	nop
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	20003318 	.word	0x20003318

0800e3d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800e3d4:	4802      	ldr	r0, [pc, #8]	; (800e3e0 <ADC_IRQHandler+0x10>)
 800e3d6:	f001 f8d3 	bl	800f580 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800e3da:	bf00      	nop
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	200015e0 	.word	0x200015e0

0800e3e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e3e8:	4802      	ldr	r0, [pc, #8]	; (800e3f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e3ea:	f005 ffdd 	bl	80143a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e3ee:	bf00      	nop
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	20001628 	.word	0x20001628

0800e3f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800e3fc:	4802      	ldr	r0, [pc, #8]	; (800e408 <I2C1_EV_IRQHandler+0x10>)
 800e3fe:	f002 fc41 	bl	8010c84 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800e402:	bf00      	nop
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	20001670 	.word	0x20001670

0800e40c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800e410:	4802      	ldr	r0, [pc, #8]	; (800e41c <I2C1_ER_IRQHandler+0x10>)
 800e412:	f002 fd8a 	bl	8010f2a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800e416:	bf00      	nop
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	20001670 	.word	0x20001670

0800e420 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	af00      	add	r7, sp, #0
	  }

*/

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e424:	4802      	ldr	r0, [pc, #8]	; (800e430 <USART1_IRQHandler+0x10>)
 800e426:	f006 fc75 	bl	8014d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e42a:	bf00      	nop
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	2000171c 	.word	0x2000171c

0800e434 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NetworkStatus_Pin);
 800e438:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e43c:	f001 ff84 	bl	8010348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e440:	bf00      	nop
 800e442:	bd80      	pop	{r7, pc}

0800e444 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e444:	b480      	push	{r7}
 800e446:	af00      	add	r7, sp, #0
  return 1;
 800e448:	2301      	movs	r3, #1
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <_kill>:

int _kill(int pid, int sig)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e45e:	f009 fd47 	bl	8017ef0 <__errno>
 800e462:	4603      	mov	r3, r0
 800e464:	2216      	movs	r2, #22
 800e466:	601a      	str	r2, [r3, #0]
  return -1;
 800e468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <_exit>:

void _exit (int status)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800e47c:	f04f 31ff 	mov.w	r1, #4294967295
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f7ff ffe7 	bl	800e454 <_kill>
  while (1) {}    /* Make sure we hang here */
 800e486:	e7fe      	b.n	800e486 <_exit+0x12>

0800e488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b086      	sub	sp, #24
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e494:	2300      	movs	r3, #0
 800e496:	617b      	str	r3, [r7, #20]
 800e498:	e00a      	b.n	800e4b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e49a:	f3af 8000 	nop.w
 800e49e:	4601      	mov	r1, r0
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	1c5a      	adds	r2, r3, #1
 800e4a4:	60ba      	str	r2, [r7, #8]
 800e4a6:	b2ca      	uxtb	r2, r1
 800e4a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	617b      	str	r3, [r7, #20]
 800e4b0:	697a      	ldr	r2, [r7, #20]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	dbf0      	blt.n	800e49a <_read+0x12>
  }

  return len;
 800e4b8:	687b      	ldr	r3, [r7, #4]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3718      	adds	r7, #24
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b086      	sub	sp, #24
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	60f8      	str	r0, [r7, #12]
 800e4ca:	60b9      	str	r1, [r7, #8]
 800e4cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	617b      	str	r3, [r7, #20]
 800e4d2:	e009      	b.n	800e4e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	60ba      	str	r2, [r7, #8]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	617b      	str	r3, [r7, #20]
 800e4e8:	697a      	ldr	r2, [r7, #20]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	dbf1      	blt.n	800e4d4 <_write+0x12>
  }
  return len;
 800e4f0:	687b      	ldr	r3, [r7, #4]
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3718      	adds	r7, #24
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <_close>:

int _close(int file)
{
 800e4fa:	b480      	push	{r7}
 800e4fc:	b083      	sub	sp, #12
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e502:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e506:	4618      	mov	r0, r3
 800e508:	370c      	adds	r7, #12
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr

0800e512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e512:	b480      	push	{r7}
 800e514:	b083      	sub	sp, #12
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
 800e51a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e522:	605a      	str	r2, [r3, #4]
  return 0;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	370c      	adds	r7, #12
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <_isatty>:

int _isatty(int file)
{
 800e532:	b480      	push	{r7}
 800e534:	b083      	sub	sp, #12
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e53a:	2301      	movs	r3, #1
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e548:	b480      	push	{r7}
 800e54a:	b085      	sub	sp, #20
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3714      	adds	r7, #20
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
	...

0800e564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e56c:	4a14      	ldr	r2, [pc, #80]	; (800e5c0 <_sbrk+0x5c>)
 800e56e:	4b15      	ldr	r3, [pc, #84]	; (800e5c4 <_sbrk+0x60>)
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e578:	4b13      	ldr	r3, [pc, #76]	; (800e5c8 <_sbrk+0x64>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d102      	bne.n	800e586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e580:	4b11      	ldr	r3, [pc, #68]	; (800e5c8 <_sbrk+0x64>)
 800e582:	4a12      	ldr	r2, [pc, #72]	; (800e5cc <_sbrk+0x68>)
 800e584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e586:	4b10      	ldr	r3, [pc, #64]	; (800e5c8 <_sbrk+0x64>)
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4413      	add	r3, r2
 800e58e:	693a      	ldr	r2, [r7, #16]
 800e590:	429a      	cmp	r2, r3
 800e592:	d207      	bcs.n	800e5a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e594:	f009 fcac 	bl	8017ef0 <__errno>
 800e598:	4603      	mov	r3, r0
 800e59a:	220c      	movs	r2, #12
 800e59c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e59e:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a2:	e009      	b.n	800e5b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e5a4:	4b08      	ldr	r3, [pc, #32]	; (800e5c8 <_sbrk+0x64>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e5aa:	4b07      	ldr	r3, [pc, #28]	; (800e5c8 <_sbrk+0x64>)
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	4a05      	ldr	r2, [pc, #20]	; (800e5c8 <_sbrk+0x64>)
 800e5b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3718      	adds	r7, #24
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	20020000 	.word	0x20020000
 800e5c4:	00000400 	.word	0x00000400
 800e5c8:	2000331c 	.word	0x2000331c
 800e5cc:	20003478 	.word	0x20003478

0800e5d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e5d4:	4b06      	ldr	r3, [pc, #24]	; (800e5f0 <SystemInit+0x20>)
 800e5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5da:	4a05      	ldr	r2, [pc, #20]	; (800e5f0 <SystemInit+0x20>)
 800e5dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e5e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e5e4:	bf00      	nop
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr
 800e5ee:	bf00      	nop
 800e5f0:	e000ed00 	.word	0xe000ed00

0800e5f4 <_ZN5UtilsC1Ev>:
#include <cmath>


Utils* Utils::instance = nullptr;

Utils::Utils(){
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
	Utils::instance = this;
 800e5fc:	4a04      	ldr	r2, [pc, #16]	; (800e610 <_ZN5UtilsC1Ev+0x1c>)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6013      	str	r3, [r2, #0]
}
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	4618      	mov	r0, r3
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr
 800e610:	20003320 	.word	0x20003320

0800e614 <_ZN5Utils4initEP6ConfigP9MuxSelect>:

void Utils::init(Config* config, MuxSelect* muxInstance){
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
	mux = muxInstance;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	605a      	str	r2, [r3, #4]
	conf = config;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	601a      	str	r2, [r3, #0]


	switches[0] = {GPIOE, GPIO_PIN_12}; // switch1
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	4a56      	ldr	r2, [pc, #344]	; (800e788 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x174>)
 800e630:	3308      	adds	r3, #8
 800e632:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e636:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[1] = {GPIOE, GPIO_PIN_13}; // switch2
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	4a53      	ldr	r2, [pc, #332]	; (800e78c <_ZN5Utils4initEP6ConfigP9MuxSelect+0x178>)
 800e63e:	3310      	adds	r3, #16
 800e640:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e644:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[2] = {GPIOE, GPIO_PIN_14}; // switch3
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	4a51      	ldr	r2, [pc, #324]	; (800e790 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x17c>)
 800e64c:	3318      	adds	r3, #24
 800e64e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e652:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[3] = {GPIOE, GPIO_PIN_15}; // switch4
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	4a4e      	ldr	r2, [pc, #312]	; (800e794 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x180>)
 800e65a:	3320      	adds	r3, #32
 800e65c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e660:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[4] = {GPIOA, GPIO_PIN_4};  // switch5
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	4a4c      	ldr	r2, [pc, #304]	; (800e798 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x184>)
 800e668:	3328      	adds	r3, #40	; 0x28
 800e66a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e66e:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[5] = {GPIOA, GPIO_PIN_5};  // switch6
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	4a49      	ldr	r2, [pc, #292]	; (800e79c <_ZN5Utils4initEP6ConfigP9MuxSelect+0x188>)
 800e676:	3330      	adds	r3, #48	; 0x30
 800e678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e67c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[6] = {GPIOA, GPIO_PIN_6};  // switch7
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	4a47      	ldr	r2, [pc, #284]	; (800e7a0 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x18c>)
 800e684:	3338      	adds	r3, #56	; 0x38
 800e686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e68a:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[7] = {GPIOA, GPIO_PIN_7};  // switch8
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	4a44      	ldr	r2, [pc, #272]	; (800e7a4 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x190>)
 800e692:	3340      	adds	r3, #64	; 0x40
 800e694:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e698:	e883 0003 	stmia.w	r3, {r0, r1}


    digitalInputs[0] = {GPIOC, GPIO_PIN_0};   // DI1
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	4a42      	ldr	r2, [pc, #264]	; (800e7a8 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x194>)
 800e6a0:	3348      	adds	r3, #72	; 0x48
 800e6a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e6a6:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[1] = {GPIOC, GPIO_PIN_1};   // DI2
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	4a3f      	ldr	r2, [pc, #252]	; (800e7ac <_ZN5Utils4initEP6ConfigP9MuxSelect+0x198>)
 800e6ae:	3350      	adds	r3, #80	; 0x50
 800e6b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e6b4:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[2] = {GPIOC, GPIO_PIN_2};   // DI3
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	4a3d      	ldr	r2, [pc, #244]	; (800e7b0 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x19c>)
 800e6bc:	3358      	adds	r3, #88	; 0x58
 800e6be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e6c2:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[3] = {GPIOC, GPIO_PIN_3};   // DI4
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	4a3a      	ldr	r2, [pc, #232]	; (800e7b4 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1a0>)
 800e6ca:	3360      	adds	r3, #96	; 0x60
 800e6cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e6d0:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[4] = {GPIOD, GPIO_PIN_8};   // DI5
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4a38      	ldr	r2, [pc, #224]	; (800e7b8 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1a4>)
 800e6d8:	3368      	adds	r3, #104	; 0x68
 800e6da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e6de:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[5] = {GPIOD, GPIO_PIN_9};   // DI6
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	4a35      	ldr	r2, [pc, #212]	; (800e7bc <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1a8>)
 800e6e6:	3370      	adds	r3, #112	; 0x70
 800e6e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e6ec:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[6] = {GPIOD, GPIO_PIN_10};  // DI7
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	4a33      	ldr	r2, [pc, #204]	; (800e7c0 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1ac>)
 800e6f4:	3378      	adds	r3, #120	; 0x78
 800e6f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e6fa:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[7] = {GPIOD, GPIO_PIN_13};  // DI8
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	4a30      	ldr	r2, [pc, #192]	; (800e7c4 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1b0>)
 800e702:	3380      	adds	r3, #128	; 0x80
 800e704:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e708:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[8] = {GPIOC, GPIO_PIN_6};   // DI9
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	4a2e      	ldr	r2, [pc, #184]	; (800e7c8 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1b4>)
 800e710:	3388      	adds	r3, #136	; 0x88
 800e712:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e716:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[9] = {GPIOC, GPIO_PIN_7};   // DI10
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	4a2b      	ldr	r2, [pc, #172]	; (800e7cc <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1b8>)
 800e71e:	3390      	adds	r3, #144	; 0x90
 800e720:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e724:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[10] = {GPIOC, GPIO_PIN_8};  // DI11
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	4a29      	ldr	r2, [pc, #164]	; (800e7d0 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1bc>)
 800e72c:	3398      	adds	r3, #152	; 0x98
 800e72e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e732:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[11] = {GPIOC, GPIO_PIN_9};  // DI12
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	4a26      	ldr	r2, [pc, #152]	; (800e7d4 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1c0>)
 800e73a:	33a0      	adds	r3, #160	; 0xa0
 800e73c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e740:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[12] = {GPIOA, GPIO_PIN_8};  // DI13
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	4a24      	ldr	r2, [pc, #144]	; (800e7d8 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1c4>)
 800e748:	33a8      	adds	r3, #168	; 0xa8
 800e74a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e74e:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[13] = {GPIOA, GPIO_PIN_9};  // DI14
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	4a21      	ldr	r2, [pc, #132]	; (800e7dc <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1c8>)
 800e756:	33b0      	adds	r3, #176	; 0xb0
 800e758:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e75c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[14] = {GPIOA, GPIO_PIN_10}; // DI15
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	4a1f      	ldr	r2, [pc, #124]	; (800e7e0 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1cc>)
 800e764:	33b8      	adds	r3, #184	; 0xb8
 800e766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e76a:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[15] = {GPIOA, GPIO_PIN_11}; // DI16
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	4a1c      	ldr	r2, [pc, #112]	; (800e7e4 <_ZN5Utils4initEP6ConfigP9MuxSelect+0x1d0>)
 800e772:	33c0      	adds	r3, #192	; 0xc0
 800e774:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e778:	e883 0003 	stmia.w	r3, {r0, r1}


}
 800e77c:	bf00      	nop
 800e77e:	3714      	adds	r7, #20
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr
 800e788:	0801b678 	.word	0x0801b678
 800e78c:	0801b680 	.word	0x0801b680
 800e790:	0801b688 	.word	0x0801b688
 800e794:	0801b690 	.word	0x0801b690
 800e798:	0801b698 	.word	0x0801b698
 800e79c:	0801b6a0 	.word	0x0801b6a0
 800e7a0:	0801b6a8 	.word	0x0801b6a8
 800e7a4:	0801b6b0 	.word	0x0801b6b0
 800e7a8:	0801b6b8 	.word	0x0801b6b8
 800e7ac:	0801b6c0 	.word	0x0801b6c0
 800e7b0:	0801b6c8 	.word	0x0801b6c8
 800e7b4:	0801b6d0 	.word	0x0801b6d0
 800e7b8:	0801b6d8 	.word	0x0801b6d8
 800e7bc:	0801b6e0 	.word	0x0801b6e0
 800e7c0:	0801b6e8 	.word	0x0801b6e8
 800e7c4:	0801b6f0 	.word	0x0801b6f0
 800e7c8:	0801b6f8 	.word	0x0801b6f8
 800e7cc:	0801b700 	.word	0x0801b700
 800e7d0:	0801b708 	.word	0x0801b708
 800e7d4:	0801b710 	.word	0x0801b710
 800e7d8:	0801b718 	.word	0x0801b718
 800e7dc:	0801b720 	.word	0x0801b720
 800e7e0:	0801b728 	.word	0x0801b728
 800e7e4:	0801b730 	.word	0x0801b730

0800e7e8 <_ZN5Utils5printEPKcz>:
void Utils::print(const char* fmt, ...){
 800e7e8:	b40f      	push	{r0, r1, r2, r3}
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b0c2      	sub	sp, #264	; 0x108
 800e7ee:	af00      	add	r7, sp, #0

	 char buff[256];
	 va_list args;
	 va_start(args, fmt);
 800e7f0:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800e7f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7fc:	601a      	str	r2, [r3, #0]
	 vsnprintf(buff, sizeof(buff), fmt, args);
 800e7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e802:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e806:	f107 0008 	add.w	r0, r7, #8
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800e810:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e814:	f009 fa5e 	bl	8017cd4 <vsniprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 800e818:	f107 0308 	add.w	r3, r7, #8
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7f1 fd37 	bl	8000290 <strlen>
 800e822:	4603      	mov	r3, r0
 800e824:	b29a      	uxth	r2, r3
 800e826:	f107 0108 	add.w	r1, r7, #8
 800e82a:	f04f 33ff 	mov.w	r3, #4294967295
 800e82e:	4805      	ldr	r0, [pc, #20]	; (800e844 <_ZN5Utils5printEPKcz+0x5c>)
 800e830:	f006 f9c0 	bl	8014bb4 <HAL_UART_Transmit>
	                      HAL_MAX_DELAY);
	 va_end(args);

}
 800e834:	bf00      	nop
 800e836:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e83a:	46bd      	mov	sp, r7
 800e83c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e840:	b004      	add	sp, #16
 800e842:	4770      	bx	lr
 800e844:	2000171c 	.word	0x2000171c

0800e848 <_ZN5Utils9playSoundEv>:

size_t Utils::getSwitchesCount() const {
    return sizeof(switches) / sizeof(switches[0]);
}

void Utils::playSound(){
 800e848:	b580      	push	{r7, lr}
 800e84a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(sound_GPIO_Port, sound_Pin, GPIO_PIN_SET);
 800e84c:	2201      	movs	r2, #1
 800e84e:	2102      	movs	r1, #2
 800e850:	4807      	ldr	r0, [pc, #28]	; (800e870 <_ZN5Utils9playSoundEv+0x28>)
 800e852:	f001 fd5f 	bl	8010314 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800e856:	2014      	movs	r0, #20
 800e858:	f000 fc9a 	bl	800f190 <HAL_Delay>
	HAL_GPIO_WritePin(sound_GPIO_Port, sound_Pin, GPIO_PIN_RESET);
 800e85c:	2200      	movs	r2, #0
 800e85e:	2102      	movs	r1, #2
 800e860:	4803      	ldr	r0, [pc, #12]	; (800e870 <_ZN5Utils9playSoundEv+0x28>)
 800e862:	f001 fd57 	bl	8010314 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800e866:	2014      	movs	r0, #20
 800e868:	f000 fc92 	bl	800f190 <HAL_Delay>
}
 800e86c:	bf00      	nop
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	40021000 	.word	0x40021000

0800e874 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti>:

bool Utils::switchRelay(GPIO_TypeDef* port, uint16_t switchPin, int status){
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	4613      	mov	r3, r2
 800e882:	80fb      	strh	r3, [r7, #6]
    if (status > 1) {
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b01      	cmp	r3, #1
 800e888:	dd05      	ble.n	800e896 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x22>
    	print("Status is not valid %d \r\n", status);
 800e88a:	6839      	ldr	r1, [r7, #0]
 800e88c:	480c      	ldr	r0, [pc, #48]	; (800e8c0 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x4c>)
 800e88e:	f7ff ffab 	bl	800e7e8 <_ZN5Utils5printEPKcz>
    	return false;
 800e892:	2300      	movs	r3, #0
 800e894:	e00f      	b.n	800e8b6 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x42>
    }
	GPIO_PinState gpioStatus = status == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b01      	cmp	r3, #1
 800e89a:	d101      	bne.n	800e8a0 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x2c>
 800e89c:	2301      	movs	r3, #1
 800e89e:	e000      	b.n	800e8a2 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x2e>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	75fb      	strb	r3, [r7, #23]
	playSound();
 800e8a4:	f7ff ffd0 	bl	800e848 <_ZN5Utils9playSoundEv>
	HAL_GPIO_WritePin(port, switchPin, gpioStatus);
 800e8a8:	7dfa      	ldrb	r2, [r7, #23]
 800e8aa:	88fb      	ldrh	r3, [r7, #6]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	68b8      	ldr	r0, [r7, #8]
 800e8b0:	f001 fd30 	bl	8010314 <HAL_GPIO_WritePin>
	return true;
 800e8b4:	2301      	movs	r3, #1
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3718      	adds	r7, #24
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	0801b738 	.word	0x0801b738

0800e8c4 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>:

int Utils::readGPIOPinState(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	80fb      	strh	r3, [r7, #6]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET ? 0 : 1;
 800e8d2:	88fb      	ldrh	r3, [r7, #6]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	68b8      	ldr	r0, [r7, #8]
 800e8d8:	f001 fd04 	bl	80102e4 <HAL_GPIO_ReadPin>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	bf14      	ite	ne
 800e8e2:	2301      	movne	r3, #1
 800e8e4:	2300      	moveq	r3, #0
 800e8e6:	b2db      	uxtb	r3, r3
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3710      	adds	r7, #16
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void Utils::createJSON(std::string *message) {
 800e8f0:	b590      	push	{r4, r7, lr}
 800e8f2:	b0bb      	sub	sp, #236	; 0xec
 800e8f4:	af02      	add	r7, sp, #8
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
    cJSON *root = cJSON_CreateObject();
 800e8fa:	f7f7 fe27 	bl	800654c <cJSON_CreateObject>
 800e8fe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    // Change aiArray from an array to an object.
    cJSON *aiObj = cJSON_CreateObject();
 800e902:	f7f7 fe23 	bl	800654c <cJSON_CreateObject>
 800e906:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    cJSON *diObj = cJSON_CreateObject();
 800e90a:	f7f7 fe1f 	bl	800654c <cJSON_CreateObject>
 800e90e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    cJSON *doObj = cJSON_CreateObject();
 800e912:	f7f7 fe1b 	bl	800654c <cJSON_CreateObject>
 800e916:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

    AnalogReadings analogValue = mux->SwitchAnalog();
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	685a      	ldr	r2, [r3, #4]
 800e91e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e922:	4611      	mov	r1, r2
 800e924:	4618      	mov	r0, r3
 800e926:	f7fb ffb3 	bl	800a890 <_ZN9MuxSelect12SwitchAnalogEv>

    uint8_t lenrelay = conf->getExtentionEnabled() ? 8 : 4;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fd fd3b 	bl	800c3aa <_ZNK6Config19getExtentionEnabledEv>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d001      	beq.n	800e93e <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
 800e93a:	2308      	movs	r3, #8
 800e93c:	e000      	b.n	800e940 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>
 800e93e:	2304      	movs	r3, #4
 800e940:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    for (int i = 0; i < lenrelay; i++) {
 800e944:	2300      	movs	r3, #0
 800e946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e94a:	e03f      	b.n	800e9cc <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdc>
    	char formattedStr[32];
        int status = readGPIOPinState(switches[i].port, switches[i].pin);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e952:	3201      	adds	r2, #1
 800e954:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e95e:	3301      	adds	r3, #1
 800e960:	00db      	lsls	r3, r3, #3
 800e962:	4413      	add	r3, r2
 800e964:	889b      	ldrh	r3, [r3, #4]
 800e966:	461a      	mov	r2, r3
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f7ff ffab 	bl	800e8c4 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>
 800e96e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        snprintf(formattedStr, sizeof(formattedStr), "%d,%d", i+1, status);
 800e972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e976:	1c5a      	adds	r2, r3, #1
 800e978:	f107 000c 	add.w	r0, r7, #12
 800e97c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	4613      	mov	r3, r2
 800e984:	4a8a      	ldr	r2, [pc, #552]	; (800ebb0 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c0>)
 800e986:	2120      	movs	r1, #32
 800e988:	f009 f8b4 	bl	8017af4 <sniprintf>
        cJSON_AddStringToObject(doObj, conf->getDigitalOutputName(i).c_str(), formattedStr);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6819      	ldr	r1, [r3, #0]
 800e990:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e994:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fc fd00 	bl	800b39e <_ZN6Config20getDigitalOutputNameB5cxx11Ei>
 800e99e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f007 fbc6 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800e9a8:	4601      	mov	r1, r0
 800e9aa:	f107 030c 	add.w	r3, r7, #12
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800e9b4:	f7f7 fd82 	bl	80064bc <cJSON_AddStringToObject>
 800e9b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f007 fa3f 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    for (int i = 0; i < lenrelay; i++) {
 800e9c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e9cc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800e9d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	dbb9      	blt.n	800e94c <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
    }
    uint8_t len = conf->getExtentionEnabled() ? 16 : 8;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fd fce4 	bl	800c3aa <_ZNK6Config19getExtentionEnabledEv>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfc>
 800e9e8:	2310      	movs	r3, #16
 800e9ea:	e000      	b.n	800e9ee <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfe>
 800e9ec:	2308      	movs	r3, #8
 800e9ee:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
    for (int i = 0; i < len; i++) {
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e9f8:	e048      	b.n	800ea8c <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19c>
    	char formattedStr[32];
        int status = readGPIOPinState(digitalInputs[i].port, digitalInputs[i].pin);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ea00:	3209      	adds	r2, #9
 800ea02:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea0c:	3309      	adds	r3, #9
 800ea0e:	00db      	lsls	r3, r3, #3
 800ea10:	4413      	add	r3, r2
 800ea12:	889b      	ldrh	r3, [r3, #4]
 800ea14:	461a      	mov	r2, r3
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7ff ff54 	bl	800e8c4 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>
 800ea1c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        int finalStatus = status == 1 ? 0 : 1;
 800ea20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	bf14      	ite	ne
 800ea28:	2301      	movne	r3, #1
 800ea2a:	2300      	moveq	r3, #0
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    	snprintf(formattedStr, sizeof(formattedStr), "%d,%d", i+1, finalStatus);
 800ea32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea36:	1c5a      	adds	r2, r3, #1
 800ea38:	f107 000c 	add.w	r0, r7, #12
 800ea3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	4613      	mov	r3, r2
 800ea44:	4a5a      	ldr	r2, [pc, #360]	; (800ebb0 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c0>)
 800ea46:	2120      	movs	r1, #32
 800ea48:	f009 f854 	bl	8017af4 <sniprintf>
        cJSON_AddStringToObject(diObj, conf->getDigitalInputName(i).c_str(),formattedStr);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6819      	ldr	r1, [r3, #0]
 800ea50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ea54:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fc fc89 	bl	800b370 <_ZN6Config19getDigitalInputNameB5cxx11Ei>
 800ea5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ea62:	4618      	mov	r0, r3
 800ea64:	f007 fb66 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800ea68:	4601      	mov	r1, r0
 800ea6a:	f107 030c 	add.w	r3, r7, #12
 800ea6e:	461a      	mov	r2, r3
 800ea70:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800ea74:	f7f7 fd22 	bl	80064bc <cJSON_AddStringToObject>
 800ea78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f007 f9df 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    for (int i = 0; i < len; i++) {
 800ea82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea86:	3301      	adds	r3, #1
 800ea88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ea8c:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 800ea90:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ea94:	429a      	cmp	r2, r3
 800ea96:	dbb0      	blt.n	800e9fa <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10a>
    }

    for (int i = 0; i < 8; i++) {
 800ea98:	2300      	movs	r3, #0
 800ea9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ea9e:	e03a      	b.n	800eb16 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x226>
        float status = analogValue.values[i]; // Placeholder, adjust according to your implementation
 800eaa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	33e0      	adds	r3, #224	; 0xe0
 800eaa8:	443b      	add	r3, r7
 800eaaa:	3bb4      	subs	r3, #180	; 0xb4
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        char formattedStatus[32]; // Buffer to hold the formatted float string
        snprintf(formattedStatus, sizeof(formattedStatus), "%d,%.2f", i+1, status);
 800eab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eab6:	1c5c      	adds	r4, r3, #1
 800eab8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800eabc:	f7f1 fd54 	bl	8000568 <__aeabi_f2d>
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	f107 000c 	add.w	r0, r7, #12
 800eac8:	e9cd 2300 	strd	r2, r3, [sp]
 800eacc:	4623      	mov	r3, r4
 800eace:	4a39      	ldr	r2, [pc, #228]	; (800ebb4 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c4>)
 800ead0:	2120      	movs	r1, #32
 800ead2:	f009 f80f 	bl	8017af4 <sniprintf>
        cJSON_AddStringToObject(aiObj, conf->getAnalogInputName(i).c_str(), formattedStatus);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6819      	ldr	r1, [r3, #0]
 800eada:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eade:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fc fc2e 	bl	800b344 <_ZN6Config18getAnalogInputNameB5cxx11Ei>
 800eae8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eaec:	4618      	mov	r0, r3
 800eaee:	f007 fb21 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800eaf2:	4601      	mov	r1, r0
 800eaf4:	f107 030c 	add.w	r3, r7, #12
 800eaf8:	461a      	mov	r2, r3
 800eafa:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800eafe:	f7f7 fcdd 	bl	80064bc <cJSON_AddStringToObject>
 800eb02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eb06:	4618      	mov	r0, r3
 800eb08:	f007 f99a 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    for (int i = 0; i < 8; i++) {
 800eb0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eb10:	3301      	adds	r3, #1
 800eb12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800eb16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eb1a:	2b07      	cmp	r3, #7
 800eb1c:	ddc0      	ble.n	800eaa0 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b0>
    }

    // Attach the modified aiObj directly to the root, instead of an array.
    cJSON_AddItemToObject(root, "ai", aiObj);
 800eb1e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800eb22:	4925      	ldr	r1, [pc, #148]	; (800ebb8 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c8>)
 800eb24:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800eb28:	f7f7 fcb2 	bl	8006490 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "di", diObj);
 800eb2c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800eb30:	4922      	ldr	r1, [pc, #136]	; (800ebbc <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2cc>)
 800eb32:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800eb36:	f7f7 fcab 	bl	8006490 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "do", doObj);
 800eb3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800eb3e:	4920      	ldr	r1, [pc, #128]	; (800ebc0 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d0>)
 800eb40:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800eb44:	f7f7 fca4 	bl	8006490 <cJSON_AddItemToObject>
    cJSON_AddStringToObject(root, "mac", conf->getClientId().c_str());
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800eb50:	4611      	mov	r1, r2
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7fd fc50 	bl	800c3f8 <_ZNK6Config11getClientIdB5cxx11Ev>
 800eb58:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f007 fae9 	bl	8016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800eb62:	4603      	mov	r3, r0
 800eb64:	461a      	mov	r2, r3
 800eb66:	4917      	ldr	r1, [pc, #92]	; (800ebc4 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d4>)
 800eb68:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800eb6c:	f7f7 fca6 	bl	80064bc <cJSON_AddStringToObject>
 800eb70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800eb74:	4618      	mov	r0, r3
 800eb76:	f007 f963 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    // Print and assign the JSON string
    char* json_string = cJSON_Print(root);
 800eb7a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800eb7e:	f7f6 fe0b 	bl	8005798 <cJSON_Print>
 800eb82:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
    if (json_string != nullptr) {
 800eb86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d008      	beq.n	800eba0 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2b0>
        *message = json_string;
 800eb8e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800eb92:	6838      	ldr	r0, [r7, #0]
 800eb94:	f007 fa73 	bl	801607e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        free(json_string); // Free the allocated memory
 800eb98:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800eb9c:	f007 fb6c 	bl	8016278 <free>
    }
    cJSON_Delete(root); // Clean up the cJSON object
 800eba0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800eba4:	f7f5 fd5a 	bl	800465c <cJSON_Delete>
}
 800eba8:	bf00      	nop
 800ebaa:	37e4      	adds	r7, #228	; 0xe4
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd90      	pop	{r4, r7, pc}
 800ebb0:	0801b754 	.word	0x0801b754
 800ebb4:	0801b75c 	.word	0x0801b75c
 800ebb8:	0801b764 	.word	0x0801b764
 800ebbc:	0801b768 	.word	0x0801b768
 800ebc0:	0801b76c 	.word	0x0801b76c
 800ebc4:	0801b770 	.word	0x0801b770

0800ebc8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEC1Ev>:
    struct array
 800ebc8:	b5b0      	push	{r4, r5, r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2402      	movs	r4, #2
 800ebd4:	461d      	mov	r5, r3
 800ebd6:	e004      	b.n	800ebe2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEC1Ev+0x1a>
 800ebd8:	4628      	mov	r0, r5
 800ebda:	f007 f91a 	bl	8015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800ebde:	3518      	adds	r5, #24
 800ebe0:	3c01      	subs	r4, #1
 800ebe2:	2c00      	cmp	r4, #0
 800ebe4:	daf8      	bge.n	800ebd8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEC1Ev+0x10>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bdb0      	pop	{r4, r5, r7, pc}

0800ebf0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EED1Ev>:
 800ebf0:	b590      	push	{r4, r7, lr}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d00a      	beq.n	800ec14 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EED1Ev+0x24>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	429c      	cmp	r4, r3
 800ec08:	d004      	beq.n	800ec14 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EED1Ev+0x24>
 800ec0a:	3c18      	subs	r4, #24
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f007 f917 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ec12:	e7f7      	b.n	800ec04 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EED1Ev+0x14>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	4618      	mov	r0, r3
 800ec18:	370c      	adds	r7, #12
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd90      	pop	{r4, r7, pc}
	...

0800ec20 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Utils::createUSARTRealTime(std::string *messsage) {
 800ec20:	b590      	push	{r4, r7, lr}
 800ec22:	b0cf      	sub	sp, #316	; 0x13c
 800ec24:	af02      	add	r7, sp, #8
 800ec26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec2e:	6018      	str	r0, [r3, #0]
 800ec30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ec38:	6019      	str	r1, [r3, #0]
	std::string data = "2";
 800ec3a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f006 ffd3 	bl	8015bea <_ZNSaIcEC1Ev>
 800ec44:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800ec48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ec4c:	49ba      	ldr	r1, [pc, #744]	; (800ef38 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x318>)
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f007 fae2 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ec54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f006 ffc8 	bl	8015bee <_ZNSaIcED1Ev>
	std::string comma = ";";
 800ec5e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800ec62:	4618      	mov	r0, r3
 800ec64:	f006 ffc1 	bl	8015bea <_ZNSaIcEC1Ev>
 800ec68:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800ec6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ec70:	49b2      	ldr	r1, [pc, #712]	; (800ef3c <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x31c>)
 800ec72:	4618      	mov	r0, r3
 800ec74:	f007 fad0 	bl	8016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ec78:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f006 ffb6 	bl	8015bee <_ZNSaIcED1Ev>
	std::array<std::string, 3 > list;
 800ec82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7ff ff9e 	bl	800ebc8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEC1Ev>
	AnalogReadings analogValue = mux->SwitchAnalog();
 800ec8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	685a      	ldr	r2, [r3, #4]
 800ec98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eca0:	4611      	mov	r1, r2
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fb fdf4 	bl	800a890 <_ZN9MuxSelect12SwitchAnalogEv>


	for (size_t i = 0 ; i < 8 ; i++) {
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ecae:	e039      	b.n	800ed24 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x104>
		float status = analogValue.values[i]; // Placeholder, adjust according to your implementation
 800ecb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ecb4:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800ecb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	4413      	add	r3, r2
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		char formattedStatus[32];
		snprintf(formattedStatus, sizeof(formattedStatus), "%.2f", status);
 800ecc6:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800ecca:	f7f1 fc4d 	bl	8000568 <__aeabi_f2d>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	f107 000c 	add.w	r0, r7, #12
 800ecd6:	e9cd 2300 	strd	r2, r3, [sp]
 800ecda:	4a99      	ldr	r2, [pc, #612]	; (800ef40 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x320>)
 800ecdc:	2120      	movs	r1, #32
 800ecde:	f008 ff09 	bl	8017af4 <sniprintf>
		if (i > 0 ) {
 800ece2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d00a      	beq.n	800ed00 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>
			list[0] += ",";
 800ecea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ecee:	2100      	movs	r1, #0
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f000 f985 	bl	800f000 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEixEj>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	4992      	ldr	r1, [pc, #584]	; (800ef44 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x324>)
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f007 fa16 	bl	801612c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		}

		list[0] += formattedStatus;
 800ed00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ed04:	2100      	movs	r1, #0
 800ed06:	4618      	mov	r0, r3
 800ed08:	f000 f97a 	bl	800f000 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEixEj>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	f107 030c 	add.w	r3, r7, #12
 800ed12:	4619      	mov	r1, r3
 800ed14:	4610      	mov	r0, r2
 800ed16:	f007 fa09 	bl	801612c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	for (size_t i = 0 ; i < 8 ; i++) {
 800ed1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ed1e:	3301      	adds	r3, #1
 800ed20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ed24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ed28:	2b07      	cmp	r3, #7
 800ed2a:	d9c1      	bls.n	800ecb0 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>
	}

	//uint8_t len = conf->getExtentionEnabled() ? 16 : 8;
	for (size_t i = 0; i < 16; i ++) {
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800ed32:	e04a      	b.n	800edca <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1aa>
		int status = readGPIOPinState(digitalInputs[i].port, digitalInputs[i].pin);
 800ed34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ed42:	3209      	adds	r2, #9
 800ed44:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 800ed48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed56:	3309      	adds	r3, #9
 800ed58:	00db      	lsls	r3, r3, #3
 800ed5a:	4413      	add	r3, r2
 800ed5c:	889a      	ldrh	r2, [r3, #4]
 800ed5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ed66:	6818      	ldr	r0, [r3, #0]
 800ed68:	f7ff fdac 	bl	800e8c4 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>
 800ed6c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
		if (i > 0 ) {
 800ed70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d00a      	beq.n	800ed8e <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16e>
			list[1] += ",";
 800ed78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ed7c:	2101      	movs	r1, #1
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f000 f93e 	bl	800f000 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEixEj>
 800ed84:	4603      	mov	r3, r0
 800ed86:	496f      	ldr	r1, [pc, #444]	; (800ef44 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x324>)
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f007 f9cf 	bl	801612c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		}
		list[1] += std::to_string(status);
 800ed8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ed92:	2101      	movs	r1, #1
 800ed94:	4618      	mov	r0, r3
 800ed96:	f000 f933 	bl	800f000 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEixEj>
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800eda0:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7fb ffbb 	bl	800ad20 <_ZNSt7__cxx119to_stringEi>
 800edaa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800edae:	4619      	mov	r1, r3
 800edb0:	4620      	mov	r0, r4
 800edb2:	f007 f990 	bl	80160d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800edb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800edba:	4618      	mov	r0, r3
 800edbc:	f007 f840 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	for (size_t i = 0; i < 16; i ++) {
 800edc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800edc4:	3301      	adds	r3, #1
 800edc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800edca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800edce:	2b0f      	cmp	r3, #15
 800edd0:	d9b0      	bls.n	800ed34 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x114>
	}

	//uint8_t relayLen = conf->getExtentionEnabled() ? 8 : 4;
	for (size_t i = 0; i < 8;  i++) {
 800edd2:	2300      	movs	r3, #0
 800edd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800edd8:	e04a      	b.n	800ee70 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x250>
		int status = readGPIOPinState(switches[i].port, switches[i].pin);
 800edda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800edde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800ede8:	3201      	adds	r2, #1
 800edea:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 800edee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800edf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800edfc:	3301      	adds	r3, #1
 800edfe:	00db      	lsls	r3, r3, #3
 800ee00:	4413      	add	r3, r2
 800ee02:	889a      	ldrh	r2, [r3, #4]
 800ee04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ee0c:	6818      	ldr	r0, [r3, #0]
 800ee0e:	f7ff fd59 	bl	800e8c4 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>
 800ee12:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
		if (i > 0 ) {
 800ee16:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00a      	beq.n	800ee34 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x214>
			list[2] += ",";
 800ee1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ee22:	2102      	movs	r1, #2
 800ee24:	4618      	mov	r0, r3
 800ee26:	f000 f8eb 	bl	800f000 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEixEj>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	4945      	ldr	r1, [pc, #276]	; (800ef44 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x324>)
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f007 f97c 	bl	801612c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		}
		list[2] += std::to_string(status);
 800ee34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ee38:	2102      	movs	r1, #2
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f000 f8e0 	bl	800f000 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEixEj>
 800ee40:	4604      	mov	r4, r0
 800ee42:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ee46:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7fb ff68 	bl	800ad20 <_ZNSt7__cxx119to_stringEi>
 800ee50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ee54:	4619      	mov	r1, r3
 800ee56:	4620      	mov	r0, r4
 800ee58:	f007 f93d 	bl	80160d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800ee5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ee60:	4618      	mov	r0, r3
 800ee62:	f006 ffed 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	for (size_t i = 0; i < 8;  i++) {
 800ee66:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ee70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ee74:	2b07      	cmp	r3, #7
 800ee76:	d9b0      	bls.n	800edda <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ba>
	}

	for (size_t i = 0; i < list.size(); i ++) {
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ee7e:	e01a      	b.n	800eeb6 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x296>
		data += comma;
 800ee80:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800ee84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ee88:	4611      	mov	r1, r2
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f007 f923 	bl	80160d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
		data+= list[i];
 800ee90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ee94:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f000 f8b1 	bl	800f000 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEixEj>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800eea4:	4611      	mov	r1, r2
 800eea6:	4618      	mov	r0, r3
 800eea8:	f007 f915 	bl	80160d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
	for (size_t i = 0; i < list.size(); i ++) {
 800eeac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800eeb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800eeba:	4618      	mov	r0, r3
 800eebc:	f000 f8af 	bl	800f01e <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EE4sizeEv>
 800eec0:	4602      	mov	r2, r0
 800eec2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800eec6:	4293      	cmp	r3, r2
 800eec8:	bf34      	ite	cc
 800eeca:	2301      	movcc	r3, #1
 800eecc:	2300      	movcs	r3, #0
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d1d5      	bne.n	800ee80 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x260>
	}

	data = data+ "\r";
 800eed4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800eed8:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 800eedc:	4a1a      	ldr	r2, [pc, #104]	; (800ef48 <_ZN5Utils19createUSARTRealTimeEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x328>)
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fd fdee 	bl	800cac0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800eee4:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800eee8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800eeec:	4611      	mov	r1, r2
 800eeee:	4618      	mov	r0, r3
 800eef0:	f006 ffb2 	bl	8015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800eef4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800eef8:	4618      	mov	r0, r3
 800eefa:	f006 ffa1 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    *messsage = data;
 800eefe:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800ef02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ef0a:	4611      	mov	r1, r2
 800ef0c:	6818      	ldr	r0, [r3, #0]
 800ef0e:	f006 ff9d 	bl	8015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>

}
 800ef12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7ff fe6a 	bl	800ebf0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EED1Ev>
 800ef1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ef20:	4618      	mov	r0, r3
 800ef22:	f006 ff8d 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ef26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f006 ff88 	bl	8015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ef30:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd90      	pop	{r4, r7, pc}
 800ef38:	0801b774 	.word	0x0801b774
 800ef3c:	0801b778 	.word	0x0801b778
 800ef40:	0801b77c 	.word	0x0801b77c
 800ef44:	0801b784 	.word	0x0801b784
 800ef48:	0801b788 	.word	0x0801b788

0800ef4c <_ZN5Utils11usartSwitchEP5cJSON>:
	    }

	    cJSON_Delete(rootJson);
}

void Utils::usartSwitch(cJSON* data) {
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b088      	sub	sp, #32
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
    const cJSON *number = cJSON_GetObjectItemCaseSensitive(data, "number");
 800ef56:	4926      	ldr	r1, [pc, #152]	; (800eff0 <_ZN5Utils11usartSwitchEP5cJSON+0xa4>)
 800ef58:	6838      	ldr	r0, [r7, #0]
 800ef5a:	f7f7 f9e3 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800ef5e:	61f8      	str	r0, [r7, #28]
    // Directly getting the status as expected to be true/false (1/0)
    const cJSON *status = cJSON_GetObjectItemCaseSensitive(data, "status");
 800ef60:	4924      	ldr	r1, [pc, #144]	; (800eff4 <_ZN5Utils11usartSwitchEP5cJSON+0xa8>)
 800ef62:	6838      	ldr	r0, [r7, #0]
 800ef64:	f7f7 f9de 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800ef68:	61b8      	str	r0, [r7, #24]


    // Validate number as a numeric value and status also; although boolean, it comes as numeric in cJSON.
    if (cJSON_IsNumber(number) && cJSON_IsBool(status)) { // Assuming status comes as a numeric representation of a boolean
 800ef6a:	69f8      	ldr	r0, [r7, #28]
 800ef6c:	f7f7 fb31 	bl	80065d2 <cJSON_IsNumber>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d007      	beq.n	800ef86 <_ZN5Utils11usartSwitchEP5cJSON+0x3a>
 800ef76:	69b8      	ldr	r0, [r7, #24]
 800ef78:	f7f7 fb13 	bl	80065a2 <cJSON_IsBool>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <_ZN5Utils11usartSwitchEP5cJSON+0x3a>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e000      	b.n	800ef88 <_ZN5Utils11usartSwitchEP5cJSON+0x3c>
 800ef86:	2300      	movs	r3, #0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d02c      	beq.n	800efe6 <_ZN5Utils11usartSwitchEP5cJSON+0x9a>

        if (number->valueint >= 1 && number->valueint <= 8) {
 800ef8c:	69fb      	ldr	r3, [r7, #28]
 800ef8e:	695b      	ldr	r3, [r3, #20]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	dd28      	ble.n	800efe6 <_ZN5Utils11usartSwitchEP5cJSON+0x9a>
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	695b      	ldr	r3, [r3, #20]
 800ef98:	2b08      	cmp	r3, #8
 800ef9a:	dc24      	bgt.n	800efe6 <_ZN5Utils11usartSwitchEP5cJSON+0x9a>
            int arrayIndex = number->valueint - 1;
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	695b      	ldr	r3, [r3, #20]
 800efa0:	3b01      	subs	r3, #1
 800efa2:	617b      	str	r3, [r7, #20]
            PortAndPins targetSwitch = switches[arrayIndex];
 800efa4:	6879      	ldr	r1, [r7, #4]
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	3301      	adds	r3, #1
 800efaa:	f107 0208 	add.w	r2, r7, #8
 800efae:	00db      	lsls	r3, r3, #3
 800efb0:	440b      	add	r3, r1
 800efb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800efb6:	e882 0003 	stmia.w	r2, {r0, r1}

            bool success = switchRelay(targetSwitch.port, targetSwitch.pin, status->valueint);
 800efba:	68b9      	ldr	r1, [r7, #8]
 800efbc:	89ba      	ldrh	r2, [r7, #12]
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	695b      	ldr	r3, [r3, #20]
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7ff fc56 	bl	800e874 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti>
 800efc8:	4603      	mov	r3, r0
 800efca:	74fb      	strb	r3, [r7, #19]
            if (success) {
 800efcc:	7cfb      	ldrb	r3, [r7, #19]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d006      	beq.n	800efe0 <_ZN5Utils11usartSwitchEP5cJSON+0x94>
                print("The %d switch has been toggled.\r\n", number->valueint);
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	695b      	ldr	r3, [r3, #20]
 800efd6:	4619      	mov	r1, r3
 800efd8:	4807      	ldr	r0, [pc, #28]	; (800eff8 <_ZN5Utils11usartSwitchEP5cJSON+0xac>)
 800efda:	f7ff fc05 	bl	800e7e8 <_ZN5Utils5printEPKcz>
            } else {
                print("There is an issue with switch \r\n");
            }
        }
    }
}
 800efde:	e002      	b.n	800efe6 <_ZN5Utils11usartSwitchEP5cJSON+0x9a>
                print("There is an issue with switch \r\n");
 800efe0:	4806      	ldr	r0, [pc, #24]	; (800effc <_ZN5Utils11usartSwitchEP5cJSON+0xb0>)
 800efe2:	f7ff fc01 	bl	800e7e8 <_ZN5Utils5printEPKcz>
}
 800efe6:	bf00      	nop
 800efe8:	3720      	adds	r7, #32
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	0801b7a8 	.word	0x0801b7a8
 800eff4:	0801b7b0 	.word	0x0801b7b0
 800eff8:	0801b7b8 	.word	0x0801b7b8
 800effc:	0801b7dc 	.word	0x0801b7dc

0800f000 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EEixEj>:
      operator[](size_type __n) noexcept
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6839      	ldr	r1, [r7, #0]
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 f810 	bl	800f034 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EE6_S_refERA3_KS5_j>
 800f014:	4603      	mov	r3, r0
      }
 800f016:	4618      	mov	r0, r3
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <_ZNKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800f01e:	b480      	push	{r7}
 800f020:	b083      	sub	sp, #12
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	2303      	movs	r3, #3
 800f028:	4618      	mov	r0, r3
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj3EE6_S_refERA3_KS5_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800f03e:	683a      	ldr	r2, [r7, #0]
 800f040:	4613      	mov	r3, r2
 800f042:	005b      	lsls	r3, r3, #1
 800f044:	4413      	add	r3, r2
 800f046:	00db      	lsls	r3, r3, #3
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	4413      	add	r3, r2
 800f04c:	4618      	mov	r0, r3
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f058:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f090 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800f05c:	f7ff fab8 	bl	800e5d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800f060:	480c      	ldr	r0, [pc, #48]	; (800f094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800f062:	490d      	ldr	r1, [pc, #52]	; (800f098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800f064:	4a0d      	ldr	r2, [pc, #52]	; (800f09c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800f066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f068:	e002      	b.n	800f070 <LoopCopyDataInit>

0800f06a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f06a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f06c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f06e:	3304      	adds	r3, #4

0800f070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f074:	d3f9      	bcc.n	800f06a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f076:	4a0a      	ldr	r2, [pc, #40]	; (800f0a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800f078:	4c0a      	ldr	r4, [pc, #40]	; (800f0a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800f07a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f07c:	e001      	b.n	800f082 <LoopFillZerobss>

0800f07e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f07e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f080:	3204      	adds	r2, #4

0800f082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f084:	d3fb      	bcc.n	800f07e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f086:	f008 ff39 	bl	8017efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f08a:	f7fe f841 	bl	800d110 <main>
  bx  lr    
 800f08e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800f094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f098:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 800f09c:	0801bde4 	.word	0x0801bde4
  ldr r2, =_sbss
 800f0a0:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 800f0a4:	20003478 	.word	0x20003478

0800f0a8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f0a8:	e7fe      	b.n	800f0a8 <CAN1_RX0_IRQHandler>
	...

0800f0ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f0b0:	4b0e      	ldr	r3, [pc, #56]	; (800f0ec <HAL_Init+0x40>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4a0d      	ldr	r2, [pc, #52]	; (800f0ec <HAL_Init+0x40>)
 800f0b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f0ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f0bc:	4b0b      	ldr	r3, [pc, #44]	; (800f0ec <HAL_Init+0x40>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4a0a      	ldr	r2, [pc, #40]	; (800f0ec <HAL_Init+0x40>)
 800f0c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f0c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f0c8:	4b08      	ldr	r3, [pc, #32]	; (800f0ec <HAL_Init+0x40>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a07      	ldr	r2, [pc, #28]	; (800f0ec <HAL_Init+0x40>)
 800f0ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f0d4:	2003      	movs	r0, #3
 800f0d6:	f000 fe87 	bl	800fde8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f0da:	200f      	movs	r0, #15
 800f0dc:	f000 f808 	bl	800f0f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f0e0:	f7fe ffaa 	bl	800e038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	40023c00 	.word	0x40023c00

0800f0f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f0f8:	4b12      	ldr	r3, [pc, #72]	; (800f144 <HAL_InitTick+0x54>)
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	4b12      	ldr	r3, [pc, #72]	; (800f148 <HAL_InitTick+0x58>)
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	4619      	mov	r1, r3
 800f102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f106:	fbb3 f3f1 	udiv	r3, r3, r1
 800f10a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f10e:	4618      	mov	r0, r3
 800f110:	f000 fe9f 	bl	800fe52 <HAL_SYSTICK_Config>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d001      	beq.n	800f11e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800f11a:	2301      	movs	r3, #1
 800f11c:	e00e      	b.n	800f13c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2b0f      	cmp	r3, #15
 800f122:	d80a      	bhi.n	800f13a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f124:	2200      	movs	r2, #0
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	f04f 30ff 	mov.w	r0, #4294967295
 800f12c:	f000 fe67 	bl	800fdfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f130:	4a06      	ldr	r2, [pc, #24]	; (800f14c <HAL_InitTick+0x5c>)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f136:	2300      	movs	r3, #0
 800f138:	e000      	b.n	800f13c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800f13a:	2301      	movs	r3, #1
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	20000058 	.word	0x20000058
 800f148:	20000060 	.word	0x20000060
 800f14c:	2000005c 	.word	0x2000005c

0800f150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f150:	b480      	push	{r7}
 800f152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f154:	4b06      	ldr	r3, [pc, #24]	; (800f170 <HAL_IncTick+0x20>)
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	461a      	mov	r2, r3
 800f15a:	4b06      	ldr	r3, [pc, #24]	; (800f174 <HAL_IncTick+0x24>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4413      	add	r3, r2
 800f160:	4a04      	ldr	r2, [pc, #16]	; (800f174 <HAL_IncTick+0x24>)
 800f162:	6013      	str	r3, [r2, #0]
}
 800f164:	bf00      	nop
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr
 800f16e:	bf00      	nop
 800f170:	20000060 	.word	0x20000060
 800f174:	20003324 	.word	0x20003324

0800f178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f178:	b480      	push	{r7}
 800f17a:	af00      	add	r7, sp, #0
  return uwTick;
 800f17c:	4b03      	ldr	r3, [pc, #12]	; (800f18c <HAL_GetTick+0x14>)
 800f17e:	681b      	ldr	r3, [r3, #0]
}
 800f180:	4618      	mov	r0, r3
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	20003324 	.word	0x20003324

0800f190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f198:	f7ff ffee 	bl	800f178 <HAL_GetTick>
 800f19c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a8:	d005      	beq.n	800f1b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f1aa:	4b0a      	ldr	r3, [pc, #40]	; (800f1d4 <HAL_Delay+0x44>)
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f1b6:	bf00      	nop
 800f1b8:	f7ff ffde 	bl	800f178 <HAL_GetTick>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d8f7      	bhi.n	800f1b8 <HAL_Delay+0x28>
  {
  }
}
 800f1c8:	bf00      	nop
 800f1ca:	bf00      	nop
 800f1cc:	3710      	adds	r7, #16
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	20000060 	.word	0x20000060

0800f1d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d101      	bne.n	800f1ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e033      	b.n	800f256 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d109      	bne.n	800f20a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7fe ff46 	bl	800e088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2200      	movs	r2, #0
 800f206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f20e:	f003 0310 	and.w	r3, r3, #16
 800f212:	2b00      	cmp	r3, #0
 800f214:	d118      	bne.n	800f248 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f21a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f21e:	f023 0302 	bic.w	r3, r3, #2
 800f222:	f043 0202 	orr.w	r2, r3, #2
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 fc06 	bl	800fa3c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f23a:	f023 0303 	bic.w	r3, r3, #3
 800f23e:	f043 0201 	orr.w	r2, r3, #1
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	641a      	str	r2, [r3, #64]	; 0x40
 800f246:	e001      	b.n	800f24c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800f248:	2301      	movs	r3, #1
 800f24a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2200      	movs	r2, #0
 800f250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800f254:	7bfb      	ldrb	r3, [r7, #15]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
	...

0800f260 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f260:	b480      	push	{r7}
 800f262:	b085      	sub	sp, #20
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800f268:	2300      	movs	r3, #0
 800f26a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f272:	2b01      	cmp	r3, #1
 800f274:	d101      	bne.n	800f27a <HAL_ADC_Start+0x1a>
 800f276:	2302      	movs	r3, #2
 800f278:	e0b2      	b.n	800f3e0 <HAL_ADC_Start+0x180>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2201      	movs	r2, #1
 800f27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	689b      	ldr	r3, [r3, #8]
 800f288:	f003 0301 	and.w	r3, r3, #1
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d018      	beq.n	800f2c2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	689a      	ldr	r2, [r3, #8]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f042 0201 	orr.w	r2, r2, #1
 800f29e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f2a0:	4b52      	ldr	r3, [pc, #328]	; (800f3ec <HAL_ADC_Start+0x18c>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a52      	ldr	r2, [pc, #328]	; (800f3f0 <HAL_ADC_Start+0x190>)
 800f2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f2aa:	0c9a      	lsrs	r2, r3, #18
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	005b      	lsls	r3, r3, #1
 800f2b0:	4413      	add	r3, r2
 800f2b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800f2b4:	e002      	b.n	800f2bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d1f9      	bne.n	800f2b6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	f003 0301 	and.w	r3, r3, #1
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d17a      	bne.n	800f3c6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800f2d8:	f023 0301 	bic.w	r3, r3, #1
 800f2dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d007      	beq.n	800f302 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f2fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f30a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f30e:	d106      	bne.n	800f31e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f314:	f023 0206 	bic.w	r2, r3, #6
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	645a      	str	r2, [r3, #68]	; 0x44
 800f31c:	e002      	b.n	800f324 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2200      	movs	r2, #0
 800f328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f32c:	4b31      	ldr	r3, [pc, #196]	; (800f3f4 <HAL_ADC_Start+0x194>)
 800f32e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f338:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	f003 031f 	and.w	r3, r3, #31
 800f342:	2b00      	cmp	r3, #0
 800f344:	d12a      	bne.n	800f39c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a2b      	ldr	r2, [pc, #172]	; (800f3f8 <HAL_ADC_Start+0x198>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d015      	beq.n	800f37c <HAL_ADC_Start+0x11c>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a29      	ldr	r2, [pc, #164]	; (800f3fc <HAL_ADC_Start+0x19c>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d105      	bne.n	800f366 <HAL_ADC_Start+0x106>
 800f35a:	4b26      	ldr	r3, [pc, #152]	; (800f3f4 <HAL_ADC_Start+0x194>)
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	f003 031f 	and.w	r3, r3, #31
 800f362:	2b00      	cmp	r3, #0
 800f364:	d00a      	beq.n	800f37c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a25      	ldr	r2, [pc, #148]	; (800f400 <HAL_ADC_Start+0x1a0>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d136      	bne.n	800f3de <HAL_ADC_Start+0x17e>
 800f370:	4b20      	ldr	r3, [pc, #128]	; (800f3f4 <HAL_ADC_Start+0x194>)
 800f372:	685b      	ldr	r3, [r3, #4]
 800f374:	f003 0310 	and.w	r3, r3, #16
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d130      	bne.n	800f3de <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	689b      	ldr	r3, [r3, #8]
 800f382:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f386:	2b00      	cmp	r3, #0
 800f388:	d129      	bne.n	800f3de <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	689a      	ldr	r2, [r3, #8]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f398:	609a      	str	r2, [r3, #8]
 800f39a:	e020      	b.n	800f3de <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4a15      	ldr	r2, [pc, #84]	; (800f3f8 <HAL_ADC_Start+0x198>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d11b      	bne.n	800f3de <HAL_ADC_Start+0x17e>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d114      	bne.n	800f3de <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	689a      	ldr	r2, [r3, #8]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f3c2:	609a      	str	r2, [r3, #8]
 800f3c4:	e00b      	b.n	800f3de <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ca:	f043 0210 	orr.w	r2, r3, #16
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3d6:	f043 0201 	orr.w	r2, r3, #1
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3714      	adds	r7, #20
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr
 800f3ec:	20000058 	.word	0x20000058
 800f3f0:	431bde83 	.word	0x431bde83
 800f3f4:	40012300 	.word	0x40012300
 800f3f8:	40012000 	.word	0x40012000
 800f3fc:	40012100 	.word	0x40012100
 800f400:	40012200 	.word	0x40012200

0800f404 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f412:	2b01      	cmp	r3, #1
 800f414:	d101      	bne.n	800f41a <HAL_ADC_Stop+0x16>
 800f416:	2302      	movs	r3, #2
 800f418:	e021      	b.n	800f45e <HAL_ADC_Stop+0x5a>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2201      	movs	r2, #1
 800f41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	689a      	ldr	r2, [r3, #8]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f022 0201 	bic.w	r2, r2, #1
 800f430:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	f003 0301 	and.w	r3, r3, #1
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d109      	bne.n	800f454 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f444:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f448:	f023 0301 	bic.w	r3, r3, #1
 800f44c:	f043 0201 	orr.w	r2, r3, #1
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2200      	movs	r2, #0
 800f458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	370c      	adds	r7, #12
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr

0800f46a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b084      	sub	sp, #16
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800f474:	2300      	movs	r3, #0
 800f476:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f486:	d113      	bne.n	800f4b0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	689b      	ldr	r3, [r3, #8]
 800f48e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800f492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f496:	d10b      	bne.n	800f4b0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49c:	f043 0220 	orr.w	r2, r3, #32
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	e063      	b.n	800f578 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800f4b0:	f7ff fe62 	bl	800f178 <HAL_GetTick>
 800f4b4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800f4b6:	e021      	b.n	800f4fc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4be:	d01d      	beq.n	800f4fc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d007      	beq.n	800f4d6 <HAL_ADC_PollForConversion+0x6c>
 800f4c6:	f7ff fe57 	bl	800f178 <HAL_GetTick>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	683a      	ldr	r2, [r7, #0]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d212      	bcs.n	800f4fc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f003 0302 	and.w	r3, r3, #2
 800f4e0:	2b02      	cmp	r3, #2
 800f4e2:	d00b      	beq.n	800f4fc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e8:	f043 0204 	orr.w	r2, r3, #4
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800f4f8:	2303      	movs	r3, #3
 800f4fa:	e03d      	b.n	800f578 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f003 0302 	and.w	r3, r3, #2
 800f506:	2b02      	cmp	r3, #2
 800f508:	d1d6      	bne.n	800f4b8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f06f 0212 	mvn.w	r2, #18
 800f512:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f518:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	689b      	ldr	r3, [r3, #8]
 800f526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d123      	bne.n	800f576 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f532:	2b00      	cmp	r3, #0
 800f534:	d11f      	bne.n	800f576 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f53c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f540:	2b00      	cmp	r3, #0
 800f542:	d006      	beq.n	800f552 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d111      	bne.n	800f576 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f566:	2b00      	cmp	r3, #0
 800f568:	d105      	bne.n	800f576 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f56e:	f043 0201 	orr.w	r2, r3, #1
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800f576:	2300      	movs	r3, #0
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3710      	adds	r7, #16
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b086      	sub	sp, #24
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800f588:	2300      	movs	r3, #0
 800f58a:	617b      	str	r3, [r7, #20]
 800f58c:	2300      	movs	r3, #0
 800f58e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f003 0302 	and.w	r3, r3, #2
 800f5a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	f003 0320 	and.w	r3, r3, #32
 800f5ae:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d049      	beq.n	800f64a <HAL_ADC_IRQHandler+0xca>
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d046      	beq.n	800f64a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5c0:	f003 0310 	and.w	r3, r3, #16
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d105      	bne.n	800f5d4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	689b      	ldr	r3, [r3, #8]
 800f5da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d12b      	bne.n	800f63a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d127      	bne.n	800f63a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d006      	beq.n	800f606 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	689b      	ldr	r3, [r3, #8]
 800f5fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800f602:	2b00      	cmp	r3, #0
 800f604:	d119      	bne.n	800f63a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	685a      	ldr	r2, [r3, #4]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f022 0220 	bic.w	r2, r2, #32
 800f614:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f61a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d105      	bne.n	800f63a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f632:	f043 0201 	orr.w	r2, r3, #1
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 f8bd 	bl	800f7ba <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f06f 0212 	mvn.w	r2, #18
 800f648:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	f003 0304 	and.w	r3, r3, #4
 800f650:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f658:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d057      	beq.n	800f710 <HAL_ADC_IRQHandler+0x190>
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d054      	beq.n	800f710 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f66a:	f003 0310 	and.w	r3, r3, #16
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d105      	bne.n	800f67e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f676:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d139      	bne.n	800f700 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f692:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800f696:	2b00      	cmp	r3, #0
 800f698:	d006      	beq.n	800f6a8 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	689b      	ldr	r3, [r3, #8]
 800f6a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d12b      	bne.n	800f700 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d124      	bne.n	800f700 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d11d      	bne.n	800f700 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d119      	bne.n	800f700 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	685a      	ldr	r2, [r3, #4]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f6da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d105      	bne.n	800f700 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f8:	f043 0201 	orr.w	r2, r3, #1
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 fa97 	bl	800fc34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f06f 020c 	mvn.w	r2, #12
 800f70e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f003 0301 	and.w	r3, r3, #1
 800f716:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f71e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d017      	beq.n	800f756 <HAL_ADC_IRQHandler+0x1d6>
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d014      	beq.n	800f756 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	2b01      	cmp	r3, #1
 800f738:	d10d      	bne.n	800f756 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f73e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 f841 	bl	800f7ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f06f 0201 	mvn.w	r2, #1
 800f754:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f003 0320 	and.w	r3, r3, #32
 800f75c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f764:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d015      	beq.n	800f798 <HAL_ADC_IRQHandler+0x218>
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d012      	beq.n	800f798 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f776:	f043 0202 	orr.w	r2, r3, #2
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f06f 0220 	mvn.w	r2, #32
 800f786:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 f82a 	bl	800f7e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f06f 0220 	mvn.w	r2, #32
 800f796:	601a      	str	r2, [r3, #0]
  }
}
 800f798:	bf00      	nop
 800f79a:	3718      	adds	r7, #24
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	370c      	adds	r7, #12
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr

0800f7ba <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800f7ba:	b480      	push	{r7}
 800f7bc:	b083      	sub	sp, #12
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800f7c2:	bf00      	nop
 800f7c4:	370c      	adds	r7, #12
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b083      	sub	sp, #12
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800f7d6:	bf00      	nop
 800f7d8:	370c      	adds	r7, #12
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800f7e2:	b480      	push	{r7}
 800f7e4:	b083      	sub	sp, #12
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800f7ea:	bf00      	nop
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr
	...

0800f7f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800f802:	2300      	movs	r3, #0
 800f804:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d101      	bne.n	800f814 <HAL_ADC_ConfigChannel+0x1c>
 800f810:	2302      	movs	r3, #2
 800f812:	e105      	b.n	800fa20 <HAL_ADC_ConfigChannel+0x228>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2201      	movs	r2, #1
 800f818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2b09      	cmp	r3, #9
 800f822:	d925      	bls.n	800f870 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68d9      	ldr	r1, [r3, #12]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	b29b      	uxth	r3, r3
 800f830:	461a      	mov	r2, r3
 800f832:	4613      	mov	r3, r2
 800f834:	005b      	lsls	r3, r3, #1
 800f836:	4413      	add	r3, r2
 800f838:	3b1e      	subs	r3, #30
 800f83a:	2207      	movs	r2, #7
 800f83c:	fa02 f303 	lsl.w	r3, r2, r3
 800f840:	43da      	mvns	r2, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	400a      	ands	r2, r1
 800f848:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	68d9      	ldr	r1, [r3, #12]
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	689a      	ldr	r2, [r3, #8]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	b29b      	uxth	r3, r3
 800f85a:	4618      	mov	r0, r3
 800f85c:	4603      	mov	r3, r0
 800f85e:	005b      	lsls	r3, r3, #1
 800f860:	4403      	add	r3, r0
 800f862:	3b1e      	subs	r3, #30
 800f864:	409a      	lsls	r2, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	430a      	orrs	r2, r1
 800f86c:	60da      	str	r2, [r3, #12]
 800f86e:	e022      	b.n	800f8b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	6919      	ldr	r1, [r3, #16]
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	461a      	mov	r2, r3
 800f87e:	4613      	mov	r3, r2
 800f880:	005b      	lsls	r3, r3, #1
 800f882:	4413      	add	r3, r2
 800f884:	2207      	movs	r2, #7
 800f886:	fa02 f303 	lsl.w	r3, r2, r3
 800f88a:	43da      	mvns	r2, r3
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	400a      	ands	r2, r1
 800f892:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	6919      	ldr	r1, [r3, #16]
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	689a      	ldr	r2, [r3, #8]
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	005b      	lsls	r3, r3, #1
 800f8aa:	4403      	add	r3, r0
 800f8ac:	409a      	lsls	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	430a      	orrs	r2, r1
 800f8b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	2b06      	cmp	r3, #6
 800f8bc:	d824      	bhi.n	800f908 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	685a      	ldr	r2, [r3, #4]
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	4413      	add	r3, r2
 800f8ce:	3b05      	subs	r3, #5
 800f8d0:	221f      	movs	r2, #31
 800f8d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f8d6:	43da      	mvns	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	400a      	ands	r2, r1
 800f8de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	685a      	ldr	r2, [r3, #4]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	4413      	add	r3, r2
 800f8f8:	3b05      	subs	r3, #5
 800f8fa:	fa00 f203 	lsl.w	r2, r0, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	430a      	orrs	r2, r1
 800f904:	635a      	str	r2, [r3, #52]	; 0x34
 800f906:	e04c      	b.n	800f9a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	2b0c      	cmp	r3, #12
 800f90e:	d824      	bhi.n	800f95a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	685a      	ldr	r2, [r3, #4]
 800f91a:	4613      	mov	r3, r2
 800f91c:	009b      	lsls	r3, r3, #2
 800f91e:	4413      	add	r3, r2
 800f920:	3b23      	subs	r3, #35	; 0x23
 800f922:	221f      	movs	r2, #31
 800f924:	fa02 f303 	lsl.w	r3, r2, r3
 800f928:	43da      	mvns	r2, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	400a      	ands	r2, r1
 800f930:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	4618      	mov	r0, r3
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	685a      	ldr	r2, [r3, #4]
 800f944:	4613      	mov	r3, r2
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	4413      	add	r3, r2
 800f94a:	3b23      	subs	r3, #35	; 0x23
 800f94c:	fa00 f203 	lsl.w	r2, r0, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	430a      	orrs	r2, r1
 800f956:	631a      	str	r2, [r3, #48]	; 0x30
 800f958:	e023      	b.n	800f9a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	685a      	ldr	r2, [r3, #4]
 800f964:	4613      	mov	r3, r2
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	4413      	add	r3, r2
 800f96a:	3b41      	subs	r3, #65	; 0x41
 800f96c:	221f      	movs	r2, #31
 800f96e:	fa02 f303 	lsl.w	r3, r2, r3
 800f972:	43da      	mvns	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	400a      	ands	r2, r1
 800f97a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	b29b      	uxth	r3, r3
 800f988:	4618      	mov	r0, r3
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	685a      	ldr	r2, [r3, #4]
 800f98e:	4613      	mov	r3, r2
 800f990:	009b      	lsls	r3, r3, #2
 800f992:	4413      	add	r3, r2
 800f994:	3b41      	subs	r3, #65	; 0x41
 800f996:	fa00 f203 	lsl.w	r2, r0, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	430a      	orrs	r2, r1
 800f9a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f9a2:	4b22      	ldr	r3, [pc, #136]	; (800fa2c <HAL_ADC_ConfigChannel+0x234>)
 800f9a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a21      	ldr	r2, [pc, #132]	; (800fa30 <HAL_ADC_ConfigChannel+0x238>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d109      	bne.n	800f9c4 <HAL_ADC_ConfigChannel+0x1cc>
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2b12      	cmp	r3, #18
 800f9b6:	d105      	bne.n	800f9c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4a19      	ldr	r2, [pc, #100]	; (800fa30 <HAL_ADC_ConfigChannel+0x238>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d123      	bne.n	800fa16 <HAL_ADC_ConfigChannel+0x21e>
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2b10      	cmp	r3, #16
 800f9d4:	d003      	beq.n	800f9de <HAL_ADC_ConfigChannel+0x1e6>
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2b11      	cmp	r3, #17
 800f9dc:	d11b      	bne.n	800fa16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	2b10      	cmp	r3, #16
 800f9f0:	d111      	bne.n	800fa16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800f9f2:	4b10      	ldr	r3, [pc, #64]	; (800fa34 <HAL_ADC_ConfigChannel+0x23c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	4a10      	ldr	r2, [pc, #64]	; (800fa38 <HAL_ADC_ConfigChannel+0x240>)
 800f9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800f9fc:	0c9a      	lsrs	r2, r3, #18
 800f9fe:	4613      	mov	r3, r2
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	4413      	add	r3, r2
 800fa04:	005b      	lsls	r3, r3, #1
 800fa06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800fa08:	e002      	b.n	800fa10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1f9      	bne.n	800fa0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800fa1e:	2300      	movs	r3, #0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3714      	adds	r7, #20
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	40012300 	.word	0x40012300
 800fa30:	40012000 	.word	0x40012000
 800fa34:	20000058 	.word	0x20000058
 800fa38:	431bde83 	.word	0x431bde83

0800fa3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fa44:	4b79      	ldr	r3, [pc, #484]	; (800fc2c <ADC_Init+0x1f0>)
 800fa46:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	685a      	ldr	r2, [r3, #4]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	431a      	orrs	r2, r3
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	685a      	ldr	r2, [r3, #4]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fa70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	6859      	ldr	r1, [r3, #4]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	691b      	ldr	r3, [r3, #16]
 800fa7c:	021a      	lsls	r2, r3, #8
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	430a      	orrs	r2, r1
 800fa84:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	685a      	ldr	r2, [r3, #4]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800fa94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	6859      	ldr	r1, [r3, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	689a      	ldr	r2, [r3, #8]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	430a      	orrs	r2, r1
 800faa6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	689a      	ldr	r2, [r3, #8]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fab6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	6899      	ldr	r1, [r3, #8]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	68da      	ldr	r2, [r3, #12]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	430a      	orrs	r2, r1
 800fac8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800face:	4a58      	ldr	r2, [pc, #352]	; (800fc30 <ADC_Init+0x1f4>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d022      	beq.n	800fb1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	689a      	ldr	r2, [r3, #8]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fae2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6899      	ldr	r1, [r3, #8]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	430a      	orrs	r2, r1
 800faf4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	689a      	ldr	r2, [r3, #8]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fb04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	6899      	ldr	r1, [r3, #8]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	430a      	orrs	r2, r1
 800fb16:	609a      	str	r2, [r3, #8]
 800fb18:	e00f      	b.n	800fb3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	689a      	ldr	r2, [r3, #8]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fb28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	689a      	ldr	r2, [r3, #8]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fb38:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	689a      	ldr	r2, [r3, #8]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f022 0202 	bic.w	r2, r2, #2
 800fb48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	6899      	ldr	r1, [r3, #8]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	7e1b      	ldrb	r3, [r3, #24]
 800fb54:	005a      	lsls	r2, r3, #1
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	430a      	orrs	r2, r1
 800fb5c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d01b      	beq.n	800fba0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	685a      	ldr	r2, [r3, #4]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb76:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	685a      	ldr	r2, [r3, #4]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800fb86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	6859      	ldr	r1, [r3, #4]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb92:	3b01      	subs	r3, #1
 800fb94:	035a      	lsls	r2, r3, #13
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	430a      	orrs	r2, r1
 800fb9c:	605a      	str	r2, [r3, #4]
 800fb9e:	e007      	b.n	800fbb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	685a      	ldr	r2, [r3, #4]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fbae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800fbbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	69db      	ldr	r3, [r3, #28]
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	051a      	lsls	r2, r3, #20
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	430a      	orrs	r2, r1
 800fbd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	689a      	ldr	r2, [r3, #8]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800fbe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	6899      	ldr	r1, [r3, #8]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbf2:	025a      	lsls	r2, r3, #9
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	430a      	orrs	r2, r1
 800fbfa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	689a      	ldr	r2, [r3, #8]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	6899      	ldr	r1, [r3, #8]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	695b      	ldr	r3, [r3, #20]
 800fc16:	029a      	lsls	r2, r3, #10
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	430a      	orrs	r2, r1
 800fc1e:	609a      	str	r2, [r3, #8]
}
 800fc20:	bf00      	nop
 800fc22:	3714      	adds	r7, #20
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr
 800fc2c:	40012300 	.word	0x40012300
 800fc30:	0f000001 	.word	0x0f000001

0800fc34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800fc3c:	bf00      	nop
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b085      	sub	sp, #20
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f003 0307 	and.w	r3, r3, #7
 800fc56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800fc58:	4b0c      	ldr	r3, [pc, #48]	; (800fc8c <__NVIC_SetPriorityGrouping+0x44>)
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800fc5e:	68ba      	ldr	r2, [r7, #8]
 800fc60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800fc64:	4013      	ands	r3, r2
 800fc66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800fc70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800fc74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fc78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800fc7a:	4a04      	ldr	r2, [pc, #16]	; (800fc8c <__NVIC_SetPriorityGrouping+0x44>)
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	60d3      	str	r3, [r2, #12]
}
 800fc80:	bf00      	nop
 800fc82:	3714      	adds	r7, #20
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr
 800fc8c:	e000ed00 	.word	0xe000ed00

0800fc90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800fc90:	b480      	push	{r7}
 800fc92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800fc94:	4b04      	ldr	r3, [pc, #16]	; (800fca8 <__NVIC_GetPriorityGrouping+0x18>)
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	0a1b      	lsrs	r3, r3, #8
 800fc9a:	f003 0307 	and.w	r3, r3, #7
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr
 800fca8:	e000ed00 	.word	0xe000ed00

0800fcac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b083      	sub	sp, #12
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fcb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	db0b      	blt.n	800fcd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fcbe:	79fb      	ldrb	r3, [r7, #7]
 800fcc0:	f003 021f 	and.w	r2, r3, #31
 800fcc4:	4907      	ldr	r1, [pc, #28]	; (800fce4 <__NVIC_EnableIRQ+0x38>)
 800fcc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fcca:	095b      	lsrs	r3, r3, #5
 800fccc:	2001      	movs	r0, #1
 800fcce:	fa00 f202 	lsl.w	r2, r0, r2
 800fcd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800fcd6:	bf00      	nop
 800fcd8:	370c      	adds	r7, #12
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	e000e100 	.word	0xe000e100

0800fce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	6039      	str	r1, [r7, #0]
 800fcf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fcf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	db0a      	blt.n	800fd12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	b2da      	uxtb	r2, r3
 800fd00:	490c      	ldr	r1, [pc, #48]	; (800fd34 <__NVIC_SetPriority+0x4c>)
 800fd02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd06:	0112      	lsls	r2, r2, #4
 800fd08:	b2d2      	uxtb	r2, r2
 800fd0a:	440b      	add	r3, r1
 800fd0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800fd10:	e00a      	b.n	800fd28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	b2da      	uxtb	r2, r3
 800fd16:	4908      	ldr	r1, [pc, #32]	; (800fd38 <__NVIC_SetPriority+0x50>)
 800fd18:	79fb      	ldrb	r3, [r7, #7]
 800fd1a:	f003 030f 	and.w	r3, r3, #15
 800fd1e:	3b04      	subs	r3, #4
 800fd20:	0112      	lsls	r2, r2, #4
 800fd22:	b2d2      	uxtb	r2, r2
 800fd24:	440b      	add	r3, r1
 800fd26:	761a      	strb	r2, [r3, #24]
}
 800fd28:	bf00      	nop
 800fd2a:	370c      	adds	r7, #12
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr
 800fd34:	e000e100 	.word	0xe000e100
 800fd38:	e000ed00 	.word	0xe000ed00

0800fd3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b089      	sub	sp, #36	; 0x24
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f003 0307 	and.w	r3, r3, #7
 800fd4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	f1c3 0307 	rsb	r3, r3, #7
 800fd56:	2b04      	cmp	r3, #4
 800fd58:	bf28      	it	cs
 800fd5a:	2304      	movcs	r3, #4
 800fd5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	3304      	adds	r3, #4
 800fd62:	2b06      	cmp	r3, #6
 800fd64:	d902      	bls.n	800fd6c <NVIC_EncodePriority+0x30>
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	3b03      	subs	r3, #3
 800fd6a:	e000      	b.n	800fd6e <NVIC_EncodePriority+0x32>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fd70:	f04f 32ff 	mov.w	r2, #4294967295
 800fd74:	69bb      	ldr	r3, [r7, #24]
 800fd76:	fa02 f303 	lsl.w	r3, r2, r3
 800fd7a:	43da      	mvns	r2, r3
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	401a      	ands	r2, r3
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800fd84:	f04f 31ff 	mov.w	r1, #4294967295
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	fa01 f303 	lsl.w	r3, r1, r3
 800fd8e:	43d9      	mvns	r1, r3
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fd94:	4313      	orrs	r3, r2
         );
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3724      	adds	r7, #36	; 0x24
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr
	...

0800fda4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	3b01      	subs	r3, #1
 800fdb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fdb4:	d301      	bcc.n	800fdba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e00f      	b.n	800fdda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fdba:	4a0a      	ldr	r2, [pc, #40]	; (800fde4 <SysTick_Config+0x40>)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	3b01      	subs	r3, #1
 800fdc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fdc2:	210f      	movs	r1, #15
 800fdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdc8:	f7ff ff8e 	bl	800fce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fdcc:	4b05      	ldr	r3, [pc, #20]	; (800fde4 <SysTick_Config+0x40>)
 800fdce:	2200      	movs	r2, #0
 800fdd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fdd2:	4b04      	ldr	r3, [pc, #16]	; (800fde4 <SysTick_Config+0x40>)
 800fdd4:	2207      	movs	r2, #7
 800fdd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fdd8:	2300      	movs	r3, #0
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	e000e010 	.word	0xe000e010

0800fde8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f7ff ff29 	bl	800fc48 <__NVIC_SetPriorityGrouping>
}
 800fdf6:	bf00      	nop
 800fdf8:	3708      	adds	r7, #8
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}

0800fdfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b086      	sub	sp, #24
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	4603      	mov	r3, r0
 800fe06:	60b9      	str	r1, [r7, #8]
 800fe08:	607a      	str	r2, [r7, #4]
 800fe0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800fe10:	f7ff ff3e 	bl	800fc90 <__NVIC_GetPriorityGrouping>
 800fe14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	68b9      	ldr	r1, [r7, #8]
 800fe1a:	6978      	ldr	r0, [r7, #20]
 800fe1c:	f7ff ff8e 	bl	800fd3c <NVIC_EncodePriority>
 800fe20:	4602      	mov	r2, r0
 800fe22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe26:	4611      	mov	r1, r2
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7ff ff5d 	bl	800fce8 <__NVIC_SetPriority>
}
 800fe2e:	bf00      	nop
 800fe30:	3718      	adds	r7, #24
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fe36:	b580      	push	{r7, lr}
 800fe38:	b082      	sub	sp, #8
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800fe40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7ff ff31 	bl	800fcac <__NVIC_EnableIRQ>
}
 800fe4a:	bf00      	nop
 800fe4c:	3708      	adds	r7, #8
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}

0800fe52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fe52:	b580      	push	{r7, lr}
 800fe54:	b082      	sub	sp, #8
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f7ff ffa2 	bl	800fda4 <SysTick_Config>
 800fe60:	4603      	mov	r3, r0
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fe6a:	b580      	push	{r7, lr}
 800fe6c:	b084      	sub	sp, #16
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800fe78:	f7ff f97e 	bl	800f178 <HAL_GetTick>
 800fe7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b02      	cmp	r3, #2
 800fe88:	d008      	beq.n	800fe9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2280      	movs	r2, #128	; 0x80
 800fe8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800fe98:	2301      	movs	r3, #1
 800fe9a:	e052      	b.n	800ff42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f022 0216 	bic.w	r2, r2, #22
 800feaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	695a      	ldr	r2, [r3, #20]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800feba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d103      	bne.n	800fecc <HAL_DMA_Abort+0x62>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d007      	beq.n	800fedc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	681a      	ldr	r2, [r3, #0]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f022 0208 	bic.w	r2, r2, #8
 800feda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f022 0201 	bic.w	r2, r2, #1
 800feea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800feec:	e013      	b.n	800ff16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800feee:	f7ff f943 	bl	800f178 <HAL_GetTick>
 800fef2:	4602      	mov	r2, r0
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	2b05      	cmp	r3, #5
 800fefa:	d90c      	bls.n	800ff16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2220      	movs	r2, #32
 800ff00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2203      	movs	r2, #3
 800ff06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800ff12:	2303      	movs	r3, #3
 800ff14:	e015      	b.n	800ff42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f003 0301 	and.w	r3, r3, #1
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1e4      	bne.n	800feee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff28:	223f      	movs	r2, #63	; 0x3f
 800ff2a:	409a      	lsls	r2, r3
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2201      	movs	r2, #1
 800ff34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800ff40:	2300      	movs	r3, #0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ff4a:	b480      	push	{r7}
 800ff4c:	b083      	sub	sp, #12
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d004      	beq.n	800ff68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2280      	movs	r2, #128	; 0x80
 800ff62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ff64:	2301      	movs	r3, #1
 800ff66:	e00c      	b.n	800ff82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2205      	movs	r2, #5
 800ff6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f022 0201 	bic.w	r2, r2, #1
 800ff7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	370c      	adds	r7, #12
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr

0800ff8e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ff8e:	b480      	push	{r7}
 800ff90:	b083      	sub	sp, #12
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ff9c:	b2db      	uxtb	r3, r3
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	370c      	adds	r7, #12
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr
	...

0800ffac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b089      	sub	sp, #36	; 0x24
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	61fb      	str	r3, [r7, #28]
 800ffc6:	e16b      	b.n	80102a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ffc8:	2201      	movs	r2, #1
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	fa02 f303 	lsl.w	r3, r2, r3
 800ffd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	697a      	ldr	r2, [r7, #20]
 800ffd8:	4013      	ands	r3, r2
 800ffda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ffdc:	693a      	ldr	r2, [r7, #16]
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	f040 815a 	bne.w	801029a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	f003 0303 	and.w	r3, r3, #3
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d005      	beq.n	800fffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	d130      	bne.n	8010060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	689b      	ldr	r3, [r3, #8]
 8010002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	005b      	lsls	r3, r3, #1
 8010008:	2203      	movs	r2, #3
 801000a:	fa02 f303 	lsl.w	r3, r2, r3
 801000e:	43db      	mvns	r3, r3
 8010010:	69ba      	ldr	r2, [r7, #24]
 8010012:	4013      	ands	r3, r2
 8010014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	68da      	ldr	r2, [r3, #12]
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	005b      	lsls	r3, r3, #1
 801001e:	fa02 f303 	lsl.w	r3, r2, r3
 8010022:	69ba      	ldr	r2, [r7, #24]
 8010024:	4313      	orrs	r3, r2
 8010026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	69ba      	ldr	r2, [r7, #24]
 801002c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010034:	2201      	movs	r2, #1
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	fa02 f303 	lsl.w	r3, r2, r3
 801003c:	43db      	mvns	r3, r3
 801003e:	69ba      	ldr	r2, [r7, #24]
 8010040:	4013      	ands	r3, r2
 8010042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	091b      	lsrs	r3, r3, #4
 801004a:	f003 0201 	and.w	r2, r3, #1
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	fa02 f303 	lsl.w	r3, r2, r3
 8010054:	69ba      	ldr	r2, [r7, #24]
 8010056:	4313      	orrs	r3, r2
 8010058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	69ba      	ldr	r2, [r7, #24]
 801005e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	f003 0303 	and.w	r3, r3, #3
 8010068:	2b03      	cmp	r3, #3
 801006a:	d017      	beq.n	801009c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010072:	69fb      	ldr	r3, [r7, #28]
 8010074:	005b      	lsls	r3, r3, #1
 8010076:	2203      	movs	r2, #3
 8010078:	fa02 f303 	lsl.w	r3, r2, r3
 801007c:	43db      	mvns	r3, r3
 801007e:	69ba      	ldr	r2, [r7, #24]
 8010080:	4013      	ands	r3, r2
 8010082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	689a      	ldr	r2, [r3, #8]
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	005b      	lsls	r3, r3, #1
 801008c:	fa02 f303 	lsl.w	r3, r2, r3
 8010090:	69ba      	ldr	r2, [r7, #24]
 8010092:	4313      	orrs	r3, r2
 8010094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	69ba      	ldr	r2, [r7, #24]
 801009a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	685b      	ldr	r3, [r3, #4]
 80100a0:	f003 0303 	and.w	r3, r3, #3
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d123      	bne.n	80100f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	08da      	lsrs	r2, r3, #3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	3208      	adds	r2, #8
 80100b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	f003 0307 	and.w	r3, r3, #7
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	220f      	movs	r2, #15
 80100c0:	fa02 f303 	lsl.w	r3, r2, r3
 80100c4:	43db      	mvns	r3, r3
 80100c6:	69ba      	ldr	r2, [r7, #24]
 80100c8:	4013      	ands	r3, r2
 80100ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	691a      	ldr	r2, [r3, #16]
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	f003 0307 	and.w	r3, r3, #7
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	fa02 f303 	lsl.w	r3, r2, r3
 80100dc:	69ba      	ldr	r2, [r7, #24]
 80100de:	4313      	orrs	r3, r2
 80100e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	08da      	lsrs	r2, r3, #3
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	3208      	adds	r2, #8
 80100ea:	69b9      	ldr	r1, [r7, #24]
 80100ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	005b      	lsls	r3, r3, #1
 80100fa:	2203      	movs	r2, #3
 80100fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010100:	43db      	mvns	r3, r3
 8010102:	69ba      	ldr	r2, [r7, #24]
 8010104:	4013      	ands	r3, r2
 8010106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	f003 0203 	and.w	r2, r3, #3
 8010110:	69fb      	ldr	r3, [r7, #28]
 8010112:	005b      	lsls	r3, r3, #1
 8010114:	fa02 f303 	lsl.w	r3, r2, r3
 8010118:	69ba      	ldr	r2, [r7, #24]
 801011a:	4313      	orrs	r3, r2
 801011c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	69ba      	ldr	r2, [r7, #24]
 8010122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801012c:	2b00      	cmp	r3, #0
 801012e:	f000 80b4 	beq.w	801029a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010132:	2300      	movs	r3, #0
 8010134:	60fb      	str	r3, [r7, #12]
 8010136:	4b60      	ldr	r3, [pc, #384]	; (80102b8 <HAL_GPIO_Init+0x30c>)
 8010138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801013a:	4a5f      	ldr	r2, [pc, #380]	; (80102b8 <HAL_GPIO_Init+0x30c>)
 801013c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010140:	6453      	str	r3, [r2, #68]	; 0x44
 8010142:	4b5d      	ldr	r3, [pc, #372]	; (80102b8 <HAL_GPIO_Init+0x30c>)
 8010144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801014a:	60fb      	str	r3, [r7, #12]
 801014c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801014e:	4a5b      	ldr	r2, [pc, #364]	; (80102bc <HAL_GPIO_Init+0x310>)
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	089b      	lsrs	r3, r3, #2
 8010154:	3302      	adds	r3, #2
 8010156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801015a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	f003 0303 	and.w	r3, r3, #3
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	220f      	movs	r2, #15
 8010166:	fa02 f303 	lsl.w	r3, r2, r3
 801016a:	43db      	mvns	r3, r3
 801016c:	69ba      	ldr	r2, [r7, #24]
 801016e:	4013      	ands	r3, r2
 8010170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	4a52      	ldr	r2, [pc, #328]	; (80102c0 <HAL_GPIO_Init+0x314>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d02b      	beq.n	80101d2 <HAL_GPIO_Init+0x226>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4a51      	ldr	r2, [pc, #324]	; (80102c4 <HAL_GPIO_Init+0x318>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d025      	beq.n	80101ce <HAL_GPIO_Init+0x222>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4a50      	ldr	r2, [pc, #320]	; (80102c8 <HAL_GPIO_Init+0x31c>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d01f      	beq.n	80101ca <HAL_GPIO_Init+0x21e>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4a4f      	ldr	r2, [pc, #316]	; (80102cc <HAL_GPIO_Init+0x320>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d019      	beq.n	80101c6 <HAL_GPIO_Init+0x21a>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	4a4e      	ldr	r2, [pc, #312]	; (80102d0 <HAL_GPIO_Init+0x324>)
 8010196:	4293      	cmp	r3, r2
 8010198:	d013      	beq.n	80101c2 <HAL_GPIO_Init+0x216>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4a4d      	ldr	r2, [pc, #308]	; (80102d4 <HAL_GPIO_Init+0x328>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d00d      	beq.n	80101be <HAL_GPIO_Init+0x212>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4a4c      	ldr	r2, [pc, #304]	; (80102d8 <HAL_GPIO_Init+0x32c>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d007      	beq.n	80101ba <HAL_GPIO_Init+0x20e>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4a4b      	ldr	r2, [pc, #300]	; (80102dc <HAL_GPIO_Init+0x330>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d101      	bne.n	80101b6 <HAL_GPIO_Init+0x20a>
 80101b2:	2307      	movs	r3, #7
 80101b4:	e00e      	b.n	80101d4 <HAL_GPIO_Init+0x228>
 80101b6:	2308      	movs	r3, #8
 80101b8:	e00c      	b.n	80101d4 <HAL_GPIO_Init+0x228>
 80101ba:	2306      	movs	r3, #6
 80101bc:	e00a      	b.n	80101d4 <HAL_GPIO_Init+0x228>
 80101be:	2305      	movs	r3, #5
 80101c0:	e008      	b.n	80101d4 <HAL_GPIO_Init+0x228>
 80101c2:	2304      	movs	r3, #4
 80101c4:	e006      	b.n	80101d4 <HAL_GPIO_Init+0x228>
 80101c6:	2303      	movs	r3, #3
 80101c8:	e004      	b.n	80101d4 <HAL_GPIO_Init+0x228>
 80101ca:	2302      	movs	r3, #2
 80101cc:	e002      	b.n	80101d4 <HAL_GPIO_Init+0x228>
 80101ce:	2301      	movs	r3, #1
 80101d0:	e000      	b.n	80101d4 <HAL_GPIO_Init+0x228>
 80101d2:	2300      	movs	r3, #0
 80101d4:	69fa      	ldr	r2, [r7, #28]
 80101d6:	f002 0203 	and.w	r2, r2, #3
 80101da:	0092      	lsls	r2, r2, #2
 80101dc:	4093      	lsls	r3, r2
 80101de:	69ba      	ldr	r2, [r7, #24]
 80101e0:	4313      	orrs	r3, r2
 80101e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80101e4:	4935      	ldr	r1, [pc, #212]	; (80102bc <HAL_GPIO_Init+0x310>)
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	089b      	lsrs	r3, r3, #2
 80101ea:	3302      	adds	r3, #2
 80101ec:	69ba      	ldr	r2, [r7, #24]
 80101ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80101f2:	4b3b      	ldr	r3, [pc, #236]	; (80102e0 <HAL_GPIO_Init+0x334>)
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	43db      	mvns	r3, r3
 80101fc:	69ba      	ldr	r2, [r7, #24]
 80101fe:	4013      	ands	r3, r2
 8010200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801020a:	2b00      	cmp	r3, #0
 801020c:	d003      	beq.n	8010216 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801020e:	69ba      	ldr	r2, [r7, #24]
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	4313      	orrs	r3, r2
 8010214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010216:	4a32      	ldr	r2, [pc, #200]	; (80102e0 <HAL_GPIO_Init+0x334>)
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801021c:	4b30      	ldr	r3, [pc, #192]	; (80102e0 <HAL_GPIO_Init+0x334>)
 801021e:	68db      	ldr	r3, [r3, #12]
 8010220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	43db      	mvns	r3, r3
 8010226:	69ba      	ldr	r2, [r7, #24]
 8010228:	4013      	ands	r3, r2
 801022a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010234:	2b00      	cmp	r3, #0
 8010236:	d003      	beq.n	8010240 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010238:	69ba      	ldr	r2, [r7, #24]
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	4313      	orrs	r3, r2
 801023e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010240:	4a27      	ldr	r2, [pc, #156]	; (80102e0 <HAL_GPIO_Init+0x334>)
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8010246:	4b26      	ldr	r3, [pc, #152]	; (80102e0 <HAL_GPIO_Init+0x334>)
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	43db      	mvns	r3, r3
 8010250:	69ba      	ldr	r2, [r7, #24]
 8010252:	4013      	ands	r3, r2
 8010254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801025e:	2b00      	cmp	r3, #0
 8010260:	d003      	beq.n	801026a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010262:	69ba      	ldr	r2, [r7, #24]
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	4313      	orrs	r3, r2
 8010268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801026a:	4a1d      	ldr	r2, [pc, #116]	; (80102e0 <HAL_GPIO_Init+0x334>)
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010270:	4b1b      	ldr	r3, [pc, #108]	; (80102e0 <HAL_GPIO_Init+0x334>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	43db      	mvns	r3, r3
 801027a:	69ba      	ldr	r2, [r7, #24]
 801027c:	4013      	ands	r3, r2
 801027e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010288:	2b00      	cmp	r3, #0
 801028a:	d003      	beq.n	8010294 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801028c:	69ba      	ldr	r2, [r7, #24]
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	4313      	orrs	r3, r2
 8010292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010294:	4a12      	ldr	r2, [pc, #72]	; (80102e0 <HAL_GPIO_Init+0x334>)
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	3301      	adds	r3, #1
 801029e:	61fb      	str	r3, [r7, #28]
 80102a0:	69fb      	ldr	r3, [r7, #28]
 80102a2:	2b0f      	cmp	r3, #15
 80102a4:	f67f ae90 	bls.w	800ffc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80102a8:	bf00      	nop
 80102aa:	bf00      	nop
 80102ac:	3724      	adds	r7, #36	; 0x24
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop
 80102b8:	40023800 	.word	0x40023800
 80102bc:	40013800 	.word	0x40013800
 80102c0:	40020000 	.word	0x40020000
 80102c4:	40020400 	.word	0x40020400
 80102c8:	40020800 	.word	0x40020800
 80102cc:	40020c00 	.word	0x40020c00
 80102d0:	40021000 	.word	0x40021000
 80102d4:	40021400 	.word	0x40021400
 80102d8:	40021800 	.word	0x40021800
 80102dc:	40021c00 	.word	0x40021c00
 80102e0:	40013c00 	.word	0x40013c00

080102e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	460b      	mov	r3, r1
 80102ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	691a      	ldr	r2, [r3, #16]
 80102f4:	887b      	ldrh	r3, [r7, #2]
 80102f6:	4013      	ands	r3, r2
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d002      	beq.n	8010302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80102fc:	2301      	movs	r3, #1
 80102fe:	73fb      	strb	r3, [r7, #15]
 8010300:	e001      	b.n	8010306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010302:	2300      	movs	r3, #0
 8010304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010306:	7bfb      	ldrb	r3, [r7, #15]
}
 8010308:	4618      	mov	r0, r3
 801030a:	3714      	adds	r7, #20
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	460b      	mov	r3, r1
 801031e:	807b      	strh	r3, [r7, #2]
 8010320:	4613      	mov	r3, r2
 8010322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010324:	787b      	ldrb	r3, [r7, #1]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d003      	beq.n	8010332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801032a:	887a      	ldrh	r2, [r7, #2]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010330:	e003      	b.n	801033a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010332:	887b      	ldrh	r3, [r7, #2]
 8010334:	041a      	lsls	r2, r3, #16
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	619a      	str	r2, [r3, #24]
}
 801033a:	bf00      	nop
 801033c:	370c      	adds	r7, #12
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr
	...

08010348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	4603      	mov	r3, r0
 8010350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010352:	4b08      	ldr	r3, [pc, #32]	; (8010374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010354:	695a      	ldr	r2, [r3, #20]
 8010356:	88fb      	ldrh	r3, [r7, #6]
 8010358:	4013      	ands	r3, r2
 801035a:	2b00      	cmp	r3, #0
 801035c:	d006      	beq.n	801036c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801035e:	4a05      	ldr	r2, [pc, #20]	; (8010374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010360:	88fb      	ldrh	r3, [r7, #6]
 8010362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010364:	88fb      	ldrh	r3, [r7, #6]
 8010366:	4618      	mov	r0, r3
 8010368:	f7fd fa6c 	bl	800d844 <HAL_GPIO_EXTI_Callback>
  }
}
 801036c:	bf00      	nop
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	40013c00 	.word	0x40013c00

08010378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d101      	bne.n	801038a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010386:	2301      	movs	r3, #1
 8010388:	e12b      	b.n	80105e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010390:	b2db      	uxtb	r3, r3
 8010392:	2b00      	cmp	r3, #0
 8010394:	d106      	bne.n	80103a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2200      	movs	r2, #0
 801039a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7fd febe 	bl	800e120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2224      	movs	r2, #36	; 0x24
 80103a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	f022 0201 	bic.w	r2, r2, #1
 80103ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80103ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80103da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80103dc:	f003 f90a 	bl	80135f4 <HAL_RCC_GetPCLK1Freq>
 80103e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	4a81      	ldr	r2, [pc, #516]	; (80105ec <HAL_I2C_Init+0x274>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d807      	bhi.n	80103fc <HAL_I2C_Init+0x84>
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	4a80      	ldr	r2, [pc, #512]	; (80105f0 <HAL_I2C_Init+0x278>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	bf94      	ite	ls
 80103f4:	2301      	movls	r3, #1
 80103f6:	2300      	movhi	r3, #0
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	e006      	b.n	801040a <HAL_I2C_Init+0x92>
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	4a7d      	ldr	r2, [pc, #500]	; (80105f4 <HAL_I2C_Init+0x27c>)
 8010400:	4293      	cmp	r3, r2
 8010402:	bf94      	ite	ls
 8010404:	2301      	movls	r3, #1
 8010406:	2300      	movhi	r3, #0
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801040e:	2301      	movs	r3, #1
 8010410:	e0e7      	b.n	80105e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	4a78      	ldr	r2, [pc, #480]	; (80105f8 <HAL_I2C_Init+0x280>)
 8010416:	fba2 2303 	umull	r2, r3, r2, r3
 801041a:	0c9b      	lsrs	r3, r3, #18
 801041c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	68ba      	ldr	r2, [r7, #8]
 801042e:	430a      	orrs	r2, r1
 8010430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	6a1b      	ldr	r3, [r3, #32]
 8010438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	4a6a      	ldr	r2, [pc, #424]	; (80105ec <HAL_I2C_Init+0x274>)
 8010442:	4293      	cmp	r3, r2
 8010444:	d802      	bhi.n	801044c <HAL_I2C_Init+0xd4>
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	3301      	adds	r3, #1
 801044a:	e009      	b.n	8010460 <HAL_I2C_Init+0xe8>
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010452:	fb02 f303 	mul.w	r3, r2, r3
 8010456:	4a69      	ldr	r2, [pc, #420]	; (80105fc <HAL_I2C_Init+0x284>)
 8010458:	fba2 2303 	umull	r2, r3, r2, r3
 801045c:	099b      	lsrs	r3, r3, #6
 801045e:	3301      	adds	r3, #1
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	6812      	ldr	r2, [r2, #0]
 8010464:	430b      	orrs	r3, r1
 8010466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	69db      	ldr	r3, [r3, #28]
 801046e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8010472:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	495c      	ldr	r1, [pc, #368]	; (80105ec <HAL_I2C_Init+0x274>)
 801047c:	428b      	cmp	r3, r1
 801047e:	d819      	bhi.n	80104b4 <HAL_I2C_Init+0x13c>
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	1e59      	subs	r1, r3, #1
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	005b      	lsls	r3, r3, #1
 801048a:	fbb1 f3f3 	udiv	r3, r1, r3
 801048e:	1c59      	adds	r1, r3, #1
 8010490:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010494:	400b      	ands	r3, r1
 8010496:	2b00      	cmp	r3, #0
 8010498:	d00a      	beq.n	80104b0 <HAL_I2C_Init+0x138>
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	1e59      	subs	r1, r3, #1
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	005b      	lsls	r3, r3, #1
 80104a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80104a8:	3301      	adds	r3, #1
 80104aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80104ae:	e051      	b.n	8010554 <HAL_I2C_Init+0x1dc>
 80104b0:	2304      	movs	r3, #4
 80104b2:	e04f      	b.n	8010554 <HAL_I2C_Init+0x1dc>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	689b      	ldr	r3, [r3, #8]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d111      	bne.n	80104e0 <HAL_I2C_Init+0x168>
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	1e58      	subs	r0, r3, #1
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6859      	ldr	r1, [r3, #4]
 80104c4:	460b      	mov	r3, r1
 80104c6:	005b      	lsls	r3, r3, #1
 80104c8:	440b      	add	r3, r1
 80104ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80104ce:	3301      	adds	r3, #1
 80104d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	bf0c      	ite	eq
 80104d8:	2301      	moveq	r3, #1
 80104da:	2300      	movne	r3, #0
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	e012      	b.n	8010506 <HAL_I2C_Init+0x18e>
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	1e58      	subs	r0, r3, #1
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6859      	ldr	r1, [r3, #4]
 80104e8:	460b      	mov	r3, r1
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	440b      	add	r3, r1
 80104ee:	0099      	lsls	r1, r3, #2
 80104f0:	440b      	add	r3, r1
 80104f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80104f6:	3301      	adds	r3, #1
 80104f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	bf0c      	ite	eq
 8010500:	2301      	moveq	r3, #1
 8010502:	2300      	movne	r3, #0
 8010504:	b2db      	uxtb	r3, r3
 8010506:	2b00      	cmp	r3, #0
 8010508:	d001      	beq.n	801050e <HAL_I2C_Init+0x196>
 801050a:	2301      	movs	r3, #1
 801050c:	e022      	b.n	8010554 <HAL_I2C_Init+0x1dc>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	689b      	ldr	r3, [r3, #8]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d10e      	bne.n	8010534 <HAL_I2C_Init+0x1bc>
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	1e58      	subs	r0, r3, #1
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6859      	ldr	r1, [r3, #4]
 801051e:	460b      	mov	r3, r1
 8010520:	005b      	lsls	r3, r3, #1
 8010522:	440b      	add	r3, r1
 8010524:	fbb0 f3f3 	udiv	r3, r0, r3
 8010528:	3301      	adds	r3, #1
 801052a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801052e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010532:	e00f      	b.n	8010554 <HAL_I2C_Init+0x1dc>
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	1e58      	subs	r0, r3, #1
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6859      	ldr	r1, [r3, #4]
 801053c:	460b      	mov	r3, r1
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	440b      	add	r3, r1
 8010542:	0099      	lsls	r1, r3, #2
 8010544:	440b      	add	r3, r1
 8010546:	fbb0 f3f3 	udiv	r3, r0, r3
 801054a:	3301      	adds	r3, #1
 801054c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010554:	6879      	ldr	r1, [r7, #4]
 8010556:	6809      	ldr	r1, [r1, #0]
 8010558:	4313      	orrs	r3, r2
 801055a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	69da      	ldr	r2, [r3, #28]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6a1b      	ldr	r3, [r3, #32]
 801056e:	431a      	orrs	r2, r3
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	430a      	orrs	r2, r1
 8010576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8010582:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	6911      	ldr	r1, [r2, #16]
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	68d2      	ldr	r2, [r2, #12]
 801058e:	4311      	orrs	r1, r2
 8010590:	687a      	ldr	r2, [r7, #4]
 8010592:	6812      	ldr	r2, [r2, #0]
 8010594:	430b      	orrs	r3, r1
 8010596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	68db      	ldr	r3, [r3, #12]
 801059e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	695a      	ldr	r2, [r3, #20]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	699b      	ldr	r3, [r3, #24]
 80105aa:	431a      	orrs	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	430a      	orrs	r2, r1
 80105b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	f042 0201 	orr.w	r2, r2, #1
 80105c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2220      	movs	r2, #32
 80105ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2200      	movs	r2, #0
 80105d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2200      	movs	r2, #0
 80105dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80105e0:	2300      	movs	r3, #0
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	bf00      	nop
 80105ec:	000186a0 	.word	0x000186a0
 80105f0:	001e847f 	.word	0x001e847f
 80105f4:	003d08ff 	.word	0x003d08ff
 80105f8:	431bde83 	.word	0x431bde83
 80105fc:	10624dd3 	.word	0x10624dd3

08010600 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	695b      	ldr	r3, [r3, #20]
 801060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010612:	2b80      	cmp	r3, #128	; 0x80
 8010614:	d103      	bne.n	801061e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2200      	movs	r2, #0
 801061c:	611a      	str	r2, [r3, #16]
  }
}
 801061e:	bf00      	nop
 8010620:	370c      	adds	r7, #12
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr
	...

0801062c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b088      	sub	sp, #32
 8010630:	af02      	add	r7, sp, #8
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	4608      	mov	r0, r1
 8010636:	4611      	mov	r1, r2
 8010638:	461a      	mov	r2, r3
 801063a:	4603      	mov	r3, r0
 801063c:	817b      	strh	r3, [r7, #10]
 801063e:	460b      	mov	r3, r1
 8010640:	813b      	strh	r3, [r7, #8]
 8010642:	4613      	mov	r3, r2
 8010644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8010646:	f7fe fd97 	bl	800f178 <HAL_GetTick>
 801064a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010652:	b2db      	uxtb	r3, r3
 8010654:	2b20      	cmp	r3, #32
 8010656:	f040 80d9 	bne.w	801080c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	2319      	movs	r3, #25
 8010660:	2201      	movs	r2, #1
 8010662:	496d      	ldr	r1, [pc, #436]	; (8010818 <HAL_I2C_Mem_Write+0x1ec>)
 8010664:	68f8      	ldr	r0, [r7, #12]
 8010666:	f002 f911 	bl	801288c <I2C_WaitOnFlagUntilTimeout>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d001      	beq.n	8010674 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8010670:	2302      	movs	r3, #2
 8010672:	e0cc      	b.n	801080e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801067a:	2b01      	cmp	r3, #1
 801067c:	d101      	bne.n	8010682 <HAL_I2C_Mem_Write+0x56>
 801067e:	2302      	movs	r3, #2
 8010680:	e0c5      	b.n	801080e <HAL_I2C_Mem_Write+0x1e2>
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2201      	movs	r2, #1
 8010686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	f003 0301 	and.w	r3, r3, #1
 8010694:	2b01      	cmp	r3, #1
 8010696:	d007      	beq.n	80106a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f042 0201 	orr.w	r2, r2, #1
 80106a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80106b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2221      	movs	r2, #33	; 0x21
 80106bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2240      	movs	r2, #64	; 0x40
 80106c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	2200      	movs	r2, #0
 80106cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	6a3a      	ldr	r2, [r7, #32]
 80106d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80106d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80106de:	b29a      	uxth	r2, r3
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	4a4d      	ldr	r2, [pc, #308]	; (801081c <HAL_I2C_Mem_Write+0x1f0>)
 80106e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80106ea:	88f8      	ldrh	r0, [r7, #6]
 80106ec:	893a      	ldrh	r2, [r7, #8]
 80106ee:	8979      	ldrh	r1, [r7, #10]
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	9301      	str	r3, [sp, #4]
 80106f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	4603      	mov	r3, r0
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f001 fea0 	bl	8012440 <I2C_RequestMemoryWrite>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d052      	beq.n	80107ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8010706:	2301      	movs	r3, #1
 8010708:	e081      	b.n	801080e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801070a:	697a      	ldr	r2, [r7, #20]
 801070c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801070e:	68f8      	ldr	r0, [r7, #12]
 8010710:	f002 f9d6 	bl	8012ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 8010714:	4603      	mov	r3, r0
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00d      	beq.n	8010736 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801071e:	2b04      	cmp	r3, #4
 8010720:	d107      	bne.n	8010732 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8010732:	2301      	movs	r3, #1
 8010734:	e06b      	b.n	801080e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801073a:	781a      	ldrb	r2, [r3, #0]
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010746:	1c5a      	adds	r2, r3, #1
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010750:	3b01      	subs	r3, #1
 8010752:	b29a      	uxth	r2, r3
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801075c:	b29b      	uxth	r3, r3
 801075e:	3b01      	subs	r3, #1
 8010760:	b29a      	uxth	r2, r3
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	695b      	ldr	r3, [r3, #20]
 801076c:	f003 0304 	and.w	r3, r3, #4
 8010770:	2b04      	cmp	r3, #4
 8010772:	d11b      	bne.n	80107ac <HAL_I2C_Mem_Write+0x180>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010778:	2b00      	cmp	r3, #0
 801077a:	d017      	beq.n	80107ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010780:	781a      	ldrb	r2, [r3, #0]
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801078c:	1c5a      	adds	r2, r3, #1
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010796:	3b01      	subs	r3, #1
 8010798:	b29a      	uxth	r2, r3
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	3b01      	subs	r3, #1
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1aa      	bne.n	801070a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80107b4:	697a      	ldr	r2, [r7, #20]
 80107b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107b8:	68f8      	ldr	r0, [r7, #12]
 80107ba:	f002 f9c9 	bl	8012b50 <I2C_WaitOnBTFFlagUntilTimeout>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d00d      	beq.n	80107e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c8:	2b04      	cmp	r3, #4
 80107ca:	d107      	bne.n	80107dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80107da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80107dc:	2301      	movs	r3, #1
 80107de:	e016      	b.n	801080e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80107ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2220      	movs	r2, #32
 80107f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2200      	movs	r2, #0
 80107fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2200      	movs	r2, #0
 8010804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8010808:	2300      	movs	r3, #0
 801080a:	e000      	b.n	801080e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 801080c:	2302      	movs	r3, #2
  }
}
 801080e:	4618      	mov	r0, r3
 8010810:	3718      	adds	r7, #24
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	00100002 	.word	0x00100002
 801081c:	ffff0000 	.word	0xffff0000

08010820 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b08c      	sub	sp, #48	; 0x30
 8010824:	af02      	add	r7, sp, #8
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	4608      	mov	r0, r1
 801082a:	4611      	mov	r1, r2
 801082c:	461a      	mov	r2, r3
 801082e:	4603      	mov	r3, r0
 8010830:	817b      	strh	r3, [r7, #10]
 8010832:	460b      	mov	r3, r1
 8010834:	813b      	strh	r3, [r7, #8]
 8010836:	4613      	mov	r3, r2
 8010838:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801083a:	f7fe fc9d 	bl	800f178 <HAL_GetTick>
 801083e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010846:	b2db      	uxtb	r3, r3
 8010848:	2b20      	cmp	r3, #32
 801084a:	f040 8214 	bne.w	8010c76 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010850:	9300      	str	r3, [sp, #0]
 8010852:	2319      	movs	r3, #25
 8010854:	2201      	movs	r2, #1
 8010856:	497b      	ldr	r1, [pc, #492]	; (8010a44 <HAL_I2C_Mem_Read+0x224>)
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f002 f817 	bl	801288c <I2C_WaitOnFlagUntilTimeout>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d001      	beq.n	8010868 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8010864:	2302      	movs	r3, #2
 8010866:	e207      	b.n	8010c78 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801086e:	2b01      	cmp	r3, #1
 8010870:	d101      	bne.n	8010876 <HAL_I2C_Mem_Read+0x56>
 8010872:	2302      	movs	r3, #2
 8010874:	e200      	b.n	8010c78 <HAL_I2C_Mem_Read+0x458>
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2201      	movs	r2, #1
 801087a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f003 0301 	and.w	r3, r3, #1
 8010888:	2b01      	cmp	r3, #1
 801088a:	d007      	beq.n	801089c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f042 0201 	orr.w	r2, r2, #1
 801089a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80108aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2222      	movs	r2, #34	; 0x22
 80108b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2240      	movs	r2, #64	; 0x40
 80108b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2200      	movs	r2, #0
 80108c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80108cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80108d2:	b29a      	uxth	r2, r3
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	4a5b      	ldr	r2, [pc, #364]	; (8010a48 <HAL_I2C_Mem_Read+0x228>)
 80108dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80108de:	88f8      	ldrh	r0, [r7, #6]
 80108e0:	893a      	ldrh	r2, [r7, #8]
 80108e2:	8979      	ldrh	r1, [r7, #10]
 80108e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e6:	9301      	str	r3, [sp, #4]
 80108e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ea:	9300      	str	r3, [sp, #0]
 80108ec:	4603      	mov	r3, r0
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	f001 fe3c 	bl	801256c <I2C_RequestMemoryRead>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d001      	beq.n	80108fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80108fa:	2301      	movs	r3, #1
 80108fc:	e1bc      	b.n	8010c78 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010902:	2b00      	cmp	r3, #0
 8010904:	d113      	bne.n	801092e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010906:	2300      	movs	r3, #0
 8010908:	623b      	str	r3, [r7, #32]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	695b      	ldr	r3, [r3, #20]
 8010910:	623b      	str	r3, [r7, #32]
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	699b      	ldr	r3, [r3, #24]
 8010918:	623b      	str	r3, [r7, #32]
 801091a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	681a      	ldr	r2, [r3, #0]
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801092a:	601a      	str	r2, [r3, #0]
 801092c:	e190      	b.n	8010c50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010932:	2b01      	cmp	r3, #1
 8010934:	d11b      	bne.n	801096e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010944:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010946:	2300      	movs	r3, #0
 8010948:	61fb      	str	r3, [r7, #28]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	695b      	ldr	r3, [r3, #20]
 8010950:	61fb      	str	r3, [r7, #28]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	699b      	ldr	r3, [r3, #24]
 8010958:	61fb      	str	r3, [r7, #28]
 801095a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	681a      	ldr	r2, [r3, #0]
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801096a:	601a      	str	r2, [r3, #0]
 801096c:	e170      	b.n	8010c50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010972:	2b02      	cmp	r3, #2
 8010974:	d11b      	bne.n	80109ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010984:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010994:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010996:	2300      	movs	r3, #0
 8010998:	61bb      	str	r3, [r7, #24]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	695b      	ldr	r3, [r3, #20]
 80109a0:	61bb      	str	r3, [r7, #24]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	699b      	ldr	r3, [r3, #24]
 80109a8:	61bb      	str	r3, [r7, #24]
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	e150      	b.n	8010c50 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80109ae:	2300      	movs	r3, #0
 80109b0:	617b      	str	r3, [r7, #20]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	695b      	ldr	r3, [r3, #20]
 80109b8:	617b      	str	r3, [r7, #20]
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	699b      	ldr	r3, [r3, #24]
 80109c0:	617b      	str	r3, [r7, #20]
 80109c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80109c4:	e144      	b.n	8010c50 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109ca:	2b03      	cmp	r3, #3
 80109cc:	f200 80f1 	bhi.w	8010bb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d123      	bne.n	8010a20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80109d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80109dc:	68f8      	ldr	r0, [r7, #12]
 80109de:	f002 f931 	bl	8012c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d001      	beq.n	80109ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80109e8:	2301      	movs	r3, #1
 80109ea:	e145      	b.n	8010c78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	691a      	ldr	r2, [r3, #16]
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109f6:	b2d2      	uxtb	r2, r2
 80109f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fe:	1c5a      	adds	r2, r3, #1
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a08:	3b01      	subs	r3, #1
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	3b01      	subs	r3, #1
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010a1e:	e117      	b.n	8010c50 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a24:	2b02      	cmp	r3, #2
 8010a26:	d14e      	bne.n	8010ac6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2a:	9300      	str	r3, [sp, #0]
 8010a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2e:	2200      	movs	r2, #0
 8010a30:	4906      	ldr	r1, [pc, #24]	; (8010a4c <HAL_I2C_Mem_Read+0x22c>)
 8010a32:	68f8      	ldr	r0, [r7, #12]
 8010a34:	f001 ff2a 	bl	801288c <I2C_WaitOnFlagUntilTimeout>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d008      	beq.n	8010a50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8010a3e:	2301      	movs	r3, #1
 8010a40:	e11a      	b.n	8010c78 <HAL_I2C_Mem_Read+0x458>
 8010a42:	bf00      	nop
 8010a44:	00100002 	.word	0x00100002
 8010a48:	ffff0000 	.word	0xffff0000
 8010a4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	681a      	ldr	r2, [r3, #0]
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	691a      	ldr	r2, [r3, #16]
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6a:	b2d2      	uxtb	r2, r2
 8010a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a72:	1c5a      	adds	r2, r3, #1
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a7c:	3b01      	subs	r3, #1
 8010a7e:	b29a      	uxth	r2, r3
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	3b01      	subs	r3, #1
 8010a8c:	b29a      	uxth	r2, r3
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	691a      	ldr	r2, [r3, #16]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a9c:	b2d2      	uxtb	r2, r2
 8010a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa4:	1c5a      	adds	r2, r3, #1
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010aae:	3b01      	subs	r3, #1
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	3b01      	subs	r3, #1
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010ac4:	e0c4      	b.n	8010c50 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac8:	9300      	str	r3, [sp, #0]
 8010aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010acc:	2200      	movs	r2, #0
 8010ace:	496c      	ldr	r1, [pc, #432]	; (8010c80 <HAL_I2C_Mem_Read+0x460>)
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f001 fedb 	bl	801288c <I2C_WaitOnFlagUntilTimeout>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d001      	beq.n	8010ae0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	e0cb      	b.n	8010c78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	681a      	ldr	r2, [r3, #0]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	691a      	ldr	r2, [r3, #16]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010afa:	b2d2      	uxtb	r2, r2
 8010afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b02:	1c5a      	adds	r2, r3, #1
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b0c:	3b01      	subs	r3, #1
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	b29a      	uxth	r2, r3
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b24:	9300      	str	r3, [sp, #0]
 8010b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b28:	2200      	movs	r2, #0
 8010b2a:	4955      	ldr	r1, [pc, #340]	; (8010c80 <HAL_I2C_Mem_Read+0x460>)
 8010b2c:	68f8      	ldr	r0, [r7, #12]
 8010b2e:	f001 fead 	bl	801288c <I2C_WaitOnFlagUntilTimeout>
 8010b32:	4603      	mov	r3, r0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d001      	beq.n	8010b3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	e09d      	b.n	8010c78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	681a      	ldr	r2, [r3, #0]
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	691a      	ldr	r2, [r3, #16]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b56:	b2d2      	uxtb	r2, r2
 8010b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b5e:	1c5a      	adds	r2, r3, #1
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b68:	3b01      	subs	r3, #1
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	3b01      	subs	r3, #1
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	691a      	ldr	r2, [r3, #16]
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b88:	b2d2      	uxtb	r2, r2
 8010b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b90:	1c5a      	adds	r2, r3, #1
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	3b01      	subs	r3, #1
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010bb0:	e04e      	b.n	8010c50 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f002 f844 	bl	8012c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d001      	beq.n	8010bc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	e058      	b.n	8010c78 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	691a      	ldr	r2, [r3, #16]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd0:	b2d2      	uxtb	r2, r2
 8010bd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd8:	1c5a      	adds	r2, r3, #1
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010be2:	3b01      	subs	r3, #1
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	3b01      	subs	r3, #1
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	695b      	ldr	r3, [r3, #20]
 8010bfe:	f003 0304 	and.w	r3, r3, #4
 8010c02:	2b04      	cmp	r3, #4
 8010c04:	d124      	bne.n	8010c50 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c0a:	2b03      	cmp	r3, #3
 8010c0c:	d107      	bne.n	8010c1e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010c1c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	691a      	ldr	r2, [r3, #16]
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c28:	b2d2      	uxtb	r2, r2
 8010c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c30:	1c5a      	adds	r2, r3, #1
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c46:	b29b      	uxth	r3, r3
 8010c48:	3b01      	subs	r3, #1
 8010c4a:	b29a      	uxth	r2, r3
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	f47f aeb6 	bne.w	80109c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	2220      	movs	r2, #32
 8010c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2200      	movs	r2, #0
 8010c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8010c72:	2300      	movs	r3, #0
 8010c74:	e000      	b.n	8010c78 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8010c76:	2302      	movs	r3, #2
  }
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3728      	adds	r7, #40	; 0x28
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	00010004 	.word	0x00010004

08010c84 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b088      	sub	sp, #32
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c9c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010ca4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010cac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8010cae:	7bfb      	ldrb	r3, [r7, #15]
 8010cb0:	2b10      	cmp	r3, #16
 8010cb2:	d003      	beq.n	8010cbc <HAL_I2C_EV_IRQHandler+0x38>
 8010cb4:	7bfb      	ldrb	r3, [r7, #15]
 8010cb6:	2b40      	cmp	r3, #64	; 0x40
 8010cb8:	f040 80b1 	bne.w	8010e1e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	699b      	ldr	r3, [r3, #24]
 8010cc2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	695b      	ldr	r3, [r3, #20]
 8010cca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	f003 0301 	and.w	r3, r3, #1
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10d      	bne.n	8010cf2 <HAL_I2C_EV_IRQHandler+0x6e>
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8010cdc:	d003      	beq.n	8010ce6 <HAL_I2C_EV_IRQHandler+0x62>
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010ce4:	d101      	bne.n	8010cea <HAL_I2C_EV_IRQHandler+0x66>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	e000      	b.n	8010cec <HAL_I2C_EV_IRQHandler+0x68>
 8010cea:	2300      	movs	r3, #0
 8010cec:	2b01      	cmp	r3, #1
 8010cee:	f000 8114 	beq.w	8010f1a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010cf2:	69fb      	ldr	r3, [r7, #28]
 8010cf4:	f003 0301 	and.w	r3, r3, #1
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00b      	beq.n	8010d14 <HAL_I2C_EV_IRQHandler+0x90>
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d006      	beq.n	8010d14 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f002 f828 	bl	8012d5c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f000 fd7a 	bl	8011806 <I2C_Master_SB>
 8010d12:	e083      	b.n	8010e1c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010d14:	69fb      	ldr	r3, [r7, #28]
 8010d16:	f003 0308 	and.w	r3, r3, #8
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d008      	beq.n	8010d30 <HAL_I2C_EV_IRQHandler+0xac>
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d003      	beq.n	8010d30 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f000 fdf2 	bl	8011912 <I2C_Master_ADD10>
 8010d2e:	e075      	b.n	8010e1c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	f003 0302 	and.w	r3, r3, #2
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d008      	beq.n	8010d4c <HAL_I2C_EV_IRQHandler+0xc8>
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d003      	beq.n	8010d4c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 fe0e 	bl	8011966 <I2C_Master_ADDR>
 8010d4a:	e067      	b.n	8010e1c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8010d4c:	69bb      	ldr	r3, [r7, #24]
 8010d4e:	f003 0304 	and.w	r3, r3, #4
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d036      	beq.n	8010dc4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010d64:	f000 80db 	beq.w	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010d68:	69fb      	ldr	r3, [r7, #28]
 8010d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00d      	beq.n	8010d8e <HAL_I2C_EV_IRQHandler+0x10a>
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d008      	beq.n	8010d8e <HAL_I2C_EV_IRQHandler+0x10a>
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	f003 0304 	and.w	r3, r3, #4
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d103      	bne.n	8010d8e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 f9d6 	bl	8011138 <I2C_MasterTransmit_TXE>
 8010d8c:	e046      	b.n	8010e1c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	f003 0304 	and.w	r3, r3, #4
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	f000 80c2 	beq.w	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f000 80bc 	beq.w	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8010da6:	7bbb      	ldrb	r3, [r7, #14]
 8010da8:	2b21      	cmp	r3, #33	; 0x21
 8010daa:	d103      	bne.n	8010db4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f000 fa5f 	bl	8011270 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010db2:	e0b4      	b.n	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8010db4:	7bfb      	ldrb	r3, [r7, #15]
 8010db6:	2b40      	cmp	r3, #64	; 0x40
 8010db8:	f040 80b1 	bne.w	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f000 facd 	bl	801135c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010dc2:	e0ac      	b.n	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010dd2:	f000 80a4 	beq.w	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010dd6:	69fb      	ldr	r3, [r7, #28]
 8010dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00d      	beq.n	8010dfc <HAL_I2C_EV_IRQHandler+0x178>
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d008      	beq.n	8010dfc <HAL_I2C_EV_IRQHandler+0x178>
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	f003 0304 	and.w	r3, r3, #4
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d103      	bne.n	8010dfc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f000 fb49 	bl	801148c <I2C_MasterReceive_RXNE>
 8010dfa:	e00f      	b.n	8010e1c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	f003 0304 	and.w	r3, r3, #4
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 808b 	beq.w	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	f000 8085 	beq.w	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 fc01 	bl	801161c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010e1a:	e080      	b.n	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
 8010e1c:	e07f      	b.n	8010f1e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d004      	beq.n	8010e30 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	695b      	ldr	r3, [r3, #20]
 8010e2c:	61fb      	str	r3, [r7, #28]
 8010e2e:	e007      	b.n	8010e40 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	699b      	ldr	r3, [r3, #24]
 8010e36:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	695b      	ldr	r3, [r3, #20]
 8010e3e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	f003 0302 	and.w	r3, r3, #2
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d011      	beq.n	8010e6e <HAL_I2C_EV_IRQHandler+0x1ea>
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d00c      	beq.n	8010e6e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d003      	beq.n	8010e64 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	699b      	ldr	r3, [r3, #24]
 8010e62:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8010e64:	69b9      	ldr	r1, [r7, #24]
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f000 ffcc 	bl	8011e04 <I2C_Slave_ADDR>
 8010e6c:	e05a      	b.n	8010f24 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010e6e:	69fb      	ldr	r3, [r7, #28]
 8010e70:	f003 0310 	and.w	r3, r3, #16
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d008      	beq.n	8010e8a <HAL_I2C_EV_IRQHandler+0x206>
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d003      	beq.n	8010e8a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f001 f806 	bl	8011e94 <I2C_Slave_STOPF>
 8010e88:	e04c      	b.n	8010f24 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010e8a:	7bbb      	ldrb	r3, [r7, #14]
 8010e8c:	2b21      	cmp	r3, #33	; 0x21
 8010e8e:	d002      	beq.n	8010e96 <HAL_I2C_EV_IRQHandler+0x212>
 8010e90:	7bbb      	ldrb	r3, [r7, #14]
 8010e92:	2b29      	cmp	r3, #41	; 0x29
 8010e94:	d120      	bne.n	8010ed8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d00d      	beq.n	8010ebc <HAL_I2C_EV_IRQHandler+0x238>
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d008      	beq.n	8010ebc <HAL_I2C_EV_IRQHandler+0x238>
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	f003 0304 	and.w	r3, r3, #4
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d103      	bne.n	8010ebc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 fee7 	bl	8011c88 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010eba:	e032      	b.n	8010f22 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	f003 0304 	and.w	r3, r3, #4
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d02d      	beq.n	8010f22 <HAL_I2C_EV_IRQHandler+0x29e>
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d028      	beq.n	8010f22 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f000 ff16 	bl	8011d02 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010ed6:	e024      	b.n	8010f22 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00d      	beq.n	8010efe <HAL_I2C_EV_IRQHandler+0x27a>
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d008      	beq.n	8010efe <HAL_I2C_EV_IRQHandler+0x27a>
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	f003 0304 	and.w	r3, r3, #4
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d103      	bne.n	8010efe <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 ff24 	bl	8011d44 <I2C_SlaveReceive_RXNE>
 8010efc:	e012      	b.n	8010f24 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	f003 0304 	and.w	r3, r3, #4
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d00d      	beq.n	8010f24 <HAL_I2C_EV_IRQHandler+0x2a0>
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d008      	beq.n	8010f24 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 ff54 	bl	8011dc0 <I2C_SlaveReceive_BTF>
 8010f18:	e004      	b.n	8010f24 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8010f1a:	bf00      	nop
 8010f1c:	e002      	b.n	8010f24 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010f1e:	bf00      	nop
 8010f20:	e000      	b.n	8010f24 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010f22:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8010f24:	3720      	adds	r7, #32
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010f2a:	b580      	push	{r7, lr}
 8010f2c:	b08a      	sub	sp, #40	; 0x28
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	695b      	ldr	r3, [r3, #20]
 8010f38:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8010f42:	2300      	movs	r3, #0
 8010f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010f4c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010f4e:	6a3b      	ldr	r3, [r7, #32]
 8010f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00d      	beq.n	8010f74 <HAL_I2C_ER_IRQHandler+0x4a>
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d008      	beq.n	8010f74 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	f043 0301 	orr.w	r3, r3, #1
 8010f68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010f72:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010f74:	6a3b      	ldr	r3, [r7, #32]
 8010f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d00d      	beq.n	8010f9a <HAL_I2C_ER_IRQHandler+0x70>
 8010f7e:	69fb      	ldr	r3, [r7, #28]
 8010f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d008      	beq.n	8010f9a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8010f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8a:	f043 0302 	orr.w	r3, r3, #2
 8010f8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8010f98:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010f9a:	6a3b      	ldr	r3, [r7, #32]
 8010f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d03e      	beq.n	8011022 <HAL_I2C_ER_IRQHandler+0xf8>
 8010fa4:	69fb      	ldr	r3, [r7, #28]
 8010fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d039      	beq.n	8011022 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8010fae:	7efb      	ldrb	r3, [r7, #27]
 8010fb0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010fc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8010fc8:	7ebb      	ldrb	r3, [r7, #26]
 8010fca:	2b20      	cmp	r3, #32
 8010fcc:	d112      	bne.n	8010ff4 <HAL_I2C_ER_IRQHandler+0xca>
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d10f      	bne.n	8010ff4 <HAL_I2C_ER_IRQHandler+0xca>
 8010fd4:	7cfb      	ldrb	r3, [r7, #19]
 8010fd6:	2b21      	cmp	r3, #33	; 0x21
 8010fd8:	d008      	beq.n	8010fec <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8010fda:	7cfb      	ldrb	r3, [r7, #19]
 8010fdc:	2b29      	cmp	r3, #41	; 0x29
 8010fde:	d005      	beq.n	8010fec <HAL_I2C_ER_IRQHandler+0xc2>
 8010fe0:	7cfb      	ldrb	r3, [r7, #19]
 8010fe2:	2b28      	cmp	r3, #40	; 0x28
 8010fe4:	d106      	bne.n	8010ff4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2b21      	cmp	r3, #33	; 0x21
 8010fea:	d103      	bne.n	8010ff4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f001 f881 	bl	80120f4 <I2C_Slave_AF>
 8010ff2:	e016      	b.n	8011022 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010ffc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011000:	f043 0304 	orr.w	r3, r3, #4
 8011004:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8011006:	7efb      	ldrb	r3, [r7, #27]
 8011008:	2b10      	cmp	r3, #16
 801100a:	d002      	beq.n	8011012 <HAL_I2C_ER_IRQHandler+0xe8>
 801100c:	7efb      	ldrb	r3, [r7, #27]
 801100e:	2b40      	cmp	r3, #64	; 0x40
 8011010:	d107      	bne.n	8011022 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	681a      	ldr	r2, [r3, #0]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011020:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8011022:	6a3b      	ldr	r3, [r7, #32]
 8011024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011028:	2b00      	cmp	r3, #0
 801102a:	d00d      	beq.n	8011048 <HAL_I2C_ER_IRQHandler+0x11e>
 801102c:	69fb      	ldr	r3, [r7, #28]
 801102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011032:	2b00      	cmp	r3, #0
 8011034:	d008      	beq.n	8011048 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8011036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011038:	f043 0308 	orr.w	r3, r3, #8
 801103c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8011046:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8011048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104a:	2b00      	cmp	r3, #0
 801104c:	d008      	beq.n	8011060 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011054:	431a      	orrs	r2, r3
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f001 f8be 	bl	80121dc <I2C_ITError>
  }
}
 8011060:	bf00      	nop
 8011062:	3728      	adds	r7, #40	; 0x28
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011068:	b480      	push	{r7}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8011070:	bf00      	nop
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr

0801107c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801107c:	b480      	push	{r7}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8011084:	bf00      	nop
 8011086:	370c      	adds	r7, #12
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr

08011090 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011090:	b480      	push	{r7}
 8011092:	b083      	sub	sp, #12
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8011098:	bf00      	nop
 801109a:	370c      	adds	r7, #12
 801109c:	46bd      	mov	sp, r7
 801109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a2:	4770      	bx	lr

080110a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b083      	sub	sp, #12
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80110ac:	bf00      	nop
 80110ae:	370c      	adds	r7, #12
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr

080110b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b083      	sub	sp, #12
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	460b      	mov	r3, r1
 80110c2:	70fb      	strb	r3, [r7, #3]
 80110c4:	4613      	mov	r3, r2
 80110c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80110c8:	bf00      	nop
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr

080110d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80110dc:	bf00      	nop
 80110de:	370c      	adds	r7, #12
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr

080110e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b083      	sub	sp, #12
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80110f0:	bf00      	nop
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8011104:	bf00      	nop
 8011106:	370c      	adds	r7, #12
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr

08011110 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011110:	b480      	push	{r7}
 8011112:	b083      	sub	sp, #12
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8011118:	bf00      	nop
 801111a:	370c      	adds	r7, #12
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr

08011124 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011124:	b480      	push	{r7}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801112c:	bf00      	nop
 801112e:	370c      	adds	r7, #12
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr

08011138 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011146:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801114e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011154:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801115a:	2b00      	cmp	r3, #0
 801115c:	d150      	bne.n	8011200 <I2C_MasterTransmit_TXE+0xc8>
 801115e:	7bfb      	ldrb	r3, [r7, #15]
 8011160:	2b21      	cmp	r3, #33	; 0x21
 8011162:	d14d      	bne.n	8011200 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	2b08      	cmp	r3, #8
 8011168:	d01d      	beq.n	80111a6 <I2C_MasterTransmit_TXE+0x6e>
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	2b20      	cmp	r3, #32
 801116e:	d01a      	beq.n	80111a6 <I2C_MasterTransmit_TXE+0x6e>
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011176:	d016      	beq.n	80111a6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	685a      	ldr	r2, [r3, #4]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011186:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2211      	movs	r2, #17
 801118c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2200      	movs	r2, #0
 8011192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2220      	movs	r2, #32
 801119a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7ff ff62 	bl	8011068 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80111a4:	e060      	b.n	8011268 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	685a      	ldr	r2, [r3, #4]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80111b4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	681a      	ldr	r2, [r3, #0]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80111c4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2200      	movs	r2, #0
 80111ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2220      	movs	r2, #32
 80111d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	2b40      	cmp	r3, #64	; 0x40
 80111de:	d107      	bne.n	80111f0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2200      	movs	r2, #0
 80111e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f7ff ff7d 	bl	80110e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80111ee:	e03b      	b.n	8011268 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2200      	movs	r2, #0
 80111f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f7ff ff35 	bl	8011068 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80111fe:	e033      	b.n	8011268 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8011200:	7bfb      	ldrb	r3, [r7, #15]
 8011202:	2b21      	cmp	r3, #33	; 0x21
 8011204:	d005      	beq.n	8011212 <I2C_MasterTransmit_TXE+0xda>
 8011206:	7bbb      	ldrb	r3, [r7, #14]
 8011208:	2b40      	cmp	r3, #64	; 0x40
 801120a:	d12d      	bne.n	8011268 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801120c:	7bfb      	ldrb	r3, [r7, #15]
 801120e:	2b22      	cmp	r3, #34	; 0x22
 8011210:	d12a      	bne.n	8011268 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011216:	b29b      	uxth	r3, r3
 8011218:	2b00      	cmp	r3, #0
 801121a:	d108      	bne.n	801122e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	685a      	ldr	r2, [r3, #4]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801122a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801122c:	e01c      	b.n	8011268 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011234:	b2db      	uxtb	r3, r3
 8011236:	2b40      	cmp	r3, #64	; 0x40
 8011238:	d103      	bne.n	8011242 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f000 f88e 	bl	801135c <I2C_MemoryTransmit_TXE_BTF>
}
 8011240:	e012      	b.n	8011268 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011246:	781a      	ldrb	r2, [r3, #0]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011252:	1c5a      	adds	r2, r3, #1
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801125c:	b29b      	uxth	r3, r3
 801125e:	3b01      	subs	r3, #1
 8011260:	b29a      	uxth	r2, r3
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8011266:	e7ff      	b.n	8011268 <I2C_MasterTransmit_TXE+0x130>
 8011268:	bf00      	nop
 801126a:	3710      	adds	r7, #16
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801127c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011284:	b2db      	uxtb	r3, r3
 8011286:	2b21      	cmp	r3, #33	; 0x21
 8011288:	d164      	bne.n	8011354 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801128e:	b29b      	uxth	r3, r3
 8011290:	2b00      	cmp	r3, #0
 8011292:	d012      	beq.n	80112ba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011298:	781a      	ldrb	r2, [r3, #0]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a4:	1c5a      	adds	r2, r3, #1
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	3b01      	subs	r3, #1
 80112b2:	b29a      	uxth	r2, r3
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80112b8:	e04c      	b.n	8011354 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2b08      	cmp	r3, #8
 80112be:	d01d      	beq.n	80112fc <I2C_MasterTransmit_BTF+0x8c>
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2b20      	cmp	r3, #32
 80112c4:	d01a      	beq.n	80112fc <I2C_MasterTransmit_BTF+0x8c>
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80112cc:	d016      	beq.n	80112fc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	685a      	ldr	r2, [r3, #4]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80112dc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2211      	movs	r2, #17
 80112e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2200      	movs	r2, #0
 80112e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2220      	movs	r2, #32
 80112f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f7ff feb7 	bl	8011068 <HAL_I2C_MasterTxCpltCallback>
}
 80112fa:	e02b      	b.n	8011354 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	685a      	ldr	r2, [r3, #4]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801130a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	681a      	ldr	r2, [r3, #0]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801131a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2220      	movs	r2, #32
 8011326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011330:	b2db      	uxtb	r3, r3
 8011332:	2b40      	cmp	r3, #64	; 0x40
 8011334:	d107      	bne.n	8011346 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2200      	movs	r2, #0
 801133a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f7ff fed2 	bl	80110e8 <HAL_I2C_MemTxCpltCallback>
}
 8011344:	e006      	b.n	8011354 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2200      	movs	r2, #0
 801134a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f7ff fe8a 	bl	8011068 <HAL_I2C_MasterTxCpltCallback>
}
 8011354:	bf00      	nop
 8011356:	3710      	adds	r7, #16
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801136a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011370:	2b00      	cmp	r3, #0
 8011372:	d11d      	bne.n	80113b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011378:	2b01      	cmp	r3, #1
 801137a:	d10b      	bne.n	8011394 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011380:	b2da      	uxtb	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801138c:	1c9a      	adds	r2, r3, #2
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8011392:	e077      	b.n	8011484 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011398:	b29b      	uxth	r3, r3
 801139a:	121b      	asrs	r3, r3, #8
 801139c:	b2da      	uxtb	r2, r3
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113a8:	1c5a      	adds	r2, r3, #1
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80113ae:	e069      	b.n	8011484 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113b4:	2b01      	cmp	r3, #1
 80113b6:	d10b      	bne.n	80113d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80113bc:	b2da      	uxtb	r2, r3
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113c8:	1c5a      	adds	r2, r3, #1
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80113ce:	e059      	b.n	8011484 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113d4:	2b02      	cmp	r3, #2
 80113d6:	d152      	bne.n	801147e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80113d8:	7bfb      	ldrb	r3, [r7, #15]
 80113da:	2b22      	cmp	r3, #34	; 0x22
 80113dc:	d10d      	bne.n	80113fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80113ec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113f2:	1c5a      	adds	r2, r3, #1
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80113f8:	e044      	b.n	8011484 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80113fe:	b29b      	uxth	r3, r3
 8011400:	2b00      	cmp	r3, #0
 8011402:	d015      	beq.n	8011430 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8011404:	7bfb      	ldrb	r3, [r7, #15]
 8011406:	2b21      	cmp	r3, #33	; 0x21
 8011408:	d112      	bne.n	8011430 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801140e:	781a      	ldrb	r2, [r3, #0]
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801141a:	1c5a      	adds	r2, r3, #1
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011424:	b29b      	uxth	r3, r3
 8011426:	3b01      	subs	r3, #1
 8011428:	b29a      	uxth	r2, r3
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801142e:	e029      	b.n	8011484 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011434:	b29b      	uxth	r3, r3
 8011436:	2b00      	cmp	r3, #0
 8011438:	d124      	bne.n	8011484 <I2C_MemoryTransmit_TXE_BTF+0x128>
 801143a:	7bfb      	ldrb	r3, [r7, #15]
 801143c:	2b21      	cmp	r3, #33	; 0x21
 801143e:	d121      	bne.n	8011484 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	685a      	ldr	r2, [r3, #4]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801144e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801145e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2200      	movs	r2, #0
 8011464:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2220      	movs	r2, #32
 801146a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2200      	movs	r2, #0
 8011472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f7ff fe36 	bl	80110e8 <HAL_I2C_MemTxCpltCallback>
}
 801147c:	e002      	b.n	8011484 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f7ff f8be 	bl	8010600 <I2C_Flush_DR>
}
 8011484:	bf00      	nop
 8011486:	3710      	adds	r7, #16
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b084      	sub	sp, #16
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801149a:	b2db      	uxtb	r3, r3
 801149c:	2b22      	cmp	r3, #34	; 0x22
 801149e:	f040 80b9 	bne.w	8011614 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	2b03      	cmp	r3, #3
 80114b4:	d921      	bls.n	80114fa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	691a      	ldr	r2, [r3, #16]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c0:	b2d2      	uxtb	r2, r2
 80114c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c8:	1c5a      	adds	r2, r3, #1
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	3b01      	subs	r3, #1
 80114d6:	b29a      	uxth	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	2b03      	cmp	r3, #3
 80114e4:	f040 8096 	bne.w	8011614 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	685a      	ldr	r2, [r3, #4]
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114f6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80114f8:	e08c      	b.n	8011614 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114fe:	2b02      	cmp	r3, #2
 8011500:	d07f      	beq.n	8011602 <I2C_MasterReceive_RXNE+0x176>
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d002      	beq.n	801150e <I2C_MasterReceive_RXNE+0x82>
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d179      	bne.n	8011602 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f001 fb66 	bl	8012be0 <I2C_WaitOnSTOPRequestThroughIT>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d14c      	bne.n	80115b4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011528:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	685a      	ldr	r2, [r3, #4]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011538:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	691a      	ldr	r2, [r3, #16]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011544:	b2d2      	uxtb	r2, r2
 8011546:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801154c:	1c5a      	adds	r2, r3, #1
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011556:	b29b      	uxth	r3, r3
 8011558:	3b01      	subs	r3, #1
 801155a:	b29a      	uxth	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2220      	movs	r2, #32
 8011564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801156e:	b2db      	uxtb	r3, r3
 8011570:	2b40      	cmp	r3, #64	; 0x40
 8011572:	d10a      	bne.n	801158a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2200      	movs	r2, #0
 8011578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2200      	movs	r2, #0
 8011580:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f7ff fdba 	bl	80110fc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011588:	e044      	b.n	8011614 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2200      	movs	r2, #0
 801158e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	2b08      	cmp	r3, #8
 8011596:	d002      	beq.n	801159e <I2C_MasterReceive_RXNE+0x112>
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2b20      	cmp	r3, #32
 801159c:	d103      	bne.n	80115a6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2200      	movs	r2, #0
 80115a2:	631a      	str	r2, [r3, #48]	; 0x30
 80115a4:	e002      	b.n	80115ac <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2212      	movs	r2, #18
 80115aa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f7ff fd65 	bl	801107c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80115b2:	e02f      	b.n	8011614 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	685a      	ldr	r2, [r3, #4]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80115c2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	691a      	ldr	r2, [r3, #16]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ce:	b2d2      	uxtb	r2, r2
 80115d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d6:	1c5a      	adds	r2, r3, #1
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	3b01      	subs	r3, #1
 80115e4:	b29a      	uxth	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2220      	movs	r2, #32
 80115ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2200      	movs	r2, #0
 80115f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f7ff fd88 	bl	8011110 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011600:	e008      	b.n	8011614 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	685a      	ldr	r2, [r3, #4]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011610:	605a      	str	r2, [r3, #4]
}
 8011612:	e7ff      	b.n	8011614 <I2C_MasterReceive_RXNE+0x188>
 8011614:	bf00      	nop
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b084      	sub	sp, #16
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011628:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801162e:	b29b      	uxth	r3, r3
 8011630:	2b04      	cmp	r3, #4
 8011632:	d11b      	bne.n	801166c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	685a      	ldr	r2, [r3, #4]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011642:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	691a      	ldr	r2, [r3, #16]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801164e:	b2d2      	uxtb	r2, r2
 8011650:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011656:	1c5a      	adds	r2, r3, #1
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011660:	b29b      	uxth	r3, r3
 8011662:	3b01      	subs	r3, #1
 8011664:	b29a      	uxth	r2, r3
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801166a:	e0c8      	b.n	80117fe <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011670:	b29b      	uxth	r3, r3
 8011672:	2b03      	cmp	r3, #3
 8011674:	d129      	bne.n	80116ca <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	685a      	ldr	r2, [r3, #4]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011684:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2b04      	cmp	r3, #4
 801168a:	d00a      	beq.n	80116a2 <I2C_MasterReceive_BTF+0x86>
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2b02      	cmp	r3, #2
 8011690:	d007      	beq.n	80116a2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80116a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	691a      	ldr	r2, [r3, #16]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ac:	b2d2      	uxtb	r2, r2
 80116ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b4:	1c5a      	adds	r2, r3, #1
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80116be:	b29b      	uxth	r3, r3
 80116c0:	3b01      	subs	r3, #1
 80116c2:	b29a      	uxth	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80116c8:	e099      	b.n	80117fe <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	2b02      	cmp	r3, #2
 80116d2:	f040 8081 	bne.w	80117d8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d002      	beq.n	80116e2 <I2C_MasterReceive_BTF+0xc6>
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2b10      	cmp	r3, #16
 80116e0:	d108      	bne.n	80116f4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80116f0:	601a      	str	r2, [r3, #0]
 80116f2:	e019      	b.n	8011728 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2b04      	cmp	r3, #4
 80116f8:	d002      	beq.n	8011700 <I2C_MasterReceive_BTF+0xe4>
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	d108      	bne.n	8011712 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801170e:	601a      	str	r2, [r3, #0]
 8011710:	e00a      	b.n	8011728 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2b10      	cmp	r3, #16
 8011716:	d007      	beq.n	8011728 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011726:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	691a      	ldr	r2, [r3, #16]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011732:	b2d2      	uxtb	r2, r2
 8011734:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801173a:	1c5a      	adds	r2, r3, #1
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011744:	b29b      	uxth	r3, r3
 8011746:	3b01      	subs	r3, #1
 8011748:	b29a      	uxth	r2, r3
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	691a      	ldr	r2, [r3, #16]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011758:	b2d2      	uxtb	r2, r2
 801175a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011760:	1c5a      	adds	r2, r3, #1
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801176a:	b29b      	uxth	r3, r3
 801176c:	3b01      	subs	r3, #1
 801176e:	b29a      	uxth	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	685a      	ldr	r2, [r3, #4]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011782:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2220      	movs	r2, #32
 8011788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011792:	b2db      	uxtb	r3, r3
 8011794:	2b40      	cmp	r3, #64	; 0x40
 8011796:	d10a      	bne.n	80117ae <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2200      	movs	r2, #0
 801179c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2200      	movs	r2, #0
 80117a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f7ff fca8 	bl	80110fc <HAL_I2C_MemRxCpltCallback>
}
 80117ac:	e027      	b.n	80117fe <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2b08      	cmp	r3, #8
 80117ba:	d002      	beq.n	80117c2 <I2C_MasterReceive_BTF+0x1a6>
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2b20      	cmp	r3, #32
 80117c0:	d103      	bne.n	80117ca <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2200      	movs	r2, #0
 80117c6:	631a      	str	r2, [r3, #48]	; 0x30
 80117c8:	e002      	b.n	80117d0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2212      	movs	r2, #18
 80117ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f7ff fc53 	bl	801107c <HAL_I2C_MasterRxCpltCallback>
}
 80117d6:	e012      	b.n	80117fe <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	691a      	ldr	r2, [r3, #16]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e2:	b2d2      	uxtb	r2, r2
 80117e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ea:	1c5a      	adds	r2, r3, #1
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	3b01      	subs	r3, #1
 80117f8:	b29a      	uxth	r2, r3
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80117fe:	bf00      	nop
 8011800:	3710      	adds	r7, #16
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8011806:	b480      	push	{r7}
 8011808:	b083      	sub	sp, #12
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011814:	b2db      	uxtb	r3, r3
 8011816:	2b40      	cmp	r3, #64	; 0x40
 8011818:	d117      	bne.n	801184a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801181e:	2b00      	cmp	r3, #0
 8011820:	d109      	bne.n	8011836 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011826:	b2db      	uxtb	r3, r3
 8011828:	461a      	mov	r2, r3
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011832:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8011834:	e067      	b.n	8011906 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801183a:	b2db      	uxtb	r3, r3
 801183c:	f043 0301 	orr.w	r3, r3, #1
 8011840:	b2da      	uxtb	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	611a      	str	r2, [r3, #16]
}
 8011848:	e05d      	b.n	8011906 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	691b      	ldr	r3, [r3, #16]
 801184e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011852:	d133      	bne.n	80118bc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801185a:	b2db      	uxtb	r3, r3
 801185c:	2b21      	cmp	r3, #33	; 0x21
 801185e:	d109      	bne.n	8011874 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011864:	b2db      	uxtb	r3, r3
 8011866:	461a      	mov	r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011870:	611a      	str	r2, [r3, #16]
 8011872:	e008      	b.n	8011886 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011878:	b2db      	uxtb	r3, r3
 801187a:	f043 0301 	orr.w	r3, r3, #1
 801187e:	b2da      	uxtb	r2, r3
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801188a:	2b00      	cmp	r3, #0
 801188c:	d004      	beq.n	8011898 <I2C_Master_SB+0x92>
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011894:	2b00      	cmp	r3, #0
 8011896:	d108      	bne.n	80118aa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801189c:	2b00      	cmp	r3, #0
 801189e:	d032      	beq.n	8011906 <I2C_Master_SB+0x100>
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d02d      	beq.n	8011906 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	685a      	ldr	r2, [r3, #4]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80118b8:	605a      	str	r2, [r3, #4]
}
 80118ba:	e024      	b.n	8011906 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d10e      	bne.n	80118e2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	11db      	asrs	r3, r3, #7
 80118cc:	b2db      	uxtb	r3, r3
 80118ce:	f003 0306 	and.w	r3, r3, #6
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	f063 030f 	orn	r3, r3, #15
 80118d8:	b2da      	uxtb	r2, r3
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	611a      	str	r2, [r3, #16]
}
 80118e0:	e011      	b.n	8011906 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d10d      	bne.n	8011906 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	11db      	asrs	r3, r3, #7
 80118f2:	b2db      	uxtb	r3, r3
 80118f4:	f003 0306 	and.w	r3, r3, #6
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	f063 030e 	orn	r3, r3, #14
 80118fe:	b2da      	uxtb	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	611a      	str	r2, [r3, #16]
}
 8011906:	bf00      	nop
 8011908:	370c      	adds	r7, #12
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr

08011912 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8011912:	b480      	push	{r7}
 8011914:	b083      	sub	sp, #12
 8011916:	af00      	add	r7, sp, #0
 8011918:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801191e:	b2da      	uxtb	r2, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801192a:	2b00      	cmp	r3, #0
 801192c:	d004      	beq.n	8011938 <I2C_Master_ADD10+0x26>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011934:	2b00      	cmp	r3, #0
 8011936:	d108      	bne.n	801194a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00c      	beq.n	801195a <I2C_Master_ADD10+0x48>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011946:	2b00      	cmp	r3, #0
 8011948:	d007      	beq.n	801195a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	685a      	ldr	r2, [r3, #4]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011958:	605a      	str	r2, [r3, #4]
  }
}
 801195a:	bf00      	nop
 801195c:	370c      	adds	r7, #12
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr

08011966 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8011966:	b480      	push	{r7}
 8011968:	b091      	sub	sp, #68	; 0x44
 801196a:	af00      	add	r7, sp, #0
 801196c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011974:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801197c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011982:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801198a:	b2db      	uxtb	r3, r3
 801198c:	2b22      	cmp	r3, #34	; 0x22
 801198e:	f040 8169 	bne.w	8011c64 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011996:	2b00      	cmp	r3, #0
 8011998:	d10f      	bne.n	80119ba <I2C_Master_ADDR+0x54>
 801199a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801199e:	2b40      	cmp	r3, #64	; 0x40
 80119a0:	d10b      	bne.n	80119ba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80119a2:	2300      	movs	r3, #0
 80119a4:	633b      	str	r3, [r7, #48]	; 0x30
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	695b      	ldr	r3, [r3, #20]
 80119ac:	633b      	str	r3, [r7, #48]	; 0x30
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	699b      	ldr	r3, [r3, #24]
 80119b4:	633b      	str	r3, [r7, #48]	; 0x30
 80119b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b8:	e160      	b.n	8011c7c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d11d      	bne.n	80119fe <I2C_Master_ADDR+0x98>
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	691b      	ldr	r3, [r3, #16]
 80119c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80119ca:	d118      	bne.n	80119fe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80119cc:	2300      	movs	r3, #0
 80119ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	695b      	ldr	r3, [r3, #20]
 80119d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	699b      	ldr	r3, [r3, #24]
 80119de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	681a      	ldr	r2, [r3, #0]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80119f0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119f6:	1c5a      	adds	r2, r3, #1
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	651a      	str	r2, [r3, #80]	; 0x50
 80119fc:	e13e      	b.n	8011c7c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a02:	b29b      	uxth	r3, r3
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d113      	bne.n	8011a30 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011a08:	2300      	movs	r3, #0
 8011a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	695b      	ldr	r3, [r3, #20]
 8011a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	699b      	ldr	r3, [r3, #24]
 8011a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	681a      	ldr	r2, [r3, #0]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011a2c:	601a      	str	r2, [r3, #0]
 8011a2e:	e115      	b.n	8011c5c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	f040 808a 	bne.w	8011b50 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8011a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011a42:	d137      	bne.n	8011ab4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011a52:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a62:	d113      	bne.n	8011a8c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	681a      	ldr	r2, [r3, #0]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011a72:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011a74:	2300      	movs	r3, #0
 8011a76:	627b      	str	r3, [r7, #36]	; 0x24
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	695b      	ldr	r3, [r3, #20]
 8011a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	699b      	ldr	r3, [r3, #24]
 8011a86:	627b      	str	r3, [r7, #36]	; 0x24
 8011a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8a:	e0e7      	b.n	8011c5c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	623b      	str	r3, [r7, #32]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	695b      	ldr	r3, [r3, #20]
 8011a96:	623b      	str	r3, [r7, #32]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	699b      	ldr	r3, [r3, #24]
 8011a9e:	623b      	str	r3, [r7, #32]
 8011aa0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011ab0:	601a      	str	r2, [r3, #0]
 8011ab2:	e0d3      	b.n	8011c5c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8011ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab6:	2b08      	cmp	r3, #8
 8011ab8:	d02e      	beq.n	8011b18 <I2C_Master_ADDR+0x1b2>
 8011aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011abc:	2b20      	cmp	r3, #32
 8011abe:	d02b      	beq.n	8011b18 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8011ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ac2:	2b12      	cmp	r3, #18
 8011ac4:	d102      	bne.n	8011acc <I2C_Master_ADDR+0x166>
 8011ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d125      	bne.n	8011b18 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8011acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ace:	2b04      	cmp	r3, #4
 8011ad0:	d00e      	beq.n	8011af0 <I2C_Master_ADDR+0x18a>
 8011ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad4:	2b02      	cmp	r3, #2
 8011ad6:	d00b      	beq.n	8011af0 <I2C_Master_ADDR+0x18a>
 8011ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ada:	2b10      	cmp	r3, #16
 8011adc:	d008      	beq.n	8011af0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	681a      	ldr	r2, [r3, #0]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011aec:	601a      	str	r2, [r3, #0]
 8011aee:	e007      	b.n	8011b00 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011afe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011b00:	2300      	movs	r3, #0
 8011b02:	61fb      	str	r3, [r7, #28]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	695b      	ldr	r3, [r3, #20]
 8011b0a:	61fb      	str	r3, [r7, #28]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	699b      	ldr	r3, [r3, #24]
 8011b12:	61fb      	str	r3, [r7, #28]
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	e0a1      	b.n	8011c5c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011b26:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011b28:	2300      	movs	r3, #0
 8011b2a:	61bb      	str	r3, [r7, #24]
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	695b      	ldr	r3, [r3, #20]
 8011b32:	61bb      	str	r3, [r7, #24]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	699b      	ldr	r3, [r3, #24]
 8011b3a:	61bb      	str	r3, [r7, #24]
 8011b3c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	681a      	ldr	r2, [r3, #0]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011b4c:	601a      	str	r2, [r3, #0]
 8011b4e:	e085      	b.n	8011c5c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	2b02      	cmp	r3, #2
 8011b58:	d14d      	bne.n	8011bf6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8011b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b5c:	2b04      	cmp	r3, #4
 8011b5e:	d016      	beq.n	8011b8e <I2C_Master_ADDR+0x228>
 8011b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b62:	2b02      	cmp	r3, #2
 8011b64:	d013      	beq.n	8011b8e <I2C_Master_ADDR+0x228>
 8011b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b68:	2b10      	cmp	r3, #16
 8011b6a:	d010      	beq.n	8011b8e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	681a      	ldr	r2, [r3, #0]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011b7a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011b8a:	601a      	str	r2, [r3, #0]
 8011b8c:	e007      	b.n	8011b9e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	681a      	ldr	r2, [r3, #0]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011b9c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	685b      	ldr	r3, [r3, #4]
 8011ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011bac:	d117      	bne.n	8011bde <I2C_Master_ADDR+0x278>
 8011bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011bb4:	d00b      	beq.n	8011bce <I2C_Master_ADDR+0x268>
 8011bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d008      	beq.n	8011bce <I2C_Master_ADDR+0x268>
 8011bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bbe:	2b08      	cmp	r3, #8
 8011bc0:	d005      	beq.n	8011bce <I2C_Master_ADDR+0x268>
 8011bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc4:	2b10      	cmp	r3, #16
 8011bc6:	d002      	beq.n	8011bce <I2C_Master_ADDR+0x268>
 8011bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bca:	2b20      	cmp	r3, #32
 8011bcc:	d107      	bne.n	8011bde <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	685a      	ldr	r2, [r3, #4]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011bdc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011bde:	2300      	movs	r3, #0
 8011be0:	617b      	str	r3, [r7, #20]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	695b      	ldr	r3, [r3, #20]
 8011be8:	617b      	str	r3, [r7, #20]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	699b      	ldr	r3, [r3, #24]
 8011bf0:	617b      	str	r3, [r7, #20]
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	e032      	b.n	8011c5c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	681a      	ldr	r2, [r3, #0]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011c04:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c14:	d117      	bne.n	8011c46 <I2C_Master_ADDR+0x2e0>
 8011c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011c1c:	d00b      	beq.n	8011c36 <I2C_Master_ADDR+0x2d0>
 8011c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	d008      	beq.n	8011c36 <I2C_Master_ADDR+0x2d0>
 8011c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c26:	2b08      	cmp	r3, #8
 8011c28:	d005      	beq.n	8011c36 <I2C_Master_ADDR+0x2d0>
 8011c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2c:	2b10      	cmp	r3, #16
 8011c2e:	d002      	beq.n	8011c36 <I2C_Master_ADDR+0x2d0>
 8011c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c32:	2b20      	cmp	r3, #32
 8011c34:	d107      	bne.n	8011c46 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	685a      	ldr	r2, [r3, #4]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011c44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011c46:	2300      	movs	r3, #0
 8011c48:	613b      	str	r3, [r7, #16]
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	695b      	ldr	r3, [r3, #20]
 8011c50:	613b      	str	r3, [r7, #16]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	699b      	ldr	r3, [r3, #24]
 8011c58:	613b      	str	r3, [r7, #16]
 8011c5a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8011c62:	e00b      	b.n	8011c7c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011c64:	2300      	movs	r3, #0
 8011c66:	60fb      	str	r3, [r7, #12]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	695b      	ldr	r3, [r3, #20]
 8011c6e:	60fb      	str	r3, [r7, #12]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	699b      	ldr	r3, [r3, #24]
 8011c76:	60fb      	str	r3, [r7, #12]
 8011c78:	68fb      	ldr	r3, [r7, #12]
}
 8011c7a:	e7ff      	b.n	8011c7c <I2C_Master_ADDR+0x316>
 8011c7c:	bf00      	nop
 8011c7e:	3744      	adds	r7, #68	; 0x44
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr

08011c88 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011c96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d02b      	beq.n	8011cfa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca6:	781a      	ldrb	r2, [r3, #0]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cb2:	1c5a      	adds	r2, r3, #1
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	3b01      	subs	r3, #1
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d114      	bne.n	8011cfa <I2C_SlaveTransmit_TXE+0x72>
 8011cd0:	7bfb      	ldrb	r3, [r7, #15]
 8011cd2:	2b29      	cmp	r3, #41	; 0x29
 8011cd4:	d111      	bne.n	8011cfa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	685a      	ldr	r2, [r3, #4]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011ce4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2221      	movs	r2, #33	; 0x21
 8011cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2228      	movs	r2, #40	; 0x28
 8011cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ff f9cb 	bl	8011090 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8011cfa:	bf00      	nop
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8011d02:	b480      	push	{r7}
 8011d04:	b083      	sub	sp, #12
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d011      	beq.n	8011d38 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d18:	781a      	ldrb	r2, [r3, #0]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d24:	1c5a      	adds	r2, r3, #1
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	3b01      	subs	r3, #1
 8011d32:	b29a      	uxth	r2, r3
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8011d38:	bf00      	nop
 8011d3a:	370c      	adds	r7, #12
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr

08011d44 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d02c      	beq.n	8011db8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	691a      	ldr	r2, [r3, #16]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d68:	b2d2      	uxtb	r2, r2
 8011d6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d70:	1c5a      	adds	r2, r3, #1
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	3b01      	subs	r3, #1
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d114      	bne.n	8011db8 <I2C_SlaveReceive_RXNE+0x74>
 8011d8e:	7bfb      	ldrb	r3, [r7, #15]
 8011d90:	2b2a      	cmp	r3, #42	; 0x2a
 8011d92:	d111      	bne.n	8011db8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	685a      	ldr	r2, [r3, #4]
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011da2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2222      	movs	r2, #34	; 0x22
 8011da8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2228      	movs	r2, #40	; 0x28
 8011dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ff f976 	bl	80110a4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8011db8:	bf00      	nop
 8011dba:	3710      	adds	r7, #16
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011dcc:	b29b      	uxth	r3, r3
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d012      	beq.n	8011df8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	691a      	ldr	r2, [r3, #16]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ddc:	b2d2      	uxtb	r2, r2
 8011dde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de4:	1c5a      	adds	r2, r3, #1
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	3b01      	subs	r3, #1
 8011df2:	b29a      	uxth	r2, r3
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8011df8:	bf00      	nop
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011e1e:	2b28      	cmp	r3, #40	; 0x28
 8011e20:	d125      	bne.n	8011e6e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	685a      	ldr	r2, [r3, #4]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011e30:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	f003 0304 	and.w	r3, r3, #4
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d101      	bne.n	8011e40 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d103      	bne.n	8011e52 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	81bb      	strh	r3, [r7, #12]
 8011e50:	e002      	b.n	8011e58 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	699b      	ldr	r3, [r3, #24]
 8011e56:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8011e60:	89ba      	ldrh	r2, [r7, #12]
 8011e62:	7bfb      	ldrb	r3, [r7, #15]
 8011e64:	4619      	mov	r1, r3
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7ff f926 	bl	80110b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011e6c:	e00e      	b.n	8011e8c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011e6e:	2300      	movs	r3, #0
 8011e70:	60bb      	str	r3, [r7, #8]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	695b      	ldr	r3, [r3, #20]
 8011e78:	60bb      	str	r3, [r7, #8]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	699b      	ldr	r3, [r3, #24]
 8011e80:	60bb      	str	r3, [r7, #8]
 8011e82:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2200      	movs	r2, #0
 8011e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8011e8c:	bf00      	nop
 8011e8e:	3710      	adds	r7, #16
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b084      	sub	sp, #16
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011ea2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	685a      	ldr	r2, [r3, #4]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011eb2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	60bb      	str	r3, [r7, #8]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	695b      	ldr	r3, [r3, #20]
 8011ebe:	60bb      	str	r3, [r7, #8]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	681a      	ldr	r2, [r3, #0]
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	f042 0201 	orr.w	r2, r2, #1
 8011ece:	601a      	str	r2, [r3, #0]
 8011ed0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	681a      	ldr	r2, [r3, #0]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011ee0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ef0:	d172      	bne.n	8011fd8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011ef2:	7bfb      	ldrb	r3, [r7, #15]
 8011ef4:	2b22      	cmp	r3, #34	; 0x22
 8011ef6:	d002      	beq.n	8011efe <I2C_Slave_STOPF+0x6a>
 8011ef8:	7bfb      	ldrb	r3, [r7, #15]
 8011efa:	2b2a      	cmp	r3, #42	; 0x2a
 8011efc:	d135      	bne.n	8011f6a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	b29a      	uxth	r2, r3
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d005      	beq.n	8011f22 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f1a:	f043 0204 	orr.w	r2, r3, #4
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	685a      	ldr	r2, [r3, #4]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011f30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7fe f829 	bl	800ff8e <HAL_DMA_GetState>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	2b01      	cmp	r3, #1
 8011f40:	d049      	beq.n	8011fd6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f46:	4a69      	ldr	r2, [pc, #420]	; (80120ec <I2C_Slave_STOPF+0x258>)
 8011f48:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7fd fffb 	bl	800ff4a <HAL_DMA_Abort_IT>
 8011f54:	4603      	mov	r3, r0
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d03d      	beq.n	8011fd6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f60:	687a      	ldr	r2, [r7, #4]
 8011f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011f64:	4610      	mov	r0, r2
 8011f66:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011f68:	e035      	b.n	8011fd6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d005      	beq.n	8011f8e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f86:	f043 0204 	orr.w	r2, r3, #4
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	685a      	ldr	r2, [r3, #4]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011f9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7fd fff3 	bl	800ff8e <HAL_DMA_GetState>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d014      	beq.n	8011fd8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fb2:	4a4e      	ldr	r2, [pc, #312]	; (80120ec <I2C_Slave_STOPF+0x258>)
 8011fb4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fd ffc5 	bl	800ff4a <HAL_DMA_Abort_IT>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d008      	beq.n	8011fd8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fcc:	687a      	ldr	r2, [r7, #4]
 8011fce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011fd0:	4610      	mov	r0, r2
 8011fd2:	4798      	blx	r3
 8011fd4:	e000      	b.n	8011fd8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011fd6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fdc:	b29b      	uxth	r3, r3
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d03e      	beq.n	8012060 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	695b      	ldr	r3, [r3, #20]
 8011fe8:	f003 0304 	and.w	r3, r3, #4
 8011fec:	2b04      	cmp	r3, #4
 8011fee:	d112      	bne.n	8012016 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	691a      	ldr	r2, [r3, #16]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ffa:	b2d2      	uxtb	r2, r2
 8011ffc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012002:	1c5a      	adds	r2, r3, #1
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801200c:	b29b      	uxth	r3, r3
 801200e:	3b01      	subs	r3, #1
 8012010:	b29a      	uxth	r2, r3
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	695b      	ldr	r3, [r3, #20]
 801201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012020:	2b40      	cmp	r3, #64	; 0x40
 8012022:	d112      	bne.n	801204a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	691a      	ldr	r2, [r3, #16]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801202e:	b2d2      	uxtb	r2, r2
 8012030:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012036:	1c5a      	adds	r2, r3, #1
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012040:	b29b      	uxth	r3, r3
 8012042:	3b01      	subs	r3, #1
 8012044:	b29a      	uxth	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801204e:	b29b      	uxth	r3, r3
 8012050:	2b00      	cmp	r3, #0
 8012052:	d005      	beq.n	8012060 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012058:	f043 0204 	orr.w	r2, r3, #4
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012064:	2b00      	cmp	r3, #0
 8012066:	d003      	beq.n	8012070 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f000 f8b7 	bl	80121dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801206e:	e039      	b.n	80120e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8012070:	7bfb      	ldrb	r3, [r7, #15]
 8012072:	2b2a      	cmp	r3, #42	; 0x2a
 8012074:	d109      	bne.n	801208a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2200      	movs	r2, #0
 801207a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2228      	movs	r2, #40	; 0x28
 8012080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f7ff f80d 	bl	80110a4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012090:	b2db      	uxtb	r3, r3
 8012092:	2b28      	cmp	r3, #40	; 0x28
 8012094:	d111      	bne.n	80120ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	4a15      	ldr	r2, [pc, #84]	; (80120f0 <I2C_Slave_STOPF+0x25c>)
 801209a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2200      	movs	r2, #0
 80120a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2220      	movs	r2, #32
 80120a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2200      	movs	r2, #0
 80120ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f7ff f80e 	bl	80110d4 <HAL_I2C_ListenCpltCallback>
}
 80120b8:	e014      	b.n	80120e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120be:	2b22      	cmp	r3, #34	; 0x22
 80120c0:	d002      	beq.n	80120c8 <I2C_Slave_STOPF+0x234>
 80120c2:	7bfb      	ldrb	r3, [r7, #15]
 80120c4:	2b22      	cmp	r3, #34	; 0x22
 80120c6:	d10d      	bne.n	80120e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2220      	movs	r2, #32
 80120d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	2200      	movs	r2, #0
 80120da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f7fe ffe0 	bl	80110a4 <HAL_I2C_SlaveRxCpltCallback>
}
 80120e4:	bf00      	nop
 80120e6:	3710      	adds	r7, #16
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	0801273d 	.word	0x0801273d
 80120f0:	ffff0000 	.word	0xffff0000

080120f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b084      	sub	sp, #16
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012102:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012108:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	2b08      	cmp	r3, #8
 801210e:	d002      	beq.n	8012116 <I2C_Slave_AF+0x22>
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	2b20      	cmp	r3, #32
 8012114:	d129      	bne.n	801216a <I2C_Slave_AF+0x76>
 8012116:	7bfb      	ldrb	r3, [r7, #15]
 8012118:	2b28      	cmp	r3, #40	; 0x28
 801211a:	d126      	bne.n	801216a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	4a2e      	ldr	r2, [pc, #184]	; (80121d8 <I2C_Slave_AF+0xe4>)
 8012120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	685a      	ldr	r2, [r3, #4]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012130:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801213a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	681a      	ldr	r2, [r3, #0]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801214a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2200      	movs	r2, #0
 8012150:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2220      	movs	r2, #32
 8012156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2200      	movs	r2, #0
 801215e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f7fe ffb6 	bl	80110d4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8012168:	e031      	b.n	80121ce <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801216a:	7bfb      	ldrb	r3, [r7, #15]
 801216c:	2b21      	cmp	r3, #33	; 0x21
 801216e:	d129      	bne.n	80121c4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	4a19      	ldr	r2, [pc, #100]	; (80121d8 <I2C_Slave_AF+0xe4>)
 8012174:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2221      	movs	r2, #33	; 0x21
 801217a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2220      	movs	r2, #32
 8012180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	685a      	ldr	r2, [r3, #4]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801219a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80121a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80121b4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f7fe fa22 	bl	8010600 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7fe ff67 	bl	8011090 <HAL_I2C_SlaveTxCpltCallback>
}
 80121c2:	e004      	b.n	80121ce <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80121cc:	615a      	str	r2, [r3, #20]
}
 80121ce:	bf00      	nop
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	ffff0000 	.word	0xffff0000

080121dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b084      	sub	sp, #16
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80121ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80121f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80121f4:	7bbb      	ldrb	r3, [r7, #14]
 80121f6:	2b10      	cmp	r3, #16
 80121f8:	d002      	beq.n	8012200 <I2C_ITError+0x24>
 80121fa:	7bbb      	ldrb	r3, [r7, #14]
 80121fc:	2b40      	cmp	r3, #64	; 0x40
 80121fe:	d10a      	bne.n	8012216 <I2C_ITError+0x3a>
 8012200:	7bfb      	ldrb	r3, [r7, #15]
 8012202:	2b22      	cmp	r3, #34	; 0x22
 8012204:	d107      	bne.n	8012216 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012214:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012216:	7bfb      	ldrb	r3, [r7, #15]
 8012218:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801221c:	2b28      	cmp	r3, #40	; 0x28
 801221e:	d107      	bne.n	8012230 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2228      	movs	r2, #40	; 0x28
 801222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801222e:	e015      	b.n	801225c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801223a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801223e:	d00a      	beq.n	8012256 <I2C_ITError+0x7a>
 8012240:	7bfb      	ldrb	r3, [r7, #15]
 8012242:	2b60      	cmp	r3, #96	; 0x60
 8012244:	d007      	beq.n	8012256 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2220      	movs	r2, #32
 801224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2200      	movs	r2, #0
 8012252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801226a:	d162      	bne.n	8012332 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	685a      	ldr	r2, [r3, #4]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801227a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012284:	b2db      	uxtb	r3, r3
 8012286:	2b01      	cmp	r3, #1
 8012288:	d020      	beq.n	80122cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801228e:	4a6a      	ldr	r2, [pc, #424]	; (8012438 <I2C_ITError+0x25c>)
 8012290:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012296:	4618      	mov	r0, r3
 8012298:	f7fd fe57 	bl	800ff4a <HAL_DMA_Abort_IT>
 801229c:	4603      	mov	r3, r0
 801229e:	2b00      	cmp	r3, #0
 80122a0:	f000 8089 	beq.w	80123b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	681a      	ldr	r2, [r3, #0]
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	f022 0201 	bic.w	r2, r2, #1
 80122b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2220      	movs	r2, #32
 80122b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122c2:	687a      	ldr	r2, [r7, #4]
 80122c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80122c6:	4610      	mov	r0, r2
 80122c8:	4798      	blx	r3
 80122ca:	e074      	b.n	80123b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122d0:	4a59      	ldr	r2, [pc, #356]	; (8012438 <I2C_ITError+0x25c>)
 80122d2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fd fe36 	bl	800ff4a <HAL_DMA_Abort_IT>
 80122de:	4603      	mov	r3, r0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d068      	beq.n	80123b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	695b      	ldr	r3, [r3, #20]
 80122ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122ee:	2b40      	cmp	r3, #64	; 0x40
 80122f0:	d10b      	bne.n	801230a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	691a      	ldr	r2, [r3, #16]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122fc:	b2d2      	uxtb	r2, r2
 80122fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012304:	1c5a      	adds	r2, r3, #1
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	f022 0201 	bic.w	r2, r2, #1
 8012318:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2220      	movs	r2, #32
 801231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012328:	687a      	ldr	r2, [r7, #4]
 801232a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801232c:	4610      	mov	r0, r2
 801232e:	4798      	blx	r3
 8012330:	e041      	b.n	80123b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012338:	b2db      	uxtb	r3, r3
 801233a:	2b60      	cmp	r3, #96	; 0x60
 801233c:	d125      	bne.n	801238a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2220      	movs	r2, #32
 8012342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2200      	movs	r2, #0
 801234a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	695b      	ldr	r3, [r3, #20]
 8012352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012356:	2b40      	cmp	r3, #64	; 0x40
 8012358:	d10b      	bne.n	8012372 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	691a      	ldr	r2, [r3, #16]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012364:	b2d2      	uxtb	r2, r2
 8012366:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801236c:	1c5a      	adds	r2, r3, #1
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f022 0201 	bic.w	r2, r2, #1
 8012380:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f7fe fece 	bl	8011124 <HAL_I2C_AbortCpltCallback>
 8012388:	e015      	b.n	80123b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	695b      	ldr	r3, [r3, #20]
 8012390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012394:	2b40      	cmp	r3, #64	; 0x40
 8012396:	d10b      	bne.n	80123b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	691a      	ldr	r2, [r3, #16]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123a2:	b2d2      	uxtb	r2, r2
 80123a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123aa:	1c5a      	adds	r2, r3, #1
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f7fe fead 	bl	8011110 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	f003 0301 	and.w	r3, r3, #1
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d10e      	bne.n	80123e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d109      	bne.n	80123e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d104      	bne.n	80123e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d007      	beq.n	80123f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	685a      	ldr	r2, [r3, #4]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80123f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80123fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012400:	f003 0304 	and.w	r3, r3, #4
 8012404:	2b04      	cmp	r3, #4
 8012406:	d113      	bne.n	8012430 <I2C_ITError+0x254>
 8012408:	7bfb      	ldrb	r3, [r7, #15]
 801240a:	2b28      	cmp	r3, #40	; 0x28
 801240c:	d110      	bne.n	8012430 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	4a0a      	ldr	r2, [pc, #40]	; (801243c <I2C_ITError+0x260>)
 8012412:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2220      	movs	r2, #32
 801241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2200      	movs	r2, #0
 8012426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f7fe fe52 	bl	80110d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012430:	bf00      	nop
 8012432:	3710      	adds	r7, #16
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}
 8012438:	0801273d 	.word	0x0801273d
 801243c:	ffff0000 	.word	0xffff0000

08012440 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b088      	sub	sp, #32
 8012444:	af02      	add	r7, sp, #8
 8012446:	60f8      	str	r0, [r7, #12]
 8012448:	4608      	mov	r0, r1
 801244a:	4611      	mov	r1, r2
 801244c:	461a      	mov	r2, r3
 801244e:	4603      	mov	r3, r0
 8012450:	817b      	strh	r3, [r7, #10]
 8012452:	460b      	mov	r3, r1
 8012454:	813b      	strh	r3, [r7, #8]
 8012456:	4613      	mov	r3, r2
 8012458:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	681a      	ldr	r2, [r3, #0]
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012468:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	6a3b      	ldr	r3, [r7, #32]
 8012470:	2200      	movs	r2, #0
 8012472:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012476:	68f8      	ldr	r0, [r7, #12]
 8012478:	f000 fa08 	bl	801288c <I2C_WaitOnFlagUntilTimeout>
 801247c:	4603      	mov	r3, r0
 801247e:	2b00      	cmp	r3, #0
 8012480:	d00d      	beq.n	801249e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801248c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012490:	d103      	bne.n	801249a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012498:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801249a:	2303      	movs	r3, #3
 801249c:	e05f      	b.n	801255e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801249e:	897b      	ldrh	r3, [r7, #10]
 80124a0:	b2db      	uxtb	r3, r3
 80124a2:	461a      	mov	r2, r3
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80124ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80124ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b0:	6a3a      	ldr	r2, [r7, #32]
 80124b2:	492d      	ldr	r1, [pc, #180]	; (8012568 <I2C_RequestMemoryWrite+0x128>)
 80124b4:	68f8      	ldr	r0, [r7, #12]
 80124b6:	f000 fa63 	bl	8012980 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80124ba:	4603      	mov	r3, r0
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d001      	beq.n	80124c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80124c0:	2301      	movs	r3, #1
 80124c2:	e04c      	b.n	801255e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80124c4:	2300      	movs	r3, #0
 80124c6:	617b      	str	r3, [r7, #20]
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	695b      	ldr	r3, [r3, #20]
 80124ce:	617b      	str	r3, [r7, #20]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	699b      	ldr	r3, [r3, #24]
 80124d6:	617b      	str	r3, [r7, #20]
 80124d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80124da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124dc:	6a39      	ldr	r1, [r7, #32]
 80124de:	68f8      	ldr	r0, [r7, #12]
 80124e0:	f000 faee 	bl	8012ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 80124e4:	4603      	mov	r3, r0
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d00d      	beq.n	8012506 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124ee:	2b04      	cmp	r3, #4
 80124f0:	d107      	bne.n	8012502 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	681a      	ldr	r2, [r3, #0]
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012500:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8012502:	2301      	movs	r3, #1
 8012504:	e02b      	b.n	801255e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012506:	88fb      	ldrh	r3, [r7, #6]
 8012508:	2b01      	cmp	r3, #1
 801250a:	d105      	bne.n	8012518 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801250c:	893b      	ldrh	r3, [r7, #8]
 801250e:	b2da      	uxtb	r2, r3
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	611a      	str	r2, [r3, #16]
 8012516:	e021      	b.n	801255c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8012518:	893b      	ldrh	r3, [r7, #8]
 801251a:	0a1b      	lsrs	r3, r3, #8
 801251c:	b29b      	uxth	r3, r3
 801251e:	b2da      	uxtb	r2, r3
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012528:	6a39      	ldr	r1, [r7, #32]
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	f000 fac8 	bl	8012ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 8012530:	4603      	mov	r3, r0
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00d      	beq.n	8012552 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801253a:	2b04      	cmp	r3, #4
 801253c:	d107      	bne.n	801254e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801254c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801254e:	2301      	movs	r3, #1
 8012550:	e005      	b.n	801255e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8012552:	893b      	ldrh	r3, [r7, #8]
 8012554:	b2da      	uxtb	r2, r3
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801255c:	2300      	movs	r3, #0
}
 801255e:	4618      	mov	r0, r3
 8012560:	3718      	adds	r7, #24
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	00010002 	.word	0x00010002

0801256c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b088      	sub	sp, #32
 8012570:	af02      	add	r7, sp, #8
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	4608      	mov	r0, r1
 8012576:	4611      	mov	r1, r2
 8012578:	461a      	mov	r2, r3
 801257a:	4603      	mov	r3, r0
 801257c:	817b      	strh	r3, [r7, #10]
 801257e:	460b      	mov	r3, r1
 8012580:	813b      	strh	r3, [r7, #8]
 8012582:	4613      	mov	r3, r2
 8012584:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012594:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80125a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80125a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a8:	9300      	str	r3, [sp, #0]
 80125aa:	6a3b      	ldr	r3, [r7, #32]
 80125ac:	2200      	movs	r2, #0
 80125ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80125b2:	68f8      	ldr	r0, [r7, #12]
 80125b4:	f000 f96a 	bl	801288c <I2C_WaitOnFlagUntilTimeout>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d00d      	beq.n	80125da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125cc:	d103      	bne.n	80125d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80125d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80125d6:	2303      	movs	r3, #3
 80125d8:	e0aa      	b.n	8012730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80125da:	897b      	ldrh	r3, [r7, #10]
 80125dc:	b2db      	uxtb	r3, r3
 80125de:	461a      	mov	r2, r3
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80125e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80125ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ec:	6a3a      	ldr	r2, [r7, #32]
 80125ee:	4952      	ldr	r1, [pc, #328]	; (8012738 <I2C_RequestMemoryRead+0x1cc>)
 80125f0:	68f8      	ldr	r0, [r7, #12]
 80125f2:	f000 f9c5 	bl	8012980 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d001      	beq.n	8012600 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80125fc:	2301      	movs	r3, #1
 80125fe:	e097      	b.n	8012730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012600:	2300      	movs	r3, #0
 8012602:	617b      	str	r3, [r7, #20]
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	695b      	ldr	r3, [r3, #20]
 801260a:	617b      	str	r3, [r7, #20]
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	699b      	ldr	r3, [r3, #24]
 8012612:	617b      	str	r3, [r7, #20]
 8012614:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012618:	6a39      	ldr	r1, [r7, #32]
 801261a:	68f8      	ldr	r0, [r7, #12]
 801261c:	f000 fa50 	bl	8012ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 8012620:	4603      	mov	r3, r0
 8012622:	2b00      	cmp	r3, #0
 8012624:	d00d      	beq.n	8012642 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801262a:	2b04      	cmp	r3, #4
 801262c:	d107      	bne.n	801263e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	681a      	ldr	r2, [r3, #0]
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801263c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801263e:	2301      	movs	r3, #1
 8012640:	e076      	b.n	8012730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012642:	88fb      	ldrh	r3, [r7, #6]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d105      	bne.n	8012654 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8012648:	893b      	ldrh	r3, [r7, #8]
 801264a:	b2da      	uxtb	r2, r3
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	611a      	str	r2, [r3, #16]
 8012652:	e021      	b.n	8012698 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8012654:	893b      	ldrh	r3, [r7, #8]
 8012656:	0a1b      	lsrs	r3, r3, #8
 8012658:	b29b      	uxth	r3, r3
 801265a:	b2da      	uxtb	r2, r3
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012664:	6a39      	ldr	r1, [r7, #32]
 8012666:	68f8      	ldr	r0, [r7, #12]
 8012668:	f000 fa2a 	bl	8012ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 801266c:	4603      	mov	r3, r0
 801266e:	2b00      	cmp	r3, #0
 8012670:	d00d      	beq.n	801268e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012676:	2b04      	cmp	r3, #4
 8012678:	d107      	bne.n	801268a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012688:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801268a:	2301      	movs	r3, #1
 801268c:	e050      	b.n	8012730 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801268e:	893b      	ldrh	r3, [r7, #8]
 8012690:	b2da      	uxtb	r2, r3
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801269a:	6a39      	ldr	r1, [r7, #32]
 801269c:	68f8      	ldr	r0, [r7, #12]
 801269e:	f000 fa0f 	bl	8012ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 80126a2:	4603      	mov	r3, r0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d00d      	beq.n	80126c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126ac:	2b04      	cmp	r3, #4
 80126ae:	d107      	bne.n	80126c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80126be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80126c0:	2301      	movs	r3, #1
 80126c2:	e035      	b.n	8012730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80126d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80126d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d6:	9300      	str	r3, [sp, #0]
 80126d8:	6a3b      	ldr	r3, [r7, #32]
 80126da:	2200      	movs	r2, #0
 80126dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80126e0:	68f8      	ldr	r0, [r7, #12]
 80126e2:	f000 f8d3 	bl	801288c <I2C_WaitOnFlagUntilTimeout>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d00d      	beq.n	8012708 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80126fa:	d103      	bne.n	8012704 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012702:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012704:	2303      	movs	r3, #3
 8012706:	e013      	b.n	8012730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8012708:	897b      	ldrh	r3, [r7, #10]
 801270a:	b2db      	uxtb	r3, r3
 801270c:	f043 0301 	orr.w	r3, r3, #1
 8012710:	b2da      	uxtb	r2, r3
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271a:	6a3a      	ldr	r2, [r7, #32]
 801271c:	4906      	ldr	r1, [pc, #24]	; (8012738 <I2C_RequestMemoryRead+0x1cc>)
 801271e:	68f8      	ldr	r0, [r7, #12]
 8012720:	f000 f92e 	bl	8012980 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012724:	4603      	mov	r3, r0
 8012726:	2b00      	cmp	r3, #0
 8012728:	d001      	beq.n	801272e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801272a:	2301      	movs	r3, #1
 801272c:	e000      	b.n	8012730 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801272e:	2300      	movs	r3, #0
}
 8012730:	4618      	mov	r0, r3
 8012732:	3718      	adds	r7, #24
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}
 8012738:	00010002 	.word	0x00010002

0801273c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b086      	sub	sp, #24
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012744:	2300      	movs	r3, #0
 8012746:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801274c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012754:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8012756:	4b4b      	ldr	r3, [pc, #300]	; (8012884 <I2C_DMAAbort+0x148>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	08db      	lsrs	r3, r3, #3
 801275c:	4a4a      	ldr	r2, [pc, #296]	; (8012888 <I2C_DMAAbort+0x14c>)
 801275e:	fba2 2303 	umull	r2, r3, r2, r3
 8012762:	0a1a      	lsrs	r2, r3, #8
 8012764:	4613      	mov	r3, r2
 8012766:	009b      	lsls	r3, r3, #2
 8012768:	4413      	add	r3, r2
 801276a:	00da      	lsls	r2, r3, #3
 801276c:	1ad3      	subs	r3, r2, r3
 801276e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d106      	bne.n	8012784 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801277a:	f043 0220 	orr.w	r2, r3, #32
 801277e:	697b      	ldr	r3, [r7, #20]
 8012780:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8012782:	e00a      	b.n	801279a <I2C_DMAAbort+0x5e>
    }
    count--;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	3b01      	subs	r3, #1
 8012788:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012798:	d0ea      	beq.n	8012770 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d003      	beq.n	80127aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127a6:	2200      	movs	r2, #0
 80127a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d003      	beq.n	80127ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127b6:	2200      	movs	r2, #0
 80127b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	681a      	ldr	r2, [r3, #0]
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80127c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	2200      	movs	r2, #0
 80127ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d003      	beq.n	80127e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127dc:	2200      	movs	r2, #0
 80127de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d003      	beq.n	80127f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ec:	2200      	movs	r2, #0
 80127ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f022 0201 	bic.w	r2, r2, #1
 80127fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012806:	b2db      	uxtb	r3, r3
 8012808:	2b60      	cmp	r3, #96	; 0x60
 801280a:	d10e      	bne.n	801282a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	2220      	movs	r2, #32
 8012810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	2200      	movs	r2, #0
 8012818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	2200      	movs	r2, #0
 8012820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012822:	6978      	ldr	r0, [r7, #20]
 8012824:	f7fe fc7e 	bl	8011124 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012828:	e027      	b.n	801287a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801282a:	7cfb      	ldrb	r3, [r7, #19]
 801282c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012830:	2b28      	cmp	r3, #40	; 0x28
 8012832:	d117      	bne.n	8012864 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	f042 0201 	orr.w	r2, r2, #1
 8012842:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012852:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	2200      	movs	r2, #0
 8012858:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	2228      	movs	r2, #40	; 0x28
 801285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012862:	e007      	b.n	8012874 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	2220      	movs	r2, #32
 8012868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	2200      	movs	r2, #0
 8012870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8012874:	6978      	ldr	r0, [r7, #20]
 8012876:	f7fe fc4b 	bl	8011110 <HAL_I2C_ErrorCallback>
}
 801287a:	bf00      	nop
 801287c:	3718      	adds	r7, #24
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	20000058 	.word	0x20000058
 8012888:	14f8b589 	.word	0x14f8b589

0801288c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b084      	sub	sp, #16
 8012890:	af00      	add	r7, sp, #0
 8012892:	60f8      	str	r0, [r7, #12]
 8012894:	60b9      	str	r1, [r7, #8]
 8012896:	603b      	str	r3, [r7, #0]
 8012898:	4613      	mov	r3, r2
 801289a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801289c:	e048      	b.n	8012930 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128a4:	d044      	beq.n	8012930 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80128a6:	f7fc fc67 	bl	800f178 <HAL_GetTick>
 80128aa:	4602      	mov	r2, r0
 80128ac:	69bb      	ldr	r3, [r7, #24]
 80128ae:	1ad3      	subs	r3, r2, r3
 80128b0:	683a      	ldr	r2, [r7, #0]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d302      	bcc.n	80128bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d139      	bne.n	8012930 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	0c1b      	lsrs	r3, r3, #16
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	2b01      	cmp	r3, #1
 80128c4:	d10d      	bne.n	80128e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	695b      	ldr	r3, [r3, #20]
 80128cc:	43da      	mvns	r2, r3
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	4013      	ands	r3, r2
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	bf0c      	ite	eq
 80128d8:	2301      	moveq	r3, #1
 80128da:	2300      	movne	r3, #0
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	461a      	mov	r2, r3
 80128e0:	e00c      	b.n	80128fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	699b      	ldr	r3, [r3, #24]
 80128e8:	43da      	mvns	r2, r3
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	4013      	ands	r3, r2
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	bf0c      	ite	eq
 80128f4:	2301      	moveq	r3, #1
 80128f6:	2300      	movne	r3, #0
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	461a      	mov	r2, r3
 80128fc:	79fb      	ldrb	r3, [r7, #7]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d116      	bne.n	8012930 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2200      	movs	r2, #0
 8012906:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2220      	movs	r2, #32
 801290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2200      	movs	r2, #0
 8012914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801291c:	f043 0220 	orr.w	r2, r3, #32
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2200      	movs	r2, #0
 8012928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 801292c:	2301      	movs	r3, #1
 801292e:	e023      	b.n	8012978 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	0c1b      	lsrs	r3, r3, #16
 8012934:	b2db      	uxtb	r3, r3
 8012936:	2b01      	cmp	r3, #1
 8012938:	d10d      	bne.n	8012956 <I2C_WaitOnFlagUntilTimeout+0xca>
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	695b      	ldr	r3, [r3, #20]
 8012940:	43da      	mvns	r2, r3
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	4013      	ands	r3, r2
 8012946:	b29b      	uxth	r3, r3
 8012948:	2b00      	cmp	r3, #0
 801294a:	bf0c      	ite	eq
 801294c:	2301      	moveq	r3, #1
 801294e:	2300      	movne	r3, #0
 8012950:	b2db      	uxtb	r3, r3
 8012952:	461a      	mov	r2, r3
 8012954:	e00c      	b.n	8012970 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	699b      	ldr	r3, [r3, #24]
 801295c:	43da      	mvns	r2, r3
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	4013      	ands	r3, r2
 8012962:	b29b      	uxth	r3, r3
 8012964:	2b00      	cmp	r3, #0
 8012966:	bf0c      	ite	eq
 8012968:	2301      	moveq	r3, #1
 801296a:	2300      	movne	r3, #0
 801296c:	b2db      	uxtb	r3, r3
 801296e:	461a      	mov	r2, r3
 8012970:	79fb      	ldrb	r3, [r7, #7]
 8012972:	429a      	cmp	r2, r3
 8012974:	d093      	beq.n	801289e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012976:	2300      	movs	r3, #0
}
 8012978:	4618      	mov	r0, r3
 801297a:	3710      	adds	r7, #16
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	60f8      	str	r0, [r7, #12]
 8012988:	60b9      	str	r1, [r7, #8]
 801298a:	607a      	str	r2, [r7, #4]
 801298c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801298e:	e071      	b.n	8012a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	695b      	ldr	r3, [r3, #20]
 8012996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801299a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801299e:	d123      	bne.n	80129e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80129ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80129b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	2200      	movs	r2, #0
 80129be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2220      	movs	r2, #32
 80129c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	2200      	movs	r2, #0
 80129cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129d4:	f043 0204 	orr.w	r2, r3, #4
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	2200      	movs	r2, #0
 80129e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80129e4:	2301      	movs	r3, #1
 80129e6:	e067      	b.n	8012ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129ee:	d041      	beq.n	8012a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80129f0:	f7fc fbc2 	bl	800f178 <HAL_GetTick>
 80129f4:	4602      	mov	r2, r0
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	1ad3      	subs	r3, r2, r3
 80129fa:	687a      	ldr	r2, [r7, #4]
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d302      	bcc.n	8012a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d136      	bne.n	8012a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	0c1b      	lsrs	r3, r3, #16
 8012a0a:	b2db      	uxtb	r3, r3
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d10c      	bne.n	8012a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	695b      	ldr	r3, [r3, #20]
 8012a16:	43da      	mvns	r2, r3
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	4013      	ands	r3, r2
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	bf14      	ite	ne
 8012a22:	2301      	movne	r3, #1
 8012a24:	2300      	moveq	r3, #0
 8012a26:	b2db      	uxtb	r3, r3
 8012a28:	e00b      	b.n	8012a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	699b      	ldr	r3, [r3, #24]
 8012a30:	43da      	mvns	r2, r3
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	4013      	ands	r3, r2
 8012a36:	b29b      	uxth	r3, r3
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	bf14      	ite	ne
 8012a3c:	2301      	movne	r3, #1
 8012a3e:	2300      	moveq	r3, #0
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d016      	beq.n	8012a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	2220      	movs	r2, #32
 8012a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	2200      	movs	r2, #0
 8012a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a60:	f043 0220 	orr.w	r2, r3, #32
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8012a70:	2301      	movs	r3, #1
 8012a72:	e021      	b.n	8012ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	0c1b      	lsrs	r3, r3, #16
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	2b01      	cmp	r3, #1
 8012a7c:	d10c      	bne.n	8012a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	695b      	ldr	r3, [r3, #20]
 8012a84:	43da      	mvns	r2, r3
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	4013      	ands	r3, r2
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	bf14      	ite	ne
 8012a90:	2301      	movne	r3, #1
 8012a92:	2300      	moveq	r3, #0
 8012a94:	b2db      	uxtb	r3, r3
 8012a96:	e00b      	b.n	8012ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	699b      	ldr	r3, [r3, #24]
 8012a9e:	43da      	mvns	r2, r3
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	4013      	ands	r3, r2
 8012aa4:	b29b      	uxth	r3, r3
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	bf14      	ite	ne
 8012aaa:	2301      	movne	r3, #1
 8012aac:	2300      	moveq	r3, #0
 8012aae:	b2db      	uxtb	r3, r3
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f47f af6d 	bne.w	8012990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8012ab6:	2300      	movs	r3, #0
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3710      	adds	r7, #16
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b084      	sub	sp, #16
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012acc:	e034      	b.n	8012b38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8012ace:	68f8      	ldr	r0, [r7, #12]
 8012ad0:	f000 f915 	bl	8012cfe <I2C_IsAcknowledgeFailed>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d001      	beq.n	8012ade <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8012ada:	2301      	movs	r3, #1
 8012adc:	e034      	b.n	8012b48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae4:	d028      	beq.n	8012b38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ae6:	f7fc fb47 	bl	800f178 <HAL_GetTick>
 8012aea:	4602      	mov	r2, r0
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	1ad3      	subs	r3, r2, r3
 8012af0:	68ba      	ldr	r2, [r7, #8]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d302      	bcc.n	8012afc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d11d      	bne.n	8012b38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	695b      	ldr	r3, [r3, #20]
 8012b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b06:	2b80      	cmp	r3, #128	; 0x80
 8012b08:	d016      	beq.n	8012b38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	2220      	movs	r2, #32
 8012b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b24:	f043 0220 	orr.w	r2, r3, #32
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8012b34:	2301      	movs	r3, #1
 8012b36:	e007      	b.n	8012b48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	695b      	ldr	r3, [r3, #20]
 8012b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b42:	2b80      	cmp	r3, #128	; 0x80
 8012b44:	d1c3      	bne.n	8012ace <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8012b46:	2300      	movs	r3, #0
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3710      	adds	r7, #16
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	60b9      	str	r1, [r7, #8]
 8012b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8012b5c:	e034      	b.n	8012bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8012b5e:	68f8      	ldr	r0, [r7, #12]
 8012b60:	f000 f8cd 	bl	8012cfe <I2C_IsAcknowledgeFailed>
 8012b64:	4603      	mov	r3, r0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d001      	beq.n	8012b6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	e034      	b.n	8012bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b74:	d028      	beq.n	8012bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012b76:	f7fc faff 	bl	800f178 <HAL_GetTick>
 8012b7a:	4602      	mov	r2, r0
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	1ad3      	subs	r3, r2, r3
 8012b80:	68ba      	ldr	r2, [r7, #8]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d302      	bcc.n	8012b8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d11d      	bne.n	8012bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	695b      	ldr	r3, [r3, #20]
 8012b92:	f003 0304 	and.w	r3, r3, #4
 8012b96:	2b04      	cmp	r3, #4
 8012b98:	d016      	beq.n	8012bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2220      	movs	r2, #32
 8012ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	2200      	movs	r2, #0
 8012bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bb4:	f043 0220 	orr.w	r2, r3, #32
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	e007      	b.n	8012bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	695b      	ldr	r3, [r3, #20]
 8012bce:	f003 0304 	and.w	r3, r3, #4
 8012bd2:	2b04      	cmp	r3, #4
 8012bd4:	d1c3      	bne.n	8012b5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8012bd6:	2300      	movs	r3, #0
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3710      	adds	r7, #16
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8012be0:	b480      	push	{r7}
 8012be2:	b085      	sub	sp, #20
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012be8:	2300      	movs	r3, #0
 8012bea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8012bec:	4b13      	ldr	r3, [pc, #76]	; (8012c3c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	08db      	lsrs	r3, r3, #3
 8012bf2:	4a13      	ldr	r2, [pc, #76]	; (8012c40 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8012bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8012bf8:	0a1a      	lsrs	r2, r3, #8
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	4413      	add	r3, r2
 8012c00:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	3b01      	subs	r3, #1
 8012c06:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d107      	bne.n	8012c1e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c12:	f043 0220 	orr.w	r2, r3, #32
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	e008      	b.n	8012c30 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c2c:	d0e9      	beq.n	8012c02 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8012c2e:	2300      	movs	r3, #0
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3714      	adds	r7, #20
 8012c34:	46bd      	mov	sp, r7
 8012c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3a:	4770      	bx	lr
 8012c3c:	20000058 	.word	0x20000058
 8012c40:	14f8b589 	.word	0x14f8b589

08012c44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	60b9      	str	r1, [r7, #8]
 8012c4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012c50:	e049      	b.n	8012ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	695b      	ldr	r3, [r3, #20]
 8012c58:	f003 0310 	and.w	r3, r3, #16
 8012c5c:	2b10      	cmp	r3, #16
 8012c5e:	d119      	bne.n	8012c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	f06f 0210 	mvn.w	r2, #16
 8012c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	2220      	movs	r2, #32
 8012c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8012c90:	2301      	movs	r3, #1
 8012c92:	e030      	b.n	8012cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012c94:	f7fc fa70 	bl	800f178 <HAL_GetTick>
 8012c98:	4602      	mov	r2, r0
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	1ad3      	subs	r3, r2, r3
 8012c9e:	68ba      	ldr	r2, [r7, #8]
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d302      	bcc.n	8012caa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d11d      	bne.n	8012ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	695b      	ldr	r3, [r3, #20]
 8012cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cb4:	2b40      	cmp	r3, #64	; 0x40
 8012cb6:	d016      	beq.n	8012ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2220      	movs	r2, #32
 8012cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cd2:	f043 0220 	orr.w	r2, r3, #32
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	e007      	b.n	8012cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	695b      	ldr	r3, [r3, #20]
 8012cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cf0:	2b40      	cmp	r3, #64	; 0x40
 8012cf2:	d1ae      	bne.n	8012c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012cf4:	2300      	movs	r3, #0
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8012cfe:	b480      	push	{r7}
 8012d00:	b083      	sub	sp, #12
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	695b      	ldr	r3, [r3, #20]
 8012d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d14:	d11b      	bne.n	8012d4e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8012d1e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2200      	movs	r2, #0
 8012d24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2220      	movs	r2, #32
 8012d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	2200      	movs	r2, #0
 8012d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d3a:	f043 0204 	orr.w	r2, r3, #4
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2200      	movs	r2, #0
 8012d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	e000      	b.n	8012d50 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8012d4e:	2300      	movs	r3, #0
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr

08012d5c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b083      	sub	sp, #12
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8012d6c:	d103      	bne.n	8012d76 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2201      	movs	r2, #1
 8012d72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8012d74:	e007      	b.n	8012d86 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d7a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8012d7e:	d102      	bne.n	8012d86 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2208      	movs	r2, #8
 8012d84:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012d86:	bf00      	nop
 8012d88:	370c      	adds	r7, #12
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d90:	4770      	bx	lr
	...

08012d94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b086      	sub	sp, #24
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d101      	bne.n	8012da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012da2:	2301      	movs	r3, #1
 8012da4:	e267      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f003 0301 	and.w	r3, r3, #1
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d075      	beq.n	8012e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012db2:	4b88      	ldr	r3, [pc, #544]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012db4:	689b      	ldr	r3, [r3, #8]
 8012db6:	f003 030c 	and.w	r3, r3, #12
 8012dba:	2b04      	cmp	r3, #4
 8012dbc:	d00c      	beq.n	8012dd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012dbe:	4b85      	ldr	r3, [pc, #532]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012dc0:	689b      	ldr	r3, [r3, #8]
 8012dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012dc6:	2b08      	cmp	r3, #8
 8012dc8:	d112      	bne.n	8012df0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012dca:	4b82      	ldr	r3, [pc, #520]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012dd6:	d10b      	bne.n	8012df0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012dd8:	4b7e      	ldr	r3, [pc, #504]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d05b      	beq.n	8012e9c <HAL_RCC_OscConfig+0x108>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	685b      	ldr	r3, [r3, #4]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d157      	bne.n	8012e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012dec:	2301      	movs	r3, #1
 8012dee:	e242      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012df8:	d106      	bne.n	8012e08 <HAL_RCC_OscConfig+0x74>
 8012dfa:	4b76      	ldr	r3, [pc, #472]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	4a75      	ldr	r2, [pc, #468]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012e04:	6013      	str	r3, [r2, #0]
 8012e06:	e01d      	b.n	8012e44 <HAL_RCC_OscConfig+0xb0>
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012e10:	d10c      	bne.n	8012e2c <HAL_RCC_OscConfig+0x98>
 8012e12:	4b70      	ldr	r3, [pc, #448]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	4a6f      	ldr	r2, [pc, #444]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012e1c:	6013      	str	r3, [r2, #0]
 8012e1e:	4b6d      	ldr	r3, [pc, #436]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	4a6c      	ldr	r2, [pc, #432]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012e28:	6013      	str	r3, [r2, #0]
 8012e2a:	e00b      	b.n	8012e44 <HAL_RCC_OscConfig+0xb0>
 8012e2c:	4b69      	ldr	r3, [pc, #420]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	4a68      	ldr	r2, [pc, #416]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012e36:	6013      	str	r3, [r2, #0]
 8012e38:	4b66      	ldr	r3, [pc, #408]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	4a65      	ldr	r2, [pc, #404]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d013      	beq.n	8012e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012e4c:	f7fc f994 	bl	800f178 <HAL_GetTick>
 8012e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012e52:	e008      	b.n	8012e66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012e54:	f7fc f990 	bl	800f178 <HAL_GetTick>
 8012e58:	4602      	mov	r2, r0
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	1ad3      	subs	r3, r2, r3
 8012e5e:	2b64      	cmp	r3, #100	; 0x64
 8012e60:	d901      	bls.n	8012e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012e62:	2303      	movs	r3, #3
 8012e64:	e207      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012e66:	4b5b      	ldr	r3, [pc, #364]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d0f0      	beq.n	8012e54 <HAL_RCC_OscConfig+0xc0>
 8012e72:	e014      	b.n	8012e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012e74:	f7fc f980 	bl	800f178 <HAL_GetTick>
 8012e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012e7a:	e008      	b.n	8012e8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012e7c:	f7fc f97c 	bl	800f178 <HAL_GetTick>
 8012e80:	4602      	mov	r2, r0
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	1ad3      	subs	r3, r2, r3
 8012e86:	2b64      	cmp	r3, #100	; 0x64
 8012e88:	d901      	bls.n	8012e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012e8a:	2303      	movs	r3, #3
 8012e8c:	e1f3      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012e8e:	4b51      	ldr	r3, [pc, #324]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d1f0      	bne.n	8012e7c <HAL_RCC_OscConfig+0xe8>
 8012e9a:	e000      	b.n	8012e9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	f003 0302 	and.w	r3, r3, #2
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d063      	beq.n	8012f72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012eaa:	4b4a      	ldr	r3, [pc, #296]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012eac:	689b      	ldr	r3, [r3, #8]
 8012eae:	f003 030c 	and.w	r3, r3, #12
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d00b      	beq.n	8012ece <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012eb6:	4b47      	ldr	r3, [pc, #284]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012eb8:	689b      	ldr	r3, [r3, #8]
 8012eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012ebe:	2b08      	cmp	r3, #8
 8012ec0:	d11c      	bne.n	8012efc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012ec2:	4b44      	ldr	r3, [pc, #272]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d116      	bne.n	8012efc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012ece:	4b41      	ldr	r3, [pc, #260]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f003 0302 	and.w	r3, r3, #2
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d005      	beq.n	8012ee6 <HAL_RCC_OscConfig+0x152>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	2b01      	cmp	r3, #1
 8012ee0:	d001      	beq.n	8012ee6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	e1c7      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012ee6:	4b3b      	ldr	r3, [pc, #236]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	691b      	ldr	r3, [r3, #16]
 8012ef2:	00db      	lsls	r3, r3, #3
 8012ef4:	4937      	ldr	r1, [pc, #220]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012ef6:	4313      	orrs	r3, r2
 8012ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012efa:	e03a      	b.n	8012f72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	68db      	ldr	r3, [r3, #12]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d020      	beq.n	8012f46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012f04:	4b34      	ldr	r3, [pc, #208]	; (8012fd8 <HAL_RCC_OscConfig+0x244>)
 8012f06:	2201      	movs	r2, #1
 8012f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012f0a:	f7fc f935 	bl	800f178 <HAL_GetTick>
 8012f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012f10:	e008      	b.n	8012f24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012f12:	f7fc f931 	bl	800f178 <HAL_GetTick>
 8012f16:	4602      	mov	r2, r0
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	1ad3      	subs	r3, r2, r3
 8012f1c:	2b02      	cmp	r3, #2
 8012f1e:	d901      	bls.n	8012f24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012f20:	2303      	movs	r3, #3
 8012f22:	e1a8      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012f24:	4b2b      	ldr	r3, [pc, #172]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	f003 0302 	and.w	r3, r3, #2
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d0f0      	beq.n	8012f12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012f30:	4b28      	ldr	r3, [pc, #160]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	691b      	ldr	r3, [r3, #16]
 8012f3c:	00db      	lsls	r3, r3, #3
 8012f3e:	4925      	ldr	r1, [pc, #148]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012f40:	4313      	orrs	r3, r2
 8012f42:	600b      	str	r3, [r1, #0]
 8012f44:	e015      	b.n	8012f72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012f46:	4b24      	ldr	r3, [pc, #144]	; (8012fd8 <HAL_RCC_OscConfig+0x244>)
 8012f48:	2200      	movs	r2, #0
 8012f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012f4c:	f7fc f914 	bl	800f178 <HAL_GetTick>
 8012f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012f52:	e008      	b.n	8012f66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012f54:	f7fc f910 	bl	800f178 <HAL_GetTick>
 8012f58:	4602      	mov	r2, r0
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	1ad3      	subs	r3, r2, r3
 8012f5e:	2b02      	cmp	r3, #2
 8012f60:	d901      	bls.n	8012f66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012f62:	2303      	movs	r3, #3
 8012f64:	e187      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012f66:	4b1b      	ldr	r3, [pc, #108]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	f003 0302 	and.w	r3, r3, #2
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d1f0      	bne.n	8012f54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	f003 0308 	and.w	r3, r3, #8
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d036      	beq.n	8012fec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	695b      	ldr	r3, [r3, #20]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d016      	beq.n	8012fb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012f86:	4b15      	ldr	r3, [pc, #84]	; (8012fdc <HAL_RCC_OscConfig+0x248>)
 8012f88:	2201      	movs	r2, #1
 8012f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f8c:	f7fc f8f4 	bl	800f178 <HAL_GetTick>
 8012f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012f92:	e008      	b.n	8012fa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012f94:	f7fc f8f0 	bl	800f178 <HAL_GetTick>
 8012f98:	4602      	mov	r2, r0
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	1ad3      	subs	r3, r2, r3
 8012f9e:	2b02      	cmp	r3, #2
 8012fa0:	d901      	bls.n	8012fa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012fa2:	2303      	movs	r3, #3
 8012fa4:	e167      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012fa6:	4b0b      	ldr	r3, [pc, #44]	; (8012fd4 <HAL_RCC_OscConfig+0x240>)
 8012fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012faa:	f003 0302 	and.w	r3, r3, #2
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d0f0      	beq.n	8012f94 <HAL_RCC_OscConfig+0x200>
 8012fb2:	e01b      	b.n	8012fec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012fb4:	4b09      	ldr	r3, [pc, #36]	; (8012fdc <HAL_RCC_OscConfig+0x248>)
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012fba:	f7fc f8dd 	bl	800f178 <HAL_GetTick>
 8012fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012fc0:	e00e      	b.n	8012fe0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012fc2:	f7fc f8d9 	bl	800f178 <HAL_GetTick>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	1ad3      	subs	r3, r2, r3
 8012fcc:	2b02      	cmp	r3, #2
 8012fce:	d907      	bls.n	8012fe0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8012fd0:	2303      	movs	r3, #3
 8012fd2:	e150      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
 8012fd4:	40023800 	.word	0x40023800
 8012fd8:	42470000 	.word	0x42470000
 8012fdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012fe0:	4b88      	ldr	r3, [pc, #544]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8012fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fe4:	f003 0302 	and.w	r3, r3, #2
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d1ea      	bne.n	8012fc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	f003 0304 	and.w	r3, r3, #4
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	f000 8097 	beq.w	8013128 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012ffe:	4b81      	ldr	r3, [pc, #516]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013006:	2b00      	cmp	r3, #0
 8013008:	d10f      	bne.n	801302a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801300a:	2300      	movs	r3, #0
 801300c:	60bb      	str	r3, [r7, #8]
 801300e:	4b7d      	ldr	r3, [pc, #500]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013012:	4a7c      	ldr	r2, [pc, #496]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013018:	6413      	str	r3, [r2, #64]	; 0x40
 801301a:	4b7a      	ldr	r3, [pc, #488]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 801301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013022:	60bb      	str	r3, [r7, #8]
 8013024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013026:	2301      	movs	r3, #1
 8013028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801302a:	4b77      	ldr	r3, [pc, #476]	; (8013208 <HAL_RCC_OscConfig+0x474>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013032:	2b00      	cmp	r3, #0
 8013034:	d118      	bne.n	8013068 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013036:	4b74      	ldr	r3, [pc, #464]	; (8013208 <HAL_RCC_OscConfig+0x474>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	4a73      	ldr	r2, [pc, #460]	; (8013208 <HAL_RCC_OscConfig+0x474>)
 801303c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013042:	f7fc f899 	bl	800f178 <HAL_GetTick>
 8013046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013048:	e008      	b.n	801305c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801304a:	f7fc f895 	bl	800f178 <HAL_GetTick>
 801304e:	4602      	mov	r2, r0
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	1ad3      	subs	r3, r2, r3
 8013054:	2b02      	cmp	r3, #2
 8013056:	d901      	bls.n	801305c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8013058:	2303      	movs	r3, #3
 801305a:	e10c      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801305c:	4b6a      	ldr	r3, [pc, #424]	; (8013208 <HAL_RCC_OscConfig+0x474>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013064:	2b00      	cmp	r3, #0
 8013066:	d0f0      	beq.n	801304a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	689b      	ldr	r3, [r3, #8]
 801306c:	2b01      	cmp	r3, #1
 801306e:	d106      	bne.n	801307e <HAL_RCC_OscConfig+0x2ea>
 8013070:	4b64      	ldr	r3, [pc, #400]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013074:	4a63      	ldr	r2, [pc, #396]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013076:	f043 0301 	orr.w	r3, r3, #1
 801307a:	6713      	str	r3, [r2, #112]	; 0x70
 801307c:	e01c      	b.n	80130b8 <HAL_RCC_OscConfig+0x324>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	689b      	ldr	r3, [r3, #8]
 8013082:	2b05      	cmp	r3, #5
 8013084:	d10c      	bne.n	80130a0 <HAL_RCC_OscConfig+0x30c>
 8013086:	4b5f      	ldr	r3, [pc, #380]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801308a:	4a5e      	ldr	r2, [pc, #376]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 801308c:	f043 0304 	orr.w	r3, r3, #4
 8013090:	6713      	str	r3, [r2, #112]	; 0x70
 8013092:	4b5c      	ldr	r3, [pc, #368]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013096:	4a5b      	ldr	r2, [pc, #364]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013098:	f043 0301 	orr.w	r3, r3, #1
 801309c:	6713      	str	r3, [r2, #112]	; 0x70
 801309e:	e00b      	b.n	80130b8 <HAL_RCC_OscConfig+0x324>
 80130a0:	4b58      	ldr	r3, [pc, #352]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 80130a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130a4:	4a57      	ldr	r2, [pc, #348]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 80130a6:	f023 0301 	bic.w	r3, r3, #1
 80130aa:	6713      	str	r3, [r2, #112]	; 0x70
 80130ac:	4b55      	ldr	r3, [pc, #340]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 80130ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130b0:	4a54      	ldr	r2, [pc, #336]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 80130b2:	f023 0304 	bic.w	r3, r3, #4
 80130b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	689b      	ldr	r3, [r3, #8]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d015      	beq.n	80130ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80130c0:	f7fc f85a 	bl	800f178 <HAL_GetTick>
 80130c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80130c6:	e00a      	b.n	80130de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80130c8:	f7fc f856 	bl	800f178 <HAL_GetTick>
 80130cc:	4602      	mov	r2, r0
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	1ad3      	subs	r3, r2, r3
 80130d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d901      	bls.n	80130de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80130da:	2303      	movs	r3, #3
 80130dc:	e0cb      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80130de:	4b49      	ldr	r3, [pc, #292]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 80130e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130e2:	f003 0302 	and.w	r3, r3, #2
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d0ee      	beq.n	80130c8 <HAL_RCC_OscConfig+0x334>
 80130ea:	e014      	b.n	8013116 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80130ec:	f7fc f844 	bl	800f178 <HAL_GetTick>
 80130f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80130f2:	e00a      	b.n	801310a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80130f4:	f7fc f840 	bl	800f178 <HAL_GetTick>
 80130f8:	4602      	mov	r2, r0
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	1ad3      	subs	r3, r2, r3
 80130fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8013102:	4293      	cmp	r3, r2
 8013104:	d901      	bls.n	801310a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8013106:	2303      	movs	r3, #3
 8013108:	e0b5      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801310a:	4b3e      	ldr	r3, [pc, #248]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 801310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801310e:	f003 0302 	and.w	r3, r3, #2
 8013112:	2b00      	cmp	r3, #0
 8013114:	d1ee      	bne.n	80130f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013116:	7dfb      	ldrb	r3, [r7, #23]
 8013118:	2b01      	cmp	r3, #1
 801311a:	d105      	bne.n	8013128 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801311c:	4b39      	ldr	r3, [pc, #228]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 801311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013120:	4a38      	ldr	r2, [pc, #224]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013126:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	699b      	ldr	r3, [r3, #24]
 801312c:	2b00      	cmp	r3, #0
 801312e:	f000 80a1 	beq.w	8013274 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013132:	4b34      	ldr	r3, [pc, #208]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013134:	689b      	ldr	r3, [r3, #8]
 8013136:	f003 030c 	and.w	r3, r3, #12
 801313a:	2b08      	cmp	r3, #8
 801313c:	d05c      	beq.n	80131f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	699b      	ldr	r3, [r3, #24]
 8013142:	2b02      	cmp	r3, #2
 8013144:	d141      	bne.n	80131ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013146:	4b31      	ldr	r3, [pc, #196]	; (801320c <HAL_RCC_OscConfig+0x478>)
 8013148:	2200      	movs	r2, #0
 801314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801314c:	f7fc f814 	bl	800f178 <HAL_GetTick>
 8013150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013152:	e008      	b.n	8013166 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013154:	f7fc f810 	bl	800f178 <HAL_GetTick>
 8013158:	4602      	mov	r2, r0
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	1ad3      	subs	r3, r2, r3
 801315e:	2b02      	cmp	r3, #2
 8013160:	d901      	bls.n	8013166 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8013162:	2303      	movs	r3, #3
 8013164:	e087      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013166:	4b27      	ldr	r3, [pc, #156]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801316e:	2b00      	cmp	r3, #0
 8013170:	d1f0      	bne.n	8013154 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	69da      	ldr	r2, [r3, #28]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6a1b      	ldr	r3, [r3, #32]
 801317a:	431a      	orrs	r2, r3
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013180:	019b      	lsls	r3, r3, #6
 8013182:	431a      	orrs	r2, r3
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013188:	085b      	lsrs	r3, r3, #1
 801318a:	3b01      	subs	r3, #1
 801318c:	041b      	lsls	r3, r3, #16
 801318e:	431a      	orrs	r2, r3
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013194:	061b      	lsls	r3, r3, #24
 8013196:	491b      	ldr	r1, [pc, #108]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 8013198:	4313      	orrs	r3, r2
 801319a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801319c:	4b1b      	ldr	r3, [pc, #108]	; (801320c <HAL_RCC_OscConfig+0x478>)
 801319e:	2201      	movs	r2, #1
 80131a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80131a2:	f7fb ffe9 	bl	800f178 <HAL_GetTick>
 80131a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80131a8:	e008      	b.n	80131bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80131aa:	f7fb ffe5 	bl	800f178 <HAL_GetTick>
 80131ae:	4602      	mov	r2, r0
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	1ad3      	subs	r3, r2, r3
 80131b4:	2b02      	cmp	r3, #2
 80131b6:	d901      	bls.n	80131bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80131b8:	2303      	movs	r3, #3
 80131ba:	e05c      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80131bc:	4b11      	ldr	r3, [pc, #68]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d0f0      	beq.n	80131aa <HAL_RCC_OscConfig+0x416>
 80131c8:	e054      	b.n	8013274 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80131ca:	4b10      	ldr	r3, [pc, #64]	; (801320c <HAL_RCC_OscConfig+0x478>)
 80131cc:	2200      	movs	r2, #0
 80131ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80131d0:	f7fb ffd2 	bl	800f178 <HAL_GetTick>
 80131d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80131d6:	e008      	b.n	80131ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80131d8:	f7fb ffce 	bl	800f178 <HAL_GetTick>
 80131dc:	4602      	mov	r2, r0
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	1ad3      	subs	r3, r2, r3
 80131e2:	2b02      	cmp	r3, #2
 80131e4:	d901      	bls.n	80131ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80131e6:	2303      	movs	r3, #3
 80131e8:	e045      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80131ea:	4b06      	ldr	r3, [pc, #24]	; (8013204 <HAL_RCC_OscConfig+0x470>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d1f0      	bne.n	80131d8 <HAL_RCC_OscConfig+0x444>
 80131f6:	e03d      	b.n	8013274 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	699b      	ldr	r3, [r3, #24]
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d107      	bne.n	8013210 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8013200:	2301      	movs	r3, #1
 8013202:	e038      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
 8013204:	40023800 	.word	0x40023800
 8013208:	40007000 	.word	0x40007000
 801320c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013210:	4b1b      	ldr	r3, [pc, #108]	; (8013280 <HAL_RCC_OscConfig+0x4ec>)
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	699b      	ldr	r3, [r3, #24]
 801321a:	2b01      	cmp	r3, #1
 801321c:	d028      	beq.n	8013270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013228:	429a      	cmp	r2, r3
 801322a:	d121      	bne.n	8013270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013236:	429a      	cmp	r2, r3
 8013238:	d11a      	bne.n	8013270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801323a:	68fa      	ldr	r2, [r7, #12]
 801323c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013240:	4013      	ands	r3, r2
 8013242:	687a      	ldr	r2, [r7, #4]
 8013244:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013248:	4293      	cmp	r3, r2
 801324a:	d111      	bne.n	8013270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013256:	085b      	lsrs	r3, r3, #1
 8013258:	3b01      	subs	r3, #1
 801325a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801325c:	429a      	cmp	r2, r3
 801325e:	d107      	bne.n	8013270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801326a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801326c:	429a      	cmp	r2, r3
 801326e:	d001      	beq.n	8013274 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8013270:	2301      	movs	r3, #1
 8013272:	e000      	b.n	8013276 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8013274:	2300      	movs	r3, #0
}
 8013276:	4618      	mov	r0, r3
 8013278:	3718      	adds	r7, #24
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	40023800 	.word	0x40023800

08013284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b084      	sub	sp, #16
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d101      	bne.n	8013298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013294:	2301      	movs	r3, #1
 8013296:	e0cc      	b.n	8013432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013298:	4b68      	ldr	r3, [pc, #416]	; (801343c <HAL_RCC_ClockConfig+0x1b8>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	f003 0307 	and.w	r3, r3, #7
 80132a0:	683a      	ldr	r2, [r7, #0]
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d90c      	bls.n	80132c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80132a6:	4b65      	ldr	r3, [pc, #404]	; (801343c <HAL_RCC_ClockConfig+0x1b8>)
 80132a8:	683a      	ldr	r2, [r7, #0]
 80132aa:	b2d2      	uxtb	r2, r2
 80132ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80132ae:	4b63      	ldr	r3, [pc, #396]	; (801343c <HAL_RCC_ClockConfig+0x1b8>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	f003 0307 	and.w	r3, r3, #7
 80132b6:	683a      	ldr	r2, [r7, #0]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d001      	beq.n	80132c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80132bc:	2301      	movs	r3, #1
 80132be:	e0b8      	b.n	8013432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	f003 0302 	and.w	r3, r3, #2
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d020      	beq.n	801330e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	f003 0304 	and.w	r3, r3, #4
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d005      	beq.n	80132e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80132d8:	4b59      	ldr	r3, [pc, #356]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 80132da:	689b      	ldr	r3, [r3, #8]
 80132dc:	4a58      	ldr	r2, [pc, #352]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 80132de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80132e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f003 0308 	and.w	r3, r3, #8
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d005      	beq.n	80132fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80132f0:	4b53      	ldr	r3, [pc, #332]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 80132f2:	689b      	ldr	r3, [r3, #8]
 80132f4:	4a52      	ldr	r2, [pc, #328]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 80132f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80132fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80132fc:	4b50      	ldr	r3, [pc, #320]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 80132fe:	689b      	ldr	r3, [r3, #8]
 8013300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	689b      	ldr	r3, [r3, #8]
 8013308:	494d      	ldr	r1, [pc, #308]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 801330a:	4313      	orrs	r3, r2
 801330c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	f003 0301 	and.w	r3, r3, #1
 8013316:	2b00      	cmp	r3, #0
 8013318:	d044      	beq.n	80133a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	2b01      	cmp	r3, #1
 8013320:	d107      	bne.n	8013332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013322:	4b47      	ldr	r3, [pc, #284]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801332a:	2b00      	cmp	r3, #0
 801332c:	d119      	bne.n	8013362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801332e:	2301      	movs	r3, #1
 8013330:	e07f      	b.n	8013432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	685b      	ldr	r3, [r3, #4]
 8013336:	2b02      	cmp	r3, #2
 8013338:	d003      	beq.n	8013342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801333e:	2b03      	cmp	r3, #3
 8013340:	d107      	bne.n	8013352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013342:	4b3f      	ldr	r3, [pc, #252]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801334a:	2b00      	cmp	r3, #0
 801334c:	d109      	bne.n	8013362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801334e:	2301      	movs	r3, #1
 8013350:	e06f      	b.n	8013432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013352:	4b3b      	ldr	r3, [pc, #236]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	f003 0302 	and.w	r3, r3, #2
 801335a:	2b00      	cmp	r3, #0
 801335c:	d101      	bne.n	8013362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801335e:	2301      	movs	r3, #1
 8013360:	e067      	b.n	8013432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013362:	4b37      	ldr	r3, [pc, #220]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 8013364:	689b      	ldr	r3, [r3, #8]
 8013366:	f023 0203 	bic.w	r2, r3, #3
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	4934      	ldr	r1, [pc, #208]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 8013370:	4313      	orrs	r3, r2
 8013372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013374:	f7fb ff00 	bl	800f178 <HAL_GetTick>
 8013378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801337a:	e00a      	b.n	8013392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801337c:	f7fb fefc 	bl	800f178 <HAL_GetTick>
 8013380:	4602      	mov	r2, r0
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	1ad3      	subs	r3, r2, r3
 8013386:	f241 3288 	movw	r2, #5000	; 0x1388
 801338a:	4293      	cmp	r3, r2
 801338c:	d901      	bls.n	8013392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801338e:	2303      	movs	r3, #3
 8013390:	e04f      	b.n	8013432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013392:	4b2b      	ldr	r3, [pc, #172]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 8013394:	689b      	ldr	r3, [r3, #8]
 8013396:	f003 020c 	and.w	r2, r3, #12
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	009b      	lsls	r3, r3, #2
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d1eb      	bne.n	801337c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80133a4:	4b25      	ldr	r3, [pc, #148]	; (801343c <HAL_RCC_ClockConfig+0x1b8>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	f003 0307 	and.w	r3, r3, #7
 80133ac:	683a      	ldr	r2, [r7, #0]
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d20c      	bcs.n	80133cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80133b2:	4b22      	ldr	r3, [pc, #136]	; (801343c <HAL_RCC_ClockConfig+0x1b8>)
 80133b4:	683a      	ldr	r2, [r7, #0]
 80133b6:	b2d2      	uxtb	r2, r2
 80133b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80133ba:	4b20      	ldr	r3, [pc, #128]	; (801343c <HAL_RCC_ClockConfig+0x1b8>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	f003 0307 	and.w	r3, r3, #7
 80133c2:	683a      	ldr	r2, [r7, #0]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d001      	beq.n	80133cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80133c8:	2301      	movs	r3, #1
 80133ca:	e032      	b.n	8013432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	f003 0304 	and.w	r3, r3, #4
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d008      	beq.n	80133ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80133d8:	4b19      	ldr	r3, [pc, #100]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 80133da:	689b      	ldr	r3, [r3, #8]
 80133dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	68db      	ldr	r3, [r3, #12]
 80133e4:	4916      	ldr	r1, [pc, #88]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 80133e6:	4313      	orrs	r3, r2
 80133e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f003 0308 	and.w	r3, r3, #8
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d009      	beq.n	801340a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80133f6:	4b12      	ldr	r3, [pc, #72]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 80133f8:	689b      	ldr	r3, [r3, #8]
 80133fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	691b      	ldr	r3, [r3, #16]
 8013402:	00db      	lsls	r3, r3, #3
 8013404:	490e      	ldr	r1, [pc, #56]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 8013406:	4313      	orrs	r3, r2
 8013408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801340a:	f000 f821 	bl	8013450 <HAL_RCC_GetSysClockFreq>
 801340e:	4602      	mov	r2, r0
 8013410:	4b0b      	ldr	r3, [pc, #44]	; (8013440 <HAL_RCC_ClockConfig+0x1bc>)
 8013412:	689b      	ldr	r3, [r3, #8]
 8013414:	091b      	lsrs	r3, r3, #4
 8013416:	f003 030f 	and.w	r3, r3, #15
 801341a:	490a      	ldr	r1, [pc, #40]	; (8013444 <HAL_RCC_ClockConfig+0x1c0>)
 801341c:	5ccb      	ldrb	r3, [r1, r3]
 801341e:	fa22 f303 	lsr.w	r3, r2, r3
 8013422:	4a09      	ldr	r2, [pc, #36]	; (8013448 <HAL_RCC_ClockConfig+0x1c4>)
 8013424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013426:	4b09      	ldr	r3, [pc, #36]	; (801344c <HAL_RCC_ClockConfig+0x1c8>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	4618      	mov	r0, r3
 801342c:	f7fb fe60 	bl	800f0f0 <HAL_InitTick>

  return HAL_OK;
 8013430:	2300      	movs	r3, #0
}
 8013432:	4618      	mov	r0, r3
 8013434:	3710      	adds	r7, #16
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}
 801343a:	bf00      	nop
 801343c:	40023c00 	.word	0x40023c00
 8013440:	40023800 	.word	0x40023800
 8013444:	0801b8f8 	.word	0x0801b8f8
 8013448:	20000058 	.word	0x20000058
 801344c:	2000005c 	.word	0x2000005c

08013450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013454:	b090      	sub	sp, #64	; 0x40
 8013456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013458:	2300      	movs	r3, #0
 801345a:	637b      	str	r3, [r7, #52]	; 0x34
 801345c:	2300      	movs	r3, #0
 801345e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013460:	2300      	movs	r3, #0
 8013462:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8013464:	2300      	movs	r3, #0
 8013466:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013468:	4b59      	ldr	r3, [pc, #356]	; (80135d0 <HAL_RCC_GetSysClockFreq+0x180>)
 801346a:	689b      	ldr	r3, [r3, #8]
 801346c:	f003 030c 	and.w	r3, r3, #12
 8013470:	2b08      	cmp	r3, #8
 8013472:	d00d      	beq.n	8013490 <HAL_RCC_GetSysClockFreq+0x40>
 8013474:	2b08      	cmp	r3, #8
 8013476:	f200 80a1 	bhi.w	80135bc <HAL_RCC_GetSysClockFreq+0x16c>
 801347a:	2b00      	cmp	r3, #0
 801347c:	d002      	beq.n	8013484 <HAL_RCC_GetSysClockFreq+0x34>
 801347e:	2b04      	cmp	r3, #4
 8013480:	d003      	beq.n	801348a <HAL_RCC_GetSysClockFreq+0x3a>
 8013482:	e09b      	b.n	80135bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013484:	4b53      	ldr	r3, [pc, #332]	; (80135d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8013486:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8013488:	e09b      	b.n	80135c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801348a:	4b53      	ldr	r3, [pc, #332]	; (80135d8 <HAL_RCC_GetSysClockFreq+0x188>)
 801348c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801348e:	e098      	b.n	80135c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013490:	4b4f      	ldr	r3, [pc, #316]	; (80135d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013498:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801349a:	4b4d      	ldr	r3, [pc, #308]	; (80135d0 <HAL_RCC_GetSysClockFreq+0x180>)
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d028      	beq.n	80134f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80134a6:	4b4a      	ldr	r3, [pc, #296]	; (80135d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80134a8:	685b      	ldr	r3, [r3, #4]
 80134aa:	099b      	lsrs	r3, r3, #6
 80134ac:	2200      	movs	r2, #0
 80134ae:	623b      	str	r3, [r7, #32]
 80134b0:	627a      	str	r2, [r7, #36]	; 0x24
 80134b2:	6a3b      	ldr	r3, [r7, #32]
 80134b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80134b8:	2100      	movs	r1, #0
 80134ba:	4b47      	ldr	r3, [pc, #284]	; (80135d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80134bc:	fb03 f201 	mul.w	r2, r3, r1
 80134c0:	2300      	movs	r3, #0
 80134c2:	fb00 f303 	mul.w	r3, r0, r3
 80134c6:	4413      	add	r3, r2
 80134c8:	4a43      	ldr	r2, [pc, #268]	; (80135d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80134ca:	fba0 1202 	umull	r1, r2, r0, r2
 80134ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80134d0:	460a      	mov	r2, r1
 80134d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80134d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134d6:	4413      	add	r3, r2
 80134d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80134da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134dc:	2200      	movs	r2, #0
 80134de:	61bb      	str	r3, [r7, #24]
 80134e0:	61fa      	str	r2, [r7, #28]
 80134e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80134e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80134ea:	f7ed fb8d 	bl	8000c08 <__aeabi_uldivmod>
 80134ee:	4602      	mov	r2, r0
 80134f0:	460b      	mov	r3, r1
 80134f2:	4613      	mov	r3, r2
 80134f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80134f6:	e053      	b.n	80135a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80134f8:	4b35      	ldr	r3, [pc, #212]	; (80135d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80134fa:	685b      	ldr	r3, [r3, #4]
 80134fc:	099b      	lsrs	r3, r3, #6
 80134fe:	2200      	movs	r2, #0
 8013500:	613b      	str	r3, [r7, #16]
 8013502:	617a      	str	r2, [r7, #20]
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801350a:	f04f 0b00 	mov.w	fp, #0
 801350e:	4652      	mov	r2, sl
 8013510:	465b      	mov	r3, fp
 8013512:	f04f 0000 	mov.w	r0, #0
 8013516:	f04f 0100 	mov.w	r1, #0
 801351a:	0159      	lsls	r1, r3, #5
 801351c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013520:	0150      	lsls	r0, r2, #5
 8013522:	4602      	mov	r2, r0
 8013524:	460b      	mov	r3, r1
 8013526:	ebb2 080a 	subs.w	r8, r2, sl
 801352a:	eb63 090b 	sbc.w	r9, r3, fp
 801352e:	f04f 0200 	mov.w	r2, #0
 8013532:	f04f 0300 	mov.w	r3, #0
 8013536:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801353a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801353e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8013542:	ebb2 0408 	subs.w	r4, r2, r8
 8013546:	eb63 0509 	sbc.w	r5, r3, r9
 801354a:	f04f 0200 	mov.w	r2, #0
 801354e:	f04f 0300 	mov.w	r3, #0
 8013552:	00eb      	lsls	r3, r5, #3
 8013554:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013558:	00e2      	lsls	r2, r4, #3
 801355a:	4614      	mov	r4, r2
 801355c:	461d      	mov	r5, r3
 801355e:	eb14 030a 	adds.w	r3, r4, sl
 8013562:	603b      	str	r3, [r7, #0]
 8013564:	eb45 030b 	adc.w	r3, r5, fp
 8013568:	607b      	str	r3, [r7, #4]
 801356a:	f04f 0200 	mov.w	r2, #0
 801356e:	f04f 0300 	mov.w	r3, #0
 8013572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013576:	4629      	mov	r1, r5
 8013578:	028b      	lsls	r3, r1, #10
 801357a:	4621      	mov	r1, r4
 801357c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013580:	4621      	mov	r1, r4
 8013582:	028a      	lsls	r2, r1, #10
 8013584:	4610      	mov	r0, r2
 8013586:	4619      	mov	r1, r3
 8013588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801358a:	2200      	movs	r2, #0
 801358c:	60bb      	str	r3, [r7, #8]
 801358e:	60fa      	str	r2, [r7, #12]
 8013590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013594:	f7ed fb38 	bl	8000c08 <__aeabi_uldivmod>
 8013598:	4602      	mov	r2, r0
 801359a:	460b      	mov	r3, r1
 801359c:	4613      	mov	r3, r2
 801359e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80135a0:	4b0b      	ldr	r3, [pc, #44]	; (80135d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	0c1b      	lsrs	r3, r3, #16
 80135a6:	f003 0303 	and.w	r3, r3, #3
 80135aa:	3301      	adds	r3, #1
 80135ac:	005b      	lsls	r3, r3, #1
 80135ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80135b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80135b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80135b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80135ba:	e002      	b.n	80135c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80135bc:	4b05      	ldr	r3, [pc, #20]	; (80135d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80135be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80135c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80135c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3740      	adds	r7, #64	; 0x40
 80135c8:	46bd      	mov	sp, r7
 80135ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80135ce:	bf00      	nop
 80135d0:	40023800 	.word	0x40023800
 80135d4:	00f42400 	.word	0x00f42400
 80135d8:	017d7840 	.word	0x017d7840

080135dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80135dc:	b480      	push	{r7}
 80135de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80135e0:	4b03      	ldr	r3, [pc, #12]	; (80135f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80135e2:	681b      	ldr	r3, [r3, #0]
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr
 80135ee:	bf00      	nop
 80135f0:	20000058 	.word	0x20000058

080135f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80135f8:	f7ff fff0 	bl	80135dc <HAL_RCC_GetHCLKFreq>
 80135fc:	4602      	mov	r2, r0
 80135fe:	4b05      	ldr	r3, [pc, #20]	; (8013614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013600:	689b      	ldr	r3, [r3, #8]
 8013602:	0a9b      	lsrs	r3, r3, #10
 8013604:	f003 0307 	and.w	r3, r3, #7
 8013608:	4903      	ldr	r1, [pc, #12]	; (8013618 <HAL_RCC_GetPCLK1Freq+0x24>)
 801360a:	5ccb      	ldrb	r3, [r1, r3]
 801360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013610:	4618      	mov	r0, r3
 8013612:	bd80      	pop	{r7, pc}
 8013614:	40023800 	.word	0x40023800
 8013618:	0801b908 	.word	0x0801b908

0801361c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013620:	f7ff ffdc 	bl	80135dc <HAL_RCC_GetHCLKFreq>
 8013624:	4602      	mov	r2, r0
 8013626:	4b05      	ldr	r3, [pc, #20]	; (801363c <HAL_RCC_GetPCLK2Freq+0x20>)
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	0b5b      	lsrs	r3, r3, #13
 801362c:	f003 0307 	and.w	r3, r3, #7
 8013630:	4903      	ldr	r1, [pc, #12]	; (8013640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013632:	5ccb      	ldrb	r3, [r1, r3]
 8013634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013638:	4618      	mov	r0, r3
 801363a:	bd80      	pop	{r7, pc}
 801363c:	40023800 	.word	0x40023800
 8013640:	0801b908 	.word	0x0801b908

08013644 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8013648:	4b06      	ldr	r3, [pc, #24]	; (8013664 <HAL_RCC_NMI_IRQHandler+0x20>)
 801364a:	68db      	ldr	r3, [r3, #12]
 801364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013650:	2b80      	cmp	r3, #128	; 0x80
 8013652:	d104      	bne.n	801365e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8013654:	f000 f80a 	bl	801366c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8013658:	4b03      	ldr	r3, [pc, #12]	; (8013668 <HAL_RCC_NMI_IRQHandler+0x24>)
 801365a:	2280      	movs	r2, #128	; 0x80
 801365c:	701a      	strb	r2, [r3, #0]
  }
}
 801365e:	bf00      	nop
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	40023800 	.word	0x40023800
 8013668:	4002380e 	.word	0x4002380e

0801366c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 801366c:	b480      	push	{r7}
 801366e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8013670:	bf00      	nop
 8013672:	46bd      	mov	sp, r7
 8013674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013678:	4770      	bx	lr

0801367a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801367a:	b580      	push	{r7, lr}
 801367c:	b082      	sub	sp, #8
 801367e:	af00      	add	r7, sp, #0
 8013680:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d101      	bne.n	801368c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013688:	2301      	movs	r3, #1
 801368a:	e07b      	b.n	8013784 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013690:	2b00      	cmp	r3, #0
 8013692:	d108      	bne.n	80136a6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	685b      	ldr	r3, [r3, #4]
 8013698:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801369c:	d009      	beq.n	80136b2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	2200      	movs	r2, #0
 80136a2:	61da      	str	r2, [r3, #28]
 80136a4:	e005      	b.n	80136b2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	2200      	movs	r2, #0
 80136aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2200      	movs	r2, #0
 80136b0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	2200      	movs	r2, #0
 80136b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d106      	bne.n	80136d2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2200      	movs	r2, #0
 80136c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f7fa fd7f 	bl	800e1d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2202      	movs	r2, #2
 80136d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	681a      	ldr	r2, [r3, #0]
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80136e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	689b      	ldr	r3, [r3, #8]
 80136f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80136fa:	431a      	orrs	r2, r3
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	68db      	ldr	r3, [r3, #12]
 8013700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013704:	431a      	orrs	r2, r3
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	691b      	ldr	r3, [r3, #16]
 801370a:	f003 0302 	and.w	r3, r3, #2
 801370e:	431a      	orrs	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	695b      	ldr	r3, [r3, #20]
 8013714:	f003 0301 	and.w	r3, r3, #1
 8013718:	431a      	orrs	r2, r3
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	699b      	ldr	r3, [r3, #24]
 801371e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013722:	431a      	orrs	r2, r3
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	69db      	ldr	r3, [r3, #28]
 8013728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801372c:	431a      	orrs	r2, r3
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	6a1b      	ldr	r3, [r3, #32]
 8013732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013736:	ea42 0103 	orr.w	r1, r2, r3
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801373e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	430a      	orrs	r2, r1
 8013748:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	699b      	ldr	r3, [r3, #24]
 801374e:	0c1b      	lsrs	r3, r3, #16
 8013750:	f003 0104 	and.w	r1, r3, #4
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013758:	f003 0210 	and.w	r2, r3, #16
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	430a      	orrs	r2, r1
 8013762:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	69da      	ldr	r2, [r3, #28]
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013772:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	2200      	movs	r2, #0
 8013778:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2201      	movs	r2, #1
 801377e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8013782:	2300      	movs	r3, #0
}
 8013784:	4618      	mov	r0, r3
 8013786:	3708      	adds	r7, #8
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}

0801378c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b088      	sub	sp, #32
 8013790:	af00      	add	r7, sp, #0
 8013792:	60f8      	str	r0, [r7, #12]
 8013794:	60b9      	str	r1, [r7, #8]
 8013796:	603b      	str	r3, [r7, #0]
 8013798:	4613      	mov	r3, r2
 801379a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801379c:	2300      	movs	r3, #0
 801379e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80137a6:	2b01      	cmp	r3, #1
 80137a8:	d101      	bne.n	80137ae <HAL_SPI_Transmit+0x22>
 80137aa:	2302      	movs	r3, #2
 80137ac:	e12d      	b.n	8013a0a <HAL_SPI_Transmit+0x27e>
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	2201      	movs	r2, #1
 80137b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80137b6:	f7fb fcdf 	bl	800f178 <HAL_GetTick>
 80137ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80137bc:	88fb      	ldrh	r3, [r7, #6]
 80137be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80137c6:	b2db      	uxtb	r3, r3
 80137c8:	2b01      	cmp	r3, #1
 80137ca:	d002      	beq.n	80137d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80137cc:	2302      	movs	r3, #2
 80137ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80137d0:	e116      	b.n	8013a00 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d002      	beq.n	80137de <HAL_SPI_Transmit+0x52>
 80137d8:	88fb      	ldrh	r3, [r7, #6]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d102      	bne.n	80137e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80137de:	2301      	movs	r3, #1
 80137e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80137e2:	e10d      	b.n	8013a00 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	2203      	movs	r2, #3
 80137e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	2200      	movs	r2, #0
 80137f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	68ba      	ldr	r2, [r7, #8]
 80137f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	88fa      	ldrh	r2, [r7, #6]
 80137fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	88fa      	ldrh	r2, [r7, #6]
 8013802:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2200      	movs	r2, #0
 8013808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	2200      	movs	r2, #0
 801380e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	2200      	movs	r2, #0
 8013814:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2200      	movs	r2, #0
 801381a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	2200      	movs	r2, #0
 8013820:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	689b      	ldr	r3, [r3, #8]
 8013826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801382a:	d10f      	bne.n	801384c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801383a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801384a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013856:	2b40      	cmp	r3, #64	; 0x40
 8013858:	d007      	beq.n	801386a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013868:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013872:	d14f      	bne.n	8013914 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d002      	beq.n	8013882 <HAL_SPI_Transmit+0xf6>
 801387c:	8afb      	ldrh	r3, [r7, #22]
 801387e:	2b01      	cmp	r3, #1
 8013880:	d142      	bne.n	8013908 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013886:	881a      	ldrh	r2, [r3, #0]
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013892:	1c9a      	adds	r2, r3, #2
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801389c:	b29b      	uxth	r3, r3
 801389e:	3b01      	subs	r3, #1
 80138a0:	b29a      	uxth	r2, r3
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80138a6:	e02f      	b.n	8013908 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	f003 0302 	and.w	r3, r3, #2
 80138b2:	2b02      	cmp	r3, #2
 80138b4:	d112      	bne.n	80138dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ba:	881a      	ldrh	r2, [r3, #0]
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138c6:	1c9a      	adds	r2, r3, #2
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	3b01      	subs	r3, #1
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80138da:	e015      	b.n	8013908 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80138dc:	f7fb fc4c 	bl	800f178 <HAL_GetTick>
 80138e0:	4602      	mov	r2, r0
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	1ad3      	subs	r3, r2, r3
 80138e6:	683a      	ldr	r2, [r7, #0]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d803      	bhi.n	80138f4 <HAL_SPI_Transmit+0x168>
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138f2:	d102      	bne.n	80138fa <HAL_SPI_Transmit+0x16e>
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d106      	bne.n	8013908 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80138fa:	2303      	movs	r3, #3
 80138fc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	2201      	movs	r2, #1
 8013902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8013906:	e07b      	b.n	8013a00 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801390c:	b29b      	uxth	r3, r3
 801390e:	2b00      	cmp	r3, #0
 8013910:	d1ca      	bne.n	80138a8 <HAL_SPI_Transmit+0x11c>
 8013912:	e050      	b.n	80139b6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d002      	beq.n	8013922 <HAL_SPI_Transmit+0x196>
 801391c:	8afb      	ldrh	r3, [r7, #22]
 801391e:	2b01      	cmp	r3, #1
 8013920:	d144      	bne.n	80139ac <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	330c      	adds	r3, #12
 801392c:	7812      	ldrb	r2, [r2, #0]
 801392e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013934:	1c5a      	adds	r2, r3, #1
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801393e:	b29b      	uxth	r3, r3
 8013940:	3b01      	subs	r3, #1
 8013942:	b29a      	uxth	r2, r3
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013948:	e030      	b.n	80139ac <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	689b      	ldr	r3, [r3, #8]
 8013950:	f003 0302 	and.w	r3, r3, #2
 8013954:	2b02      	cmp	r3, #2
 8013956:	d113      	bne.n	8013980 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	330c      	adds	r3, #12
 8013962:	7812      	ldrb	r2, [r2, #0]
 8013964:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801396a:	1c5a      	adds	r2, r3, #1
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013974:	b29b      	uxth	r3, r3
 8013976:	3b01      	subs	r3, #1
 8013978:	b29a      	uxth	r2, r3
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	86da      	strh	r2, [r3, #54]	; 0x36
 801397e:	e015      	b.n	80139ac <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013980:	f7fb fbfa 	bl	800f178 <HAL_GetTick>
 8013984:	4602      	mov	r2, r0
 8013986:	69bb      	ldr	r3, [r7, #24]
 8013988:	1ad3      	subs	r3, r2, r3
 801398a:	683a      	ldr	r2, [r7, #0]
 801398c:	429a      	cmp	r2, r3
 801398e:	d803      	bhi.n	8013998 <HAL_SPI_Transmit+0x20c>
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013996:	d102      	bne.n	801399e <HAL_SPI_Transmit+0x212>
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d106      	bne.n	80139ac <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 801399e:	2303      	movs	r3, #3
 80139a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2201      	movs	r2, #1
 80139a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80139aa:	e029      	b.n	8013a00 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d1c9      	bne.n	801394a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80139b6:	69ba      	ldr	r2, [r7, #24]
 80139b8:	6839      	ldr	r1, [r7, #0]
 80139ba:	68f8      	ldr	r0, [r7, #12]
 80139bc:	f000 fbe0 	bl	8014180 <SPI_EndRxTxTransaction>
 80139c0:	4603      	mov	r3, r0
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d002      	beq.n	80139cc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2220      	movs	r2, #32
 80139ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	689b      	ldr	r3, [r3, #8]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d10a      	bne.n	80139ea <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80139d4:	2300      	movs	r3, #0
 80139d6:	613b      	str	r3, [r7, #16]
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	613b      	str	r3, [r7, #16]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	689b      	ldr	r3, [r3, #8]
 80139e6:	613b      	str	r3, [r7, #16]
 80139e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d002      	beq.n	80139f8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80139f2:	2301      	movs	r3, #1
 80139f4:	77fb      	strb	r3, [r7, #31]
 80139f6:	e003      	b.n	8013a00 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	2201      	movs	r2, #1
 80139fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	2200      	movs	r2, #0
 8013a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013a08:	7ffb      	ldrb	r3, [r7, #31]
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3720      	adds	r7, #32
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}

08013a12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013a12:	b580      	push	{r7, lr}
 8013a14:	b088      	sub	sp, #32
 8013a16:	af02      	add	r7, sp, #8
 8013a18:	60f8      	str	r0, [r7, #12]
 8013a1a:	60b9      	str	r1, [r7, #8]
 8013a1c:	603b      	str	r3, [r7, #0]
 8013a1e:	4613      	mov	r3, r2
 8013a20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013a22:	2300      	movs	r3, #0
 8013a24:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	d002      	beq.n	8013a38 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8013a32:	2302      	movs	r3, #2
 8013a34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a36:	e0fb      	b.n	8013c30 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013a40:	d112      	bne.n	8013a68 <HAL_SPI_Receive+0x56>
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	689b      	ldr	r3, [r3, #8]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d10e      	bne.n	8013a68 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2204      	movs	r2, #4
 8013a4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013a52:	88fa      	ldrh	r2, [r7, #6]
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	9300      	str	r3, [sp, #0]
 8013a58:	4613      	mov	r3, r2
 8013a5a:	68ba      	ldr	r2, [r7, #8]
 8013a5c:	68b9      	ldr	r1, [r7, #8]
 8013a5e:	68f8      	ldr	r0, [r7, #12]
 8013a60:	f000 f8ef 	bl	8013c42 <HAL_SPI_TransmitReceive>
 8013a64:	4603      	mov	r3, r0
 8013a66:	e0e8      	b.n	8013c3a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d101      	bne.n	8013a76 <HAL_SPI_Receive+0x64>
 8013a72:	2302      	movs	r3, #2
 8013a74:	e0e1      	b.n	8013c3a <HAL_SPI_Receive+0x228>
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2201      	movs	r2, #1
 8013a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013a7e:	f7fb fb7b 	bl	800f178 <HAL_GetTick>
 8013a82:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d002      	beq.n	8013a90 <HAL_SPI_Receive+0x7e>
 8013a8a:	88fb      	ldrh	r3, [r7, #6]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d102      	bne.n	8013a96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013a90:	2301      	movs	r3, #1
 8013a92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a94:	e0cc      	b.n	8013c30 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	2204      	movs	r2, #4
 8013a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	88fa      	ldrh	r2, [r7, #6]
 8013aae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	88fa      	ldrh	r2, [r7, #6]
 8013ab4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2200      	movs	r2, #0
 8013acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	689b      	ldr	r3, [r3, #8]
 8013ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013adc:	d10f      	bne.n	8013afe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	681a      	ldr	r2, [r3, #0]
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013aec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	681a      	ldr	r2, [r3, #0]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013afc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b08:	2b40      	cmp	r3, #64	; 0x40
 8013b0a:	d007      	beq.n	8013b1c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	681a      	ldr	r2, [r3, #0]
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013b1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	68db      	ldr	r3, [r3, #12]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d16a      	bne.n	8013bfa <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013b24:	e032      	b.n	8013b8c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	689b      	ldr	r3, [r3, #8]
 8013b2c:	f003 0301 	and.w	r3, r3, #1
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	d115      	bne.n	8013b60 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	f103 020c 	add.w	r2, r3, #12
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b40:	7812      	ldrb	r2, [r2, #0]
 8013b42:	b2d2      	uxtb	r2, r2
 8013b44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b4a:	1c5a      	adds	r2, r3, #1
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	3b01      	subs	r3, #1
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013b5e:	e015      	b.n	8013b8c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013b60:	f7fb fb0a 	bl	800f178 <HAL_GetTick>
 8013b64:	4602      	mov	r2, r0
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	1ad3      	subs	r3, r2, r3
 8013b6a:	683a      	ldr	r2, [r7, #0]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d803      	bhi.n	8013b78 <HAL_SPI_Receive+0x166>
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b76:	d102      	bne.n	8013b7e <HAL_SPI_Receive+0x16c>
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d106      	bne.n	8013b8c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8013b7e:	2303      	movs	r3, #3
 8013b80:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2201      	movs	r2, #1
 8013b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8013b8a:	e051      	b.n	8013c30 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d1c7      	bne.n	8013b26 <HAL_SPI_Receive+0x114>
 8013b96:	e035      	b.n	8013c04 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	689b      	ldr	r3, [r3, #8]
 8013b9e:	f003 0301 	and.w	r3, r3, #1
 8013ba2:	2b01      	cmp	r3, #1
 8013ba4:	d113      	bne.n	8013bce <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	68da      	ldr	r2, [r3, #12]
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bb0:	b292      	uxth	r2, r2
 8013bb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bb8:	1c9a      	adds	r2, r3, #2
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013bc2:	b29b      	uxth	r3, r3
 8013bc4:	3b01      	subs	r3, #1
 8013bc6:	b29a      	uxth	r2, r3
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013bcc:	e015      	b.n	8013bfa <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013bce:	f7fb fad3 	bl	800f178 <HAL_GetTick>
 8013bd2:	4602      	mov	r2, r0
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	1ad3      	subs	r3, r2, r3
 8013bd8:	683a      	ldr	r2, [r7, #0]
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d803      	bhi.n	8013be6 <HAL_SPI_Receive+0x1d4>
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013be4:	d102      	bne.n	8013bec <HAL_SPI_Receive+0x1da>
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d106      	bne.n	8013bfa <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8013bec:	2303      	movs	r3, #3
 8013bee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8013bf8:	e01a      	b.n	8013c30 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013bfe:	b29b      	uxth	r3, r3
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d1c9      	bne.n	8013b98 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013c04:	693a      	ldr	r2, [r7, #16]
 8013c06:	6839      	ldr	r1, [r7, #0]
 8013c08:	68f8      	ldr	r0, [r7, #12]
 8013c0a:	f000 fa53 	bl	80140b4 <SPI_EndRxTransaction>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d002      	beq.n	8013c1a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2220      	movs	r2, #32
 8013c18:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d002      	beq.n	8013c28 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8013c22:	2301      	movs	r3, #1
 8013c24:	75fb      	strb	r3, [r7, #23]
 8013c26:	e003      	b.n	8013c30 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2201      	movs	r2, #1
 8013c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	2200      	movs	r2, #0
 8013c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3718      	adds	r7, #24
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013c42:	b580      	push	{r7, lr}
 8013c44:	b08c      	sub	sp, #48	; 0x30
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	60f8      	str	r0, [r7, #12]
 8013c4a:	60b9      	str	r1, [r7, #8]
 8013c4c:	607a      	str	r2, [r7, #4]
 8013c4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013c50:	2301      	movs	r3, #1
 8013c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013c54:	2300      	movs	r3, #0
 8013c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013c60:	2b01      	cmp	r3, #1
 8013c62:	d101      	bne.n	8013c68 <HAL_SPI_TransmitReceive+0x26>
 8013c64:	2302      	movs	r3, #2
 8013c66:	e198      	b.n	8013f9a <HAL_SPI_TransmitReceive+0x358>
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	2201      	movs	r2, #1
 8013c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013c70:	f7fb fa82 	bl	800f178 <HAL_GetTick>
 8013c74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	685b      	ldr	r3, [r3, #4]
 8013c84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013c86:	887b      	ldrh	r3, [r7, #2]
 8013c88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013c8e:	2b01      	cmp	r3, #1
 8013c90:	d00f      	beq.n	8013cb2 <HAL_SPI_TransmitReceive+0x70>
 8013c92:	69fb      	ldr	r3, [r7, #28]
 8013c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013c98:	d107      	bne.n	8013caa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d103      	bne.n	8013caa <HAL_SPI_TransmitReceive+0x68>
 8013ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013ca6:	2b04      	cmp	r3, #4
 8013ca8:	d003      	beq.n	8013cb2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013caa:	2302      	movs	r3, #2
 8013cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013cb0:	e16d      	b.n	8013f8e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d005      	beq.n	8013cc4 <HAL_SPI_TransmitReceive+0x82>
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d002      	beq.n	8013cc4 <HAL_SPI_TransmitReceive+0x82>
 8013cbe:	887b      	ldrh	r3, [r7, #2]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d103      	bne.n	8013ccc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013cca:	e160      	b.n	8013f8e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013cd2:	b2db      	uxtb	r3, r3
 8013cd4:	2b04      	cmp	r3, #4
 8013cd6:	d003      	beq.n	8013ce0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	2205      	movs	r2, #5
 8013cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	687a      	ldr	r2, [r7, #4]
 8013cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	887a      	ldrh	r2, [r7, #2]
 8013cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	887a      	ldrh	r2, [r7, #2]
 8013cf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	68ba      	ldr	r2, [r7, #8]
 8013cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	887a      	ldrh	r2, [r7, #2]
 8013d02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	887a      	ldrh	r2, [r7, #2]
 8013d08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	2200      	movs	r2, #0
 8013d14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d20:	2b40      	cmp	r3, #64	; 0x40
 8013d22:	d007      	beq.n	8013d34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	68db      	ldr	r3, [r3, #12]
 8013d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013d3c:	d17c      	bne.n	8013e38 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d002      	beq.n	8013d4c <HAL_SPI_TransmitReceive+0x10a>
 8013d46:	8b7b      	ldrh	r3, [r7, #26]
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	d16a      	bne.n	8013e22 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d50:	881a      	ldrh	r2, [r3, #0]
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d5c:	1c9a      	adds	r2, r3, #2
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	3b01      	subs	r3, #1
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013d70:	e057      	b.n	8013e22 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	689b      	ldr	r3, [r3, #8]
 8013d78:	f003 0302 	and.w	r3, r3, #2
 8013d7c:	2b02      	cmp	r3, #2
 8013d7e:	d11b      	bne.n	8013db8 <HAL_SPI_TransmitReceive+0x176>
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d016      	beq.n	8013db8 <HAL_SPI_TransmitReceive+0x176>
 8013d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d8c:	2b01      	cmp	r3, #1
 8013d8e:	d113      	bne.n	8013db8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d94:	881a      	ldrh	r2, [r3, #0]
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013da0:	1c9a      	adds	r2, r3, #2
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	3b01      	subs	r3, #1
 8013dae:	b29a      	uxth	r2, r3
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013db4:	2300      	movs	r3, #0
 8013db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	689b      	ldr	r3, [r3, #8]
 8013dbe:	f003 0301 	and.w	r3, r3, #1
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d119      	bne.n	8013dfa <HAL_SPI_TransmitReceive+0x1b8>
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d014      	beq.n	8013dfa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	68da      	ldr	r2, [r3, #12]
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dda:	b292      	uxth	r2, r2
 8013ddc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013de2:	1c9a      	adds	r2, r3, #2
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013dec:	b29b      	uxth	r3, r3
 8013dee:	3b01      	subs	r3, #1
 8013df0:	b29a      	uxth	r2, r3
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013df6:	2301      	movs	r3, #1
 8013df8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013dfa:	f7fb f9bd 	bl	800f178 <HAL_GetTick>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e02:	1ad3      	subs	r3, r2, r3
 8013e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d80b      	bhi.n	8013e22 <HAL_SPI_TransmitReceive+0x1e0>
 8013e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e10:	d007      	beq.n	8013e22 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8013e12:	2303      	movs	r3, #3
 8013e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8013e20:	e0b5      	b.n	8013f8e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d1a2      	bne.n	8013d72 <HAL_SPI_TransmitReceive+0x130>
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013e30:	b29b      	uxth	r3, r3
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d19d      	bne.n	8013d72 <HAL_SPI_TransmitReceive+0x130>
 8013e36:	e080      	b.n	8013f3a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	685b      	ldr	r3, [r3, #4]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d002      	beq.n	8013e46 <HAL_SPI_TransmitReceive+0x204>
 8013e40:	8b7b      	ldrh	r3, [r7, #26]
 8013e42:	2b01      	cmp	r3, #1
 8013e44:	d16f      	bne.n	8013f26 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	330c      	adds	r3, #12
 8013e50:	7812      	ldrb	r2, [r2, #0]
 8013e52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e58:	1c5a      	adds	r2, r3, #1
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	3b01      	subs	r3, #1
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013e6c:	e05b      	b.n	8013f26 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	689b      	ldr	r3, [r3, #8]
 8013e74:	f003 0302 	and.w	r3, r3, #2
 8013e78:	2b02      	cmp	r3, #2
 8013e7a:	d11c      	bne.n	8013eb6 <HAL_SPI_TransmitReceive+0x274>
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013e80:	b29b      	uxth	r3, r3
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d017      	beq.n	8013eb6 <HAL_SPI_TransmitReceive+0x274>
 8013e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e88:	2b01      	cmp	r3, #1
 8013e8a:	d114      	bne.n	8013eb6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	330c      	adds	r3, #12
 8013e96:	7812      	ldrb	r2, [r2, #0]
 8013e98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e9e:	1c5a      	adds	r2, r3, #1
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	3b01      	subs	r3, #1
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	f003 0301 	and.w	r3, r3, #1
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d119      	bne.n	8013ef8 <HAL_SPI_TransmitReceive+0x2b6>
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ec8:	b29b      	uxth	r3, r3
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d014      	beq.n	8013ef8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	68da      	ldr	r2, [r3, #12]
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ed8:	b2d2      	uxtb	r2, r2
 8013eda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ee0:	1c5a      	adds	r2, r3, #1
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	3b01      	subs	r3, #1
 8013eee:	b29a      	uxth	r2, r3
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013ef8:	f7fb f93e 	bl	800f178 <HAL_GetTick>
 8013efc:	4602      	mov	r2, r0
 8013efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f00:	1ad3      	subs	r3, r2, r3
 8013f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d803      	bhi.n	8013f10 <HAL_SPI_TransmitReceive+0x2ce>
 8013f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f0e:	d102      	bne.n	8013f16 <HAL_SPI_TransmitReceive+0x2d4>
 8013f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d107      	bne.n	8013f26 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8013f16:	2303      	movs	r3, #3
 8013f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	2201      	movs	r2, #1
 8013f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8013f24:	e033      	b.n	8013f8e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f2a:	b29b      	uxth	r3, r3
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d19e      	bne.n	8013e6e <HAL_SPI_TransmitReceive+0x22c>
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d199      	bne.n	8013e6e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f3e:	68f8      	ldr	r0, [r7, #12]
 8013f40:	f000 f91e 	bl	8014180 <SPI_EndRxTxTransaction>
 8013f44:	4603      	mov	r3, r0
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d006      	beq.n	8013f58 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	2220      	movs	r2, #32
 8013f54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013f56:	e01a      	b.n	8013f8e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	689b      	ldr	r3, [r3, #8]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d10a      	bne.n	8013f76 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013f60:	2300      	movs	r3, #0
 8013f62:	617b      	str	r3, [r7, #20]
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	68db      	ldr	r3, [r3, #12]
 8013f6a:	617b      	str	r3, [r7, #20]
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	689b      	ldr	r3, [r3, #8]
 8013f72:	617b      	str	r3, [r7, #20]
 8013f74:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d003      	beq.n	8013f86 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8013f7e:	2301      	movs	r3, #1
 8013f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013f84:	e003      	b.n	8013f8e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	2201      	movs	r2, #1
 8013f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	2200      	movs	r2, #0
 8013f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013f96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3730      	adds	r7, #48	; 0x30
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
	...

08013fa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b088      	sub	sp, #32
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	60f8      	str	r0, [r7, #12]
 8013fac:	60b9      	str	r1, [r7, #8]
 8013fae:	603b      	str	r3, [r7, #0]
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013fb4:	f7fb f8e0 	bl	800f178 <HAL_GetTick>
 8013fb8:	4602      	mov	r2, r0
 8013fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fbc:	1a9b      	subs	r3, r3, r2
 8013fbe:	683a      	ldr	r2, [r7, #0]
 8013fc0:	4413      	add	r3, r2
 8013fc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8013fc4:	f7fb f8d8 	bl	800f178 <HAL_GetTick>
 8013fc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013fca:	4b39      	ldr	r3, [pc, #228]	; (80140b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	015b      	lsls	r3, r3, #5
 8013fd0:	0d1b      	lsrs	r3, r3, #20
 8013fd2:	69fa      	ldr	r2, [r7, #28]
 8013fd4:	fb02 f303 	mul.w	r3, r2, r3
 8013fd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013fda:	e054      	b.n	8014086 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fe2:	d050      	beq.n	8014086 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013fe4:	f7fb f8c8 	bl	800f178 <HAL_GetTick>
 8013fe8:	4602      	mov	r2, r0
 8013fea:	69bb      	ldr	r3, [r7, #24]
 8013fec:	1ad3      	subs	r3, r2, r3
 8013fee:	69fa      	ldr	r2, [r7, #28]
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d902      	bls.n	8013ffa <SPI_WaitFlagStateUntilTimeout+0x56>
 8013ff4:	69fb      	ldr	r3, [r7, #28]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d13d      	bne.n	8014076 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	685a      	ldr	r2, [r3, #4]
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014008:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014012:	d111      	bne.n	8014038 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	689b      	ldr	r3, [r3, #8]
 8014018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801401c:	d004      	beq.n	8014028 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	689b      	ldr	r3, [r3, #8]
 8014022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014026:	d107      	bne.n	8014038 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	681a      	ldr	r2, [r3, #0]
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014036:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801403c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014040:	d10f      	bne.n	8014062 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014050:	601a      	str	r2, [r3, #0]
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	681a      	ldr	r2, [r3, #0]
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014060:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	2201      	movs	r2, #1
 8014066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2200      	movs	r2, #0
 801406e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014072:	2303      	movs	r3, #3
 8014074:	e017      	b.n	80140a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d101      	bne.n	8014080 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801407c:	2300      	movs	r3, #0
 801407e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	3b01      	subs	r3, #1
 8014084:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	689a      	ldr	r2, [r3, #8]
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	4013      	ands	r3, r2
 8014090:	68ba      	ldr	r2, [r7, #8]
 8014092:	429a      	cmp	r2, r3
 8014094:	bf0c      	ite	eq
 8014096:	2301      	moveq	r3, #1
 8014098:	2300      	movne	r3, #0
 801409a:	b2db      	uxtb	r3, r3
 801409c:	461a      	mov	r2, r3
 801409e:	79fb      	ldrb	r3, [r7, #7]
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d19b      	bne.n	8013fdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80140a4:	2300      	movs	r3, #0
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3720      	adds	r7, #32
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	20000058 	.word	0x20000058

080140b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b086      	sub	sp, #24
 80140b8:	af02      	add	r7, sp, #8
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	60b9      	str	r1, [r7, #8]
 80140be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80140c8:	d111      	bne.n	80140ee <SPI_EndRxTransaction+0x3a>
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	689b      	ldr	r3, [r3, #8]
 80140ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80140d2:	d004      	beq.n	80140de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	689b      	ldr	r3, [r3, #8]
 80140d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80140dc:	d107      	bne.n	80140ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	681a      	ldr	r2, [r3, #0]
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80140ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80140f6:	d12a      	bne.n	801414e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	689b      	ldr	r3, [r3, #8]
 80140fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014100:	d012      	beq.n	8014128 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	9300      	str	r3, [sp, #0]
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	2200      	movs	r2, #0
 801410a:	2180      	movs	r1, #128	; 0x80
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	f7ff ff49 	bl	8013fa4 <SPI_WaitFlagStateUntilTimeout>
 8014112:	4603      	mov	r3, r0
 8014114:	2b00      	cmp	r3, #0
 8014116:	d02d      	beq.n	8014174 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801411c:	f043 0220 	orr.w	r2, r3, #32
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014124:	2303      	movs	r3, #3
 8014126:	e026      	b.n	8014176 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	9300      	str	r3, [sp, #0]
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	2200      	movs	r2, #0
 8014130:	2101      	movs	r1, #1
 8014132:	68f8      	ldr	r0, [r7, #12]
 8014134:	f7ff ff36 	bl	8013fa4 <SPI_WaitFlagStateUntilTimeout>
 8014138:	4603      	mov	r3, r0
 801413a:	2b00      	cmp	r3, #0
 801413c:	d01a      	beq.n	8014174 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014142:	f043 0220 	orr.w	r2, r3, #32
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801414a:	2303      	movs	r3, #3
 801414c:	e013      	b.n	8014176 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	9300      	str	r3, [sp, #0]
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	2200      	movs	r2, #0
 8014156:	2101      	movs	r1, #1
 8014158:	68f8      	ldr	r0, [r7, #12]
 801415a:	f7ff ff23 	bl	8013fa4 <SPI_WaitFlagStateUntilTimeout>
 801415e:	4603      	mov	r3, r0
 8014160:	2b00      	cmp	r3, #0
 8014162:	d007      	beq.n	8014174 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014168:	f043 0220 	orr.w	r2, r3, #32
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014170:	2303      	movs	r3, #3
 8014172:	e000      	b.n	8014176 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014174:	2300      	movs	r3, #0
}
 8014176:	4618      	mov	r0, r3
 8014178:	3710      	adds	r7, #16
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
	...

08014180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b088      	sub	sp, #32
 8014184:	af02      	add	r7, sp, #8
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	2201      	movs	r2, #1
 8014194:	2102      	movs	r1, #2
 8014196:	68f8      	ldr	r0, [r7, #12]
 8014198:	f7ff ff04 	bl	8013fa4 <SPI_WaitFlagStateUntilTimeout>
 801419c:	4603      	mov	r3, r0
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d007      	beq.n	80141b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141a6:	f043 0220 	orr.w	r2, r3, #32
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80141ae:	2303      	movs	r3, #3
 80141b0:	e032      	b.n	8014218 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80141b2:	4b1b      	ldr	r3, [pc, #108]	; (8014220 <SPI_EndRxTxTransaction+0xa0>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	4a1b      	ldr	r2, [pc, #108]	; (8014224 <SPI_EndRxTxTransaction+0xa4>)
 80141b8:	fba2 2303 	umull	r2, r3, r2, r3
 80141bc:	0d5b      	lsrs	r3, r3, #21
 80141be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80141c2:	fb02 f303 	mul.w	r3, r2, r3
 80141c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	685b      	ldr	r3, [r3, #4]
 80141cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80141d0:	d112      	bne.n	80141f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	9300      	str	r3, [sp, #0]
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	2200      	movs	r2, #0
 80141da:	2180      	movs	r1, #128	; 0x80
 80141dc:	68f8      	ldr	r0, [r7, #12]
 80141de:	f7ff fee1 	bl	8013fa4 <SPI_WaitFlagStateUntilTimeout>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d016      	beq.n	8014216 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141ec:	f043 0220 	orr.w	r2, r3, #32
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80141f4:	2303      	movs	r3, #3
 80141f6:	e00f      	b.n	8014218 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d00a      	beq.n	8014214 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	3b01      	subs	r3, #1
 8014202:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	689b      	ldr	r3, [r3, #8]
 801420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801420e:	2b80      	cmp	r3, #128	; 0x80
 8014210:	d0f2      	beq.n	80141f8 <SPI_EndRxTxTransaction+0x78>
 8014212:	e000      	b.n	8014216 <SPI_EndRxTxTransaction+0x96>
        break;
 8014214:	bf00      	nop
  }

  return HAL_OK;
 8014216:	2300      	movs	r3, #0
}
 8014218:	4618      	mov	r0, r3
 801421a:	3718      	adds	r7, #24
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	20000058 	.word	0x20000058
 8014224:	165e9f81 	.word	0x165e9f81

08014228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d101      	bne.n	801423a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014236:	2301      	movs	r3, #1
 8014238:	e041      	b.n	80142be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014240:	b2db      	uxtb	r3, r3
 8014242:	2b00      	cmp	r3, #0
 8014244:	d106      	bne.n	8014254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2200      	movs	r2, #0
 801424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f7fa f806 	bl	800e260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2202      	movs	r2, #2
 8014258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	3304      	adds	r3, #4
 8014264:	4619      	mov	r1, r3
 8014266:	4610      	mov	r0, r2
 8014268:	f000 fa7e 	bl	8014768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2201      	movs	r2, #1
 8014270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2201      	movs	r2, #1
 8014278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	2201      	movs	r2, #1
 8014280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2201      	movs	r2, #1
 8014288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2201      	movs	r2, #1
 8014290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2201      	movs	r2, #1
 8014298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2201      	movs	r2, #1
 80142a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2201      	movs	r2, #1
 80142a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2201      	movs	r2, #1
 80142b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2201      	movs	r2, #1
 80142b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80142bc:	2300      	movs	r3, #0
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3708      	adds	r7, #8
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
	...

080142c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b085      	sub	sp, #20
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	2b01      	cmp	r3, #1
 80142da:	d001      	beq.n	80142e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80142dc:	2301      	movs	r3, #1
 80142de:	e04e      	b.n	801437e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2202      	movs	r2, #2
 80142e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	68da      	ldr	r2, [r3, #12]
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	f042 0201 	orr.w	r2, r2, #1
 80142f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4a23      	ldr	r2, [pc, #140]	; (801438c <HAL_TIM_Base_Start_IT+0xc4>)
 80142fe:	4293      	cmp	r3, r2
 8014300:	d022      	beq.n	8014348 <HAL_TIM_Base_Start_IT+0x80>
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801430a:	d01d      	beq.n	8014348 <HAL_TIM_Base_Start_IT+0x80>
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	4a1f      	ldr	r2, [pc, #124]	; (8014390 <HAL_TIM_Base_Start_IT+0xc8>)
 8014312:	4293      	cmp	r3, r2
 8014314:	d018      	beq.n	8014348 <HAL_TIM_Base_Start_IT+0x80>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	4a1e      	ldr	r2, [pc, #120]	; (8014394 <HAL_TIM_Base_Start_IT+0xcc>)
 801431c:	4293      	cmp	r3, r2
 801431e:	d013      	beq.n	8014348 <HAL_TIM_Base_Start_IT+0x80>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	4a1c      	ldr	r2, [pc, #112]	; (8014398 <HAL_TIM_Base_Start_IT+0xd0>)
 8014326:	4293      	cmp	r3, r2
 8014328:	d00e      	beq.n	8014348 <HAL_TIM_Base_Start_IT+0x80>
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	4a1b      	ldr	r2, [pc, #108]	; (801439c <HAL_TIM_Base_Start_IT+0xd4>)
 8014330:	4293      	cmp	r3, r2
 8014332:	d009      	beq.n	8014348 <HAL_TIM_Base_Start_IT+0x80>
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	4a19      	ldr	r2, [pc, #100]	; (80143a0 <HAL_TIM_Base_Start_IT+0xd8>)
 801433a:	4293      	cmp	r3, r2
 801433c:	d004      	beq.n	8014348 <HAL_TIM_Base_Start_IT+0x80>
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	4a18      	ldr	r2, [pc, #96]	; (80143a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8014344:	4293      	cmp	r3, r2
 8014346:	d111      	bne.n	801436c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	689b      	ldr	r3, [r3, #8]
 801434e:	f003 0307 	and.w	r3, r3, #7
 8014352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	2b06      	cmp	r3, #6
 8014358:	d010      	beq.n	801437c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	f042 0201 	orr.w	r2, r2, #1
 8014368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801436a:	e007      	b.n	801437c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	681a      	ldr	r2, [r3, #0]
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	f042 0201 	orr.w	r2, r2, #1
 801437a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801437c:	2300      	movs	r3, #0
}
 801437e:	4618      	mov	r0, r3
 8014380:	3714      	adds	r7, #20
 8014382:	46bd      	mov	sp, r7
 8014384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014388:	4770      	bx	lr
 801438a:	bf00      	nop
 801438c:	40010000 	.word	0x40010000
 8014390:	40000400 	.word	0x40000400
 8014394:	40000800 	.word	0x40000800
 8014398:	40000c00 	.word	0x40000c00
 801439c:	40010400 	.word	0x40010400
 80143a0:	40014000 	.word	0x40014000
 80143a4:	40001800 	.word	0x40001800

080143a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	68db      	ldr	r3, [r3, #12]
 80143b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	691b      	ldr	r3, [r3, #16]
 80143be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	f003 0302 	and.w	r3, r3, #2
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d020      	beq.n	801440c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	f003 0302 	and.w	r3, r3, #2
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d01b      	beq.n	801440c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	f06f 0202 	mvn.w	r2, #2
 80143dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2201      	movs	r2, #1
 80143e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	699b      	ldr	r3, [r3, #24]
 80143ea:	f003 0303 	and.w	r3, r3, #3
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d003      	beq.n	80143fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f000 f999 	bl	801472a <HAL_TIM_IC_CaptureCallback>
 80143f8:	e005      	b.n	8014406 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f000 f98b 	bl	8014716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f000 f99c 	bl	801473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2200      	movs	r2, #0
 801440a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	f003 0304 	and.w	r3, r3, #4
 8014412:	2b00      	cmp	r3, #0
 8014414:	d020      	beq.n	8014458 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	f003 0304 	and.w	r3, r3, #4
 801441c:	2b00      	cmp	r3, #0
 801441e:	d01b      	beq.n	8014458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	f06f 0204 	mvn.w	r2, #4
 8014428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2202      	movs	r2, #2
 801442e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	699b      	ldr	r3, [r3, #24]
 8014436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801443a:	2b00      	cmp	r3, #0
 801443c:	d003      	beq.n	8014446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f000 f973 	bl	801472a <HAL_TIM_IC_CaptureCallback>
 8014444:	e005      	b.n	8014452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f000 f965 	bl	8014716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f000 f976 	bl	801473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2200      	movs	r2, #0
 8014456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	f003 0308 	and.w	r3, r3, #8
 801445e:	2b00      	cmp	r3, #0
 8014460:	d020      	beq.n	80144a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	f003 0308 	and.w	r3, r3, #8
 8014468:	2b00      	cmp	r3, #0
 801446a:	d01b      	beq.n	80144a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	f06f 0208 	mvn.w	r2, #8
 8014474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2204      	movs	r2, #4
 801447a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	69db      	ldr	r3, [r3, #28]
 8014482:	f003 0303 	and.w	r3, r3, #3
 8014486:	2b00      	cmp	r3, #0
 8014488:	d003      	beq.n	8014492 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f000 f94d 	bl	801472a <HAL_TIM_IC_CaptureCallback>
 8014490:	e005      	b.n	801449e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f000 f93f 	bl	8014716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f000 f950 	bl	801473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2200      	movs	r2, #0
 80144a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	f003 0310 	and.w	r3, r3, #16
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d020      	beq.n	80144f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	f003 0310 	and.w	r3, r3, #16
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d01b      	beq.n	80144f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	f06f 0210 	mvn.w	r2, #16
 80144c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2208      	movs	r2, #8
 80144c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	69db      	ldr	r3, [r3, #28]
 80144ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d003      	beq.n	80144de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f000 f927 	bl	801472a <HAL_TIM_IC_CaptureCallback>
 80144dc:	e005      	b.n	80144ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f000 f919 	bl	8014716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f000 f92a 	bl	801473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	2200      	movs	r2, #0
 80144ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	f003 0301 	and.w	r3, r3, #1
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d00c      	beq.n	8014514 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	f003 0301 	and.w	r3, r3, #1
 8014500:	2b00      	cmp	r3, #0
 8014502:	d007      	beq.n	8014514 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	f06f 0201 	mvn.w	r2, #1
 801450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f7f9 f980 	bl	800d814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801451a:	2b00      	cmp	r3, #0
 801451c:	d00c      	beq.n	8014538 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014524:	2b00      	cmp	r3, #0
 8014526:	d007      	beq.n	8014538 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f000 fae4 	bl	8014b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00c      	beq.n	801455c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014548:	2b00      	cmp	r3, #0
 801454a:	d007      	beq.n	801455c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f000 f8fb 	bl	8014752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	f003 0320 	and.w	r3, r3, #32
 8014562:	2b00      	cmp	r3, #0
 8014564:	d00c      	beq.n	8014580 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	f003 0320 	and.w	r3, r3, #32
 801456c:	2b00      	cmp	r3, #0
 801456e:	d007      	beq.n	8014580 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	f06f 0220 	mvn.w	r2, #32
 8014578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 fab6 	bl	8014aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014580:	bf00      	nop
 8014582:	3710      	adds	r7, #16
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}

08014588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b084      	sub	sp, #16
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014592:	2300      	movs	r3, #0
 8014594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801459c:	2b01      	cmp	r3, #1
 801459e:	d101      	bne.n	80145a4 <HAL_TIM_ConfigClockSource+0x1c>
 80145a0:	2302      	movs	r3, #2
 80145a2:	e0b4      	b.n	801470e <HAL_TIM_ConfigClockSource+0x186>
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2201      	movs	r2, #1
 80145a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2202      	movs	r2, #2
 80145b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	689b      	ldr	r3, [r3, #8]
 80145ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80145c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80145ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	68ba      	ldr	r2, [r7, #8]
 80145d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80145dc:	d03e      	beq.n	801465c <HAL_TIM_ConfigClockSource+0xd4>
 80145de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80145e2:	f200 8087 	bhi.w	80146f4 <HAL_TIM_ConfigClockSource+0x16c>
 80145e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80145ea:	f000 8086 	beq.w	80146fa <HAL_TIM_ConfigClockSource+0x172>
 80145ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80145f2:	d87f      	bhi.n	80146f4 <HAL_TIM_ConfigClockSource+0x16c>
 80145f4:	2b70      	cmp	r3, #112	; 0x70
 80145f6:	d01a      	beq.n	801462e <HAL_TIM_ConfigClockSource+0xa6>
 80145f8:	2b70      	cmp	r3, #112	; 0x70
 80145fa:	d87b      	bhi.n	80146f4 <HAL_TIM_ConfigClockSource+0x16c>
 80145fc:	2b60      	cmp	r3, #96	; 0x60
 80145fe:	d050      	beq.n	80146a2 <HAL_TIM_ConfigClockSource+0x11a>
 8014600:	2b60      	cmp	r3, #96	; 0x60
 8014602:	d877      	bhi.n	80146f4 <HAL_TIM_ConfigClockSource+0x16c>
 8014604:	2b50      	cmp	r3, #80	; 0x50
 8014606:	d03c      	beq.n	8014682 <HAL_TIM_ConfigClockSource+0xfa>
 8014608:	2b50      	cmp	r3, #80	; 0x50
 801460a:	d873      	bhi.n	80146f4 <HAL_TIM_ConfigClockSource+0x16c>
 801460c:	2b40      	cmp	r3, #64	; 0x40
 801460e:	d058      	beq.n	80146c2 <HAL_TIM_ConfigClockSource+0x13a>
 8014610:	2b40      	cmp	r3, #64	; 0x40
 8014612:	d86f      	bhi.n	80146f4 <HAL_TIM_ConfigClockSource+0x16c>
 8014614:	2b30      	cmp	r3, #48	; 0x30
 8014616:	d064      	beq.n	80146e2 <HAL_TIM_ConfigClockSource+0x15a>
 8014618:	2b30      	cmp	r3, #48	; 0x30
 801461a:	d86b      	bhi.n	80146f4 <HAL_TIM_ConfigClockSource+0x16c>
 801461c:	2b20      	cmp	r3, #32
 801461e:	d060      	beq.n	80146e2 <HAL_TIM_ConfigClockSource+0x15a>
 8014620:	2b20      	cmp	r3, #32
 8014622:	d867      	bhi.n	80146f4 <HAL_TIM_ConfigClockSource+0x16c>
 8014624:	2b00      	cmp	r3, #0
 8014626:	d05c      	beq.n	80146e2 <HAL_TIM_ConfigClockSource+0x15a>
 8014628:	2b10      	cmp	r3, #16
 801462a:	d05a      	beq.n	80146e2 <HAL_TIM_ConfigClockSource+0x15a>
 801462c:	e062      	b.n	80146f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801463e:	f000 f9b9 	bl	80149b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	689b      	ldr	r3, [r3, #8]
 8014648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	68ba      	ldr	r2, [r7, #8]
 8014658:	609a      	str	r2, [r3, #8]
      break;
 801465a:	e04f      	b.n	80146fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801466c:	f000 f9a2 	bl	80149b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	689a      	ldr	r2, [r3, #8]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801467e:	609a      	str	r2, [r3, #8]
      break;
 8014680:	e03c      	b.n	80146fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801468e:	461a      	mov	r2, r3
 8014690:	f000 f916 	bl	80148c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	2150      	movs	r1, #80	; 0x50
 801469a:	4618      	mov	r0, r3
 801469c:	f000 f96f 	bl	801497e <TIM_ITRx_SetConfig>
      break;
 80146a0:	e02c      	b.n	80146fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80146ae:	461a      	mov	r2, r3
 80146b0:	f000 f935 	bl	801491e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2160      	movs	r1, #96	; 0x60
 80146ba:	4618      	mov	r0, r3
 80146bc:	f000 f95f 	bl	801497e <TIM_ITRx_SetConfig>
      break;
 80146c0:	e01c      	b.n	80146fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80146ce:	461a      	mov	r2, r3
 80146d0:	f000 f8f6 	bl	80148c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	2140      	movs	r1, #64	; 0x40
 80146da:	4618      	mov	r0, r3
 80146dc:	f000 f94f 	bl	801497e <TIM_ITRx_SetConfig>
      break;
 80146e0:	e00c      	b.n	80146fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681a      	ldr	r2, [r3, #0]
 80146e6:	683b      	ldr	r3, [r7, #0]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	4619      	mov	r1, r3
 80146ec:	4610      	mov	r0, r2
 80146ee:	f000 f946 	bl	801497e <TIM_ITRx_SetConfig>
      break;
 80146f2:	e003      	b.n	80146fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80146f4:	2301      	movs	r3, #1
 80146f6:	73fb      	strb	r3, [r7, #15]
      break;
 80146f8:	e000      	b.n	80146fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80146fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2201      	movs	r2, #1
 8014700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	2200      	movs	r2, #0
 8014708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801470c:	7bfb      	ldrb	r3, [r7, #15]
}
 801470e:	4618      	mov	r0, r3
 8014710:	3710      	adds	r7, #16
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}

08014716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014716:	b480      	push	{r7}
 8014718:	b083      	sub	sp, #12
 801471a:	af00      	add	r7, sp, #0
 801471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801471e:	bf00      	nop
 8014720:	370c      	adds	r7, #12
 8014722:	46bd      	mov	sp, r7
 8014724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014728:	4770      	bx	lr

0801472a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801472a:	b480      	push	{r7}
 801472c:	b083      	sub	sp, #12
 801472e:	af00      	add	r7, sp, #0
 8014730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014732:	bf00      	nop
 8014734:	370c      	adds	r7, #12
 8014736:	46bd      	mov	sp, r7
 8014738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473c:	4770      	bx	lr

0801473e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801473e:	b480      	push	{r7}
 8014740:	b083      	sub	sp, #12
 8014742:	af00      	add	r7, sp, #0
 8014744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014746:	bf00      	nop
 8014748:	370c      	adds	r7, #12
 801474a:	46bd      	mov	sp, r7
 801474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014750:	4770      	bx	lr

08014752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014752:	b480      	push	{r7}
 8014754:	b083      	sub	sp, #12
 8014756:	af00      	add	r7, sp, #0
 8014758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801475a:	bf00      	nop
 801475c:	370c      	adds	r7, #12
 801475e:	46bd      	mov	sp, r7
 8014760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014764:	4770      	bx	lr
	...

08014768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014768:	b480      	push	{r7}
 801476a:	b085      	sub	sp, #20
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
 8014770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	4a46      	ldr	r2, [pc, #280]	; (8014894 <TIM_Base_SetConfig+0x12c>)
 801477c:	4293      	cmp	r3, r2
 801477e:	d013      	beq.n	80147a8 <TIM_Base_SetConfig+0x40>
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014786:	d00f      	beq.n	80147a8 <TIM_Base_SetConfig+0x40>
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4a43      	ldr	r2, [pc, #268]	; (8014898 <TIM_Base_SetConfig+0x130>)
 801478c:	4293      	cmp	r3, r2
 801478e:	d00b      	beq.n	80147a8 <TIM_Base_SetConfig+0x40>
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	4a42      	ldr	r2, [pc, #264]	; (801489c <TIM_Base_SetConfig+0x134>)
 8014794:	4293      	cmp	r3, r2
 8014796:	d007      	beq.n	80147a8 <TIM_Base_SetConfig+0x40>
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	4a41      	ldr	r2, [pc, #260]	; (80148a0 <TIM_Base_SetConfig+0x138>)
 801479c:	4293      	cmp	r3, r2
 801479e:	d003      	beq.n	80147a8 <TIM_Base_SetConfig+0x40>
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	4a40      	ldr	r2, [pc, #256]	; (80148a4 <TIM_Base_SetConfig+0x13c>)
 80147a4:	4293      	cmp	r3, r2
 80147a6:	d108      	bne.n	80147ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80147ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	68fa      	ldr	r2, [r7, #12]
 80147b6:	4313      	orrs	r3, r2
 80147b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	4a35      	ldr	r2, [pc, #212]	; (8014894 <TIM_Base_SetConfig+0x12c>)
 80147be:	4293      	cmp	r3, r2
 80147c0:	d02b      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80147c8:	d027      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	4a32      	ldr	r2, [pc, #200]	; (8014898 <TIM_Base_SetConfig+0x130>)
 80147ce:	4293      	cmp	r3, r2
 80147d0:	d023      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	4a31      	ldr	r2, [pc, #196]	; (801489c <TIM_Base_SetConfig+0x134>)
 80147d6:	4293      	cmp	r3, r2
 80147d8:	d01f      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	4a30      	ldr	r2, [pc, #192]	; (80148a0 <TIM_Base_SetConfig+0x138>)
 80147de:	4293      	cmp	r3, r2
 80147e0:	d01b      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	4a2f      	ldr	r2, [pc, #188]	; (80148a4 <TIM_Base_SetConfig+0x13c>)
 80147e6:	4293      	cmp	r3, r2
 80147e8:	d017      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	4a2e      	ldr	r2, [pc, #184]	; (80148a8 <TIM_Base_SetConfig+0x140>)
 80147ee:	4293      	cmp	r3, r2
 80147f0:	d013      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	4a2d      	ldr	r2, [pc, #180]	; (80148ac <TIM_Base_SetConfig+0x144>)
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d00f      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	4a2c      	ldr	r2, [pc, #176]	; (80148b0 <TIM_Base_SetConfig+0x148>)
 80147fe:	4293      	cmp	r3, r2
 8014800:	d00b      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	4a2b      	ldr	r2, [pc, #172]	; (80148b4 <TIM_Base_SetConfig+0x14c>)
 8014806:	4293      	cmp	r3, r2
 8014808:	d007      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	4a2a      	ldr	r2, [pc, #168]	; (80148b8 <TIM_Base_SetConfig+0x150>)
 801480e:	4293      	cmp	r3, r2
 8014810:	d003      	beq.n	801481a <TIM_Base_SetConfig+0xb2>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	4a29      	ldr	r2, [pc, #164]	; (80148bc <TIM_Base_SetConfig+0x154>)
 8014816:	4293      	cmp	r3, r2
 8014818:	d108      	bne.n	801482c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	68fa      	ldr	r2, [r7, #12]
 8014828:	4313      	orrs	r3, r2
 801482a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	695b      	ldr	r3, [r3, #20]
 8014836:	4313      	orrs	r3, r2
 8014838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	68fa      	ldr	r2, [r7, #12]
 801483e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	689a      	ldr	r2, [r3, #8]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	681a      	ldr	r2, [r3, #0]
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	4a10      	ldr	r2, [pc, #64]	; (8014894 <TIM_Base_SetConfig+0x12c>)
 8014854:	4293      	cmp	r3, r2
 8014856:	d003      	beq.n	8014860 <TIM_Base_SetConfig+0xf8>
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	4a12      	ldr	r2, [pc, #72]	; (80148a4 <TIM_Base_SetConfig+0x13c>)
 801485c:	4293      	cmp	r3, r2
 801485e:	d103      	bne.n	8014868 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	691a      	ldr	r2, [r3, #16]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2201      	movs	r2, #1
 801486c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	691b      	ldr	r3, [r3, #16]
 8014872:	f003 0301 	and.w	r3, r3, #1
 8014876:	2b01      	cmp	r3, #1
 8014878:	d105      	bne.n	8014886 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	691b      	ldr	r3, [r3, #16]
 801487e:	f023 0201 	bic.w	r2, r3, #1
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	611a      	str	r2, [r3, #16]
  }
}
 8014886:	bf00      	nop
 8014888:	3714      	adds	r7, #20
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop
 8014894:	40010000 	.word	0x40010000
 8014898:	40000400 	.word	0x40000400
 801489c:	40000800 	.word	0x40000800
 80148a0:	40000c00 	.word	0x40000c00
 80148a4:	40010400 	.word	0x40010400
 80148a8:	40014000 	.word	0x40014000
 80148ac:	40014400 	.word	0x40014400
 80148b0:	40014800 	.word	0x40014800
 80148b4:	40001800 	.word	0x40001800
 80148b8:	40001c00 	.word	0x40001c00
 80148bc:	40002000 	.word	0x40002000

080148c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80148c0:	b480      	push	{r7}
 80148c2:	b087      	sub	sp, #28
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	60f8      	str	r0, [r7, #12]
 80148c8:	60b9      	str	r1, [r7, #8]
 80148ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	6a1b      	ldr	r3, [r3, #32]
 80148d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	6a1b      	ldr	r3, [r3, #32]
 80148d6:	f023 0201 	bic.w	r2, r3, #1
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	699b      	ldr	r3, [r3, #24]
 80148e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80148ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	011b      	lsls	r3, r3, #4
 80148f0:	693a      	ldr	r2, [r7, #16]
 80148f2:	4313      	orrs	r3, r2
 80148f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	f023 030a 	bic.w	r3, r3, #10
 80148fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80148fe:	697a      	ldr	r2, [r7, #20]
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	4313      	orrs	r3, r2
 8014904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	693a      	ldr	r2, [r7, #16]
 801490a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	697a      	ldr	r2, [r7, #20]
 8014910:	621a      	str	r2, [r3, #32]
}
 8014912:	bf00      	nop
 8014914:	371c      	adds	r7, #28
 8014916:	46bd      	mov	sp, r7
 8014918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491c:	4770      	bx	lr

0801491e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801491e:	b480      	push	{r7}
 8014920:	b087      	sub	sp, #28
 8014922:	af00      	add	r7, sp, #0
 8014924:	60f8      	str	r0, [r7, #12]
 8014926:	60b9      	str	r1, [r7, #8]
 8014928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6a1b      	ldr	r3, [r3, #32]
 801492e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	6a1b      	ldr	r3, [r3, #32]
 8014934:	f023 0210 	bic.w	r2, r3, #16
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	699b      	ldr	r3, [r3, #24]
 8014940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	031b      	lsls	r3, r3, #12
 801494e:	693a      	ldr	r2, [r7, #16]
 8014950:	4313      	orrs	r3, r2
 8014952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801495a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	011b      	lsls	r3, r3, #4
 8014960:	697a      	ldr	r2, [r7, #20]
 8014962:	4313      	orrs	r3, r2
 8014964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	693a      	ldr	r2, [r7, #16]
 801496a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	697a      	ldr	r2, [r7, #20]
 8014970:	621a      	str	r2, [r3, #32]
}
 8014972:	bf00      	nop
 8014974:	371c      	adds	r7, #28
 8014976:	46bd      	mov	sp, r7
 8014978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497c:	4770      	bx	lr

0801497e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801497e:	b480      	push	{r7}
 8014980:	b085      	sub	sp, #20
 8014982:	af00      	add	r7, sp, #0
 8014984:	6078      	str	r0, [r7, #4]
 8014986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	689b      	ldr	r3, [r3, #8]
 801498c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014996:	683a      	ldr	r2, [r7, #0]
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	4313      	orrs	r3, r2
 801499c:	f043 0307 	orr.w	r3, r3, #7
 80149a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	68fa      	ldr	r2, [r7, #12]
 80149a6:	609a      	str	r2, [r3, #8]
}
 80149a8:	bf00      	nop
 80149aa:	3714      	adds	r7, #20
 80149ac:	46bd      	mov	sp, r7
 80149ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b2:	4770      	bx	lr

080149b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80149b4:	b480      	push	{r7}
 80149b6:	b087      	sub	sp, #28
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	60f8      	str	r0, [r7, #12]
 80149bc:	60b9      	str	r1, [r7, #8]
 80149be:	607a      	str	r2, [r7, #4]
 80149c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	689b      	ldr	r3, [r3, #8]
 80149c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80149ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	021a      	lsls	r2, r3, #8
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	431a      	orrs	r2, r3
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	4313      	orrs	r3, r2
 80149dc:	697a      	ldr	r2, [r7, #20]
 80149de:	4313      	orrs	r3, r2
 80149e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	697a      	ldr	r2, [r7, #20]
 80149e6:	609a      	str	r2, [r3, #8]
}
 80149e8:	bf00      	nop
 80149ea:	371c      	adds	r7, #28
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr

080149f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80149f4:	b480      	push	{r7}
 80149f6:	b085      	sub	sp, #20
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014a04:	2b01      	cmp	r3, #1
 8014a06:	d101      	bne.n	8014a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014a08:	2302      	movs	r3, #2
 8014a0a:	e05a      	b.n	8014ac2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2201      	movs	r2, #1
 8014a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2202      	movs	r2, #2
 8014a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	689b      	ldr	r3, [r3, #8]
 8014a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	68fa      	ldr	r2, [r7, #12]
 8014a3a:	4313      	orrs	r3, r2
 8014a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	68fa      	ldr	r2, [r7, #12]
 8014a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	4a21      	ldr	r2, [pc, #132]	; (8014ad0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8014a4c:	4293      	cmp	r3, r2
 8014a4e:	d022      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a58:	d01d      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	4a1d      	ldr	r2, [pc, #116]	; (8014ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8014a60:	4293      	cmp	r3, r2
 8014a62:	d018      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	4a1b      	ldr	r2, [pc, #108]	; (8014ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	d013      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	4a1a      	ldr	r2, [pc, #104]	; (8014adc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8014a74:	4293      	cmp	r3, r2
 8014a76:	d00e      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	4a18      	ldr	r2, [pc, #96]	; (8014ae0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d009      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	4a17      	ldr	r2, [pc, #92]	; (8014ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8014a88:	4293      	cmp	r3, r2
 8014a8a:	d004      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	4a15      	ldr	r2, [pc, #84]	; (8014ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8014a92:	4293      	cmp	r3, r2
 8014a94:	d10c      	bne.n	8014ab0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	685b      	ldr	r3, [r3, #4]
 8014aa2:	68ba      	ldr	r2, [r7, #8]
 8014aa4:	4313      	orrs	r3, r2
 8014aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	68ba      	ldr	r2, [r7, #8]
 8014aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2200      	movs	r2, #0
 8014abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014ac0:	2300      	movs	r3, #0
}
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	3714      	adds	r7, #20
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop
 8014ad0:	40010000 	.word	0x40010000
 8014ad4:	40000400 	.word	0x40000400
 8014ad8:	40000800 	.word	0x40000800
 8014adc:	40000c00 	.word	0x40000c00
 8014ae0:	40010400 	.word	0x40010400
 8014ae4:	40014000 	.word	0x40014000
 8014ae8:	40001800 	.word	0x40001800

08014aec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014aec:	b480      	push	{r7}
 8014aee:	b083      	sub	sp, #12
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014af4:	bf00      	nop
 8014af6:	370c      	adds	r7, #12
 8014af8:	46bd      	mov	sp, r7
 8014afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afe:	4770      	bx	lr

08014b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014b00:	b480      	push	{r7}
 8014b02:	b083      	sub	sp, #12
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014b08:	bf00      	nop
 8014b0a:	370c      	adds	r7, #12
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr

08014b14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b082      	sub	sp, #8
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d101      	bne.n	8014b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014b22:	2301      	movs	r3, #1
 8014b24:	e042      	b.n	8014bac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d106      	bne.n	8014b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	2200      	movs	r2, #0
 8014b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f7f9 fbb8 	bl	800e2b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2224      	movs	r2, #36	; 0x24
 8014b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	68da      	ldr	r2, [r3, #12]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014b56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f000 fdbd 	bl	80156d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	691a      	ldr	r2, [r3, #16]
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014b6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	695a      	ldr	r2, [r3, #20]
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014b7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	68da      	ldr	r2, [r3, #12]
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014b8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2200      	movs	r2, #0
 8014b92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2220      	movs	r2, #32
 8014b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2220      	movs	r2, #32
 8014ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8014baa:	2300      	movs	r3, #0
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3708      	adds	r7, #8
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}

08014bb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b08a      	sub	sp, #40	; 0x28
 8014bb8:	af02      	add	r7, sp, #8
 8014bba:	60f8      	str	r0, [r7, #12]
 8014bbc:	60b9      	str	r1, [r7, #8]
 8014bbe:	603b      	str	r3, [r7, #0]
 8014bc0:	4613      	mov	r3, r2
 8014bc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	2b20      	cmp	r3, #32
 8014bd2:	d175      	bne.n	8014cc0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d002      	beq.n	8014be0 <HAL_UART_Transmit+0x2c>
 8014bda:	88fb      	ldrh	r3, [r7, #6]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d101      	bne.n	8014be4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8014be0:	2301      	movs	r3, #1
 8014be2:	e06e      	b.n	8014cc2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	2200      	movs	r2, #0
 8014be8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	2221      	movs	r2, #33	; 0x21
 8014bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014bf2:	f7fa fac1 	bl	800f178 <HAL_GetTick>
 8014bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	88fa      	ldrh	r2, [r7, #6]
 8014bfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	88fa      	ldrh	r2, [r7, #6]
 8014c02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	689b      	ldr	r3, [r3, #8]
 8014c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014c0c:	d108      	bne.n	8014c20 <HAL_UART_Transmit+0x6c>
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	691b      	ldr	r3, [r3, #16]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d104      	bne.n	8014c20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8014c16:	2300      	movs	r3, #0
 8014c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	61bb      	str	r3, [r7, #24]
 8014c1e:	e003      	b.n	8014c28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014c24:	2300      	movs	r3, #0
 8014c26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014c28:	e02e      	b.n	8014c88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014c2a:	683b      	ldr	r3, [r7, #0]
 8014c2c:	9300      	str	r3, [sp, #0]
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	2200      	movs	r2, #0
 8014c32:	2180      	movs	r1, #128	; 0x80
 8014c34:	68f8      	ldr	r0, [r7, #12]
 8014c36:	f000 fb1f 	bl	8015278 <UART_WaitOnFlagUntilTimeout>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d005      	beq.n	8014c4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2220      	movs	r2, #32
 8014c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8014c48:	2303      	movs	r3, #3
 8014c4a:	e03a      	b.n	8014cc2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8014c4c:	69fb      	ldr	r3, [r7, #28]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d10b      	bne.n	8014c6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	881b      	ldrh	r3, [r3, #0]
 8014c56:	461a      	mov	r2, r3
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014c60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	3302      	adds	r3, #2
 8014c66:	61bb      	str	r3, [r7, #24]
 8014c68:	e007      	b.n	8014c7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8014c6a:	69fb      	ldr	r3, [r7, #28]
 8014c6c:	781a      	ldrb	r2, [r3, #0]
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8014c74:	69fb      	ldr	r3, [r7, #28]
 8014c76:	3301      	adds	r3, #1
 8014c78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014c7e:	b29b      	uxth	r3, r3
 8014c80:	3b01      	subs	r3, #1
 8014c82:	b29a      	uxth	r2, r3
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014c8c:	b29b      	uxth	r3, r3
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d1cb      	bne.n	8014c2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	9300      	str	r3, [sp, #0]
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	2140      	movs	r1, #64	; 0x40
 8014c9c:	68f8      	ldr	r0, [r7, #12]
 8014c9e:	f000 faeb 	bl	8015278 <UART_WaitOnFlagUntilTimeout>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d005      	beq.n	8014cb4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	2220      	movs	r2, #32
 8014cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8014cb0:	2303      	movs	r3, #3
 8014cb2:	e006      	b.n	8014cc2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2220      	movs	r2, #32
 8014cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	e000      	b.n	8014cc2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8014cc0:	2302      	movs	r3, #2
  }
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	3720      	adds	r7, #32
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}

08014cca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014cca:	b580      	push	{r7, lr}
 8014ccc:	b084      	sub	sp, #16
 8014cce:	af00      	add	r7, sp, #0
 8014cd0:	60f8      	str	r0, [r7, #12]
 8014cd2:	60b9      	str	r1, [r7, #8]
 8014cd4:	4613      	mov	r3, r2
 8014cd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014cde:	b2db      	uxtb	r3, r3
 8014ce0:	2b20      	cmp	r3, #32
 8014ce2:	d112      	bne.n	8014d0a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d002      	beq.n	8014cf0 <HAL_UART_Receive_IT+0x26>
 8014cea:	88fb      	ldrh	r3, [r7, #6]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d101      	bne.n	8014cf4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	e00b      	b.n	8014d0c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014cfa:	88fb      	ldrh	r3, [r7, #6]
 8014cfc:	461a      	mov	r2, r3
 8014cfe:	68b9      	ldr	r1, [r7, #8]
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	f000 fb12 	bl	801532a <UART_Start_Receive_IT>
 8014d06:	4603      	mov	r3, r0
 8014d08:	e000      	b.n	8014d0c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8014d0a:	2302      	movs	r3, #2
  }
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3710      	adds	r7, #16
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b0ba      	sub	sp, #232	; 0xe8
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	68db      	ldr	r3, [r3, #12]
 8014d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	695b      	ldr	r3, [r3, #20]
 8014d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8014d40:	2300      	movs	r3, #0
 8014d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8014d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014d4a:	f003 030f 	and.w	r3, r3, #15
 8014d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8014d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d10f      	bne.n	8014d7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014d5e:	f003 0320 	and.w	r3, r3, #32
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d009      	beq.n	8014d7a <HAL_UART_IRQHandler+0x66>
 8014d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014d6a:	f003 0320 	and.w	r3, r3, #32
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d003      	beq.n	8014d7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f000 fbf2 	bl	801555c <UART_Receive_IT>
      return;
 8014d78:	e25b      	b.n	8015232 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8014d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	f000 80de 	beq.w	8014f40 <HAL_UART_IRQHandler+0x22c>
 8014d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d88:	f003 0301 	and.w	r3, r3, #1
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d106      	bne.n	8014d9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8014d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014d94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	f000 80d1 	beq.w	8014f40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8014d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014da2:	f003 0301 	and.w	r3, r3, #1
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d00b      	beq.n	8014dc2 <HAL_UART_IRQHandler+0xae>
 8014daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d005      	beq.n	8014dc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dba:	f043 0201 	orr.w	r2, r3, #1
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014dc6:	f003 0304 	and.w	r3, r3, #4
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d00b      	beq.n	8014de6 <HAL_UART_IRQHandler+0xd2>
 8014dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014dd2:	f003 0301 	and.w	r3, r3, #1
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d005      	beq.n	8014de6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dde:	f043 0202 	orr.w	r2, r3, #2
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014dea:	f003 0302 	and.w	r3, r3, #2
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d00b      	beq.n	8014e0a <HAL_UART_IRQHandler+0xf6>
 8014df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014df6:	f003 0301 	and.w	r3, r3, #1
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d005      	beq.n	8014e0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e02:	f043 0204 	orr.w	r2, r3, #4
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8014e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e0e:	f003 0308 	and.w	r3, r3, #8
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d011      	beq.n	8014e3a <HAL_UART_IRQHandler+0x126>
 8014e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014e1a:	f003 0320 	and.w	r3, r3, #32
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d105      	bne.n	8014e2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8014e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e26:	f003 0301 	and.w	r3, r3, #1
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d005      	beq.n	8014e3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e32:	f043 0208 	orr.w	r2, r3, #8
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	f000 81f2 	beq.w	8015228 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e48:	f003 0320 	and.w	r3, r3, #32
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d008      	beq.n	8014e62 <HAL_UART_IRQHandler+0x14e>
 8014e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014e54:	f003 0320 	and.w	r3, r3, #32
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d002      	beq.n	8014e62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f000 fb7d 	bl	801555c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	695b      	ldr	r3, [r3, #20]
 8014e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e6c:	2b40      	cmp	r3, #64	; 0x40
 8014e6e:	bf0c      	ite	eq
 8014e70:	2301      	moveq	r3, #1
 8014e72:	2300      	movne	r3, #0
 8014e74:	b2db      	uxtb	r3, r3
 8014e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e7e:	f003 0308 	and.w	r3, r3, #8
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d103      	bne.n	8014e8e <HAL_UART_IRQHandler+0x17a>
 8014e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d04f      	beq.n	8014f2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f000 fa85 	bl	801539e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	695b      	ldr	r3, [r3, #20]
 8014e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e9e:	2b40      	cmp	r3, #64	; 0x40
 8014ea0:	d141      	bne.n	8014f26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	3314      	adds	r3, #20
 8014ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014eb0:	e853 3f00 	ldrex	r3, [r3]
 8014eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	3314      	adds	r3, #20
 8014eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014ece:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014ede:	e841 2300 	strex	r3, r2, [r1]
 8014ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d1d9      	bne.n	8014ea2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d013      	beq.n	8014f1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014efa:	4a7e      	ldr	r2, [pc, #504]	; (80150f4 <HAL_UART_IRQHandler+0x3e0>)
 8014efc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7fb f821 	bl	800ff4a <HAL_DMA_Abort_IT>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d016      	beq.n	8014f3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f14:	687a      	ldr	r2, [r7, #4]
 8014f16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8014f18:	4610      	mov	r0, r2
 8014f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f1c:	e00e      	b.n	8014f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f000 f994 	bl	801524c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f24:	e00a      	b.n	8014f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f000 f990 	bl	801524c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f2c:	e006      	b.n	8014f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f000 f98c 	bl	801524c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2200      	movs	r2, #0
 8014f38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8014f3a:	e175      	b.n	8015228 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f3c:	bf00      	nop
    return;
 8014f3e:	e173      	b.n	8015228 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f44:	2b01      	cmp	r3, #1
 8014f46:	f040 814f 	bne.w	80151e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8014f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f4e:	f003 0310 	and.w	r3, r3, #16
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	f000 8148 	beq.w	80151e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8014f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014f5c:	f003 0310 	and.w	r3, r3, #16
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	f000 8141 	beq.w	80151e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8014f66:	2300      	movs	r3, #0
 8014f68:	60bb      	str	r3, [r7, #8]
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	60bb      	str	r3, [r7, #8]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	60bb      	str	r3, [r7, #8]
 8014f7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	695b      	ldr	r3, [r3, #20]
 8014f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f86:	2b40      	cmp	r3, #64	; 0x40
 8014f88:	f040 80b6 	bne.w	80150f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	f000 8145 	beq.w	801522c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014faa:	429a      	cmp	r2, r3
 8014fac:	f080 813e 	bcs.w	801522c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fbc:	69db      	ldr	r3, [r3, #28]
 8014fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014fc2:	f000 8088 	beq.w	80150d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	330c      	adds	r3, #12
 8014fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fd4:	e853 3f00 	ldrex	r3, [r3]
 8014fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	330c      	adds	r3, #12
 8014fee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8014ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015002:	e841 2300 	strex	r3, r2, [r1]
 8015006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801500a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801500e:	2b00      	cmp	r3, #0
 8015010:	d1d9      	bne.n	8014fc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	3314      	adds	r3, #20
 8015018:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801501a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801501c:	e853 3f00 	ldrex	r3, [r3]
 8015020:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8015022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015024:	f023 0301 	bic.w	r3, r3, #1
 8015028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	3314      	adds	r3, #20
 8015032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015036:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801503a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801503c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801503e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015042:	e841 2300 	strex	r3, r2, [r1]
 8015046:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8015048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801504a:	2b00      	cmp	r3, #0
 801504c:	d1e1      	bne.n	8015012 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	3314      	adds	r3, #20
 8015054:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015058:	e853 3f00 	ldrex	r3, [r3]
 801505c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801505e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	3314      	adds	r3, #20
 801506e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015072:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015076:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801507a:	e841 2300 	strex	r3, r2, [r1]
 801507e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015082:	2b00      	cmp	r3, #0
 8015084:	d1e3      	bne.n	801504e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2220      	movs	r2, #32
 801508a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	2200      	movs	r2, #0
 8015092:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	330c      	adds	r3, #12
 801509a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801509c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801509e:	e853 3f00 	ldrex	r3, [r3]
 80150a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80150a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150a6:	f023 0310 	bic.w	r3, r3, #16
 80150aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	330c      	adds	r3, #12
 80150b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80150b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80150ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80150be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80150c0:	e841 2300 	strex	r3, r2, [r1]
 80150c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80150c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d1e3      	bne.n	8015094 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150d0:	4618      	mov	r0, r3
 80150d2:	f7fa feca 	bl	800fe6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2202      	movs	r2, #2
 80150da:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	1ad3      	subs	r3, r2, r3
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	4619      	mov	r1, r3
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f000 f8b7 	bl	8015260 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80150f2:	e09b      	b.n	801522c <HAL_UART_IRQHandler+0x518>
 80150f4:	08015465 	.word	0x08015465
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015100:	b29b      	uxth	r3, r3
 8015102:	1ad3      	subs	r3, r2, r3
 8015104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801510c:	b29b      	uxth	r3, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	f000 808e 	beq.w	8015230 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8015114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8015118:	2b00      	cmp	r3, #0
 801511a:	f000 8089 	beq.w	8015230 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	330c      	adds	r3, #12
 8015124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015128:	e853 3f00 	ldrex	r3, [r3]
 801512c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	330c      	adds	r3, #12
 801513e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015142:	647a      	str	r2, [r7, #68]	; 0x44
 8015144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801514a:	e841 2300 	strex	r3, r2, [r1]
 801514e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015152:	2b00      	cmp	r3, #0
 8015154:	d1e3      	bne.n	801511e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	3314      	adds	r3, #20
 801515c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015160:	e853 3f00 	ldrex	r3, [r3]
 8015164:	623b      	str	r3, [r7, #32]
   return(result);
 8015166:	6a3b      	ldr	r3, [r7, #32]
 8015168:	f023 0301 	bic.w	r3, r3, #1
 801516c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	3314      	adds	r3, #20
 8015176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801517a:	633a      	str	r2, [r7, #48]	; 0x30
 801517c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801517e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015182:	e841 2300 	strex	r3, r2, [r1]
 8015186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801518a:	2b00      	cmp	r3, #0
 801518c:	d1e3      	bne.n	8015156 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2220      	movs	r2, #32
 8015192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2200      	movs	r2, #0
 801519a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	330c      	adds	r3, #12
 80151a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	e853 3f00 	ldrex	r3, [r3]
 80151aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f023 0310 	bic.w	r3, r3, #16
 80151b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	330c      	adds	r3, #12
 80151bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80151c0:	61fa      	str	r2, [r7, #28]
 80151c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151c4:	69b9      	ldr	r1, [r7, #24]
 80151c6:	69fa      	ldr	r2, [r7, #28]
 80151c8:	e841 2300 	strex	r3, r2, [r1]
 80151cc:	617b      	str	r3, [r7, #20]
   return(result);
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d1e3      	bne.n	801519c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2202      	movs	r2, #2
 80151d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80151da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80151de:	4619      	mov	r1, r3
 80151e0:	6878      	ldr	r0, [r7, #4]
 80151e2:	f000 f83d 	bl	8015260 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80151e6:	e023      	b.n	8015230 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80151e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80151ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d009      	beq.n	8015208 <HAL_UART_IRQHandler+0x4f4>
 80151f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80151f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d003      	beq.n	8015208 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f000 f943 	bl	801548c <UART_Transmit_IT>
    return;
 8015206:	e014      	b.n	8015232 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8015208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015210:	2b00      	cmp	r3, #0
 8015212:	d00e      	beq.n	8015232 <HAL_UART_IRQHandler+0x51e>
 8015214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801521c:	2b00      	cmp	r3, #0
 801521e:	d008      	beq.n	8015232 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f000 f983 	bl	801552c <UART_EndTransmit_IT>
    return;
 8015226:	e004      	b.n	8015232 <HAL_UART_IRQHandler+0x51e>
    return;
 8015228:	bf00      	nop
 801522a:	e002      	b.n	8015232 <HAL_UART_IRQHandler+0x51e>
      return;
 801522c:	bf00      	nop
 801522e:	e000      	b.n	8015232 <HAL_UART_IRQHandler+0x51e>
      return;
 8015230:	bf00      	nop
  }
}
 8015232:	37e8      	adds	r7, #232	; 0xe8
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8015238:	b480      	push	{r7}
 801523a:	b083      	sub	sp, #12
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8015240:	bf00      	nop
 8015242:	370c      	adds	r7, #12
 8015244:	46bd      	mov	sp, r7
 8015246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524a:	4770      	bx	lr

0801524c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801524c:	b480      	push	{r7}
 801524e:	b083      	sub	sp, #12
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8015254:	bf00      	nop
 8015256:	370c      	adds	r7, #12
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr

08015260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015260:	b480      	push	{r7}
 8015262:	b083      	sub	sp, #12
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	460b      	mov	r3, r1
 801526a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801526c:	bf00      	nop
 801526e:	370c      	adds	r7, #12
 8015270:	46bd      	mov	sp, r7
 8015272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015276:	4770      	bx	lr

08015278 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b086      	sub	sp, #24
 801527c:	af00      	add	r7, sp, #0
 801527e:	60f8      	str	r0, [r7, #12]
 8015280:	60b9      	str	r1, [r7, #8]
 8015282:	603b      	str	r3, [r7, #0]
 8015284:	4613      	mov	r3, r2
 8015286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015288:	e03b      	b.n	8015302 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801528a:	6a3b      	ldr	r3, [r7, #32]
 801528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015290:	d037      	beq.n	8015302 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015292:	f7f9 ff71 	bl	800f178 <HAL_GetTick>
 8015296:	4602      	mov	r2, r0
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	1ad3      	subs	r3, r2, r3
 801529c:	6a3a      	ldr	r2, [r7, #32]
 801529e:	429a      	cmp	r2, r3
 80152a0:	d302      	bcc.n	80152a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80152a2:	6a3b      	ldr	r3, [r7, #32]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d101      	bne.n	80152ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80152a8:	2303      	movs	r3, #3
 80152aa:	e03a      	b.n	8015322 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	f003 0304 	and.w	r3, r3, #4
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d023      	beq.n	8015302 <UART_WaitOnFlagUntilTimeout+0x8a>
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	2b80      	cmp	r3, #128	; 0x80
 80152be:	d020      	beq.n	8015302 <UART_WaitOnFlagUntilTimeout+0x8a>
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	2b40      	cmp	r3, #64	; 0x40
 80152c4:	d01d      	beq.n	8015302 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	f003 0308 	and.w	r3, r3, #8
 80152d0:	2b08      	cmp	r3, #8
 80152d2:	d116      	bne.n	8015302 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80152d4:	2300      	movs	r3, #0
 80152d6:	617b      	str	r3, [r7, #20]
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	617b      	str	r3, [r7, #20]
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	685b      	ldr	r3, [r3, #4]
 80152e6:	617b      	str	r3, [r7, #20]
 80152e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80152ea:	68f8      	ldr	r0, [r7, #12]
 80152ec:	f000 f857 	bl	801539e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	2208      	movs	r2, #8
 80152f4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2200      	movs	r2, #0
 80152fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80152fe:	2301      	movs	r3, #1
 8015300:	e00f      	b.n	8015322 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	681a      	ldr	r2, [r3, #0]
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	4013      	ands	r3, r2
 801530c:	68ba      	ldr	r2, [r7, #8]
 801530e:	429a      	cmp	r2, r3
 8015310:	bf0c      	ite	eq
 8015312:	2301      	moveq	r3, #1
 8015314:	2300      	movne	r3, #0
 8015316:	b2db      	uxtb	r3, r3
 8015318:	461a      	mov	r2, r3
 801531a:	79fb      	ldrb	r3, [r7, #7]
 801531c:	429a      	cmp	r2, r3
 801531e:	d0b4      	beq.n	801528a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015320:	2300      	movs	r3, #0
}
 8015322:	4618      	mov	r0, r3
 8015324:	3718      	adds	r7, #24
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}

0801532a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801532a:	b480      	push	{r7}
 801532c:	b085      	sub	sp, #20
 801532e:	af00      	add	r7, sp, #0
 8015330:	60f8      	str	r0, [r7, #12]
 8015332:	60b9      	str	r1, [r7, #8]
 8015334:	4613      	mov	r3, r2
 8015336:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	68ba      	ldr	r2, [r7, #8]
 801533c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	88fa      	ldrh	r2, [r7, #6]
 8015342:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	88fa      	ldrh	r2, [r7, #6]
 8015348:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	2200      	movs	r2, #0
 801534e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	2222      	movs	r2, #34	; 0x22
 8015354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	691b      	ldr	r3, [r3, #16]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d007      	beq.n	8015370 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	68da      	ldr	r2, [r3, #12]
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801536e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	695a      	ldr	r2, [r3, #20]
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	f042 0201 	orr.w	r2, r2, #1
 801537e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	68da      	ldr	r2, [r3, #12]
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f042 0220 	orr.w	r2, r2, #32
 801538e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015390:	2300      	movs	r3, #0
}
 8015392:	4618      	mov	r0, r3
 8015394:	3714      	adds	r7, #20
 8015396:	46bd      	mov	sp, r7
 8015398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539c:	4770      	bx	lr

0801539e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801539e:	b480      	push	{r7}
 80153a0:	b095      	sub	sp, #84	; 0x54
 80153a2:	af00      	add	r7, sp, #0
 80153a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	330c      	adds	r3, #12
 80153ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153b0:	e853 3f00 	ldrex	r3, [r3]
 80153b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80153b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80153bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	330c      	adds	r3, #12
 80153c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80153c6:	643a      	str	r2, [r7, #64]	; 0x40
 80153c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80153cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80153ce:	e841 2300 	strex	r3, r2, [r1]
 80153d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80153d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d1e5      	bne.n	80153a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	3314      	adds	r3, #20
 80153e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153e2:	6a3b      	ldr	r3, [r7, #32]
 80153e4:	e853 3f00 	ldrex	r3, [r3]
 80153e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80153ea:	69fb      	ldr	r3, [r7, #28]
 80153ec:	f023 0301 	bic.w	r3, r3, #1
 80153f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	3314      	adds	r3, #20
 80153f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80153fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80153fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015402:	e841 2300 	strex	r3, r2, [r1]
 8015406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801540a:	2b00      	cmp	r3, #0
 801540c:	d1e5      	bne.n	80153da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015412:	2b01      	cmp	r3, #1
 8015414:	d119      	bne.n	801544a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	330c      	adds	r3, #12
 801541c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	e853 3f00 	ldrex	r3, [r3]
 8015424:	60bb      	str	r3, [r7, #8]
   return(result);
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	f023 0310 	bic.w	r3, r3, #16
 801542c:	647b      	str	r3, [r7, #68]	; 0x44
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	330c      	adds	r3, #12
 8015434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015436:	61ba      	str	r2, [r7, #24]
 8015438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801543a:	6979      	ldr	r1, [r7, #20]
 801543c:	69ba      	ldr	r2, [r7, #24]
 801543e:	e841 2300 	strex	r3, r2, [r1]
 8015442:	613b      	str	r3, [r7, #16]
   return(result);
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d1e5      	bne.n	8015416 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2220      	movs	r2, #32
 801544e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	2200      	movs	r2, #0
 8015456:	631a      	str	r2, [r3, #48]	; 0x30
}
 8015458:	bf00      	nop
 801545a:	3754      	adds	r7, #84	; 0x54
 801545c:	46bd      	mov	sp, r7
 801545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015462:	4770      	bx	lr

08015464 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b084      	sub	sp, #16
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	2200      	movs	r2, #0
 8015476:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	2200      	movs	r2, #0
 801547c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801547e:	68f8      	ldr	r0, [r7, #12]
 8015480:	f7ff fee4 	bl	801524c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015484:	bf00      	nop
 8015486:	3710      	adds	r7, #16
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801548c:	b480      	push	{r7}
 801548e:	b085      	sub	sp, #20
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801549a:	b2db      	uxtb	r3, r3
 801549c:	2b21      	cmp	r3, #33	; 0x21
 801549e:	d13e      	bne.n	801551e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	689b      	ldr	r3, [r3, #8]
 80154a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80154a8:	d114      	bne.n	80154d4 <UART_Transmit_IT+0x48>
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	691b      	ldr	r3, [r3, #16]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d110      	bne.n	80154d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	6a1b      	ldr	r3, [r3, #32]
 80154b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	881b      	ldrh	r3, [r3, #0]
 80154bc:	461a      	mov	r2, r3
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80154c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6a1b      	ldr	r3, [r3, #32]
 80154cc:	1c9a      	adds	r2, r3, #2
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	621a      	str	r2, [r3, #32]
 80154d2:	e008      	b.n	80154e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6a1b      	ldr	r3, [r3, #32]
 80154d8:	1c59      	adds	r1, r3, #1
 80154da:	687a      	ldr	r2, [r7, #4]
 80154dc:	6211      	str	r1, [r2, #32]
 80154de:	781a      	ldrb	r2, [r3, #0]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	3b01      	subs	r3, #1
 80154ee:	b29b      	uxth	r3, r3
 80154f0:	687a      	ldr	r2, [r7, #4]
 80154f2:	4619      	mov	r1, r3
 80154f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d10f      	bne.n	801551a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	68da      	ldr	r2, [r3, #12]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015508:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	68da      	ldr	r2, [r3, #12]
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015518:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801551a:	2300      	movs	r3, #0
 801551c:	e000      	b.n	8015520 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801551e:	2302      	movs	r3, #2
  }
}
 8015520:	4618      	mov	r0, r3
 8015522:	3714      	adds	r7, #20
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr

0801552c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	68da      	ldr	r2, [r3, #12]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015542:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2220      	movs	r2, #32
 8015548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801554c:	6878      	ldr	r0, [r7, #4]
 801554e:	f7ff fe73 	bl	8015238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8015552:	2300      	movs	r3, #0
}
 8015554:	4618      	mov	r0, r3
 8015556:	3708      	adds	r7, #8
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}

0801555c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b08c      	sub	sp, #48	; 0x30
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801556a:	b2db      	uxtb	r3, r3
 801556c:	2b22      	cmp	r3, #34	; 0x22
 801556e:	f040 80ae 	bne.w	80156ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	689b      	ldr	r3, [r3, #8]
 8015576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801557a:	d117      	bne.n	80155ac <UART_Receive_IT+0x50>
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	691b      	ldr	r3, [r3, #16]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d113      	bne.n	80155ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8015584:	2300      	movs	r3, #0
 8015586:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801558c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	685b      	ldr	r3, [r3, #4]
 8015594:	b29b      	uxth	r3, r3
 8015596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801559a:	b29a      	uxth	r2, r3
 801559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801559e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155a4:	1c9a      	adds	r2, r3, #2
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	629a      	str	r2, [r3, #40]	; 0x28
 80155aa:	e026      	b.n	80155fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80155b2:	2300      	movs	r3, #0
 80155b4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	689b      	ldr	r3, [r3, #8]
 80155ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80155be:	d007      	beq.n	80155d0 <UART_Receive_IT+0x74>
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	689b      	ldr	r3, [r3, #8]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d10a      	bne.n	80155de <UART_Receive_IT+0x82>
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	691b      	ldr	r3, [r3, #16]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d106      	bne.n	80155de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	685b      	ldr	r3, [r3, #4]
 80155d6:	b2da      	uxtb	r2, r3
 80155d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155da:	701a      	strb	r2, [r3, #0]
 80155dc:	e008      	b.n	80155f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	685b      	ldr	r3, [r3, #4]
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155ea:	b2da      	uxtb	r2, r3
 80155ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155f4:	1c5a      	adds	r2, r3, #1
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80155fe:	b29b      	uxth	r3, r3
 8015600:	3b01      	subs	r3, #1
 8015602:	b29b      	uxth	r3, r3
 8015604:	687a      	ldr	r2, [r7, #4]
 8015606:	4619      	mov	r1, r3
 8015608:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801560a:	2b00      	cmp	r3, #0
 801560c:	d15d      	bne.n	80156ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	68da      	ldr	r2, [r3, #12]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	f022 0220 	bic.w	r2, r2, #32
 801561c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	68da      	ldr	r2, [r3, #12]
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801562c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	695a      	ldr	r2, [r3, #20]
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	f022 0201 	bic.w	r2, r2, #1
 801563c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	2220      	movs	r2, #32
 8015642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	2200      	movs	r2, #0
 801564a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015650:	2b01      	cmp	r3, #1
 8015652:	d135      	bne.n	80156c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	2200      	movs	r2, #0
 8015658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	330c      	adds	r3, #12
 8015660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015662:	697b      	ldr	r3, [r7, #20]
 8015664:	e853 3f00 	ldrex	r3, [r3]
 8015668:	613b      	str	r3, [r7, #16]
   return(result);
 801566a:	693b      	ldr	r3, [r7, #16]
 801566c:	f023 0310 	bic.w	r3, r3, #16
 8015670:	627b      	str	r3, [r7, #36]	; 0x24
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	330c      	adds	r3, #12
 8015678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801567a:	623a      	str	r2, [r7, #32]
 801567c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801567e:	69f9      	ldr	r1, [r7, #28]
 8015680:	6a3a      	ldr	r2, [r7, #32]
 8015682:	e841 2300 	strex	r3, r2, [r1]
 8015686:	61bb      	str	r3, [r7, #24]
   return(result);
 8015688:	69bb      	ldr	r3, [r7, #24]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d1e5      	bne.n	801565a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f003 0310 	and.w	r3, r3, #16
 8015698:	2b10      	cmp	r3, #16
 801569a:	d10a      	bne.n	80156b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801569c:	2300      	movs	r3, #0
 801569e:	60fb      	str	r3, [r7, #12]
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	60fb      	str	r3, [r7, #12]
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	685b      	ldr	r3, [r3, #4]
 80156ae:	60fb      	str	r3, [r7, #12]
 80156b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80156b6:	4619      	mov	r1, r3
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	f7ff fdd1 	bl	8015260 <HAL_UARTEx_RxEventCallback>
 80156be:	e002      	b.n	80156c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f7f8 f8d1 	bl	800d868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80156c6:	2300      	movs	r3, #0
 80156c8:	e002      	b.n	80156d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80156ca:	2300      	movs	r3, #0
 80156cc:	e000      	b.n	80156d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80156ce:	2302      	movs	r3, #2
  }
}
 80156d0:	4618      	mov	r0, r3
 80156d2:	3730      	adds	r7, #48	; 0x30
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80156d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80156dc:	b0c0      	sub	sp, #256	; 0x100
 80156de:	af00      	add	r7, sp, #0
 80156e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80156e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	691b      	ldr	r3, [r3, #16]
 80156ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80156f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80156f4:	68d9      	ldr	r1, [r3, #12]
 80156f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80156fa:	681a      	ldr	r2, [r3, #0]
 80156fc:	ea40 0301 	orr.w	r3, r0, r1
 8015700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015706:	689a      	ldr	r2, [r3, #8]
 8015708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801570c:	691b      	ldr	r3, [r3, #16]
 801570e:	431a      	orrs	r2, r3
 8015710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015714:	695b      	ldr	r3, [r3, #20]
 8015716:	431a      	orrs	r2, r3
 8015718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801571c:	69db      	ldr	r3, [r3, #28]
 801571e:	4313      	orrs	r3, r2
 8015720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8015724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	68db      	ldr	r3, [r3, #12]
 801572c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8015730:	f021 010c 	bic.w	r1, r1, #12
 8015734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801573e:	430b      	orrs	r3, r1
 8015740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	695b      	ldr	r3, [r3, #20]
 801574a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015752:	6999      	ldr	r1, [r3, #24]
 8015754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015758:	681a      	ldr	r2, [r3, #0]
 801575a:	ea40 0301 	orr.w	r3, r0, r1
 801575e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015764:	681a      	ldr	r2, [r3, #0]
 8015766:	4b8f      	ldr	r3, [pc, #572]	; (80159a4 <UART_SetConfig+0x2cc>)
 8015768:	429a      	cmp	r2, r3
 801576a:	d005      	beq.n	8015778 <UART_SetConfig+0xa0>
 801576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015770:	681a      	ldr	r2, [r3, #0]
 8015772:	4b8d      	ldr	r3, [pc, #564]	; (80159a8 <UART_SetConfig+0x2d0>)
 8015774:	429a      	cmp	r2, r3
 8015776:	d104      	bne.n	8015782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015778:	f7fd ff50 	bl	801361c <HAL_RCC_GetPCLK2Freq>
 801577c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8015780:	e003      	b.n	801578a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015782:	f7fd ff37 	bl	80135f4 <HAL_RCC_GetPCLK1Freq>
 8015786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801578e:	69db      	ldr	r3, [r3, #28]
 8015790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015794:	f040 810c 	bne.w	80159b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801579c:	2200      	movs	r2, #0
 801579e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80157a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80157a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80157aa:	4622      	mov	r2, r4
 80157ac:	462b      	mov	r3, r5
 80157ae:	1891      	adds	r1, r2, r2
 80157b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80157b2:	415b      	adcs	r3, r3
 80157b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80157b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80157ba:	4621      	mov	r1, r4
 80157bc:	eb12 0801 	adds.w	r8, r2, r1
 80157c0:	4629      	mov	r1, r5
 80157c2:	eb43 0901 	adc.w	r9, r3, r1
 80157c6:	f04f 0200 	mov.w	r2, #0
 80157ca:	f04f 0300 	mov.w	r3, #0
 80157ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80157d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80157d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80157da:	4690      	mov	r8, r2
 80157dc:	4699      	mov	r9, r3
 80157de:	4623      	mov	r3, r4
 80157e0:	eb18 0303 	adds.w	r3, r8, r3
 80157e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80157e8:	462b      	mov	r3, r5
 80157ea:	eb49 0303 	adc.w	r3, r9, r3
 80157ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80157f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80157f6:	685b      	ldr	r3, [r3, #4]
 80157f8:	2200      	movs	r2, #0
 80157fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80157fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8015802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8015806:	460b      	mov	r3, r1
 8015808:	18db      	adds	r3, r3, r3
 801580a:	653b      	str	r3, [r7, #80]	; 0x50
 801580c:	4613      	mov	r3, r2
 801580e:	eb42 0303 	adc.w	r3, r2, r3
 8015812:	657b      	str	r3, [r7, #84]	; 0x54
 8015814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801581c:	f7eb f9f4 	bl	8000c08 <__aeabi_uldivmod>
 8015820:	4602      	mov	r2, r0
 8015822:	460b      	mov	r3, r1
 8015824:	4b61      	ldr	r3, [pc, #388]	; (80159ac <UART_SetConfig+0x2d4>)
 8015826:	fba3 2302 	umull	r2, r3, r3, r2
 801582a:	095b      	lsrs	r3, r3, #5
 801582c:	011c      	lsls	r4, r3, #4
 801582e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015832:	2200      	movs	r2, #0
 8015834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801583c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8015840:	4642      	mov	r2, r8
 8015842:	464b      	mov	r3, r9
 8015844:	1891      	adds	r1, r2, r2
 8015846:	64b9      	str	r1, [r7, #72]	; 0x48
 8015848:	415b      	adcs	r3, r3
 801584a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801584c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015850:	4641      	mov	r1, r8
 8015852:	eb12 0a01 	adds.w	sl, r2, r1
 8015856:	4649      	mov	r1, r9
 8015858:	eb43 0b01 	adc.w	fp, r3, r1
 801585c:	f04f 0200 	mov.w	r2, #0
 8015860:	f04f 0300 	mov.w	r3, #0
 8015864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8015868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801586c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015870:	4692      	mov	sl, r2
 8015872:	469b      	mov	fp, r3
 8015874:	4643      	mov	r3, r8
 8015876:	eb1a 0303 	adds.w	r3, sl, r3
 801587a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801587e:	464b      	mov	r3, r9
 8015880:	eb4b 0303 	adc.w	r3, fp, r3
 8015884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8015888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	2200      	movs	r2, #0
 8015890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8015898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801589c:	460b      	mov	r3, r1
 801589e:	18db      	adds	r3, r3, r3
 80158a0:	643b      	str	r3, [r7, #64]	; 0x40
 80158a2:	4613      	mov	r3, r2
 80158a4:	eb42 0303 	adc.w	r3, r2, r3
 80158a8:	647b      	str	r3, [r7, #68]	; 0x44
 80158aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80158ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80158b2:	f7eb f9a9 	bl	8000c08 <__aeabi_uldivmod>
 80158b6:	4602      	mov	r2, r0
 80158b8:	460b      	mov	r3, r1
 80158ba:	4611      	mov	r1, r2
 80158bc:	4b3b      	ldr	r3, [pc, #236]	; (80159ac <UART_SetConfig+0x2d4>)
 80158be:	fba3 2301 	umull	r2, r3, r3, r1
 80158c2:	095b      	lsrs	r3, r3, #5
 80158c4:	2264      	movs	r2, #100	; 0x64
 80158c6:	fb02 f303 	mul.w	r3, r2, r3
 80158ca:	1acb      	subs	r3, r1, r3
 80158cc:	00db      	lsls	r3, r3, #3
 80158ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80158d2:	4b36      	ldr	r3, [pc, #216]	; (80159ac <UART_SetConfig+0x2d4>)
 80158d4:	fba3 2302 	umull	r2, r3, r3, r2
 80158d8:	095b      	lsrs	r3, r3, #5
 80158da:	005b      	lsls	r3, r3, #1
 80158dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80158e0:	441c      	add	r4, r3
 80158e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80158e6:	2200      	movs	r2, #0
 80158e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80158ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80158f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80158f4:	4642      	mov	r2, r8
 80158f6:	464b      	mov	r3, r9
 80158f8:	1891      	adds	r1, r2, r2
 80158fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80158fc:	415b      	adcs	r3, r3
 80158fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015904:	4641      	mov	r1, r8
 8015906:	1851      	adds	r1, r2, r1
 8015908:	6339      	str	r1, [r7, #48]	; 0x30
 801590a:	4649      	mov	r1, r9
 801590c:	414b      	adcs	r3, r1
 801590e:	637b      	str	r3, [r7, #52]	; 0x34
 8015910:	f04f 0200 	mov.w	r2, #0
 8015914:	f04f 0300 	mov.w	r3, #0
 8015918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801591c:	4659      	mov	r1, fp
 801591e:	00cb      	lsls	r3, r1, #3
 8015920:	4651      	mov	r1, sl
 8015922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015926:	4651      	mov	r1, sl
 8015928:	00ca      	lsls	r2, r1, #3
 801592a:	4610      	mov	r0, r2
 801592c:	4619      	mov	r1, r3
 801592e:	4603      	mov	r3, r0
 8015930:	4642      	mov	r2, r8
 8015932:	189b      	adds	r3, r3, r2
 8015934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015938:	464b      	mov	r3, r9
 801593a:	460a      	mov	r2, r1
 801593c:	eb42 0303 	adc.w	r3, r2, r3
 8015940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015948:	685b      	ldr	r3, [r3, #4]
 801594a:	2200      	movs	r2, #0
 801594c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8015958:	460b      	mov	r3, r1
 801595a:	18db      	adds	r3, r3, r3
 801595c:	62bb      	str	r3, [r7, #40]	; 0x28
 801595e:	4613      	mov	r3, r2
 8015960:	eb42 0303 	adc.w	r3, r2, r3
 8015964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801596a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801596e:	f7eb f94b 	bl	8000c08 <__aeabi_uldivmod>
 8015972:	4602      	mov	r2, r0
 8015974:	460b      	mov	r3, r1
 8015976:	4b0d      	ldr	r3, [pc, #52]	; (80159ac <UART_SetConfig+0x2d4>)
 8015978:	fba3 1302 	umull	r1, r3, r3, r2
 801597c:	095b      	lsrs	r3, r3, #5
 801597e:	2164      	movs	r1, #100	; 0x64
 8015980:	fb01 f303 	mul.w	r3, r1, r3
 8015984:	1ad3      	subs	r3, r2, r3
 8015986:	00db      	lsls	r3, r3, #3
 8015988:	3332      	adds	r3, #50	; 0x32
 801598a:	4a08      	ldr	r2, [pc, #32]	; (80159ac <UART_SetConfig+0x2d4>)
 801598c:	fba2 2303 	umull	r2, r3, r2, r3
 8015990:	095b      	lsrs	r3, r3, #5
 8015992:	f003 0207 	and.w	r2, r3, #7
 8015996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	4422      	add	r2, r4
 801599e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80159a0:	e106      	b.n	8015bb0 <UART_SetConfig+0x4d8>
 80159a2:	bf00      	nop
 80159a4:	40011000 	.word	0x40011000
 80159a8:	40011400 	.word	0x40011400
 80159ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80159b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80159b4:	2200      	movs	r2, #0
 80159b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80159ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80159be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80159c2:	4642      	mov	r2, r8
 80159c4:	464b      	mov	r3, r9
 80159c6:	1891      	adds	r1, r2, r2
 80159c8:	6239      	str	r1, [r7, #32]
 80159ca:	415b      	adcs	r3, r3
 80159cc:	627b      	str	r3, [r7, #36]	; 0x24
 80159ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80159d2:	4641      	mov	r1, r8
 80159d4:	1854      	adds	r4, r2, r1
 80159d6:	4649      	mov	r1, r9
 80159d8:	eb43 0501 	adc.w	r5, r3, r1
 80159dc:	f04f 0200 	mov.w	r2, #0
 80159e0:	f04f 0300 	mov.w	r3, #0
 80159e4:	00eb      	lsls	r3, r5, #3
 80159e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80159ea:	00e2      	lsls	r2, r4, #3
 80159ec:	4614      	mov	r4, r2
 80159ee:	461d      	mov	r5, r3
 80159f0:	4643      	mov	r3, r8
 80159f2:	18e3      	adds	r3, r4, r3
 80159f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80159f8:	464b      	mov	r3, r9
 80159fa:	eb45 0303 	adc.w	r3, r5, r3
 80159fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015a12:	f04f 0200 	mov.w	r2, #0
 8015a16:	f04f 0300 	mov.w	r3, #0
 8015a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8015a1e:	4629      	mov	r1, r5
 8015a20:	008b      	lsls	r3, r1, #2
 8015a22:	4621      	mov	r1, r4
 8015a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015a28:	4621      	mov	r1, r4
 8015a2a:	008a      	lsls	r2, r1, #2
 8015a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015a30:	f7eb f8ea 	bl	8000c08 <__aeabi_uldivmod>
 8015a34:	4602      	mov	r2, r0
 8015a36:	460b      	mov	r3, r1
 8015a38:	4b60      	ldr	r3, [pc, #384]	; (8015bbc <UART_SetConfig+0x4e4>)
 8015a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8015a3e:	095b      	lsrs	r3, r3, #5
 8015a40:	011c      	lsls	r4, r3, #4
 8015a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015a46:	2200      	movs	r2, #0
 8015a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8015a54:	4642      	mov	r2, r8
 8015a56:	464b      	mov	r3, r9
 8015a58:	1891      	adds	r1, r2, r2
 8015a5a:	61b9      	str	r1, [r7, #24]
 8015a5c:	415b      	adcs	r3, r3
 8015a5e:	61fb      	str	r3, [r7, #28]
 8015a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015a64:	4641      	mov	r1, r8
 8015a66:	1851      	adds	r1, r2, r1
 8015a68:	6139      	str	r1, [r7, #16]
 8015a6a:	4649      	mov	r1, r9
 8015a6c:	414b      	adcs	r3, r1
 8015a6e:	617b      	str	r3, [r7, #20]
 8015a70:	f04f 0200 	mov.w	r2, #0
 8015a74:	f04f 0300 	mov.w	r3, #0
 8015a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8015a7c:	4659      	mov	r1, fp
 8015a7e:	00cb      	lsls	r3, r1, #3
 8015a80:	4651      	mov	r1, sl
 8015a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015a86:	4651      	mov	r1, sl
 8015a88:	00ca      	lsls	r2, r1, #3
 8015a8a:	4610      	mov	r0, r2
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	4603      	mov	r3, r0
 8015a90:	4642      	mov	r2, r8
 8015a92:	189b      	adds	r3, r3, r2
 8015a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015a98:	464b      	mov	r3, r9
 8015a9a:	460a      	mov	r2, r1
 8015a9c:	eb42 0303 	adc.w	r3, r2, r3
 8015aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015aa8:	685b      	ldr	r3, [r3, #4]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8015aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8015ab0:	f04f 0200 	mov.w	r2, #0
 8015ab4:	f04f 0300 	mov.w	r3, #0
 8015ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8015abc:	4649      	mov	r1, r9
 8015abe:	008b      	lsls	r3, r1, #2
 8015ac0:	4641      	mov	r1, r8
 8015ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015ac6:	4641      	mov	r1, r8
 8015ac8:	008a      	lsls	r2, r1, #2
 8015aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8015ace:	f7eb f89b 	bl	8000c08 <__aeabi_uldivmod>
 8015ad2:	4602      	mov	r2, r0
 8015ad4:	460b      	mov	r3, r1
 8015ad6:	4611      	mov	r1, r2
 8015ad8:	4b38      	ldr	r3, [pc, #224]	; (8015bbc <UART_SetConfig+0x4e4>)
 8015ada:	fba3 2301 	umull	r2, r3, r3, r1
 8015ade:	095b      	lsrs	r3, r3, #5
 8015ae0:	2264      	movs	r2, #100	; 0x64
 8015ae2:	fb02 f303 	mul.w	r3, r2, r3
 8015ae6:	1acb      	subs	r3, r1, r3
 8015ae8:	011b      	lsls	r3, r3, #4
 8015aea:	3332      	adds	r3, #50	; 0x32
 8015aec:	4a33      	ldr	r2, [pc, #204]	; (8015bbc <UART_SetConfig+0x4e4>)
 8015aee:	fba2 2303 	umull	r2, r3, r2, r3
 8015af2:	095b      	lsrs	r3, r3, #5
 8015af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015af8:	441c      	add	r4, r3
 8015afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015afe:	2200      	movs	r2, #0
 8015b00:	673b      	str	r3, [r7, #112]	; 0x70
 8015b02:	677a      	str	r2, [r7, #116]	; 0x74
 8015b04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8015b08:	4642      	mov	r2, r8
 8015b0a:	464b      	mov	r3, r9
 8015b0c:	1891      	adds	r1, r2, r2
 8015b0e:	60b9      	str	r1, [r7, #8]
 8015b10:	415b      	adcs	r3, r3
 8015b12:	60fb      	str	r3, [r7, #12]
 8015b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015b18:	4641      	mov	r1, r8
 8015b1a:	1851      	adds	r1, r2, r1
 8015b1c:	6039      	str	r1, [r7, #0]
 8015b1e:	4649      	mov	r1, r9
 8015b20:	414b      	adcs	r3, r1
 8015b22:	607b      	str	r3, [r7, #4]
 8015b24:	f04f 0200 	mov.w	r2, #0
 8015b28:	f04f 0300 	mov.w	r3, #0
 8015b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8015b30:	4659      	mov	r1, fp
 8015b32:	00cb      	lsls	r3, r1, #3
 8015b34:	4651      	mov	r1, sl
 8015b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015b3a:	4651      	mov	r1, sl
 8015b3c:	00ca      	lsls	r2, r1, #3
 8015b3e:	4610      	mov	r0, r2
 8015b40:	4619      	mov	r1, r3
 8015b42:	4603      	mov	r3, r0
 8015b44:	4642      	mov	r2, r8
 8015b46:	189b      	adds	r3, r3, r2
 8015b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8015b4a:	464b      	mov	r3, r9
 8015b4c:	460a      	mov	r2, r1
 8015b4e:	eb42 0303 	adc.w	r3, r2, r3
 8015b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015b58:	685b      	ldr	r3, [r3, #4]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8015b5e:	667a      	str	r2, [r7, #100]	; 0x64
 8015b60:	f04f 0200 	mov.w	r2, #0
 8015b64:	f04f 0300 	mov.w	r3, #0
 8015b68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8015b6c:	4649      	mov	r1, r9
 8015b6e:	008b      	lsls	r3, r1, #2
 8015b70:	4641      	mov	r1, r8
 8015b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015b76:	4641      	mov	r1, r8
 8015b78:	008a      	lsls	r2, r1, #2
 8015b7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8015b7e:	f7eb f843 	bl	8000c08 <__aeabi_uldivmod>
 8015b82:	4602      	mov	r2, r0
 8015b84:	460b      	mov	r3, r1
 8015b86:	4b0d      	ldr	r3, [pc, #52]	; (8015bbc <UART_SetConfig+0x4e4>)
 8015b88:	fba3 1302 	umull	r1, r3, r3, r2
 8015b8c:	095b      	lsrs	r3, r3, #5
 8015b8e:	2164      	movs	r1, #100	; 0x64
 8015b90:	fb01 f303 	mul.w	r3, r1, r3
 8015b94:	1ad3      	subs	r3, r2, r3
 8015b96:	011b      	lsls	r3, r3, #4
 8015b98:	3332      	adds	r3, #50	; 0x32
 8015b9a:	4a08      	ldr	r2, [pc, #32]	; (8015bbc <UART_SetConfig+0x4e4>)
 8015b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8015ba0:	095b      	lsrs	r3, r3, #5
 8015ba2:	f003 020f 	and.w	r2, r3, #15
 8015ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4422      	add	r2, r4
 8015bae:	609a      	str	r2, [r3, #8]
}
 8015bb0:	bf00      	nop
 8015bb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015bbc:	51eb851f 	.word	0x51eb851f

08015bc0 <_ZdlPvj>:
 8015bc0:	f000 bb3f 	b.w	8016242 <_ZdlPv>

08015bc4 <_Znwj>:
 8015bc4:	2801      	cmp	r0, #1
 8015bc6:	bf38      	it	cc
 8015bc8:	2001      	movcc	r0, #1
 8015bca:	b510      	push	{r4, lr}
 8015bcc:	4604      	mov	r4, r0
 8015bce:	4620      	mov	r0, r4
 8015bd0:	f000 fb4a 	bl	8016268 <malloc>
 8015bd4:	b100      	cbz	r0, 8015bd8 <_Znwj+0x14>
 8015bd6:	bd10      	pop	{r4, pc}
 8015bd8:	f000 fb36 	bl	8016248 <_ZSt15get_new_handlerv>
 8015bdc:	b908      	cbnz	r0, 8015be2 <_Znwj+0x1e>
 8015bde:	f000 fb3b 	bl	8016258 <abort>
 8015be2:	4780      	blx	r0
 8015be4:	e7f3      	b.n	8015bce <_Znwj+0xa>

08015be6 <_Znaj>:
 8015be6:	f7ff bfed 	b.w	8015bc4 <_Znwj>

08015bea <_ZNSaIcEC1Ev>:
 8015bea:	4770      	bx	lr

08015bec <_ZNSaIcEC1ERKS_>:
 8015bec:	4770      	bx	lr

08015bee <_ZNSaIcED1Ev>:
 8015bee:	4770      	bx	lr

08015bf0 <_ZSt17__throw_bad_allocv>:
 8015bf0:	b508      	push	{r3, lr}
 8015bf2:	f000 fb31 	bl	8016258 <abort>

08015bf6 <_ZSt19__throw_logic_errorPKc>:
 8015bf6:	b508      	push	{r3, lr}
 8015bf8:	f000 fb2e 	bl	8016258 <abort>

08015bfc <_ZSt20__throw_length_errorPKc>:
 8015bfc:	b508      	push	{r3, lr}
 8015bfe:	f000 fb2b 	bl	8016258 <abort>

08015c02 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8015c02:	b10a      	cbz	r2, 8015c08 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8015c04:	f002 b9a9 	b.w	8017f5a <memcpy>
 8015c08:	4770      	bx	lr

08015c0a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8015c0a:	b10a      	cbz	r2, 8015c10 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8015c0c:	f002 b870 	b.w	8017cf0 <memcmp>
 8015c10:	4610      	mov	r0, r2
 8015c12:	4770      	bx	lr

08015c14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8015c14:	6001      	str	r1, [r0, #0]
 8015c16:	4770      	bx	lr

08015c18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8015c18:	6800      	ldr	r0, [r0, #0]
 8015c1a:	4770      	bx	lr

08015c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8015c1c:	3008      	adds	r0, #8
 8015c1e:	4770      	bx	lr

08015c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8015c20:	6081      	str	r1, [r0, #8]
 8015c22:	4770      	bx	lr

08015c24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8015c24:	6803      	ldr	r3, [r0, #0]
 8015c26:	6041      	str	r1, [r0, #4]
 8015c28:	2200      	movs	r2, #0
 8015c2a:	545a      	strb	r2, [r3, r1]
 8015c2c:	4770      	bx	lr
	...

08015c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8015c30:	b508      	push	{r3, lr}
 8015c32:	680b      	ldr	r3, [r1, #0]
 8015c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015c38:	d302      	bcc.n	8015c40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8015c3a:	480d      	ldr	r0, [pc, #52]	; (8015c70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8015c3c:	f7ff ffde 	bl	8015bfc <_ZSt20__throw_length_errorPKc>
 8015c40:	4293      	cmp	r3, r2
 8015c42:	d90b      	bls.n	8015c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015c44:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015c48:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8015c4c:	d206      	bcs.n	8015c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015c4e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015c52:	bf2a      	itet	cs
 8015c54:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8015c58:	6008      	strcc	r0, [r1, #0]
 8015c5a:	600b      	strcs	r3, [r1, #0]
 8015c5c:	6808      	ldr	r0, [r1, #0]
 8015c5e:	3001      	adds	r0, #1
 8015c60:	d501      	bpl.n	8015c66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8015c62:	f7ff ffc5 	bl	8015bf0 <_ZSt17__throw_bad_allocv>
 8015c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015c6a:	f7ff bfab 	b.w	8015bc4 <_Znwj>
 8015c6e:	bf00      	nop
 8015c70:	0801b910 	.word	0x0801b910

08015c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8015c74:	f850 3b08 	ldr.w	r3, [r0], #8
 8015c78:	4283      	cmp	r3, r0
 8015c7a:	d002      	beq.n	8015c82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f000 bae0 	b.w	8016242 <_ZdlPv>
 8015c82:	4770      	bx	lr

08015c84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8015c84:	6840      	ldr	r0, [r0, #4]
 8015c86:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8015c8a:	3901      	subs	r1, #1
 8015c8c:	1a09      	subs	r1, r1, r0
 8015c8e:	4291      	cmp	r1, r2
 8015c90:	b508      	push	{r3, lr}
 8015c92:	d202      	bcs.n	8015c9a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7ff ffb1 	bl	8015bfc <_ZSt20__throw_length_errorPKc>
 8015c9a:	bd08      	pop	{r3, pc}

08015c9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8015c9c:	6803      	ldr	r3, [r0, #0]
 8015c9e:	428b      	cmp	r3, r1
 8015ca0:	d806      	bhi.n	8015cb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8015ca2:	6842      	ldr	r2, [r0, #4]
 8015ca4:	4413      	add	r3, r2
 8015ca6:	4299      	cmp	r1, r3
 8015ca8:	bf94      	ite	ls
 8015caa:	2000      	movls	r0, #0
 8015cac:	2001      	movhi	r0, #1
 8015cae:	4770      	bx	lr
 8015cb0:	2001      	movs	r0, #1
 8015cb2:	4770      	bx	lr

08015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8015cb4:	2a01      	cmp	r2, #1
 8015cb6:	b410      	push	{r4}
 8015cb8:	d104      	bne.n	8015cc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8015cba:	780a      	ldrb	r2, [r1, #0]
 8015cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cc0:	7002      	strb	r2, [r0, #0]
 8015cc2:	4770      	bx	lr
 8015cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cc8:	f7ff bf9b 	b.w	8015c02 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08015ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8015ccc:	2a01      	cmp	r2, #1
 8015cce:	b430      	push	{r4, r5}
 8015cd0:	d103      	bne.n	8015cda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8015cd2:	780b      	ldrb	r3, [r1, #0]
 8015cd4:	7003      	strb	r3, [r0, #0]
 8015cd6:	bc30      	pop	{r4, r5}
 8015cd8:	4770      	bx	lr
 8015cda:	2a00      	cmp	r2, #0
 8015cdc:	d0fb      	beq.n	8015cd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8015cde:	bc30      	pop	{r4, r5}
 8015ce0:	f002 b816 	b.w	8017d10 <memmove>

08015ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8015ce4:	460b      	mov	r3, r1
 8015ce6:	2b01      	cmp	r3, #1
 8015ce8:	b410      	push	{r4}
 8015cea:	4611      	mov	r1, r2
 8015cec:	4604      	mov	r4, r0
 8015cee:	d103      	bne.n	8015cf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8015cf0:	7022      	strb	r2, [r4, #0]
 8015cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cf6:	4770      	bx	lr
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d0fa      	beq.n	8015cf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8015cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d00:	461a      	mov	r2, r3
 8015d02:	f002 b81f 	b.w	8017d44 <memset>

08015d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8015d06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015d08:	290f      	cmp	r1, #15
 8015d0a:	4604      	mov	r4, r0
 8015d0c:	9101      	str	r1, [sp, #4]
 8015d0e:	4615      	mov	r5, r2
 8015d10:	d906      	bls.n	8015d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8015d12:	2200      	movs	r2, #0
 8015d14:	a901      	add	r1, sp, #4
 8015d16:	f7ff ff8b 	bl	8015c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015d1a:	9b01      	ldr	r3, [sp, #4]
 8015d1c:	6020      	str	r0, [r4, #0]
 8015d1e:	60a3      	str	r3, [r4, #8]
 8015d20:	9901      	ldr	r1, [sp, #4]
 8015d22:	b119      	cbz	r1, 8015d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8015d24:	6820      	ldr	r0, [r4, #0]
 8015d26:	462a      	mov	r2, r5
 8015d28:	f7ff ffdc 	bl	8015ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8015d2c:	9b01      	ldr	r3, [sp, #4]
 8015d2e:	6822      	ldr	r2, [r4, #0]
 8015d30:	6063      	str	r3, [r4, #4]
 8015d32:	2100      	movs	r1, #0
 8015d34:	54d1      	strb	r1, [r2, r3]
 8015d36:	b003      	add	sp, #12
 8015d38:	bd30      	pop	{r4, r5, pc}

08015d3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8015d3a:	b508      	push	{r3, lr}
 8015d3c:	1a52      	subs	r2, r2, r1
 8015d3e:	f7ff ffb9 	bl	8015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015d42:	bd08      	pop	{r3, pc}

08015d44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8015d44:	b508      	push	{r3, lr}
 8015d46:	1a52      	subs	r2, r2, r1
 8015d48:	f7ff ffb4 	bl	8015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015d4c:	bd08      	pop	{r3, pc}

08015d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8015d4e:	4288      	cmp	r0, r1
 8015d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d52:	4604      	mov	r4, r0
 8015d54:	460e      	mov	r6, r1
 8015d56:	d01e      	beq.n	8015d96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	684d      	ldr	r5, [r1, #4]
 8015d5c:	f853 2b08 	ldr.w	r2, [r3], #8
 8015d60:	429a      	cmp	r2, r3
 8015d62:	bf14      	ite	ne
 8015d64:	6882      	ldrne	r2, [r0, #8]
 8015d66:	220f      	moveq	r2, #15
 8015d68:	42aa      	cmp	r2, r5
 8015d6a:	d20a      	bcs.n	8015d82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8015d6c:	a901      	add	r1, sp, #4
 8015d6e:	9501      	str	r5, [sp, #4]
 8015d70:	f7ff ff5e 	bl	8015c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015d74:	4607      	mov	r7, r0
 8015d76:	4620      	mov	r0, r4
 8015d78:	f7ff ff7c 	bl	8015c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015d7c:	9b01      	ldr	r3, [sp, #4]
 8015d7e:	6027      	str	r7, [r4, #0]
 8015d80:	60a3      	str	r3, [r4, #8]
 8015d82:	b125      	cbz	r5, 8015d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8015d84:	6831      	ldr	r1, [r6, #0]
 8015d86:	6820      	ldr	r0, [r4, #0]
 8015d88:	462a      	mov	r2, r5
 8015d8a:	f7ff ff93 	bl	8015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015d8e:	6823      	ldr	r3, [r4, #0]
 8015d90:	6065      	str	r5, [r4, #4]
 8015d92:	2200      	movs	r2, #0
 8015d94:	555a      	strb	r2, [r3, r5]
 8015d96:	b003      	add	sp, #12
 8015d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8015d9a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d9e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015da0:	461f      	mov	r7, r3
 8015da2:	6843      	ldr	r3, [r0, #4]
 8015da4:	eb01 0802 	add.w	r8, r1, r2
 8015da8:	1ab2      	subs	r2, r6, r2
 8015daa:	441a      	add	r2, r3
 8015dac:	eba3 0908 	sub.w	r9, r3, r8
 8015db0:	4603      	mov	r3, r0
 8015db2:	9201      	str	r2, [sp, #4]
 8015db4:	f853 2b08 	ldr.w	r2, [r3], #8
 8015db8:	429a      	cmp	r2, r3
 8015dba:	bf18      	it	ne
 8015dbc:	6882      	ldrne	r2, [r0, #8]
 8015dbe:	460d      	mov	r5, r1
 8015dc0:	bf08      	it	eq
 8015dc2:	220f      	moveq	r2, #15
 8015dc4:	a901      	add	r1, sp, #4
 8015dc6:	4604      	mov	r4, r0
 8015dc8:	f7ff ff32 	bl	8015c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015dcc:	4682      	mov	sl, r0
 8015dce:	b11d      	cbz	r5, 8015dd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8015dd0:	6821      	ldr	r1, [r4, #0]
 8015dd2:	462a      	mov	r2, r5
 8015dd4:	f7ff ff6e 	bl	8015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015dd8:	b137      	cbz	r7, 8015de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8015dda:	b12e      	cbz	r6, 8015de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8015ddc:	4632      	mov	r2, r6
 8015dde:	4639      	mov	r1, r7
 8015de0:	eb0a 0005 	add.w	r0, sl, r5
 8015de4:	f7ff ff66 	bl	8015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015de8:	f1b9 0f00 	cmp.w	r9, #0
 8015dec:	d007      	beq.n	8015dfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8015dee:	6821      	ldr	r1, [r4, #0]
 8015df0:	4435      	add	r5, r6
 8015df2:	464a      	mov	r2, r9
 8015df4:	4441      	add	r1, r8
 8015df6:	eb0a 0005 	add.w	r0, sl, r5
 8015dfa:	f7ff ff5b 	bl	8015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015dfe:	4620      	mov	r0, r4
 8015e00:	f7ff ff38 	bl	8015c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015e04:	9b01      	ldr	r3, [sp, #4]
 8015e06:	f8c4 a000 	str.w	sl, [r4]
 8015e0a:	60a3      	str	r3, [r4, #8]
 8015e0c:	b002      	add	sp, #8
 8015e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8015e12:	f100 0208 	add.w	r2, r0, #8
 8015e16:	6002      	str	r2, [r0, #0]
 8015e18:	2200      	movs	r2, #0
 8015e1a:	6042      	str	r2, [r0, #4]
 8015e1c:	7202      	strb	r2, [r0, #8]
 8015e1e:	4770      	bx	lr

08015e20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>:
 8015e20:	f100 0208 	add.w	r2, r0, #8
 8015e24:	6002      	str	r2, [r0, #0]
 8015e26:	2200      	movs	r2, #0
 8015e28:	6042      	str	r2, [r0, #4]
 8015e2a:	7202      	strb	r2, [r0, #8]
 8015e2c:	4770      	bx	lr

08015e2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8015e2e:	b510      	push	{r4, lr}
 8015e30:	f100 0308 	add.w	r3, r0, #8
 8015e34:	4604      	mov	r4, r0
 8015e36:	6003      	str	r3, [r0, #0]
 8015e38:	f7ff ff65 	bl	8015d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	bd10      	pop	{r4, pc}

08015e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8015e40:	b510      	push	{r4, lr}
 8015e42:	4604      	mov	r4, r0
 8015e44:	f7ff ff16 	bl	8015c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015e48:	4620      	mov	r0, r4
 8015e4a:	bd10      	pop	{r4, pc}

08015e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8015e4c:	b510      	push	{r4, lr}
 8015e4e:	4604      	mov	r4, r0
 8015e50:	f7ff ff7d 	bl	8015d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8015e54:	4620      	mov	r0, r4
 8015e56:	bd10      	pop	{r4, pc}

08015e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8015e58:	b570      	push	{r4, r5, r6, lr}
 8015e5a:	460c      	mov	r4, r1
 8015e5c:	f851 3b08 	ldr.w	r3, [r1], #8
 8015e60:	4299      	cmp	r1, r3
 8015e62:	4605      	mov	r5, r0
 8015e64:	6800      	ldr	r0, [r0, #0]
 8015e66:	d110      	bne.n	8015e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 8015e68:	42a5      	cmp	r5, r4
 8015e6a:	d008      	beq.n	8015e7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 8015e6c:	6862      	ldr	r2, [r4, #4]
 8015e6e:	b10a      	cbz	r2, 8015e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 8015e70:	f7ff ff20 	bl	8015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015e74:	6863      	ldr	r3, [r4, #4]
 8015e76:	682a      	ldr	r2, [r5, #0]
 8015e78:	606b      	str	r3, [r5, #4]
 8015e7a:	2100      	movs	r1, #0
 8015e7c:	54d1      	strb	r1, [r2, r3]
 8015e7e:	6822      	ldr	r2, [r4, #0]
 8015e80:	2300      	movs	r3, #0
 8015e82:	6063      	str	r3, [r4, #4]
 8015e84:	7013      	strb	r3, [r2, #0]
 8015e86:	4628      	mov	r0, r5
 8015e88:	bd70      	pop	{r4, r5, r6, pc}
 8015e8a:	602b      	str	r3, [r5, #0]
 8015e8c:	f105 0608 	add.w	r6, r5, #8
 8015e90:	6863      	ldr	r3, [r4, #4]
 8015e92:	606b      	str	r3, [r5, #4]
 8015e94:	42b0      	cmp	r0, r6
 8015e96:	68a3      	ldr	r3, [r4, #8]
 8015e98:	bf18      	it	ne
 8015e9a:	68aa      	ldrne	r2, [r5, #8]
 8015e9c:	60ab      	str	r3, [r5, #8]
 8015e9e:	bf08      	it	eq
 8015ea0:	2000      	moveq	r0, #0
 8015ea2:	b110      	cbz	r0, 8015eaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 8015ea4:	6020      	str	r0, [r4, #0]
 8015ea6:	60a2      	str	r2, [r4, #8]
 8015ea8:	e7e9      	b.n	8015e7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 8015eaa:	6021      	str	r1, [r4, #0]
 8015eac:	e7e7      	b.n	8015e7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

08015eae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8015eae:	6800      	ldr	r0, [r0, #0]
 8015eb0:	4770      	bx	lr

08015eb2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 8015eb2:	e9d0 2000 	ldrd	r2, r0, [r0]
 8015eb6:	4410      	add	r0, r2
 8015eb8:	4770      	bx	lr

08015eba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8015eba:	6840      	ldr	r0, [r0, #4]
 8015ebc:	4770      	bx	lr

08015ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8015ebe:	6840      	ldr	r0, [r0, #4]
 8015ec0:	4770      	bx	lr

08015ec2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8015ec2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	9101      	str	r1, [sp, #4]
 8015ec8:	f853 2b08 	ldr.w	r2, [r3], #8
 8015ecc:	429a      	cmp	r2, r3
 8015ece:	bf18      	it	ne
 8015ed0:	6882      	ldrne	r2, [r0, #8]
 8015ed2:	9b01      	ldr	r3, [sp, #4]
 8015ed4:	bf08      	it	eq
 8015ed6:	220f      	moveq	r2, #15
 8015ed8:	4293      	cmp	r3, r2
 8015eda:	4604      	mov	r4, r0
 8015edc:	d90e      	bls.n	8015efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x3a>
 8015ede:	a901      	add	r1, sp, #4
 8015ee0:	f7ff fea6 	bl	8015c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015ee4:	6862      	ldr	r2, [r4, #4]
 8015ee6:	6821      	ldr	r1, [r4, #0]
 8015ee8:	3201      	adds	r2, #1
 8015eea:	4605      	mov	r5, r0
 8015eec:	f7ff fee2 	bl	8015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015ef0:	4620      	mov	r0, r4
 8015ef2:	f7ff febf 	bl	8015c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015ef6:	9b01      	ldr	r3, [sp, #4]
 8015ef8:	6025      	str	r5, [r4, #0]
 8015efa:	60a3      	str	r3, [r4, #8]
 8015efc:	b003      	add	sp, #12
 8015efe:	bd30      	pop	{r4, r5, pc}

08015f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8015f00:	6802      	ldr	r2, [r0, #0]
 8015f02:	2300      	movs	r3, #0
 8015f04:	6043      	str	r3, [r0, #4]
 8015f06:	7013      	strb	r3, [r2, #0]
 8015f08:	4770      	bx	lr

08015f0a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8015f0a:	6840      	ldr	r0, [r0, #4]
 8015f0c:	fab0 f080 	clz	r0, r0
 8015f10:	0940      	lsrs	r0, r0, #5
 8015f12:	4770      	bx	lr

08015f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8015f14:	6800      	ldr	r0, [r0, #0]
 8015f16:	4408      	add	r0, r1
 8015f18:	4770      	bx	lr

08015f1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f1e:	f853 2b08 	ldr.w	r2, [r3], #8
 8015f22:	6846      	ldr	r6, [r0, #4]
 8015f24:	429a      	cmp	r2, r3
 8015f26:	bf18      	it	ne
 8015f28:	6883      	ldrne	r3, [r0, #8]
 8015f2a:	f106 0501 	add.w	r5, r6, #1
 8015f2e:	bf08      	it	eq
 8015f30:	230f      	moveq	r3, #15
 8015f32:	429d      	cmp	r5, r3
 8015f34:	4604      	mov	r4, r0
 8015f36:	460f      	mov	r7, r1
 8015f38:	d906      	bls.n	8015f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	9300      	str	r3, [sp, #0]
 8015f3e:	2300      	movs	r3, #0
 8015f40:	461a      	mov	r2, r3
 8015f42:	4631      	mov	r1, r6
 8015f44:	f7ff ff29 	bl	8015d9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8015f48:	6823      	ldr	r3, [r4, #0]
 8015f4a:	559f      	strb	r7, [r3, r6]
 8015f4c:	6823      	ldr	r3, [r4, #0]
 8015f4e:	6065      	str	r5, [r4, #4]
 8015f50:	2200      	movs	r2, #0
 8015f52:	555a      	strb	r2, [r3, r5]
 8015f54:	b003      	add	sp, #12
 8015f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8015f58:	b510      	push	{r4, lr}
 8015f5a:	4604      	mov	r4, r0
 8015f5c:	f7ff ffdd 	bl	8015f1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8015f60:	4620      	mov	r0, r4
 8015f62:	bd10      	pop	{r4, pc}

08015f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8015f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015f6a:	4614      	mov	r4, r2
 8015f6c:	4680      	mov	r8, r0
 8015f6e:	462a      	mov	r2, r5
 8015f70:	4689      	mov	r9, r1
 8015f72:	461f      	mov	r7, r3
 8015f74:	4621      	mov	r1, r4
 8015f76:	4b39      	ldr	r3, [pc, #228]	; (801605c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8015f78:	f7ff fe84 	bl	8015c84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8015f7c:	4642      	mov	r2, r8
 8015f7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015f82:	f852 6b08 	ldr.w	r6, [r2], #8
 8015f86:	4296      	cmp	r6, r2
 8015f88:	bf18      	it	ne
 8015f8a:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8015f8e:	eba5 0b04 	sub.w	fp, r5, r4
 8015f92:	eb03 0a0b 	add.w	sl, r3, fp
 8015f96:	bf08      	it	eq
 8015f98:	220f      	moveq	r2, #15
 8015f9a:	4552      	cmp	r2, sl
 8015f9c:	d351      	bcc.n	8016042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8015f9e:	444e      	add	r6, r9
 8015fa0:	4639      	mov	r1, r7
 8015fa2:	44a1      	add	r9, r4
 8015fa4:	4640      	mov	r0, r8
 8015fa6:	eba3 0909 	sub.w	r9, r3, r9
 8015faa:	f7ff fe77 	bl	8015c9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8015fae:	b180      	cbz	r0, 8015fd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8015fb0:	f1b9 0f00 	cmp.w	r9, #0
 8015fb4:	d006      	beq.n	8015fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8015fb6:	42ac      	cmp	r4, r5
 8015fb8:	d004      	beq.n	8015fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8015fba:	464a      	mov	r2, r9
 8015fbc:	1931      	adds	r1, r6, r4
 8015fbe:	1970      	adds	r0, r6, r5
 8015fc0:	f7ff fe84 	bl	8015ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8015fc4:	b315      	cbz	r5, 801600c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8015fc6:	462a      	mov	r2, r5
 8015fc8:	4639      	mov	r1, r7
 8015fca:	4630      	mov	r0, r6
 8015fcc:	f7ff fe72 	bl	8015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015fd0:	e01c      	b.n	801600c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8015fd2:	b135      	cbz	r5, 8015fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8015fd4:	42ac      	cmp	r4, r5
 8015fd6:	d33c      	bcc.n	8016052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8015fd8:	462a      	mov	r2, r5
 8015fda:	4639      	mov	r1, r7
 8015fdc:	4630      	mov	r0, r6
 8015fde:	f7ff fe75 	bl	8015ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8015fe2:	f1b9 0f00 	cmp.w	r9, #0
 8015fe6:	d011      	beq.n	801600c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8015fe8:	42ac      	cmp	r4, r5
 8015fea:	d00f      	beq.n	801600c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8015fec:	464a      	mov	r2, r9
 8015fee:	1931      	adds	r1, r6, r4
 8015ff0:	1970      	adds	r0, r6, r5
 8015ff2:	f7ff fe6b 	bl	8015ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8015ff6:	42ac      	cmp	r4, r5
 8015ff8:	d208      	bcs.n	801600c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8015ffa:	4434      	add	r4, r6
 8015ffc:	197b      	adds	r3, r7, r5
 8015ffe:	429c      	cmp	r4, r3
 8016000:	d30f      	bcc.n	8016022 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8016002:	462a      	mov	r2, r5
 8016004:	4639      	mov	r1, r7
 8016006:	4630      	mov	r0, r6
 8016008:	f7ff fe60 	bl	8015ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801600c:	f8d8 3000 	ldr.w	r3, [r8]
 8016010:	f8c8 a004 	str.w	sl, [r8, #4]
 8016014:	2200      	movs	r2, #0
 8016016:	4640      	mov	r0, r8
 8016018:	f803 200a 	strb.w	r2, [r3, sl]
 801601c:	b003      	add	sp, #12
 801601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016022:	42bc      	cmp	r4, r7
 8016024:	d803      	bhi.n	801602e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8016026:	462a      	mov	r2, r5
 8016028:	eb07 010b 	add.w	r1, r7, fp
 801602c:	e7cd      	b.n	8015fca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 801602e:	1be4      	subs	r4, r4, r7
 8016030:	4622      	mov	r2, r4
 8016032:	4639      	mov	r1, r7
 8016034:	4630      	mov	r0, r6
 8016036:	f7ff fe49 	bl	8015ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801603a:	1b2a      	subs	r2, r5, r4
 801603c:	1971      	adds	r1, r6, r5
 801603e:	1930      	adds	r0, r6, r4
 8016040:	e7c4      	b.n	8015fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8016042:	9500      	str	r5, [sp, #0]
 8016044:	463b      	mov	r3, r7
 8016046:	4622      	mov	r2, r4
 8016048:	4649      	mov	r1, r9
 801604a:	4640      	mov	r0, r8
 801604c:	f7ff fea5 	bl	8015d9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8016050:	e7dc      	b.n	801600c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8016052:	f1b9 0f00 	cmp.w	r9, #0
 8016056:	d0d0      	beq.n	8015ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8016058:	e7c8      	b.n	8015fec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 801605a:	bf00      	nop
 801605c:	0801b928 	.word	0x0801b928

08016060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8016060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016062:	4604      	mov	r4, r0
 8016064:	4608      	mov	r0, r1
 8016066:	9103      	str	r1, [sp, #12]
 8016068:	f7ea f912 	bl	8000290 <strlen>
 801606c:	9b03      	ldr	r3, [sp, #12]
 801606e:	9000      	str	r0, [sp, #0]
 8016070:	6862      	ldr	r2, [r4, #4]
 8016072:	2100      	movs	r1, #0
 8016074:	4620      	mov	r0, r4
 8016076:	f7ff ff75 	bl	8015f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801607a:	b004      	add	sp, #16
 801607c:	bd10      	pop	{r4, pc}

0801607e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 801607e:	b508      	push	{r3, lr}
 8016080:	f7ff ffee 	bl	8016060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8016084:	bd08      	pop	{r3, pc}

08016086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8016086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016088:	4604      	mov	r4, r0
 801608a:	4623      	mov	r3, r4
 801608c:	6840      	ldr	r0, [r0, #4]
 801608e:	f853 6b08 	ldr.w	r6, [r3], #8
 8016092:	429e      	cmp	r6, r3
 8016094:	bf18      	it	ne
 8016096:	68a3      	ldrne	r3, [r4, #8]
 8016098:	eb00 0502 	add.w	r5, r0, r2
 801609c:	bf08      	it	eq
 801609e:	230f      	moveq	r3, #15
 80160a0:	429d      	cmp	r5, r3
 80160a2:	d80a      	bhi.n	80160ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 80160a4:	b112      	cbz	r2, 80160ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 80160a6:	4430      	add	r0, r6
 80160a8:	f7ff fe04 	bl	8015cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80160ac:	6823      	ldr	r3, [r4, #0]
 80160ae:	6065      	str	r5, [r4, #4]
 80160b0:	2200      	movs	r2, #0
 80160b2:	4620      	mov	r0, r4
 80160b4:	555a      	strb	r2, [r3, r5]
 80160b6:	b002      	add	sp, #8
 80160b8:	bd70      	pop	{r4, r5, r6, pc}
 80160ba:	9200      	str	r2, [sp, #0]
 80160bc:	460b      	mov	r3, r1
 80160be:	2200      	movs	r2, #0
 80160c0:	4601      	mov	r1, r0
 80160c2:	4620      	mov	r0, r4
 80160c4:	f7ff fe69 	bl	8015d9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80160c8:	e7f0      	b.n	80160ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

080160ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 80160ca:	b508      	push	{r3, lr}
 80160cc:	e9d1 1200 	ldrd	r1, r2, [r1]
 80160d0:	f7ff ffd9 	bl	8016086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80160d4:	bd08      	pop	{r3, pc}

080160d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 80160d6:	b508      	push	{r3, lr}
 80160d8:	f7ff fff7 	bl	80160ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80160dc:	bd08      	pop	{r3, pc}
	...

080160e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 80160e0:	b570      	push	{r4, r5, r6, lr}
 80160e2:	4b06      	ldr	r3, [pc, #24]	; (80160fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 80160e4:	4604      	mov	r4, r0
 80160e6:	460d      	mov	r5, r1
 80160e8:	4616      	mov	r6, r2
 80160ea:	2100      	movs	r1, #0
 80160ec:	f7ff fdca 	bl	8015c84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80160f0:	4632      	mov	r2, r6
 80160f2:	4629      	mov	r1, r5
 80160f4:	4620      	mov	r0, r4
 80160f6:	f7ff ffc6 	bl	8016086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80160fa:	bd70      	pop	{r4, r5, r6, pc}
 80160fc:	0801b941 	.word	0x0801b941

08016100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8016100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016102:	4604      	mov	r4, r0
 8016104:	4608      	mov	r0, r1
 8016106:	460d      	mov	r5, r1
 8016108:	f7ea f8c2 	bl	8000290 <strlen>
 801610c:	4b06      	ldr	r3, [pc, #24]	; (8016128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 801610e:	9001      	str	r0, [sp, #4]
 8016110:	4602      	mov	r2, r0
 8016112:	2100      	movs	r1, #0
 8016114:	4620      	mov	r0, r4
 8016116:	f7ff fdb5 	bl	8015c84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801611a:	9a01      	ldr	r2, [sp, #4]
 801611c:	4629      	mov	r1, r5
 801611e:	4620      	mov	r0, r4
 8016120:	f7ff ffb1 	bl	8016086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8016124:	b003      	add	sp, #12
 8016126:	bd30      	pop	{r4, r5, pc}
 8016128:	0801b941 	.word	0x0801b941

0801612c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 801612c:	b508      	push	{r3, lr}
 801612e:	f7ff ffe7 	bl	8016100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8016132:	bd08      	pop	{r3, pc}

08016134 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8016134:	6800      	ldr	r0, [r0, #0]
 8016136:	4770      	bx	lr

08016138 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 8016138:	4770      	bx	lr

0801613a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 801613a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801613c:	6846      	ldr	r6, [r0, #4]
 801613e:	9101      	str	r1, [sp, #4]
 8016140:	4605      	mov	r5, r0
 8016142:	4608      	mov	r0, r1
 8016144:	f7ea f8a4 	bl	8000290 <strlen>
 8016148:	4286      	cmp	r6, r0
 801614a:	4604      	mov	r4, r0
 801614c:	4632      	mov	r2, r6
 801614e:	9901      	ldr	r1, [sp, #4]
 8016150:	bf28      	it	cs
 8016152:	4602      	movcs	r2, r0
 8016154:	6828      	ldr	r0, [r5, #0]
 8016156:	f7ff fd58 	bl	8015c0a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 801615a:	b900      	cbnz	r0, 801615e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 801615c:	1b30      	subs	r0, r6, r4
 801615e:	b002      	add	sp, #8
 8016160:	bd70      	pop	{r4, r5, r6, pc}

08016162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8016162:	6001      	str	r1, [r0, #0]
 8016164:	4770      	bx	lr
	...

08016168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8016168:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801616a:	4604      	mov	r4, r0
 801616c:	4616      	mov	r6, r2
 801616e:	460d      	mov	r5, r1
 8016170:	b919      	cbnz	r1, 801617a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8016172:	b112      	cbz	r2, 801617a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8016174:	480d      	ldr	r0, [pc, #52]	; (80161ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8016176:	f7ff fd3e 	bl	8015bf6 <_ZSt19__throw_logic_errorPKc>
 801617a:	1b73      	subs	r3, r6, r5
 801617c:	2b0f      	cmp	r3, #15
 801617e:	9301      	str	r3, [sp, #4]
 8016180:	d907      	bls.n	8016192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8016182:	2200      	movs	r2, #0
 8016184:	a901      	add	r1, sp, #4
 8016186:	4620      	mov	r0, r4
 8016188:	f7ff fd52 	bl	8015c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801618c:	9b01      	ldr	r3, [sp, #4]
 801618e:	6020      	str	r0, [r4, #0]
 8016190:	60a3      	str	r3, [r4, #8]
 8016192:	4632      	mov	r2, r6
 8016194:	4629      	mov	r1, r5
 8016196:	6820      	ldr	r0, [r4, #0]
 8016198:	f7ff fdcf 	bl	8015d3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801619c:	9b01      	ldr	r3, [sp, #4]
 801619e:	6822      	ldr	r2, [r4, #0]
 80161a0:	6063      	str	r3, [r4, #4]
 80161a2:	2100      	movs	r1, #0
 80161a4:	54d1      	strb	r1, [r2, r3]
 80161a6:	b002      	add	sp, #8
 80161a8:	bd70      	pop	{r4, r5, r6, pc}
 80161aa:	bf00      	nop
 80161ac:	0801b956 	.word	0x0801b956

080161b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80161b0:	b538      	push	{r3, r4, r5, lr}
 80161b2:	f100 0308 	add.w	r3, r0, #8
 80161b6:	6003      	str	r3, [r0, #0]
 80161b8:	e9d1 5200 	ldrd	r5, r2, [r1]
 80161bc:	4604      	mov	r4, r0
 80161be:	f04f 0300 	mov.w	r3, #0
 80161c2:	442a      	add	r2, r5
 80161c4:	4629      	mov	r1, r5
 80161c6:	f7ff ffcf 	bl	8016168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80161ca:	4620      	mov	r0, r4
 80161cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080161d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80161d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80161d2:	4604      	mov	r4, r0
 80161d4:	4616      	mov	r6, r2
 80161d6:	460d      	mov	r5, r1
 80161d8:	b919      	cbnz	r1, 80161e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80161da:	b112      	cbz	r2, 80161e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80161dc:	480d      	ldr	r0, [pc, #52]	; (8016214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80161de:	f7ff fd0a 	bl	8015bf6 <_ZSt19__throw_logic_errorPKc>
 80161e2:	1b73      	subs	r3, r6, r5
 80161e4:	2b0f      	cmp	r3, #15
 80161e6:	9301      	str	r3, [sp, #4]
 80161e8:	d907      	bls.n	80161fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80161ea:	2200      	movs	r2, #0
 80161ec:	a901      	add	r1, sp, #4
 80161ee:	4620      	mov	r0, r4
 80161f0:	f7ff fd1e 	bl	8015c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80161f4:	9b01      	ldr	r3, [sp, #4]
 80161f6:	6020      	str	r0, [r4, #0]
 80161f8:	60a3      	str	r3, [r4, #8]
 80161fa:	4632      	mov	r2, r6
 80161fc:	4629      	mov	r1, r5
 80161fe:	6820      	ldr	r0, [r4, #0]
 8016200:	f7ff fda0 	bl	8015d44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8016204:	9b01      	ldr	r3, [sp, #4]
 8016206:	6822      	ldr	r2, [r4, #0]
 8016208:	6063      	str	r3, [r4, #4]
 801620a:	2100      	movs	r1, #0
 801620c:	54d1      	strb	r1, [r2, r3]
 801620e:	b002      	add	sp, #8
 8016210:	bd70      	pop	{r4, r5, r6, pc}
 8016212:	bf00      	nop
 8016214:	0801b956 	.word	0x0801b956

08016218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8016218:	b538      	push	{r3, r4, r5, lr}
 801621a:	f100 0308 	add.w	r3, r0, #8
 801621e:	4604      	mov	r4, r0
 8016220:	6003      	str	r3, [r0, #0]
 8016222:	460d      	mov	r5, r1
 8016224:	b159      	cbz	r1, 801623e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8016226:	4608      	mov	r0, r1
 8016228:	f7ea f832 	bl	8000290 <strlen>
 801622c:	182a      	adds	r2, r5, r0
 801622e:	4620      	mov	r0, r4
 8016230:	f04f 0300 	mov.w	r3, #0
 8016234:	4629      	mov	r1, r5
 8016236:	f7ff ffcb 	bl	80161d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801623a:	4620      	mov	r0, r4
 801623c:	bd38      	pop	{r3, r4, r5, pc}
 801623e:	2201      	movs	r2, #1
 8016240:	e7f5      	b.n	801622e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08016242 <_ZdlPv>:
 8016242:	f000 b819 	b.w	8016278 <free>
	...

08016248 <_ZSt15get_new_handlerv>:
 8016248:	4b02      	ldr	r3, [pc, #8]	; (8016254 <_ZSt15get_new_handlerv+0xc>)
 801624a:	6818      	ldr	r0, [r3, #0]
 801624c:	f3bf 8f5b 	dmb	ish
 8016250:	4770      	bx	lr
 8016252:	bf00      	nop
 8016254:	20003328 	.word	0x20003328

08016258 <abort>:
 8016258:	b508      	push	{r3, lr}
 801625a:	2006      	movs	r0, #6
 801625c:	f001 fdd2 	bl	8017e04 <raise>
 8016260:	2001      	movs	r0, #1
 8016262:	f7f8 f907 	bl	800e474 <_exit>
	...

08016268 <malloc>:
 8016268:	4b02      	ldr	r3, [pc, #8]	; (8016274 <malloc+0xc>)
 801626a:	4601      	mov	r1, r0
 801626c:	6818      	ldr	r0, [r3, #0]
 801626e:	f000 b82b 	b.w	80162c8 <_malloc_r>
 8016272:	bf00      	nop
 8016274:	20000228 	.word	0x20000228

08016278 <free>:
 8016278:	4b02      	ldr	r3, [pc, #8]	; (8016284 <free+0xc>)
 801627a:	4601      	mov	r1, r0
 801627c:	6818      	ldr	r0, [r3, #0]
 801627e:	f002 bcfd 	b.w	8018c7c <_free_r>
 8016282:	bf00      	nop
 8016284:	20000228 	.word	0x20000228

08016288 <sbrk_aligned>:
 8016288:	b570      	push	{r4, r5, r6, lr}
 801628a:	4e0e      	ldr	r6, [pc, #56]	; (80162c4 <sbrk_aligned+0x3c>)
 801628c:	460c      	mov	r4, r1
 801628e:	6831      	ldr	r1, [r6, #0]
 8016290:	4605      	mov	r5, r0
 8016292:	b911      	cbnz	r1, 801629a <sbrk_aligned+0x12>
 8016294:	f001 fe0a 	bl	8017eac <_sbrk_r>
 8016298:	6030      	str	r0, [r6, #0]
 801629a:	4621      	mov	r1, r4
 801629c:	4628      	mov	r0, r5
 801629e:	f001 fe05 	bl	8017eac <_sbrk_r>
 80162a2:	1c43      	adds	r3, r0, #1
 80162a4:	d00a      	beq.n	80162bc <sbrk_aligned+0x34>
 80162a6:	1cc4      	adds	r4, r0, #3
 80162a8:	f024 0403 	bic.w	r4, r4, #3
 80162ac:	42a0      	cmp	r0, r4
 80162ae:	d007      	beq.n	80162c0 <sbrk_aligned+0x38>
 80162b0:	1a21      	subs	r1, r4, r0
 80162b2:	4628      	mov	r0, r5
 80162b4:	f001 fdfa 	bl	8017eac <_sbrk_r>
 80162b8:	3001      	adds	r0, #1
 80162ba:	d101      	bne.n	80162c0 <sbrk_aligned+0x38>
 80162bc:	f04f 34ff 	mov.w	r4, #4294967295
 80162c0:	4620      	mov	r0, r4
 80162c2:	bd70      	pop	{r4, r5, r6, pc}
 80162c4:	20003330 	.word	0x20003330

080162c8 <_malloc_r>:
 80162c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162cc:	1ccd      	adds	r5, r1, #3
 80162ce:	f025 0503 	bic.w	r5, r5, #3
 80162d2:	3508      	adds	r5, #8
 80162d4:	2d0c      	cmp	r5, #12
 80162d6:	bf38      	it	cc
 80162d8:	250c      	movcc	r5, #12
 80162da:	2d00      	cmp	r5, #0
 80162dc:	4607      	mov	r7, r0
 80162de:	db01      	blt.n	80162e4 <_malloc_r+0x1c>
 80162e0:	42a9      	cmp	r1, r5
 80162e2:	d905      	bls.n	80162f0 <_malloc_r+0x28>
 80162e4:	230c      	movs	r3, #12
 80162e6:	603b      	str	r3, [r7, #0]
 80162e8:	2600      	movs	r6, #0
 80162ea:	4630      	mov	r0, r6
 80162ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80163c4 <_malloc_r+0xfc>
 80162f4:	f000 f868 	bl	80163c8 <__malloc_lock>
 80162f8:	f8d8 3000 	ldr.w	r3, [r8]
 80162fc:	461c      	mov	r4, r3
 80162fe:	bb5c      	cbnz	r4, 8016358 <_malloc_r+0x90>
 8016300:	4629      	mov	r1, r5
 8016302:	4638      	mov	r0, r7
 8016304:	f7ff ffc0 	bl	8016288 <sbrk_aligned>
 8016308:	1c43      	adds	r3, r0, #1
 801630a:	4604      	mov	r4, r0
 801630c:	d155      	bne.n	80163ba <_malloc_r+0xf2>
 801630e:	f8d8 4000 	ldr.w	r4, [r8]
 8016312:	4626      	mov	r6, r4
 8016314:	2e00      	cmp	r6, #0
 8016316:	d145      	bne.n	80163a4 <_malloc_r+0xdc>
 8016318:	2c00      	cmp	r4, #0
 801631a:	d048      	beq.n	80163ae <_malloc_r+0xe6>
 801631c:	6823      	ldr	r3, [r4, #0]
 801631e:	4631      	mov	r1, r6
 8016320:	4638      	mov	r0, r7
 8016322:	eb04 0903 	add.w	r9, r4, r3
 8016326:	f001 fdc1 	bl	8017eac <_sbrk_r>
 801632a:	4581      	cmp	r9, r0
 801632c:	d13f      	bne.n	80163ae <_malloc_r+0xe6>
 801632e:	6821      	ldr	r1, [r4, #0]
 8016330:	1a6d      	subs	r5, r5, r1
 8016332:	4629      	mov	r1, r5
 8016334:	4638      	mov	r0, r7
 8016336:	f7ff ffa7 	bl	8016288 <sbrk_aligned>
 801633a:	3001      	adds	r0, #1
 801633c:	d037      	beq.n	80163ae <_malloc_r+0xe6>
 801633e:	6823      	ldr	r3, [r4, #0]
 8016340:	442b      	add	r3, r5
 8016342:	6023      	str	r3, [r4, #0]
 8016344:	f8d8 3000 	ldr.w	r3, [r8]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d038      	beq.n	80163be <_malloc_r+0xf6>
 801634c:	685a      	ldr	r2, [r3, #4]
 801634e:	42a2      	cmp	r2, r4
 8016350:	d12b      	bne.n	80163aa <_malloc_r+0xe2>
 8016352:	2200      	movs	r2, #0
 8016354:	605a      	str	r2, [r3, #4]
 8016356:	e00f      	b.n	8016378 <_malloc_r+0xb0>
 8016358:	6822      	ldr	r2, [r4, #0]
 801635a:	1b52      	subs	r2, r2, r5
 801635c:	d41f      	bmi.n	801639e <_malloc_r+0xd6>
 801635e:	2a0b      	cmp	r2, #11
 8016360:	d917      	bls.n	8016392 <_malloc_r+0xca>
 8016362:	1961      	adds	r1, r4, r5
 8016364:	42a3      	cmp	r3, r4
 8016366:	6025      	str	r5, [r4, #0]
 8016368:	bf18      	it	ne
 801636a:	6059      	strne	r1, [r3, #4]
 801636c:	6863      	ldr	r3, [r4, #4]
 801636e:	bf08      	it	eq
 8016370:	f8c8 1000 	streq.w	r1, [r8]
 8016374:	5162      	str	r2, [r4, r5]
 8016376:	604b      	str	r3, [r1, #4]
 8016378:	4638      	mov	r0, r7
 801637a:	f104 060b 	add.w	r6, r4, #11
 801637e:	f000 f829 	bl	80163d4 <__malloc_unlock>
 8016382:	f026 0607 	bic.w	r6, r6, #7
 8016386:	1d23      	adds	r3, r4, #4
 8016388:	1af2      	subs	r2, r6, r3
 801638a:	d0ae      	beq.n	80162ea <_malloc_r+0x22>
 801638c:	1b9b      	subs	r3, r3, r6
 801638e:	50a3      	str	r3, [r4, r2]
 8016390:	e7ab      	b.n	80162ea <_malloc_r+0x22>
 8016392:	42a3      	cmp	r3, r4
 8016394:	6862      	ldr	r2, [r4, #4]
 8016396:	d1dd      	bne.n	8016354 <_malloc_r+0x8c>
 8016398:	f8c8 2000 	str.w	r2, [r8]
 801639c:	e7ec      	b.n	8016378 <_malloc_r+0xb0>
 801639e:	4623      	mov	r3, r4
 80163a0:	6864      	ldr	r4, [r4, #4]
 80163a2:	e7ac      	b.n	80162fe <_malloc_r+0x36>
 80163a4:	4634      	mov	r4, r6
 80163a6:	6876      	ldr	r6, [r6, #4]
 80163a8:	e7b4      	b.n	8016314 <_malloc_r+0x4c>
 80163aa:	4613      	mov	r3, r2
 80163ac:	e7cc      	b.n	8016348 <_malloc_r+0x80>
 80163ae:	230c      	movs	r3, #12
 80163b0:	603b      	str	r3, [r7, #0]
 80163b2:	4638      	mov	r0, r7
 80163b4:	f000 f80e 	bl	80163d4 <__malloc_unlock>
 80163b8:	e797      	b.n	80162ea <_malloc_r+0x22>
 80163ba:	6025      	str	r5, [r4, #0]
 80163bc:	e7dc      	b.n	8016378 <_malloc_r+0xb0>
 80163be:	605b      	str	r3, [r3, #4]
 80163c0:	deff      	udf	#255	; 0xff
 80163c2:	bf00      	nop
 80163c4:	2000332c 	.word	0x2000332c

080163c8 <__malloc_lock>:
 80163c8:	4801      	ldr	r0, [pc, #4]	; (80163d0 <__malloc_lock+0x8>)
 80163ca:	f001 bdbc 	b.w	8017f46 <__retarget_lock_acquire_recursive>
 80163ce:	bf00      	nop
 80163d0:	20003474 	.word	0x20003474

080163d4 <__malloc_unlock>:
 80163d4:	4801      	ldr	r0, [pc, #4]	; (80163dc <__malloc_unlock+0x8>)
 80163d6:	f001 bdb7 	b.w	8017f48 <__retarget_lock_release_recursive>
 80163da:	bf00      	nop
 80163dc:	20003474 	.word	0x20003474

080163e0 <realloc>:
 80163e0:	4b02      	ldr	r3, [pc, #8]	; (80163ec <realloc+0xc>)
 80163e2:	460a      	mov	r2, r1
 80163e4:	4601      	mov	r1, r0
 80163e6:	6818      	ldr	r0, [r3, #0]
 80163e8:	f000 b802 	b.w	80163f0 <_realloc_r>
 80163ec:	20000228 	.word	0x20000228

080163f0 <_realloc_r>:
 80163f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163f4:	4680      	mov	r8, r0
 80163f6:	4614      	mov	r4, r2
 80163f8:	460e      	mov	r6, r1
 80163fa:	b921      	cbnz	r1, 8016406 <_realloc_r+0x16>
 80163fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016400:	4611      	mov	r1, r2
 8016402:	f7ff bf61 	b.w	80162c8 <_malloc_r>
 8016406:	b92a      	cbnz	r2, 8016414 <_realloc_r+0x24>
 8016408:	f002 fc38 	bl	8018c7c <_free_r>
 801640c:	4625      	mov	r5, r4
 801640e:	4628      	mov	r0, r5
 8016410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016414:	f003 fc95 	bl	8019d42 <_malloc_usable_size_r>
 8016418:	4284      	cmp	r4, r0
 801641a:	4607      	mov	r7, r0
 801641c:	d802      	bhi.n	8016424 <_realloc_r+0x34>
 801641e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016422:	d812      	bhi.n	801644a <_realloc_r+0x5a>
 8016424:	4621      	mov	r1, r4
 8016426:	4640      	mov	r0, r8
 8016428:	f7ff ff4e 	bl	80162c8 <_malloc_r>
 801642c:	4605      	mov	r5, r0
 801642e:	2800      	cmp	r0, #0
 8016430:	d0ed      	beq.n	801640e <_realloc_r+0x1e>
 8016432:	42bc      	cmp	r4, r7
 8016434:	4622      	mov	r2, r4
 8016436:	4631      	mov	r1, r6
 8016438:	bf28      	it	cs
 801643a:	463a      	movcs	r2, r7
 801643c:	f001 fd8d 	bl	8017f5a <memcpy>
 8016440:	4631      	mov	r1, r6
 8016442:	4640      	mov	r0, r8
 8016444:	f002 fc1a 	bl	8018c7c <_free_r>
 8016448:	e7e1      	b.n	801640e <_realloc_r+0x1e>
 801644a:	4635      	mov	r5, r6
 801644c:	e7df      	b.n	801640e <_realloc_r+0x1e>

0801644e <sulp>:
 801644e:	b570      	push	{r4, r5, r6, lr}
 8016450:	4604      	mov	r4, r0
 8016452:	460d      	mov	r5, r1
 8016454:	ec45 4b10 	vmov	d0, r4, r5
 8016458:	4616      	mov	r6, r2
 801645a:	f003 fb31 	bl	8019ac0 <__ulp>
 801645e:	ec51 0b10 	vmov	r0, r1, d0
 8016462:	b17e      	cbz	r6, 8016484 <sulp+0x36>
 8016464:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016468:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801646c:	2b00      	cmp	r3, #0
 801646e:	dd09      	ble.n	8016484 <sulp+0x36>
 8016470:	051b      	lsls	r3, r3, #20
 8016472:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016476:	2400      	movs	r4, #0
 8016478:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801647c:	4622      	mov	r2, r4
 801647e:	462b      	mov	r3, r5
 8016480:	f7ea f8ca 	bl	8000618 <__aeabi_dmul>
 8016484:	bd70      	pop	{r4, r5, r6, pc}
	...

08016488 <_strtod_l>:
 8016488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801648c:	ed2d 8b02 	vpush	{d8}
 8016490:	b09b      	sub	sp, #108	; 0x6c
 8016492:	4604      	mov	r4, r0
 8016494:	9213      	str	r2, [sp, #76]	; 0x4c
 8016496:	2200      	movs	r2, #0
 8016498:	9216      	str	r2, [sp, #88]	; 0x58
 801649a:	460d      	mov	r5, r1
 801649c:	f04f 0800 	mov.w	r8, #0
 80164a0:	f04f 0900 	mov.w	r9, #0
 80164a4:	460a      	mov	r2, r1
 80164a6:	9215      	str	r2, [sp, #84]	; 0x54
 80164a8:	7811      	ldrb	r1, [r2, #0]
 80164aa:	292b      	cmp	r1, #43	; 0x2b
 80164ac:	d04c      	beq.n	8016548 <_strtod_l+0xc0>
 80164ae:	d83a      	bhi.n	8016526 <_strtod_l+0x9e>
 80164b0:	290d      	cmp	r1, #13
 80164b2:	d834      	bhi.n	801651e <_strtod_l+0x96>
 80164b4:	2908      	cmp	r1, #8
 80164b6:	d834      	bhi.n	8016522 <_strtod_l+0x9a>
 80164b8:	2900      	cmp	r1, #0
 80164ba:	d03d      	beq.n	8016538 <_strtod_l+0xb0>
 80164bc:	2200      	movs	r2, #0
 80164be:	920a      	str	r2, [sp, #40]	; 0x28
 80164c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80164c2:	7832      	ldrb	r2, [r6, #0]
 80164c4:	2a30      	cmp	r2, #48	; 0x30
 80164c6:	f040 80b4 	bne.w	8016632 <_strtod_l+0x1aa>
 80164ca:	7872      	ldrb	r2, [r6, #1]
 80164cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80164d0:	2a58      	cmp	r2, #88	; 0x58
 80164d2:	d170      	bne.n	80165b6 <_strtod_l+0x12e>
 80164d4:	9302      	str	r3, [sp, #8]
 80164d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164d8:	9301      	str	r3, [sp, #4]
 80164da:	ab16      	add	r3, sp, #88	; 0x58
 80164dc:	9300      	str	r3, [sp, #0]
 80164de:	4a8e      	ldr	r2, [pc, #568]	; (8016718 <_strtod_l+0x290>)
 80164e0:	ab17      	add	r3, sp, #92	; 0x5c
 80164e2:	a915      	add	r1, sp, #84	; 0x54
 80164e4:	4620      	mov	r0, r4
 80164e6:	f002 fc7d 	bl	8018de4 <__gethex>
 80164ea:	f010 070f 	ands.w	r7, r0, #15
 80164ee:	4605      	mov	r5, r0
 80164f0:	d005      	beq.n	80164fe <_strtod_l+0x76>
 80164f2:	2f06      	cmp	r7, #6
 80164f4:	d12a      	bne.n	801654c <_strtod_l+0xc4>
 80164f6:	3601      	adds	r6, #1
 80164f8:	2300      	movs	r3, #0
 80164fa:	9615      	str	r6, [sp, #84]	; 0x54
 80164fc:	930a      	str	r3, [sp, #40]	; 0x28
 80164fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016500:	2b00      	cmp	r3, #0
 8016502:	f040 857f 	bne.w	8017004 <_strtod_l+0xb7c>
 8016506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016508:	b1db      	cbz	r3, 8016542 <_strtod_l+0xba>
 801650a:	4642      	mov	r2, r8
 801650c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016510:	ec43 2b10 	vmov	d0, r2, r3
 8016514:	b01b      	add	sp, #108	; 0x6c
 8016516:	ecbd 8b02 	vpop	{d8}
 801651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801651e:	2920      	cmp	r1, #32
 8016520:	d1cc      	bne.n	80164bc <_strtod_l+0x34>
 8016522:	3201      	adds	r2, #1
 8016524:	e7bf      	b.n	80164a6 <_strtod_l+0x1e>
 8016526:	292d      	cmp	r1, #45	; 0x2d
 8016528:	d1c8      	bne.n	80164bc <_strtod_l+0x34>
 801652a:	2101      	movs	r1, #1
 801652c:	910a      	str	r1, [sp, #40]	; 0x28
 801652e:	1c51      	adds	r1, r2, #1
 8016530:	9115      	str	r1, [sp, #84]	; 0x54
 8016532:	7852      	ldrb	r2, [r2, #1]
 8016534:	2a00      	cmp	r2, #0
 8016536:	d1c3      	bne.n	80164c0 <_strtod_l+0x38>
 8016538:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801653a:	9515      	str	r5, [sp, #84]	; 0x54
 801653c:	2b00      	cmp	r3, #0
 801653e:	f040 855f 	bne.w	8017000 <_strtod_l+0xb78>
 8016542:	4642      	mov	r2, r8
 8016544:	464b      	mov	r3, r9
 8016546:	e7e3      	b.n	8016510 <_strtod_l+0x88>
 8016548:	2100      	movs	r1, #0
 801654a:	e7ef      	b.n	801652c <_strtod_l+0xa4>
 801654c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801654e:	b13a      	cbz	r2, 8016560 <_strtod_l+0xd8>
 8016550:	2135      	movs	r1, #53	; 0x35
 8016552:	a818      	add	r0, sp, #96	; 0x60
 8016554:	f003 fbb1 	bl	8019cba <__copybits>
 8016558:	9916      	ldr	r1, [sp, #88]	; 0x58
 801655a:	4620      	mov	r0, r4
 801655c:	f002 ff84 	bl	8019468 <_Bfree>
 8016560:	3f01      	subs	r7, #1
 8016562:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016564:	2f04      	cmp	r7, #4
 8016566:	d806      	bhi.n	8016576 <_strtod_l+0xee>
 8016568:	e8df f007 	tbb	[pc, r7]
 801656c:	201d0314 	.word	0x201d0314
 8016570:	14          	.byte	0x14
 8016571:	00          	.byte	0x00
 8016572:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8016576:	05e9      	lsls	r1, r5, #23
 8016578:	bf48      	it	mi
 801657a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801657e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016582:	0d1b      	lsrs	r3, r3, #20
 8016584:	051b      	lsls	r3, r3, #20
 8016586:	2b00      	cmp	r3, #0
 8016588:	d1b9      	bne.n	80164fe <_strtod_l+0x76>
 801658a:	f001 fcb1 	bl	8017ef0 <__errno>
 801658e:	2322      	movs	r3, #34	; 0x22
 8016590:	6003      	str	r3, [r0, #0]
 8016592:	e7b4      	b.n	80164fe <_strtod_l+0x76>
 8016594:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8016598:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801659c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80165a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80165a4:	e7e7      	b.n	8016576 <_strtod_l+0xee>
 80165a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016720 <_strtod_l+0x298>
 80165aa:	e7e4      	b.n	8016576 <_strtod_l+0xee>
 80165ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80165b0:	f04f 38ff 	mov.w	r8, #4294967295
 80165b4:	e7df      	b.n	8016576 <_strtod_l+0xee>
 80165b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165b8:	1c5a      	adds	r2, r3, #1
 80165ba:	9215      	str	r2, [sp, #84]	; 0x54
 80165bc:	785b      	ldrb	r3, [r3, #1]
 80165be:	2b30      	cmp	r3, #48	; 0x30
 80165c0:	d0f9      	beq.n	80165b6 <_strtod_l+0x12e>
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d09b      	beq.n	80164fe <_strtod_l+0x76>
 80165c6:	2301      	movs	r3, #1
 80165c8:	f04f 0a00 	mov.w	sl, #0
 80165cc:	9304      	str	r3, [sp, #16]
 80165ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80165d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80165d6:	46d3      	mov	fp, sl
 80165d8:	220a      	movs	r2, #10
 80165da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80165dc:	7806      	ldrb	r6, [r0, #0]
 80165de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80165e2:	b2d9      	uxtb	r1, r3
 80165e4:	2909      	cmp	r1, #9
 80165e6:	d926      	bls.n	8016636 <_strtod_l+0x1ae>
 80165e8:	494c      	ldr	r1, [pc, #304]	; (801671c <_strtod_l+0x294>)
 80165ea:	2201      	movs	r2, #1
 80165ec:	f001 fbcf 	bl	8017d8e <strncmp>
 80165f0:	2800      	cmp	r0, #0
 80165f2:	d030      	beq.n	8016656 <_strtod_l+0x1ce>
 80165f4:	2000      	movs	r0, #0
 80165f6:	4632      	mov	r2, r6
 80165f8:	9005      	str	r0, [sp, #20]
 80165fa:	465e      	mov	r6, fp
 80165fc:	4603      	mov	r3, r0
 80165fe:	2a65      	cmp	r2, #101	; 0x65
 8016600:	d001      	beq.n	8016606 <_strtod_l+0x17e>
 8016602:	2a45      	cmp	r2, #69	; 0x45
 8016604:	d113      	bne.n	801662e <_strtod_l+0x1a6>
 8016606:	b91e      	cbnz	r6, 8016610 <_strtod_l+0x188>
 8016608:	9a04      	ldr	r2, [sp, #16]
 801660a:	4302      	orrs	r2, r0
 801660c:	d094      	beq.n	8016538 <_strtod_l+0xb0>
 801660e:	2600      	movs	r6, #0
 8016610:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8016612:	1c6a      	adds	r2, r5, #1
 8016614:	9215      	str	r2, [sp, #84]	; 0x54
 8016616:	786a      	ldrb	r2, [r5, #1]
 8016618:	2a2b      	cmp	r2, #43	; 0x2b
 801661a:	d074      	beq.n	8016706 <_strtod_l+0x27e>
 801661c:	2a2d      	cmp	r2, #45	; 0x2d
 801661e:	d078      	beq.n	8016712 <_strtod_l+0x28a>
 8016620:	f04f 0c00 	mov.w	ip, #0
 8016624:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016628:	2909      	cmp	r1, #9
 801662a:	d97f      	bls.n	801672c <_strtod_l+0x2a4>
 801662c:	9515      	str	r5, [sp, #84]	; 0x54
 801662e:	2700      	movs	r7, #0
 8016630:	e09e      	b.n	8016770 <_strtod_l+0x2e8>
 8016632:	2300      	movs	r3, #0
 8016634:	e7c8      	b.n	80165c8 <_strtod_l+0x140>
 8016636:	f1bb 0f08 	cmp.w	fp, #8
 801663a:	bfd8      	it	le
 801663c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801663e:	f100 0001 	add.w	r0, r0, #1
 8016642:	bfda      	itte	le
 8016644:	fb02 3301 	mlale	r3, r2, r1, r3
 8016648:	9309      	strle	r3, [sp, #36]	; 0x24
 801664a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801664e:	f10b 0b01 	add.w	fp, fp, #1
 8016652:	9015      	str	r0, [sp, #84]	; 0x54
 8016654:	e7c1      	b.n	80165da <_strtod_l+0x152>
 8016656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016658:	1c5a      	adds	r2, r3, #1
 801665a:	9215      	str	r2, [sp, #84]	; 0x54
 801665c:	785a      	ldrb	r2, [r3, #1]
 801665e:	f1bb 0f00 	cmp.w	fp, #0
 8016662:	d037      	beq.n	80166d4 <_strtod_l+0x24c>
 8016664:	9005      	str	r0, [sp, #20]
 8016666:	465e      	mov	r6, fp
 8016668:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801666c:	2b09      	cmp	r3, #9
 801666e:	d912      	bls.n	8016696 <_strtod_l+0x20e>
 8016670:	2301      	movs	r3, #1
 8016672:	e7c4      	b.n	80165fe <_strtod_l+0x176>
 8016674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016676:	1c5a      	adds	r2, r3, #1
 8016678:	9215      	str	r2, [sp, #84]	; 0x54
 801667a:	785a      	ldrb	r2, [r3, #1]
 801667c:	3001      	adds	r0, #1
 801667e:	2a30      	cmp	r2, #48	; 0x30
 8016680:	d0f8      	beq.n	8016674 <_strtod_l+0x1ec>
 8016682:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016686:	2b08      	cmp	r3, #8
 8016688:	f200 84c1 	bhi.w	801700e <_strtod_l+0xb86>
 801668c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801668e:	9005      	str	r0, [sp, #20]
 8016690:	2000      	movs	r0, #0
 8016692:	930b      	str	r3, [sp, #44]	; 0x2c
 8016694:	4606      	mov	r6, r0
 8016696:	3a30      	subs	r2, #48	; 0x30
 8016698:	f100 0301 	add.w	r3, r0, #1
 801669c:	d014      	beq.n	80166c8 <_strtod_l+0x240>
 801669e:	9905      	ldr	r1, [sp, #20]
 80166a0:	4419      	add	r1, r3
 80166a2:	9105      	str	r1, [sp, #20]
 80166a4:	4633      	mov	r3, r6
 80166a6:	eb00 0c06 	add.w	ip, r0, r6
 80166aa:	210a      	movs	r1, #10
 80166ac:	4563      	cmp	r3, ip
 80166ae:	d113      	bne.n	80166d8 <_strtod_l+0x250>
 80166b0:	1833      	adds	r3, r6, r0
 80166b2:	2b08      	cmp	r3, #8
 80166b4:	f106 0601 	add.w	r6, r6, #1
 80166b8:	4406      	add	r6, r0
 80166ba:	dc1a      	bgt.n	80166f2 <_strtod_l+0x26a>
 80166bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80166be:	230a      	movs	r3, #10
 80166c0:	fb03 2301 	mla	r3, r3, r1, r2
 80166c4:	9309      	str	r3, [sp, #36]	; 0x24
 80166c6:	2300      	movs	r3, #0
 80166c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80166ca:	1c51      	adds	r1, r2, #1
 80166cc:	9115      	str	r1, [sp, #84]	; 0x54
 80166ce:	7852      	ldrb	r2, [r2, #1]
 80166d0:	4618      	mov	r0, r3
 80166d2:	e7c9      	b.n	8016668 <_strtod_l+0x1e0>
 80166d4:	4658      	mov	r0, fp
 80166d6:	e7d2      	b.n	801667e <_strtod_l+0x1f6>
 80166d8:	2b08      	cmp	r3, #8
 80166da:	f103 0301 	add.w	r3, r3, #1
 80166de:	dc03      	bgt.n	80166e8 <_strtod_l+0x260>
 80166e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80166e2:	434f      	muls	r7, r1
 80166e4:	9709      	str	r7, [sp, #36]	; 0x24
 80166e6:	e7e1      	b.n	80166ac <_strtod_l+0x224>
 80166e8:	2b10      	cmp	r3, #16
 80166ea:	bfd8      	it	le
 80166ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 80166f0:	e7dc      	b.n	80166ac <_strtod_l+0x224>
 80166f2:	2e10      	cmp	r6, #16
 80166f4:	bfdc      	itt	le
 80166f6:	230a      	movle	r3, #10
 80166f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80166fc:	e7e3      	b.n	80166c6 <_strtod_l+0x23e>
 80166fe:	2300      	movs	r3, #0
 8016700:	9305      	str	r3, [sp, #20]
 8016702:	2301      	movs	r3, #1
 8016704:	e780      	b.n	8016608 <_strtod_l+0x180>
 8016706:	f04f 0c00 	mov.w	ip, #0
 801670a:	1caa      	adds	r2, r5, #2
 801670c:	9215      	str	r2, [sp, #84]	; 0x54
 801670e:	78aa      	ldrb	r2, [r5, #2]
 8016710:	e788      	b.n	8016624 <_strtod_l+0x19c>
 8016712:	f04f 0c01 	mov.w	ip, #1
 8016716:	e7f8      	b.n	801670a <_strtod_l+0x282>
 8016718:	0801b984 	.word	0x0801b984
 801671c:	0801b980 	.word	0x0801b980
 8016720:	7ff00000 	.word	0x7ff00000
 8016724:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016726:	1c51      	adds	r1, r2, #1
 8016728:	9115      	str	r1, [sp, #84]	; 0x54
 801672a:	7852      	ldrb	r2, [r2, #1]
 801672c:	2a30      	cmp	r2, #48	; 0x30
 801672e:	d0f9      	beq.n	8016724 <_strtod_l+0x29c>
 8016730:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8016734:	2908      	cmp	r1, #8
 8016736:	f63f af7a 	bhi.w	801662e <_strtod_l+0x1a6>
 801673a:	3a30      	subs	r2, #48	; 0x30
 801673c:	9208      	str	r2, [sp, #32]
 801673e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016740:	920c      	str	r2, [sp, #48]	; 0x30
 8016742:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016744:	1c57      	adds	r7, r2, #1
 8016746:	9715      	str	r7, [sp, #84]	; 0x54
 8016748:	7852      	ldrb	r2, [r2, #1]
 801674a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801674e:	f1be 0f09 	cmp.w	lr, #9
 8016752:	d938      	bls.n	80167c6 <_strtod_l+0x33e>
 8016754:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016756:	1a7f      	subs	r7, r7, r1
 8016758:	2f08      	cmp	r7, #8
 801675a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801675e:	dc03      	bgt.n	8016768 <_strtod_l+0x2e0>
 8016760:	9908      	ldr	r1, [sp, #32]
 8016762:	428f      	cmp	r7, r1
 8016764:	bfa8      	it	ge
 8016766:	460f      	movge	r7, r1
 8016768:	f1bc 0f00 	cmp.w	ip, #0
 801676c:	d000      	beq.n	8016770 <_strtod_l+0x2e8>
 801676e:	427f      	negs	r7, r7
 8016770:	2e00      	cmp	r6, #0
 8016772:	d14f      	bne.n	8016814 <_strtod_l+0x38c>
 8016774:	9904      	ldr	r1, [sp, #16]
 8016776:	4301      	orrs	r1, r0
 8016778:	f47f aec1 	bne.w	80164fe <_strtod_l+0x76>
 801677c:	2b00      	cmp	r3, #0
 801677e:	f47f aedb 	bne.w	8016538 <_strtod_l+0xb0>
 8016782:	2a69      	cmp	r2, #105	; 0x69
 8016784:	d029      	beq.n	80167da <_strtod_l+0x352>
 8016786:	dc26      	bgt.n	80167d6 <_strtod_l+0x34e>
 8016788:	2a49      	cmp	r2, #73	; 0x49
 801678a:	d026      	beq.n	80167da <_strtod_l+0x352>
 801678c:	2a4e      	cmp	r2, #78	; 0x4e
 801678e:	f47f aed3 	bne.w	8016538 <_strtod_l+0xb0>
 8016792:	499b      	ldr	r1, [pc, #620]	; (8016a00 <_strtod_l+0x578>)
 8016794:	a815      	add	r0, sp, #84	; 0x54
 8016796:	f002 fd65 	bl	8019264 <__match>
 801679a:	2800      	cmp	r0, #0
 801679c:	f43f aecc 	beq.w	8016538 <_strtod_l+0xb0>
 80167a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167a2:	781b      	ldrb	r3, [r3, #0]
 80167a4:	2b28      	cmp	r3, #40	; 0x28
 80167a6:	d12f      	bne.n	8016808 <_strtod_l+0x380>
 80167a8:	4996      	ldr	r1, [pc, #600]	; (8016a04 <_strtod_l+0x57c>)
 80167aa:	aa18      	add	r2, sp, #96	; 0x60
 80167ac:	a815      	add	r0, sp, #84	; 0x54
 80167ae:	f002 fd6d 	bl	801928c <__hexnan>
 80167b2:	2805      	cmp	r0, #5
 80167b4:	d128      	bne.n	8016808 <_strtod_l+0x380>
 80167b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80167b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80167bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80167c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80167c4:	e69b      	b.n	80164fe <_strtod_l+0x76>
 80167c6:	9f08      	ldr	r7, [sp, #32]
 80167c8:	210a      	movs	r1, #10
 80167ca:	fb01 2107 	mla	r1, r1, r7, r2
 80167ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80167d2:	9208      	str	r2, [sp, #32]
 80167d4:	e7b5      	b.n	8016742 <_strtod_l+0x2ba>
 80167d6:	2a6e      	cmp	r2, #110	; 0x6e
 80167d8:	e7d9      	b.n	801678e <_strtod_l+0x306>
 80167da:	498b      	ldr	r1, [pc, #556]	; (8016a08 <_strtod_l+0x580>)
 80167dc:	a815      	add	r0, sp, #84	; 0x54
 80167de:	f002 fd41 	bl	8019264 <__match>
 80167e2:	2800      	cmp	r0, #0
 80167e4:	f43f aea8 	beq.w	8016538 <_strtod_l+0xb0>
 80167e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167ea:	4988      	ldr	r1, [pc, #544]	; (8016a0c <_strtod_l+0x584>)
 80167ec:	3b01      	subs	r3, #1
 80167ee:	a815      	add	r0, sp, #84	; 0x54
 80167f0:	9315      	str	r3, [sp, #84]	; 0x54
 80167f2:	f002 fd37 	bl	8019264 <__match>
 80167f6:	b910      	cbnz	r0, 80167fe <_strtod_l+0x376>
 80167f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167fa:	3301      	adds	r3, #1
 80167fc:	9315      	str	r3, [sp, #84]	; 0x54
 80167fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8016a1c <_strtod_l+0x594>
 8016802:	f04f 0800 	mov.w	r8, #0
 8016806:	e67a      	b.n	80164fe <_strtod_l+0x76>
 8016808:	4881      	ldr	r0, [pc, #516]	; (8016a10 <_strtod_l+0x588>)
 801680a:	f001 fbb5 	bl	8017f78 <nan>
 801680e:	ec59 8b10 	vmov	r8, r9, d0
 8016812:	e674      	b.n	80164fe <_strtod_l+0x76>
 8016814:	9b05      	ldr	r3, [sp, #20]
 8016816:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016818:	1afb      	subs	r3, r7, r3
 801681a:	f1bb 0f00 	cmp.w	fp, #0
 801681e:	bf08      	it	eq
 8016820:	46b3      	moveq	fp, r6
 8016822:	2e10      	cmp	r6, #16
 8016824:	9308      	str	r3, [sp, #32]
 8016826:	4635      	mov	r5, r6
 8016828:	bfa8      	it	ge
 801682a:	2510      	movge	r5, #16
 801682c:	f7e9 fe7a 	bl	8000524 <__aeabi_ui2d>
 8016830:	2e09      	cmp	r6, #9
 8016832:	4680      	mov	r8, r0
 8016834:	4689      	mov	r9, r1
 8016836:	dd13      	ble.n	8016860 <_strtod_l+0x3d8>
 8016838:	4b76      	ldr	r3, [pc, #472]	; (8016a14 <_strtod_l+0x58c>)
 801683a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801683e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016842:	f7e9 fee9 	bl	8000618 <__aeabi_dmul>
 8016846:	4680      	mov	r8, r0
 8016848:	4650      	mov	r0, sl
 801684a:	4689      	mov	r9, r1
 801684c:	f7e9 fe6a 	bl	8000524 <__aeabi_ui2d>
 8016850:	4602      	mov	r2, r0
 8016852:	460b      	mov	r3, r1
 8016854:	4640      	mov	r0, r8
 8016856:	4649      	mov	r1, r9
 8016858:	f7e9 fd28 	bl	80002ac <__adddf3>
 801685c:	4680      	mov	r8, r0
 801685e:	4689      	mov	r9, r1
 8016860:	2e0f      	cmp	r6, #15
 8016862:	dc38      	bgt.n	80168d6 <_strtod_l+0x44e>
 8016864:	9b08      	ldr	r3, [sp, #32]
 8016866:	2b00      	cmp	r3, #0
 8016868:	f43f ae49 	beq.w	80164fe <_strtod_l+0x76>
 801686c:	dd24      	ble.n	80168b8 <_strtod_l+0x430>
 801686e:	2b16      	cmp	r3, #22
 8016870:	dc0b      	bgt.n	801688a <_strtod_l+0x402>
 8016872:	4968      	ldr	r1, [pc, #416]	; (8016a14 <_strtod_l+0x58c>)
 8016874:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016878:	e9d1 0100 	ldrd	r0, r1, [r1]
 801687c:	4642      	mov	r2, r8
 801687e:	464b      	mov	r3, r9
 8016880:	f7e9 feca 	bl	8000618 <__aeabi_dmul>
 8016884:	4680      	mov	r8, r0
 8016886:	4689      	mov	r9, r1
 8016888:	e639      	b.n	80164fe <_strtod_l+0x76>
 801688a:	9a08      	ldr	r2, [sp, #32]
 801688c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8016890:	4293      	cmp	r3, r2
 8016892:	db20      	blt.n	80168d6 <_strtod_l+0x44e>
 8016894:	4c5f      	ldr	r4, [pc, #380]	; (8016a14 <_strtod_l+0x58c>)
 8016896:	f1c6 060f 	rsb	r6, r6, #15
 801689a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801689e:	4642      	mov	r2, r8
 80168a0:	464b      	mov	r3, r9
 80168a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168a6:	f7e9 feb7 	bl	8000618 <__aeabi_dmul>
 80168aa:	9b08      	ldr	r3, [sp, #32]
 80168ac:	1b9e      	subs	r6, r3, r6
 80168ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80168b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80168b6:	e7e3      	b.n	8016880 <_strtod_l+0x3f8>
 80168b8:	9b08      	ldr	r3, [sp, #32]
 80168ba:	3316      	adds	r3, #22
 80168bc:	db0b      	blt.n	80168d6 <_strtod_l+0x44e>
 80168be:	9b05      	ldr	r3, [sp, #20]
 80168c0:	1bdf      	subs	r7, r3, r7
 80168c2:	4b54      	ldr	r3, [pc, #336]	; (8016a14 <_strtod_l+0x58c>)
 80168c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80168c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80168cc:	4640      	mov	r0, r8
 80168ce:	4649      	mov	r1, r9
 80168d0:	f7e9 ffcc 	bl	800086c <__aeabi_ddiv>
 80168d4:	e7d6      	b.n	8016884 <_strtod_l+0x3fc>
 80168d6:	9b08      	ldr	r3, [sp, #32]
 80168d8:	1b75      	subs	r5, r6, r5
 80168da:	441d      	add	r5, r3
 80168dc:	2d00      	cmp	r5, #0
 80168de:	dd70      	ble.n	80169c2 <_strtod_l+0x53a>
 80168e0:	f015 030f 	ands.w	r3, r5, #15
 80168e4:	d00a      	beq.n	80168fc <_strtod_l+0x474>
 80168e6:	494b      	ldr	r1, [pc, #300]	; (8016a14 <_strtod_l+0x58c>)
 80168e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80168ec:	4642      	mov	r2, r8
 80168ee:	464b      	mov	r3, r9
 80168f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168f4:	f7e9 fe90 	bl	8000618 <__aeabi_dmul>
 80168f8:	4680      	mov	r8, r0
 80168fa:	4689      	mov	r9, r1
 80168fc:	f035 050f 	bics.w	r5, r5, #15
 8016900:	d04d      	beq.n	801699e <_strtod_l+0x516>
 8016902:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8016906:	dd22      	ble.n	801694e <_strtod_l+0x4c6>
 8016908:	2500      	movs	r5, #0
 801690a:	46ab      	mov	fp, r5
 801690c:	9509      	str	r5, [sp, #36]	; 0x24
 801690e:	9505      	str	r5, [sp, #20]
 8016910:	2322      	movs	r3, #34	; 0x22
 8016912:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8016a1c <_strtod_l+0x594>
 8016916:	6023      	str	r3, [r4, #0]
 8016918:	f04f 0800 	mov.w	r8, #0
 801691c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801691e:	2b00      	cmp	r3, #0
 8016920:	f43f aded 	beq.w	80164fe <_strtod_l+0x76>
 8016924:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016926:	4620      	mov	r0, r4
 8016928:	f002 fd9e 	bl	8019468 <_Bfree>
 801692c:	9905      	ldr	r1, [sp, #20]
 801692e:	4620      	mov	r0, r4
 8016930:	f002 fd9a 	bl	8019468 <_Bfree>
 8016934:	4659      	mov	r1, fp
 8016936:	4620      	mov	r0, r4
 8016938:	f002 fd96 	bl	8019468 <_Bfree>
 801693c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801693e:	4620      	mov	r0, r4
 8016940:	f002 fd92 	bl	8019468 <_Bfree>
 8016944:	4629      	mov	r1, r5
 8016946:	4620      	mov	r0, r4
 8016948:	f002 fd8e 	bl	8019468 <_Bfree>
 801694c:	e5d7      	b.n	80164fe <_strtod_l+0x76>
 801694e:	4b32      	ldr	r3, [pc, #200]	; (8016a18 <_strtod_l+0x590>)
 8016950:	9304      	str	r3, [sp, #16]
 8016952:	2300      	movs	r3, #0
 8016954:	112d      	asrs	r5, r5, #4
 8016956:	4640      	mov	r0, r8
 8016958:	4649      	mov	r1, r9
 801695a:	469a      	mov	sl, r3
 801695c:	2d01      	cmp	r5, #1
 801695e:	dc21      	bgt.n	80169a4 <_strtod_l+0x51c>
 8016960:	b10b      	cbz	r3, 8016966 <_strtod_l+0x4de>
 8016962:	4680      	mov	r8, r0
 8016964:	4689      	mov	r9, r1
 8016966:	492c      	ldr	r1, [pc, #176]	; (8016a18 <_strtod_l+0x590>)
 8016968:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801696c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016970:	4642      	mov	r2, r8
 8016972:	464b      	mov	r3, r9
 8016974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016978:	f7e9 fe4e 	bl	8000618 <__aeabi_dmul>
 801697c:	4b27      	ldr	r3, [pc, #156]	; (8016a1c <_strtod_l+0x594>)
 801697e:	460a      	mov	r2, r1
 8016980:	400b      	ands	r3, r1
 8016982:	4927      	ldr	r1, [pc, #156]	; (8016a20 <_strtod_l+0x598>)
 8016984:	428b      	cmp	r3, r1
 8016986:	4680      	mov	r8, r0
 8016988:	d8be      	bhi.n	8016908 <_strtod_l+0x480>
 801698a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801698e:	428b      	cmp	r3, r1
 8016990:	bf86      	itte	hi
 8016992:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8016a24 <_strtod_l+0x59c>
 8016996:	f04f 38ff 	movhi.w	r8, #4294967295
 801699a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801699e:	2300      	movs	r3, #0
 80169a0:	9304      	str	r3, [sp, #16]
 80169a2:	e07b      	b.n	8016a9c <_strtod_l+0x614>
 80169a4:	07ea      	lsls	r2, r5, #31
 80169a6:	d505      	bpl.n	80169b4 <_strtod_l+0x52c>
 80169a8:	9b04      	ldr	r3, [sp, #16]
 80169aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ae:	f7e9 fe33 	bl	8000618 <__aeabi_dmul>
 80169b2:	2301      	movs	r3, #1
 80169b4:	9a04      	ldr	r2, [sp, #16]
 80169b6:	3208      	adds	r2, #8
 80169b8:	f10a 0a01 	add.w	sl, sl, #1
 80169bc:	106d      	asrs	r5, r5, #1
 80169be:	9204      	str	r2, [sp, #16]
 80169c0:	e7cc      	b.n	801695c <_strtod_l+0x4d4>
 80169c2:	d0ec      	beq.n	801699e <_strtod_l+0x516>
 80169c4:	426d      	negs	r5, r5
 80169c6:	f015 020f 	ands.w	r2, r5, #15
 80169ca:	d00a      	beq.n	80169e2 <_strtod_l+0x55a>
 80169cc:	4b11      	ldr	r3, [pc, #68]	; (8016a14 <_strtod_l+0x58c>)
 80169ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80169d2:	4640      	mov	r0, r8
 80169d4:	4649      	mov	r1, r9
 80169d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169da:	f7e9 ff47 	bl	800086c <__aeabi_ddiv>
 80169de:	4680      	mov	r8, r0
 80169e0:	4689      	mov	r9, r1
 80169e2:	112d      	asrs	r5, r5, #4
 80169e4:	d0db      	beq.n	801699e <_strtod_l+0x516>
 80169e6:	2d1f      	cmp	r5, #31
 80169e8:	dd1e      	ble.n	8016a28 <_strtod_l+0x5a0>
 80169ea:	2500      	movs	r5, #0
 80169ec:	46ab      	mov	fp, r5
 80169ee:	9509      	str	r5, [sp, #36]	; 0x24
 80169f0:	9505      	str	r5, [sp, #20]
 80169f2:	2322      	movs	r3, #34	; 0x22
 80169f4:	f04f 0800 	mov.w	r8, #0
 80169f8:	f04f 0900 	mov.w	r9, #0
 80169fc:	6023      	str	r3, [r4, #0]
 80169fe:	e78d      	b.n	801691c <_strtod_l+0x494>
 8016a00:	0801bae6 	.word	0x0801bae6
 8016a04:	0801b998 	.word	0x0801b998
 8016a08:	0801bade 	.word	0x0801bade
 8016a0c:	0801bb16 	.word	0x0801bb16
 8016a10:	0801bdc3 	.word	0x0801bdc3
 8016a14:	0801bc88 	.word	0x0801bc88
 8016a18:	0801bc60 	.word	0x0801bc60
 8016a1c:	7ff00000 	.word	0x7ff00000
 8016a20:	7ca00000 	.word	0x7ca00000
 8016a24:	7fefffff 	.word	0x7fefffff
 8016a28:	f015 0310 	ands.w	r3, r5, #16
 8016a2c:	bf18      	it	ne
 8016a2e:	236a      	movne	r3, #106	; 0x6a
 8016a30:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8016dd4 <_strtod_l+0x94c>
 8016a34:	9304      	str	r3, [sp, #16]
 8016a36:	4640      	mov	r0, r8
 8016a38:	4649      	mov	r1, r9
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	07ea      	lsls	r2, r5, #31
 8016a3e:	d504      	bpl.n	8016a4a <_strtod_l+0x5c2>
 8016a40:	e9da 2300 	ldrd	r2, r3, [sl]
 8016a44:	f7e9 fde8 	bl	8000618 <__aeabi_dmul>
 8016a48:	2301      	movs	r3, #1
 8016a4a:	106d      	asrs	r5, r5, #1
 8016a4c:	f10a 0a08 	add.w	sl, sl, #8
 8016a50:	d1f4      	bne.n	8016a3c <_strtod_l+0x5b4>
 8016a52:	b10b      	cbz	r3, 8016a58 <_strtod_l+0x5d0>
 8016a54:	4680      	mov	r8, r0
 8016a56:	4689      	mov	r9, r1
 8016a58:	9b04      	ldr	r3, [sp, #16]
 8016a5a:	b1bb      	cbz	r3, 8016a8c <_strtod_l+0x604>
 8016a5c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016a60:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	4649      	mov	r1, r9
 8016a68:	dd10      	ble.n	8016a8c <_strtod_l+0x604>
 8016a6a:	2b1f      	cmp	r3, #31
 8016a6c:	f340 811e 	ble.w	8016cac <_strtod_l+0x824>
 8016a70:	2b34      	cmp	r3, #52	; 0x34
 8016a72:	bfde      	ittt	le
 8016a74:	f04f 33ff 	movle.w	r3, #4294967295
 8016a78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8016a7c:	4093      	lslle	r3, r2
 8016a7e:	f04f 0800 	mov.w	r8, #0
 8016a82:	bfcc      	ite	gt
 8016a84:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016a88:	ea03 0901 	andle.w	r9, r3, r1
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	2300      	movs	r3, #0
 8016a90:	4640      	mov	r0, r8
 8016a92:	4649      	mov	r1, r9
 8016a94:	f7ea f828 	bl	8000ae8 <__aeabi_dcmpeq>
 8016a98:	2800      	cmp	r0, #0
 8016a9a:	d1a6      	bne.n	80169ea <_strtod_l+0x562>
 8016a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a9e:	9300      	str	r3, [sp, #0]
 8016aa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016aa2:	4633      	mov	r3, r6
 8016aa4:	465a      	mov	r2, fp
 8016aa6:	4620      	mov	r0, r4
 8016aa8:	f002 fd46 	bl	8019538 <__s2b>
 8016aac:	9009      	str	r0, [sp, #36]	; 0x24
 8016aae:	2800      	cmp	r0, #0
 8016ab0:	f43f af2a 	beq.w	8016908 <_strtod_l+0x480>
 8016ab4:	9a08      	ldr	r2, [sp, #32]
 8016ab6:	9b05      	ldr	r3, [sp, #20]
 8016ab8:	2a00      	cmp	r2, #0
 8016aba:	eba3 0307 	sub.w	r3, r3, r7
 8016abe:	bfa8      	it	ge
 8016ac0:	2300      	movge	r3, #0
 8016ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8016ac4:	2500      	movs	r5, #0
 8016ac6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016aca:	9312      	str	r3, [sp, #72]	; 0x48
 8016acc:	46ab      	mov	fp, r5
 8016ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ad0:	4620      	mov	r0, r4
 8016ad2:	6859      	ldr	r1, [r3, #4]
 8016ad4:	f002 fc88 	bl	80193e8 <_Balloc>
 8016ad8:	9005      	str	r0, [sp, #20]
 8016ada:	2800      	cmp	r0, #0
 8016adc:	f43f af18 	beq.w	8016910 <_strtod_l+0x488>
 8016ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ae2:	691a      	ldr	r2, [r3, #16]
 8016ae4:	3202      	adds	r2, #2
 8016ae6:	f103 010c 	add.w	r1, r3, #12
 8016aea:	0092      	lsls	r2, r2, #2
 8016aec:	300c      	adds	r0, #12
 8016aee:	f001 fa34 	bl	8017f5a <memcpy>
 8016af2:	ec49 8b10 	vmov	d0, r8, r9
 8016af6:	aa18      	add	r2, sp, #96	; 0x60
 8016af8:	a917      	add	r1, sp, #92	; 0x5c
 8016afa:	4620      	mov	r0, r4
 8016afc:	f003 f850 	bl	8019ba0 <__d2b>
 8016b00:	ec49 8b18 	vmov	d8, r8, r9
 8016b04:	9016      	str	r0, [sp, #88]	; 0x58
 8016b06:	2800      	cmp	r0, #0
 8016b08:	f43f af02 	beq.w	8016910 <_strtod_l+0x488>
 8016b0c:	2101      	movs	r1, #1
 8016b0e:	4620      	mov	r0, r4
 8016b10:	f002 fdaa 	bl	8019668 <__i2b>
 8016b14:	4683      	mov	fp, r0
 8016b16:	2800      	cmp	r0, #0
 8016b18:	f43f aefa 	beq.w	8016910 <_strtod_l+0x488>
 8016b1c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016b1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016b20:	2e00      	cmp	r6, #0
 8016b22:	bfab      	itete	ge
 8016b24:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8016b26:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8016b28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8016b2a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8016b2e:	bfac      	ite	ge
 8016b30:	eb06 0a03 	addge.w	sl, r6, r3
 8016b34:	1b9f      	sublt	r7, r3, r6
 8016b36:	9b04      	ldr	r3, [sp, #16]
 8016b38:	1af6      	subs	r6, r6, r3
 8016b3a:	4416      	add	r6, r2
 8016b3c:	4ba0      	ldr	r3, [pc, #640]	; (8016dc0 <_strtod_l+0x938>)
 8016b3e:	3e01      	subs	r6, #1
 8016b40:	429e      	cmp	r6, r3
 8016b42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016b46:	f280 80c4 	bge.w	8016cd2 <_strtod_l+0x84a>
 8016b4a:	1b9b      	subs	r3, r3, r6
 8016b4c:	2b1f      	cmp	r3, #31
 8016b4e:	eba2 0203 	sub.w	r2, r2, r3
 8016b52:	f04f 0101 	mov.w	r1, #1
 8016b56:	f300 80b0 	bgt.w	8016cba <_strtod_l+0x832>
 8016b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8016b5e:	930e      	str	r3, [sp, #56]	; 0x38
 8016b60:	2300      	movs	r3, #0
 8016b62:	930d      	str	r3, [sp, #52]	; 0x34
 8016b64:	eb0a 0602 	add.w	r6, sl, r2
 8016b68:	9b04      	ldr	r3, [sp, #16]
 8016b6a:	45b2      	cmp	sl, r6
 8016b6c:	4417      	add	r7, r2
 8016b6e:	441f      	add	r7, r3
 8016b70:	4653      	mov	r3, sl
 8016b72:	bfa8      	it	ge
 8016b74:	4633      	movge	r3, r6
 8016b76:	42bb      	cmp	r3, r7
 8016b78:	bfa8      	it	ge
 8016b7a:	463b      	movge	r3, r7
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	bfc2      	ittt	gt
 8016b80:	1af6      	subgt	r6, r6, r3
 8016b82:	1aff      	subgt	r7, r7, r3
 8016b84:	ebaa 0a03 	subgt.w	sl, sl, r3
 8016b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	dd17      	ble.n	8016bbe <_strtod_l+0x736>
 8016b8e:	4659      	mov	r1, fp
 8016b90:	461a      	mov	r2, r3
 8016b92:	4620      	mov	r0, r4
 8016b94:	f002 fe28 	bl	80197e8 <__pow5mult>
 8016b98:	4683      	mov	fp, r0
 8016b9a:	2800      	cmp	r0, #0
 8016b9c:	f43f aeb8 	beq.w	8016910 <_strtod_l+0x488>
 8016ba0:	4601      	mov	r1, r0
 8016ba2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f002 fd75 	bl	8019694 <__multiply>
 8016baa:	900b      	str	r0, [sp, #44]	; 0x2c
 8016bac:	2800      	cmp	r0, #0
 8016bae:	f43f aeaf 	beq.w	8016910 <_strtod_l+0x488>
 8016bb2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	f002 fc57 	bl	8019468 <_Bfree>
 8016bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bbc:	9316      	str	r3, [sp, #88]	; 0x58
 8016bbe:	2e00      	cmp	r6, #0
 8016bc0:	f300 808c 	bgt.w	8016cdc <_strtod_l+0x854>
 8016bc4:	9b08      	ldr	r3, [sp, #32]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	dd08      	ble.n	8016bdc <_strtod_l+0x754>
 8016bca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016bcc:	9905      	ldr	r1, [sp, #20]
 8016bce:	4620      	mov	r0, r4
 8016bd0:	f002 fe0a 	bl	80197e8 <__pow5mult>
 8016bd4:	9005      	str	r0, [sp, #20]
 8016bd6:	2800      	cmp	r0, #0
 8016bd8:	f43f ae9a 	beq.w	8016910 <_strtod_l+0x488>
 8016bdc:	2f00      	cmp	r7, #0
 8016bde:	dd08      	ble.n	8016bf2 <_strtod_l+0x76a>
 8016be0:	9905      	ldr	r1, [sp, #20]
 8016be2:	463a      	mov	r2, r7
 8016be4:	4620      	mov	r0, r4
 8016be6:	f002 fe59 	bl	801989c <__lshift>
 8016bea:	9005      	str	r0, [sp, #20]
 8016bec:	2800      	cmp	r0, #0
 8016bee:	f43f ae8f 	beq.w	8016910 <_strtod_l+0x488>
 8016bf2:	f1ba 0f00 	cmp.w	sl, #0
 8016bf6:	dd08      	ble.n	8016c0a <_strtod_l+0x782>
 8016bf8:	4659      	mov	r1, fp
 8016bfa:	4652      	mov	r2, sl
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	f002 fe4d 	bl	801989c <__lshift>
 8016c02:	4683      	mov	fp, r0
 8016c04:	2800      	cmp	r0, #0
 8016c06:	f43f ae83 	beq.w	8016910 <_strtod_l+0x488>
 8016c0a:	9a05      	ldr	r2, [sp, #20]
 8016c0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016c0e:	4620      	mov	r0, r4
 8016c10:	f002 fecc 	bl	80199ac <__mdiff>
 8016c14:	4605      	mov	r5, r0
 8016c16:	2800      	cmp	r0, #0
 8016c18:	f43f ae7a 	beq.w	8016910 <_strtod_l+0x488>
 8016c1c:	68c3      	ldr	r3, [r0, #12]
 8016c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c20:	2300      	movs	r3, #0
 8016c22:	60c3      	str	r3, [r0, #12]
 8016c24:	4659      	mov	r1, fp
 8016c26:	f002 fea5 	bl	8019974 <__mcmp>
 8016c2a:	2800      	cmp	r0, #0
 8016c2c:	da60      	bge.n	8016cf0 <_strtod_l+0x868>
 8016c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c30:	ea53 0308 	orrs.w	r3, r3, r8
 8016c34:	f040 8084 	bne.w	8016d40 <_strtod_l+0x8b8>
 8016c38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d17f      	bne.n	8016d40 <_strtod_l+0x8b8>
 8016c40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016c44:	0d1b      	lsrs	r3, r3, #20
 8016c46:	051b      	lsls	r3, r3, #20
 8016c48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016c4c:	d978      	bls.n	8016d40 <_strtod_l+0x8b8>
 8016c4e:	696b      	ldr	r3, [r5, #20]
 8016c50:	b913      	cbnz	r3, 8016c58 <_strtod_l+0x7d0>
 8016c52:	692b      	ldr	r3, [r5, #16]
 8016c54:	2b01      	cmp	r3, #1
 8016c56:	dd73      	ble.n	8016d40 <_strtod_l+0x8b8>
 8016c58:	4629      	mov	r1, r5
 8016c5a:	2201      	movs	r2, #1
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	f002 fe1d 	bl	801989c <__lshift>
 8016c62:	4659      	mov	r1, fp
 8016c64:	4605      	mov	r5, r0
 8016c66:	f002 fe85 	bl	8019974 <__mcmp>
 8016c6a:	2800      	cmp	r0, #0
 8016c6c:	dd68      	ble.n	8016d40 <_strtod_l+0x8b8>
 8016c6e:	9904      	ldr	r1, [sp, #16]
 8016c70:	4a54      	ldr	r2, [pc, #336]	; (8016dc4 <_strtod_l+0x93c>)
 8016c72:	464b      	mov	r3, r9
 8016c74:	2900      	cmp	r1, #0
 8016c76:	f000 8084 	beq.w	8016d82 <_strtod_l+0x8fa>
 8016c7a:	ea02 0109 	and.w	r1, r2, r9
 8016c7e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016c82:	dc7e      	bgt.n	8016d82 <_strtod_l+0x8fa>
 8016c84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016c88:	f77f aeb3 	ble.w	80169f2 <_strtod_l+0x56a>
 8016c8c:	4b4e      	ldr	r3, [pc, #312]	; (8016dc8 <_strtod_l+0x940>)
 8016c8e:	4640      	mov	r0, r8
 8016c90:	4649      	mov	r1, r9
 8016c92:	2200      	movs	r2, #0
 8016c94:	f7e9 fcc0 	bl	8000618 <__aeabi_dmul>
 8016c98:	4b4a      	ldr	r3, [pc, #296]	; (8016dc4 <_strtod_l+0x93c>)
 8016c9a:	400b      	ands	r3, r1
 8016c9c:	4680      	mov	r8, r0
 8016c9e:	4689      	mov	r9, r1
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	f47f ae3f 	bne.w	8016924 <_strtod_l+0x49c>
 8016ca6:	2322      	movs	r3, #34	; 0x22
 8016ca8:	6023      	str	r3, [r4, #0]
 8016caa:	e63b      	b.n	8016924 <_strtod_l+0x49c>
 8016cac:	f04f 32ff 	mov.w	r2, #4294967295
 8016cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8016cb4:	ea03 0808 	and.w	r8, r3, r8
 8016cb8:	e6e8      	b.n	8016a8c <_strtod_l+0x604>
 8016cba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016cbe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016cc2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016cc6:	36e2      	adds	r6, #226	; 0xe2
 8016cc8:	fa01 f306 	lsl.w	r3, r1, r6
 8016ccc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8016cd0:	e748      	b.n	8016b64 <_strtod_l+0x6dc>
 8016cd2:	2100      	movs	r1, #0
 8016cd4:	2301      	movs	r3, #1
 8016cd6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8016cda:	e743      	b.n	8016b64 <_strtod_l+0x6dc>
 8016cdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016cde:	4632      	mov	r2, r6
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	f002 fddb 	bl	801989c <__lshift>
 8016ce6:	9016      	str	r0, [sp, #88]	; 0x58
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	f47f af6b 	bne.w	8016bc4 <_strtod_l+0x73c>
 8016cee:	e60f      	b.n	8016910 <_strtod_l+0x488>
 8016cf0:	46ca      	mov	sl, r9
 8016cf2:	d171      	bne.n	8016dd8 <_strtod_l+0x950>
 8016cf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016cf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016cfa:	b352      	cbz	r2, 8016d52 <_strtod_l+0x8ca>
 8016cfc:	4a33      	ldr	r2, [pc, #204]	; (8016dcc <_strtod_l+0x944>)
 8016cfe:	4293      	cmp	r3, r2
 8016d00:	d12a      	bne.n	8016d58 <_strtod_l+0x8d0>
 8016d02:	9b04      	ldr	r3, [sp, #16]
 8016d04:	4641      	mov	r1, r8
 8016d06:	b1fb      	cbz	r3, 8016d48 <_strtod_l+0x8c0>
 8016d08:	4b2e      	ldr	r3, [pc, #184]	; (8016dc4 <_strtod_l+0x93c>)
 8016d0a:	ea09 0303 	and.w	r3, r9, r3
 8016d0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016d12:	f04f 32ff 	mov.w	r2, #4294967295
 8016d16:	d81a      	bhi.n	8016d4e <_strtod_l+0x8c6>
 8016d18:	0d1b      	lsrs	r3, r3, #20
 8016d1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8016d22:	4299      	cmp	r1, r3
 8016d24:	d118      	bne.n	8016d58 <_strtod_l+0x8d0>
 8016d26:	4b2a      	ldr	r3, [pc, #168]	; (8016dd0 <_strtod_l+0x948>)
 8016d28:	459a      	cmp	sl, r3
 8016d2a:	d102      	bne.n	8016d32 <_strtod_l+0x8aa>
 8016d2c:	3101      	adds	r1, #1
 8016d2e:	f43f adef 	beq.w	8016910 <_strtod_l+0x488>
 8016d32:	4b24      	ldr	r3, [pc, #144]	; (8016dc4 <_strtod_l+0x93c>)
 8016d34:	ea0a 0303 	and.w	r3, sl, r3
 8016d38:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016d3c:	f04f 0800 	mov.w	r8, #0
 8016d40:	9b04      	ldr	r3, [sp, #16]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d1a2      	bne.n	8016c8c <_strtod_l+0x804>
 8016d46:	e5ed      	b.n	8016924 <_strtod_l+0x49c>
 8016d48:	f04f 33ff 	mov.w	r3, #4294967295
 8016d4c:	e7e9      	b.n	8016d22 <_strtod_l+0x89a>
 8016d4e:	4613      	mov	r3, r2
 8016d50:	e7e7      	b.n	8016d22 <_strtod_l+0x89a>
 8016d52:	ea53 0308 	orrs.w	r3, r3, r8
 8016d56:	d08a      	beq.n	8016c6e <_strtod_l+0x7e6>
 8016d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d5a:	b1e3      	cbz	r3, 8016d96 <_strtod_l+0x90e>
 8016d5c:	ea13 0f0a 	tst.w	r3, sl
 8016d60:	d0ee      	beq.n	8016d40 <_strtod_l+0x8b8>
 8016d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d64:	9a04      	ldr	r2, [sp, #16]
 8016d66:	4640      	mov	r0, r8
 8016d68:	4649      	mov	r1, r9
 8016d6a:	b1c3      	cbz	r3, 8016d9e <_strtod_l+0x916>
 8016d6c:	f7ff fb6f 	bl	801644e <sulp>
 8016d70:	4602      	mov	r2, r0
 8016d72:	460b      	mov	r3, r1
 8016d74:	ec51 0b18 	vmov	r0, r1, d8
 8016d78:	f7e9 fa98 	bl	80002ac <__adddf3>
 8016d7c:	4680      	mov	r8, r0
 8016d7e:	4689      	mov	r9, r1
 8016d80:	e7de      	b.n	8016d40 <_strtod_l+0x8b8>
 8016d82:	4013      	ands	r3, r2
 8016d84:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016d88:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016d8c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016d90:	f04f 38ff 	mov.w	r8, #4294967295
 8016d94:	e7d4      	b.n	8016d40 <_strtod_l+0x8b8>
 8016d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d98:	ea13 0f08 	tst.w	r3, r8
 8016d9c:	e7e0      	b.n	8016d60 <_strtod_l+0x8d8>
 8016d9e:	f7ff fb56 	bl	801644e <sulp>
 8016da2:	4602      	mov	r2, r0
 8016da4:	460b      	mov	r3, r1
 8016da6:	ec51 0b18 	vmov	r0, r1, d8
 8016daa:	f7e9 fa7d 	bl	80002a8 <__aeabi_dsub>
 8016dae:	2200      	movs	r2, #0
 8016db0:	2300      	movs	r3, #0
 8016db2:	4680      	mov	r8, r0
 8016db4:	4689      	mov	r9, r1
 8016db6:	f7e9 fe97 	bl	8000ae8 <__aeabi_dcmpeq>
 8016dba:	2800      	cmp	r0, #0
 8016dbc:	d0c0      	beq.n	8016d40 <_strtod_l+0x8b8>
 8016dbe:	e618      	b.n	80169f2 <_strtod_l+0x56a>
 8016dc0:	fffffc02 	.word	0xfffffc02
 8016dc4:	7ff00000 	.word	0x7ff00000
 8016dc8:	39500000 	.word	0x39500000
 8016dcc:	000fffff 	.word	0x000fffff
 8016dd0:	7fefffff 	.word	0x7fefffff
 8016dd4:	0801b9b0 	.word	0x0801b9b0
 8016dd8:	4659      	mov	r1, fp
 8016dda:	4628      	mov	r0, r5
 8016ddc:	f002 ff3a 	bl	8019c54 <__ratio>
 8016de0:	ec57 6b10 	vmov	r6, r7, d0
 8016de4:	ee10 0a10 	vmov	r0, s0
 8016de8:	2200      	movs	r2, #0
 8016dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016dee:	4639      	mov	r1, r7
 8016df0:	f7e9 fe8e 	bl	8000b10 <__aeabi_dcmple>
 8016df4:	2800      	cmp	r0, #0
 8016df6:	d071      	beq.n	8016edc <_strtod_l+0xa54>
 8016df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d17c      	bne.n	8016ef8 <_strtod_l+0xa70>
 8016dfe:	f1b8 0f00 	cmp.w	r8, #0
 8016e02:	d15a      	bne.n	8016eba <_strtod_l+0xa32>
 8016e04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d15d      	bne.n	8016ec8 <_strtod_l+0xa40>
 8016e0c:	4b90      	ldr	r3, [pc, #576]	; (8017050 <_strtod_l+0xbc8>)
 8016e0e:	2200      	movs	r2, #0
 8016e10:	4630      	mov	r0, r6
 8016e12:	4639      	mov	r1, r7
 8016e14:	f7e9 fe72 	bl	8000afc <__aeabi_dcmplt>
 8016e18:	2800      	cmp	r0, #0
 8016e1a:	d15c      	bne.n	8016ed6 <_strtod_l+0xa4e>
 8016e1c:	4630      	mov	r0, r6
 8016e1e:	4639      	mov	r1, r7
 8016e20:	4b8c      	ldr	r3, [pc, #560]	; (8017054 <_strtod_l+0xbcc>)
 8016e22:	2200      	movs	r2, #0
 8016e24:	f7e9 fbf8 	bl	8000618 <__aeabi_dmul>
 8016e28:	4606      	mov	r6, r0
 8016e2a:	460f      	mov	r7, r1
 8016e2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016e30:	9606      	str	r6, [sp, #24]
 8016e32:	9307      	str	r3, [sp, #28]
 8016e34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016e38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016e3c:	4b86      	ldr	r3, [pc, #536]	; (8017058 <_strtod_l+0xbd0>)
 8016e3e:	ea0a 0303 	and.w	r3, sl, r3
 8016e42:	930d      	str	r3, [sp, #52]	; 0x34
 8016e44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e46:	4b85      	ldr	r3, [pc, #532]	; (801705c <_strtod_l+0xbd4>)
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	f040 8090 	bne.w	8016f6e <_strtod_l+0xae6>
 8016e4e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016e52:	ec49 8b10 	vmov	d0, r8, r9
 8016e56:	f002 fe33 	bl	8019ac0 <__ulp>
 8016e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016e5e:	ec51 0b10 	vmov	r0, r1, d0
 8016e62:	f7e9 fbd9 	bl	8000618 <__aeabi_dmul>
 8016e66:	4642      	mov	r2, r8
 8016e68:	464b      	mov	r3, r9
 8016e6a:	f7e9 fa1f 	bl	80002ac <__adddf3>
 8016e6e:	460b      	mov	r3, r1
 8016e70:	4979      	ldr	r1, [pc, #484]	; (8017058 <_strtod_l+0xbd0>)
 8016e72:	4a7b      	ldr	r2, [pc, #492]	; (8017060 <_strtod_l+0xbd8>)
 8016e74:	4019      	ands	r1, r3
 8016e76:	4291      	cmp	r1, r2
 8016e78:	4680      	mov	r8, r0
 8016e7a:	d944      	bls.n	8016f06 <_strtod_l+0xa7e>
 8016e7c:	ee18 2a90 	vmov	r2, s17
 8016e80:	4b78      	ldr	r3, [pc, #480]	; (8017064 <_strtod_l+0xbdc>)
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d104      	bne.n	8016e90 <_strtod_l+0xa08>
 8016e86:	ee18 3a10 	vmov	r3, s16
 8016e8a:	3301      	adds	r3, #1
 8016e8c:	f43f ad40 	beq.w	8016910 <_strtod_l+0x488>
 8016e90:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8017064 <_strtod_l+0xbdc>
 8016e94:	f04f 38ff 	mov.w	r8, #4294967295
 8016e98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	f002 fae4 	bl	8019468 <_Bfree>
 8016ea0:	9905      	ldr	r1, [sp, #20]
 8016ea2:	4620      	mov	r0, r4
 8016ea4:	f002 fae0 	bl	8019468 <_Bfree>
 8016ea8:	4659      	mov	r1, fp
 8016eaa:	4620      	mov	r0, r4
 8016eac:	f002 fadc 	bl	8019468 <_Bfree>
 8016eb0:	4629      	mov	r1, r5
 8016eb2:	4620      	mov	r0, r4
 8016eb4:	f002 fad8 	bl	8019468 <_Bfree>
 8016eb8:	e609      	b.n	8016ace <_strtod_l+0x646>
 8016eba:	f1b8 0f01 	cmp.w	r8, #1
 8016ebe:	d103      	bne.n	8016ec8 <_strtod_l+0xa40>
 8016ec0:	f1b9 0f00 	cmp.w	r9, #0
 8016ec4:	f43f ad95 	beq.w	80169f2 <_strtod_l+0x56a>
 8016ec8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8017020 <_strtod_l+0xb98>
 8016ecc:	4f60      	ldr	r7, [pc, #384]	; (8017050 <_strtod_l+0xbc8>)
 8016ece:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016ed2:	2600      	movs	r6, #0
 8016ed4:	e7ae      	b.n	8016e34 <_strtod_l+0x9ac>
 8016ed6:	4f5f      	ldr	r7, [pc, #380]	; (8017054 <_strtod_l+0xbcc>)
 8016ed8:	2600      	movs	r6, #0
 8016eda:	e7a7      	b.n	8016e2c <_strtod_l+0x9a4>
 8016edc:	4b5d      	ldr	r3, [pc, #372]	; (8017054 <_strtod_l+0xbcc>)
 8016ede:	4630      	mov	r0, r6
 8016ee0:	4639      	mov	r1, r7
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	f7e9 fb98 	bl	8000618 <__aeabi_dmul>
 8016ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016eea:	4606      	mov	r6, r0
 8016eec:	460f      	mov	r7, r1
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d09c      	beq.n	8016e2c <_strtod_l+0x9a4>
 8016ef2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016ef6:	e79d      	b.n	8016e34 <_strtod_l+0x9ac>
 8016ef8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8017028 <_strtod_l+0xba0>
 8016efc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016f00:	ec57 6b17 	vmov	r6, r7, d7
 8016f04:	e796      	b.n	8016e34 <_strtod_l+0x9ac>
 8016f06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8016f0a:	9b04      	ldr	r3, [sp, #16]
 8016f0c:	46ca      	mov	sl, r9
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d1c2      	bne.n	8016e98 <_strtod_l+0xa10>
 8016f12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f18:	0d1b      	lsrs	r3, r3, #20
 8016f1a:	051b      	lsls	r3, r3, #20
 8016f1c:	429a      	cmp	r2, r3
 8016f1e:	d1bb      	bne.n	8016e98 <_strtod_l+0xa10>
 8016f20:	4630      	mov	r0, r6
 8016f22:	4639      	mov	r1, r7
 8016f24:	f7e9 fe88 	bl	8000c38 <__aeabi_d2lz>
 8016f28:	f7e9 fb48 	bl	80005bc <__aeabi_l2d>
 8016f2c:	4602      	mov	r2, r0
 8016f2e:	460b      	mov	r3, r1
 8016f30:	4630      	mov	r0, r6
 8016f32:	4639      	mov	r1, r7
 8016f34:	f7e9 f9b8 	bl	80002a8 <__aeabi_dsub>
 8016f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016f3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f3e:	ea43 0308 	orr.w	r3, r3, r8
 8016f42:	4313      	orrs	r3, r2
 8016f44:	4606      	mov	r6, r0
 8016f46:	460f      	mov	r7, r1
 8016f48:	d054      	beq.n	8016ff4 <_strtod_l+0xb6c>
 8016f4a:	a339      	add	r3, pc, #228	; (adr r3, 8017030 <_strtod_l+0xba8>)
 8016f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f50:	f7e9 fdd4 	bl	8000afc <__aeabi_dcmplt>
 8016f54:	2800      	cmp	r0, #0
 8016f56:	f47f ace5 	bne.w	8016924 <_strtod_l+0x49c>
 8016f5a:	a337      	add	r3, pc, #220	; (adr r3, 8017038 <_strtod_l+0xbb0>)
 8016f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f60:	4630      	mov	r0, r6
 8016f62:	4639      	mov	r1, r7
 8016f64:	f7e9 fde8 	bl	8000b38 <__aeabi_dcmpgt>
 8016f68:	2800      	cmp	r0, #0
 8016f6a:	d095      	beq.n	8016e98 <_strtod_l+0xa10>
 8016f6c:	e4da      	b.n	8016924 <_strtod_l+0x49c>
 8016f6e:	9b04      	ldr	r3, [sp, #16]
 8016f70:	b333      	cbz	r3, 8016fc0 <_strtod_l+0xb38>
 8016f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016f78:	d822      	bhi.n	8016fc0 <_strtod_l+0xb38>
 8016f7a:	a331      	add	r3, pc, #196	; (adr r3, 8017040 <_strtod_l+0xbb8>)
 8016f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f80:	4630      	mov	r0, r6
 8016f82:	4639      	mov	r1, r7
 8016f84:	f7e9 fdc4 	bl	8000b10 <__aeabi_dcmple>
 8016f88:	b1a0      	cbz	r0, 8016fb4 <_strtod_l+0xb2c>
 8016f8a:	4639      	mov	r1, r7
 8016f8c:	4630      	mov	r0, r6
 8016f8e:	f7e9 fe1b 	bl	8000bc8 <__aeabi_d2uiz>
 8016f92:	2801      	cmp	r0, #1
 8016f94:	bf38      	it	cc
 8016f96:	2001      	movcc	r0, #1
 8016f98:	f7e9 fac4 	bl	8000524 <__aeabi_ui2d>
 8016f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f9e:	4606      	mov	r6, r0
 8016fa0:	460f      	mov	r7, r1
 8016fa2:	bb23      	cbnz	r3, 8016fee <_strtod_l+0xb66>
 8016fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016fa8:	9010      	str	r0, [sp, #64]	; 0x40
 8016faa:	9311      	str	r3, [sp, #68]	; 0x44
 8016fac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016fb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016fb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016fbc:	1a9b      	subs	r3, r3, r2
 8016fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8016fc8:	eef0 0a68 	vmov.f32	s1, s17
 8016fcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016fd0:	f002 fd76 	bl	8019ac0 <__ulp>
 8016fd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016fd8:	ec53 2b10 	vmov	r2, r3, d0
 8016fdc:	f7e9 fb1c 	bl	8000618 <__aeabi_dmul>
 8016fe0:	ec53 2b18 	vmov	r2, r3, d8
 8016fe4:	f7e9 f962 	bl	80002ac <__adddf3>
 8016fe8:	4680      	mov	r8, r0
 8016fea:	4689      	mov	r9, r1
 8016fec:	e78d      	b.n	8016f0a <_strtod_l+0xa82>
 8016fee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016ff2:	e7db      	b.n	8016fac <_strtod_l+0xb24>
 8016ff4:	a314      	add	r3, pc, #80	; (adr r3, 8017048 <_strtod_l+0xbc0>)
 8016ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ffa:	f7e9 fd7f 	bl	8000afc <__aeabi_dcmplt>
 8016ffe:	e7b3      	b.n	8016f68 <_strtod_l+0xae0>
 8017000:	2300      	movs	r3, #0
 8017002:	930a      	str	r3, [sp, #40]	; 0x28
 8017004:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017006:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017008:	6013      	str	r3, [r2, #0]
 801700a:	f7ff ba7c 	b.w	8016506 <_strtod_l+0x7e>
 801700e:	2a65      	cmp	r2, #101	; 0x65
 8017010:	f43f ab75 	beq.w	80166fe <_strtod_l+0x276>
 8017014:	2a45      	cmp	r2, #69	; 0x45
 8017016:	f43f ab72 	beq.w	80166fe <_strtod_l+0x276>
 801701a:	2301      	movs	r3, #1
 801701c:	f7ff bbaa 	b.w	8016774 <_strtod_l+0x2ec>
 8017020:	00000000 	.word	0x00000000
 8017024:	bff00000 	.word	0xbff00000
 8017028:	00000000 	.word	0x00000000
 801702c:	3ff00000 	.word	0x3ff00000
 8017030:	94a03595 	.word	0x94a03595
 8017034:	3fdfffff 	.word	0x3fdfffff
 8017038:	35afe535 	.word	0x35afe535
 801703c:	3fe00000 	.word	0x3fe00000
 8017040:	ffc00000 	.word	0xffc00000
 8017044:	41dfffff 	.word	0x41dfffff
 8017048:	94a03595 	.word	0x94a03595
 801704c:	3fcfffff 	.word	0x3fcfffff
 8017050:	3ff00000 	.word	0x3ff00000
 8017054:	3fe00000 	.word	0x3fe00000
 8017058:	7ff00000 	.word	0x7ff00000
 801705c:	7fe00000 	.word	0x7fe00000
 8017060:	7c9fffff 	.word	0x7c9fffff
 8017064:	7fefffff 	.word	0x7fefffff

08017068 <strtod>:
 8017068:	460a      	mov	r2, r1
 801706a:	4601      	mov	r1, r0
 801706c:	4802      	ldr	r0, [pc, #8]	; (8017078 <strtod+0x10>)
 801706e:	4b03      	ldr	r3, [pc, #12]	; (801707c <strtod+0x14>)
 8017070:	6800      	ldr	r0, [r0, #0]
 8017072:	f7ff ba09 	b.w	8016488 <_strtod_l>
 8017076:	bf00      	nop
 8017078:	20000228 	.word	0x20000228
 801707c:	20000070 	.word	0x20000070

08017080 <__cvt>:
 8017080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017084:	ec55 4b10 	vmov	r4, r5, d0
 8017088:	2d00      	cmp	r5, #0
 801708a:	460e      	mov	r6, r1
 801708c:	4619      	mov	r1, r3
 801708e:	462b      	mov	r3, r5
 8017090:	bfbb      	ittet	lt
 8017092:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017096:	461d      	movlt	r5, r3
 8017098:	2300      	movge	r3, #0
 801709a:	232d      	movlt	r3, #45	; 0x2d
 801709c:	700b      	strb	r3, [r1, #0]
 801709e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80170a4:	4691      	mov	r9, r2
 80170a6:	f023 0820 	bic.w	r8, r3, #32
 80170aa:	bfbc      	itt	lt
 80170ac:	4622      	movlt	r2, r4
 80170ae:	4614      	movlt	r4, r2
 80170b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80170b4:	d005      	beq.n	80170c2 <__cvt+0x42>
 80170b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80170ba:	d100      	bne.n	80170be <__cvt+0x3e>
 80170bc:	3601      	adds	r6, #1
 80170be:	2102      	movs	r1, #2
 80170c0:	e000      	b.n	80170c4 <__cvt+0x44>
 80170c2:	2103      	movs	r1, #3
 80170c4:	ab03      	add	r3, sp, #12
 80170c6:	9301      	str	r3, [sp, #4]
 80170c8:	ab02      	add	r3, sp, #8
 80170ca:	9300      	str	r3, [sp, #0]
 80170cc:	ec45 4b10 	vmov	d0, r4, r5
 80170d0:	4653      	mov	r3, sl
 80170d2:	4632      	mov	r2, r6
 80170d4:	f000 ffe0 	bl	8018098 <_dtoa_r>
 80170d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80170dc:	4607      	mov	r7, r0
 80170de:	d102      	bne.n	80170e6 <__cvt+0x66>
 80170e0:	f019 0f01 	tst.w	r9, #1
 80170e4:	d022      	beq.n	801712c <__cvt+0xac>
 80170e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80170ea:	eb07 0906 	add.w	r9, r7, r6
 80170ee:	d110      	bne.n	8017112 <__cvt+0x92>
 80170f0:	783b      	ldrb	r3, [r7, #0]
 80170f2:	2b30      	cmp	r3, #48	; 0x30
 80170f4:	d10a      	bne.n	801710c <__cvt+0x8c>
 80170f6:	2200      	movs	r2, #0
 80170f8:	2300      	movs	r3, #0
 80170fa:	4620      	mov	r0, r4
 80170fc:	4629      	mov	r1, r5
 80170fe:	f7e9 fcf3 	bl	8000ae8 <__aeabi_dcmpeq>
 8017102:	b918      	cbnz	r0, 801710c <__cvt+0x8c>
 8017104:	f1c6 0601 	rsb	r6, r6, #1
 8017108:	f8ca 6000 	str.w	r6, [sl]
 801710c:	f8da 3000 	ldr.w	r3, [sl]
 8017110:	4499      	add	r9, r3
 8017112:	2200      	movs	r2, #0
 8017114:	2300      	movs	r3, #0
 8017116:	4620      	mov	r0, r4
 8017118:	4629      	mov	r1, r5
 801711a:	f7e9 fce5 	bl	8000ae8 <__aeabi_dcmpeq>
 801711e:	b108      	cbz	r0, 8017124 <__cvt+0xa4>
 8017120:	f8cd 900c 	str.w	r9, [sp, #12]
 8017124:	2230      	movs	r2, #48	; 0x30
 8017126:	9b03      	ldr	r3, [sp, #12]
 8017128:	454b      	cmp	r3, r9
 801712a:	d307      	bcc.n	801713c <__cvt+0xbc>
 801712c:	9b03      	ldr	r3, [sp, #12]
 801712e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017130:	1bdb      	subs	r3, r3, r7
 8017132:	4638      	mov	r0, r7
 8017134:	6013      	str	r3, [r2, #0]
 8017136:	b004      	add	sp, #16
 8017138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801713c:	1c59      	adds	r1, r3, #1
 801713e:	9103      	str	r1, [sp, #12]
 8017140:	701a      	strb	r2, [r3, #0]
 8017142:	e7f0      	b.n	8017126 <__cvt+0xa6>

08017144 <__exponent>:
 8017144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017146:	4603      	mov	r3, r0
 8017148:	2900      	cmp	r1, #0
 801714a:	bfb8      	it	lt
 801714c:	4249      	neglt	r1, r1
 801714e:	f803 2b02 	strb.w	r2, [r3], #2
 8017152:	bfb4      	ite	lt
 8017154:	222d      	movlt	r2, #45	; 0x2d
 8017156:	222b      	movge	r2, #43	; 0x2b
 8017158:	2909      	cmp	r1, #9
 801715a:	7042      	strb	r2, [r0, #1]
 801715c:	dd2a      	ble.n	80171b4 <__exponent+0x70>
 801715e:	f10d 0207 	add.w	r2, sp, #7
 8017162:	4617      	mov	r7, r2
 8017164:	260a      	movs	r6, #10
 8017166:	4694      	mov	ip, r2
 8017168:	fb91 f5f6 	sdiv	r5, r1, r6
 801716c:	fb06 1415 	mls	r4, r6, r5, r1
 8017170:	3430      	adds	r4, #48	; 0x30
 8017172:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8017176:	460c      	mov	r4, r1
 8017178:	2c63      	cmp	r4, #99	; 0x63
 801717a:	f102 32ff 	add.w	r2, r2, #4294967295
 801717e:	4629      	mov	r1, r5
 8017180:	dcf1      	bgt.n	8017166 <__exponent+0x22>
 8017182:	3130      	adds	r1, #48	; 0x30
 8017184:	f1ac 0402 	sub.w	r4, ip, #2
 8017188:	f802 1c01 	strb.w	r1, [r2, #-1]
 801718c:	1c41      	adds	r1, r0, #1
 801718e:	4622      	mov	r2, r4
 8017190:	42ba      	cmp	r2, r7
 8017192:	d30a      	bcc.n	80171aa <__exponent+0x66>
 8017194:	f10d 0209 	add.w	r2, sp, #9
 8017198:	eba2 020c 	sub.w	r2, r2, ip
 801719c:	42bc      	cmp	r4, r7
 801719e:	bf88      	it	hi
 80171a0:	2200      	movhi	r2, #0
 80171a2:	4413      	add	r3, r2
 80171a4:	1a18      	subs	r0, r3, r0
 80171a6:	b003      	add	sp, #12
 80171a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80171ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 80171b2:	e7ed      	b.n	8017190 <__exponent+0x4c>
 80171b4:	2330      	movs	r3, #48	; 0x30
 80171b6:	3130      	adds	r1, #48	; 0x30
 80171b8:	7083      	strb	r3, [r0, #2]
 80171ba:	70c1      	strb	r1, [r0, #3]
 80171bc:	1d03      	adds	r3, r0, #4
 80171be:	e7f1      	b.n	80171a4 <__exponent+0x60>

080171c0 <_printf_float>:
 80171c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c4:	ed2d 8b02 	vpush	{d8}
 80171c8:	b08d      	sub	sp, #52	; 0x34
 80171ca:	460c      	mov	r4, r1
 80171cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80171d0:	4616      	mov	r6, r2
 80171d2:	461f      	mov	r7, r3
 80171d4:	4605      	mov	r5, r0
 80171d6:	f000 fe1d 	bl	8017e14 <_localeconv_r>
 80171da:	f8d0 a000 	ldr.w	sl, [r0]
 80171de:	4650      	mov	r0, sl
 80171e0:	f7e9 f856 	bl	8000290 <strlen>
 80171e4:	2300      	movs	r3, #0
 80171e6:	930a      	str	r3, [sp, #40]	; 0x28
 80171e8:	6823      	ldr	r3, [r4, #0]
 80171ea:	9305      	str	r3, [sp, #20]
 80171ec:	f8d8 3000 	ldr.w	r3, [r8]
 80171f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80171f4:	3307      	adds	r3, #7
 80171f6:	f023 0307 	bic.w	r3, r3, #7
 80171fa:	f103 0208 	add.w	r2, r3, #8
 80171fe:	f8c8 2000 	str.w	r2, [r8]
 8017202:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017206:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801720a:	9307      	str	r3, [sp, #28]
 801720c:	f8cd 8018 	str.w	r8, [sp, #24]
 8017210:	ee08 0a10 	vmov	s16, r0
 8017214:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8017218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801721c:	4b9e      	ldr	r3, [pc, #632]	; (8017498 <_printf_float+0x2d8>)
 801721e:	f04f 32ff 	mov.w	r2, #4294967295
 8017222:	f7e9 fc93 	bl	8000b4c <__aeabi_dcmpun>
 8017226:	bb88      	cbnz	r0, 801728c <_printf_float+0xcc>
 8017228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801722c:	4b9a      	ldr	r3, [pc, #616]	; (8017498 <_printf_float+0x2d8>)
 801722e:	f04f 32ff 	mov.w	r2, #4294967295
 8017232:	f7e9 fc6d 	bl	8000b10 <__aeabi_dcmple>
 8017236:	bb48      	cbnz	r0, 801728c <_printf_float+0xcc>
 8017238:	2200      	movs	r2, #0
 801723a:	2300      	movs	r3, #0
 801723c:	4640      	mov	r0, r8
 801723e:	4649      	mov	r1, r9
 8017240:	f7e9 fc5c 	bl	8000afc <__aeabi_dcmplt>
 8017244:	b110      	cbz	r0, 801724c <_printf_float+0x8c>
 8017246:	232d      	movs	r3, #45	; 0x2d
 8017248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801724c:	4a93      	ldr	r2, [pc, #588]	; (801749c <_printf_float+0x2dc>)
 801724e:	4b94      	ldr	r3, [pc, #592]	; (80174a0 <_printf_float+0x2e0>)
 8017250:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017254:	bf94      	ite	ls
 8017256:	4690      	movls	r8, r2
 8017258:	4698      	movhi	r8, r3
 801725a:	2303      	movs	r3, #3
 801725c:	6123      	str	r3, [r4, #16]
 801725e:	9b05      	ldr	r3, [sp, #20]
 8017260:	f023 0304 	bic.w	r3, r3, #4
 8017264:	6023      	str	r3, [r4, #0]
 8017266:	f04f 0900 	mov.w	r9, #0
 801726a:	9700      	str	r7, [sp, #0]
 801726c:	4633      	mov	r3, r6
 801726e:	aa0b      	add	r2, sp, #44	; 0x2c
 8017270:	4621      	mov	r1, r4
 8017272:	4628      	mov	r0, r5
 8017274:	f000 f9da 	bl	801762c <_printf_common>
 8017278:	3001      	adds	r0, #1
 801727a:	f040 8090 	bne.w	801739e <_printf_float+0x1de>
 801727e:	f04f 30ff 	mov.w	r0, #4294967295
 8017282:	b00d      	add	sp, #52	; 0x34
 8017284:	ecbd 8b02 	vpop	{d8}
 8017288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801728c:	4642      	mov	r2, r8
 801728e:	464b      	mov	r3, r9
 8017290:	4640      	mov	r0, r8
 8017292:	4649      	mov	r1, r9
 8017294:	f7e9 fc5a 	bl	8000b4c <__aeabi_dcmpun>
 8017298:	b140      	cbz	r0, 80172ac <_printf_float+0xec>
 801729a:	464b      	mov	r3, r9
 801729c:	2b00      	cmp	r3, #0
 801729e:	bfbc      	itt	lt
 80172a0:	232d      	movlt	r3, #45	; 0x2d
 80172a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80172a6:	4a7f      	ldr	r2, [pc, #508]	; (80174a4 <_printf_float+0x2e4>)
 80172a8:	4b7f      	ldr	r3, [pc, #508]	; (80174a8 <_printf_float+0x2e8>)
 80172aa:	e7d1      	b.n	8017250 <_printf_float+0x90>
 80172ac:	6863      	ldr	r3, [r4, #4]
 80172ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80172b2:	9206      	str	r2, [sp, #24]
 80172b4:	1c5a      	adds	r2, r3, #1
 80172b6:	d13f      	bne.n	8017338 <_printf_float+0x178>
 80172b8:	2306      	movs	r3, #6
 80172ba:	6063      	str	r3, [r4, #4]
 80172bc:	9b05      	ldr	r3, [sp, #20]
 80172be:	6861      	ldr	r1, [r4, #4]
 80172c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80172c4:	2300      	movs	r3, #0
 80172c6:	9303      	str	r3, [sp, #12]
 80172c8:	ab0a      	add	r3, sp, #40	; 0x28
 80172ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80172ce:	ab09      	add	r3, sp, #36	; 0x24
 80172d0:	ec49 8b10 	vmov	d0, r8, r9
 80172d4:	9300      	str	r3, [sp, #0]
 80172d6:	6022      	str	r2, [r4, #0]
 80172d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80172dc:	4628      	mov	r0, r5
 80172de:	f7ff fecf 	bl	8017080 <__cvt>
 80172e2:	9b06      	ldr	r3, [sp, #24]
 80172e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80172e6:	2b47      	cmp	r3, #71	; 0x47
 80172e8:	4680      	mov	r8, r0
 80172ea:	d108      	bne.n	80172fe <_printf_float+0x13e>
 80172ec:	1cc8      	adds	r0, r1, #3
 80172ee:	db02      	blt.n	80172f6 <_printf_float+0x136>
 80172f0:	6863      	ldr	r3, [r4, #4]
 80172f2:	4299      	cmp	r1, r3
 80172f4:	dd41      	ble.n	801737a <_printf_float+0x1ba>
 80172f6:	f1ab 0302 	sub.w	r3, fp, #2
 80172fa:	fa5f fb83 	uxtb.w	fp, r3
 80172fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017302:	d820      	bhi.n	8017346 <_printf_float+0x186>
 8017304:	3901      	subs	r1, #1
 8017306:	465a      	mov	r2, fp
 8017308:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801730c:	9109      	str	r1, [sp, #36]	; 0x24
 801730e:	f7ff ff19 	bl	8017144 <__exponent>
 8017312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017314:	1813      	adds	r3, r2, r0
 8017316:	2a01      	cmp	r2, #1
 8017318:	4681      	mov	r9, r0
 801731a:	6123      	str	r3, [r4, #16]
 801731c:	dc02      	bgt.n	8017324 <_printf_float+0x164>
 801731e:	6822      	ldr	r2, [r4, #0]
 8017320:	07d2      	lsls	r2, r2, #31
 8017322:	d501      	bpl.n	8017328 <_printf_float+0x168>
 8017324:	3301      	adds	r3, #1
 8017326:	6123      	str	r3, [r4, #16]
 8017328:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801732c:	2b00      	cmp	r3, #0
 801732e:	d09c      	beq.n	801726a <_printf_float+0xaa>
 8017330:	232d      	movs	r3, #45	; 0x2d
 8017332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017336:	e798      	b.n	801726a <_printf_float+0xaa>
 8017338:	9a06      	ldr	r2, [sp, #24]
 801733a:	2a47      	cmp	r2, #71	; 0x47
 801733c:	d1be      	bne.n	80172bc <_printf_float+0xfc>
 801733e:	2b00      	cmp	r3, #0
 8017340:	d1bc      	bne.n	80172bc <_printf_float+0xfc>
 8017342:	2301      	movs	r3, #1
 8017344:	e7b9      	b.n	80172ba <_printf_float+0xfa>
 8017346:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801734a:	d118      	bne.n	801737e <_printf_float+0x1be>
 801734c:	2900      	cmp	r1, #0
 801734e:	6863      	ldr	r3, [r4, #4]
 8017350:	dd0b      	ble.n	801736a <_printf_float+0x1aa>
 8017352:	6121      	str	r1, [r4, #16]
 8017354:	b913      	cbnz	r3, 801735c <_printf_float+0x19c>
 8017356:	6822      	ldr	r2, [r4, #0]
 8017358:	07d0      	lsls	r0, r2, #31
 801735a:	d502      	bpl.n	8017362 <_printf_float+0x1a2>
 801735c:	3301      	adds	r3, #1
 801735e:	440b      	add	r3, r1
 8017360:	6123      	str	r3, [r4, #16]
 8017362:	65a1      	str	r1, [r4, #88]	; 0x58
 8017364:	f04f 0900 	mov.w	r9, #0
 8017368:	e7de      	b.n	8017328 <_printf_float+0x168>
 801736a:	b913      	cbnz	r3, 8017372 <_printf_float+0x1b2>
 801736c:	6822      	ldr	r2, [r4, #0]
 801736e:	07d2      	lsls	r2, r2, #31
 8017370:	d501      	bpl.n	8017376 <_printf_float+0x1b6>
 8017372:	3302      	adds	r3, #2
 8017374:	e7f4      	b.n	8017360 <_printf_float+0x1a0>
 8017376:	2301      	movs	r3, #1
 8017378:	e7f2      	b.n	8017360 <_printf_float+0x1a0>
 801737a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801737e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017380:	4299      	cmp	r1, r3
 8017382:	db05      	blt.n	8017390 <_printf_float+0x1d0>
 8017384:	6823      	ldr	r3, [r4, #0]
 8017386:	6121      	str	r1, [r4, #16]
 8017388:	07d8      	lsls	r0, r3, #31
 801738a:	d5ea      	bpl.n	8017362 <_printf_float+0x1a2>
 801738c:	1c4b      	adds	r3, r1, #1
 801738e:	e7e7      	b.n	8017360 <_printf_float+0x1a0>
 8017390:	2900      	cmp	r1, #0
 8017392:	bfd4      	ite	le
 8017394:	f1c1 0202 	rsble	r2, r1, #2
 8017398:	2201      	movgt	r2, #1
 801739a:	4413      	add	r3, r2
 801739c:	e7e0      	b.n	8017360 <_printf_float+0x1a0>
 801739e:	6823      	ldr	r3, [r4, #0]
 80173a0:	055a      	lsls	r2, r3, #21
 80173a2:	d407      	bmi.n	80173b4 <_printf_float+0x1f4>
 80173a4:	6923      	ldr	r3, [r4, #16]
 80173a6:	4642      	mov	r2, r8
 80173a8:	4631      	mov	r1, r6
 80173aa:	4628      	mov	r0, r5
 80173ac:	47b8      	blx	r7
 80173ae:	3001      	adds	r0, #1
 80173b0:	d12c      	bne.n	801740c <_printf_float+0x24c>
 80173b2:	e764      	b.n	801727e <_printf_float+0xbe>
 80173b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80173b8:	f240 80e0 	bls.w	801757c <_printf_float+0x3bc>
 80173bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80173c0:	2200      	movs	r2, #0
 80173c2:	2300      	movs	r3, #0
 80173c4:	f7e9 fb90 	bl	8000ae8 <__aeabi_dcmpeq>
 80173c8:	2800      	cmp	r0, #0
 80173ca:	d034      	beq.n	8017436 <_printf_float+0x276>
 80173cc:	4a37      	ldr	r2, [pc, #220]	; (80174ac <_printf_float+0x2ec>)
 80173ce:	2301      	movs	r3, #1
 80173d0:	4631      	mov	r1, r6
 80173d2:	4628      	mov	r0, r5
 80173d4:	47b8      	blx	r7
 80173d6:	3001      	adds	r0, #1
 80173d8:	f43f af51 	beq.w	801727e <_printf_float+0xbe>
 80173dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80173e0:	429a      	cmp	r2, r3
 80173e2:	db02      	blt.n	80173ea <_printf_float+0x22a>
 80173e4:	6823      	ldr	r3, [r4, #0]
 80173e6:	07d8      	lsls	r0, r3, #31
 80173e8:	d510      	bpl.n	801740c <_printf_float+0x24c>
 80173ea:	ee18 3a10 	vmov	r3, s16
 80173ee:	4652      	mov	r2, sl
 80173f0:	4631      	mov	r1, r6
 80173f2:	4628      	mov	r0, r5
 80173f4:	47b8      	blx	r7
 80173f6:	3001      	adds	r0, #1
 80173f8:	f43f af41 	beq.w	801727e <_printf_float+0xbe>
 80173fc:	f04f 0800 	mov.w	r8, #0
 8017400:	f104 091a 	add.w	r9, r4, #26
 8017404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017406:	3b01      	subs	r3, #1
 8017408:	4543      	cmp	r3, r8
 801740a:	dc09      	bgt.n	8017420 <_printf_float+0x260>
 801740c:	6823      	ldr	r3, [r4, #0]
 801740e:	079b      	lsls	r3, r3, #30
 8017410:	f100 8107 	bmi.w	8017622 <_printf_float+0x462>
 8017414:	68e0      	ldr	r0, [r4, #12]
 8017416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017418:	4298      	cmp	r0, r3
 801741a:	bfb8      	it	lt
 801741c:	4618      	movlt	r0, r3
 801741e:	e730      	b.n	8017282 <_printf_float+0xc2>
 8017420:	2301      	movs	r3, #1
 8017422:	464a      	mov	r2, r9
 8017424:	4631      	mov	r1, r6
 8017426:	4628      	mov	r0, r5
 8017428:	47b8      	blx	r7
 801742a:	3001      	adds	r0, #1
 801742c:	f43f af27 	beq.w	801727e <_printf_float+0xbe>
 8017430:	f108 0801 	add.w	r8, r8, #1
 8017434:	e7e6      	b.n	8017404 <_printf_float+0x244>
 8017436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017438:	2b00      	cmp	r3, #0
 801743a:	dc39      	bgt.n	80174b0 <_printf_float+0x2f0>
 801743c:	4a1b      	ldr	r2, [pc, #108]	; (80174ac <_printf_float+0x2ec>)
 801743e:	2301      	movs	r3, #1
 8017440:	4631      	mov	r1, r6
 8017442:	4628      	mov	r0, r5
 8017444:	47b8      	blx	r7
 8017446:	3001      	adds	r0, #1
 8017448:	f43f af19 	beq.w	801727e <_printf_float+0xbe>
 801744c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017450:	4313      	orrs	r3, r2
 8017452:	d102      	bne.n	801745a <_printf_float+0x29a>
 8017454:	6823      	ldr	r3, [r4, #0]
 8017456:	07d9      	lsls	r1, r3, #31
 8017458:	d5d8      	bpl.n	801740c <_printf_float+0x24c>
 801745a:	ee18 3a10 	vmov	r3, s16
 801745e:	4652      	mov	r2, sl
 8017460:	4631      	mov	r1, r6
 8017462:	4628      	mov	r0, r5
 8017464:	47b8      	blx	r7
 8017466:	3001      	adds	r0, #1
 8017468:	f43f af09 	beq.w	801727e <_printf_float+0xbe>
 801746c:	f04f 0900 	mov.w	r9, #0
 8017470:	f104 0a1a 	add.w	sl, r4, #26
 8017474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017476:	425b      	negs	r3, r3
 8017478:	454b      	cmp	r3, r9
 801747a:	dc01      	bgt.n	8017480 <_printf_float+0x2c0>
 801747c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801747e:	e792      	b.n	80173a6 <_printf_float+0x1e6>
 8017480:	2301      	movs	r3, #1
 8017482:	4652      	mov	r2, sl
 8017484:	4631      	mov	r1, r6
 8017486:	4628      	mov	r0, r5
 8017488:	47b8      	blx	r7
 801748a:	3001      	adds	r0, #1
 801748c:	f43f aef7 	beq.w	801727e <_printf_float+0xbe>
 8017490:	f109 0901 	add.w	r9, r9, #1
 8017494:	e7ee      	b.n	8017474 <_printf_float+0x2b4>
 8017496:	bf00      	nop
 8017498:	7fefffff 	.word	0x7fefffff
 801749c:	0801bad9 	.word	0x0801bad9
 80174a0:	0801badd 	.word	0x0801badd
 80174a4:	0801bae1 	.word	0x0801bae1
 80174a8:	0801bae5 	.word	0x0801bae5
 80174ac:	0801bd83 	.word	0x0801bd83
 80174b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80174b4:	429a      	cmp	r2, r3
 80174b6:	bfa8      	it	ge
 80174b8:	461a      	movge	r2, r3
 80174ba:	2a00      	cmp	r2, #0
 80174bc:	4691      	mov	r9, r2
 80174be:	dc37      	bgt.n	8017530 <_printf_float+0x370>
 80174c0:	f04f 0b00 	mov.w	fp, #0
 80174c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80174c8:	f104 021a 	add.w	r2, r4, #26
 80174cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80174ce:	9305      	str	r3, [sp, #20]
 80174d0:	eba3 0309 	sub.w	r3, r3, r9
 80174d4:	455b      	cmp	r3, fp
 80174d6:	dc33      	bgt.n	8017540 <_printf_float+0x380>
 80174d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80174dc:	429a      	cmp	r2, r3
 80174de:	db3b      	blt.n	8017558 <_printf_float+0x398>
 80174e0:	6823      	ldr	r3, [r4, #0]
 80174e2:	07da      	lsls	r2, r3, #31
 80174e4:	d438      	bmi.n	8017558 <_printf_float+0x398>
 80174e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80174ea:	eba2 0903 	sub.w	r9, r2, r3
 80174ee:	9b05      	ldr	r3, [sp, #20]
 80174f0:	1ad2      	subs	r2, r2, r3
 80174f2:	4591      	cmp	r9, r2
 80174f4:	bfa8      	it	ge
 80174f6:	4691      	movge	r9, r2
 80174f8:	f1b9 0f00 	cmp.w	r9, #0
 80174fc:	dc35      	bgt.n	801756a <_printf_float+0x3aa>
 80174fe:	f04f 0800 	mov.w	r8, #0
 8017502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017506:	f104 0a1a 	add.w	sl, r4, #26
 801750a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801750e:	1a9b      	subs	r3, r3, r2
 8017510:	eba3 0309 	sub.w	r3, r3, r9
 8017514:	4543      	cmp	r3, r8
 8017516:	f77f af79 	ble.w	801740c <_printf_float+0x24c>
 801751a:	2301      	movs	r3, #1
 801751c:	4652      	mov	r2, sl
 801751e:	4631      	mov	r1, r6
 8017520:	4628      	mov	r0, r5
 8017522:	47b8      	blx	r7
 8017524:	3001      	adds	r0, #1
 8017526:	f43f aeaa 	beq.w	801727e <_printf_float+0xbe>
 801752a:	f108 0801 	add.w	r8, r8, #1
 801752e:	e7ec      	b.n	801750a <_printf_float+0x34a>
 8017530:	4613      	mov	r3, r2
 8017532:	4631      	mov	r1, r6
 8017534:	4642      	mov	r2, r8
 8017536:	4628      	mov	r0, r5
 8017538:	47b8      	blx	r7
 801753a:	3001      	adds	r0, #1
 801753c:	d1c0      	bne.n	80174c0 <_printf_float+0x300>
 801753e:	e69e      	b.n	801727e <_printf_float+0xbe>
 8017540:	2301      	movs	r3, #1
 8017542:	4631      	mov	r1, r6
 8017544:	4628      	mov	r0, r5
 8017546:	9205      	str	r2, [sp, #20]
 8017548:	47b8      	blx	r7
 801754a:	3001      	adds	r0, #1
 801754c:	f43f ae97 	beq.w	801727e <_printf_float+0xbe>
 8017550:	9a05      	ldr	r2, [sp, #20]
 8017552:	f10b 0b01 	add.w	fp, fp, #1
 8017556:	e7b9      	b.n	80174cc <_printf_float+0x30c>
 8017558:	ee18 3a10 	vmov	r3, s16
 801755c:	4652      	mov	r2, sl
 801755e:	4631      	mov	r1, r6
 8017560:	4628      	mov	r0, r5
 8017562:	47b8      	blx	r7
 8017564:	3001      	adds	r0, #1
 8017566:	d1be      	bne.n	80174e6 <_printf_float+0x326>
 8017568:	e689      	b.n	801727e <_printf_float+0xbe>
 801756a:	9a05      	ldr	r2, [sp, #20]
 801756c:	464b      	mov	r3, r9
 801756e:	4442      	add	r2, r8
 8017570:	4631      	mov	r1, r6
 8017572:	4628      	mov	r0, r5
 8017574:	47b8      	blx	r7
 8017576:	3001      	adds	r0, #1
 8017578:	d1c1      	bne.n	80174fe <_printf_float+0x33e>
 801757a:	e680      	b.n	801727e <_printf_float+0xbe>
 801757c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801757e:	2a01      	cmp	r2, #1
 8017580:	dc01      	bgt.n	8017586 <_printf_float+0x3c6>
 8017582:	07db      	lsls	r3, r3, #31
 8017584:	d53a      	bpl.n	80175fc <_printf_float+0x43c>
 8017586:	2301      	movs	r3, #1
 8017588:	4642      	mov	r2, r8
 801758a:	4631      	mov	r1, r6
 801758c:	4628      	mov	r0, r5
 801758e:	47b8      	blx	r7
 8017590:	3001      	adds	r0, #1
 8017592:	f43f ae74 	beq.w	801727e <_printf_float+0xbe>
 8017596:	ee18 3a10 	vmov	r3, s16
 801759a:	4652      	mov	r2, sl
 801759c:	4631      	mov	r1, r6
 801759e:	4628      	mov	r0, r5
 80175a0:	47b8      	blx	r7
 80175a2:	3001      	adds	r0, #1
 80175a4:	f43f ae6b 	beq.w	801727e <_printf_float+0xbe>
 80175a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80175ac:	2200      	movs	r2, #0
 80175ae:	2300      	movs	r3, #0
 80175b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80175b4:	f7e9 fa98 	bl	8000ae8 <__aeabi_dcmpeq>
 80175b8:	b9d8      	cbnz	r0, 80175f2 <_printf_float+0x432>
 80175ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80175be:	f108 0201 	add.w	r2, r8, #1
 80175c2:	4631      	mov	r1, r6
 80175c4:	4628      	mov	r0, r5
 80175c6:	47b8      	blx	r7
 80175c8:	3001      	adds	r0, #1
 80175ca:	d10e      	bne.n	80175ea <_printf_float+0x42a>
 80175cc:	e657      	b.n	801727e <_printf_float+0xbe>
 80175ce:	2301      	movs	r3, #1
 80175d0:	4652      	mov	r2, sl
 80175d2:	4631      	mov	r1, r6
 80175d4:	4628      	mov	r0, r5
 80175d6:	47b8      	blx	r7
 80175d8:	3001      	adds	r0, #1
 80175da:	f43f ae50 	beq.w	801727e <_printf_float+0xbe>
 80175de:	f108 0801 	add.w	r8, r8, #1
 80175e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175e4:	3b01      	subs	r3, #1
 80175e6:	4543      	cmp	r3, r8
 80175e8:	dcf1      	bgt.n	80175ce <_printf_float+0x40e>
 80175ea:	464b      	mov	r3, r9
 80175ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80175f0:	e6da      	b.n	80173a8 <_printf_float+0x1e8>
 80175f2:	f04f 0800 	mov.w	r8, #0
 80175f6:	f104 0a1a 	add.w	sl, r4, #26
 80175fa:	e7f2      	b.n	80175e2 <_printf_float+0x422>
 80175fc:	2301      	movs	r3, #1
 80175fe:	4642      	mov	r2, r8
 8017600:	e7df      	b.n	80175c2 <_printf_float+0x402>
 8017602:	2301      	movs	r3, #1
 8017604:	464a      	mov	r2, r9
 8017606:	4631      	mov	r1, r6
 8017608:	4628      	mov	r0, r5
 801760a:	47b8      	blx	r7
 801760c:	3001      	adds	r0, #1
 801760e:	f43f ae36 	beq.w	801727e <_printf_float+0xbe>
 8017612:	f108 0801 	add.w	r8, r8, #1
 8017616:	68e3      	ldr	r3, [r4, #12]
 8017618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801761a:	1a5b      	subs	r3, r3, r1
 801761c:	4543      	cmp	r3, r8
 801761e:	dcf0      	bgt.n	8017602 <_printf_float+0x442>
 8017620:	e6f8      	b.n	8017414 <_printf_float+0x254>
 8017622:	f04f 0800 	mov.w	r8, #0
 8017626:	f104 0919 	add.w	r9, r4, #25
 801762a:	e7f4      	b.n	8017616 <_printf_float+0x456>

0801762c <_printf_common>:
 801762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017630:	4616      	mov	r6, r2
 8017632:	4699      	mov	r9, r3
 8017634:	688a      	ldr	r2, [r1, #8]
 8017636:	690b      	ldr	r3, [r1, #16]
 8017638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801763c:	4293      	cmp	r3, r2
 801763e:	bfb8      	it	lt
 8017640:	4613      	movlt	r3, r2
 8017642:	6033      	str	r3, [r6, #0]
 8017644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017648:	4607      	mov	r7, r0
 801764a:	460c      	mov	r4, r1
 801764c:	b10a      	cbz	r2, 8017652 <_printf_common+0x26>
 801764e:	3301      	adds	r3, #1
 8017650:	6033      	str	r3, [r6, #0]
 8017652:	6823      	ldr	r3, [r4, #0]
 8017654:	0699      	lsls	r1, r3, #26
 8017656:	bf42      	ittt	mi
 8017658:	6833      	ldrmi	r3, [r6, #0]
 801765a:	3302      	addmi	r3, #2
 801765c:	6033      	strmi	r3, [r6, #0]
 801765e:	6825      	ldr	r5, [r4, #0]
 8017660:	f015 0506 	ands.w	r5, r5, #6
 8017664:	d106      	bne.n	8017674 <_printf_common+0x48>
 8017666:	f104 0a19 	add.w	sl, r4, #25
 801766a:	68e3      	ldr	r3, [r4, #12]
 801766c:	6832      	ldr	r2, [r6, #0]
 801766e:	1a9b      	subs	r3, r3, r2
 8017670:	42ab      	cmp	r3, r5
 8017672:	dc26      	bgt.n	80176c2 <_printf_common+0x96>
 8017674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017678:	1e13      	subs	r3, r2, #0
 801767a:	6822      	ldr	r2, [r4, #0]
 801767c:	bf18      	it	ne
 801767e:	2301      	movne	r3, #1
 8017680:	0692      	lsls	r2, r2, #26
 8017682:	d42b      	bmi.n	80176dc <_printf_common+0xb0>
 8017684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017688:	4649      	mov	r1, r9
 801768a:	4638      	mov	r0, r7
 801768c:	47c0      	blx	r8
 801768e:	3001      	adds	r0, #1
 8017690:	d01e      	beq.n	80176d0 <_printf_common+0xa4>
 8017692:	6823      	ldr	r3, [r4, #0]
 8017694:	6922      	ldr	r2, [r4, #16]
 8017696:	f003 0306 	and.w	r3, r3, #6
 801769a:	2b04      	cmp	r3, #4
 801769c:	bf02      	ittt	eq
 801769e:	68e5      	ldreq	r5, [r4, #12]
 80176a0:	6833      	ldreq	r3, [r6, #0]
 80176a2:	1aed      	subeq	r5, r5, r3
 80176a4:	68a3      	ldr	r3, [r4, #8]
 80176a6:	bf0c      	ite	eq
 80176a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80176ac:	2500      	movne	r5, #0
 80176ae:	4293      	cmp	r3, r2
 80176b0:	bfc4      	itt	gt
 80176b2:	1a9b      	subgt	r3, r3, r2
 80176b4:	18ed      	addgt	r5, r5, r3
 80176b6:	2600      	movs	r6, #0
 80176b8:	341a      	adds	r4, #26
 80176ba:	42b5      	cmp	r5, r6
 80176bc:	d11a      	bne.n	80176f4 <_printf_common+0xc8>
 80176be:	2000      	movs	r0, #0
 80176c0:	e008      	b.n	80176d4 <_printf_common+0xa8>
 80176c2:	2301      	movs	r3, #1
 80176c4:	4652      	mov	r2, sl
 80176c6:	4649      	mov	r1, r9
 80176c8:	4638      	mov	r0, r7
 80176ca:	47c0      	blx	r8
 80176cc:	3001      	adds	r0, #1
 80176ce:	d103      	bne.n	80176d8 <_printf_common+0xac>
 80176d0:	f04f 30ff 	mov.w	r0, #4294967295
 80176d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176d8:	3501      	adds	r5, #1
 80176da:	e7c6      	b.n	801766a <_printf_common+0x3e>
 80176dc:	18e1      	adds	r1, r4, r3
 80176de:	1c5a      	adds	r2, r3, #1
 80176e0:	2030      	movs	r0, #48	; 0x30
 80176e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80176e6:	4422      	add	r2, r4
 80176e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80176ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80176f0:	3302      	adds	r3, #2
 80176f2:	e7c7      	b.n	8017684 <_printf_common+0x58>
 80176f4:	2301      	movs	r3, #1
 80176f6:	4622      	mov	r2, r4
 80176f8:	4649      	mov	r1, r9
 80176fa:	4638      	mov	r0, r7
 80176fc:	47c0      	blx	r8
 80176fe:	3001      	adds	r0, #1
 8017700:	d0e6      	beq.n	80176d0 <_printf_common+0xa4>
 8017702:	3601      	adds	r6, #1
 8017704:	e7d9      	b.n	80176ba <_printf_common+0x8e>
	...

08017708 <_printf_i>:
 8017708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801770c:	7e0f      	ldrb	r7, [r1, #24]
 801770e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017710:	2f78      	cmp	r7, #120	; 0x78
 8017712:	4691      	mov	r9, r2
 8017714:	4680      	mov	r8, r0
 8017716:	460c      	mov	r4, r1
 8017718:	469a      	mov	sl, r3
 801771a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801771e:	d807      	bhi.n	8017730 <_printf_i+0x28>
 8017720:	2f62      	cmp	r7, #98	; 0x62
 8017722:	d80a      	bhi.n	801773a <_printf_i+0x32>
 8017724:	2f00      	cmp	r7, #0
 8017726:	f000 80d4 	beq.w	80178d2 <_printf_i+0x1ca>
 801772a:	2f58      	cmp	r7, #88	; 0x58
 801772c:	f000 80c0 	beq.w	80178b0 <_printf_i+0x1a8>
 8017730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017738:	e03a      	b.n	80177b0 <_printf_i+0xa8>
 801773a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801773e:	2b15      	cmp	r3, #21
 8017740:	d8f6      	bhi.n	8017730 <_printf_i+0x28>
 8017742:	a101      	add	r1, pc, #4	; (adr r1, 8017748 <_printf_i+0x40>)
 8017744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017748:	080177a1 	.word	0x080177a1
 801774c:	080177b5 	.word	0x080177b5
 8017750:	08017731 	.word	0x08017731
 8017754:	08017731 	.word	0x08017731
 8017758:	08017731 	.word	0x08017731
 801775c:	08017731 	.word	0x08017731
 8017760:	080177b5 	.word	0x080177b5
 8017764:	08017731 	.word	0x08017731
 8017768:	08017731 	.word	0x08017731
 801776c:	08017731 	.word	0x08017731
 8017770:	08017731 	.word	0x08017731
 8017774:	080178b9 	.word	0x080178b9
 8017778:	080177e1 	.word	0x080177e1
 801777c:	08017873 	.word	0x08017873
 8017780:	08017731 	.word	0x08017731
 8017784:	08017731 	.word	0x08017731
 8017788:	080178db 	.word	0x080178db
 801778c:	08017731 	.word	0x08017731
 8017790:	080177e1 	.word	0x080177e1
 8017794:	08017731 	.word	0x08017731
 8017798:	08017731 	.word	0x08017731
 801779c:	0801787b 	.word	0x0801787b
 80177a0:	682b      	ldr	r3, [r5, #0]
 80177a2:	1d1a      	adds	r2, r3, #4
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	602a      	str	r2, [r5, #0]
 80177a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80177ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80177b0:	2301      	movs	r3, #1
 80177b2:	e09f      	b.n	80178f4 <_printf_i+0x1ec>
 80177b4:	6820      	ldr	r0, [r4, #0]
 80177b6:	682b      	ldr	r3, [r5, #0]
 80177b8:	0607      	lsls	r7, r0, #24
 80177ba:	f103 0104 	add.w	r1, r3, #4
 80177be:	6029      	str	r1, [r5, #0]
 80177c0:	d501      	bpl.n	80177c6 <_printf_i+0xbe>
 80177c2:	681e      	ldr	r6, [r3, #0]
 80177c4:	e003      	b.n	80177ce <_printf_i+0xc6>
 80177c6:	0646      	lsls	r6, r0, #25
 80177c8:	d5fb      	bpl.n	80177c2 <_printf_i+0xba>
 80177ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80177ce:	2e00      	cmp	r6, #0
 80177d0:	da03      	bge.n	80177da <_printf_i+0xd2>
 80177d2:	232d      	movs	r3, #45	; 0x2d
 80177d4:	4276      	negs	r6, r6
 80177d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80177da:	485a      	ldr	r0, [pc, #360]	; (8017944 <_printf_i+0x23c>)
 80177dc:	230a      	movs	r3, #10
 80177de:	e012      	b.n	8017806 <_printf_i+0xfe>
 80177e0:	682b      	ldr	r3, [r5, #0]
 80177e2:	6820      	ldr	r0, [r4, #0]
 80177e4:	1d19      	adds	r1, r3, #4
 80177e6:	6029      	str	r1, [r5, #0]
 80177e8:	0605      	lsls	r5, r0, #24
 80177ea:	d501      	bpl.n	80177f0 <_printf_i+0xe8>
 80177ec:	681e      	ldr	r6, [r3, #0]
 80177ee:	e002      	b.n	80177f6 <_printf_i+0xee>
 80177f0:	0641      	lsls	r1, r0, #25
 80177f2:	d5fb      	bpl.n	80177ec <_printf_i+0xe4>
 80177f4:	881e      	ldrh	r6, [r3, #0]
 80177f6:	4853      	ldr	r0, [pc, #332]	; (8017944 <_printf_i+0x23c>)
 80177f8:	2f6f      	cmp	r7, #111	; 0x6f
 80177fa:	bf0c      	ite	eq
 80177fc:	2308      	moveq	r3, #8
 80177fe:	230a      	movne	r3, #10
 8017800:	2100      	movs	r1, #0
 8017802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017806:	6865      	ldr	r5, [r4, #4]
 8017808:	60a5      	str	r5, [r4, #8]
 801780a:	2d00      	cmp	r5, #0
 801780c:	bfa2      	ittt	ge
 801780e:	6821      	ldrge	r1, [r4, #0]
 8017810:	f021 0104 	bicge.w	r1, r1, #4
 8017814:	6021      	strge	r1, [r4, #0]
 8017816:	b90e      	cbnz	r6, 801781c <_printf_i+0x114>
 8017818:	2d00      	cmp	r5, #0
 801781a:	d04b      	beq.n	80178b4 <_printf_i+0x1ac>
 801781c:	4615      	mov	r5, r2
 801781e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017822:	fb03 6711 	mls	r7, r3, r1, r6
 8017826:	5dc7      	ldrb	r7, [r0, r7]
 8017828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801782c:	4637      	mov	r7, r6
 801782e:	42bb      	cmp	r3, r7
 8017830:	460e      	mov	r6, r1
 8017832:	d9f4      	bls.n	801781e <_printf_i+0x116>
 8017834:	2b08      	cmp	r3, #8
 8017836:	d10b      	bne.n	8017850 <_printf_i+0x148>
 8017838:	6823      	ldr	r3, [r4, #0]
 801783a:	07de      	lsls	r6, r3, #31
 801783c:	d508      	bpl.n	8017850 <_printf_i+0x148>
 801783e:	6923      	ldr	r3, [r4, #16]
 8017840:	6861      	ldr	r1, [r4, #4]
 8017842:	4299      	cmp	r1, r3
 8017844:	bfde      	ittt	le
 8017846:	2330      	movle	r3, #48	; 0x30
 8017848:	f805 3c01 	strble.w	r3, [r5, #-1]
 801784c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017850:	1b52      	subs	r2, r2, r5
 8017852:	6122      	str	r2, [r4, #16]
 8017854:	f8cd a000 	str.w	sl, [sp]
 8017858:	464b      	mov	r3, r9
 801785a:	aa03      	add	r2, sp, #12
 801785c:	4621      	mov	r1, r4
 801785e:	4640      	mov	r0, r8
 8017860:	f7ff fee4 	bl	801762c <_printf_common>
 8017864:	3001      	adds	r0, #1
 8017866:	d14a      	bne.n	80178fe <_printf_i+0x1f6>
 8017868:	f04f 30ff 	mov.w	r0, #4294967295
 801786c:	b004      	add	sp, #16
 801786e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017872:	6823      	ldr	r3, [r4, #0]
 8017874:	f043 0320 	orr.w	r3, r3, #32
 8017878:	6023      	str	r3, [r4, #0]
 801787a:	4833      	ldr	r0, [pc, #204]	; (8017948 <_printf_i+0x240>)
 801787c:	2778      	movs	r7, #120	; 0x78
 801787e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017882:	6823      	ldr	r3, [r4, #0]
 8017884:	6829      	ldr	r1, [r5, #0]
 8017886:	061f      	lsls	r7, r3, #24
 8017888:	f851 6b04 	ldr.w	r6, [r1], #4
 801788c:	d402      	bmi.n	8017894 <_printf_i+0x18c>
 801788e:	065f      	lsls	r7, r3, #25
 8017890:	bf48      	it	mi
 8017892:	b2b6      	uxthmi	r6, r6
 8017894:	07df      	lsls	r7, r3, #31
 8017896:	bf48      	it	mi
 8017898:	f043 0320 	orrmi.w	r3, r3, #32
 801789c:	6029      	str	r1, [r5, #0]
 801789e:	bf48      	it	mi
 80178a0:	6023      	strmi	r3, [r4, #0]
 80178a2:	b91e      	cbnz	r6, 80178ac <_printf_i+0x1a4>
 80178a4:	6823      	ldr	r3, [r4, #0]
 80178a6:	f023 0320 	bic.w	r3, r3, #32
 80178aa:	6023      	str	r3, [r4, #0]
 80178ac:	2310      	movs	r3, #16
 80178ae:	e7a7      	b.n	8017800 <_printf_i+0xf8>
 80178b0:	4824      	ldr	r0, [pc, #144]	; (8017944 <_printf_i+0x23c>)
 80178b2:	e7e4      	b.n	801787e <_printf_i+0x176>
 80178b4:	4615      	mov	r5, r2
 80178b6:	e7bd      	b.n	8017834 <_printf_i+0x12c>
 80178b8:	682b      	ldr	r3, [r5, #0]
 80178ba:	6826      	ldr	r6, [r4, #0]
 80178bc:	6961      	ldr	r1, [r4, #20]
 80178be:	1d18      	adds	r0, r3, #4
 80178c0:	6028      	str	r0, [r5, #0]
 80178c2:	0635      	lsls	r5, r6, #24
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	d501      	bpl.n	80178cc <_printf_i+0x1c4>
 80178c8:	6019      	str	r1, [r3, #0]
 80178ca:	e002      	b.n	80178d2 <_printf_i+0x1ca>
 80178cc:	0670      	lsls	r0, r6, #25
 80178ce:	d5fb      	bpl.n	80178c8 <_printf_i+0x1c0>
 80178d0:	8019      	strh	r1, [r3, #0]
 80178d2:	2300      	movs	r3, #0
 80178d4:	6123      	str	r3, [r4, #16]
 80178d6:	4615      	mov	r5, r2
 80178d8:	e7bc      	b.n	8017854 <_printf_i+0x14c>
 80178da:	682b      	ldr	r3, [r5, #0]
 80178dc:	1d1a      	adds	r2, r3, #4
 80178de:	602a      	str	r2, [r5, #0]
 80178e0:	681d      	ldr	r5, [r3, #0]
 80178e2:	6862      	ldr	r2, [r4, #4]
 80178e4:	2100      	movs	r1, #0
 80178e6:	4628      	mov	r0, r5
 80178e8:	f7e8 fc82 	bl	80001f0 <memchr>
 80178ec:	b108      	cbz	r0, 80178f2 <_printf_i+0x1ea>
 80178ee:	1b40      	subs	r0, r0, r5
 80178f0:	6060      	str	r0, [r4, #4]
 80178f2:	6863      	ldr	r3, [r4, #4]
 80178f4:	6123      	str	r3, [r4, #16]
 80178f6:	2300      	movs	r3, #0
 80178f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80178fc:	e7aa      	b.n	8017854 <_printf_i+0x14c>
 80178fe:	6923      	ldr	r3, [r4, #16]
 8017900:	462a      	mov	r2, r5
 8017902:	4649      	mov	r1, r9
 8017904:	4640      	mov	r0, r8
 8017906:	47d0      	blx	sl
 8017908:	3001      	adds	r0, #1
 801790a:	d0ad      	beq.n	8017868 <_printf_i+0x160>
 801790c:	6823      	ldr	r3, [r4, #0]
 801790e:	079b      	lsls	r3, r3, #30
 8017910:	d413      	bmi.n	801793a <_printf_i+0x232>
 8017912:	68e0      	ldr	r0, [r4, #12]
 8017914:	9b03      	ldr	r3, [sp, #12]
 8017916:	4298      	cmp	r0, r3
 8017918:	bfb8      	it	lt
 801791a:	4618      	movlt	r0, r3
 801791c:	e7a6      	b.n	801786c <_printf_i+0x164>
 801791e:	2301      	movs	r3, #1
 8017920:	4632      	mov	r2, r6
 8017922:	4649      	mov	r1, r9
 8017924:	4640      	mov	r0, r8
 8017926:	47d0      	blx	sl
 8017928:	3001      	adds	r0, #1
 801792a:	d09d      	beq.n	8017868 <_printf_i+0x160>
 801792c:	3501      	adds	r5, #1
 801792e:	68e3      	ldr	r3, [r4, #12]
 8017930:	9903      	ldr	r1, [sp, #12]
 8017932:	1a5b      	subs	r3, r3, r1
 8017934:	42ab      	cmp	r3, r5
 8017936:	dcf2      	bgt.n	801791e <_printf_i+0x216>
 8017938:	e7eb      	b.n	8017912 <_printf_i+0x20a>
 801793a:	2500      	movs	r5, #0
 801793c:	f104 0619 	add.w	r6, r4, #25
 8017940:	e7f5      	b.n	801792e <_printf_i+0x226>
 8017942:	bf00      	nop
 8017944:	0801bae9 	.word	0x0801bae9
 8017948:	0801bafa 	.word	0x0801bafa

0801794c <std>:
 801794c:	2300      	movs	r3, #0
 801794e:	b510      	push	{r4, lr}
 8017950:	4604      	mov	r4, r0
 8017952:	e9c0 3300 	strd	r3, r3, [r0]
 8017956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801795a:	6083      	str	r3, [r0, #8]
 801795c:	8181      	strh	r1, [r0, #12]
 801795e:	6643      	str	r3, [r0, #100]	; 0x64
 8017960:	81c2      	strh	r2, [r0, #14]
 8017962:	6183      	str	r3, [r0, #24]
 8017964:	4619      	mov	r1, r3
 8017966:	2208      	movs	r2, #8
 8017968:	305c      	adds	r0, #92	; 0x5c
 801796a:	f000 f9eb 	bl	8017d44 <memset>
 801796e:	4b0d      	ldr	r3, [pc, #52]	; (80179a4 <std+0x58>)
 8017970:	6263      	str	r3, [r4, #36]	; 0x24
 8017972:	4b0d      	ldr	r3, [pc, #52]	; (80179a8 <std+0x5c>)
 8017974:	62a3      	str	r3, [r4, #40]	; 0x28
 8017976:	4b0d      	ldr	r3, [pc, #52]	; (80179ac <std+0x60>)
 8017978:	62e3      	str	r3, [r4, #44]	; 0x2c
 801797a:	4b0d      	ldr	r3, [pc, #52]	; (80179b0 <std+0x64>)
 801797c:	6323      	str	r3, [r4, #48]	; 0x30
 801797e:	4b0d      	ldr	r3, [pc, #52]	; (80179b4 <std+0x68>)
 8017980:	6224      	str	r4, [r4, #32]
 8017982:	429c      	cmp	r4, r3
 8017984:	d006      	beq.n	8017994 <std+0x48>
 8017986:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801798a:	4294      	cmp	r4, r2
 801798c:	d002      	beq.n	8017994 <std+0x48>
 801798e:	33d0      	adds	r3, #208	; 0xd0
 8017990:	429c      	cmp	r4, r3
 8017992:	d105      	bne.n	80179a0 <std+0x54>
 8017994:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801799c:	f000 bad2 	b.w	8017f44 <__retarget_lock_init_recursive>
 80179a0:	bd10      	pop	{r4, pc}
 80179a2:	bf00      	nop
 80179a4:	08017bf5 	.word	0x08017bf5
 80179a8:	08017c1b 	.word	0x08017c1b
 80179ac:	08017c53 	.word	0x08017c53
 80179b0:	08017c77 	.word	0x08017c77
 80179b4:	20003334 	.word	0x20003334

080179b8 <stdio_exit_handler>:
 80179b8:	4a02      	ldr	r2, [pc, #8]	; (80179c4 <stdio_exit_handler+0xc>)
 80179ba:	4903      	ldr	r1, [pc, #12]	; (80179c8 <stdio_exit_handler+0x10>)
 80179bc:	4803      	ldr	r0, [pc, #12]	; (80179cc <stdio_exit_handler+0x14>)
 80179be:	f000 b87b 	b.w	8017ab8 <_fwalk_sglue>
 80179c2:	bf00      	nop
 80179c4:	20000064 	.word	0x20000064
 80179c8:	0801a9f1 	.word	0x0801a9f1
 80179cc:	200001dc 	.word	0x200001dc

080179d0 <cleanup_stdio>:
 80179d0:	6841      	ldr	r1, [r0, #4]
 80179d2:	4b0c      	ldr	r3, [pc, #48]	; (8017a04 <cleanup_stdio+0x34>)
 80179d4:	4299      	cmp	r1, r3
 80179d6:	b510      	push	{r4, lr}
 80179d8:	4604      	mov	r4, r0
 80179da:	d001      	beq.n	80179e0 <cleanup_stdio+0x10>
 80179dc:	f003 f808 	bl	801a9f0 <_fflush_r>
 80179e0:	68a1      	ldr	r1, [r4, #8]
 80179e2:	4b09      	ldr	r3, [pc, #36]	; (8017a08 <cleanup_stdio+0x38>)
 80179e4:	4299      	cmp	r1, r3
 80179e6:	d002      	beq.n	80179ee <cleanup_stdio+0x1e>
 80179e8:	4620      	mov	r0, r4
 80179ea:	f003 f801 	bl	801a9f0 <_fflush_r>
 80179ee:	68e1      	ldr	r1, [r4, #12]
 80179f0:	4b06      	ldr	r3, [pc, #24]	; (8017a0c <cleanup_stdio+0x3c>)
 80179f2:	4299      	cmp	r1, r3
 80179f4:	d004      	beq.n	8017a00 <cleanup_stdio+0x30>
 80179f6:	4620      	mov	r0, r4
 80179f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179fc:	f002 bff8 	b.w	801a9f0 <_fflush_r>
 8017a00:	bd10      	pop	{r4, pc}
 8017a02:	bf00      	nop
 8017a04:	20003334 	.word	0x20003334
 8017a08:	2000339c 	.word	0x2000339c
 8017a0c:	20003404 	.word	0x20003404

08017a10 <global_stdio_init.part.0>:
 8017a10:	b510      	push	{r4, lr}
 8017a12:	4b0b      	ldr	r3, [pc, #44]	; (8017a40 <global_stdio_init.part.0+0x30>)
 8017a14:	4c0b      	ldr	r4, [pc, #44]	; (8017a44 <global_stdio_init.part.0+0x34>)
 8017a16:	4a0c      	ldr	r2, [pc, #48]	; (8017a48 <global_stdio_init.part.0+0x38>)
 8017a18:	601a      	str	r2, [r3, #0]
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	2104      	movs	r1, #4
 8017a20:	f7ff ff94 	bl	801794c <std>
 8017a24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017a28:	2201      	movs	r2, #1
 8017a2a:	2109      	movs	r1, #9
 8017a2c:	f7ff ff8e 	bl	801794c <std>
 8017a30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017a34:	2202      	movs	r2, #2
 8017a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a3a:	2112      	movs	r1, #18
 8017a3c:	f7ff bf86 	b.w	801794c <std>
 8017a40:	2000346c 	.word	0x2000346c
 8017a44:	20003334 	.word	0x20003334
 8017a48:	080179b9 	.word	0x080179b9

08017a4c <__sfp_lock_acquire>:
 8017a4c:	4801      	ldr	r0, [pc, #4]	; (8017a54 <__sfp_lock_acquire+0x8>)
 8017a4e:	f000 ba7a 	b.w	8017f46 <__retarget_lock_acquire_recursive>
 8017a52:	bf00      	nop
 8017a54:	20003475 	.word	0x20003475

08017a58 <__sfp_lock_release>:
 8017a58:	4801      	ldr	r0, [pc, #4]	; (8017a60 <__sfp_lock_release+0x8>)
 8017a5a:	f000 ba75 	b.w	8017f48 <__retarget_lock_release_recursive>
 8017a5e:	bf00      	nop
 8017a60:	20003475 	.word	0x20003475

08017a64 <__sinit>:
 8017a64:	b510      	push	{r4, lr}
 8017a66:	4604      	mov	r4, r0
 8017a68:	f7ff fff0 	bl	8017a4c <__sfp_lock_acquire>
 8017a6c:	6a23      	ldr	r3, [r4, #32]
 8017a6e:	b11b      	cbz	r3, 8017a78 <__sinit+0x14>
 8017a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a74:	f7ff bff0 	b.w	8017a58 <__sfp_lock_release>
 8017a78:	4b04      	ldr	r3, [pc, #16]	; (8017a8c <__sinit+0x28>)
 8017a7a:	6223      	str	r3, [r4, #32]
 8017a7c:	4b04      	ldr	r3, [pc, #16]	; (8017a90 <__sinit+0x2c>)
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d1f5      	bne.n	8017a70 <__sinit+0xc>
 8017a84:	f7ff ffc4 	bl	8017a10 <global_stdio_init.part.0>
 8017a88:	e7f2      	b.n	8017a70 <__sinit+0xc>
 8017a8a:	bf00      	nop
 8017a8c:	080179d1 	.word	0x080179d1
 8017a90:	2000346c 	.word	0x2000346c

08017a94 <fiprintf>:
 8017a94:	b40e      	push	{r1, r2, r3}
 8017a96:	b503      	push	{r0, r1, lr}
 8017a98:	4601      	mov	r1, r0
 8017a9a:	ab03      	add	r3, sp, #12
 8017a9c:	4805      	ldr	r0, [pc, #20]	; (8017ab4 <fiprintf+0x20>)
 8017a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017aa2:	6800      	ldr	r0, [r0, #0]
 8017aa4:	9301      	str	r3, [sp, #4]
 8017aa6:	f002 fcb5 	bl	801a414 <_vfiprintf_r>
 8017aaa:	b002      	add	sp, #8
 8017aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ab0:	b003      	add	sp, #12
 8017ab2:	4770      	bx	lr
 8017ab4:	20000228 	.word	0x20000228

08017ab8 <_fwalk_sglue>:
 8017ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017abc:	4607      	mov	r7, r0
 8017abe:	4688      	mov	r8, r1
 8017ac0:	4614      	mov	r4, r2
 8017ac2:	2600      	movs	r6, #0
 8017ac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017ac8:	f1b9 0901 	subs.w	r9, r9, #1
 8017acc:	d505      	bpl.n	8017ada <_fwalk_sglue+0x22>
 8017ace:	6824      	ldr	r4, [r4, #0]
 8017ad0:	2c00      	cmp	r4, #0
 8017ad2:	d1f7      	bne.n	8017ac4 <_fwalk_sglue+0xc>
 8017ad4:	4630      	mov	r0, r6
 8017ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ada:	89ab      	ldrh	r3, [r5, #12]
 8017adc:	2b01      	cmp	r3, #1
 8017ade:	d907      	bls.n	8017af0 <_fwalk_sglue+0x38>
 8017ae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017ae4:	3301      	adds	r3, #1
 8017ae6:	d003      	beq.n	8017af0 <_fwalk_sglue+0x38>
 8017ae8:	4629      	mov	r1, r5
 8017aea:	4638      	mov	r0, r7
 8017aec:	47c0      	blx	r8
 8017aee:	4306      	orrs	r6, r0
 8017af0:	3568      	adds	r5, #104	; 0x68
 8017af2:	e7e9      	b.n	8017ac8 <_fwalk_sglue+0x10>

08017af4 <sniprintf>:
 8017af4:	b40c      	push	{r2, r3}
 8017af6:	b530      	push	{r4, r5, lr}
 8017af8:	4b17      	ldr	r3, [pc, #92]	; (8017b58 <sniprintf+0x64>)
 8017afa:	1e0c      	subs	r4, r1, #0
 8017afc:	681d      	ldr	r5, [r3, #0]
 8017afe:	b09d      	sub	sp, #116	; 0x74
 8017b00:	da08      	bge.n	8017b14 <sniprintf+0x20>
 8017b02:	238b      	movs	r3, #139	; 0x8b
 8017b04:	602b      	str	r3, [r5, #0]
 8017b06:	f04f 30ff 	mov.w	r0, #4294967295
 8017b0a:	b01d      	add	sp, #116	; 0x74
 8017b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b10:	b002      	add	sp, #8
 8017b12:	4770      	bx	lr
 8017b14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017b18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017b1c:	bf14      	ite	ne
 8017b1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017b22:	4623      	moveq	r3, r4
 8017b24:	9304      	str	r3, [sp, #16]
 8017b26:	9307      	str	r3, [sp, #28]
 8017b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b2c:	9002      	str	r0, [sp, #8]
 8017b2e:	9006      	str	r0, [sp, #24]
 8017b30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017b36:	ab21      	add	r3, sp, #132	; 0x84
 8017b38:	a902      	add	r1, sp, #8
 8017b3a:	4628      	mov	r0, r5
 8017b3c:	9301      	str	r3, [sp, #4]
 8017b3e:	f002 f96f 	bl	8019e20 <_svfiprintf_r>
 8017b42:	1c43      	adds	r3, r0, #1
 8017b44:	bfbc      	itt	lt
 8017b46:	238b      	movlt	r3, #139	; 0x8b
 8017b48:	602b      	strlt	r3, [r5, #0]
 8017b4a:	2c00      	cmp	r4, #0
 8017b4c:	d0dd      	beq.n	8017b0a <sniprintf+0x16>
 8017b4e:	9b02      	ldr	r3, [sp, #8]
 8017b50:	2200      	movs	r2, #0
 8017b52:	701a      	strb	r2, [r3, #0]
 8017b54:	e7d9      	b.n	8017b0a <sniprintf+0x16>
 8017b56:	bf00      	nop
 8017b58:	20000228 	.word	0x20000228

08017b5c <siprintf>:
 8017b5c:	b40e      	push	{r1, r2, r3}
 8017b5e:	b500      	push	{lr}
 8017b60:	b09c      	sub	sp, #112	; 0x70
 8017b62:	ab1d      	add	r3, sp, #116	; 0x74
 8017b64:	9002      	str	r0, [sp, #8]
 8017b66:	9006      	str	r0, [sp, #24]
 8017b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017b6c:	4809      	ldr	r0, [pc, #36]	; (8017b94 <siprintf+0x38>)
 8017b6e:	9107      	str	r1, [sp, #28]
 8017b70:	9104      	str	r1, [sp, #16]
 8017b72:	4909      	ldr	r1, [pc, #36]	; (8017b98 <siprintf+0x3c>)
 8017b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b78:	9105      	str	r1, [sp, #20]
 8017b7a:	6800      	ldr	r0, [r0, #0]
 8017b7c:	9301      	str	r3, [sp, #4]
 8017b7e:	a902      	add	r1, sp, #8
 8017b80:	f002 f94e 	bl	8019e20 <_svfiprintf_r>
 8017b84:	9b02      	ldr	r3, [sp, #8]
 8017b86:	2200      	movs	r2, #0
 8017b88:	701a      	strb	r2, [r3, #0]
 8017b8a:	b01c      	add	sp, #112	; 0x70
 8017b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b90:	b003      	add	sp, #12
 8017b92:	4770      	bx	lr
 8017b94:	20000228 	.word	0x20000228
 8017b98:	ffff0208 	.word	0xffff0208

08017b9c <siscanf>:
 8017b9c:	b40e      	push	{r1, r2, r3}
 8017b9e:	b510      	push	{r4, lr}
 8017ba0:	b09f      	sub	sp, #124	; 0x7c
 8017ba2:	ac21      	add	r4, sp, #132	; 0x84
 8017ba4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017ba8:	f854 2b04 	ldr.w	r2, [r4], #4
 8017bac:	9201      	str	r2, [sp, #4]
 8017bae:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017bb2:	9004      	str	r0, [sp, #16]
 8017bb4:	9008      	str	r0, [sp, #32]
 8017bb6:	f7e8 fb6b 	bl	8000290 <strlen>
 8017bba:	4b0c      	ldr	r3, [pc, #48]	; (8017bec <siscanf+0x50>)
 8017bbc:	9005      	str	r0, [sp, #20]
 8017bbe:	9009      	str	r0, [sp, #36]	; 0x24
 8017bc0:	930d      	str	r3, [sp, #52]	; 0x34
 8017bc2:	480b      	ldr	r0, [pc, #44]	; (8017bf0 <siscanf+0x54>)
 8017bc4:	9a01      	ldr	r2, [sp, #4]
 8017bc6:	6800      	ldr	r0, [r0, #0]
 8017bc8:	9403      	str	r4, [sp, #12]
 8017bca:	2300      	movs	r3, #0
 8017bcc:	9311      	str	r3, [sp, #68]	; 0x44
 8017bce:	9316      	str	r3, [sp, #88]	; 0x58
 8017bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017bd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017bd8:	a904      	add	r1, sp, #16
 8017bda:	4623      	mov	r3, r4
 8017bdc:	f002 fa78 	bl	801a0d0 <__ssvfiscanf_r>
 8017be0:	b01f      	add	sp, #124	; 0x7c
 8017be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017be6:	b003      	add	sp, #12
 8017be8:	4770      	bx	lr
 8017bea:	bf00      	nop
 8017bec:	08017c17 	.word	0x08017c17
 8017bf0:	20000228 	.word	0x20000228

08017bf4 <__sread>:
 8017bf4:	b510      	push	{r4, lr}
 8017bf6:	460c      	mov	r4, r1
 8017bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bfc:	f000 f930 	bl	8017e60 <_read_r>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	bfab      	itete	ge
 8017c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c06:	89a3      	ldrhlt	r3, [r4, #12]
 8017c08:	181b      	addge	r3, r3, r0
 8017c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c0e:	bfac      	ite	ge
 8017c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c12:	81a3      	strhlt	r3, [r4, #12]
 8017c14:	bd10      	pop	{r4, pc}

08017c16 <__seofread>:
 8017c16:	2000      	movs	r0, #0
 8017c18:	4770      	bx	lr

08017c1a <__swrite>:
 8017c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c1e:	461f      	mov	r7, r3
 8017c20:	898b      	ldrh	r3, [r1, #12]
 8017c22:	05db      	lsls	r3, r3, #23
 8017c24:	4605      	mov	r5, r0
 8017c26:	460c      	mov	r4, r1
 8017c28:	4616      	mov	r6, r2
 8017c2a:	d505      	bpl.n	8017c38 <__swrite+0x1e>
 8017c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c30:	2302      	movs	r3, #2
 8017c32:	2200      	movs	r2, #0
 8017c34:	f000 f902 	bl	8017e3c <_lseek_r>
 8017c38:	89a3      	ldrh	r3, [r4, #12]
 8017c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c42:	81a3      	strh	r3, [r4, #12]
 8017c44:	4632      	mov	r2, r6
 8017c46:	463b      	mov	r3, r7
 8017c48:	4628      	mov	r0, r5
 8017c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c4e:	f000 b93d 	b.w	8017ecc <_write_r>

08017c52 <__sseek>:
 8017c52:	b510      	push	{r4, lr}
 8017c54:	460c      	mov	r4, r1
 8017c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c5a:	f000 f8ef 	bl	8017e3c <_lseek_r>
 8017c5e:	1c43      	adds	r3, r0, #1
 8017c60:	89a3      	ldrh	r3, [r4, #12]
 8017c62:	bf15      	itete	ne
 8017c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8017c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017c6e:	81a3      	strheq	r3, [r4, #12]
 8017c70:	bf18      	it	ne
 8017c72:	81a3      	strhne	r3, [r4, #12]
 8017c74:	bd10      	pop	{r4, pc}

08017c76 <__sclose>:
 8017c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c7a:	f000 b8cf 	b.w	8017e1c <_close_r>

08017c7e <_vsniprintf_r>:
 8017c7e:	b530      	push	{r4, r5, lr}
 8017c80:	4614      	mov	r4, r2
 8017c82:	2c00      	cmp	r4, #0
 8017c84:	b09b      	sub	sp, #108	; 0x6c
 8017c86:	4605      	mov	r5, r0
 8017c88:	461a      	mov	r2, r3
 8017c8a:	da05      	bge.n	8017c98 <_vsniprintf_r+0x1a>
 8017c8c:	238b      	movs	r3, #139	; 0x8b
 8017c8e:	6003      	str	r3, [r0, #0]
 8017c90:	f04f 30ff 	mov.w	r0, #4294967295
 8017c94:	b01b      	add	sp, #108	; 0x6c
 8017c96:	bd30      	pop	{r4, r5, pc}
 8017c98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017c9c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017ca0:	bf14      	ite	ne
 8017ca2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017ca6:	4623      	moveq	r3, r4
 8017ca8:	9302      	str	r3, [sp, #8]
 8017caa:	9305      	str	r3, [sp, #20]
 8017cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cb0:	9100      	str	r1, [sp, #0]
 8017cb2:	9104      	str	r1, [sp, #16]
 8017cb4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017cb8:	4669      	mov	r1, sp
 8017cba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017cbc:	f002 f8b0 	bl	8019e20 <_svfiprintf_r>
 8017cc0:	1c43      	adds	r3, r0, #1
 8017cc2:	bfbc      	itt	lt
 8017cc4:	238b      	movlt	r3, #139	; 0x8b
 8017cc6:	602b      	strlt	r3, [r5, #0]
 8017cc8:	2c00      	cmp	r4, #0
 8017cca:	d0e3      	beq.n	8017c94 <_vsniprintf_r+0x16>
 8017ccc:	9b00      	ldr	r3, [sp, #0]
 8017cce:	2200      	movs	r2, #0
 8017cd0:	701a      	strb	r2, [r3, #0]
 8017cd2:	e7df      	b.n	8017c94 <_vsniprintf_r+0x16>

08017cd4 <vsniprintf>:
 8017cd4:	b507      	push	{r0, r1, r2, lr}
 8017cd6:	9300      	str	r3, [sp, #0]
 8017cd8:	4613      	mov	r3, r2
 8017cda:	460a      	mov	r2, r1
 8017cdc:	4601      	mov	r1, r0
 8017cde:	4803      	ldr	r0, [pc, #12]	; (8017cec <vsniprintf+0x18>)
 8017ce0:	6800      	ldr	r0, [r0, #0]
 8017ce2:	f7ff ffcc 	bl	8017c7e <_vsniprintf_r>
 8017ce6:	b003      	add	sp, #12
 8017ce8:	f85d fb04 	ldr.w	pc, [sp], #4
 8017cec:	20000228 	.word	0x20000228

08017cf0 <memcmp>:
 8017cf0:	b510      	push	{r4, lr}
 8017cf2:	3901      	subs	r1, #1
 8017cf4:	4402      	add	r2, r0
 8017cf6:	4290      	cmp	r0, r2
 8017cf8:	d101      	bne.n	8017cfe <memcmp+0xe>
 8017cfa:	2000      	movs	r0, #0
 8017cfc:	e005      	b.n	8017d0a <memcmp+0x1a>
 8017cfe:	7803      	ldrb	r3, [r0, #0]
 8017d00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d04:	42a3      	cmp	r3, r4
 8017d06:	d001      	beq.n	8017d0c <memcmp+0x1c>
 8017d08:	1b18      	subs	r0, r3, r4
 8017d0a:	bd10      	pop	{r4, pc}
 8017d0c:	3001      	adds	r0, #1
 8017d0e:	e7f2      	b.n	8017cf6 <memcmp+0x6>

08017d10 <memmove>:
 8017d10:	4288      	cmp	r0, r1
 8017d12:	b510      	push	{r4, lr}
 8017d14:	eb01 0402 	add.w	r4, r1, r2
 8017d18:	d902      	bls.n	8017d20 <memmove+0x10>
 8017d1a:	4284      	cmp	r4, r0
 8017d1c:	4623      	mov	r3, r4
 8017d1e:	d807      	bhi.n	8017d30 <memmove+0x20>
 8017d20:	1e43      	subs	r3, r0, #1
 8017d22:	42a1      	cmp	r1, r4
 8017d24:	d008      	beq.n	8017d38 <memmove+0x28>
 8017d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d2e:	e7f8      	b.n	8017d22 <memmove+0x12>
 8017d30:	4402      	add	r2, r0
 8017d32:	4601      	mov	r1, r0
 8017d34:	428a      	cmp	r2, r1
 8017d36:	d100      	bne.n	8017d3a <memmove+0x2a>
 8017d38:	bd10      	pop	{r4, pc}
 8017d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d42:	e7f7      	b.n	8017d34 <memmove+0x24>

08017d44 <memset>:
 8017d44:	4402      	add	r2, r0
 8017d46:	4603      	mov	r3, r0
 8017d48:	4293      	cmp	r3, r2
 8017d4a:	d100      	bne.n	8017d4e <memset+0xa>
 8017d4c:	4770      	bx	lr
 8017d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8017d52:	e7f9      	b.n	8017d48 <memset+0x4>

08017d54 <strdup>:
 8017d54:	4b02      	ldr	r3, [pc, #8]	; (8017d60 <strdup+0xc>)
 8017d56:	4601      	mov	r1, r0
 8017d58:	6818      	ldr	r0, [r3, #0]
 8017d5a:	f000 b803 	b.w	8017d64 <_strdup_r>
 8017d5e:	bf00      	nop
 8017d60:	20000228 	.word	0x20000228

08017d64 <_strdup_r>:
 8017d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d66:	4604      	mov	r4, r0
 8017d68:	4608      	mov	r0, r1
 8017d6a:	460d      	mov	r5, r1
 8017d6c:	f7e8 fa90 	bl	8000290 <strlen>
 8017d70:	1c42      	adds	r2, r0, #1
 8017d72:	4611      	mov	r1, r2
 8017d74:	4620      	mov	r0, r4
 8017d76:	9201      	str	r2, [sp, #4]
 8017d78:	f7fe faa6 	bl	80162c8 <_malloc_r>
 8017d7c:	4604      	mov	r4, r0
 8017d7e:	b118      	cbz	r0, 8017d88 <_strdup_r+0x24>
 8017d80:	9a01      	ldr	r2, [sp, #4]
 8017d82:	4629      	mov	r1, r5
 8017d84:	f000 f8e9 	bl	8017f5a <memcpy>
 8017d88:	4620      	mov	r0, r4
 8017d8a:	b003      	add	sp, #12
 8017d8c:	bd30      	pop	{r4, r5, pc}

08017d8e <strncmp>:
 8017d8e:	b510      	push	{r4, lr}
 8017d90:	b16a      	cbz	r2, 8017dae <strncmp+0x20>
 8017d92:	3901      	subs	r1, #1
 8017d94:	1884      	adds	r4, r0, r2
 8017d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	d103      	bne.n	8017daa <strncmp+0x1c>
 8017da2:	42a0      	cmp	r0, r4
 8017da4:	d001      	beq.n	8017daa <strncmp+0x1c>
 8017da6:	2a00      	cmp	r2, #0
 8017da8:	d1f5      	bne.n	8017d96 <strncmp+0x8>
 8017daa:	1ad0      	subs	r0, r2, r3
 8017dac:	bd10      	pop	{r4, pc}
 8017dae:	4610      	mov	r0, r2
 8017db0:	e7fc      	b.n	8017dac <strncmp+0x1e>

08017db2 <_raise_r>:
 8017db2:	291f      	cmp	r1, #31
 8017db4:	b538      	push	{r3, r4, r5, lr}
 8017db6:	4604      	mov	r4, r0
 8017db8:	460d      	mov	r5, r1
 8017dba:	d904      	bls.n	8017dc6 <_raise_r+0x14>
 8017dbc:	2316      	movs	r3, #22
 8017dbe:	6003      	str	r3, [r0, #0]
 8017dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc4:	bd38      	pop	{r3, r4, r5, pc}
 8017dc6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017dc8:	b112      	cbz	r2, 8017dd0 <_raise_r+0x1e>
 8017dca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017dce:	b94b      	cbnz	r3, 8017de4 <_raise_r+0x32>
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	f000 f869 	bl	8017ea8 <_getpid_r>
 8017dd6:	462a      	mov	r2, r5
 8017dd8:	4601      	mov	r1, r0
 8017dda:	4620      	mov	r0, r4
 8017ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017de0:	f000 b850 	b.w	8017e84 <_kill_r>
 8017de4:	2b01      	cmp	r3, #1
 8017de6:	d00a      	beq.n	8017dfe <_raise_r+0x4c>
 8017de8:	1c59      	adds	r1, r3, #1
 8017dea:	d103      	bne.n	8017df4 <_raise_r+0x42>
 8017dec:	2316      	movs	r3, #22
 8017dee:	6003      	str	r3, [r0, #0]
 8017df0:	2001      	movs	r0, #1
 8017df2:	e7e7      	b.n	8017dc4 <_raise_r+0x12>
 8017df4:	2400      	movs	r4, #0
 8017df6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017dfa:	4628      	mov	r0, r5
 8017dfc:	4798      	blx	r3
 8017dfe:	2000      	movs	r0, #0
 8017e00:	e7e0      	b.n	8017dc4 <_raise_r+0x12>
	...

08017e04 <raise>:
 8017e04:	4b02      	ldr	r3, [pc, #8]	; (8017e10 <raise+0xc>)
 8017e06:	4601      	mov	r1, r0
 8017e08:	6818      	ldr	r0, [r3, #0]
 8017e0a:	f7ff bfd2 	b.w	8017db2 <_raise_r>
 8017e0e:	bf00      	nop
 8017e10:	20000228 	.word	0x20000228

08017e14 <_localeconv_r>:
 8017e14:	4800      	ldr	r0, [pc, #0]	; (8017e18 <_localeconv_r+0x4>)
 8017e16:	4770      	bx	lr
 8017e18:	20000160 	.word	0x20000160

08017e1c <_close_r>:
 8017e1c:	b538      	push	{r3, r4, r5, lr}
 8017e1e:	4d06      	ldr	r5, [pc, #24]	; (8017e38 <_close_r+0x1c>)
 8017e20:	2300      	movs	r3, #0
 8017e22:	4604      	mov	r4, r0
 8017e24:	4608      	mov	r0, r1
 8017e26:	602b      	str	r3, [r5, #0]
 8017e28:	f7f6 fb67 	bl	800e4fa <_close>
 8017e2c:	1c43      	adds	r3, r0, #1
 8017e2e:	d102      	bne.n	8017e36 <_close_r+0x1a>
 8017e30:	682b      	ldr	r3, [r5, #0]
 8017e32:	b103      	cbz	r3, 8017e36 <_close_r+0x1a>
 8017e34:	6023      	str	r3, [r4, #0]
 8017e36:	bd38      	pop	{r3, r4, r5, pc}
 8017e38:	20003470 	.word	0x20003470

08017e3c <_lseek_r>:
 8017e3c:	b538      	push	{r3, r4, r5, lr}
 8017e3e:	4d07      	ldr	r5, [pc, #28]	; (8017e5c <_lseek_r+0x20>)
 8017e40:	4604      	mov	r4, r0
 8017e42:	4608      	mov	r0, r1
 8017e44:	4611      	mov	r1, r2
 8017e46:	2200      	movs	r2, #0
 8017e48:	602a      	str	r2, [r5, #0]
 8017e4a:	461a      	mov	r2, r3
 8017e4c:	f7f6 fb7c 	bl	800e548 <_lseek>
 8017e50:	1c43      	adds	r3, r0, #1
 8017e52:	d102      	bne.n	8017e5a <_lseek_r+0x1e>
 8017e54:	682b      	ldr	r3, [r5, #0]
 8017e56:	b103      	cbz	r3, 8017e5a <_lseek_r+0x1e>
 8017e58:	6023      	str	r3, [r4, #0]
 8017e5a:	bd38      	pop	{r3, r4, r5, pc}
 8017e5c:	20003470 	.word	0x20003470

08017e60 <_read_r>:
 8017e60:	b538      	push	{r3, r4, r5, lr}
 8017e62:	4d07      	ldr	r5, [pc, #28]	; (8017e80 <_read_r+0x20>)
 8017e64:	4604      	mov	r4, r0
 8017e66:	4608      	mov	r0, r1
 8017e68:	4611      	mov	r1, r2
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	602a      	str	r2, [r5, #0]
 8017e6e:	461a      	mov	r2, r3
 8017e70:	f7f6 fb0a 	bl	800e488 <_read>
 8017e74:	1c43      	adds	r3, r0, #1
 8017e76:	d102      	bne.n	8017e7e <_read_r+0x1e>
 8017e78:	682b      	ldr	r3, [r5, #0]
 8017e7a:	b103      	cbz	r3, 8017e7e <_read_r+0x1e>
 8017e7c:	6023      	str	r3, [r4, #0]
 8017e7e:	bd38      	pop	{r3, r4, r5, pc}
 8017e80:	20003470 	.word	0x20003470

08017e84 <_kill_r>:
 8017e84:	b538      	push	{r3, r4, r5, lr}
 8017e86:	4d07      	ldr	r5, [pc, #28]	; (8017ea4 <_kill_r+0x20>)
 8017e88:	2300      	movs	r3, #0
 8017e8a:	4604      	mov	r4, r0
 8017e8c:	4608      	mov	r0, r1
 8017e8e:	4611      	mov	r1, r2
 8017e90:	602b      	str	r3, [r5, #0]
 8017e92:	f7f6 fadf 	bl	800e454 <_kill>
 8017e96:	1c43      	adds	r3, r0, #1
 8017e98:	d102      	bne.n	8017ea0 <_kill_r+0x1c>
 8017e9a:	682b      	ldr	r3, [r5, #0]
 8017e9c:	b103      	cbz	r3, 8017ea0 <_kill_r+0x1c>
 8017e9e:	6023      	str	r3, [r4, #0]
 8017ea0:	bd38      	pop	{r3, r4, r5, pc}
 8017ea2:	bf00      	nop
 8017ea4:	20003470 	.word	0x20003470

08017ea8 <_getpid_r>:
 8017ea8:	f7f6 bacc 	b.w	800e444 <_getpid>

08017eac <_sbrk_r>:
 8017eac:	b538      	push	{r3, r4, r5, lr}
 8017eae:	4d06      	ldr	r5, [pc, #24]	; (8017ec8 <_sbrk_r+0x1c>)
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	4608      	mov	r0, r1
 8017eb6:	602b      	str	r3, [r5, #0]
 8017eb8:	f7f6 fb54 	bl	800e564 <_sbrk>
 8017ebc:	1c43      	adds	r3, r0, #1
 8017ebe:	d102      	bne.n	8017ec6 <_sbrk_r+0x1a>
 8017ec0:	682b      	ldr	r3, [r5, #0]
 8017ec2:	b103      	cbz	r3, 8017ec6 <_sbrk_r+0x1a>
 8017ec4:	6023      	str	r3, [r4, #0]
 8017ec6:	bd38      	pop	{r3, r4, r5, pc}
 8017ec8:	20003470 	.word	0x20003470

08017ecc <_write_r>:
 8017ecc:	b538      	push	{r3, r4, r5, lr}
 8017ece:	4d07      	ldr	r5, [pc, #28]	; (8017eec <_write_r+0x20>)
 8017ed0:	4604      	mov	r4, r0
 8017ed2:	4608      	mov	r0, r1
 8017ed4:	4611      	mov	r1, r2
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	602a      	str	r2, [r5, #0]
 8017eda:	461a      	mov	r2, r3
 8017edc:	f7f6 faf1 	bl	800e4c2 <_write>
 8017ee0:	1c43      	adds	r3, r0, #1
 8017ee2:	d102      	bne.n	8017eea <_write_r+0x1e>
 8017ee4:	682b      	ldr	r3, [r5, #0]
 8017ee6:	b103      	cbz	r3, 8017eea <_write_r+0x1e>
 8017ee8:	6023      	str	r3, [r4, #0]
 8017eea:	bd38      	pop	{r3, r4, r5, pc}
 8017eec:	20003470 	.word	0x20003470

08017ef0 <__errno>:
 8017ef0:	4b01      	ldr	r3, [pc, #4]	; (8017ef8 <__errno+0x8>)
 8017ef2:	6818      	ldr	r0, [r3, #0]
 8017ef4:	4770      	bx	lr
 8017ef6:	bf00      	nop
 8017ef8:	20000228 	.word	0x20000228

08017efc <__libc_init_array>:
 8017efc:	b570      	push	{r4, r5, r6, lr}
 8017efe:	4d0d      	ldr	r5, [pc, #52]	; (8017f34 <__libc_init_array+0x38>)
 8017f00:	4c0d      	ldr	r4, [pc, #52]	; (8017f38 <__libc_init_array+0x3c>)
 8017f02:	1b64      	subs	r4, r4, r5
 8017f04:	10a4      	asrs	r4, r4, #2
 8017f06:	2600      	movs	r6, #0
 8017f08:	42a6      	cmp	r6, r4
 8017f0a:	d109      	bne.n	8017f20 <__libc_init_array+0x24>
 8017f0c:	4d0b      	ldr	r5, [pc, #44]	; (8017f3c <__libc_init_array+0x40>)
 8017f0e:	4c0c      	ldr	r4, [pc, #48]	; (8017f40 <__libc_init_array+0x44>)
 8017f10:	f003 f84e 	bl	801afb0 <_init>
 8017f14:	1b64      	subs	r4, r4, r5
 8017f16:	10a4      	asrs	r4, r4, #2
 8017f18:	2600      	movs	r6, #0
 8017f1a:	42a6      	cmp	r6, r4
 8017f1c:	d105      	bne.n	8017f2a <__libc_init_array+0x2e>
 8017f1e:	bd70      	pop	{r4, r5, r6, pc}
 8017f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f24:	4798      	blx	r3
 8017f26:	3601      	adds	r6, #1
 8017f28:	e7ee      	b.n	8017f08 <__libc_init_array+0xc>
 8017f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f2e:	4798      	blx	r3
 8017f30:	3601      	adds	r6, #1
 8017f32:	e7f2      	b.n	8017f1a <__libc_init_array+0x1e>
 8017f34:	0801bdcc 	.word	0x0801bdcc
 8017f38:	0801bdcc 	.word	0x0801bdcc
 8017f3c:	0801bdcc 	.word	0x0801bdcc
 8017f40:	0801bdd8 	.word	0x0801bdd8

08017f44 <__retarget_lock_init_recursive>:
 8017f44:	4770      	bx	lr

08017f46 <__retarget_lock_acquire_recursive>:
 8017f46:	4770      	bx	lr

08017f48 <__retarget_lock_release_recursive>:
 8017f48:	4770      	bx	lr

08017f4a <strcpy>:
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017f50:	f803 2b01 	strb.w	r2, [r3], #1
 8017f54:	2a00      	cmp	r2, #0
 8017f56:	d1f9      	bne.n	8017f4c <strcpy+0x2>
 8017f58:	4770      	bx	lr

08017f5a <memcpy>:
 8017f5a:	440a      	add	r2, r1
 8017f5c:	4291      	cmp	r1, r2
 8017f5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017f62:	d100      	bne.n	8017f66 <memcpy+0xc>
 8017f64:	4770      	bx	lr
 8017f66:	b510      	push	{r4, lr}
 8017f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017f70:	4291      	cmp	r1, r2
 8017f72:	d1f9      	bne.n	8017f68 <memcpy+0xe>
 8017f74:	bd10      	pop	{r4, pc}
	...

08017f78 <nan>:
 8017f78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017f80 <nan+0x8>
 8017f7c:	4770      	bx	lr
 8017f7e:	bf00      	nop
 8017f80:	00000000 	.word	0x00000000
 8017f84:	7ff80000 	.word	0x7ff80000

08017f88 <quorem>:
 8017f88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f8c:	6903      	ldr	r3, [r0, #16]
 8017f8e:	690c      	ldr	r4, [r1, #16]
 8017f90:	42a3      	cmp	r3, r4
 8017f92:	4607      	mov	r7, r0
 8017f94:	db7e      	blt.n	8018094 <quorem+0x10c>
 8017f96:	3c01      	subs	r4, #1
 8017f98:	f101 0814 	add.w	r8, r1, #20
 8017f9c:	f100 0514 	add.w	r5, r0, #20
 8017fa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017fa4:	9301      	str	r3, [sp, #4]
 8017fa6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017faa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017fae:	3301      	adds	r3, #1
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017fb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017fba:	fbb2 f6f3 	udiv	r6, r2, r3
 8017fbe:	d331      	bcc.n	8018024 <quorem+0x9c>
 8017fc0:	f04f 0e00 	mov.w	lr, #0
 8017fc4:	4640      	mov	r0, r8
 8017fc6:	46ac      	mov	ip, r5
 8017fc8:	46f2      	mov	sl, lr
 8017fca:	f850 2b04 	ldr.w	r2, [r0], #4
 8017fce:	b293      	uxth	r3, r2
 8017fd0:	fb06 e303 	mla	r3, r6, r3, lr
 8017fd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017fd8:	0c1a      	lsrs	r2, r3, #16
 8017fda:	b29b      	uxth	r3, r3
 8017fdc:	ebaa 0303 	sub.w	r3, sl, r3
 8017fe0:	f8dc a000 	ldr.w	sl, [ip]
 8017fe4:	fa13 f38a 	uxtah	r3, r3, sl
 8017fe8:	fb06 220e 	mla	r2, r6, lr, r2
 8017fec:	9300      	str	r3, [sp, #0]
 8017fee:	9b00      	ldr	r3, [sp, #0]
 8017ff0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017ff4:	b292      	uxth	r2, r2
 8017ff6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017ffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017ffe:	f8bd 3000 	ldrh.w	r3, [sp]
 8018002:	4581      	cmp	r9, r0
 8018004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018008:	f84c 3b04 	str.w	r3, [ip], #4
 801800c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018010:	d2db      	bcs.n	8017fca <quorem+0x42>
 8018012:	f855 300b 	ldr.w	r3, [r5, fp]
 8018016:	b92b      	cbnz	r3, 8018024 <quorem+0x9c>
 8018018:	9b01      	ldr	r3, [sp, #4]
 801801a:	3b04      	subs	r3, #4
 801801c:	429d      	cmp	r5, r3
 801801e:	461a      	mov	r2, r3
 8018020:	d32c      	bcc.n	801807c <quorem+0xf4>
 8018022:	613c      	str	r4, [r7, #16]
 8018024:	4638      	mov	r0, r7
 8018026:	f001 fca5 	bl	8019974 <__mcmp>
 801802a:	2800      	cmp	r0, #0
 801802c:	db22      	blt.n	8018074 <quorem+0xec>
 801802e:	3601      	adds	r6, #1
 8018030:	4629      	mov	r1, r5
 8018032:	2000      	movs	r0, #0
 8018034:	f858 2b04 	ldr.w	r2, [r8], #4
 8018038:	f8d1 c000 	ldr.w	ip, [r1]
 801803c:	b293      	uxth	r3, r2
 801803e:	1ac3      	subs	r3, r0, r3
 8018040:	0c12      	lsrs	r2, r2, #16
 8018042:	fa13 f38c 	uxtah	r3, r3, ip
 8018046:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801804a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801804e:	b29b      	uxth	r3, r3
 8018050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018054:	45c1      	cmp	r9, r8
 8018056:	f841 3b04 	str.w	r3, [r1], #4
 801805a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801805e:	d2e9      	bcs.n	8018034 <quorem+0xac>
 8018060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018068:	b922      	cbnz	r2, 8018074 <quorem+0xec>
 801806a:	3b04      	subs	r3, #4
 801806c:	429d      	cmp	r5, r3
 801806e:	461a      	mov	r2, r3
 8018070:	d30a      	bcc.n	8018088 <quorem+0x100>
 8018072:	613c      	str	r4, [r7, #16]
 8018074:	4630      	mov	r0, r6
 8018076:	b003      	add	sp, #12
 8018078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801807c:	6812      	ldr	r2, [r2, #0]
 801807e:	3b04      	subs	r3, #4
 8018080:	2a00      	cmp	r2, #0
 8018082:	d1ce      	bne.n	8018022 <quorem+0x9a>
 8018084:	3c01      	subs	r4, #1
 8018086:	e7c9      	b.n	801801c <quorem+0x94>
 8018088:	6812      	ldr	r2, [r2, #0]
 801808a:	3b04      	subs	r3, #4
 801808c:	2a00      	cmp	r2, #0
 801808e:	d1f0      	bne.n	8018072 <quorem+0xea>
 8018090:	3c01      	subs	r4, #1
 8018092:	e7eb      	b.n	801806c <quorem+0xe4>
 8018094:	2000      	movs	r0, #0
 8018096:	e7ee      	b.n	8018076 <quorem+0xee>

08018098 <_dtoa_r>:
 8018098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801809c:	ed2d 8b04 	vpush	{d8-d9}
 80180a0:	69c5      	ldr	r5, [r0, #28]
 80180a2:	b093      	sub	sp, #76	; 0x4c
 80180a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80180a8:	ec57 6b10 	vmov	r6, r7, d0
 80180ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80180b0:	9107      	str	r1, [sp, #28]
 80180b2:	4604      	mov	r4, r0
 80180b4:	920a      	str	r2, [sp, #40]	; 0x28
 80180b6:	930d      	str	r3, [sp, #52]	; 0x34
 80180b8:	b975      	cbnz	r5, 80180d8 <_dtoa_r+0x40>
 80180ba:	2010      	movs	r0, #16
 80180bc:	f7fe f8d4 	bl	8016268 <malloc>
 80180c0:	4602      	mov	r2, r0
 80180c2:	61e0      	str	r0, [r4, #28]
 80180c4:	b920      	cbnz	r0, 80180d0 <_dtoa_r+0x38>
 80180c6:	4bae      	ldr	r3, [pc, #696]	; (8018380 <_dtoa_r+0x2e8>)
 80180c8:	21ef      	movs	r1, #239	; 0xef
 80180ca:	48ae      	ldr	r0, [pc, #696]	; (8018384 <_dtoa_r+0x2ec>)
 80180cc:	f002 fdc0 	bl	801ac50 <__assert_func>
 80180d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80180d4:	6005      	str	r5, [r0, #0]
 80180d6:	60c5      	str	r5, [r0, #12]
 80180d8:	69e3      	ldr	r3, [r4, #28]
 80180da:	6819      	ldr	r1, [r3, #0]
 80180dc:	b151      	cbz	r1, 80180f4 <_dtoa_r+0x5c>
 80180de:	685a      	ldr	r2, [r3, #4]
 80180e0:	604a      	str	r2, [r1, #4]
 80180e2:	2301      	movs	r3, #1
 80180e4:	4093      	lsls	r3, r2
 80180e6:	608b      	str	r3, [r1, #8]
 80180e8:	4620      	mov	r0, r4
 80180ea:	f001 f9bd 	bl	8019468 <_Bfree>
 80180ee:	69e3      	ldr	r3, [r4, #28]
 80180f0:	2200      	movs	r2, #0
 80180f2:	601a      	str	r2, [r3, #0]
 80180f4:	1e3b      	subs	r3, r7, #0
 80180f6:	bfbb      	ittet	lt
 80180f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80180fc:	9303      	strlt	r3, [sp, #12]
 80180fe:	2300      	movge	r3, #0
 8018100:	2201      	movlt	r2, #1
 8018102:	bfac      	ite	ge
 8018104:	f8c8 3000 	strge.w	r3, [r8]
 8018108:	f8c8 2000 	strlt.w	r2, [r8]
 801810c:	4b9e      	ldr	r3, [pc, #632]	; (8018388 <_dtoa_r+0x2f0>)
 801810e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8018112:	ea33 0308 	bics.w	r3, r3, r8
 8018116:	d11b      	bne.n	8018150 <_dtoa_r+0xb8>
 8018118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801811a:	f242 730f 	movw	r3, #9999	; 0x270f
 801811e:	6013      	str	r3, [r2, #0]
 8018120:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8018124:	4333      	orrs	r3, r6
 8018126:	f000 8593 	beq.w	8018c50 <_dtoa_r+0xbb8>
 801812a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801812c:	b963      	cbnz	r3, 8018148 <_dtoa_r+0xb0>
 801812e:	4b97      	ldr	r3, [pc, #604]	; (801838c <_dtoa_r+0x2f4>)
 8018130:	e027      	b.n	8018182 <_dtoa_r+0xea>
 8018132:	4b97      	ldr	r3, [pc, #604]	; (8018390 <_dtoa_r+0x2f8>)
 8018134:	9300      	str	r3, [sp, #0]
 8018136:	3308      	adds	r3, #8
 8018138:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801813a:	6013      	str	r3, [r2, #0]
 801813c:	9800      	ldr	r0, [sp, #0]
 801813e:	b013      	add	sp, #76	; 0x4c
 8018140:	ecbd 8b04 	vpop	{d8-d9}
 8018144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018148:	4b90      	ldr	r3, [pc, #576]	; (801838c <_dtoa_r+0x2f4>)
 801814a:	9300      	str	r3, [sp, #0]
 801814c:	3303      	adds	r3, #3
 801814e:	e7f3      	b.n	8018138 <_dtoa_r+0xa0>
 8018150:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018154:	2200      	movs	r2, #0
 8018156:	ec51 0b17 	vmov	r0, r1, d7
 801815a:	eeb0 8a47 	vmov.f32	s16, s14
 801815e:	eef0 8a67 	vmov.f32	s17, s15
 8018162:	2300      	movs	r3, #0
 8018164:	f7e8 fcc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8018168:	4681      	mov	r9, r0
 801816a:	b160      	cbz	r0, 8018186 <_dtoa_r+0xee>
 801816c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801816e:	2301      	movs	r3, #1
 8018170:	6013      	str	r3, [r2, #0]
 8018172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018174:	2b00      	cmp	r3, #0
 8018176:	f000 8568 	beq.w	8018c4a <_dtoa_r+0xbb2>
 801817a:	4b86      	ldr	r3, [pc, #536]	; (8018394 <_dtoa_r+0x2fc>)
 801817c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801817e:	6013      	str	r3, [r2, #0]
 8018180:	3b01      	subs	r3, #1
 8018182:	9300      	str	r3, [sp, #0]
 8018184:	e7da      	b.n	801813c <_dtoa_r+0xa4>
 8018186:	aa10      	add	r2, sp, #64	; 0x40
 8018188:	a911      	add	r1, sp, #68	; 0x44
 801818a:	4620      	mov	r0, r4
 801818c:	eeb0 0a48 	vmov.f32	s0, s16
 8018190:	eef0 0a68 	vmov.f32	s1, s17
 8018194:	f001 fd04 	bl	8019ba0 <__d2b>
 8018198:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801819c:	4682      	mov	sl, r0
 801819e:	2d00      	cmp	r5, #0
 80181a0:	d07f      	beq.n	80182a2 <_dtoa_r+0x20a>
 80181a2:	ee18 3a90 	vmov	r3, s17
 80181a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80181aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80181ae:	ec51 0b18 	vmov	r0, r1, d8
 80181b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80181b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80181ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80181be:	4619      	mov	r1, r3
 80181c0:	2200      	movs	r2, #0
 80181c2:	4b75      	ldr	r3, [pc, #468]	; (8018398 <_dtoa_r+0x300>)
 80181c4:	f7e8 f870 	bl	80002a8 <__aeabi_dsub>
 80181c8:	a367      	add	r3, pc, #412	; (adr r3, 8018368 <_dtoa_r+0x2d0>)
 80181ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ce:	f7e8 fa23 	bl	8000618 <__aeabi_dmul>
 80181d2:	a367      	add	r3, pc, #412	; (adr r3, 8018370 <_dtoa_r+0x2d8>)
 80181d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181d8:	f7e8 f868 	bl	80002ac <__adddf3>
 80181dc:	4606      	mov	r6, r0
 80181de:	4628      	mov	r0, r5
 80181e0:	460f      	mov	r7, r1
 80181e2:	f7e8 f9af 	bl	8000544 <__aeabi_i2d>
 80181e6:	a364      	add	r3, pc, #400	; (adr r3, 8018378 <_dtoa_r+0x2e0>)
 80181e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ec:	f7e8 fa14 	bl	8000618 <__aeabi_dmul>
 80181f0:	4602      	mov	r2, r0
 80181f2:	460b      	mov	r3, r1
 80181f4:	4630      	mov	r0, r6
 80181f6:	4639      	mov	r1, r7
 80181f8:	f7e8 f858 	bl	80002ac <__adddf3>
 80181fc:	4606      	mov	r6, r0
 80181fe:	460f      	mov	r7, r1
 8018200:	f7e8 fcba 	bl	8000b78 <__aeabi_d2iz>
 8018204:	2200      	movs	r2, #0
 8018206:	4683      	mov	fp, r0
 8018208:	2300      	movs	r3, #0
 801820a:	4630      	mov	r0, r6
 801820c:	4639      	mov	r1, r7
 801820e:	f7e8 fc75 	bl	8000afc <__aeabi_dcmplt>
 8018212:	b148      	cbz	r0, 8018228 <_dtoa_r+0x190>
 8018214:	4658      	mov	r0, fp
 8018216:	f7e8 f995 	bl	8000544 <__aeabi_i2d>
 801821a:	4632      	mov	r2, r6
 801821c:	463b      	mov	r3, r7
 801821e:	f7e8 fc63 	bl	8000ae8 <__aeabi_dcmpeq>
 8018222:	b908      	cbnz	r0, 8018228 <_dtoa_r+0x190>
 8018224:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018228:	f1bb 0f16 	cmp.w	fp, #22
 801822c:	d857      	bhi.n	80182de <_dtoa_r+0x246>
 801822e:	4b5b      	ldr	r3, [pc, #364]	; (801839c <_dtoa_r+0x304>)
 8018230:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018238:	ec51 0b18 	vmov	r0, r1, d8
 801823c:	f7e8 fc5e 	bl	8000afc <__aeabi_dcmplt>
 8018240:	2800      	cmp	r0, #0
 8018242:	d04e      	beq.n	80182e2 <_dtoa_r+0x24a>
 8018244:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018248:	2300      	movs	r3, #0
 801824a:	930c      	str	r3, [sp, #48]	; 0x30
 801824c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801824e:	1b5b      	subs	r3, r3, r5
 8018250:	1e5a      	subs	r2, r3, #1
 8018252:	bf45      	ittet	mi
 8018254:	f1c3 0301 	rsbmi	r3, r3, #1
 8018258:	9305      	strmi	r3, [sp, #20]
 801825a:	2300      	movpl	r3, #0
 801825c:	2300      	movmi	r3, #0
 801825e:	9206      	str	r2, [sp, #24]
 8018260:	bf54      	ite	pl
 8018262:	9305      	strpl	r3, [sp, #20]
 8018264:	9306      	strmi	r3, [sp, #24]
 8018266:	f1bb 0f00 	cmp.w	fp, #0
 801826a:	db3c      	blt.n	80182e6 <_dtoa_r+0x24e>
 801826c:	9b06      	ldr	r3, [sp, #24]
 801826e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8018272:	445b      	add	r3, fp
 8018274:	9306      	str	r3, [sp, #24]
 8018276:	2300      	movs	r3, #0
 8018278:	9308      	str	r3, [sp, #32]
 801827a:	9b07      	ldr	r3, [sp, #28]
 801827c:	2b09      	cmp	r3, #9
 801827e:	d868      	bhi.n	8018352 <_dtoa_r+0x2ba>
 8018280:	2b05      	cmp	r3, #5
 8018282:	bfc4      	itt	gt
 8018284:	3b04      	subgt	r3, #4
 8018286:	9307      	strgt	r3, [sp, #28]
 8018288:	9b07      	ldr	r3, [sp, #28]
 801828a:	f1a3 0302 	sub.w	r3, r3, #2
 801828e:	bfcc      	ite	gt
 8018290:	2500      	movgt	r5, #0
 8018292:	2501      	movle	r5, #1
 8018294:	2b03      	cmp	r3, #3
 8018296:	f200 8085 	bhi.w	80183a4 <_dtoa_r+0x30c>
 801829a:	e8df f003 	tbb	[pc, r3]
 801829e:	3b2e      	.short	0x3b2e
 80182a0:	5839      	.short	0x5839
 80182a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80182a6:	441d      	add	r5, r3
 80182a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80182ac:	2b20      	cmp	r3, #32
 80182ae:	bfc1      	itttt	gt
 80182b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80182b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80182b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80182bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80182c0:	bfd6      	itet	le
 80182c2:	f1c3 0320 	rsble	r3, r3, #32
 80182c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80182ca:	fa06 f003 	lslle.w	r0, r6, r3
 80182ce:	f7e8 f929 	bl	8000524 <__aeabi_ui2d>
 80182d2:	2201      	movs	r2, #1
 80182d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80182d8:	3d01      	subs	r5, #1
 80182da:	920e      	str	r2, [sp, #56]	; 0x38
 80182dc:	e76f      	b.n	80181be <_dtoa_r+0x126>
 80182de:	2301      	movs	r3, #1
 80182e0:	e7b3      	b.n	801824a <_dtoa_r+0x1b2>
 80182e2:	900c      	str	r0, [sp, #48]	; 0x30
 80182e4:	e7b2      	b.n	801824c <_dtoa_r+0x1b4>
 80182e6:	9b05      	ldr	r3, [sp, #20]
 80182e8:	eba3 030b 	sub.w	r3, r3, fp
 80182ec:	9305      	str	r3, [sp, #20]
 80182ee:	f1cb 0300 	rsb	r3, fp, #0
 80182f2:	9308      	str	r3, [sp, #32]
 80182f4:	2300      	movs	r3, #0
 80182f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80182f8:	e7bf      	b.n	801827a <_dtoa_r+0x1e2>
 80182fa:	2300      	movs	r3, #0
 80182fc:	9309      	str	r3, [sp, #36]	; 0x24
 80182fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018300:	2b00      	cmp	r3, #0
 8018302:	dc52      	bgt.n	80183aa <_dtoa_r+0x312>
 8018304:	2301      	movs	r3, #1
 8018306:	9301      	str	r3, [sp, #4]
 8018308:	9304      	str	r3, [sp, #16]
 801830a:	461a      	mov	r2, r3
 801830c:	920a      	str	r2, [sp, #40]	; 0x28
 801830e:	e00b      	b.n	8018328 <_dtoa_r+0x290>
 8018310:	2301      	movs	r3, #1
 8018312:	e7f3      	b.n	80182fc <_dtoa_r+0x264>
 8018314:	2300      	movs	r3, #0
 8018316:	9309      	str	r3, [sp, #36]	; 0x24
 8018318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801831a:	445b      	add	r3, fp
 801831c:	9301      	str	r3, [sp, #4]
 801831e:	3301      	adds	r3, #1
 8018320:	2b01      	cmp	r3, #1
 8018322:	9304      	str	r3, [sp, #16]
 8018324:	bfb8      	it	lt
 8018326:	2301      	movlt	r3, #1
 8018328:	69e0      	ldr	r0, [r4, #28]
 801832a:	2100      	movs	r1, #0
 801832c:	2204      	movs	r2, #4
 801832e:	f102 0614 	add.w	r6, r2, #20
 8018332:	429e      	cmp	r6, r3
 8018334:	d93d      	bls.n	80183b2 <_dtoa_r+0x31a>
 8018336:	6041      	str	r1, [r0, #4]
 8018338:	4620      	mov	r0, r4
 801833a:	f001 f855 	bl	80193e8 <_Balloc>
 801833e:	9000      	str	r0, [sp, #0]
 8018340:	2800      	cmp	r0, #0
 8018342:	d139      	bne.n	80183b8 <_dtoa_r+0x320>
 8018344:	4b16      	ldr	r3, [pc, #88]	; (80183a0 <_dtoa_r+0x308>)
 8018346:	4602      	mov	r2, r0
 8018348:	f240 11af 	movw	r1, #431	; 0x1af
 801834c:	e6bd      	b.n	80180ca <_dtoa_r+0x32>
 801834e:	2301      	movs	r3, #1
 8018350:	e7e1      	b.n	8018316 <_dtoa_r+0x27e>
 8018352:	2501      	movs	r5, #1
 8018354:	2300      	movs	r3, #0
 8018356:	9307      	str	r3, [sp, #28]
 8018358:	9509      	str	r5, [sp, #36]	; 0x24
 801835a:	f04f 33ff 	mov.w	r3, #4294967295
 801835e:	9301      	str	r3, [sp, #4]
 8018360:	9304      	str	r3, [sp, #16]
 8018362:	2200      	movs	r2, #0
 8018364:	2312      	movs	r3, #18
 8018366:	e7d1      	b.n	801830c <_dtoa_r+0x274>
 8018368:	636f4361 	.word	0x636f4361
 801836c:	3fd287a7 	.word	0x3fd287a7
 8018370:	8b60c8b3 	.word	0x8b60c8b3
 8018374:	3fc68a28 	.word	0x3fc68a28
 8018378:	509f79fb 	.word	0x509f79fb
 801837c:	3fd34413 	.word	0x3fd34413
 8018380:	0801bb20 	.word	0x0801bb20
 8018384:	0801bb37 	.word	0x0801bb37
 8018388:	7ff00000 	.word	0x7ff00000
 801838c:	0801bb1c 	.word	0x0801bb1c
 8018390:	0801bb13 	.word	0x0801bb13
 8018394:	0801bd84 	.word	0x0801bd84
 8018398:	3ff80000 	.word	0x3ff80000
 801839c:	0801bc88 	.word	0x0801bc88
 80183a0:	0801bb8f 	.word	0x0801bb8f
 80183a4:	2301      	movs	r3, #1
 80183a6:	9309      	str	r3, [sp, #36]	; 0x24
 80183a8:	e7d7      	b.n	801835a <_dtoa_r+0x2c2>
 80183aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183ac:	9301      	str	r3, [sp, #4]
 80183ae:	9304      	str	r3, [sp, #16]
 80183b0:	e7ba      	b.n	8018328 <_dtoa_r+0x290>
 80183b2:	3101      	adds	r1, #1
 80183b4:	0052      	lsls	r2, r2, #1
 80183b6:	e7ba      	b.n	801832e <_dtoa_r+0x296>
 80183b8:	69e3      	ldr	r3, [r4, #28]
 80183ba:	9a00      	ldr	r2, [sp, #0]
 80183bc:	601a      	str	r2, [r3, #0]
 80183be:	9b04      	ldr	r3, [sp, #16]
 80183c0:	2b0e      	cmp	r3, #14
 80183c2:	f200 80a8 	bhi.w	8018516 <_dtoa_r+0x47e>
 80183c6:	2d00      	cmp	r5, #0
 80183c8:	f000 80a5 	beq.w	8018516 <_dtoa_r+0x47e>
 80183cc:	f1bb 0f00 	cmp.w	fp, #0
 80183d0:	dd38      	ble.n	8018444 <_dtoa_r+0x3ac>
 80183d2:	4bc0      	ldr	r3, [pc, #768]	; (80186d4 <_dtoa_r+0x63c>)
 80183d4:	f00b 020f 	and.w	r2, fp, #15
 80183d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80183dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80183e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80183e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80183e8:	d019      	beq.n	801841e <_dtoa_r+0x386>
 80183ea:	4bbb      	ldr	r3, [pc, #748]	; (80186d8 <_dtoa_r+0x640>)
 80183ec:	ec51 0b18 	vmov	r0, r1, d8
 80183f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80183f4:	f7e8 fa3a 	bl	800086c <__aeabi_ddiv>
 80183f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183fc:	f008 080f 	and.w	r8, r8, #15
 8018400:	2503      	movs	r5, #3
 8018402:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80186d8 <_dtoa_r+0x640>
 8018406:	f1b8 0f00 	cmp.w	r8, #0
 801840a:	d10a      	bne.n	8018422 <_dtoa_r+0x38a>
 801840c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018410:	4632      	mov	r2, r6
 8018412:	463b      	mov	r3, r7
 8018414:	f7e8 fa2a 	bl	800086c <__aeabi_ddiv>
 8018418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801841c:	e02b      	b.n	8018476 <_dtoa_r+0x3de>
 801841e:	2502      	movs	r5, #2
 8018420:	e7ef      	b.n	8018402 <_dtoa_r+0x36a>
 8018422:	f018 0f01 	tst.w	r8, #1
 8018426:	d008      	beq.n	801843a <_dtoa_r+0x3a2>
 8018428:	4630      	mov	r0, r6
 801842a:	4639      	mov	r1, r7
 801842c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018430:	f7e8 f8f2 	bl	8000618 <__aeabi_dmul>
 8018434:	3501      	adds	r5, #1
 8018436:	4606      	mov	r6, r0
 8018438:	460f      	mov	r7, r1
 801843a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801843e:	f109 0908 	add.w	r9, r9, #8
 8018442:	e7e0      	b.n	8018406 <_dtoa_r+0x36e>
 8018444:	f000 809f 	beq.w	8018586 <_dtoa_r+0x4ee>
 8018448:	f1cb 0600 	rsb	r6, fp, #0
 801844c:	4ba1      	ldr	r3, [pc, #644]	; (80186d4 <_dtoa_r+0x63c>)
 801844e:	4fa2      	ldr	r7, [pc, #648]	; (80186d8 <_dtoa_r+0x640>)
 8018450:	f006 020f 	and.w	r2, r6, #15
 8018454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801845c:	ec51 0b18 	vmov	r0, r1, d8
 8018460:	f7e8 f8da 	bl	8000618 <__aeabi_dmul>
 8018464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018468:	1136      	asrs	r6, r6, #4
 801846a:	2300      	movs	r3, #0
 801846c:	2502      	movs	r5, #2
 801846e:	2e00      	cmp	r6, #0
 8018470:	d17e      	bne.n	8018570 <_dtoa_r+0x4d8>
 8018472:	2b00      	cmp	r3, #0
 8018474:	d1d0      	bne.n	8018418 <_dtoa_r+0x380>
 8018476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018478:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801847c:	2b00      	cmp	r3, #0
 801847e:	f000 8084 	beq.w	801858a <_dtoa_r+0x4f2>
 8018482:	4b96      	ldr	r3, [pc, #600]	; (80186dc <_dtoa_r+0x644>)
 8018484:	2200      	movs	r2, #0
 8018486:	4640      	mov	r0, r8
 8018488:	4649      	mov	r1, r9
 801848a:	f7e8 fb37 	bl	8000afc <__aeabi_dcmplt>
 801848e:	2800      	cmp	r0, #0
 8018490:	d07b      	beq.n	801858a <_dtoa_r+0x4f2>
 8018492:	9b04      	ldr	r3, [sp, #16]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d078      	beq.n	801858a <_dtoa_r+0x4f2>
 8018498:	9b01      	ldr	r3, [sp, #4]
 801849a:	2b00      	cmp	r3, #0
 801849c:	dd39      	ble.n	8018512 <_dtoa_r+0x47a>
 801849e:	4b90      	ldr	r3, [pc, #576]	; (80186e0 <_dtoa_r+0x648>)
 80184a0:	2200      	movs	r2, #0
 80184a2:	4640      	mov	r0, r8
 80184a4:	4649      	mov	r1, r9
 80184a6:	f7e8 f8b7 	bl	8000618 <__aeabi_dmul>
 80184aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184ae:	9e01      	ldr	r6, [sp, #4]
 80184b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80184b4:	3501      	adds	r5, #1
 80184b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80184ba:	4628      	mov	r0, r5
 80184bc:	f7e8 f842 	bl	8000544 <__aeabi_i2d>
 80184c0:	4642      	mov	r2, r8
 80184c2:	464b      	mov	r3, r9
 80184c4:	f7e8 f8a8 	bl	8000618 <__aeabi_dmul>
 80184c8:	4b86      	ldr	r3, [pc, #536]	; (80186e4 <_dtoa_r+0x64c>)
 80184ca:	2200      	movs	r2, #0
 80184cc:	f7e7 feee 	bl	80002ac <__adddf3>
 80184d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80184d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184d8:	9303      	str	r3, [sp, #12]
 80184da:	2e00      	cmp	r6, #0
 80184dc:	d158      	bne.n	8018590 <_dtoa_r+0x4f8>
 80184de:	4b82      	ldr	r3, [pc, #520]	; (80186e8 <_dtoa_r+0x650>)
 80184e0:	2200      	movs	r2, #0
 80184e2:	4640      	mov	r0, r8
 80184e4:	4649      	mov	r1, r9
 80184e6:	f7e7 fedf 	bl	80002a8 <__aeabi_dsub>
 80184ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80184ee:	4680      	mov	r8, r0
 80184f0:	4689      	mov	r9, r1
 80184f2:	f7e8 fb21 	bl	8000b38 <__aeabi_dcmpgt>
 80184f6:	2800      	cmp	r0, #0
 80184f8:	f040 8296 	bne.w	8018a28 <_dtoa_r+0x990>
 80184fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018500:	4640      	mov	r0, r8
 8018502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018506:	4649      	mov	r1, r9
 8018508:	f7e8 faf8 	bl	8000afc <__aeabi_dcmplt>
 801850c:	2800      	cmp	r0, #0
 801850e:	f040 8289 	bne.w	8018a24 <_dtoa_r+0x98c>
 8018512:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018518:	2b00      	cmp	r3, #0
 801851a:	f2c0 814e 	blt.w	80187ba <_dtoa_r+0x722>
 801851e:	f1bb 0f0e 	cmp.w	fp, #14
 8018522:	f300 814a 	bgt.w	80187ba <_dtoa_r+0x722>
 8018526:	4b6b      	ldr	r3, [pc, #428]	; (80186d4 <_dtoa_r+0x63c>)
 8018528:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801852c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018532:	2b00      	cmp	r3, #0
 8018534:	f280 80dc 	bge.w	80186f0 <_dtoa_r+0x658>
 8018538:	9b04      	ldr	r3, [sp, #16]
 801853a:	2b00      	cmp	r3, #0
 801853c:	f300 80d8 	bgt.w	80186f0 <_dtoa_r+0x658>
 8018540:	f040 826f 	bne.w	8018a22 <_dtoa_r+0x98a>
 8018544:	4b68      	ldr	r3, [pc, #416]	; (80186e8 <_dtoa_r+0x650>)
 8018546:	2200      	movs	r2, #0
 8018548:	4640      	mov	r0, r8
 801854a:	4649      	mov	r1, r9
 801854c:	f7e8 f864 	bl	8000618 <__aeabi_dmul>
 8018550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018554:	f7e8 fae6 	bl	8000b24 <__aeabi_dcmpge>
 8018558:	9e04      	ldr	r6, [sp, #16]
 801855a:	4637      	mov	r7, r6
 801855c:	2800      	cmp	r0, #0
 801855e:	f040 8245 	bne.w	80189ec <_dtoa_r+0x954>
 8018562:	9d00      	ldr	r5, [sp, #0]
 8018564:	2331      	movs	r3, #49	; 0x31
 8018566:	f805 3b01 	strb.w	r3, [r5], #1
 801856a:	f10b 0b01 	add.w	fp, fp, #1
 801856e:	e241      	b.n	80189f4 <_dtoa_r+0x95c>
 8018570:	07f2      	lsls	r2, r6, #31
 8018572:	d505      	bpl.n	8018580 <_dtoa_r+0x4e8>
 8018574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018578:	f7e8 f84e 	bl	8000618 <__aeabi_dmul>
 801857c:	3501      	adds	r5, #1
 801857e:	2301      	movs	r3, #1
 8018580:	1076      	asrs	r6, r6, #1
 8018582:	3708      	adds	r7, #8
 8018584:	e773      	b.n	801846e <_dtoa_r+0x3d6>
 8018586:	2502      	movs	r5, #2
 8018588:	e775      	b.n	8018476 <_dtoa_r+0x3de>
 801858a:	9e04      	ldr	r6, [sp, #16]
 801858c:	465f      	mov	r7, fp
 801858e:	e792      	b.n	80184b6 <_dtoa_r+0x41e>
 8018590:	9900      	ldr	r1, [sp, #0]
 8018592:	4b50      	ldr	r3, [pc, #320]	; (80186d4 <_dtoa_r+0x63c>)
 8018594:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018598:	4431      	add	r1, r6
 801859a:	9102      	str	r1, [sp, #8]
 801859c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801859e:	eeb0 9a47 	vmov.f32	s18, s14
 80185a2:	eef0 9a67 	vmov.f32	s19, s15
 80185a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80185aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80185ae:	2900      	cmp	r1, #0
 80185b0:	d044      	beq.n	801863c <_dtoa_r+0x5a4>
 80185b2:	494e      	ldr	r1, [pc, #312]	; (80186ec <_dtoa_r+0x654>)
 80185b4:	2000      	movs	r0, #0
 80185b6:	f7e8 f959 	bl	800086c <__aeabi_ddiv>
 80185ba:	ec53 2b19 	vmov	r2, r3, d9
 80185be:	f7e7 fe73 	bl	80002a8 <__aeabi_dsub>
 80185c2:	9d00      	ldr	r5, [sp, #0]
 80185c4:	ec41 0b19 	vmov	d9, r0, r1
 80185c8:	4649      	mov	r1, r9
 80185ca:	4640      	mov	r0, r8
 80185cc:	f7e8 fad4 	bl	8000b78 <__aeabi_d2iz>
 80185d0:	4606      	mov	r6, r0
 80185d2:	f7e7 ffb7 	bl	8000544 <__aeabi_i2d>
 80185d6:	4602      	mov	r2, r0
 80185d8:	460b      	mov	r3, r1
 80185da:	4640      	mov	r0, r8
 80185dc:	4649      	mov	r1, r9
 80185de:	f7e7 fe63 	bl	80002a8 <__aeabi_dsub>
 80185e2:	3630      	adds	r6, #48	; 0x30
 80185e4:	f805 6b01 	strb.w	r6, [r5], #1
 80185e8:	ec53 2b19 	vmov	r2, r3, d9
 80185ec:	4680      	mov	r8, r0
 80185ee:	4689      	mov	r9, r1
 80185f0:	f7e8 fa84 	bl	8000afc <__aeabi_dcmplt>
 80185f4:	2800      	cmp	r0, #0
 80185f6:	d164      	bne.n	80186c2 <_dtoa_r+0x62a>
 80185f8:	4642      	mov	r2, r8
 80185fa:	464b      	mov	r3, r9
 80185fc:	4937      	ldr	r1, [pc, #220]	; (80186dc <_dtoa_r+0x644>)
 80185fe:	2000      	movs	r0, #0
 8018600:	f7e7 fe52 	bl	80002a8 <__aeabi_dsub>
 8018604:	ec53 2b19 	vmov	r2, r3, d9
 8018608:	f7e8 fa78 	bl	8000afc <__aeabi_dcmplt>
 801860c:	2800      	cmp	r0, #0
 801860e:	f040 80b6 	bne.w	801877e <_dtoa_r+0x6e6>
 8018612:	9b02      	ldr	r3, [sp, #8]
 8018614:	429d      	cmp	r5, r3
 8018616:	f43f af7c 	beq.w	8018512 <_dtoa_r+0x47a>
 801861a:	4b31      	ldr	r3, [pc, #196]	; (80186e0 <_dtoa_r+0x648>)
 801861c:	ec51 0b19 	vmov	r0, r1, d9
 8018620:	2200      	movs	r2, #0
 8018622:	f7e7 fff9 	bl	8000618 <__aeabi_dmul>
 8018626:	4b2e      	ldr	r3, [pc, #184]	; (80186e0 <_dtoa_r+0x648>)
 8018628:	ec41 0b19 	vmov	d9, r0, r1
 801862c:	2200      	movs	r2, #0
 801862e:	4640      	mov	r0, r8
 8018630:	4649      	mov	r1, r9
 8018632:	f7e7 fff1 	bl	8000618 <__aeabi_dmul>
 8018636:	4680      	mov	r8, r0
 8018638:	4689      	mov	r9, r1
 801863a:	e7c5      	b.n	80185c8 <_dtoa_r+0x530>
 801863c:	ec51 0b17 	vmov	r0, r1, d7
 8018640:	f7e7 ffea 	bl	8000618 <__aeabi_dmul>
 8018644:	9b02      	ldr	r3, [sp, #8]
 8018646:	9d00      	ldr	r5, [sp, #0]
 8018648:	930f      	str	r3, [sp, #60]	; 0x3c
 801864a:	ec41 0b19 	vmov	d9, r0, r1
 801864e:	4649      	mov	r1, r9
 8018650:	4640      	mov	r0, r8
 8018652:	f7e8 fa91 	bl	8000b78 <__aeabi_d2iz>
 8018656:	4606      	mov	r6, r0
 8018658:	f7e7 ff74 	bl	8000544 <__aeabi_i2d>
 801865c:	3630      	adds	r6, #48	; 0x30
 801865e:	4602      	mov	r2, r0
 8018660:	460b      	mov	r3, r1
 8018662:	4640      	mov	r0, r8
 8018664:	4649      	mov	r1, r9
 8018666:	f7e7 fe1f 	bl	80002a8 <__aeabi_dsub>
 801866a:	f805 6b01 	strb.w	r6, [r5], #1
 801866e:	9b02      	ldr	r3, [sp, #8]
 8018670:	429d      	cmp	r5, r3
 8018672:	4680      	mov	r8, r0
 8018674:	4689      	mov	r9, r1
 8018676:	f04f 0200 	mov.w	r2, #0
 801867a:	d124      	bne.n	80186c6 <_dtoa_r+0x62e>
 801867c:	4b1b      	ldr	r3, [pc, #108]	; (80186ec <_dtoa_r+0x654>)
 801867e:	ec51 0b19 	vmov	r0, r1, d9
 8018682:	f7e7 fe13 	bl	80002ac <__adddf3>
 8018686:	4602      	mov	r2, r0
 8018688:	460b      	mov	r3, r1
 801868a:	4640      	mov	r0, r8
 801868c:	4649      	mov	r1, r9
 801868e:	f7e8 fa53 	bl	8000b38 <__aeabi_dcmpgt>
 8018692:	2800      	cmp	r0, #0
 8018694:	d173      	bne.n	801877e <_dtoa_r+0x6e6>
 8018696:	ec53 2b19 	vmov	r2, r3, d9
 801869a:	4914      	ldr	r1, [pc, #80]	; (80186ec <_dtoa_r+0x654>)
 801869c:	2000      	movs	r0, #0
 801869e:	f7e7 fe03 	bl	80002a8 <__aeabi_dsub>
 80186a2:	4602      	mov	r2, r0
 80186a4:	460b      	mov	r3, r1
 80186a6:	4640      	mov	r0, r8
 80186a8:	4649      	mov	r1, r9
 80186aa:	f7e8 fa27 	bl	8000afc <__aeabi_dcmplt>
 80186ae:	2800      	cmp	r0, #0
 80186b0:	f43f af2f 	beq.w	8018512 <_dtoa_r+0x47a>
 80186b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80186b6:	1e6b      	subs	r3, r5, #1
 80186b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80186ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80186be:	2b30      	cmp	r3, #48	; 0x30
 80186c0:	d0f8      	beq.n	80186b4 <_dtoa_r+0x61c>
 80186c2:	46bb      	mov	fp, r7
 80186c4:	e04a      	b.n	801875c <_dtoa_r+0x6c4>
 80186c6:	4b06      	ldr	r3, [pc, #24]	; (80186e0 <_dtoa_r+0x648>)
 80186c8:	f7e7 ffa6 	bl	8000618 <__aeabi_dmul>
 80186cc:	4680      	mov	r8, r0
 80186ce:	4689      	mov	r9, r1
 80186d0:	e7bd      	b.n	801864e <_dtoa_r+0x5b6>
 80186d2:	bf00      	nop
 80186d4:	0801bc88 	.word	0x0801bc88
 80186d8:	0801bc60 	.word	0x0801bc60
 80186dc:	3ff00000 	.word	0x3ff00000
 80186e0:	40240000 	.word	0x40240000
 80186e4:	401c0000 	.word	0x401c0000
 80186e8:	40140000 	.word	0x40140000
 80186ec:	3fe00000 	.word	0x3fe00000
 80186f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80186f4:	9d00      	ldr	r5, [sp, #0]
 80186f6:	4642      	mov	r2, r8
 80186f8:	464b      	mov	r3, r9
 80186fa:	4630      	mov	r0, r6
 80186fc:	4639      	mov	r1, r7
 80186fe:	f7e8 f8b5 	bl	800086c <__aeabi_ddiv>
 8018702:	f7e8 fa39 	bl	8000b78 <__aeabi_d2iz>
 8018706:	9001      	str	r0, [sp, #4]
 8018708:	f7e7 ff1c 	bl	8000544 <__aeabi_i2d>
 801870c:	4642      	mov	r2, r8
 801870e:	464b      	mov	r3, r9
 8018710:	f7e7 ff82 	bl	8000618 <__aeabi_dmul>
 8018714:	4602      	mov	r2, r0
 8018716:	460b      	mov	r3, r1
 8018718:	4630      	mov	r0, r6
 801871a:	4639      	mov	r1, r7
 801871c:	f7e7 fdc4 	bl	80002a8 <__aeabi_dsub>
 8018720:	9e01      	ldr	r6, [sp, #4]
 8018722:	9f04      	ldr	r7, [sp, #16]
 8018724:	3630      	adds	r6, #48	; 0x30
 8018726:	f805 6b01 	strb.w	r6, [r5], #1
 801872a:	9e00      	ldr	r6, [sp, #0]
 801872c:	1bae      	subs	r6, r5, r6
 801872e:	42b7      	cmp	r7, r6
 8018730:	4602      	mov	r2, r0
 8018732:	460b      	mov	r3, r1
 8018734:	d134      	bne.n	80187a0 <_dtoa_r+0x708>
 8018736:	f7e7 fdb9 	bl	80002ac <__adddf3>
 801873a:	4642      	mov	r2, r8
 801873c:	464b      	mov	r3, r9
 801873e:	4606      	mov	r6, r0
 8018740:	460f      	mov	r7, r1
 8018742:	f7e8 f9f9 	bl	8000b38 <__aeabi_dcmpgt>
 8018746:	b9c8      	cbnz	r0, 801877c <_dtoa_r+0x6e4>
 8018748:	4642      	mov	r2, r8
 801874a:	464b      	mov	r3, r9
 801874c:	4630      	mov	r0, r6
 801874e:	4639      	mov	r1, r7
 8018750:	f7e8 f9ca 	bl	8000ae8 <__aeabi_dcmpeq>
 8018754:	b110      	cbz	r0, 801875c <_dtoa_r+0x6c4>
 8018756:	9b01      	ldr	r3, [sp, #4]
 8018758:	07db      	lsls	r3, r3, #31
 801875a:	d40f      	bmi.n	801877c <_dtoa_r+0x6e4>
 801875c:	4651      	mov	r1, sl
 801875e:	4620      	mov	r0, r4
 8018760:	f000 fe82 	bl	8019468 <_Bfree>
 8018764:	2300      	movs	r3, #0
 8018766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018768:	702b      	strb	r3, [r5, #0]
 801876a:	f10b 0301 	add.w	r3, fp, #1
 801876e:	6013      	str	r3, [r2, #0]
 8018770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018772:	2b00      	cmp	r3, #0
 8018774:	f43f ace2 	beq.w	801813c <_dtoa_r+0xa4>
 8018778:	601d      	str	r5, [r3, #0]
 801877a:	e4df      	b.n	801813c <_dtoa_r+0xa4>
 801877c:	465f      	mov	r7, fp
 801877e:	462b      	mov	r3, r5
 8018780:	461d      	mov	r5, r3
 8018782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018786:	2a39      	cmp	r2, #57	; 0x39
 8018788:	d106      	bne.n	8018798 <_dtoa_r+0x700>
 801878a:	9a00      	ldr	r2, [sp, #0]
 801878c:	429a      	cmp	r2, r3
 801878e:	d1f7      	bne.n	8018780 <_dtoa_r+0x6e8>
 8018790:	9900      	ldr	r1, [sp, #0]
 8018792:	2230      	movs	r2, #48	; 0x30
 8018794:	3701      	adds	r7, #1
 8018796:	700a      	strb	r2, [r1, #0]
 8018798:	781a      	ldrb	r2, [r3, #0]
 801879a:	3201      	adds	r2, #1
 801879c:	701a      	strb	r2, [r3, #0]
 801879e:	e790      	b.n	80186c2 <_dtoa_r+0x62a>
 80187a0:	4ba3      	ldr	r3, [pc, #652]	; (8018a30 <_dtoa_r+0x998>)
 80187a2:	2200      	movs	r2, #0
 80187a4:	f7e7 ff38 	bl	8000618 <__aeabi_dmul>
 80187a8:	2200      	movs	r2, #0
 80187aa:	2300      	movs	r3, #0
 80187ac:	4606      	mov	r6, r0
 80187ae:	460f      	mov	r7, r1
 80187b0:	f7e8 f99a 	bl	8000ae8 <__aeabi_dcmpeq>
 80187b4:	2800      	cmp	r0, #0
 80187b6:	d09e      	beq.n	80186f6 <_dtoa_r+0x65e>
 80187b8:	e7d0      	b.n	801875c <_dtoa_r+0x6c4>
 80187ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187bc:	2a00      	cmp	r2, #0
 80187be:	f000 80ca 	beq.w	8018956 <_dtoa_r+0x8be>
 80187c2:	9a07      	ldr	r2, [sp, #28]
 80187c4:	2a01      	cmp	r2, #1
 80187c6:	f300 80ad 	bgt.w	8018924 <_dtoa_r+0x88c>
 80187ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80187cc:	2a00      	cmp	r2, #0
 80187ce:	f000 80a5 	beq.w	801891c <_dtoa_r+0x884>
 80187d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80187d6:	9e08      	ldr	r6, [sp, #32]
 80187d8:	9d05      	ldr	r5, [sp, #20]
 80187da:	9a05      	ldr	r2, [sp, #20]
 80187dc:	441a      	add	r2, r3
 80187de:	9205      	str	r2, [sp, #20]
 80187e0:	9a06      	ldr	r2, [sp, #24]
 80187e2:	2101      	movs	r1, #1
 80187e4:	441a      	add	r2, r3
 80187e6:	4620      	mov	r0, r4
 80187e8:	9206      	str	r2, [sp, #24]
 80187ea:	f000 ff3d 	bl	8019668 <__i2b>
 80187ee:	4607      	mov	r7, r0
 80187f0:	b165      	cbz	r5, 801880c <_dtoa_r+0x774>
 80187f2:	9b06      	ldr	r3, [sp, #24]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	dd09      	ble.n	801880c <_dtoa_r+0x774>
 80187f8:	42ab      	cmp	r3, r5
 80187fa:	9a05      	ldr	r2, [sp, #20]
 80187fc:	bfa8      	it	ge
 80187fe:	462b      	movge	r3, r5
 8018800:	1ad2      	subs	r2, r2, r3
 8018802:	9205      	str	r2, [sp, #20]
 8018804:	9a06      	ldr	r2, [sp, #24]
 8018806:	1aed      	subs	r5, r5, r3
 8018808:	1ad3      	subs	r3, r2, r3
 801880a:	9306      	str	r3, [sp, #24]
 801880c:	9b08      	ldr	r3, [sp, #32]
 801880e:	b1f3      	cbz	r3, 801884e <_dtoa_r+0x7b6>
 8018810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018812:	2b00      	cmp	r3, #0
 8018814:	f000 80a3 	beq.w	801895e <_dtoa_r+0x8c6>
 8018818:	2e00      	cmp	r6, #0
 801881a:	dd10      	ble.n	801883e <_dtoa_r+0x7a6>
 801881c:	4639      	mov	r1, r7
 801881e:	4632      	mov	r2, r6
 8018820:	4620      	mov	r0, r4
 8018822:	f000 ffe1 	bl	80197e8 <__pow5mult>
 8018826:	4652      	mov	r2, sl
 8018828:	4601      	mov	r1, r0
 801882a:	4607      	mov	r7, r0
 801882c:	4620      	mov	r0, r4
 801882e:	f000 ff31 	bl	8019694 <__multiply>
 8018832:	4651      	mov	r1, sl
 8018834:	4680      	mov	r8, r0
 8018836:	4620      	mov	r0, r4
 8018838:	f000 fe16 	bl	8019468 <_Bfree>
 801883c:	46c2      	mov	sl, r8
 801883e:	9b08      	ldr	r3, [sp, #32]
 8018840:	1b9a      	subs	r2, r3, r6
 8018842:	d004      	beq.n	801884e <_dtoa_r+0x7b6>
 8018844:	4651      	mov	r1, sl
 8018846:	4620      	mov	r0, r4
 8018848:	f000 ffce 	bl	80197e8 <__pow5mult>
 801884c:	4682      	mov	sl, r0
 801884e:	2101      	movs	r1, #1
 8018850:	4620      	mov	r0, r4
 8018852:	f000 ff09 	bl	8019668 <__i2b>
 8018856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018858:	2b00      	cmp	r3, #0
 801885a:	4606      	mov	r6, r0
 801885c:	f340 8081 	ble.w	8018962 <_dtoa_r+0x8ca>
 8018860:	461a      	mov	r2, r3
 8018862:	4601      	mov	r1, r0
 8018864:	4620      	mov	r0, r4
 8018866:	f000 ffbf 	bl	80197e8 <__pow5mult>
 801886a:	9b07      	ldr	r3, [sp, #28]
 801886c:	2b01      	cmp	r3, #1
 801886e:	4606      	mov	r6, r0
 8018870:	dd7a      	ble.n	8018968 <_dtoa_r+0x8d0>
 8018872:	f04f 0800 	mov.w	r8, #0
 8018876:	6933      	ldr	r3, [r6, #16]
 8018878:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801887c:	6918      	ldr	r0, [r3, #16]
 801887e:	f000 fea5 	bl	80195cc <__hi0bits>
 8018882:	f1c0 0020 	rsb	r0, r0, #32
 8018886:	9b06      	ldr	r3, [sp, #24]
 8018888:	4418      	add	r0, r3
 801888a:	f010 001f 	ands.w	r0, r0, #31
 801888e:	f000 8094 	beq.w	80189ba <_dtoa_r+0x922>
 8018892:	f1c0 0320 	rsb	r3, r0, #32
 8018896:	2b04      	cmp	r3, #4
 8018898:	f340 8085 	ble.w	80189a6 <_dtoa_r+0x90e>
 801889c:	9b05      	ldr	r3, [sp, #20]
 801889e:	f1c0 001c 	rsb	r0, r0, #28
 80188a2:	4403      	add	r3, r0
 80188a4:	9305      	str	r3, [sp, #20]
 80188a6:	9b06      	ldr	r3, [sp, #24]
 80188a8:	4403      	add	r3, r0
 80188aa:	4405      	add	r5, r0
 80188ac:	9306      	str	r3, [sp, #24]
 80188ae:	9b05      	ldr	r3, [sp, #20]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	dd05      	ble.n	80188c0 <_dtoa_r+0x828>
 80188b4:	4651      	mov	r1, sl
 80188b6:	461a      	mov	r2, r3
 80188b8:	4620      	mov	r0, r4
 80188ba:	f000 ffef 	bl	801989c <__lshift>
 80188be:	4682      	mov	sl, r0
 80188c0:	9b06      	ldr	r3, [sp, #24]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	dd05      	ble.n	80188d2 <_dtoa_r+0x83a>
 80188c6:	4631      	mov	r1, r6
 80188c8:	461a      	mov	r2, r3
 80188ca:	4620      	mov	r0, r4
 80188cc:	f000 ffe6 	bl	801989c <__lshift>
 80188d0:	4606      	mov	r6, r0
 80188d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d072      	beq.n	80189be <_dtoa_r+0x926>
 80188d8:	4631      	mov	r1, r6
 80188da:	4650      	mov	r0, sl
 80188dc:	f001 f84a 	bl	8019974 <__mcmp>
 80188e0:	2800      	cmp	r0, #0
 80188e2:	da6c      	bge.n	80189be <_dtoa_r+0x926>
 80188e4:	2300      	movs	r3, #0
 80188e6:	4651      	mov	r1, sl
 80188e8:	220a      	movs	r2, #10
 80188ea:	4620      	mov	r0, r4
 80188ec:	f000 fdde 	bl	80194ac <__multadd>
 80188f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80188f6:	4682      	mov	sl, r0
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	f000 81b0 	beq.w	8018c5e <_dtoa_r+0xbc6>
 80188fe:	2300      	movs	r3, #0
 8018900:	4639      	mov	r1, r7
 8018902:	220a      	movs	r2, #10
 8018904:	4620      	mov	r0, r4
 8018906:	f000 fdd1 	bl	80194ac <__multadd>
 801890a:	9b01      	ldr	r3, [sp, #4]
 801890c:	2b00      	cmp	r3, #0
 801890e:	4607      	mov	r7, r0
 8018910:	f300 8096 	bgt.w	8018a40 <_dtoa_r+0x9a8>
 8018914:	9b07      	ldr	r3, [sp, #28]
 8018916:	2b02      	cmp	r3, #2
 8018918:	dc59      	bgt.n	80189ce <_dtoa_r+0x936>
 801891a:	e091      	b.n	8018a40 <_dtoa_r+0x9a8>
 801891c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801891e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018922:	e758      	b.n	80187d6 <_dtoa_r+0x73e>
 8018924:	9b04      	ldr	r3, [sp, #16]
 8018926:	1e5e      	subs	r6, r3, #1
 8018928:	9b08      	ldr	r3, [sp, #32]
 801892a:	42b3      	cmp	r3, r6
 801892c:	bfbf      	itttt	lt
 801892e:	9b08      	ldrlt	r3, [sp, #32]
 8018930:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8018932:	9608      	strlt	r6, [sp, #32]
 8018934:	1af3      	sublt	r3, r6, r3
 8018936:	bfb4      	ite	lt
 8018938:	18d2      	addlt	r2, r2, r3
 801893a:	1b9e      	subge	r6, r3, r6
 801893c:	9b04      	ldr	r3, [sp, #16]
 801893e:	bfbc      	itt	lt
 8018940:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8018942:	2600      	movlt	r6, #0
 8018944:	2b00      	cmp	r3, #0
 8018946:	bfb7      	itett	lt
 8018948:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801894c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018950:	1a9d      	sublt	r5, r3, r2
 8018952:	2300      	movlt	r3, #0
 8018954:	e741      	b.n	80187da <_dtoa_r+0x742>
 8018956:	9e08      	ldr	r6, [sp, #32]
 8018958:	9d05      	ldr	r5, [sp, #20]
 801895a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801895c:	e748      	b.n	80187f0 <_dtoa_r+0x758>
 801895e:	9a08      	ldr	r2, [sp, #32]
 8018960:	e770      	b.n	8018844 <_dtoa_r+0x7ac>
 8018962:	9b07      	ldr	r3, [sp, #28]
 8018964:	2b01      	cmp	r3, #1
 8018966:	dc19      	bgt.n	801899c <_dtoa_r+0x904>
 8018968:	9b02      	ldr	r3, [sp, #8]
 801896a:	b9bb      	cbnz	r3, 801899c <_dtoa_r+0x904>
 801896c:	9b03      	ldr	r3, [sp, #12]
 801896e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018972:	b99b      	cbnz	r3, 801899c <_dtoa_r+0x904>
 8018974:	9b03      	ldr	r3, [sp, #12]
 8018976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801897a:	0d1b      	lsrs	r3, r3, #20
 801897c:	051b      	lsls	r3, r3, #20
 801897e:	b183      	cbz	r3, 80189a2 <_dtoa_r+0x90a>
 8018980:	9b05      	ldr	r3, [sp, #20]
 8018982:	3301      	adds	r3, #1
 8018984:	9305      	str	r3, [sp, #20]
 8018986:	9b06      	ldr	r3, [sp, #24]
 8018988:	3301      	adds	r3, #1
 801898a:	9306      	str	r3, [sp, #24]
 801898c:	f04f 0801 	mov.w	r8, #1
 8018990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018992:	2b00      	cmp	r3, #0
 8018994:	f47f af6f 	bne.w	8018876 <_dtoa_r+0x7de>
 8018998:	2001      	movs	r0, #1
 801899a:	e774      	b.n	8018886 <_dtoa_r+0x7ee>
 801899c:	f04f 0800 	mov.w	r8, #0
 80189a0:	e7f6      	b.n	8018990 <_dtoa_r+0x8f8>
 80189a2:	4698      	mov	r8, r3
 80189a4:	e7f4      	b.n	8018990 <_dtoa_r+0x8f8>
 80189a6:	d082      	beq.n	80188ae <_dtoa_r+0x816>
 80189a8:	9a05      	ldr	r2, [sp, #20]
 80189aa:	331c      	adds	r3, #28
 80189ac:	441a      	add	r2, r3
 80189ae:	9205      	str	r2, [sp, #20]
 80189b0:	9a06      	ldr	r2, [sp, #24]
 80189b2:	441a      	add	r2, r3
 80189b4:	441d      	add	r5, r3
 80189b6:	9206      	str	r2, [sp, #24]
 80189b8:	e779      	b.n	80188ae <_dtoa_r+0x816>
 80189ba:	4603      	mov	r3, r0
 80189bc:	e7f4      	b.n	80189a8 <_dtoa_r+0x910>
 80189be:	9b04      	ldr	r3, [sp, #16]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	dc37      	bgt.n	8018a34 <_dtoa_r+0x99c>
 80189c4:	9b07      	ldr	r3, [sp, #28]
 80189c6:	2b02      	cmp	r3, #2
 80189c8:	dd34      	ble.n	8018a34 <_dtoa_r+0x99c>
 80189ca:	9b04      	ldr	r3, [sp, #16]
 80189cc:	9301      	str	r3, [sp, #4]
 80189ce:	9b01      	ldr	r3, [sp, #4]
 80189d0:	b963      	cbnz	r3, 80189ec <_dtoa_r+0x954>
 80189d2:	4631      	mov	r1, r6
 80189d4:	2205      	movs	r2, #5
 80189d6:	4620      	mov	r0, r4
 80189d8:	f000 fd68 	bl	80194ac <__multadd>
 80189dc:	4601      	mov	r1, r0
 80189de:	4606      	mov	r6, r0
 80189e0:	4650      	mov	r0, sl
 80189e2:	f000 ffc7 	bl	8019974 <__mcmp>
 80189e6:	2800      	cmp	r0, #0
 80189e8:	f73f adbb 	bgt.w	8018562 <_dtoa_r+0x4ca>
 80189ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80189ee:	9d00      	ldr	r5, [sp, #0]
 80189f0:	ea6f 0b03 	mvn.w	fp, r3
 80189f4:	f04f 0800 	mov.w	r8, #0
 80189f8:	4631      	mov	r1, r6
 80189fa:	4620      	mov	r0, r4
 80189fc:	f000 fd34 	bl	8019468 <_Bfree>
 8018a00:	2f00      	cmp	r7, #0
 8018a02:	f43f aeab 	beq.w	801875c <_dtoa_r+0x6c4>
 8018a06:	f1b8 0f00 	cmp.w	r8, #0
 8018a0a:	d005      	beq.n	8018a18 <_dtoa_r+0x980>
 8018a0c:	45b8      	cmp	r8, r7
 8018a0e:	d003      	beq.n	8018a18 <_dtoa_r+0x980>
 8018a10:	4641      	mov	r1, r8
 8018a12:	4620      	mov	r0, r4
 8018a14:	f000 fd28 	bl	8019468 <_Bfree>
 8018a18:	4639      	mov	r1, r7
 8018a1a:	4620      	mov	r0, r4
 8018a1c:	f000 fd24 	bl	8019468 <_Bfree>
 8018a20:	e69c      	b.n	801875c <_dtoa_r+0x6c4>
 8018a22:	2600      	movs	r6, #0
 8018a24:	4637      	mov	r7, r6
 8018a26:	e7e1      	b.n	80189ec <_dtoa_r+0x954>
 8018a28:	46bb      	mov	fp, r7
 8018a2a:	4637      	mov	r7, r6
 8018a2c:	e599      	b.n	8018562 <_dtoa_r+0x4ca>
 8018a2e:	bf00      	nop
 8018a30:	40240000 	.word	0x40240000
 8018a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	f000 80c8 	beq.w	8018bcc <_dtoa_r+0xb34>
 8018a3c:	9b04      	ldr	r3, [sp, #16]
 8018a3e:	9301      	str	r3, [sp, #4]
 8018a40:	2d00      	cmp	r5, #0
 8018a42:	dd05      	ble.n	8018a50 <_dtoa_r+0x9b8>
 8018a44:	4639      	mov	r1, r7
 8018a46:	462a      	mov	r2, r5
 8018a48:	4620      	mov	r0, r4
 8018a4a:	f000 ff27 	bl	801989c <__lshift>
 8018a4e:	4607      	mov	r7, r0
 8018a50:	f1b8 0f00 	cmp.w	r8, #0
 8018a54:	d05b      	beq.n	8018b0e <_dtoa_r+0xa76>
 8018a56:	6879      	ldr	r1, [r7, #4]
 8018a58:	4620      	mov	r0, r4
 8018a5a:	f000 fcc5 	bl	80193e8 <_Balloc>
 8018a5e:	4605      	mov	r5, r0
 8018a60:	b928      	cbnz	r0, 8018a6e <_dtoa_r+0x9d6>
 8018a62:	4b83      	ldr	r3, [pc, #524]	; (8018c70 <_dtoa_r+0xbd8>)
 8018a64:	4602      	mov	r2, r0
 8018a66:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018a6a:	f7ff bb2e 	b.w	80180ca <_dtoa_r+0x32>
 8018a6e:	693a      	ldr	r2, [r7, #16]
 8018a70:	3202      	adds	r2, #2
 8018a72:	0092      	lsls	r2, r2, #2
 8018a74:	f107 010c 	add.w	r1, r7, #12
 8018a78:	300c      	adds	r0, #12
 8018a7a:	f7ff fa6e 	bl	8017f5a <memcpy>
 8018a7e:	2201      	movs	r2, #1
 8018a80:	4629      	mov	r1, r5
 8018a82:	4620      	mov	r0, r4
 8018a84:	f000 ff0a 	bl	801989c <__lshift>
 8018a88:	9b00      	ldr	r3, [sp, #0]
 8018a8a:	3301      	adds	r3, #1
 8018a8c:	9304      	str	r3, [sp, #16]
 8018a8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018a92:	4413      	add	r3, r2
 8018a94:	9308      	str	r3, [sp, #32]
 8018a96:	9b02      	ldr	r3, [sp, #8]
 8018a98:	f003 0301 	and.w	r3, r3, #1
 8018a9c:	46b8      	mov	r8, r7
 8018a9e:	9306      	str	r3, [sp, #24]
 8018aa0:	4607      	mov	r7, r0
 8018aa2:	9b04      	ldr	r3, [sp, #16]
 8018aa4:	4631      	mov	r1, r6
 8018aa6:	3b01      	subs	r3, #1
 8018aa8:	4650      	mov	r0, sl
 8018aaa:	9301      	str	r3, [sp, #4]
 8018aac:	f7ff fa6c 	bl	8017f88 <quorem>
 8018ab0:	4641      	mov	r1, r8
 8018ab2:	9002      	str	r0, [sp, #8]
 8018ab4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018ab8:	4650      	mov	r0, sl
 8018aba:	f000 ff5b 	bl	8019974 <__mcmp>
 8018abe:	463a      	mov	r2, r7
 8018ac0:	9005      	str	r0, [sp, #20]
 8018ac2:	4631      	mov	r1, r6
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	f000 ff71 	bl	80199ac <__mdiff>
 8018aca:	68c2      	ldr	r2, [r0, #12]
 8018acc:	4605      	mov	r5, r0
 8018ace:	bb02      	cbnz	r2, 8018b12 <_dtoa_r+0xa7a>
 8018ad0:	4601      	mov	r1, r0
 8018ad2:	4650      	mov	r0, sl
 8018ad4:	f000 ff4e 	bl	8019974 <__mcmp>
 8018ad8:	4602      	mov	r2, r0
 8018ada:	4629      	mov	r1, r5
 8018adc:	4620      	mov	r0, r4
 8018ade:	9209      	str	r2, [sp, #36]	; 0x24
 8018ae0:	f000 fcc2 	bl	8019468 <_Bfree>
 8018ae4:	9b07      	ldr	r3, [sp, #28]
 8018ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ae8:	9d04      	ldr	r5, [sp, #16]
 8018aea:	ea43 0102 	orr.w	r1, r3, r2
 8018aee:	9b06      	ldr	r3, [sp, #24]
 8018af0:	4319      	orrs	r1, r3
 8018af2:	d110      	bne.n	8018b16 <_dtoa_r+0xa7e>
 8018af4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018af8:	d029      	beq.n	8018b4e <_dtoa_r+0xab6>
 8018afa:	9b05      	ldr	r3, [sp, #20]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	dd02      	ble.n	8018b06 <_dtoa_r+0xa6e>
 8018b00:	9b02      	ldr	r3, [sp, #8]
 8018b02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8018b06:	9b01      	ldr	r3, [sp, #4]
 8018b08:	f883 9000 	strb.w	r9, [r3]
 8018b0c:	e774      	b.n	80189f8 <_dtoa_r+0x960>
 8018b0e:	4638      	mov	r0, r7
 8018b10:	e7ba      	b.n	8018a88 <_dtoa_r+0x9f0>
 8018b12:	2201      	movs	r2, #1
 8018b14:	e7e1      	b.n	8018ada <_dtoa_r+0xa42>
 8018b16:	9b05      	ldr	r3, [sp, #20]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	db04      	blt.n	8018b26 <_dtoa_r+0xa8e>
 8018b1c:	9907      	ldr	r1, [sp, #28]
 8018b1e:	430b      	orrs	r3, r1
 8018b20:	9906      	ldr	r1, [sp, #24]
 8018b22:	430b      	orrs	r3, r1
 8018b24:	d120      	bne.n	8018b68 <_dtoa_r+0xad0>
 8018b26:	2a00      	cmp	r2, #0
 8018b28:	dded      	ble.n	8018b06 <_dtoa_r+0xa6e>
 8018b2a:	4651      	mov	r1, sl
 8018b2c:	2201      	movs	r2, #1
 8018b2e:	4620      	mov	r0, r4
 8018b30:	f000 feb4 	bl	801989c <__lshift>
 8018b34:	4631      	mov	r1, r6
 8018b36:	4682      	mov	sl, r0
 8018b38:	f000 ff1c 	bl	8019974 <__mcmp>
 8018b3c:	2800      	cmp	r0, #0
 8018b3e:	dc03      	bgt.n	8018b48 <_dtoa_r+0xab0>
 8018b40:	d1e1      	bne.n	8018b06 <_dtoa_r+0xa6e>
 8018b42:	f019 0f01 	tst.w	r9, #1
 8018b46:	d0de      	beq.n	8018b06 <_dtoa_r+0xa6e>
 8018b48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018b4c:	d1d8      	bne.n	8018b00 <_dtoa_r+0xa68>
 8018b4e:	9a01      	ldr	r2, [sp, #4]
 8018b50:	2339      	movs	r3, #57	; 0x39
 8018b52:	7013      	strb	r3, [r2, #0]
 8018b54:	462b      	mov	r3, r5
 8018b56:	461d      	mov	r5, r3
 8018b58:	3b01      	subs	r3, #1
 8018b5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018b5e:	2a39      	cmp	r2, #57	; 0x39
 8018b60:	d06c      	beq.n	8018c3c <_dtoa_r+0xba4>
 8018b62:	3201      	adds	r2, #1
 8018b64:	701a      	strb	r2, [r3, #0]
 8018b66:	e747      	b.n	80189f8 <_dtoa_r+0x960>
 8018b68:	2a00      	cmp	r2, #0
 8018b6a:	dd07      	ble.n	8018b7c <_dtoa_r+0xae4>
 8018b6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018b70:	d0ed      	beq.n	8018b4e <_dtoa_r+0xab6>
 8018b72:	9a01      	ldr	r2, [sp, #4]
 8018b74:	f109 0301 	add.w	r3, r9, #1
 8018b78:	7013      	strb	r3, [r2, #0]
 8018b7a:	e73d      	b.n	80189f8 <_dtoa_r+0x960>
 8018b7c:	9b04      	ldr	r3, [sp, #16]
 8018b7e:	9a08      	ldr	r2, [sp, #32]
 8018b80:	f803 9c01 	strb.w	r9, [r3, #-1]
 8018b84:	4293      	cmp	r3, r2
 8018b86:	d043      	beq.n	8018c10 <_dtoa_r+0xb78>
 8018b88:	4651      	mov	r1, sl
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	220a      	movs	r2, #10
 8018b8e:	4620      	mov	r0, r4
 8018b90:	f000 fc8c 	bl	80194ac <__multadd>
 8018b94:	45b8      	cmp	r8, r7
 8018b96:	4682      	mov	sl, r0
 8018b98:	f04f 0300 	mov.w	r3, #0
 8018b9c:	f04f 020a 	mov.w	r2, #10
 8018ba0:	4641      	mov	r1, r8
 8018ba2:	4620      	mov	r0, r4
 8018ba4:	d107      	bne.n	8018bb6 <_dtoa_r+0xb1e>
 8018ba6:	f000 fc81 	bl	80194ac <__multadd>
 8018baa:	4680      	mov	r8, r0
 8018bac:	4607      	mov	r7, r0
 8018bae:	9b04      	ldr	r3, [sp, #16]
 8018bb0:	3301      	adds	r3, #1
 8018bb2:	9304      	str	r3, [sp, #16]
 8018bb4:	e775      	b.n	8018aa2 <_dtoa_r+0xa0a>
 8018bb6:	f000 fc79 	bl	80194ac <__multadd>
 8018bba:	4639      	mov	r1, r7
 8018bbc:	4680      	mov	r8, r0
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	220a      	movs	r2, #10
 8018bc2:	4620      	mov	r0, r4
 8018bc4:	f000 fc72 	bl	80194ac <__multadd>
 8018bc8:	4607      	mov	r7, r0
 8018bca:	e7f0      	b.n	8018bae <_dtoa_r+0xb16>
 8018bcc:	9b04      	ldr	r3, [sp, #16]
 8018bce:	9301      	str	r3, [sp, #4]
 8018bd0:	9d00      	ldr	r5, [sp, #0]
 8018bd2:	4631      	mov	r1, r6
 8018bd4:	4650      	mov	r0, sl
 8018bd6:	f7ff f9d7 	bl	8017f88 <quorem>
 8018bda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018bde:	9b00      	ldr	r3, [sp, #0]
 8018be0:	f805 9b01 	strb.w	r9, [r5], #1
 8018be4:	1aea      	subs	r2, r5, r3
 8018be6:	9b01      	ldr	r3, [sp, #4]
 8018be8:	4293      	cmp	r3, r2
 8018bea:	dd07      	ble.n	8018bfc <_dtoa_r+0xb64>
 8018bec:	4651      	mov	r1, sl
 8018bee:	2300      	movs	r3, #0
 8018bf0:	220a      	movs	r2, #10
 8018bf2:	4620      	mov	r0, r4
 8018bf4:	f000 fc5a 	bl	80194ac <__multadd>
 8018bf8:	4682      	mov	sl, r0
 8018bfa:	e7ea      	b.n	8018bd2 <_dtoa_r+0xb3a>
 8018bfc:	9b01      	ldr	r3, [sp, #4]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	bfc8      	it	gt
 8018c02:	461d      	movgt	r5, r3
 8018c04:	9b00      	ldr	r3, [sp, #0]
 8018c06:	bfd8      	it	le
 8018c08:	2501      	movle	r5, #1
 8018c0a:	441d      	add	r5, r3
 8018c0c:	f04f 0800 	mov.w	r8, #0
 8018c10:	4651      	mov	r1, sl
 8018c12:	2201      	movs	r2, #1
 8018c14:	4620      	mov	r0, r4
 8018c16:	f000 fe41 	bl	801989c <__lshift>
 8018c1a:	4631      	mov	r1, r6
 8018c1c:	4682      	mov	sl, r0
 8018c1e:	f000 fea9 	bl	8019974 <__mcmp>
 8018c22:	2800      	cmp	r0, #0
 8018c24:	dc96      	bgt.n	8018b54 <_dtoa_r+0xabc>
 8018c26:	d102      	bne.n	8018c2e <_dtoa_r+0xb96>
 8018c28:	f019 0f01 	tst.w	r9, #1
 8018c2c:	d192      	bne.n	8018b54 <_dtoa_r+0xabc>
 8018c2e:	462b      	mov	r3, r5
 8018c30:	461d      	mov	r5, r3
 8018c32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018c36:	2a30      	cmp	r2, #48	; 0x30
 8018c38:	d0fa      	beq.n	8018c30 <_dtoa_r+0xb98>
 8018c3a:	e6dd      	b.n	80189f8 <_dtoa_r+0x960>
 8018c3c:	9a00      	ldr	r2, [sp, #0]
 8018c3e:	429a      	cmp	r2, r3
 8018c40:	d189      	bne.n	8018b56 <_dtoa_r+0xabe>
 8018c42:	f10b 0b01 	add.w	fp, fp, #1
 8018c46:	2331      	movs	r3, #49	; 0x31
 8018c48:	e796      	b.n	8018b78 <_dtoa_r+0xae0>
 8018c4a:	4b0a      	ldr	r3, [pc, #40]	; (8018c74 <_dtoa_r+0xbdc>)
 8018c4c:	f7ff ba99 	b.w	8018182 <_dtoa_r+0xea>
 8018c50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	f47f aa6d 	bne.w	8018132 <_dtoa_r+0x9a>
 8018c58:	4b07      	ldr	r3, [pc, #28]	; (8018c78 <_dtoa_r+0xbe0>)
 8018c5a:	f7ff ba92 	b.w	8018182 <_dtoa_r+0xea>
 8018c5e:	9b01      	ldr	r3, [sp, #4]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	dcb5      	bgt.n	8018bd0 <_dtoa_r+0xb38>
 8018c64:	9b07      	ldr	r3, [sp, #28]
 8018c66:	2b02      	cmp	r3, #2
 8018c68:	f73f aeb1 	bgt.w	80189ce <_dtoa_r+0x936>
 8018c6c:	e7b0      	b.n	8018bd0 <_dtoa_r+0xb38>
 8018c6e:	bf00      	nop
 8018c70:	0801bb8f 	.word	0x0801bb8f
 8018c74:	0801bd83 	.word	0x0801bd83
 8018c78:	0801bb13 	.word	0x0801bb13

08018c7c <_free_r>:
 8018c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c7e:	2900      	cmp	r1, #0
 8018c80:	d044      	beq.n	8018d0c <_free_r+0x90>
 8018c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c86:	9001      	str	r0, [sp, #4]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8018c8e:	bfb8      	it	lt
 8018c90:	18e4      	addlt	r4, r4, r3
 8018c92:	f7fd fb99 	bl	80163c8 <__malloc_lock>
 8018c96:	4a1e      	ldr	r2, [pc, #120]	; (8018d10 <_free_r+0x94>)
 8018c98:	9801      	ldr	r0, [sp, #4]
 8018c9a:	6813      	ldr	r3, [r2, #0]
 8018c9c:	b933      	cbnz	r3, 8018cac <_free_r+0x30>
 8018c9e:	6063      	str	r3, [r4, #4]
 8018ca0:	6014      	str	r4, [r2, #0]
 8018ca2:	b003      	add	sp, #12
 8018ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ca8:	f7fd bb94 	b.w	80163d4 <__malloc_unlock>
 8018cac:	42a3      	cmp	r3, r4
 8018cae:	d908      	bls.n	8018cc2 <_free_r+0x46>
 8018cb0:	6825      	ldr	r5, [r4, #0]
 8018cb2:	1961      	adds	r1, r4, r5
 8018cb4:	428b      	cmp	r3, r1
 8018cb6:	bf01      	itttt	eq
 8018cb8:	6819      	ldreq	r1, [r3, #0]
 8018cba:	685b      	ldreq	r3, [r3, #4]
 8018cbc:	1949      	addeq	r1, r1, r5
 8018cbe:	6021      	streq	r1, [r4, #0]
 8018cc0:	e7ed      	b.n	8018c9e <_free_r+0x22>
 8018cc2:	461a      	mov	r2, r3
 8018cc4:	685b      	ldr	r3, [r3, #4]
 8018cc6:	b10b      	cbz	r3, 8018ccc <_free_r+0x50>
 8018cc8:	42a3      	cmp	r3, r4
 8018cca:	d9fa      	bls.n	8018cc2 <_free_r+0x46>
 8018ccc:	6811      	ldr	r1, [r2, #0]
 8018cce:	1855      	adds	r5, r2, r1
 8018cd0:	42a5      	cmp	r5, r4
 8018cd2:	d10b      	bne.n	8018cec <_free_r+0x70>
 8018cd4:	6824      	ldr	r4, [r4, #0]
 8018cd6:	4421      	add	r1, r4
 8018cd8:	1854      	adds	r4, r2, r1
 8018cda:	42a3      	cmp	r3, r4
 8018cdc:	6011      	str	r1, [r2, #0]
 8018cde:	d1e0      	bne.n	8018ca2 <_free_r+0x26>
 8018ce0:	681c      	ldr	r4, [r3, #0]
 8018ce2:	685b      	ldr	r3, [r3, #4]
 8018ce4:	6053      	str	r3, [r2, #4]
 8018ce6:	440c      	add	r4, r1
 8018ce8:	6014      	str	r4, [r2, #0]
 8018cea:	e7da      	b.n	8018ca2 <_free_r+0x26>
 8018cec:	d902      	bls.n	8018cf4 <_free_r+0x78>
 8018cee:	230c      	movs	r3, #12
 8018cf0:	6003      	str	r3, [r0, #0]
 8018cf2:	e7d6      	b.n	8018ca2 <_free_r+0x26>
 8018cf4:	6825      	ldr	r5, [r4, #0]
 8018cf6:	1961      	adds	r1, r4, r5
 8018cf8:	428b      	cmp	r3, r1
 8018cfa:	bf04      	itt	eq
 8018cfc:	6819      	ldreq	r1, [r3, #0]
 8018cfe:	685b      	ldreq	r3, [r3, #4]
 8018d00:	6063      	str	r3, [r4, #4]
 8018d02:	bf04      	itt	eq
 8018d04:	1949      	addeq	r1, r1, r5
 8018d06:	6021      	streq	r1, [r4, #0]
 8018d08:	6054      	str	r4, [r2, #4]
 8018d0a:	e7ca      	b.n	8018ca2 <_free_r+0x26>
 8018d0c:	b003      	add	sp, #12
 8018d0e:	bd30      	pop	{r4, r5, pc}
 8018d10:	2000332c 	.word	0x2000332c

08018d14 <rshift>:
 8018d14:	6903      	ldr	r3, [r0, #16]
 8018d16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018d1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018d22:	f100 0414 	add.w	r4, r0, #20
 8018d26:	dd45      	ble.n	8018db4 <rshift+0xa0>
 8018d28:	f011 011f 	ands.w	r1, r1, #31
 8018d2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018d30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018d34:	d10c      	bne.n	8018d50 <rshift+0x3c>
 8018d36:	f100 0710 	add.w	r7, r0, #16
 8018d3a:	4629      	mov	r1, r5
 8018d3c:	42b1      	cmp	r1, r6
 8018d3e:	d334      	bcc.n	8018daa <rshift+0x96>
 8018d40:	1a9b      	subs	r3, r3, r2
 8018d42:	009b      	lsls	r3, r3, #2
 8018d44:	1eea      	subs	r2, r5, #3
 8018d46:	4296      	cmp	r6, r2
 8018d48:	bf38      	it	cc
 8018d4a:	2300      	movcc	r3, #0
 8018d4c:	4423      	add	r3, r4
 8018d4e:	e015      	b.n	8018d7c <rshift+0x68>
 8018d50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018d54:	f1c1 0820 	rsb	r8, r1, #32
 8018d58:	40cf      	lsrs	r7, r1
 8018d5a:	f105 0e04 	add.w	lr, r5, #4
 8018d5e:	46a1      	mov	r9, r4
 8018d60:	4576      	cmp	r6, lr
 8018d62:	46f4      	mov	ip, lr
 8018d64:	d815      	bhi.n	8018d92 <rshift+0x7e>
 8018d66:	1a9a      	subs	r2, r3, r2
 8018d68:	0092      	lsls	r2, r2, #2
 8018d6a:	3a04      	subs	r2, #4
 8018d6c:	3501      	adds	r5, #1
 8018d6e:	42ae      	cmp	r6, r5
 8018d70:	bf38      	it	cc
 8018d72:	2200      	movcc	r2, #0
 8018d74:	18a3      	adds	r3, r4, r2
 8018d76:	50a7      	str	r7, [r4, r2]
 8018d78:	b107      	cbz	r7, 8018d7c <rshift+0x68>
 8018d7a:	3304      	adds	r3, #4
 8018d7c:	1b1a      	subs	r2, r3, r4
 8018d7e:	42a3      	cmp	r3, r4
 8018d80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018d84:	bf08      	it	eq
 8018d86:	2300      	moveq	r3, #0
 8018d88:	6102      	str	r2, [r0, #16]
 8018d8a:	bf08      	it	eq
 8018d8c:	6143      	streq	r3, [r0, #20]
 8018d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d92:	f8dc c000 	ldr.w	ip, [ip]
 8018d96:	fa0c fc08 	lsl.w	ip, ip, r8
 8018d9a:	ea4c 0707 	orr.w	r7, ip, r7
 8018d9e:	f849 7b04 	str.w	r7, [r9], #4
 8018da2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018da6:	40cf      	lsrs	r7, r1
 8018da8:	e7da      	b.n	8018d60 <rshift+0x4c>
 8018daa:	f851 cb04 	ldr.w	ip, [r1], #4
 8018dae:	f847 cf04 	str.w	ip, [r7, #4]!
 8018db2:	e7c3      	b.n	8018d3c <rshift+0x28>
 8018db4:	4623      	mov	r3, r4
 8018db6:	e7e1      	b.n	8018d7c <rshift+0x68>

08018db8 <__hexdig_fun>:
 8018db8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018dbc:	2b09      	cmp	r3, #9
 8018dbe:	d802      	bhi.n	8018dc6 <__hexdig_fun+0xe>
 8018dc0:	3820      	subs	r0, #32
 8018dc2:	b2c0      	uxtb	r0, r0
 8018dc4:	4770      	bx	lr
 8018dc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018dca:	2b05      	cmp	r3, #5
 8018dcc:	d801      	bhi.n	8018dd2 <__hexdig_fun+0x1a>
 8018dce:	3847      	subs	r0, #71	; 0x47
 8018dd0:	e7f7      	b.n	8018dc2 <__hexdig_fun+0xa>
 8018dd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018dd6:	2b05      	cmp	r3, #5
 8018dd8:	d801      	bhi.n	8018dde <__hexdig_fun+0x26>
 8018dda:	3827      	subs	r0, #39	; 0x27
 8018ddc:	e7f1      	b.n	8018dc2 <__hexdig_fun+0xa>
 8018dde:	2000      	movs	r0, #0
 8018de0:	4770      	bx	lr
	...

08018de4 <__gethex>:
 8018de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018de8:	4617      	mov	r7, r2
 8018dea:	680a      	ldr	r2, [r1, #0]
 8018dec:	b085      	sub	sp, #20
 8018dee:	f102 0b02 	add.w	fp, r2, #2
 8018df2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018df6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018dfa:	4681      	mov	r9, r0
 8018dfc:	468a      	mov	sl, r1
 8018dfe:	9302      	str	r3, [sp, #8]
 8018e00:	32fe      	adds	r2, #254	; 0xfe
 8018e02:	eb02 030b 	add.w	r3, r2, fp
 8018e06:	46d8      	mov	r8, fp
 8018e08:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018e0c:	9301      	str	r3, [sp, #4]
 8018e0e:	2830      	cmp	r0, #48	; 0x30
 8018e10:	d0f7      	beq.n	8018e02 <__gethex+0x1e>
 8018e12:	f7ff ffd1 	bl	8018db8 <__hexdig_fun>
 8018e16:	4604      	mov	r4, r0
 8018e18:	2800      	cmp	r0, #0
 8018e1a:	d138      	bne.n	8018e8e <__gethex+0xaa>
 8018e1c:	49a7      	ldr	r1, [pc, #668]	; (80190bc <__gethex+0x2d8>)
 8018e1e:	2201      	movs	r2, #1
 8018e20:	4640      	mov	r0, r8
 8018e22:	f7fe ffb4 	bl	8017d8e <strncmp>
 8018e26:	4606      	mov	r6, r0
 8018e28:	2800      	cmp	r0, #0
 8018e2a:	d169      	bne.n	8018f00 <__gethex+0x11c>
 8018e2c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018e30:	465d      	mov	r5, fp
 8018e32:	f7ff ffc1 	bl	8018db8 <__hexdig_fun>
 8018e36:	2800      	cmp	r0, #0
 8018e38:	d064      	beq.n	8018f04 <__gethex+0x120>
 8018e3a:	465a      	mov	r2, fp
 8018e3c:	7810      	ldrb	r0, [r2, #0]
 8018e3e:	2830      	cmp	r0, #48	; 0x30
 8018e40:	4690      	mov	r8, r2
 8018e42:	f102 0201 	add.w	r2, r2, #1
 8018e46:	d0f9      	beq.n	8018e3c <__gethex+0x58>
 8018e48:	f7ff ffb6 	bl	8018db8 <__hexdig_fun>
 8018e4c:	2301      	movs	r3, #1
 8018e4e:	fab0 f480 	clz	r4, r0
 8018e52:	0964      	lsrs	r4, r4, #5
 8018e54:	465e      	mov	r6, fp
 8018e56:	9301      	str	r3, [sp, #4]
 8018e58:	4642      	mov	r2, r8
 8018e5a:	4615      	mov	r5, r2
 8018e5c:	3201      	adds	r2, #1
 8018e5e:	7828      	ldrb	r0, [r5, #0]
 8018e60:	f7ff ffaa 	bl	8018db8 <__hexdig_fun>
 8018e64:	2800      	cmp	r0, #0
 8018e66:	d1f8      	bne.n	8018e5a <__gethex+0x76>
 8018e68:	4994      	ldr	r1, [pc, #592]	; (80190bc <__gethex+0x2d8>)
 8018e6a:	2201      	movs	r2, #1
 8018e6c:	4628      	mov	r0, r5
 8018e6e:	f7fe ff8e 	bl	8017d8e <strncmp>
 8018e72:	b978      	cbnz	r0, 8018e94 <__gethex+0xb0>
 8018e74:	b946      	cbnz	r6, 8018e88 <__gethex+0xa4>
 8018e76:	1c6e      	adds	r6, r5, #1
 8018e78:	4632      	mov	r2, r6
 8018e7a:	4615      	mov	r5, r2
 8018e7c:	3201      	adds	r2, #1
 8018e7e:	7828      	ldrb	r0, [r5, #0]
 8018e80:	f7ff ff9a 	bl	8018db8 <__hexdig_fun>
 8018e84:	2800      	cmp	r0, #0
 8018e86:	d1f8      	bne.n	8018e7a <__gethex+0x96>
 8018e88:	1b73      	subs	r3, r6, r5
 8018e8a:	009e      	lsls	r6, r3, #2
 8018e8c:	e004      	b.n	8018e98 <__gethex+0xb4>
 8018e8e:	2400      	movs	r4, #0
 8018e90:	4626      	mov	r6, r4
 8018e92:	e7e1      	b.n	8018e58 <__gethex+0x74>
 8018e94:	2e00      	cmp	r6, #0
 8018e96:	d1f7      	bne.n	8018e88 <__gethex+0xa4>
 8018e98:	782b      	ldrb	r3, [r5, #0]
 8018e9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018e9e:	2b50      	cmp	r3, #80	; 0x50
 8018ea0:	d13d      	bne.n	8018f1e <__gethex+0x13a>
 8018ea2:	786b      	ldrb	r3, [r5, #1]
 8018ea4:	2b2b      	cmp	r3, #43	; 0x2b
 8018ea6:	d02f      	beq.n	8018f08 <__gethex+0x124>
 8018ea8:	2b2d      	cmp	r3, #45	; 0x2d
 8018eaa:	d031      	beq.n	8018f10 <__gethex+0x12c>
 8018eac:	1c69      	adds	r1, r5, #1
 8018eae:	f04f 0b00 	mov.w	fp, #0
 8018eb2:	7808      	ldrb	r0, [r1, #0]
 8018eb4:	f7ff ff80 	bl	8018db8 <__hexdig_fun>
 8018eb8:	1e42      	subs	r2, r0, #1
 8018eba:	b2d2      	uxtb	r2, r2
 8018ebc:	2a18      	cmp	r2, #24
 8018ebe:	d82e      	bhi.n	8018f1e <__gethex+0x13a>
 8018ec0:	f1a0 0210 	sub.w	r2, r0, #16
 8018ec4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018ec8:	f7ff ff76 	bl	8018db8 <__hexdig_fun>
 8018ecc:	f100 3cff 	add.w	ip, r0, #4294967295
 8018ed0:	fa5f fc8c 	uxtb.w	ip, ip
 8018ed4:	f1bc 0f18 	cmp.w	ip, #24
 8018ed8:	d91d      	bls.n	8018f16 <__gethex+0x132>
 8018eda:	f1bb 0f00 	cmp.w	fp, #0
 8018ede:	d000      	beq.n	8018ee2 <__gethex+0xfe>
 8018ee0:	4252      	negs	r2, r2
 8018ee2:	4416      	add	r6, r2
 8018ee4:	f8ca 1000 	str.w	r1, [sl]
 8018ee8:	b1dc      	cbz	r4, 8018f22 <__gethex+0x13e>
 8018eea:	9b01      	ldr	r3, [sp, #4]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	bf14      	ite	ne
 8018ef0:	f04f 0800 	movne.w	r8, #0
 8018ef4:	f04f 0806 	moveq.w	r8, #6
 8018ef8:	4640      	mov	r0, r8
 8018efa:	b005      	add	sp, #20
 8018efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f00:	4645      	mov	r5, r8
 8018f02:	4626      	mov	r6, r4
 8018f04:	2401      	movs	r4, #1
 8018f06:	e7c7      	b.n	8018e98 <__gethex+0xb4>
 8018f08:	f04f 0b00 	mov.w	fp, #0
 8018f0c:	1ca9      	adds	r1, r5, #2
 8018f0e:	e7d0      	b.n	8018eb2 <__gethex+0xce>
 8018f10:	f04f 0b01 	mov.w	fp, #1
 8018f14:	e7fa      	b.n	8018f0c <__gethex+0x128>
 8018f16:	230a      	movs	r3, #10
 8018f18:	fb03 0002 	mla	r0, r3, r2, r0
 8018f1c:	e7d0      	b.n	8018ec0 <__gethex+0xdc>
 8018f1e:	4629      	mov	r1, r5
 8018f20:	e7e0      	b.n	8018ee4 <__gethex+0x100>
 8018f22:	eba5 0308 	sub.w	r3, r5, r8
 8018f26:	3b01      	subs	r3, #1
 8018f28:	4621      	mov	r1, r4
 8018f2a:	2b07      	cmp	r3, #7
 8018f2c:	dc0a      	bgt.n	8018f44 <__gethex+0x160>
 8018f2e:	4648      	mov	r0, r9
 8018f30:	f000 fa5a 	bl	80193e8 <_Balloc>
 8018f34:	4604      	mov	r4, r0
 8018f36:	b940      	cbnz	r0, 8018f4a <__gethex+0x166>
 8018f38:	4b61      	ldr	r3, [pc, #388]	; (80190c0 <__gethex+0x2dc>)
 8018f3a:	4602      	mov	r2, r0
 8018f3c:	21e4      	movs	r1, #228	; 0xe4
 8018f3e:	4861      	ldr	r0, [pc, #388]	; (80190c4 <__gethex+0x2e0>)
 8018f40:	f001 fe86 	bl	801ac50 <__assert_func>
 8018f44:	3101      	adds	r1, #1
 8018f46:	105b      	asrs	r3, r3, #1
 8018f48:	e7ef      	b.n	8018f2a <__gethex+0x146>
 8018f4a:	f100 0a14 	add.w	sl, r0, #20
 8018f4e:	2300      	movs	r3, #0
 8018f50:	495a      	ldr	r1, [pc, #360]	; (80190bc <__gethex+0x2d8>)
 8018f52:	f8cd a004 	str.w	sl, [sp, #4]
 8018f56:	469b      	mov	fp, r3
 8018f58:	45a8      	cmp	r8, r5
 8018f5a:	d342      	bcc.n	8018fe2 <__gethex+0x1fe>
 8018f5c:	9801      	ldr	r0, [sp, #4]
 8018f5e:	f840 bb04 	str.w	fp, [r0], #4
 8018f62:	eba0 000a 	sub.w	r0, r0, sl
 8018f66:	1080      	asrs	r0, r0, #2
 8018f68:	6120      	str	r0, [r4, #16]
 8018f6a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8018f6e:	4658      	mov	r0, fp
 8018f70:	f000 fb2c 	bl	80195cc <__hi0bits>
 8018f74:	683d      	ldr	r5, [r7, #0]
 8018f76:	eba8 0000 	sub.w	r0, r8, r0
 8018f7a:	42a8      	cmp	r0, r5
 8018f7c:	dd59      	ble.n	8019032 <__gethex+0x24e>
 8018f7e:	eba0 0805 	sub.w	r8, r0, r5
 8018f82:	4641      	mov	r1, r8
 8018f84:	4620      	mov	r0, r4
 8018f86:	f000 febb 	bl	8019d00 <__any_on>
 8018f8a:	4683      	mov	fp, r0
 8018f8c:	b1b8      	cbz	r0, 8018fbe <__gethex+0x1da>
 8018f8e:	f108 33ff 	add.w	r3, r8, #4294967295
 8018f92:	1159      	asrs	r1, r3, #5
 8018f94:	f003 021f 	and.w	r2, r3, #31
 8018f98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018f9c:	f04f 0b01 	mov.w	fp, #1
 8018fa0:	fa0b f202 	lsl.w	r2, fp, r2
 8018fa4:	420a      	tst	r2, r1
 8018fa6:	d00a      	beq.n	8018fbe <__gethex+0x1da>
 8018fa8:	455b      	cmp	r3, fp
 8018faa:	dd06      	ble.n	8018fba <__gethex+0x1d6>
 8018fac:	f1a8 0102 	sub.w	r1, r8, #2
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	f000 fea5 	bl	8019d00 <__any_on>
 8018fb6:	2800      	cmp	r0, #0
 8018fb8:	d138      	bne.n	801902c <__gethex+0x248>
 8018fba:	f04f 0b02 	mov.w	fp, #2
 8018fbe:	4641      	mov	r1, r8
 8018fc0:	4620      	mov	r0, r4
 8018fc2:	f7ff fea7 	bl	8018d14 <rshift>
 8018fc6:	4446      	add	r6, r8
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	42b3      	cmp	r3, r6
 8018fcc:	da41      	bge.n	8019052 <__gethex+0x26e>
 8018fce:	4621      	mov	r1, r4
 8018fd0:	4648      	mov	r0, r9
 8018fd2:	f000 fa49 	bl	8019468 <_Bfree>
 8018fd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018fd8:	2300      	movs	r3, #0
 8018fda:	6013      	str	r3, [r2, #0]
 8018fdc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018fe0:	e78a      	b.n	8018ef8 <__gethex+0x114>
 8018fe2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8018fe6:	2a2e      	cmp	r2, #46	; 0x2e
 8018fe8:	d014      	beq.n	8019014 <__gethex+0x230>
 8018fea:	2b20      	cmp	r3, #32
 8018fec:	d106      	bne.n	8018ffc <__gethex+0x218>
 8018fee:	9b01      	ldr	r3, [sp, #4]
 8018ff0:	f843 bb04 	str.w	fp, [r3], #4
 8018ff4:	f04f 0b00 	mov.w	fp, #0
 8018ff8:	9301      	str	r3, [sp, #4]
 8018ffa:	465b      	mov	r3, fp
 8018ffc:	7828      	ldrb	r0, [r5, #0]
 8018ffe:	9303      	str	r3, [sp, #12]
 8019000:	f7ff feda 	bl	8018db8 <__hexdig_fun>
 8019004:	9b03      	ldr	r3, [sp, #12]
 8019006:	f000 000f 	and.w	r0, r0, #15
 801900a:	4098      	lsls	r0, r3
 801900c:	ea4b 0b00 	orr.w	fp, fp, r0
 8019010:	3304      	adds	r3, #4
 8019012:	e7a1      	b.n	8018f58 <__gethex+0x174>
 8019014:	45a8      	cmp	r8, r5
 8019016:	d8e8      	bhi.n	8018fea <__gethex+0x206>
 8019018:	2201      	movs	r2, #1
 801901a:	4628      	mov	r0, r5
 801901c:	9303      	str	r3, [sp, #12]
 801901e:	f7fe feb6 	bl	8017d8e <strncmp>
 8019022:	4926      	ldr	r1, [pc, #152]	; (80190bc <__gethex+0x2d8>)
 8019024:	9b03      	ldr	r3, [sp, #12]
 8019026:	2800      	cmp	r0, #0
 8019028:	d1df      	bne.n	8018fea <__gethex+0x206>
 801902a:	e795      	b.n	8018f58 <__gethex+0x174>
 801902c:	f04f 0b03 	mov.w	fp, #3
 8019030:	e7c5      	b.n	8018fbe <__gethex+0x1da>
 8019032:	da0b      	bge.n	801904c <__gethex+0x268>
 8019034:	eba5 0800 	sub.w	r8, r5, r0
 8019038:	4621      	mov	r1, r4
 801903a:	4642      	mov	r2, r8
 801903c:	4648      	mov	r0, r9
 801903e:	f000 fc2d 	bl	801989c <__lshift>
 8019042:	eba6 0608 	sub.w	r6, r6, r8
 8019046:	4604      	mov	r4, r0
 8019048:	f100 0a14 	add.w	sl, r0, #20
 801904c:	f04f 0b00 	mov.w	fp, #0
 8019050:	e7ba      	b.n	8018fc8 <__gethex+0x1e4>
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	42b3      	cmp	r3, r6
 8019056:	dd73      	ble.n	8019140 <__gethex+0x35c>
 8019058:	1b9e      	subs	r6, r3, r6
 801905a:	42b5      	cmp	r5, r6
 801905c:	dc34      	bgt.n	80190c8 <__gethex+0x2e4>
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	2b02      	cmp	r3, #2
 8019062:	d023      	beq.n	80190ac <__gethex+0x2c8>
 8019064:	2b03      	cmp	r3, #3
 8019066:	d025      	beq.n	80190b4 <__gethex+0x2d0>
 8019068:	2b01      	cmp	r3, #1
 801906a:	d115      	bne.n	8019098 <__gethex+0x2b4>
 801906c:	42b5      	cmp	r5, r6
 801906e:	d113      	bne.n	8019098 <__gethex+0x2b4>
 8019070:	2d01      	cmp	r5, #1
 8019072:	d10b      	bne.n	801908c <__gethex+0x2a8>
 8019074:	9a02      	ldr	r2, [sp, #8]
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	6013      	str	r3, [r2, #0]
 801907a:	2301      	movs	r3, #1
 801907c:	6123      	str	r3, [r4, #16]
 801907e:	f8ca 3000 	str.w	r3, [sl]
 8019082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019084:	f04f 0862 	mov.w	r8, #98	; 0x62
 8019088:	601c      	str	r4, [r3, #0]
 801908a:	e735      	b.n	8018ef8 <__gethex+0x114>
 801908c:	1e69      	subs	r1, r5, #1
 801908e:	4620      	mov	r0, r4
 8019090:	f000 fe36 	bl	8019d00 <__any_on>
 8019094:	2800      	cmp	r0, #0
 8019096:	d1ed      	bne.n	8019074 <__gethex+0x290>
 8019098:	4621      	mov	r1, r4
 801909a:	4648      	mov	r0, r9
 801909c:	f000 f9e4 	bl	8019468 <_Bfree>
 80190a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80190a2:	2300      	movs	r3, #0
 80190a4:	6013      	str	r3, [r2, #0]
 80190a6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80190aa:	e725      	b.n	8018ef8 <__gethex+0x114>
 80190ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d1f2      	bne.n	8019098 <__gethex+0x2b4>
 80190b2:	e7df      	b.n	8019074 <__gethex+0x290>
 80190b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d1dc      	bne.n	8019074 <__gethex+0x290>
 80190ba:	e7ed      	b.n	8019098 <__gethex+0x2b4>
 80190bc:	0801b980 	.word	0x0801b980
 80190c0:	0801bb8f 	.word	0x0801bb8f
 80190c4:	0801bba0 	.word	0x0801bba0
 80190c8:	f106 38ff 	add.w	r8, r6, #4294967295
 80190cc:	f1bb 0f00 	cmp.w	fp, #0
 80190d0:	d133      	bne.n	801913a <__gethex+0x356>
 80190d2:	f1b8 0f00 	cmp.w	r8, #0
 80190d6:	d004      	beq.n	80190e2 <__gethex+0x2fe>
 80190d8:	4641      	mov	r1, r8
 80190da:	4620      	mov	r0, r4
 80190dc:	f000 fe10 	bl	8019d00 <__any_on>
 80190e0:	4683      	mov	fp, r0
 80190e2:	ea4f 1268 	mov.w	r2, r8, asr #5
 80190e6:	2301      	movs	r3, #1
 80190e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80190ec:	f008 081f 	and.w	r8, r8, #31
 80190f0:	fa03 f308 	lsl.w	r3, r3, r8
 80190f4:	4213      	tst	r3, r2
 80190f6:	4631      	mov	r1, r6
 80190f8:	4620      	mov	r0, r4
 80190fa:	bf18      	it	ne
 80190fc:	f04b 0b02 	orrne.w	fp, fp, #2
 8019100:	1bad      	subs	r5, r5, r6
 8019102:	f7ff fe07 	bl	8018d14 <rshift>
 8019106:	687e      	ldr	r6, [r7, #4]
 8019108:	f04f 0802 	mov.w	r8, #2
 801910c:	f1bb 0f00 	cmp.w	fp, #0
 8019110:	d04a      	beq.n	80191a8 <__gethex+0x3c4>
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	2b02      	cmp	r3, #2
 8019116:	d016      	beq.n	8019146 <__gethex+0x362>
 8019118:	2b03      	cmp	r3, #3
 801911a:	d018      	beq.n	801914e <__gethex+0x36a>
 801911c:	2b01      	cmp	r3, #1
 801911e:	d109      	bne.n	8019134 <__gethex+0x350>
 8019120:	f01b 0f02 	tst.w	fp, #2
 8019124:	d006      	beq.n	8019134 <__gethex+0x350>
 8019126:	f8da 3000 	ldr.w	r3, [sl]
 801912a:	ea4b 0b03 	orr.w	fp, fp, r3
 801912e:	f01b 0f01 	tst.w	fp, #1
 8019132:	d10f      	bne.n	8019154 <__gethex+0x370>
 8019134:	f048 0810 	orr.w	r8, r8, #16
 8019138:	e036      	b.n	80191a8 <__gethex+0x3c4>
 801913a:	f04f 0b01 	mov.w	fp, #1
 801913e:	e7d0      	b.n	80190e2 <__gethex+0x2fe>
 8019140:	f04f 0801 	mov.w	r8, #1
 8019144:	e7e2      	b.n	801910c <__gethex+0x328>
 8019146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019148:	f1c3 0301 	rsb	r3, r3, #1
 801914c:	930f      	str	r3, [sp, #60]	; 0x3c
 801914e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019150:	2b00      	cmp	r3, #0
 8019152:	d0ef      	beq.n	8019134 <__gethex+0x350>
 8019154:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019158:	f104 0214 	add.w	r2, r4, #20
 801915c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8019160:	9301      	str	r3, [sp, #4]
 8019162:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8019166:	2300      	movs	r3, #0
 8019168:	4694      	mov	ip, r2
 801916a:	f852 1b04 	ldr.w	r1, [r2], #4
 801916e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8019172:	d01e      	beq.n	80191b2 <__gethex+0x3ce>
 8019174:	3101      	adds	r1, #1
 8019176:	f8cc 1000 	str.w	r1, [ip]
 801917a:	f1b8 0f02 	cmp.w	r8, #2
 801917e:	f104 0214 	add.w	r2, r4, #20
 8019182:	d13d      	bne.n	8019200 <__gethex+0x41c>
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	3b01      	subs	r3, #1
 8019188:	42ab      	cmp	r3, r5
 801918a:	d10b      	bne.n	80191a4 <__gethex+0x3c0>
 801918c:	1169      	asrs	r1, r5, #5
 801918e:	2301      	movs	r3, #1
 8019190:	f005 051f 	and.w	r5, r5, #31
 8019194:	fa03 f505 	lsl.w	r5, r3, r5
 8019198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801919c:	421d      	tst	r5, r3
 801919e:	bf18      	it	ne
 80191a0:	f04f 0801 	movne.w	r8, #1
 80191a4:	f048 0820 	orr.w	r8, r8, #32
 80191a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191aa:	601c      	str	r4, [r3, #0]
 80191ac:	9b02      	ldr	r3, [sp, #8]
 80191ae:	601e      	str	r6, [r3, #0]
 80191b0:	e6a2      	b.n	8018ef8 <__gethex+0x114>
 80191b2:	4290      	cmp	r0, r2
 80191b4:	f842 3c04 	str.w	r3, [r2, #-4]
 80191b8:	d8d6      	bhi.n	8019168 <__gethex+0x384>
 80191ba:	68a2      	ldr	r2, [r4, #8]
 80191bc:	4593      	cmp	fp, r2
 80191be:	db17      	blt.n	80191f0 <__gethex+0x40c>
 80191c0:	6861      	ldr	r1, [r4, #4]
 80191c2:	4648      	mov	r0, r9
 80191c4:	3101      	adds	r1, #1
 80191c6:	f000 f90f 	bl	80193e8 <_Balloc>
 80191ca:	4682      	mov	sl, r0
 80191cc:	b918      	cbnz	r0, 80191d6 <__gethex+0x3f2>
 80191ce:	4b1b      	ldr	r3, [pc, #108]	; (801923c <__gethex+0x458>)
 80191d0:	4602      	mov	r2, r0
 80191d2:	2184      	movs	r1, #132	; 0x84
 80191d4:	e6b3      	b.n	8018f3e <__gethex+0x15a>
 80191d6:	6922      	ldr	r2, [r4, #16]
 80191d8:	3202      	adds	r2, #2
 80191da:	f104 010c 	add.w	r1, r4, #12
 80191de:	0092      	lsls	r2, r2, #2
 80191e0:	300c      	adds	r0, #12
 80191e2:	f7fe feba 	bl	8017f5a <memcpy>
 80191e6:	4621      	mov	r1, r4
 80191e8:	4648      	mov	r0, r9
 80191ea:	f000 f93d 	bl	8019468 <_Bfree>
 80191ee:	4654      	mov	r4, sl
 80191f0:	6922      	ldr	r2, [r4, #16]
 80191f2:	1c51      	adds	r1, r2, #1
 80191f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80191f8:	6121      	str	r1, [r4, #16]
 80191fa:	2101      	movs	r1, #1
 80191fc:	6151      	str	r1, [r2, #20]
 80191fe:	e7bc      	b.n	801917a <__gethex+0x396>
 8019200:	6921      	ldr	r1, [r4, #16]
 8019202:	4559      	cmp	r1, fp
 8019204:	dd0b      	ble.n	801921e <__gethex+0x43a>
 8019206:	2101      	movs	r1, #1
 8019208:	4620      	mov	r0, r4
 801920a:	f7ff fd83 	bl	8018d14 <rshift>
 801920e:	68bb      	ldr	r3, [r7, #8]
 8019210:	3601      	adds	r6, #1
 8019212:	42b3      	cmp	r3, r6
 8019214:	f6ff aedb 	blt.w	8018fce <__gethex+0x1ea>
 8019218:	f04f 0801 	mov.w	r8, #1
 801921c:	e7c2      	b.n	80191a4 <__gethex+0x3c0>
 801921e:	f015 051f 	ands.w	r5, r5, #31
 8019222:	d0f9      	beq.n	8019218 <__gethex+0x434>
 8019224:	9b01      	ldr	r3, [sp, #4]
 8019226:	441a      	add	r2, r3
 8019228:	f1c5 0520 	rsb	r5, r5, #32
 801922c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8019230:	f000 f9cc 	bl	80195cc <__hi0bits>
 8019234:	42a8      	cmp	r0, r5
 8019236:	dbe6      	blt.n	8019206 <__gethex+0x422>
 8019238:	e7ee      	b.n	8019218 <__gethex+0x434>
 801923a:	bf00      	nop
 801923c:	0801bb8f 	.word	0x0801bb8f

08019240 <L_shift>:
 8019240:	f1c2 0208 	rsb	r2, r2, #8
 8019244:	0092      	lsls	r2, r2, #2
 8019246:	b570      	push	{r4, r5, r6, lr}
 8019248:	f1c2 0620 	rsb	r6, r2, #32
 801924c:	6843      	ldr	r3, [r0, #4]
 801924e:	6804      	ldr	r4, [r0, #0]
 8019250:	fa03 f506 	lsl.w	r5, r3, r6
 8019254:	432c      	orrs	r4, r5
 8019256:	40d3      	lsrs	r3, r2
 8019258:	6004      	str	r4, [r0, #0]
 801925a:	f840 3f04 	str.w	r3, [r0, #4]!
 801925e:	4288      	cmp	r0, r1
 8019260:	d3f4      	bcc.n	801924c <L_shift+0xc>
 8019262:	bd70      	pop	{r4, r5, r6, pc}

08019264 <__match>:
 8019264:	b530      	push	{r4, r5, lr}
 8019266:	6803      	ldr	r3, [r0, #0]
 8019268:	3301      	adds	r3, #1
 801926a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801926e:	b914      	cbnz	r4, 8019276 <__match+0x12>
 8019270:	6003      	str	r3, [r0, #0]
 8019272:	2001      	movs	r0, #1
 8019274:	bd30      	pop	{r4, r5, pc}
 8019276:	f813 2b01 	ldrb.w	r2, [r3], #1
 801927a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801927e:	2d19      	cmp	r5, #25
 8019280:	bf98      	it	ls
 8019282:	3220      	addls	r2, #32
 8019284:	42a2      	cmp	r2, r4
 8019286:	d0f0      	beq.n	801926a <__match+0x6>
 8019288:	2000      	movs	r0, #0
 801928a:	e7f3      	b.n	8019274 <__match+0x10>

0801928c <__hexnan>:
 801928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019290:	680b      	ldr	r3, [r1, #0]
 8019292:	6801      	ldr	r1, [r0, #0]
 8019294:	115e      	asrs	r6, r3, #5
 8019296:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801929a:	f013 031f 	ands.w	r3, r3, #31
 801929e:	b087      	sub	sp, #28
 80192a0:	bf18      	it	ne
 80192a2:	3604      	addne	r6, #4
 80192a4:	2500      	movs	r5, #0
 80192a6:	1f37      	subs	r7, r6, #4
 80192a8:	4682      	mov	sl, r0
 80192aa:	4690      	mov	r8, r2
 80192ac:	9301      	str	r3, [sp, #4]
 80192ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80192b2:	46b9      	mov	r9, r7
 80192b4:	463c      	mov	r4, r7
 80192b6:	9502      	str	r5, [sp, #8]
 80192b8:	46ab      	mov	fp, r5
 80192ba:	784a      	ldrb	r2, [r1, #1]
 80192bc:	1c4b      	adds	r3, r1, #1
 80192be:	9303      	str	r3, [sp, #12]
 80192c0:	b342      	cbz	r2, 8019314 <__hexnan+0x88>
 80192c2:	4610      	mov	r0, r2
 80192c4:	9105      	str	r1, [sp, #20]
 80192c6:	9204      	str	r2, [sp, #16]
 80192c8:	f7ff fd76 	bl	8018db8 <__hexdig_fun>
 80192cc:	2800      	cmp	r0, #0
 80192ce:	d14f      	bne.n	8019370 <__hexnan+0xe4>
 80192d0:	9a04      	ldr	r2, [sp, #16]
 80192d2:	9905      	ldr	r1, [sp, #20]
 80192d4:	2a20      	cmp	r2, #32
 80192d6:	d818      	bhi.n	801930a <__hexnan+0x7e>
 80192d8:	9b02      	ldr	r3, [sp, #8]
 80192da:	459b      	cmp	fp, r3
 80192dc:	dd13      	ble.n	8019306 <__hexnan+0x7a>
 80192de:	454c      	cmp	r4, r9
 80192e0:	d206      	bcs.n	80192f0 <__hexnan+0x64>
 80192e2:	2d07      	cmp	r5, #7
 80192e4:	dc04      	bgt.n	80192f0 <__hexnan+0x64>
 80192e6:	462a      	mov	r2, r5
 80192e8:	4649      	mov	r1, r9
 80192ea:	4620      	mov	r0, r4
 80192ec:	f7ff ffa8 	bl	8019240 <L_shift>
 80192f0:	4544      	cmp	r4, r8
 80192f2:	d950      	bls.n	8019396 <__hexnan+0x10a>
 80192f4:	2300      	movs	r3, #0
 80192f6:	f1a4 0904 	sub.w	r9, r4, #4
 80192fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80192fe:	f8cd b008 	str.w	fp, [sp, #8]
 8019302:	464c      	mov	r4, r9
 8019304:	461d      	mov	r5, r3
 8019306:	9903      	ldr	r1, [sp, #12]
 8019308:	e7d7      	b.n	80192ba <__hexnan+0x2e>
 801930a:	2a29      	cmp	r2, #41	; 0x29
 801930c:	d155      	bne.n	80193ba <__hexnan+0x12e>
 801930e:	3102      	adds	r1, #2
 8019310:	f8ca 1000 	str.w	r1, [sl]
 8019314:	f1bb 0f00 	cmp.w	fp, #0
 8019318:	d04f      	beq.n	80193ba <__hexnan+0x12e>
 801931a:	454c      	cmp	r4, r9
 801931c:	d206      	bcs.n	801932c <__hexnan+0xa0>
 801931e:	2d07      	cmp	r5, #7
 8019320:	dc04      	bgt.n	801932c <__hexnan+0xa0>
 8019322:	462a      	mov	r2, r5
 8019324:	4649      	mov	r1, r9
 8019326:	4620      	mov	r0, r4
 8019328:	f7ff ff8a 	bl	8019240 <L_shift>
 801932c:	4544      	cmp	r4, r8
 801932e:	d934      	bls.n	801939a <__hexnan+0x10e>
 8019330:	f1a8 0204 	sub.w	r2, r8, #4
 8019334:	4623      	mov	r3, r4
 8019336:	f853 1b04 	ldr.w	r1, [r3], #4
 801933a:	f842 1f04 	str.w	r1, [r2, #4]!
 801933e:	429f      	cmp	r7, r3
 8019340:	d2f9      	bcs.n	8019336 <__hexnan+0xaa>
 8019342:	1b3b      	subs	r3, r7, r4
 8019344:	f023 0303 	bic.w	r3, r3, #3
 8019348:	3304      	adds	r3, #4
 801934a:	3e03      	subs	r6, #3
 801934c:	3401      	adds	r4, #1
 801934e:	42a6      	cmp	r6, r4
 8019350:	bf38      	it	cc
 8019352:	2304      	movcc	r3, #4
 8019354:	4443      	add	r3, r8
 8019356:	2200      	movs	r2, #0
 8019358:	f843 2b04 	str.w	r2, [r3], #4
 801935c:	429f      	cmp	r7, r3
 801935e:	d2fb      	bcs.n	8019358 <__hexnan+0xcc>
 8019360:	683b      	ldr	r3, [r7, #0]
 8019362:	b91b      	cbnz	r3, 801936c <__hexnan+0xe0>
 8019364:	4547      	cmp	r7, r8
 8019366:	d126      	bne.n	80193b6 <__hexnan+0x12a>
 8019368:	2301      	movs	r3, #1
 801936a:	603b      	str	r3, [r7, #0]
 801936c:	2005      	movs	r0, #5
 801936e:	e025      	b.n	80193bc <__hexnan+0x130>
 8019370:	3501      	adds	r5, #1
 8019372:	2d08      	cmp	r5, #8
 8019374:	f10b 0b01 	add.w	fp, fp, #1
 8019378:	dd06      	ble.n	8019388 <__hexnan+0xfc>
 801937a:	4544      	cmp	r4, r8
 801937c:	d9c3      	bls.n	8019306 <__hexnan+0x7a>
 801937e:	2300      	movs	r3, #0
 8019380:	f844 3c04 	str.w	r3, [r4, #-4]
 8019384:	2501      	movs	r5, #1
 8019386:	3c04      	subs	r4, #4
 8019388:	6822      	ldr	r2, [r4, #0]
 801938a:	f000 000f 	and.w	r0, r0, #15
 801938e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019392:	6020      	str	r0, [r4, #0]
 8019394:	e7b7      	b.n	8019306 <__hexnan+0x7a>
 8019396:	2508      	movs	r5, #8
 8019398:	e7b5      	b.n	8019306 <__hexnan+0x7a>
 801939a:	9b01      	ldr	r3, [sp, #4]
 801939c:	2b00      	cmp	r3, #0
 801939e:	d0df      	beq.n	8019360 <__hexnan+0xd4>
 80193a0:	f1c3 0320 	rsb	r3, r3, #32
 80193a4:	f04f 32ff 	mov.w	r2, #4294967295
 80193a8:	40da      	lsrs	r2, r3
 80193aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80193ae:	4013      	ands	r3, r2
 80193b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80193b4:	e7d4      	b.n	8019360 <__hexnan+0xd4>
 80193b6:	3f04      	subs	r7, #4
 80193b8:	e7d2      	b.n	8019360 <__hexnan+0xd4>
 80193ba:	2004      	movs	r0, #4
 80193bc:	b007      	add	sp, #28
 80193be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080193c2 <__ascii_mbtowc>:
 80193c2:	b082      	sub	sp, #8
 80193c4:	b901      	cbnz	r1, 80193c8 <__ascii_mbtowc+0x6>
 80193c6:	a901      	add	r1, sp, #4
 80193c8:	b142      	cbz	r2, 80193dc <__ascii_mbtowc+0x1a>
 80193ca:	b14b      	cbz	r3, 80193e0 <__ascii_mbtowc+0x1e>
 80193cc:	7813      	ldrb	r3, [r2, #0]
 80193ce:	600b      	str	r3, [r1, #0]
 80193d0:	7812      	ldrb	r2, [r2, #0]
 80193d2:	1e10      	subs	r0, r2, #0
 80193d4:	bf18      	it	ne
 80193d6:	2001      	movne	r0, #1
 80193d8:	b002      	add	sp, #8
 80193da:	4770      	bx	lr
 80193dc:	4610      	mov	r0, r2
 80193de:	e7fb      	b.n	80193d8 <__ascii_mbtowc+0x16>
 80193e0:	f06f 0001 	mvn.w	r0, #1
 80193e4:	e7f8      	b.n	80193d8 <__ascii_mbtowc+0x16>
	...

080193e8 <_Balloc>:
 80193e8:	b570      	push	{r4, r5, r6, lr}
 80193ea:	69c6      	ldr	r6, [r0, #28]
 80193ec:	4604      	mov	r4, r0
 80193ee:	460d      	mov	r5, r1
 80193f0:	b976      	cbnz	r6, 8019410 <_Balloc+0x28>
 80193f2:	2010      	movs	r0, #16
 80193f4:	f7fc ff38 	bl	8016268 <malloc>
 80193f8:	4602      	mov	r2, r0
 80193fa:	61e0      	str	r0, [r4, #28]
 80193fc:	b920      	cbnz	r0, 8019408 <_Balloc+0x20>
 80193fe:	4b18      	ldr	r3, [pc, #96]	; (8019460 <_Balloc+0x78>)
 8019400:	4818      	ldr	r0, [pc, #96]	; (8019464 <_Balloc+0x7c>)
 8019402:	216b      	movs	r1, #107	; 0x6b
 8019404:	f001 fc24 	bl	801ac50 <__assert_func>
 8019408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801940c:	6006      	str	r6, [r0, #0]
 801940e:	60c6      	str	r6, [r0, #12]
 8019410:	69e6      	ldr	r6, [r4, #28]
 8019412:	68f3      	ldr	r3, [r6, #12]
 8019414:	b183      	cbz	r3, 8019438 <_Balloc+0x50>
 8019416:	69e3      	ldr	r3, [r4, #28]
 8019418:	68db      	ldr	r3, [r3, #12]
 801941a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801941e:	b9b8      	cbnz	r0, 8019450 <_Balloc+0x68>
 8019420:	2101      	movs	r1, #1
 8019422:	fa01 f605 	lsl.w	r6, r1, r5
 8019426:	1d72      	adds	r2, r6, #5
 8019428:	0092      	lsls	r2, r2, #2
 801942a:	4620      	mov	r0, r4
 801942c:	f001 fc2e 	bl	801ac8c <_calloc_r>
 8019430:	b160      	cbz	r0, 801944c <_Balloc+0x64>
 8019432:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019436:	e00e      	b.n	8019456 <_Balloc+0x6e>
 8019438:	2221      	movs	r2, #33	; 0x21
 801943a:	2104      	movs	r1, #4
 801943c:	4620      	mov	r0, r4
 801943e:	f001 fc25 	bl	801ac8c <_calloc_r>
 8019442:	69e3      	ldr	r3, [r4, #28]
 8019444:	60f0      	str	r0, [r6, #12]
 8019446:	68db      	ldr	r3, [r3, #12]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d1e4      	bne.n	8019416 <_Balloc+0x2e>
 801944c:	2000      	movs	r0, #0
 801944e:	bd70      	pop	{r4, r5, r6, pc}
 8019450:	6802      	ldr	r2, [r0, #0]
 8019452:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019456:	2300      	movs	r3, #0
 8019458:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801945c:	e7f7      	b.n	801944e <_Balloc+0x66>
 801945e:	bf00      	nop
 8019460:	0801bb20 	.word	0x0801bb20
 8019464:	0801bc00 	.word	0x0801bc00

08019468 <_Bfree>:
 8019468:	b570      	push	{r4, r5, r6, lr}
 801946a:	69c6      	ldr	r6, [r0, #28]
 801946c:	4605      	mov	r5, r0
 801946e:	460c      	mov	r4, r1
 8019470:	b976      	cbnz	r6, 8019490 <_Bfree+0x28>
 8019472:	2010      	movs	r0, #16
 8019474:	f7fc fef8 	bl	8016268 <malloc>
 8019478:	4602      	mov	r2, r0
 801947a:	61e8      	str	r0, [r5, #28]
 801947c:	b920      	cbnz	r0, 8019488 <_Bfree+0x20>
 801947e:	4b09      	ldr	r3, [pc, #36]	; (80194a4 <_Bfree+0x3c>)
 8019480:	4809      	ldr	r0, [pc, #36]	; (80194a8 <_Bfree+0x40>)
 8019482:	218f      	movs	r1, #143	; 0x8f
 8019484:	f001 fbe4 	bl	801ac50 <__assert_func>
 8019488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801948c:	6006      	str	r6, [r0, #0]
 801948e:	60c6      	str	r6, [r0, #12]
 8019490:	b13c      	cbz	r4, 80194a2 <_Bfree+0x3a>
 8019492:	69eb      	ldr	r3, [r5, #28]
 8019494:	6862      	ldr	r2, [r4, #4]
 8019496:	68db      	ldr	r3, [r3, #12]
 8019498:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801949c:	6021      	str	r1, [r4, #0]
 801949e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80194a2:	bd70      	pop	{r4, r5, r6, pc}
 80194a4:	0801bb20 	.word	0x0801bb20
 80194a8:	0801bc00 	.word	0x0801bc00

080194ac <__multadd>:
 80194ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194b0:	690d      	ldr	r5, [r1, #16]
 80194b2:	4607      	mov	r7, r0
 80194b4:	460c      	mov	r4, r1
 80194b6:	461e      	mov	r6, r3
 80194b8:	f101 0c14 	add.w	ip, r1, #20
 80194bc:	2000      	movs	r0, #0
 80194be:	f8dc 3000 	ldr.w	r3, [ip]
 80194c2:	b299      	uxth	r1, r3
 80194c4:	fb02 6101 	mla	r1, r2, r1, r6
 80194c8:	0c1e      	lsrs	r6, r3, #16
 80194ca:	0c0b      	lsrs	r3, r1, #16
 80194cc:	fb02 3306 	mla	r3, r2, r6, r3
 80194d0:	b289      	uxth	r1, r1
 80194d2:	3001      	adds	r0, #1
 80194d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80194d8:	4285      	cmp	r5, r0
 80194da:	f84c 1b04 	str.w	r1, [ip], #4
 80194de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80194e2:	dcec      	bgt.n	80194be <__multadd+0x12>
 80194e4:	b30e      	cbz	r6, 801952a <__multadd+0x7e>
 80194e6:	68a3      	ldr	r3, [r4, #8]
 80194e8:	42ab      	cmp	r3, r5
 80194ea:	dc19      	bgt.n	8019520 <__multadd+0x74>
 80194ec:	6861      	ldr	r1, [r4, #4]
 80194ee:	4638      	mov	r0, r7
 80194f0:	3101      	adds	r1, #1
 80194f2:	f7ff ff79 	bl	80193e8 <_Balloc>
 80194f6:	4680      	mov	r8, r0
 80194f8:	b928      	cbnz	r0, 8019506 <__multadd+0x5a>
 80194fa:	4602      	mov	r2, r0
 80194fc:	4b0c      	ldr	r3, [pc, #48]	; (8019530 <__multadd+0x84>)
 80194fe:	480d      	ldr	r0, [pc, #52]	; (8019534 <__multadd+0x88>)
 8019500:	21ba      	movs	r1, #186	; 0xba
 8019502:	f001 fba5 	bl	801ac50 <__assert_func>
 8019506:	6922      	ldr	r2, [r4, #16]
 8019508:	3202      	adds	r2, #2
 801950a:	f104 010c 	add.w	r1, r4, #12
 801950e:	0092      	lsls	r2, r2, #2
 8019510:	300c      	adds	r0, #12
 8019512:	f7fe fd22 	bl	8017f5a <memcpy>
 8019516:	4621      	mov	r1, r4
 8019518:	4638      	mov	r0, r7
 801951a:	f7ff ffa5 	bl	8019468 <_Bfree>
 801951e:	4644      	mov	r4, r8
 8019520:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019524:	3501      	adds	r5, #1
 8019526:	615e      	str	r6, [r3, #20]
 8019528:	6125      	str	r5, [r4, #16]
 801952a:	4620      	mov	r0, r4
 801952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019530:	0801bb8f 	.word	0x0801bb8f
 8019534:	0801bc00 	.word	0x0801bc00

08019538 <__s2b>:
 8019538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801953c:	460c      	mov	r4, r1
 801953e:	4615      	mov	r5, r2
 8019540:	461f      	mov	r7, r3
 8019542:	2209      	movs	r2, #9
 8019544:	3308      	adds	r3, #8
 8019546:	4606      	mov	r6, r0
 8019548:	fb93 f3f2 	sdiv	r3, r3, r2
 801954c:	2100      	movs	r1, #0
 801954e:	2201      	movs	r2, #1
 8019550:	429a      	cmp	r2, r3
 8019552:	db09      	blt.n	8019568 <__s2b+0x30>
 8019554:	4630      	mov	r0, r6
 8019556:	f7ff ff47 	bl	80193e8 <_Balloc>
 801955a:	b940      	cbnz	r0, 801956e <__s2b+0x36>
 801955c:	4602      	mov	r2, r0
 801955e:	4b19      	ldr	r3, [pc, #100]	; (80195c4 <__s2b+0x8c>)
 8019560:	4819      	ldr	r0, [pc, #100]	; (80195c8 <__s2b+0x90>)
 8019562:	21d3      	movs	r1, #211	; 0xd3
 8019564:	f001 fb74 	bl	801ac50 <__assert_func>
 8019568:	0052      	lsls	r2, r2, #1
 801956a:	3101      	adds	r1, #1
 801956c:	e7f0      	b.n	8019550 <__s2b+0x18>
 801956e:	9b08      	ldr	r3, [sp, #32]
 8019570:	6143      	str	r3, [r0, #20]
 8019572:	2d09      	cmp	r5, #9
 8019574:	f04f 0301 	mov.w	r3, #1
 8019578:	6103      	str	r3, [r0, #16]
 801957a:	dd16      	ble.n	80195aa <__s2b+0x72>
 801957c:	f104 0909 	add.w	r9, r4, #9
 8019580:	46c8      	mov	r8, r9
 8019582:	442c      	add	r4, r5
 8019584:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019588:	4601      	mov	r1, r0
 801958a:	3b30      	subs	r3, #48	; 0x30
 801958c:	220a      	movs	r2, #10
 801958e:	4630      	mov	r0, r6
 8019590:	f7ff ff8c 	bl	80194ac <__multadd>
 8019594:	45a0      	cmp	r8, r4
 8019596:	d1f5      	bne.n	8019584 <__s2b+0x4c>
 8019598:	f1a5 0408 	sub.w	r4, r5, #8
 801959c:	444c      	add	r4, r9
 801959e:	1b2d      	subs	r5, r5, r4
 80195a0:	1963      	adds	r3, r4, r5
 80195a2:	42bb      	cmp	r3, r7
 80195a4:	db04      	blt.n	80195b0 <__s2b+0x78>
 80195a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195aa:	340a      	adds	r4, #10
 80195ac:	2509      	movs	r5, #9
 80195ae:	e7f6      	b.n	801959e <__s2b+0x66>
 80195b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80195b4:	4601      	mov	r1, r0
 80195b6:	3b30      	subs	r3, #48	; 0x30
 80195b8:	220a      	movs	r2, #10
 80195ba:	4630      	mov	r0, r6
 80195bc:	f7ff ff76 	bl	80194ac <__multadd>
 80195c0:	e7ee      	b.n	80195a0 <__s2b+0x68>
 80195c2:	bf00      	nop
 80195c4:	0801bb8f 	.word	0x0801bb8f
 80195c8:	0801bc00 	.word	0x0801bc00

080195cc <__hi0bits>:
 80195cc:	0c03      	lsrs	r3, r0, #16
 80195ce:	041b      	lsls	r3, r3, #16
 80195d0:	b9d3      	cbnz	r3, 8019608 <__hi0bits+0x3c>
 80195d2:	0400      	lsls	r0, r0, #16
 80195d4:	2310      	movs	r3, #16
 80195d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80195da:	bf04      	itt	eq
 80195dc:	0200      	lsleq	r0, r0, #8
 80195de:	3308      	addeq	r3, #8
 80195e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80195e4:	bf04      	itt	eq
 80195e6:	0100      	lsleq	r0, r0, #4
 80195e8:	3304      	addeq	r3, #4
 80195ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80195ee:	bf04      	itt	eq
 80195f0:	0080      	lsleq	r0, r0, #2
 80195f2:	3302      	addeq	r3, #2
 80195f4:	2800      	cmp	r0, #0
 80195f6:	db05      	blt.n	8019604 <__hi0bits+0x38>
 80195f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80195fc:	f103 0301 	add.w	r3, r3, #1
 8019600:	bf08      	it	eq
 8019602:	2320      	moveq	r3, #32
 8019604:	4618      	mov	r0, r3
 8019606:	4770      	bx	lr
 8019608:	2300      	movs	r3, #0
 801960a:	e7e4      	b.n	80195d6 <__hi0bits+0xa>

0801960c <__lo0bits>:
 801960c:	6803      	ldr	r3, [r0, #0]
 801960e:	f013 0207 	ands.w	r2, r3, #7
 8019612:	d00c      	beq.n	801962e <__lo0bits+0x22>
 8019614:	07d9      	lsls	r1, r3, #31
 8019616:	d422      	bmi.n	801965e <__lo0bits+0x52>
 8019618:	079a      	lsls	r2, r3, #30
 801961a:	bf49      	itett	mi
 801961c:	085b      	lsrmi	r3, r3, #1
 801961e:	089b      	lsrpl	r3, r3, #2
 8019620:	6003      	strmi	r3, [r0, #0]
 8019622:	2201      	movmi	r2, #1
 8019624:	bf5c      	itt	pl
 8019626:	6003      	strpl	r3, [r0, #0]
 8019628:	2202      	movpl	r2, #2
 801962a:	4610      	mov	r0, r2
 801962c:	4770      	bx	lr
 801962e:	b299      	uxth	r1, r3
 8019630:	b909      	cbnz	r1, 8019636 <__lo0bits+0x2a>
 8019632:	0c1b      	lsrs	r3, r3, #16
 8019634:	2210      	movs	r2, #16
 8019636:	b2d9      	uxtb	r1, r3
 8019638:	b909      	cbnz	r1, 801963e <__lo0bits+0x32>
 801963a:	3208      	adds	r2, #8
 801963c:	0a1b      	lsrs	r3, r3, #8
 801963e:	0719      	lsls	r1, r3, #28
 8019640:	bf04      	itt	eq
 8019642:	091b      	lsreq	r3, r3, #4
 8019644:	3204      	addeq	r2, #4
 8019646:	0799      	lsls	r1, r3, #30
 8019648:	bf04      	itt	eq
 801964a:	089b      	lsreq	r3, r3, #2
 801964c:	3202      	addeq	r2, #2
 801964e:	07d9      	lsls	r1, r3, #31
 8019650:	d403      	bmi.n	801965a <__lo0bits+0x4e>
 8019652:	085b      	lsrs	r3, r3, #1
 8019654:	f102 0201 	add.w	r2, r2, #1
 8019658:	d003      	beq.n	8019662 <__lo0bits+0x56>
 801965a:	6003      	str	r3, [r0, #0]
 801965c:	e7e5      	b.n	801962a <__lo0bits+0x1e>
 801965e:	2200      	movs	r2, #0
 8019660:	e7e3      	b.n	801962a <__lo0bits+0x1e>
 8019662:	2220      	movs	r2, #32
 8019664:	e7e1      	b.n	801962a <__lo0bits+0x1e>
	...

08019668 <__i2b>:
 8019668:	b510      	push	{r4, lr}
 801966a:	460c      	mov	r4, r1
 801966c:	2101      	movs	r1, #1
 801966e:	f7ff febb 	bl	80193e8 <_Balloc>
 8019672:	4602      	mov	r2, r0
 8019674:	b928      	cbnz	r0, 8019682 <__i2b+0x1a>
 8019676:	4b05      	ldr	r3, [pc, #20]	; (801968c <__i2b+0x24>)
 8019678:	4805      	ldr	r0, [pc, #20]	; (8019690 <__i2b+0x28>)
 801967a:	f240 1145 	movw	r1, #325	; 0x145
 801967e:	f001 fae7 	bl	801ac50 <__assert_func>
 8019682:	2301      	movs	r3, #1
 8019684:	6144      	str	r4, [r0, #20]
 8019686:	6103      	str	r3, [r0, #16]
 8019688:	bd10      	pop	{r4, pc}
 801968a:	bf00      	nop
 801968c:	0801bb8f 	.word	0x0801bb8f
 8019690:	0801bc00 	.word	0x0801bc00

08019694 <__multiply>:
 8019694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019698:	4691      	mov	r9, r2
 801969a:	690a      	ldr	r2, [r1, #16]
 801969c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	bfb8      	it	lt
 80196a4:	460b      	movlt	r3, r1
 80196a6:	460c      	mov	r4, r1
 80196a8:	bfbc      	itt	lt
 80196aa:	464c      	movlt	r4, r9
 80196ac:	4699      	movlt	r9, r3
 80196ae:	6927      	ldr	r7, [r4, #16]
 80196b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80196b4:	68a3      	ldr	r3, [r4, #8]
 80196b6:	6861      	ldr	r1, [r4, #4]
 80196b8:	eb07 060a 	add.w	r6, r7, sl
 80196bc:	42b3      	cmp	r3, r6
 80196be:	b085      	sub	sp, #20
 80196c0:	bfb8      	it	lt
 80196c2:	3101      	addlt	r1, #1
 80196c4:	f7ff fe90 	bl	80193e8 <_Balloc>
 80196c8:	b930      	cbnz	r0, 80196d8 <__multiply+0x44>
 80196ca:	4602      	mov	r2, r0
 80196cc:	4b44      	ldr	r3, [pc, #272]	; (80197e0 <__multiply+0x14c>)
 80196ce:	4845      	ldr	r0, [pc, #276]	; (80197e4 <__multiply+0x150>)
 80196d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80196d4:	f001 fabc 	bl	801ac50 <__assert_func>
 80196d8:	f100 0514 	add.w	r5, r0, #20
 80196dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80196e0:	462b      	mov	r3, r5
 80196e2:	2200      	movs	r2, #0
 80196e4:	4543      	cmp	r3, r8
 80196e6:	d321      	bcc.n	801972c <__multiply+0x98>
 80196e8:	f104 0314 	add.w	r3, r4, #20
 80196ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80196f0:	f109 0314 	add.w	r3, r9, #20
 80196f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80196f8:	9202      	str	r2, [sp, #8]
 80196fa:	1b3a      	subs	r2, r7, r4
 80196fc:	3a15      	subs	r2, #21
 80196fe:	f022 0203 	bic.w	r2, r2, #3
 8019702:	3204      	adds	r2, #4
 8019704:	f104 0115 	add.w	r1, r4, #21
 8019708:	428f      	cmp	r7, r1
 801970a:	bf38      	it	cc
 801970c:	2204      	movcc	r2, #4
 801970e:	9201      	str	r2, [sp, #4]
 8019710:	9a02      	ldr	r2, [sp, #8]
 8019712:	9303      	str	r3, [sp, #12]
 8019714:	429a      	cmp	r2, r3
 8019716:	d80c      	bhi.n	8019732 <__multiply+0x9e>
 8019718:	2e00      	cmp	r6, #0
 801971a:	dd03      	ble.n	8019724 <__multiply+0x90>
 801971c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019720:	2b00      	cmp	r3, #0
 8019722:	d05b      	beq.n	80197dc <__multiply+0x148>
 8019724:	6106      	str	r6, [r0, #16]
 8019726:	b005      	add	sp, #20
 8019728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801972c:	f843 2b04 	str.w	r2, [r3], #4
 8019730:	e7d8      	b.n	80196e4 <__multiply+0x50>
 8019732:	f8b3 a000 	ldrh.w	sl, [r3]
 8019736:	f1ba 0f00 	cmp.w	sl, #0
 801973a:	d024      	beq.n	8019786 <__multiply+0xf2>
 801973c:	f104 0e14 	add.w	lr, r4, #20
 8019740:	46a9      	mov	r9, r5
 8019742:	f04f 0c00 	mov.w	ip, #0
 8019746:	f85e 2b04 	ldr.w	r2, [lr], #4
 801974a:	f8d9 1000 	ldr.w	r1, [r9]
 801974e:	fa1f fb82 	uxth.w	fp, r2
 8019752:	b289      	uxth	r1, r1
 8019754:	fb0a 110b 	mla	r1, sl, fp, r1
 8019758:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801975c:	f8d9 2000 	ldr.w	r2, [r9]
 8019760:	4461      	add	r1, ip
 8019762:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019766:	fb0a c20b 	mla	r2, sl, fp, ip
 801976a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801976e:	b289      	uxth	r1, r1
 8019770:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019774:	4577      	cmp	r7, lr
 8019776:	f849 1b04 	str.w	r1, [r9], #4
 801977a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801977e:	d8e2      	bhi.n	8019746 <__multiply+0xb2>
 8019780:	9a01      	ldr	r2, [sp, #4]
 8019782:	f845 c002 	str.w	ip, [r5, r2]
 8019786:	9a03      	ldr	r2, [sp, #12]
 8019788:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801978c:	3304      	adds	r3, #4
 801978e:	f1b9 0f00 	cmp.w	r9, #0
 8019792:	d021      	beq.n	80197d8 <__multiply+0x144>
 8019794:	6829      	ldr	r1, [r5, #0]
 8019796:	f104 0c14 	add.w	ip, r4, #20
 801979a:	46ae      	mov	lr, r5
 801979c:	f04f 0a00 	mov.w	sl, #0
 80197a0:	f8bc b000 	ldrh.w	fp, [ip]
 80197a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80197a8:	fb09 220b 	mla	r2, r9, fp, r2
 80197ac:	4452      	add	r2, sl
 80197ae:	b289      	uxth	r1, r1
 80197b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80197b4:	f84e 1b04 	str.w	r1, [lr], #4
 80197b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80197bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80197c0:	f8be 1000 	ldrh.w	r1, [lr]
 80197c4:	fb09 110a 	mla	r1, r9, sl, r1
 80197c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80197cc:	4567      	cmp	r7, ip
 80197ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80197d2:	d8e5      	bhi.n	80197a0 <__multiply+0x10c>
 80197d4:	9a01      	ldr	r2, [sp, #4]
 80197d6:	50a9      	str	r1, [r5, r2]
 80197d8:	3504      	adds	r5, #4
 80197da:	e799      	b.n	8019710 <__multiply+0x7c>
 80197dc:	3e01      	subs	r6, #1
 80197de:	e79b      	b.n	8019718 <__multiply+0x84>
 80197e0:	0801bb8f 	.word	0x0801bb8f
 80197e4:	0801bc00 	.word	0x0801bc00

080197e8 <__pow5mult>:
 80197e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197ec:	4615      	mov	r5, r2
 80197ee:	f012 0203 	ands.w	r2, r2, #3
 80197f2:	4606      	mov	r6, r0
 80197f4:	460f      	mov	r7, r1
 80197f6:	d007      	beq.n	8019808 <__pow5mult+0x20>
 80197f8:	4c25      	ldr	r4, [pc, #148]	; (8019890 <__pow5mult+0xa8>)
 80197fa:	3a01      	subs	r2, #1
 80197fc:	2300      	movs	r3, #0
 80197fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019802:	f7ff fe53 	bl	80194ac <__multadd>
 8019806:	4607      	mov	r7, r0
 8019808:	10ad      	asrs	r5, r5, #2
 801980a:	d03d      	beq.n	8019888 <__pow5mult+0xa0>
 801980c:	69f4      	ldr	r4, [r6, #28]
 801980e:	b97c      	cbnz	r4, 8019830 <__pow5mult+0x48>
 8019810:	2010      	movs	r0, #16
 8019812:	f7fc fd29 	bl	8016268 <malloc>
 8019816:	4602      	mov	r2, r0
 8019818:	61f0      	str	r0, [r6, #28]
 801981a:	b928      	cbnz	r0, 8019828 <__pow5mult+0x40>
 801981c:	4b1d      	ldr	r3, [pc, #116]	; (8019894 <__pow5mult+0xac>)
 801981e:	481e      	ldr	r0, [pc, #120]	; (8019898 <__pow5mult+0xb0>)
 8019820:	f240 11b3 	movw	r1, #435	; 0x1b3
 8019824:	f001 fa14 	bl	801ac50 <__assert_func>
 8019828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801982c:	6004      	str	r4, [r0, #0]
 801982e:	60c4      	str	r4, [r0, #12]
 8019830:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8019834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019838:	b94c      	cbnz	r4, 801984e <__pow5mult+0x66>
 801983a:	f240 2171 	movw	r1, #625	; 0x271
 801983e:	4630      	mov	r0, r6
 8019840:	f7ff ff12 	bl	8019668 <__i2b>
 8019844:	2300      	movs	r3, #0
 8019846:	f8c8 0008 	str.w	r0, [r8, #8]
 801984a:	4604      	mov	r4, r0
 801984c:	6003      	str	r3, [r0, #0]
 801984e:	f04f 0900 	mov.w	r9, #0
 8019852:	07eb      	lsls	r3, r5, #31
 8019854:	d50a      	bpl.n	801986c <__pow5mult+0x84>
 8019856:	4639      	mov	r1, r7
 8019858:	4622      	mov	r2, r4
 801985a:	4630      	mov	r0, r6
 801985c:	f7ff ff1a 	bl	8019694 <__multiply>
 8019860:	4639      	mov	r1, r7
 8019862:	4680      	mov	r8, r0
 8019864:	4630      	mov	r0, r6
 8019866:	f7ff fdff 	bl	8019468 <_Bfree>
 801986a:	4647      	mov	r7, r8
 801986c:	106d      	asrs	r5, r5, #1
 801986e:	d00b      	beq.n	8019888 <__pow5mult+0xa0>
 8019870:	6820      	ldr	r0, [r4, #0]
 8019872:	b938      	cbnz	r0, 8019884 <__pow5mult+0x9c>
 8019874:	4622      	mov	r2, r4
 8019876:	4621      	mov	r1, r4
 8019878:	4630      	mov	r0, r6
 801987a:	f7ff ff0b 	bl	8019694 <__multiply>
 801987e:	6020      	str	r0, [r4, #0]
 8019880:	f8c0 9000 	str.w	r9, [r0]
 8019884:	4604      	mov	r4, r0
 8019886:	e7e4      	b.n	8019852 <__pow5mult+0x6a>
 8019888:	4638      	mov	r0, r7
 801988a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801988e:	bf00      	nop
 8019890:	0801bd50 	.word	0x0801bd50
 8019894:	0801bb20 	.word	0x0801bb20
 8019898:	0801bc00 	.word	0x0801bc00

0801989c <__lshift>:
 801989c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198a0:	460c      	mov	r4, r1
 80198a2:	6849      	ldr	r1, [r1, #4]
 80198a4:	6923      	ldr	r3, [r4, #16]
 80198a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80198aa:	68a3      	ldr	r3, [r4, #8]
 80198ac:	4607      	mov	r7, r0
 80198ae:	4691      	mov	r9, r2
 80198b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80198b4:	f108 0601 	add.w	r6, r8, #1
 80198b8:	42b3      	cmp	r3, r6
 80198ba:	db0b      	blt.n	80198d4 <__lshift+0x38>
 80198bc:	4638      	mov	r0, r7
 80198be:	f7ff fd93 	bl	80193e8 <_Balloc>
 80198c2:	4605      	mov	r5, r0
 80198c4:	b948      	cbnz	r0, 80198da <__lshift+0x3e>
 80198c6:	4602      	mov	r2, r0
 80198c8:	4b28      	ldr	r3, [pc, #160]	; (801996c <__lshift+0xd0>)
 80198ca:	4829      	ldr	r0, [pc, #164]	; (8019970 <__lshift+0xd4>)
 80198cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80198d0:	f001 f9be 	bl	801ac50 <__assert_func>
 80198d4:	3101      	adds	r1, #1
 80198d6:	005b      	lsls	r3, r3, #1
 80198d8:	e7ee      	b.n	80198b8 <__lshift+0x1c>
 80198da:	2300      	movs	r3, #0
 80198dc:	f100 0114 	add.w	r1, r0, #20
 80198e0:	f100 0210 	add.w	r2, r0, #16
 80198e4:	4618      	mov	r0, r3
 80198e6:	4553      	cmp	r3, sl
 80198e8:	db33      	blt.n	8019952 <__lshift+0xb6>
 80198ea:	6920      	ldr	r0, [r4, #16]
 80198ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80198f0:	f104 0314 	add.w	r3, r4, #20
 80198f4:	f019 091f 	ands.w	r9, r9, #31
 80198f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80198fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019900:	d02b      	beq.n	801995a <__lshift+0xbe>
 8019902:	f1c9 0e20 	rsb	lr, r9, #32
 8019906:	468a      	mov	sl, r1
 8019908:	2200      	movs	r2, #0
 801990a:	6818      	ldr	r0, [r3, #0]
 801990c:	fa00 f009 	lsl.w	r0, r0, r9
 8019910:	4310      	orrs	r0, r2
 8019912:	f84a 0b04 	str.w	r0, [sl], #4
 8019916:	f853 2b04 	ldr.w	r2, [r3], #4
 801991a:	459c      	cmp	ip, r3
 801991c:	fa22 f20e 	lsr.w	r2, r2, lr
 8019920:	d8f3      	bhi.n	801990a <__lshift+0x6e>
 8019922:	ebac 0304 	sub.w	r3, ip, r4
 8019926:	3b15      	subs	r3, #21
 8019928:	f023 0303 	bic.w	r3, r3, #3
 801992c:	3304      	adds	r3, #4
 801992e:	f104 0015 	add.w	r0, r4, #21
 8019932:	4584      	cmp	ip, r0
 8019934:	bf38      	it	cc
 8019936:	2304      	movcc	r3, #4
 8019938:	50ca      	str	r2, [r1, r3]
 801993a:	b10a      	cbz	r2, 8019940 <__lshift+0xa4>
 801993c:	f108 0602 	add.w	r6, r8, #2
 8019940:	3e01      	subs	r6, #1
 8019942:	4638      	mov	r0, r7
 8019944:	612e      	str	r6, [r5, #16]
 8019946:	4621      	mov	r1, r4
 8019948:	f7ff fd8e 	bl	8019468 <_Bfree>
 801994c:	4628      	mov	r0, r5
 801994e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019952:	f842 0f04 	str.w	r0, [r2, #4]!
 8019956:	3301      	adds	r3, #1
 8019958:	e7c5      	b.n	80198e6 <__lshift+0x4a>
 801995a:	3904      	subs	r1, #4
 801995c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019960:	f841 2f04 	str.w	r2, [r1, #4]!
 8019964:	459c      	cmp	ip, r3
 8019966:	d8f9      	bhi.n	801995c <__lshift+0xc0>
 8019968:	e7ea      	b.n	8019940 <__lshift+0xa4>
 801996a:	bf00      	nop
 801996c:	0801bb8f 	.word	0x0801bb8f
 8019970:	0801bc00 	.word	0x0801bc00

08019974 <__mcmp>:
 8019974:	b530      	push	{r4, r5, lr}
 8019976:	6902      	ldr	r2, [r0, #16]
 8019978:	690c      	ldr	r4, [r1, #16]
 801997a:	1b12      	subs	r2, r2, r4
 801997c:	d10e      	bne.n	801999c <__mcmp+0x28>
 801997e:	f100 0314 	add.w	r3, r0, #20
 8019982:	3114      	adds	r1, #20
 8019984:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019988:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801998c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019990:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019994:	42a5      	cmp	r5, r4
 8019996:	d003      	beq.n	80199a0 <__mcmp+0x2c>
 8019998:	d305      	bcc.n	80199a6 <__mcmp+0x32>
 801999a:	2201      	movs	r2, #1
 801999c:	4610      	mov	r0, r2
 801999e:	bd30      	pop	{r4, r5, pc}
 80199a0:	4283      	cmp	r3, r0
 80199a2:	d3f3      	bcc.n	801998c <__mcmp+0x18>
 80199a4:	e7fa      	b.n	801999c <__mcmp+0x28>
 80199a6:	f04f 32ff 	mov.w	r2, #4294967295
 80199aa:	e7f7      	b.n	801999c <__mcmp+0x28>

080199ac <__mdiff>:
 80199ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b0:	460c      	mov	r4, r1
 80199b2:	4606      	mov	r6, r0
 80199b4:	4611      	mov	r1, r2
 80199b6:	4620      	mov	r0, r4
 80199b8:	4690      	mov	r8, r2
 80199ba:	f7ff ffdb 	bl	8019974 <__mcmp>
 80199be:	1e05      	subs	r5, r0, #0
 80199c0:	d110      	bne.n	80199e4 <__mdiff+0x38>
 80199c2:	4629      	mov	r1, r5
 80199c4:	4630      	mov	r0, r6
 80199c6:	f7ff fd0f 	bl	80193e8 <_Balloc>
 80199ca:	b930      	cbnz	r0, 80199da <__mdiff+0x2e>
 80199cc:	4b3a      	ldr	r3, [pc, #232]	; (8019ab8 <__mdiff+0x10c>)
 80199ce:	4602      	mov	r2, r0
 80199d0:	f240 2137 	movw	r1, #567	; 0x237
 80199d4:	4839      	ldr	r0, [pc, #228]	; (8019abc <__mdiff+0x110>)
 80199d6:	f001 f93b 	bl	801ac50 <__assert_func>
 80199da:	2301      	movs	r3, #1
 80199dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80199e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199e4:	bfa4      	itt	ge
 80199e6:	4643      	movge	r3, r8
 80199e8:	46a0      	movge	r8, r4
 80199ea:	4630      	mov	r0, r6
 80199ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80199f0:	bfa6      	itte	ge
 80199f2:	461c      	movge	r4, r3
 80199f4:	2500      	movge	r5, #0
 80199f6:	2501      	movlt	r5, #1
 80199f8:	f7ff fcf6 	bl	80193e8 <_Balloc>
 80199fc:	b920      	cbnz	r0, 8019a08 <__mdiff+0x5c>
 80199fe:	4b2e      	ldr	r3, [pc, #184]	; (8019ab8 <__mdiff+0x10c>)
 8019a00:	4602      	mov	r2, r0
 8019a02:	f240 2145 	movw	r1, #581	; 0x245
 8019a06:	e7e5      	b.n	80199d4 <__mdiff+0x28>
 8019a08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019a0c:	6926      	ldr	r6, [r4, #16]
 8019a0e:	60c5      	str	r5, [r0, #12]
 8019a10:	f104 0914 	add.w	r9, r4, #20
 8019a14:	f108 0514 	add.w	r5, r8, #20
 8019a18:	f100 0e14 	add.w	lr, r0, #20
 8019a1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019a20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019a24:	f108 0210 	add.w	r2, r8, #16
 8019a28:	46f2      	mov	sl, lr
 8019a2a:	2100      	movs	r1, #0
 8019a2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8019a30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019a34:	fa11 f88b 	uxtah	r8, r1, fp
 8019a38:	b299      	uxth	r1, r3
 8019a3a:	0c1b      	lsrs	r3, r3, #16
 8019a3c:	eba8 0801 	sub.w	r8, r8, r1
 8019a40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019a44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019a48:	fa1f f888 	uxth.w	r8, r8
 8019a4c:	1419      	asrs	r1, r3, #16
 8019a4e:	454e      	cmp	r6, r9
 8019a50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019a54:	f84a 3b04 	str.w	r3, [sl], #4
 8019a58:	d8e8      	bhi.n	8019a2c <__mdiff+0x80>
 8019a5a:	1b33      	subs	r3, r6, r4
 8019a5c:	3b15      	subs	r3, #21
 8019a5e:	f023 0303 	bic.w	r3, r3, #3
 8019a62:	3304      	adds	r3, #4
 8019a64:	3415      	adds	r4, #21
 8019a66:	42a6      	cmp	r6, r4
 8019a68:	bf38      	it	cc
 8019a6a:	2304      	movcc	r3, #4
 8019a6c:	441d      	add	r5, r3
 8019a6e:	4473      	add	r3, lr
 8019a70:	469e      	mov	lr, r3
 8019a72:	462e      	mov	r6, r5
 8019a74:	4566      	cmp	r6, ip
 8019a76:	d30e      	bcc.n	8019a96 <__mdiff+0xea>
 8019a78:	f10c 0203 	add.w	r2, ip, #3
 8019a7c:	1b52      	subs	r2, r2, r5
 8019a7e:	f022 0203 	bic.w	r2, r2, #3
 8019a82:	3d03      	subs	r5, #3
 8019a84:	45ac      	cmp	ip, r5
 8019a86:	bf38      	it	cc
 8019a88:	2200      	movcc	r2, #0
 8019a8a:	4413      	add	r3, r2
 8019a8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019a90:	b17a      	cbz	r2, 8019ab2 <__mdiff+0x106>
 8019a92:	6107      	str	r7, [r0, #16]
 8019a94:	e7a4      	b.n	80199e0 <__mdiff+0x34>
 8019a96:	f856 8b04 	ldr.w	r8, [r6], #4
 8019a9a:	fa11 f288 	uxtah	r2, r1, r8
 8019a9e:	1414      	asrs	r4, r2, #16
 8019aa0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019aa4:	b292      	uxth	r2, r2
 8019aa6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019aaa:	f84e 2b04 	str.w	r2, [lr], #4
 8019aae:	1421      	asrs	r1, r4, #16
 8019ab0:	e7e0      	b.n	8019a74 <__mdiff+0xc8>
 8019ab2:	3f01      	subs	r7, #1
 8019ab4:	e7ea      	b.n	8019a8c <__mdiff+0xe0>
 8019ab6:	bf00      	nop
 8019ab8:	0801bb8f 	.word	0x0801bb8f
 8019abc:	0801bc00 	.word	0x0801bc00

08019ac0 <__ulp>:
 8019ac0:	b082      	sub	sp, #8
 8019ac2:	ed8d 0b00 	vstr	d0, [sp]
 8019ac6:	9a01      	ldr	r2, [sp, #4]
 8019ac8:	4b0f      	ldr	r3, [pc, #60]	; (8019b08 <__ulp+0x48>)
 8019aca:	4013      	ands	r3, r2
 8019acc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	dc08      	bgt.n	8019ae6 <__ulp+0x26>
 8019ad4:	425b      	negs	r3, r3
 8019ad6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8019ada:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019ade:	da04      	bge.n	8019aea <__ulp+0x2a>
 8019ae0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019ae4:	4113      	asrs	r3, r2
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	e008      	b.n	8019afc <__ulp+0x3c>
 8019aea:	f1a2 0314 	sub.w	r3, r2, #20
 8019aee:	2b1e      	cmp	r3, #30
 8019af0:	bfda      	itte	le
 8019af2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8019af6:	40da      	lsrle	r2, r3
 8019af8:	2201      	movgt	r2, #1
 8019afa:	2300      	movs	r3, #0
 8019afc:	4619      	mov	r1, r3
 8019afe:	4610      	mov	r0, r2
 8019b00:	ec41 0b10 	vmov	d0, r0, r1
 8019b04:	b002      	add	sp, #8
 8019b06:	4770      	bx	lr
 8019b08:	7ff00000 	.word	0x7ff00000

08019b0c <__b2d>:
 8019b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b10:	6906      	ldr	r6, [r0, #16]
 8019b12:	f100 0814 	add.w	r8, r0, #20
 8019b16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019b1a:	1f37      	subs	r7, r6, #4
 8019b1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019b20:	4610      	mov	r0, r2
 8019b22:	f7ff fd53 	bl	80195cc <__hi0bits>
 8019b26:	f1c0 0320 	rsb	r3, r0, #32
 8019b2a:	280a      	cmp	r0, #10
 8019b2c:	600b      	str	r3, [r1, #0]
 8019b2e:	491b      	ldr	r1, [pc, #108]	; (8019b9c <__b2d+0x90>)
 8019b30:	dc15      	bgt.n	8019b5e <__b2d+0x52>
 8019b32:	f1c0 0c0b 	rsb	ip, r0, #11
 8019b36:	fa22 f30c 	lsr.w	r3, r2, ip
 8019b3a:	45b8      	cmp	r8, r7
 8019b3c:	ea43 0501 	orr.w	r5, r3, r1
 8019b40:	bf34      	ite	cc
 8019b42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019b46:	2300      	movcs	r3, #0
 8019b48:	3015      	adds	r0, #21
 8019b4a:	fa02 f000 	lsl.w	r0, r2, r0
 8019b4e:	fa23 f30c 	lsr.w	r3, r3, ip
 8019b52:	4303      	orrs	r3, r0
 8019b54:	461c      	mov	r4, r3
 8019b56:	ec45 4b10 	vmov	d0, r4, r5
 8019b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b5e:	45b8      	cmp	r8, r7
 8019b60:	bf3a      	itte	cc
 8019b62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019b66:	f1a6 0708 	subcc.w	r7, r6, #8
 8019b6a:	2300      	movcs	r3, #0
 8019b6c:	380b      	subs	r0, #11
 8019b6e:	d012      	beq.n	8019b96 <__b2d+0x8a>
 8019b70:	f1c0 0120 	rsb	r1, r0, #32
 8019b74:	fa23 f401 	lsr.w	r4, r3, r1
 8019b78:	4082      	lsls	r2, r0
 8019b7a:	4322      	orrs	r2, r4
 8019b7c:	4547      	cmp	r7, r8
 8019b7e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8019b82:	bf8c      	ite	hi
 8019b84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019b88:	2200      	movls	r2, #0
 8019b8a:	4083      	lsls	r3, r0
 8019b8c:	40ca      	lsrs	r2, r1
 8019b8e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019b92:	4313      	orrs	r3, r2
 8019b94:	e7de      	b.n	8019b54 <__b2d+0x48>
 8019b96:	ea42 0501 	orr.w	r5, r2, r1
 8019b9a:	e7db      	b.n	8019b54 <__b2d+0x48>
 8019b9c:	3ff00000 	.word	0x3ff00000

08019ba0 <__d2b>:
 8019ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019ba4:	460f      	mov	r7, r1
 8019ba6:	2101      	movs	r1, #1
 8019ba8:	ec59 8b10 	vmov	r8, r9, d0
 8019bac:	4616      	mov	r6, r2
 8019bae:	f7ff fc1b 	bl	80193e8 <_Balloc>
 8019bb2:	4604      	mov	r4, r0
 8019bb4:	b930      	cbnz	r0, 8019bc4 <__d2b+0x24>
 8019bb6:	4602      	mov	r2, r0
 8019bb8:	4b24      	ldr	r3, [pc, #144]	; (8019c4c <__d2b+0xac>)
 8019bba:	4825      	ldr	r0, [pc, #148]	; (8019c50 <__d2b+0xb0>)
 8019bbc:	f240 310f 	movw	r1, #783	; 0x30f
 8019bc0:	f001 f846 	bl	801ac50 <__assert_func>
 8019bc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019bcc:	bb2d      	cbnz	r5, 8019c1a <__d2b+0x7a>
 8019bce:	9301      	str	r3, [sp, #4]
 8019bd0:	f1b8 0300 	subs.w	r3, r8, #0
 8019bd4:	d026      	beq.n	8019c24 <__d2b+0x84>
 8019bd6:	4668      	mov	r0, sp
 8019bd8:	9300      	str	r3, [sp, #0]
 8019bda:	f7ff fd17 	bl	801960c <__lo0bits>
 8019bde:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019be2:	b1e8      	cbz	r0, 8019c20 <__d2b+0x80>
 8019be4:	f1c0 0320 	rsb	r3, r0, #32
 8019be8:	fa02 f303 	lsl.w	r3, r2, r3
 8019bec:	430b      	orrs	r3, r1
 8019bee:	40c2      	lsrs	r2, r0
 8019bf0:	6163      	str	r3, [r4, #20]
 8019bf2:	9201      	str	r2, [sp, #4]
 8019bf4:	9b01      	ldr	r3, [sp, #4]
 8019bf6:	61a3      	str	r3, [r4, #24]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	bf14      	ite	ne
 8019bfc:	2202      	movne	r2, #2
 8019bfe:	2201      	moveq	r2, #1
 8019c00:	6122      	str	r2, [r4, #16]
 8019c02:	b1bd      	cbz	r5, 8019c34 <__d2b+0x94>
 8019c04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019c08:	4405      	add	r5, r0
 8019c0a:	603d      	str	r5, [r7, #0]
 8019c0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019c10:	6030      	str	r0, [r6, #0]
 8019c12:	4620      	mov	r0, r4
 8019c14:	b003      	add	sp, #12
 8019c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019c1e:	e7d6      	b.n	8019bce <__d2b+0x2e>
 8019c20:	6161      	str	r1, [r4, #20]
 8019c22:	e7e7      	b.n	8019bf4 <__d2b+0x54>
 8019c24:	a801      	add	r0, sp, #4
 8019c26:	f7ff fcf1 	bl	801960c <__lo0bits>
 8019c2a:	9b01      	ldr	r3, [sp, #4]
 8019c2c:	6163      	str	r3, [r4, #20]
 8019c2e:	3020      	adds	r0, #32
 8019c30:	2201      	movs	r2, #1
 8019c32:	e7e5      	b.n	8019c00 <__d2b+0x60>
 8019c34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019c38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019c3c:	6038      	str	r0, [r7, #0]
 8019c3e:	6918      	ldr	r0, [r3, #16]
 8019c40:	f7ff fcc4 	bl	80195cc <__hi0bits>
 8019c44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019c48:	e7e2      	b.n	8019c10 <__d2b+0x70>
 8019c4a:	bf00      	nop
 8019c4c:	0801bb8f 	.word	0x0801bb8f
 8019c50:	0801bc00 	.word	0x0801bc00

08019c54 <__ratio>:
 8019c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c58:	4688      	mov	r8, r1
 8019c5a:	4669      	mov	r1, sp
 8019c5c:	4681      	mov	r9, r0
 8019c5e:	f7ff ff55 	bl	8019b0c <__b2d>
 8019c62:	a901      	add	r1, sp, #4
 8019c64:	4640      	mov	r0, r8
 8019c66:	ec55 4b10 	vmov	r4, r5, d0
 8019c6a:	f7ff ff4f 	bl	8019b0c <__b2d>
 8019c6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019c72:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019c76:	eba3 0c02 	sub.w	ip, r3, r2
 8019c7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019c7e:	1a9b      	subs	r3, r3, r2
 8019c80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019c84:	ec51 0b10 	vmov	r0, r1, d0
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	bfd6      	itet	le
 8019c8c:	460a      	movle	r2, r1
 8019c8e:	462a      	movgt	r2, r5
 8019c90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019c94:	468b      	mov	fp, r1
 8019c96:	462f      	mov	r7, r5
 8019c98:	bfd4      	ite	le
 8019c9a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019c9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019ca2:	4620      	mov	r0, r4
 8019ca4:	ee10 2a10 	vmov	r2, s0
 8019ca8:	465b      	mov	r3, fp
 8019caa:	4639      	mov	r1, r7
 8019cac:	f7e6 fdde 	bl	800086c <__aeabi_ddiv>
 8019cb0:	ec41 0b10 	vmov	d0, r0, r1
 8019cb4:	b003      	add	sp, #12
 8019cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019cba <__copybits>:
 8019cba:	3901      	subs	r1, #1
 8019cbc:	b570      	push	{r4, r5, r6, lr}
 8019cbe:	1149      	asrs	r1, r1, #5
 8019cc0:	6914      	ldr	r4, [r2, #16]
 8019cc2:	3101      	adds	r1, #1
 8019cc4:	f102 0314 	add.w	r3, r2, #20
 8019cc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019ccc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019cd0:	1f05      	subs	r5, r0, #4
 8019cd2:	42a3      	cmp	r3, r4
 8019cd4:	d30c      	bcc.n	8019cf0 <__copybits+0x36>
 8019cd6:	1aa3      	subs	r3, r4, r2
 8019cd8:	3b11      	subs	r3, #17
 8019cda:	f023 0303 	bic.w	r3, r3, #3
 8019cde:	3211      	adds	r2, #17
 8019ce0:	42a2      	cmp	r2, r4
 8019ce2:	bf88      	it	hi
 8019ce4:	2300      	movhi	r3, #0
 8019ce6:	4418      	add	r0, r3
 8019ce8:	2300      	movs	r3, #0
 8019cea:	4288      	cmp	r0, r1
 8019cec:	d305      	bcc.n	8019cfa <__copybits+0x40>
 8019cee:	bd70      	pop	{r4, r5, r6, pc}
 8019cf0:	f853 6b04 	ldr.w	r6, [r3], #4
 8019cf4:	f845 6f04 	str.w	r6, [r5, #4]!
 8019cf8:	e7eb      	b.n	8019cd2 <__copybits+0x18>
 8019cfa:	f840 3b04 	str.w	r3, [r0], #4
 8019cfe:	e7f4      	b.n	8019cea <__copybits+0x30>

08019d00 <__any_on>:
 8019d00:	f100 0214 	add.w	r2, r0, #20
 8019d04:	6900      	ldr	r0, [r0, #16]
 8019d06:	114b      	asrs	r3, r1, #5
 8019d08:	4298      	cmp	r0, r3
 8019d0a:	b510      	push	{r4, lr}
 8019d0c:	db11      	blt.n	8019d32 <__any_on+0x32>
 8019d0e:	dd0a      	ble.n	8019d26 <__any_on+0x26>
 8019d10:	f011 011f 	ands.w	r1, r1, #31
 8019d14:	d007      	beq.n	8019d26 <__any_on+0x26>
 8019d16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019d1a:	fa24 f001 	lsr.w	r0, r4, r1
 8019d1e:	fa00 f101 	lsl.w	r1, r0, r1
 8019d22:	428c      	cmp	r4, r1
 8019d24:	d10b      	bne.n	8019d3e <__any_on+0x3e>
 8019d26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019d2a:	4293      	cmp	r3, r2
 8019d2c:	d803      	bhi.n	8019d36 <__any_on+0x36>
 8019d2e:	2000      	movs	r0, #0
 8019d30:	bd10      	pop	{r4, pc}
 8019d32:	4603      	mov	r3, r0
 8019d34:	e7f7      	b.n	8019d26 <__any_on+0x26>
 8019d36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019d3a:	2900      	cmp	r1, #0
 8019d3c:	d0f5      	beq.n	8019d2a <__any_on+0x2a>
 8019d3e:	2001      	movs	r0, #1
 8019d40:	e7f6      	b.n	8019d30 <__any_on+0x30>

08019d42 <_malloc_usable_size_r>:
 8019d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d46:	1f18      	subs	r0, r3, #4
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	bfbc      	itt	lt
 8019d4c:	580b      	ldrlt	r3, [r1, r0]
 8019d4e:	18c0      	addlt	r0, r0, r3
 8019d50:	4770      	bx	lr

08019d52 <__ascii_wctomb>:
 8019d52:	b149      	cbz	r1, 8019d68 <__ascii_wctomb+0x16>
 8019d54:	2aff      	cmp	r2, #255	; 0xff
 8019d56:	bf85      	ittet	hi
 8019d58:	238a      	movhi	r3, #138	; 0x8a
 8019d5a:	6003      	strhi	r3, [r0, #0]
 8019d5c:	700a      	strbls	r2, [r1, #0]
 8019d5e:	f04f 30ff 	movhi.w	r0, #4294967295
 8019d62:	bf98      	it	ls
 8019d64:	2001      	movls	r0, #1
 8019d66:	4770      	bx	lr
 8019d68:	4608      	mov	r0, r1
 8019d6a:	4770      	bx	lr

08019d6c <__ssputs_r>:
 8019d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d70:	688e      	ldr	r6, [r1, #8]
 8019d72:	461f      	mov	r7, r3
 8019d74:	42be      	cmp	r6, r7
 8019d76:	680b      	ldr	r3, [r1, #0]
 8019d78:	4682      	mov	sl, r0
 8019d7a:	460c      	mov	r4, r1
 8019d7c:	4690      	mov	r8, r2
 8019d7e:	d82c      	bhi.n	8019dda <__ssputs_r+0x6e>
 8019d80:	898a      	ldrh	r2, [r1, #12]
 8019d82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d86:	d026      	beq.n	8019dd6 <__ssputs_r+0x6a>
 8019d88:	6965      	ldr	r5, [r4, #20]
 8019d8a:	6909      	ldr	r1, [r1, #16]
 8019d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d90:	eba3 0901 	sub.w	r9, r3, r1
 8019d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019d98:	1c7b      	adds	r3, r7, #1
 8019d9a:	444b      	add	r3, r9
 8019d9c:	106d      	asrs	r5, r5, #1
 8019d9e:	429d      	cmp	r5, r3
 8019da0:	bf38      	it	cc
 8019da2:	461d      	movcc	r5, r3
 8019da4:	0553      	lsls	r3, r2, #21
 8019da6:	d527      	bpl.n	8019df8 <__ssputs_r+0x8c>
 8019da8:	4629      	mov	r1, r5
 8019daa:	f7fc fa8d 	bl	80162c8 <_malloc_r>
 8019dae:	4606      	mov	r6, r0
 8019db0:	b360      	cbz	r0, 8019e0c <__ssputs_r+0xa0>
 8019db2:	6921      	ldr	r1, [r4, #16]
 8019db4:	464a      	mov	r2, r9
 8019db6:	f7fe f8d0 	bl	8017f5a <memcpy>
 8019dba:	89a3      	ldrh	r3, [r4, #12]
 8019dbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019dc4:	81a3      	strh	r3, [r4, #12]
 8019dc6:	6126      	str	r6, [r4, #16]
 8019dc8:	6165      	str	r5, [r4, #20]
 8019dca:	444e      	add	r6, r9
 8019dcc:	eba5 0509 	sub.w	r5, r5, r9
 8019dd0:	6026      	str	r6, [r4, #0]
 8019dd2:	60a5      	str	r5, [r4, #8]
 8019dd4:	463e      	mov	r6, r7
 8019dd6:	42be      	cmp	r6, r7
 8019dd8:	d900      	bls.n	8019ddc <__ssputs_r+0x70>
 8019dda:	463e      	mov	r6, r7
 8019ddc:	6820      	ldr	r0, [r4, #0]
 8019dde:	4632      	mov	r2, r6
 8019de0:	4641      	mov	r1, r8
 8019de2:	f7fd ff95 	bl	8017d10 <memmove>
 8019de6:	68a3      	ldr	r3, [r4, #8]
 8019de8:	1b9b      	subs	r3, r3, r6
 8019dea:	60a3      	str	r3, [r4, #8]
 8019dec:	6823      	ldr	r3, [r4, #0]
 8019dee:	4433      	add	r3, r6
 8019df0:	6023      	str	r3, [r4, #0]
 8019df2:	2000      	movs	r0, #0
 8019df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019df8:	462a      	mov	r2, r5
 8019dfa:	f7fc faf9 	bl	80163f0 <_realloc_r>
 8019dfe:	4606      	mov	r6, r0
 8019e00:	2800      	cmp	r0, #0
 8019e02:	d1e0      	bne.n	8019dc6 <__ssputs_r+0x5a>
 8019e04:	6921      	ldr	r1, [r4, #16]
 8019e06:	4650      	mov	r0, sl
 8019e08:	f7fe ff38 	bl	8018c7c <_free_r>
 8019e0c:	230c      	movs	r3, #12
 8019e0e:	f8ca 3000 	str.w	r3, [sl]
 8019e12:	89a3      	ldrh	r3, [r4, #12]
 8019e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e18:	81a3      	strh	r3, [r4, #12]
 8019e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8019e1e:	e7e9      	b.n	8019df4 <__ssputs_r+0x88>

08019e20 <_svfiprintf_r>:
 8019e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e24:	4698      	mov	r8, r3
 8019e26:	898b      	ldrh	r3, [r1, #12]
 8019e28:	061b      	lsls	r3, r3, #24
 8019e2a:	b09d      	sub	sp, #116	; 0x74
 8019e2c:	4607      	mov	r7, r0
 8019e2e:	460d      	mov	r5, r1
 8019e30:	4614      	mov	r4, r2
 8019e32:	d50e      	bpl.n	8019e52 <_svfiprintf_r+0x32>
 8019e34:	690b      	ldr	r3, [r1, #16]
 8019e36:	b963      	cbnz	r3, 8019e52 <_svfiprintf_r+0x32>
 8019e38:	2140      	movs	r1, #64	; 0x40
 8019e3a:	f7fc fa45 	bl	80162c8 <_malloc_r>
 8019e3e:	6028      	str	r0, [r5, #0]
 8019e40:	6128      	str	r0, [r5, #16]
 8019e42:	b920      	cbnz	r0, 8019e4e <_svfiprintf_r+0x2e>
 8019e44:	230c      	movs	r3, #12
 8019e46:	603b      	str	r3, [r7, #0]
 8019e48:	f04f 30ff 	mov.w	r0, #4294967295
 8019e4c:	e0d0      	b.n	8019ff0 <_svfiprintf_r+0x1d0>
 8019e4e:	2340      	movs	r3, #64	; 0x40
 8019e50:	616b      	str	r3, [r5, #20]
 8019e52:	2300      	movs	r3, #0
 8019e54:	9309      	str	r3, [sp, #36]	; 0x24
 8019e56:	2320      	movs	r3, #32
 8019e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e60:	2330      	movs	r3, #48	; 0x30
 8019e62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a008 <_svfiprintf_r+0x1e8>
 8019e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e6a:	f04f 0901 	mov.w	r9, #1
 8019e6e:	4623      	mov	r3, r4
 8019e70:	469a      	mov	sl, r3
 8019e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e76:	b10a      	cbz	r2, 8019e7c <_svfiprintf_r+0x5c>
 8019e78:	2a25      	cmp	r2, #37	; 0x25
 8019e7a:	d1f9      	bne.n	8019e70 <_svfiprintf_r+0x50>
 8019e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8019e80:	d00b      	beq.n	8019e9a <_svfiprintf_r+0x7a>
 8019e82:	465b      	mov	r3, fp
 8019e84:	4622      	mov	r2, r4
 8019e86:	4629      	mov	r1, r5
 8019e88:	4638      	mov	r0, r7
 8019e8a:	f7ff ff6f 	bl	8019d6c <__ssputs_r>
 8019e8e:	3001      	adds	r0, #1
 8019e90:	f000 80a9 	beq.w	8019fe6 <_svfiprintf_r+0x1c6>
 8019e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e96:	445a      	add	r2, fp
 8019e98:	9209      	str	r2, [sp, #36]	; 0x24
 8019e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	f000 80a1 	beq.w	8019fe6 <_svfiprintf_r+0x1c6>
 8019ea4:	2300      	movs	r3, #0
 8019ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8019eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019eae:	f10a 0a01 	add.w	sl, sl, #1
 8019eb2:	9304      	str	r3, [sp, #16]
 8019eb4:	9307      	str	r3, [sp, #28]
 8019eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019eba:	931a      	str	r3, [sp, #104]	; 0x68
 8019ebc:	4654      	mov	r4, sl
 8019ebe:	2205      	movs	r2, #5
 8019ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ec4:	4850      	ldr	r0, [pc, #320]	; (801a008 <_svfiprintf_r+0x1e8>)
 8019ec6:	f7e6 f993 	bl	80001f0 <memchr>
 8019eca:	9a04      	ldr	r2, [sp, #16]
 8019ecc:	b9d8      	cbnz	r0, 8019f06 <_svfiprintf_r+0xe6>
 8019ece:	06d0      	lsls	r0, r2, #27
 8019ed0:	bf44      	itt	mi
 8019ed2:	2320      	movmi	r3, #32
 8019ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ed8:	0711      	lsls	r1, r2, #28
 8019eda:	bf44      	itt	mi
 8019edc:	232b      	movmi	r3, #43	; 0x2b
 8019ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8019ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8019ee8:	d015      	beq.n	8019f16 <_svfiprintf_r+0xf6>
 8019eea:	9a07      	ldr	r2, [sp, #28]
 8019eec:	4654      	mov	r4, sl
 8019eee:	2000      	movs	r0, #0
 8019ef0:	f04f 0c0a 	mov.w	ip, #10
 8019ef4:	4621      	mov	r1, r4
 8019ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019efa:	3b30      	subs	r3, #48	; 0x30
 8019efc:	2b09      	cmp	r3, #9
 8019efe:	d94d      	bls.n	8019f9c <_svfiprintf_r+0x17c>
 8019f00:	b1b0      	cbz	r0, 8019f30 <_svfiprintf_r+0x110>
 8019f02:	9207      	str	r2, [sp, #28]
 8019f04:	e014      	b.n	8019f30 <_svfiprintf_r+0x110>
 8019f06:	eba0 0308 	sub.w	r3, r0, r8
 8019f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8019f0e:	4313      	orrs	r3, r2
 8019f10:	9304      	str	r3, [sp, #16]
 8019f12:	46a2      	mov	sl, r4
 8019f14:	e7d2      	b.n	8019ebc <_svfiprintf_r+0x9c>
 8019f16:	9b03      	ldr	r3, [sp, #12]
 8019f18:	1d19      	adds	r1, r3, #4
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	9103      	str	r1, [sp, #12]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	bfbb      	ittet	lt
 8019f22:	425b      	neglt	r3, r3
 8019f24:	f042 0202 	orrlt.w	r2, r2, #2
 8019f28:	9307      	strge	r3, [sp, #28]
 8019f2a:	9307      	strlt	r3, [sp, #28]
 8019f2c:	bfb8      	it	lt
 8019f2e:	9204      	strlt	r2, [sp, #16]
 8019f30:	7823      	ldrb	r3, [r4, #0]
 8019f32:	2b2e      	cmp	r3, #46	; 0x2e
 8019f34:	d10c      	bne.n	8019f50 <_svfiprintf_r+0x130>
 8019f36:	7863      	ldrb	r3, [r4, #1]
 8019f38:	2b2a      	cmp	r3, #42	; 0x2a
 8019f3a:	d134      	bne.n	8019fa6 <_svfiprintf_r+0x186>
 8019f3c:	9b03      	ldr	r3, [sp, #12]
 8019f3e:	1d1a      	adds	r2, r3, #4
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	9203      	str	r2, [sp, #12]
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	bfb8      	it	lt
 8019f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f4c:	3402      	adds	r4, #2
 8019f4e:	9305      	str	r3, [sp, #20]
 8019f50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801a018 <_svfiprintf_r+0x1f8>
 8019f54:	7821      	ldrb	r1, [r4, #0]
 8019f56:	2203      	movs	r2, #3
 8019f58:	4650      	mov	r0, sl
 8019f5a:	f7e6 f949 	bl	80001f0 <memchr>
 8019f5e:	b138      	cbz	r0, 8019f70 <_svfiprintf_r+0x150>
 8019f60:	9b04      	ldr	r3, [sp, #16]
 8019f62:	eba0 000a 	sub.w	r0, r0, sl
 8019f66:	2240      	movs	r2, #64	; 0x40
 8019f68:	4082      	lsls	r2, r0
 8019f6a:	4313      	orrs	r3, r2
 8019f6c:	3401      	adds	r4, #1
 8019f6e:	9304      	str	r3, [sp, #16]
 8019f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f74:	4825      	ldr	r0, [pc, #148]	; (801a00c <_svfiprintf_r+0x1ec>)
 8019f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f7a:	2206      	movs	r2, #6
 8019f7c:	f7e6 f938 	bl	80001f0 <memchr>
 8019f80:	2800      	cmp	r0, #0
 8019f82:	d038      	beq.n	8019ff6 <_svfiprintf_r+0x1d6>
 8019f84:	4b22      	ldr	r3, [pc, #136]	; (801a010 <_svfiprintf_r+0x1f0>)
 8019f86:	bb1b      	cbnz	r3, 8019fd0 <_svfiprintf_r+0x1b0>
 8019f88:	9b03      	ldr	r3, [sp, #12]
 8019f8a:	3307      	adds	r3, #7
 8019f8c:	f023 0307 	bic.w	r3, r3, #7
 8019f90:	3308      	adds	r3, #8
 8019f92:	9303      	str	r3, [sp, #12]
 8019f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f96:	4433      	add	r3, r6
 8019f98:	9309      	str	r3, [sp, #36]	; 0x24
 8019f9a:	e768      	b.n	8019e6e <_svfiprintf_r+0x4e>
 8019f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019fa0:	460c      	mov	r4, r1
 8019fa2:	2001      	movs	r0, #1
 8019fa4:	e7a6      	b.n	8019ef4 <_svfiprintf_r+0xd4>
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	3401      	adds	r4, #1
 8019faa:	9305      	str	r3, [sp, #20]
 8019fac:	4619      	mov	r1, r3
 8019fae:	f04f 0c0a 	mov.w	ip, #10
 8019fb2:	4620      	mov	r0, r4
 8019fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019fb8:	3a30      	subs	r2, #48	; 0x30
 8019fba:	2a09      	cmp	r2, #9
 8019fbc:	d903      	bls.n	8019fc6 <_svfiprintf_r+0x1a6>
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d0c6      	beq.n	8019f50 <_svfiprintf_r+0x130>
 8019fc2:	9105      	str	r1, [sp, #20]
 8019fc4:	e7c4      	b.n	8019f50 <_svfiprintf_r+0x130>
 8019fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8019fca:	4604      	mov	r4, r0
 8019fcc:	2301      	movs	r3, #1
 8019fce:	e7f0      	b.n	8019fb2 <_svfiprintf_r+0x192>
 8019fd0:	ab03      	add	r3, sp, #12
 8019fd2:	9300      	str	r3, [sp, #0]
 8019fd4:	462a      	mov	r2, r5
 8019fd6:	4b0f      	ldr	r3, [pc, #60]	; (801a014 <_svfiprintf_r+0x1f4>)
 8019fd8:	a904      	add	r1, sp, #16
 8019fda:	4638      	mov	r0, r7
 8019fdc:	f7fd f8f0 	bl	80171c0 <_printf_float>
 8019fe0:	1c42      	adds	r2, r0, #1
 8019fe2:	4606      	mov	r6, r0
 8019fe4:	d1d6      	bne.n	8019f94 <_svfiprintf_r+0x174>
 8019fe6:	89ab      	ldrh	r3, [r5, #12]
 8019fe8:	065b      	lsls	r3, r3, #25
 8019fea:	f53f af2d 	bmi.w	8019e48 <_svfiprintf_r+0x28>
 8019fee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ff0:	b01d      	add	sp, #116	; 0x74
 8019ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ff6:	ab03      	add	r3, sp, #12
 8019ff8:	9300      	str	r3, [sp, #0]
 8019ffa:	462a      	mov	r2, r5
 8019ffc:	4b05      	ldr	r3, [pc, #20]	; (801a014 <_svfiprintf_r+0x1f4>)
 8019ffe:	a904      	add	r1, sp, #16
 801a000:	4638      	mov	r0, r7
 801a002:	f7fd fb81 	bl	8017708 <_printf_i>
 801a006:	e7eb      	b.n	8019fe0 <_svfiprintf_r+0x1c0>
 801a008:	0801bd5c 	.word	0x0801bd5c
 801a00c:	0801bd66 	.word	0x0801bd66
 801a010:	080171c1 	.word	0x080171c1
 801a014:	08019d6d 	.word	0x08019d6d
 801a018:	0801bd62 	.word	0x0801bd62

0801a01c <_sungetc_r>:
 801a01c:	b538      	push	{r3, r4, r5, lr}
 801a01e:	1c4b      	adds	r3, r1, #1
 801a020:	4614      	mov	r4, r2
 801a022:	d103      	bne.n	801a02c <_sungetc_r+0x10>
 801a024:	f04f 35ff 	mov.w	r5, #4294967295
 801a028:	4628      	mov	r0, r5
 801a02a:	bd38      	pop	{r3, r4, r5, pc}
 801a02c:	8993      	ldrh	r3, [r2, #12]
 801a02e:	f023 0320 	bic.w	r3, r3, #32
 801a032:	8193      	strh	r3, [r2, #12]
 801a034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a036:	6852      	ldr	r2, [r2, #4]
 801a038:	b2cd      	uxtb	r5, r1
 801a03a:	b18b      	cbz	r3, 801a060 <_sungetc_r+0x44>
 801a03c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a03e:	4293      	cmp	r3, r2
 801a040:	dd08      	ble.n	801a054 <_sungetc_r+0x38>
 801a042:	6823      	ldr	r3, [r4, #0]
 801a044:	1e5a      	subs	r2, r3, #1
 801a046:	6022      	str	r2, [r4, #0]
 801a048:	f803 5c01 	strb.w	r5, [r3, #-1]
 801a04c:	6863      	ldr	r3, [r4, #4]
 801a04e:	3301      	adds	r3, #1
 801a050:	6063      	str	r3, [r4, #4]
 801a052:	e7e9      	b.n	801a028 <_sungetc_r+0xc>
 801a054:	4621      	mov	r1, r4
 801a056:	f000 fd2c 	bl	801aab2 <__submore>
 801a05a:	2800      	cmp	r0, #0
 801a05c:	d0f1      	beq.n	801a042 <_sungetc_r+0x26>
 801a05e:	e7e1      	b.n	801a024 <_sungetc_r+0x8>
 801a060:	6921      	ldr	r1, [r4, #16]
 801a062:	6823      	ldr	r3, [r4, #0]
 801a064:	b151      	cbz	r1, 801a07c <_sungetc_r+0x60>
 801a066:	4299      	cmp	r1, r3
 801a068:	d208      	bcs.n	801a07c <_sungetc_r+0x60>
 801a06a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801a06e:	42a9      	cmp	r1, r5
 801a070:	d104      	bne.n	801a07c <_sungetc_r+0x60>
 801a072:	3b01      	subs	r3, #1
 801a074:	3201      	adds	r2, #1
 801a076:	6023      	str	r3, [r4, #0]
 801a078:	6062      	str	r2, [r4, #4]
 801a07a:	e7d5      	b.n	801a028 <_sungetc_r+0xc>
 801a07c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801a080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a084:	6363      	str	r3, [r4, #52]	; 0x34
 801a086:	2303      	movs	r3, #3
 801a088:	63a3      	str	r3, [r4, #56]	; 0x38
 801a08a:	4623      	mov	r3, r4
 801a08c:	f803 5f46 	strb.w	r5, [r3, #70]!
 801a090:	6023      	str	r3, [r4, #0]
 801a092:	2301      	movs	r3, #1
 801a094:	e7dc      	b.n	801a050 <_sungetc_r+0x34>

0801a096 <__ssrefill_r>:
 801a096:	b510      	push	{r4, lr}
 801a098:	460c      	mov	r4, r1
 801a09a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a09c:	b169      	cbz	r1, 801a0ba <__ssrefill_r+0x24>
 801a09e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a0a2:	4299      	cmp	r1, r3
 801a0a4:	d001      	beq.n	801a0aa <__ssrefill_r+0x14>
 801a0a6:	f7fe fde9 	bl	8018c7c <_free_r>
 801a0aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a0ac:	6063      	str	r3, [r4, #4]
 801a0ae:	2000      	movs	r0, #0
 801a0b0:	6360      	str	r0, [r4, #52]	; 0x34
 801a0b2:	b113      	cbz	r3, 801a0ba <__ssrefill_r+0x24>
 801a0b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a0b6:	6023      	str	r3, [r4, #0]
 801a0b8:	bd10      	pop	{r4, pc}
 801a0ba:	6923      	ldr	r3, [r4, #16]
 801a0bc:	6023      	str	r3, [r4, #0]
 801a0be:	2300      	movs	r3, #0
 801a0c0:	6063      	str	r3, [r4, #4]
 801a0c2:	89a3      	ldrh	r3, [r4, #12]
 801a0c4:	f043 0320 	orr.w	r3, r3, #32
 801a0c8:	81a3      	strh	r3, [r4, #12]
 801a0ca:	f04f 30ff 	mov.w	r0, #4294967295
 801a0ce:	e7f3      	b.n	801a0b8 <__ssrefill_r+0x22>

0801a0d0 <__ssvfiscanf_r>:
 801a0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0d4:	460c      	mov	r4, r1
 801a0d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801a0da:	2100      	movs	r1, #0
 801a0dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801a0e0:	49a6      	ldr	r1, [pc, #664]	; (801a37c <__ssvfiscanf_r+0x2ac>)
 801a0e2:	91a0      	str	r1, [sp, #640]	; 0x280
 801a0e4:	f10d 0804 	add.w	r8, sp, #4
 801a0e8:	49a5      	ldr	r1, [pc, #660]	; (801a380 <__ssvfiscanf_r+0x2b0>)
 801a0ea:	4fa6      	ldr	r7, [pc, #664]	; (801a384 <__ssvfiscanf_r+0x2b4>)
 801a0ec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801a388 <__ssvfiscanf_r+0x2b8>
 801a0f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801a0f4:	4606      	mov	r6, r0
 801a0f6:	91a1      	str	r1, [sp, #644]	; 0x284
 801a0f8:	9300      	str	r3, [sp, #0]
 801a0fa:	7813      	ldrb	r3, [r2, #0]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	f000 815a 	beq.w	801a3b6 <__ssvfiscanf_r+0x2e6>
 801a102:	5cf9      	ldrb	r1, [r7, r3]
 801a104:	f011 0108 	ands.w	r1, r1, #8
 801a108:	f102 0501 	add.w	r5, r2, #1
 801a10c:	d019      	beq.n	801a142 <__ssvfiscanf_r+0x72>
 801a10e:	6863      	ldr	r3, [r4, #4]
 801a110:	2b00      	cmp	r3, #0
 801a112:	dd0f      	ble.n	801a134 <__ssvfiscanf_r+0x64>
 801a114:	6823      	ldr	r3, [r4, #0]
 801a116:	781a      	ldrb	r2, [r3, #0]
 801a118:	5cba      	ldrb	r2, [r7, r2]
 801a11a:	0712      	lsls	r2, r2, #28
 801a11c:	d401      	bmi.n	801a122 <__ssvfiscanf_r+0x52>
 801a11e:	462a      	mov	r2, r5
 801a120:	e7eb      	b.n	801a0fa <__ssvfiscanf_r+0x2a>
 801a122:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a124:	3201      	adds	r2, #1
 801a126:	9245      	str	r2, [sp, #276]	; 0x114
 801a128:	6862      	ldr	r2, [r4, #4]
 801a12a:	3301      	adds	r3, #1
 801a12c:	3a01      	subs	r2, #1
 801a12e:	6062      	str	r2, [r4, #4]
 801a130:	6023      	str	r3, [r4, #0]
 801a132:	e7ec      	b.n	801a10e <__ssvfiscanf_r+0x3e>
 801a134:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a136:	4621      	mov	r1, r4
 801a138:	4630      	mov	r0, r6
 801a13a:	4798      	blx	r3
 801a13c:	2800      	cmp	r0, #0
 801a13e:	d0e9      	beq.n	801a114 <__ssvfiscanf_r+0x44>
 801a140:	e7ed      	b.n	801a11e <__ssvfiscanf_r+0x4e>
 801a142:	2b25      	cmp	r3, #37	; 0x25
 801a144:	d012      	beq.n	801a16c <__ssvfiscanf_r+0x9c>
 801a146:	469a      	mov	sl, r3
 801a148:	6863      	ldr	r3, [r4, #4]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	f340 8091 	ble.w	801a272 <__ssvfiscanf_r+0x1a2>
 801a150:	6822      	ldr	r2, [r4, #0]
 801a152:	7813      	ldrb	r3, [r2, #0]
 801a154:	4553      	cmp	r3, sl
 801a156:	f040 812e 	bne.w	801a3b6 <__ssvfiscanf_r+0x2e6>
 801a15a:	6863      	ldr	r3, [r4, #4]
 801a15c:	3b01      	subs	r3, #1
 801a15e:	6063      	str	r3, [r4, #4]
 801a160:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801a162:	3201      	adds	r2, #1
 801a164:	3301      	adds	r3, #1
 801a166:	6022      	str	r2, [r4, #0]
 801a168:	9345      	str	r3, [sp, #276]	; 0x114
 801a16a:	e7d8      	b.n	801a11e <__ssvfiscanf_r+0x4e>
 801a16c:	9141      	str	r1, [sp, #260]	; 0x104
 801a16e:	9143      	str	r1, [sp, #268]	; 0x10c
 801a170:	7853      	ldrb	r3, [r2, #1]
 801a172:	2b2a      	cmp	r3, #42	; 0x2a
 801a174:	bf02      	ittt	eq
 801a176:	2310      	moveq	r3, #16
 801a178:	1c95      	addeq	r5, r2, #2
 801a17a:	9341      	streq	r3, [sp, #260]	; 0x104
 801a17c:	220a      	movs	r2, #10
 801a17e:	46aa      	mov	sl, r5
 801a180:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801a184:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801a188:	2b09      	cmp	r3, #9
 801a18a:	d91c      	bls.n	801a1c6 <__ssvfiscanf_r+0xf6>
 801a18c:	487e      	ldr	r0, [pc, #504]	; (801a388 <__ssvfiscanf_r+0x2b8>)
 801a18e:	2203      	movs	r2, #3
 801a190:	f7e6 f82e 	bl	80001f0 <memchr>
 801a194:	b138      	cbz	r0, 801a1a6 <__ssvfiscanf_r+0xd6>
 801a196:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a198:	eba0 0009 	sub.w	r0, r0, r9
 801a19c:	2301      	movs	r3, #1
 801a19e:	4083      	lsls	r3, r0
 801a1a0:	4313      	orrs	r3, r2
 801a1a2:	9341      	str	r3, [sp, #260]	; 0x104
 801a1a4:	4655      	mov	r5, sl
 801a1a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a1aa:	2b78      	cmp	r3, #120	; 0x78
 801a1ac:	d806      	bhi.n	801a1bc <__ssvfiscanf_r+0xec>
 801a1ae:	2b57      	cmp	r3, #87	; 0x57
 801a1b0:	d810      	bhi.n	801a1d4 <__ssvfiscanf_r+0x104>
 801a1b2:	2b25      	cmp	r3, #37	; 0x25
 801a1b4:	d0c7      	beq.n	801a146 <__ssvfiscanf_r+0x76>
 801a1b6:	d857      	bhi.n	801a268 <__ssvfiscanf_r+0x198>
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d065      	beq.n	801a288 <__ssvfiscanf_r+0x1b8>
 801a1bc:	2303      	movs	r3, #3
 801a1be:	9347      	str	r3, [sp, #284]	; 0x11c
 801a1c0:	230a      	movs	r3, #10
 801a1c2:	9342      	str	r3, [sp, #264]	; 0x108
 801a1c4:	e076      	b.n	801a2b4 <__ssvfiscanf_r+0x1e4>
 801a1c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801a1c8:	fb02 1103 	mla	r1, r2, r3, r1
 801a1cc:	3930      	subs	r1, #48	; 0x30
 801a1ce:	9143      	str	r1, [sp, #268]	; 0x10c
 801a1d0:	4655      	mov	r5, sl
 801a1d2:	e7d4      	b.n	801a17e <__ssvfiscanf_r+0xae>
 801a1d4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801a1d8:	2a20      	cmp	r2, #32
 801a1da:	d8ef      	bhi.n	801a1bc <__ssvfiscanf_r+0xec>
 801a1dc:	a101      	add	r1, pc, #4	; (adr r1, 801a1e4 <__ssvfiscanf_r+0x114>)
 801a1de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a1e2:	bf00      	nop
 801a1e4:	0801a297 	.word	0x0801a297
 801a1e8:	0801a1bd 	.word	0x0801a1bd
 801a1ec:	0801a1bd 	.word	0x0801a1bd
 801a1f0:	0801a2f5 	.word	0x0801a2f5
 801a1f4:	0801a1bd 	.word	0x0801a1bd
 801a1f8:	0801a1bd 	.word	0x0801a1bd
 801a1fc:	0801a1bd 	.word	0x0801a1bd
 801a200:	0801a1bd 	.word	0x0801a1bd
 801a204:	0801a1bd 	.word	0x0801a1bd
 801a208:	0801a1bd 	.word	0x0801a1bd
 801a20c:	0801a1bd 	.word	0x0801a1bd
 801a210:	0801a30b 	.word	0x0801a30b
 801a214:	0801a2f1 	.word	0x0801a2f1
 801a218:	0801a26f 	.word	0x0801a26f
 801a21c:	0801a26f 	.word	0x0801a26f
 801a220:	0801a26f 	.word	0x0801a26f
 801a224:	0801a1bd 	.word	0x0801a1bd
 801a228:	0801a2ad 	.word	0x0801a2ad
 801a22c:	0801a1bd 	.word	0x0801a1bd
 801a230:	0801a1bd 	.word	0x0801a1bd
 801a234:	0801a1bd 	.word	0x0801a1bd
 801a238:	0801a1bd 	.word	0x0801a1bd
 801a23c:	0801a31b 	.word	0x0801a31b
 801a240:	0801a2e9 	.word	0x0801a2e9
 801a244:	0801a28f 	.word	0x0801a28f
 801a248:	0801a1bd 	.word	0x0801a1bd
 801a24c:	0801a1bd 	.word	0x0801a1bd
 801a250:	0801a317 	.word	0x0801a317
 801a254:	0801a1bd 	.word	0x0801a1bd
 801a258:	0801a2f1 	.word	0x0801a2f1
 801a25c:	0801a1bd 	.word	0x0801a1bd
 801a260:	0801a1bd 	.word	0x0801a1bd
 801a264:	0801a297 	.word	0x0801a297
 801a268:	3b45      	subs	r3, #69	; 0x45
 801a26a:	2b02      	cmp	r3, #2
 801a26c:	d8a6      	bhi.n	801a1bc <__ssvfiscanf_r+0xec>
 801a26e:	2305      	movs	r3, #5
 801a270:	e01f      	b.n	801a2b2 <__ssvfiscanf_r+0x1e2>
 801a272:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a274:	4621      	mov	r1, r4
 801a276:	4630      	mov	r0, r6
 801a278:	4798      	blx	r3
 801a27a:	2800      	cmp	r0, #0
 801a27c:	f43f af68 	beq.w	801a150 <__ssvfiscanf_r+0x80>
 801a280:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a282:	2800      	cmp	r0, #0
 801a284:	f040 808d 	bne.w	801a3a2 <__ssvfiscanf_r+0x2d2>
 801a288:	f04f 30ff 	mov.w	r0, #4294967295
 801a28c:	e08f      	b.n	801a3ae <__ssvfiscanf_r+0x2de>
 801a28e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a290:	f042 0220 	orr.w	r2, r2, #32
 801a294:	9241      	str	r2, [sp, #260]	; 0x104
 801a296:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a29c:	9241      	str	r2, [sp, #260]	; 0x104
 801a29e:	2210      	movs	r2, #16
 801a2a0:	2b6f      	cmp	r3, #111	; 0x6f
 801a2a2:	9242      	str	r2, [sp, #264]	; 0x108
 801a2a4:	bf34      	ite	cc
 801a2a6:	2303      	movcc	r3, #3
 801a2a8:	2304      	movcs	r3, #4
 801a2aa:	e002      	b.n	801a2b2 <__ssvfiscanf_r+0x1e2>
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	9342      	str	r3, [sp, #264]	; 0x108
 801a2b0:	2303      	movs	r3, #3
 801a2b2:	9347      	str	r3, [sp, #284]	; 0x11c
 801a2b4:	6863      	ldr	r3, [r4, #4]
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	dd3d      	ble.n	801a336 <__ssvfiscanf_r+0x266>
 801a2ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a2bc:	0659      	lsls	r1, r3, #25
 801a2be:	d404      	bmi.n	801a2ca <__ssvfiscanf_r+0x1fa>
 801a2c0:	6823      	ldr	r3, [r4, #0]
 801a2c2:	781a      	ldrb	r2, [r3, #0]
 801a2c4:	5cba      	ldrb	r2, [r7, r2]
 801a2c6:	0712      	lsls	r2, r2, #28
 801a2c8:	d43c      	bmi.n	801a344 <__ssvfiscanf_r+0x274>
 801a2ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801a2cc:	2b02      	cmp	r3, #2
 801a2ce:	dc4b      	bgt.n	801a368 <__ssvfiscanf_r+0x298>
 801a2d0:	466b      	mov	r3, sp
 801a2d2:	4622      	mov	r2, r4
 801a2d4:	a941      	add	r1, sp, #260	; 0x104
 801a2d6:	4630      	mov	r0, r6
 801a2d8:	f000 f9b6 	bl	801a648 <_scanf_chars>
 801a2dc:	2801      	cmp	r0, #1
 801a2de:	d06a      	beq.n	801a3b6 <__ssvfiscanf_r+0x2e6>
 801a2e0:	2802      	cmp	r0, #2
 801a2e2:	f47f af1c 	bne.w	801a11e <__ssvfiscanf_r+0x4e>
 801a2e6:	e7cb      	b.n	801a280 <__ssvfiscanf_r+0x1b0>
 801a2e8:	2308      	movs	r3, #8
 801a2ea:	9342      	str	r3, [sp, #264]	; 0x108
 801a2ec:	2304      	movs	r3, #4
 801a2ee:	e7e0      	b.n	801a2b2 <__ssvfiscanf_r+0x1e2>
 801a2f0:	220a      	movs	r2, #10
 801a2f2:	e7d5      	b.n	801a2a0 <__ssvfiscanf_r+0x1d0>
 801a2f4:	4629      	mov	r1, r5
 801a2f6:	4640      	mov	r0, r8
 801a2f8:	f000 fba2 	bl	801aa40 <__sccl>
 801a2fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a302:	9341      	str	r3, [sp, #260]	; 0x104
 801a304:	4605      	mov	r5, r0
 801a306:	2301      	movs	r3, #1
 801a308:	e7d3      	b.n	801a2b2 <__ssvfiscanf_r+0x1e2>
 801a30a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a310:	9341      	str	r3, [sp, #260]	; 0x104
 801a312:	2300      	movs	r3, #0
 801a314:	e7cd      	b.n	801a2b2 <__ssvfiscanf_r+0x1e2>
 801a316:	2302      	movs	r3, #2
 801a318:	e7cb      	b.n	801a2b2 <__ssvfiscanf_r+0x1e2>
 801a31a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801a31c:	06c3      	lsls	r3, r0, #27
 801a31e:	f53f aefe 	bmi.w	801a11e <__ssvfiscanf_r+0x4e>
 801a322:	9b00      	ldr	r3, [sp, #0]
 801a324:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a326:	1d19      	adds	r1, r3, #4
 801a328:	9100      	str	r1, [sp, #0]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	07c0      	lsls	r0, r0, #31
 801a32e:	bf4c      	ite	mi
 801a330:	801a      	strhmi	r2, [r3, #0]
 801a332:	601a      	strpl	r2, [r3, #0]
 801a334:	e6f3      	b.n	801a11e <__ssvfiscanf_r+0x4e>
 801a336:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a338:	4621      	mov	r1, r4
 801a33a:	4630      	mov	r0, r6
 801a33c:	4798      	blx	r3
 801a33e:	2800      	cmp	r0, #0
 801a340:	d0bb      	beq.n	801a2ba <__ssvfiscanf_r+0x1ea>
 801a342:	e79d      	b.n	801a280 <__ssvfiscanf_r+0x1b0>
 801a344:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a346:	3201      	adds	r2, #1
 801a348:	9245      	str	r2, [sp, #276]	; 0x114
 801a34a:	6862      	ldr	r2, [r4, #4]
 801a34c:	3a01      	subs	r2, #1
 801a34e:	2a00      	cmp	r2, #0
 801a350:	6062      	str	r2, [r4, #4]
 801a352:	dd02      	ble.n	801a35a <__ssvfiscanf_r+0x28a>
 801a354:	3301      	adds	r3, #1
 801a356:	6023      	str	r3, [r4, #0]
 801a358:	e7b2      	b.n	801a2c0 <__ssvfiscanf_r+0x1f0>
 801a35a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a35c:	4621      	mov	r1, r4
 801a35e:	4630      	mov	r0, r6
 801a360:	4798      	blx	r3
 801a362:	2800      	cmp	r0, #0
 801a364:	d0ac      	beq.n	801a2c0 <__ssvfiscanf_r+0x1f0>
 801a366:	e78b      	b.n	801a280 <__ssvfiscanf_r+0x1b0>
 801a368:	2b04      	cmp	r3, #4
 801a36a:	dc0f      	bgt.n	801a38c <__ssvfiscanf_r+0x2bc>
 801a36c:	466b      	mov	r3, sp
 801a36e:	4622      	mov	r2, r4
 801a370:	a941      	add	r1, sp, #260	; 0x104
 801a372:	4630      	mov	r0, r6
 801a374:	f000 f9c2 	bl	801a6fc <_scanf_i>
 801a378:	e7b0      	b.n	801a2dc <__ssvfiscanf_r+0x20c>
 801a37a:	bf00      	nop
 801a37c:	0801a01d 	.word	0x0801a01d
 801a380:	0801a097 	.word	0x0801a097
 801a384:	0801b9d9 	.word	0x0801b9d9
 801a388:	0801bd62 	.word	0x0801bd62
 801a38c:	4b0b      	ldr	r3, [pc, #44]	; (801a3bc <__ssvfiscanf_r+0x2ec>)
 801a38e:	2b00      	cmp	r3, #0
 801a390:	f43f aec5 	beq.w	801a11e <__ssvfiscanf_r+0x4e>
 801a394:	466b      	mov	r3, sp
 801a396:	4622      	mov	r2, r4
 801a398:	a941      	add	r1, sp, #260	; 0x104
 801a39a:	4630      	mov	r0, r6
 801a39c:	f3af 8000 	nop.w
 801a3a0:	e79c      	b.n	801a2dc <__ssvfiscanf_r+0x20c>
 801a3a2:	89a3      	ldrh	r3, [r4, #12]
 801a3a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a3a8:	bf18      	it	ne
 801a3aa:	f04f 30ff 	movne.w	r0, #4294967295
 801a3ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801a3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a3b8:	e7f9      	b.n	801a3ae <__ssvfiscanf_r+0x2de>
 801a3ba:	bf00      	nop
 801a3bc:	00000000 	.word	0x00000000

0801a3c0 <__sfputc_r>:
 801a3c0:	6893      	ldr	r3, [r2, #8]
 801a3c2:	3b01      	subs	r3, #1
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	b410      	push	{r4}
 801a3c8:	6093      	str	r3, [r2, #8]
 801a3ca:	da08      	bge.n	801a3de <__sfputc_r+0x1e>
 801a3cc:	6994      	ldr	r4, [r2, #24]
 801a3ce:	42a3      	cmp	r3, r4
 801a3d0:	db01      	blt.n	801a3d6 <__sfputc_r+0x16>
 801a3d2:	290a      	cmp	r1, #10
 801a3d4:	d103      	bne.n	801a3de <__sfputc_r+0x1e>
 801a3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3da:	f000 bba4 	b.w	801ab26 <__swbuf_r>
 801a3de:	6813      	ldr	r3, [r2, #0]
 801a3e0:	1c58      	adds	r0, r3, #1
 801a3e2:	6010      	str	r0, [r2, #0]
 801a3e4:	7019      	strb	r1, [r3, #0]
 801a3e6:	4608      	mov	r0, r1
 801a3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3ec:	4770      	bx	lr

0801a3ee <__sfputs_r>:
 801a3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3f0:	4606      	mov	r6, r0
 801a3f2:	460f      	mov	r7, r1
 801a3f4:	4614      	mov	r4, r2
 801a3f6:	18d5      	adds	r5, r2, r3
 801a3f8:	42ac      	cmp	r4, r5
 801a3fa:	d101      	bne.n	801a400 <__sfputs_r+0x12>
 801a3fc:	2000      	movs	r0, #0
 801a3fe:	e007      	b.n	801a410 <__sfputs_r+0x22>
 801a400:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a404:	463a      	mov	r2, r7
 801a406:	4630      	mov	r0, r6
 801a408:	f7ff ffda 	bl	801a3c0 <__sfputc_r>
 801a40c:	1c43      	adds	r3, r0, #1
 801a40e:	d1f3      	bne.n	801a3f8 <__sfputs_r+0xa>
 801a410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a414 <_vfiprintf_r>:
 801a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a418:	460d      	mov	r5, r1
 801a41a:	b09d      	sub	sp, #116	; 0x74
 801a41c:	4614      	mov	r4, r2
 801a41e:	4698      	mov	r8, r3
 801a420:	4606      	mov	r6, r0
 801a422:	b118      	cbz	r0, 801a42c <_vfiprintf_r+0x18>
 801a424:	6a03      	ldr	r3, [r0, #32]
 801a426:	b90b      	cbnz	r3, 801a42c <_vfiprintf_r+0x18>
 801a428:	f7fd fb1c 	bl	8017a64 <__sinit>
 801a42c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a42e:	07d9      	lsls	r1, r3, #31
 801a430:	d405      	bmi.n	801a43e <_vfiprintf_r+0x2a>
 801a432:	89ab      	ldrh	r3, [r5, #12]
 801a434:	059a      	lsls	r2, r3, #22
 801a436:	d402      	bmi.n	801a43e <_vfiprintf_r+0x2a>
 801a438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a43a:	f7fd fd84 	bl	8017f46 <__retarget_lock_acquire_recursive>
 801a43e:	89ab      	ldrh	r3, [r5, #12]
 801a440:	071b      	lsls	r3, r3, #28
 801a442:	d501      	bpl.n	801a448 <_vfiprintf_r+0x34>
 801a444:	692b      	ldr	r3, [r5, #16]
 801a446:	b99b      	cbnz	r3, 801a470 <_vfiprintf_r+0x5c>
 801a448:	4629      	mov	r1, r5
 801a44a:	4630      	mov	r0, r6
 801a44c:	f000 fba8 	bl	801aba0 <__swsetup_r>
 801a450:	b170      	cbz	r0, 801a470 <_vfiprintf_r+0x5c>
 801a452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a454:	07dc      	lsls	r4, r3, #31
 801a456:	d504      	bpl.n	801a462 <_vfiprintf_r+0x4e>
 801a458:	f04f 30ff 	mov.w	r0, #4294967295
 801a45c:	b01d      	add	sp, #116	; 0x74
 801a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a462:	89ab      	ldrh	r3, [r5, #12]
 801a464:	0598      	lsls	r0, r3, #22
 801a466:	d4f7      	bmi.n	801a458 <_vfiprintf_r+0x44>
 801a468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a46a:	f7fd fd6d 	bl	8017f48 <__retarget_lock_release_recursive>
 801a46e:	e7f3      	b.n	801a458 <_vfiprintf_r+0x44>
 801a470:	2300      	movs	r3, #0
 801a472:	9309      	str	r3, [sp, #36]	; 0x24
 801a474:	2320      	movs	r3, #32
 801a476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a47a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a47e:	2330      	movs	r3, #48	; 0x30
 801a480:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a634 <_vfiprintf_r+0x220>
 801a484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a488:	f04f 0901 	mov.w	r9, #1
 801a48c:	4623      	mov	r3, r4
 801a48e:	469a      	mov	sl, r3
 801a490:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a494:	b10a      	cbz	r2, 801a49a <_vfiprintf_r+0x86>
 801a496:	2a25      	cmp	r2, #37	; 0x25
 801a498:	d1f9      	bne.n	801a48e <_vfiprintf_r+0x7a>
 801a49a:	ebba 0b04 	subs.w	fp, sl, r4
 801a49e:	d00b      	beq.n	801a4b8 <_vfiprintf_r+0xa4>
 801a4a0:	465b      	mov	r3, fp
 801a4a2:	4622      	mov	r2, r4
 801a4a4:	4629      	mov	r1, r5
 801a4a6:	4630      	mov	r0, r6
 801a4a8:	f7ff ffa1 	bl	801a3ee <__sfputs_r>
 801a4ac:	3001      	adds	r0, #1
 801a4ae:	f000 80a9 	beq.w	801a604 <_vfiprintf_r+0x1f0>
 801a4b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4b4:	445a      	add	r2, fp
 801a4b6:	9209      	str	r2, [sp, #36]	; 0x24
 801a4b8:	f89a 3000 	ldrb.w	r3, [sl]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	f000 80a1 	beq.w	801a604 <_vfiprintf_r+0x1f0>
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	f04f 32ff 	mov.w	r2, #4294967295
 801a4c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a4cc:	f10a 0a01 	add.w	sl, sl, #1
 801a4d0:	9304      	str	r3, [sp, #16]
 801a4d2:	9307      	str	r3, [sp, #28]
 801a4d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a4d8:	931a      	str	r3, [sp, #104]	; 0x68
 801a4da:	4654      	mov	r4, sl
 801a4dc:	2205      	movs	r2, #5
 801a4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4e2:	4854      	ldr	r0, [pc, #336]	; (801a634 <_vfiprintf_r+0x220>)
 801a4e4:	f7e5 fe84 	bl	80001f0 <memchr>
 801a4e8:	9a04      	ldr	r2, [sp, #16]
 801a4ea:	b9d8      	cbnz	r0, 801a524 <_vfiprintf_r+0x110>
 801a4ec:	06d1      	lsls	r1, r2, #27
 801a4ee:	bf44      	itt	mi
 801a4f0:	2320      	movmi	r3, #32
 801a4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4f6:	0713      	lsls	r3, r2, #28
 801a4f8:	bf44      	itt	mi
 801a4fa:	232b      	movmi	r3, #43	; 0x2b
 801a4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a500:	f89a 3000 	ldrb.w	r3, [sl]
 801a504:	2b2a      	cmp	r3, #42	; 0x2a
 801a506:	d015      	beq.n	801a534 <_vfiprintf_r+0x120>
 801a508:	9a07      	ldr	r2, [sp, #28]
 801a50a:	4654      	mov	r4, sl
 801a50c:	2000      	movs	r0, #0
 801a50e:	f04f 0c0a 	mov.w	ip, #10
 801a512:	4621      	mov	r1, r4
 801a514:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a518:	3b30      	subs	r3, #48	; 0x30
 801a51a:	2b09      	cmp	r3, #9
 801a51c:	d94d      	bls.n	801a5ba <_vfiprintf_r+0x1a6>
 801a51e:	b1b0      	cbz	r0, 801a54e <_vfiprintf_r+0x13a>
 801a520:	9207      	str	r2, [sp, #28]
 801a522:	e014      	b.n	801a54e <_vfiprintf_r+0x13a>
 801a524:	eba0 0308 	sub.w	r3, r0, r8
 801a528:	fa09 f303 	lsl.w	r3, r9, r3
 801a52c:	4313      	orrs	r3, r2
 801a52e:	9304      	str	r3, [sp, #16]
 801a530:	46a2      	mov	sl, r4
 801a532:	e7d2      	b.n	801a4da <_vfiprintf_r+0xc6>
 801a534:	9b03      	ldr	r3, [sp, #12]
 801a536:	1d19      	adds	r1, r3, #4
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	9103      	str	r1, [sp, #12]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	bfbb      	ittet	lt
 801a540:	425b      	neglt	r3, r3
 801a542:	f042 0202 	orrlt.w	r2, r2, #2
 801a546:	9307      	strge	r3, [sp, #28]
 801a548:	9307      	strlt	r3, [sp, #28]
 801a54a:	bfb8      	it	lt
 801a54c:	9204      	strlt	r2, [sp, #16]
 801a54e:	7823      	ldrb	r3, [r4, #0]
 801a550:	2b2e      	cmp	r3, #46	; 0x2e
 801a552:	d10c      	bne.n	801a56e <_vfiprintf_r+0x15a>
 801a554:	7863      	ldrb	r3, [r4, #1]
 801a556:	2b2a      	cmp	r3, #42	; 0x2a
 801a558:	d134      	bne.n	801a5c4 <_vfiprintf_r+0x1b0>
 801a55a:	9b03      	ldr	r3, [sp, #12]
 801a55c:	1d1a      	adds	r2, r3, #4
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	9203      	str	r2, [sp, #12]
 801a562:	2b00      	cmp	r3, #0
 801a564:	bfb8      	it	lt
 801a566:	f04f 33ff 	movlt.w	r3, #4294967295
 801a56a:	3402      	adds	r4, #2
 801a56c:	9305      	str	r3, [sp, #20]
 801a56e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a644 <_vfiprintf_r+0x230>
 801a572:	7821      	ldrb	r1, [r4, #0]
 801a574:	2203      	movs	r2, #3
 801a576:	4650      	mov	r0, sl
 801a578:	f7e5 fe3a 	bl	80001f0 <memchr>
 801a57c:	b138      	cbz	r0, 801a58e <_vfiprintf_r+0x17a>
 801a57e:	9b04      	ldr	r3, [sp, #16]
 801a580:	eba0 000a 	sub.w	r0, r0, sl
 801a584:	2240      	movs	r2, #64	; 0x40
 801a586:	4082      	lsls	r2, r0
 801a588:	4313      	orrs	r3, r2
 801a58a:	3401      	adds	r4, #1
 801a58c:	9304      	str	r3, [sp, #16]
 801a58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a592:	4829      	ldr	r0, [pc, #164]	; (801a638 <_vfiprintf_r+0x224>)
 801a594:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a598:	2206      	movs	r2, #6
 801a59a:	f7e5 fe29 	bl	80001f0 <memchr>
 801a59e:	2800      	cmp	r0, #0
 801a5a0:	d03f      	beq.n	801a622 <_vfiprintf_r+0x20e>
 801a5a2:	4b26      	ldr	r3, [pc, #152]	; (801a63c <_vfiprintf_r+0x228>)
 801a5a4:	bb1b      	cbnz	r3, 801a5ee <_vfiprintf_r+0x1da>
 801a5a6:	9b03      	ldr	r3, [sp, #12]
 801a5a8:	3307      	adds	r3, #7
 801a5aa:	f023 0307 	bic.w	r3, r3, #7
 801a5ae:	3308      	adds	r3, #8
 801a5b0:	9303      	str	r3, [sp, #12]
 801a5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5b4:	443b      	add	r3, r7
 801a5b6:	9309      	str	r3, [sp, #36]	; 0x24
 801a5b8:	e768      	b.n	801a48c <_vfiprintf_r+0x78>
 801a5ba:	fb0c 3202 	mla	r2, ip, r2, r3
 801a5be:	460c      	mov	r4, r1
 801a5c0:	2001      	movs	r0, #1
 801a5c2:	e7a6      	b.n	801a512 <_vfiprintf_r+0xfe>
 801a5c4:	2300      	movs	r3, #0
 801a5c6:	3401      	adds	r4, #1
 801a5c8:	9305      	str	r3, [sp, #20]
 801a5ca:	4619      	mov	r1, r3
 801a5cc:	f04f 0c0a 	mov.w	ip, #10
 801a5d0:	4620      	mov	r0, r4
 801a5d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5d6:	3a30      	subs	r2, #48	; 0x30
 801a5d8:	2a09      	cmp	r2, #9
 801a5da:	d903      	bls.n	801a5e4 <_vfiprintf_r+0x1d0>
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d0c6      	beq.n	801a56e <_vfiprintf_r+0x15a>
 801a5e0:	9105      	str	r1, [sp, #20]
 801a5e2:	e7c4      	b.n	801a56e <_vfiprintf_r+0x15a>
 801a5e4:	fb0c 2101 	mla	r1, ip, r1, r2
 801a5e8:	4604      	mov	r4, r0
 801a5ea:	2301      	movs	r3, #1
 801a5ec:	e7f0      	b.n	801a5d0 <_vfiprintf_r+0x1bc>
 801a5ee:	ab03      	add	r3, sp, #12
 801a5f0:	9300      	str	r3, [sp, #0]
 801a5f2:	462a      	mov	r2, r5
 801a5f4:	4b12      	ldr	r3, [pc, #72]	; (801a640 <_vfiprintf_r+0x22c>)
 801a5f6:	a904      	add	r1, sp, #16
 801a5f8:	4630      	mov	r0, r6
 801a5fa:	f7fc fde1 	bl	80171c0 <_printf_float>
 801a5fe:	4607      	mov	r7, r0
 801a600:	1c78      	adds	r0, r7, #1
 801a602:	d1d6      	bne.n	801a5b2 <_vfiprintf_r+0x19e>
 801a604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a606:	07d9      	lsls	r1, r3, #31
 801a608:	d405      	bmi.n	801a616 <_vfiprintf_r+0x202>
 801a60a:	89ab      	ldrh	r3, [r5, #12]
 801a60c:	059a      	lsls	r2, r3, #22
 801a60e:	d402      	bmi.n	801a616 <_vfiprintf_r+0x202>
 801a610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a612:	f7fd fc99 	bl	8017f48 <__retarget_lock_release_recursive>
 801a616:	89ab      	ldrh	r3, [r5, #12]
 801a618:	065b      	lsls	r3, r3, #25
 801a61a:	f53f af1d 	bmi.w	801a458 <_vfiprintf_r+0x44>
 801a61e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a620:	e71c      	b.n	801a45c <_vfiprintf_r+0x48>
 801a622:	ab03      	add	r3, sp, #12
 801a624:	9300      	str	r3, [sp, #0]
 801a626:	462a      	mov	r2, r5
 801a628:	4b05      	ldr	r3, [pc, #20]	; (801a640 <_vfiprintf_r+0x22c>)
 801a62a:	a904      	add	r1, sp, #16
 801a62c:	4630      	mov	r0, r6
 801a62e:	f7fd f86b 	bl	8017708 <_printf_i>
 801a632:	e7e4      	b.n	801a5fe <_vfiprintf_r+0x1ea>
 801a634:	0801bd5c 	.word	0x0801bd5c
 801a638:	0801bd66 	.word	0x0801bd66
 801a63c:	080171c1 	.word	0x080171c1
 801a640:	0801a3ef 	.word	0x0801a3ef
 801a644:	0801bd62 	.word	0x0801bd62

0801a648 <_scanf_chars>:
 801a648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a64c:	4615      	mov	r5, r2
 801a64e:	688a      	ldr	r2, [r1, #8]
 801a650:	4680      	mov	r8, r0
 801a652:	460c      	mov	r4, r1
 801a654:	b932      	cbnz	r2, 801a664 <_scanf_chars+0x1c>
 801a656:	698a      	ldr	r2, [r1, #24]
 801a658:	2a00      	cmp	r2, #0
 801a65a:	bf0c      	ite	eq
 801a65c:	2201      	moveq	r2, #1
 801a65e:	f04f 32ff 	movne.w	r2, #4294967295
 801a662:	608a      	str	r2, [r1, #8]
 801a664:	6822      	ldr	r2, [r4, #0]
 801a666:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801a6f8 <_scanf_chars+0xb0>
 801a66a:	06d1      	lsls	r1, r2, #27
 801a66c:	bf5f      	itttt	pl
 801a66e:	681a      	ldrpl	r2, [r3, #0]
 801a670:	1d11      	addpl	r1, r2, #4
 801a672:	6019      	strpl	r1, [r3, #0]
 801a674:	6816      	ldrpl	r6, [r2, #0]
 801a676:	2700      	movs	r7, #0
 801a678:	69a0      	ldr	r0, [r4, #24]
 801a67a:	b188      	cbz	r0, 801a6a0 <_scanf_chars+0x58>
 801a67c:	2801      	cmp	r0, #1
 801a67e:	d107      	bne.n	801a690 <_scanf_chars+0x48>
 801a680:	682a      	ldr	r2, [r5, #0]
 801a682:	7811      	ldrb	r1, [r2, #0]
 801a684:	6962      	ldr	r2, [r4, #20]
 801a686:	5c52      	ldrb	r2, [r2, r1]
 801a688:	b952      	cbnz	r2, 801a6a0 <_scanf_chars+0x58>
 801a68a:	2f00      	cmp	r7, #0
 801a68c:	d031      	beq.n	801a6f2 <_scanf_chars+0xaa>
 801a68e:	e022      	b.n	801a6d6 <_scanf_chars+0x8e>
 801a690:	2802      	cmp	r0, #2
 801a692:	d120      	bne.n	801a6d6 <_scanf_chars+0x8e>
 801a694:	682b      	ldr	r3, [r5, #0]
 801a696:	781b      	ldrb	r3, [r3, #0]
 801a698:	f819 3003 	ldrb.w	r3, [r9, r3]
 801a69c:	071b      	lsls	r3, r3, #28
 801a69e:	d41a      	bmi.n	801a6d6 <_scanf_chars+0x8e>
 801a6a0:	6823      	ldr	r3, [r4, #0]
 801a6a2:	06da      	lsls	r2, r3, #27
 801a6a4:	bf5e      	ittt	pl
 801a6a6:	682b      	ldrpl	r3, [r5, #0]
 801a6a8:	781b      	ldrbpl	r3, [r3, #0]
 801a6aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a6ae:	682a      	ldr	r2, [r5, #0]
 801a6b0:	686b      	ldr	r3, [r5, #4]
 801a6b2:	3201      	adds	r2, #1
 801a6b4:	602a      	str	r2, [r5, #0]
 801a6b6:	68a2      	ldr	r2, [r4, #8]
 801a6b8:	3b01      	subs	r3, #1
 801a6ba:	3a01      	subs	r2, #1
 801a6bc:	606b      	str	r3, [r5, #4]
 801a6be:	3701      	adds	r7, #1
 801a6c0:	60a2      	str	r2, [r4, #8]
 801a6c2:	b142      	cbz	r2, 801a6d6 <_scanf_chars+0x8e>
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	dcd7      	bgt.n	801a678 <_scanf_chars+0x30>
 801a6c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a6cc:	4629      	mov	r1, r5
 801a6ce:	4640      	mov	r0, r8
 801a6d0:	4798      	blx	r3
 801a6d2:	2800      	cmp	r0, #0
 801a6d4:	d0d0      	beq.n	801a678 <_scanf_chars+0x30>
 801a6d6:	6823      	ldr	r3, [r4, #0]
 801a6d8:	f013 0310 	ands.w	r3, r3, #16
 801a6dc:	d105      	bne.n	801a6ea <_scanf_chars+0xa2>
 801a6de:	68e2      	ldr	r2, [r4, #12]
 801a6e0:	3201      	adds	r2, #1
 801a6e2:	60e2      	str	r2, [r4, #12]
 801a6e4:	69a2      	ldr	r2, [r4, #24]
 801a6e6:	b102      	cbz	r2, 801a6ea <_scanf_chars+0xa2>
 801a6e8:	7033      	strb	r3, [r6, #0]
 801a6ea:	6923      	ldr	r3, [r4, #16]
 801a6ec:	443b      	add	r3, r7
 801a6ee:	6123      	str	r3, [r4, #16]
 801a6f0:	2000      	movs	r0, #0
 801a6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6f6:	bf00      	nop
 801a6f8:	0801b9d9 	.word	0x0801b9d9

0801a6fc <_scanf_i>:
 801a6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a700:	4698      	mov	r8, r3
 801a702:	4b74      	ldr	r3, [pc, #464]	; (801a8d4 <_scanf_i+0x1d8>)
 801a704:	460c      	mov	r4, r1
 801a706:	4682      	mov	sl, r0
 801a708:	4616      	mov	r6, r2
 801a70a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a70e:	b087      	sub	sp, #28
 801a710:	ab03      	add	r3, sp, #12
 801a712:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a716:	4b70      	ldr	r3, [pc, #448]	; (801a8d8 <_scanf_i+0x1dc>)
 801a718:	69a1      	ldr	r1, [r4, #24]
 801a71a:	4a70      	ldr	r2, [pc, #448]	; (801a8dc <_scanf_i+0x1e0>)
 801a71c:	2903      	cmp	r1, #3
 801a71e:	bf18      	it	ne
 801a720:	461a      	movne	r2, r3
 801a722:	68a3      	ldr	r3, [r4, #8]
 801a724:	9201      	str	r2, [sp, #4]
 801a726:	1e5a      	subs	r2, r3, #1
 801a728:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a72c:	bf88      	it	hi
 801a72e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a732:	4627      	mov	r7, r4
 801a734:	bf82      	ittt	hi
 801a736:	eb03 0905 	addhi.w	r9, r3, r5
 801a73a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a73e:	60a3      	strhi	r3, [r4, #8]
 801a740:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a744:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a748:	bf98      	it	ls
 801a74a:	f04f 0900 	movls.w	r9, #0
 801a74e:	6023      	str	r3, [r4, #0]
 801a750:	463d      	mov	r5, r7
 801a752:	f04f 0b00 	mov.w	fp, #0
 801a756:	6831      	ldr	r1, [r6, #0]
 801a758:	ab03      	add	r3, sp, #12
 801a75a:	7809      	ldrb	r1, [r1, #0]
 801a75c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a760:	2202      	movs	r2, #2
 801a762:	f7e5 fd45 	bl	80001f0 <memchr>
 801a766:	b328      	cbz	r0, 801a7b4 <_scanf_i+0xb8>
 801a768:	f1bb 0f01 	cmp.w	fp, #1
 801a76c:	d159      	bne.n	801a822 <_scanf_i+0x126>
 801a76e:	6862      	ldr	r2, [r4, #4]
 801a770:	b92a      	cbnz	r2, 801a77e <_scanf_i+0x82>
 801a772:	6822      	ldr	r2, [r4, #0]
 801a774:	2308      	movs	r3, #8
 801a776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a77a:	6063      	str	r3, [r4, #4]
 801a77c:	6022      	str	r2, [r4, #0]
 801a77e:	6822      	ldr	r2, [r4, #0]
 801a780:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a784:	6022      	str	r2, [r4, #0]
 801a786:	68a2      	ldr	r2, [r4, #8]
 801a788:	1e51      	subs	r1, r2, #1
 801a78a:	60a1      	str	r1, [r4, #8]
 801a78c:	b192      	cbz	r2, 801a7b4 <_scanf_i+0xb8>
 801a78e:	6832      	ldr	r2, [r6, #0]
 801a790:	1c51      	adds	r1, r2, #1
 801a792:	6031      	str	r1, [r6, #0]
 801a794:	7812      	ldrb	r2, [r2, #0]
 801a796:	f805 2b01 	strb.w	r2, [r5], #1
 801a79a:	6872      	ldr	r2, [r6, #4]
 801a79c:	3a01      	subs	r2, #1
 801a79e:	2a00      	cmp	r2, #0
 801a7a0:	6072      	str	r2, [r6, #4]
 801a7a2:	dc07      	bgt.n	801a7b4 <_scanf_i+0xb8>
 801a7a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801a7a8:	4631      	mov	r1, r6
 801a7aa:	4650      	mov	r0, sl
 801a7ac:	4790      	blx	r2
 801a7ae:	2800      	cmp	r0, #0
 801a7b0:	f040 8085 	bne.w	801a8be <_scanf_i+0x1c2>
 801a7b4:	f10b 0b01 	add.w	fp, fp, #1
 801a7b8:	f1bb 0f03 	cmp.w	fp, #3
 801a7bc:	d1cb      	bne.n	801a756 <_scanf_i+0x5a>
 801a7be:	6863      	ldr	r3, [r4, #4]
 801a7c0:	b90b      	cbnz	r3, 801a7c6 <_scanf_i+0xca>
 801a7c2:	230a      	movs	r3, #10
 801a7c4:	6063      	str	r3, [r4, #4]
 801a7c6:	6863      	ldr	r3, [r4, #4]
 801a7c8:	4945      	ldr	r1, [pc, #276]	; (801a8e0 <_scanf_i+0x1e4>)
 801a7ca:	6960      	ldr	r0, [r4, #20]
 801a7cc:	1ac9      	subs	r1, r1, r3
 801a7ce:	f000 f937 	bl	801aa40 <__sccl>
 801a7d2:	f04f 0b00 	mov.w	fp, #0
 801a7d6:	68a3      	ldr	r3, [r4, #8]
 801a7d8:	6822      	ldr	r2, [r4, #0]
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d03d      	beq.n	801a85a <_scanf_i+0x15e>
 801a7de:	6831      	ldr	r1, [r6, #0]
 801a7e0:	6960      	ldr	r0, [r4, #20]
 801a7e2:	f891 c000 	ldrb.w	ip, [r1]
 801a7e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a7ea:	2800      	cmp	r0, #0
 801a7ec:	d035      	beq.n	801a85a <_scanf_i+0x15e>
 801a7ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a7f2:	d124      	bne.n	801a83e <_scanf_i+0x142>
 801a7f4:	0510      	lsls	r0, r2, #20
 801a7f6:	d522      	bpl.n	801a83e <_scanf_i+0x142>
 801a7f8:	f10b 0b01 	add.w	fp, fp, #1
 801a7fc:	f1b9 0f00 	cmp.w	r9, #0
 801a800:	d003      	beq.n	801a80a <_scanf_i+0x10e>
 801a802:	3301      	adds	r3, #1
 801a804:	f109 39ff 	add.w	r9, r9, #4294967295
 801a808:	60a3      	str	r3, [r4, #8]
 801a80a:	6873      	ldr	r3, [r6, #4]
 801a80c:	3b01      	subs	r3, #1
 801a80e:	2b00      	cmp	r3, #0
 801a810:	6073      	str	r3, [r6, #4]
 801a812:	dd1b      	ble.n	801a84c <_scanf_i+0x150>
 801a814:	6833      	ldr	r3, [r6, #0]
 801a816:	3301      	adds	r3, #1
 801a818:	6033      	str	r3, [r6, #0]
 801a81a:	68a3      	ldr	r3, [r4, #8]
 801a81c:	3b01      	subs	r3, #1
 801a81e:	60a3      	str	r3, [r4, #8]
 801a820:	e7d9      	b.n	801a7d6 <_scanf_i+0xda>
 801a822:	f1bb 0f02 	cmp.w	fp, #2
 801a826:	d1ae      	bne.n	801a786 <_scanf_i+0x8a>
 801a828:	6822      	ldr	r2, [r4, #0]
 801a82a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a82e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a832:	d1bf      	bne.n	801a7b4 <_scanf_i+0xb8>
 801a834:	2310      	movs	r3, #16
 801a836:	6063      	str	r3, [r4, #4]
 801a838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a83c:	e7a2      	b.n	801a784 <_scanf_i+0x88>
 801a83e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a842:	6022      	str	r2, [r4, #0]
 801a844:	780b      	ldrb	r3, [r1, #0]
 801a846:	f805 3b01 	strb.w	r3, [r5], #1
 801a84a:	e7de      	b.n	801a80a <_scanf_i+0x10e>
 801a84c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a850:	4631      	mov	r1, r6
 801a852:	4650      	mov	r0, sl
 801a854:	4798      	blx	r3
 801a856:	2800      	cmp	r0, #0
 801a858:	d0df      	beq.n	801a81a <_scanf_i+0x11e>
 801a85a:	6823      	ldr	r3, [r4, #0]
 801a85c:	05d9      	lsls	r1, r3, #23
 801a85e:	d50d      	bpl.n	801a87c <_scanf_i+0x180>
 801a860:	42bd      	cmp	r5, r7
 801a862:	d909      	bls.n	801a878 <_scanf_i+0x17c>
 801a864:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a868:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a86c:	4632      	mov	r2, r6
 801a86e:	4650      	mov	r0, sl
 801a870:	4798      	blx	r3
 801a872:	f105 39ff 	add.w	r9, r5, #4294967295
 801a876:	464d      	mov	r5, r9
 801a878:	42bd      	cmp	r5, r7
 801a87a:	d028      	beq.n	801a8ce <_scanf_i+0x1d2>
 801a87c:	6822      	ldr	r2, [r4, #0]
 801a87e:	f012 0210 	ands.w	r2, r2, #16
 801a882:	d113      	bne.n	801a8ac <_scanf_i+0x1b0>
 801a884:	702a      	strb	r2, [r5, #0]
 801a886:	6863      	ldr	r3, [r4, #4]
 801a888:	9e01      	ldr	r6, [sp, #4]
 801a88a:	4639      	mov	r1, r7
 801a88c:	4650      	mov	r0, sl
 801a88e:	47b0      	blx	r6
 801a890:	f8d8 3000 	ldr.w	r3, [r8]
 801a894:	6821      	ldr	r1, [r4, #0]
 801a896:	1d1a      	adds	r2, r3, #4
 801a898:	f8c8 2000 	str.w	r2, [r8]
 801a89c:	f011 0f20 	tst.w	r1, #32
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	d00f      	beq.n	801a8c4 <_scanf_i+0x1c8>
 801a8a4:	6018      	str	r0, [r3, #0]
 801a8a6:	68e3      	ldr	r3, [r4, #12]
 801a8a8:	3301      	adds	r3, #1
 801a8aa:	60e3      	str	r3, [r4, #12]
 801a8ac:	6923      	ldr	r3, [r4, #16]
 801a8ae:	1bed      	subs	r5, r5, r7
 801a8b0:	445d      	add	r5, fp
 801a8b2:	442b      	add	r3, r5
 801a8b4:	6123      	str	r3, [r4, #16]
 801a8b6:	2000      	movs	r0, #0
 801a8b8:	b007      	add	sp, #28
 801a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8be:	f04f 0b00 	mov.w	fp, #0
 801a8c2:	e7ca      	b.n	801a85a <_scanf_i+0x15e>
 801a8c4:	07ca      	lsls	r2, r1, #31
 801a8c6:	bf4c      	ite	mi
 801a8c8:	8018      	strhmi	r0, [r3, #0]
 801a8ca:	6018      	strpl	r0, [r3, #0]
 801a8cc:	e7eb      	b.n	801a8a6 <_scanf_i+0x1aa>
 801a8ce:	2001      	movs	r0, #1
 801a8d0:	e7f2      	b.n	801a8b8 <_scanf_i+0x1bc>
 801a8d2:	bf00      	nop
 801a8d4:	0801b800 	.word	0x0801b800
 801a8d8:	0801aea5 	.word	0x0801aea5
 801a8dc:	0801adbd 	.word	0x0801adbd
 801a8e0:	0801bd7d 	.word	0x0801bd7d

0801a8e4 <__sflush_r>:
 801a8e4:	898a      	ldrh	r2, [r1, #12]
 801a8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8ea:	4605      	mov	r5, r0
 801a8ec:	0710      	lsls	r0, r2, #28
 801a8ee:	460c      	mov	r4, r1
 801a8f0:	d458      	bmi.n	801a9a4 <__sflush_r+0xc0>
 801a8f2:	684b      	ldr	r3, [r1, #4]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	dc05      	bgt.n	801a904 <__sflush_r+0x20>
 801a8f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	dc02      	bgt.n	801a904 <__sflush_r+0x20>
 801a8fe:	2000      	movs	r0, #0
 801a900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a906:	2e00      	cmp	r6, #0
 801a908:	d0f9      	beq.n	801a8fe <__sflush_r+0x1a>
 801a90a:	2300      	movs	r3, #0
 801a90c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a910:	682f      	ldr	r7, [r5, #0]
 801a912:	6a21      	ldr	r1, [r4, #32]
 801a914:	602b      	str	r3, [r5, #0]
 801a916:	d032      	beq.n	801a97e <__sflush_r+0x9a>
 801a918:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a91a:	89a3      	ldrh	r3, [r4, #12]
 801a91c:	075a      	lsls	r2, r3, #29
 801a91e:	d505      	bpl.n	801a92c <__sflush_r+0x48>
 801a920:	6863      	ldr	r3, [r4, #4]
 801a922:	1ac0      	subs	r0, r0, r3
 801a924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a926:	b10b      	cbz	r3, 801a92c <__sflush_r+0x48>
 801a928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a92a:	1ac0      	subs	r0, r0, r3
 801a92c:	2300      	movs	r3, #0
 801a92e:	4602      	mov	r2, r0
 801a930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a932:	6a21      	ldr	r1, [r4, #32]
 801a934:	4628      	mov	r0, r5
 801a936:	47b0      	blx	r6
 801a938:	1c43      	adds	r3, r0, #1
 801a93a:	89a3      	ldrh	r3, [r4, #12]
 801a93c:	d106      	bne.n	801a94c <__sflush_r+0x68>
 801a93e:	6829      	ldr	r1, [r5, #0]
 801a940:	291d      	cmp	r1, #29
 801a942:	d82b      	bhi.n	801a99c <__sflush_r+0xb8>
 801a944:	4a29      	ldr	r2, [pc, #164]	; (801a9ec <__sflush_r+0x108>)
 801a946:	410a      	asrs	r2, r1
 801a948:	07d6      	lsls	r6, r2, #31
 801a94a:	d427      	bmi.n	801a99c <__sflush_r+0xb8>
 801a94c:	2200      	movs	r2, #0
 801a94e:	6062      	str	r2, [r4, #4]
 801a950:	04d9      	lsls	r1, r3, #19
 801a952:	6922      	ldr	r2, [r4, #16]
 801a954:	6022      	str	r2, [r4, #0]
 801a956:	d504      	bpl.n	801a962 <__sflush_r+0x7e>
 801a958:	1c42      	adds	r2, r0, #1
 801a95a:	d101      	bne.n	801a960 <__sflush_r+0x7c>
 801a95c:	682b      	ldr	r3, [r5, #0]
 801a95e:	b903      	cbnz	r3, 801a962 <__sflush_r+0x7e>
 801a960:	6560      	str	r0, [r4, #84]	; 0x54
 801a962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a964:	602f      	str	r7, [r5, #0]
 801a966:	2900      	cmp	r1, #0
 801a968:	d0c9      	beq.n	801a8fe <__sflush_r+0x1a>
 801a96a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a96e:	4299      	cmp	r1, r3
 801a970:	d002      	beq.n	801a978 <__sflush_r+0x94>
 801a972:	4628      	mov	r0, r5
 801a974:	f7fe f982 	bl	8018c7c <_free_r>
 801a978:	2000      	movs	r0, #0
 801a97a:	6360      	str	r0, [r4, #52]	; 0x34
 801a97c:	e7c0      	b.n	801a900 <__sflush_r+0x1c>
 801a97e:	2301      	movs	r3, #1
 801a980:	4628      	mov	r0, r5
 801a982:	47b0      	blx	r6
 801a984:	1c41      	adds	r1, r0, #1
 801a986:	d1c8      	bne.n	801a91a <__sflush_r+0x36>
 801a988:	682b      	ldr	r3, [r5, #0]
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d0c5      	beq.n	801a91a <__sflush_r+0x36>
 801a98e:	2b1d      	cmp	r3, #29
 801a990:	d001      	beq.n	801a996 <__sflush_r+0xb2>
 801a992:	2b16      	cmp	r3, #22
 801a994:	d101      	bne.n	801a99a <__sflush_r+0xb6>
 801a996:	602f      	str	r7, [r5, #0]
 801a998:	e7b1      	b.n	801a8fe <__sflush_r+0x1a>
 801a99a:	89a3      	ldrh	r3, [r4, #12]
 801a99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a9a0:	81a3      	strh	r3, [r4, #12]
 801a9a2:	e7ad      	b.n	801a900 <__sflush_r+0x1c>
 801a9a4:	690f      	ldr	r7, [r1, #16]
 801a9a6:	2f00      	cmp	r7, #0
 801a9a8:	d0a9      	beq.n	801a8fe <__sflush_r+0x1a>
 801a9aa:	0793      	lsls	r3, r2, #30
 801a9ac:	680e      	ldr	r6, [r1, #0]
 801a9ae:	bf08      	it	eq
 801a9b0:	694b      	ldreq	r3, [r1, #20]
 801a9b2:	600f      	str	r7, [r1, #0]
 801a9b4:	bf18      	it	ne
 801a9b6:	2300      	movne	r3, #0
 801a9b8:	eba6 0807 	sub.w	r8, r6, r7
 801a9bc:	608b      	str	r3, [r1, #8]
 801a9be:	f1b8 0f00 	cmp.w	r8, #0
 801a9c2:	dd9c      	ble.n	801a8fe <__sflush_r+0x1a>
 801a9c4:	6a21      	ldr	r1, [r4, #32]
 801a9c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a9c8:	4643      	mov	r3, r8
 801a9ca:	463a      	mov	r2, r7
 801a9cc:	4628      	mov	r0, r5
 801a9ce:	47b0      	blx	r6
 801a9d0:	2800      	cmp	r0, #0
 801a9d2:	dc06      	bgt.n	801a9e2 <__sflush_r+0xfe>
 801a9d4:	89a3      	ldrh	r3, [r4, #12]
 801a9d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a9da:	81a3      	strh	r3, [r4, #12]
 801a9dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a9e0:	e78e      	b.n	801a900 <__sflush_r+0x1c>
 801a9e2:	4407      	add	r7, r0
 801a9e4:	eba8 0800 	sub.w	r8, r8, r0
 801a9e8:	e7e9      	b.n	801a9be <__sflush_r+0xda>
 801a9ea:	bf00      	nop
 801a9ec:	dfbffffe 	.word	0xdfbffffe

0801a9f0 <_fflush_r>:
 801a9f0:	b538      	push	{r3, r4, r5, lr}
 801a9f2:	690b      	ldr	r3, [r1, #16]
 801a9f4:	4605      	mov	r5, r0
 801a9f6:	460c      	mov	r4, r1
 801a9f8:	b913      	cbnz	r3, 801aa00 <_fflush_r+0x10>
 801a9fa:	2500      	movs	r5, #0
 801a9fc:	4628      	mov	r0, r5
 801a9fe:	bd38      	pop	{r3, r4, r5, pc}
 801aa00:	b118      	cbz	r0, 801aa0a <_fflush_r+0x1a>
 801aa02:	6a03      	ldr	r3, [r0, #32]
 801aa04:	b90b      	cbnz	r3, 801aa0a <_fflush_r+0x1a>
 801aa06:	f7fd f82d 	bl	8017a64 <__sinit>
 801aa0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d0f3      	beq.n	801a9fa <_fflush_r+0xa>
 801aa12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aa14:	07d0      	lsls	r0, r2, #31
 801aa16:	d404      	bmi.n	801aa22 <_fflush_r+0x32>
 801aa18:	0599      	lsls	r1, r3, #22
 801aa1a:	d402      	bmi.n	801aa22 <_fflush_r+0x32>
 801aa1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aa1e:	f7fd fa92 	bl	8017f46 <__retarget_lock_acquire_recursive>
 801aa22:	4628      	mov	r0, r5
 801aa24:	4621      	mov	r1, r4
 801aa26:	f7ff ff5d 	bl	801a8e4 <__sflush_r>
 801aa2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aa2c:	07da      	lsls	r2, r3, #31
 801aa2e:	4605      	mov	r5, r0
 801aa30:	d4e4      	bmi.n	801a9fc <_fflush_r+0xc>
 801aa32:	89a3      	ldrh	r3, [r4, #12]
 801aa34:	059b      	lsls	r3, r3, #22
 801aa36:	d4e1      	bmi.n	801a9fc <_fflush_r+0xc>
 801aa38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aa3a:	f7fd fa85 	bl	8017f48 <__retarget_lock_release_recursive>
 801aa3e:	e7dd      	b.n	801a9fc <_fflush_r+0xc>

0801aa40 <__sccl>:
 801aa40:	b570      	push	{r4, r5, r6, lr}
 801aa42:	780b      	ldrb	r3, [r1, #0]
 801aa44:	4604      	mov	r4, r0
 801aa46:	2b5e      	cmp	r3, #94	; 0x5e
 801aa48:	bf0b      	itete	eq
 801aa4a:	784b      	ldrbeq	r3, [r1, #1]
 801aa4c:	1c4a      	addne	r2, r1, #1
 801aa4e:	1c8a      	addeq	r2, r1, #2
 801aa50:	2100      	movne	r1, #0
 801aa52:	bf08      	it	eq
 801aa54:	2101      	moveq	r1, #1
 801aa56:	3801      	subs	r0, #1
 801aa58:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801aa5c:	f800 1f01 	strb.w	r1, [r0, #1]!
 801aa60:	42a8      	cmp	r0, r5
 801aa62:	d1fb      	bne.n	801aa5c <__sccl+0x1c>
 801aa64:	b90b      	cbnz	r3, 801aa6a <__sccl+0x2a>
 801aa66:	1e50      	subs	r0, r2, #1
 801aa68:	bd70      	pop	{r4, r5, r6, pc}
 801aa6a:	f081 0101 	eor.w	r1, r1, #1
 801aa6e:	54e1      	strb	r1, [r4, r3]
 801aa70:	4610      	mov	r0, r2
 801aa72:	4602      	mov	r2, r0
 801aa74:	f812 5b01 	ldrb.w	r5, [r2], #1
 801aa78:	2d2d      	cmp	r5, #45	; 0x2d
 801aa7a:	d005      	beq.n	801aa88 <__sccl+0x48>
 801aa7c:	2d5d      	cmp	r5, #93	; 0x5d
 801aa7e:	d016      	beq.n	801aaae <__sccl+0x6e>
 801aa80:	2d00      	cmp	r5, #0
 801aa82:	d0f1      	beq.n	801aa68 <__sccl+0x28>
 801aa84:	462b      	mov	r3, r5
 801aa86:	e7f2      	b.n	801aa6e <__sccl+0x2e>
 801aa88:	7846      	ldrb	r6, [r0, #1]
 801aa8a:	2e5d      	cmp	r6, #93	; 0x5d
 801aa8c:	d0fa      	beq.n	801aa84 <__sccl+0x44>
 801aa8e:	42b3      	cmp	r3, r6
 801aa90:	dcf8      	bgt.n	801aa84 <__sccl+0x44>
 801aa92:	3002      	adds	r0, #2
 801aa94:	461a      	mov	r2, r3
 801aa96:	3201      	adds	r2, #1
 801aa98:	4296      	cmp	r6, r2
 801aa9a:	54a1      	strb	r1, [r4, r2]
 801aa9c:	dcfb      	bgt.n	801aa96 <__sccl+0x56>
 801aa9e:	1af2      	subs	r2, r6, r3
 801aaa0:	3a01      	subs	r2, #1
 801aaa2:	1c5d      	adds	r5, r3, #1
 801aaa4:	42b3      	cmp	r3, r6
 801aaa6:	bfa8      	it	ge
 801aaa8:	2200      	movge	r2, #0
 801aaaa:	18ab      	adds	r3, r5, r2
 801aaac:	e7e1      	b.n	801aa72 <__sccl+0x32>
 801aaae:	4610      	mov	r0, r2
 801aab0:	e7da      	b.n	801aa68 <__sccl+0x28>

0801aab2 <__submore>:
 801aab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aab6:	460c      	mov	r4, r1
 801aab8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801aaba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aabe:	4299      	cmp	r1, r3
 801aac0:	d11d      	bne.n	801aafe <__submore+0x4c>
 801aac2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801aac6:	f7fb fbff 	bl	80162c8 <_malloc_r>
 801aaca:	b918      	cbnz	r0, 801aad4 <__submore+0x22>
 801aacc:	f04f 30ff 	mov.w	r0, #4294967295
 801aad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aad8:	63a3      	str	r3, [r4, #56]	; 0x38
 801aada:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801aade:	6360      	str	r0, [r4, #52]	; 0x34
 801aae0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801aae4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801aae8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801aaec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801aaf0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801aaf4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801aaf8:	6020      	str	r0, [r4, #0]
 801aafa:	2000      	movs	r0, #0
 801aafc:	e7e8      	b.n	801aad0 <__submore+0x1e>
 801aafe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801ab00:	0077      	lsls	r7, r6, #1
 801ab02:	463a      	mov	r2, r7
 801ab04:	f7fb fc74 	bl	80163f0 <_realloc_r>
 801ab08:	4605      	mov	r5, r0
 801ab0a:	2800      	cmp	r0, #0
 801ab0c:	d0de      	beq.n	801aacc <__submore+0x1a>
 801ab0e:	eb00 0806 	add.w	r8, r0, r6
 801ab12:	4601      	mov	r1, r0
 801ab14:	4632      	mov	r2, r6
 801ab16:	4640      	mov	r0, r8
 801ab18:	f7fd fa1f 	bl	8017f5a <memcpy>
 801ab1c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801ab20:	f8c4 8000 	str.w	r8, [r4]
 801ab24:	e7e9      	b.n	801aafa <__submore+0x48>

0801ab26 <__swbuf_r>:
 801ab26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab28:	460e      	mov	r6, r1
 801ab2a:	4614      	mov	r4, r2
 801ab2c:	4605      	mov	r5, r0
 801ab2e:	b118      	cbz	r0, 801ab38 <__swbuf_r+0x12>
 801ab30:	6a03      	ldr	r3, [r0, #32]
 801ab32:	b90b      	cbnz	r3, 801ab38 <__swbuf_r+0x12>
 801ab34:	f7fc ff96 	bl	8017a64 <__sinit>
 801ab38:	69a3      	ldr	r3, [r4, #24]
 801ab3a:	60a3      	str	r3, [r4, #8]
 801ab3c:	89a3      	ldrh	r3, [r4, #12]
 801ab3e:	071a      	lsls	r2, r3, #28
 801ab40:	d525      	bpl.n	801ab8e <__swbuf_r+0x68>
 801ab42:	6923      	ldr	r3, [r4, #16]
 801ab44:	b31b      	cbz	r3, 801ab8e <__swbuf_r+0x68>
 801ab46:	6823      	ldr	r3, [r4, #0]
 801ab48:	6922      	ldr	r2, [r4, #16]
 801ab4a:	1a98      	subs	r0, r3, r2
 801ab4c:	6963      	ldr	r3, [r4, #20]
 801ab4e:	b2f6      	uxtb	r6, r6
 801ab50:	4283      	cmp	r3, r0
 801ab52:	4637      	mov	r7, r6
 801ab54:	dc04      	bgt.n	801ab60 <__swbuf_r+0x3a>
 801ab56:	4621      	mov	r1, r4
 801ab58:	4628      	mov	r0, r5
 801ab5a:	f7ff ff49 	bl	801a9f0 <_fflush_r>
 801ab5e:	b9e0      	cbnz	r0, 801ab9a <__swbuf_r+0x74>
 801ab60:	68a3      	ldr	r3, [r4, #8]
 801ab62:	3b01      	subs	r3, #1
 801ab64:	60a3      	str	r3, [r4, #8]
 801ab66:	6823      	ldr	r3, [r4, #0]
 801ab68:	1c5a      	adds	r2, r3, #1
 801ab6a:	6022      	str	r2, [r4, #0]
 801ab6c:	701e      	strb	r6, [r3, #0]
 801ab6e:	6962      	ldr	r2, [r4, #20]
 801ab70:	1c43      	adds	r3, r0, #1
 801ab72:	429a      	cmp	r2, r3
 801ab74:	d004      	beq.n	801ab80 <__swbuf_r+0x5a>
 801ab76:	89a3      	ldrh	r3, [r4, #12]
 801ab78:	07db      	lsls	r3, r3, #31
 801ab7a:	d506      	bpl.n	801ab8a <__swbuf_r+0x64>
 801ab7c:	2e0a      	cmp	r6, #10
 801ab7e:	d104      	bne.n	801ab8a <__swbuf_r+0x64>
 801ab80:	4621      	mov	r1, r4
 801ab82:	4628      	mov	r0, r5
 801ab84:	f7ff ff34 	bl	801a9f0 <_fflush_r>
 801ab88:	b938      	cbnz	r0, 801ab9a <__swbuf_r+0x74>
 801ab8a:	4638      	mov	r0, r7
 801ab8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab8e:	4621      	mov	r1, r4
 801ab90:	4628      	mov	r0, r5
 801ab92:	f000 f805 	bl	801aba0 <__swsetup_r>
 801ab96:	2800      	cmp	r0, #0
 801ab98:	d0d5      	beq.n	801ab46 <__swbuf_r+0x20>
 801ab9a:	f04f 37ff 	mov.w	r7, #4294967295
 801ab9e:	e7f4      	b.n	801ab8a <__swbuf_r+0x64>

0801aba0 <__swsetup_r>:
 801aba0:	b538      	push	{r3, r4, r5, lr}
 801aba2:	4b2a      	ldr	r3, [pc, #168]	; (801ac4c <__swsetup_r+0xac>)
 801aba4:	4605      	mov	r5, r0
 801aba6:	6818      	ldr	r0, [r3, #0]
 801aba8:	460c      	mov	r4, r1
 801abaa:	b118      	cbz	r0, 801abb4 <__swsetup_r+0x14>
 801abac:	6a03      	ldr	r3, [r0, #32]
 801abae:	b90b      	cbnz	r3, 801abb4 <__swsetup_r+0x14>
 801abb0:	f7fc ff58 	bl	8017a64 <__sinit>
 801abb4:	89a3      	ldrh	r3, [r4, #12]
 801abb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801abba:	0718      	lsls	r0, r3, #28
 801abbc:	d422      	bmi.n	801ac04 <__swsetup_r+0x64>
 801abbe:	06d9      	lsls	r1, r3, #27
 801abc0:	d407      	bmi.n	801abd2 <__swsetup_r+0x32>
 801abc2:	2309      	movs	r3, #9
 801abc4:	602b      	str	r3, [r5, #0]
 801abc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801abca:	81a3      	strh	r3, [r4, #12]
 801abcc:	f04f 30ff 	mov.w	r0, #4294967295
 801abd0:	e034      	b.n	801ac3c <__swsetup_r+0x9c>
 801abd2:	0758      	lsls	r0, r3, #29
 801abd4:	d512      	bpl.n	801abfc <__swsetup_r+0x5c>
 801abd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801abd8:	b141      	cbz	r1, 801abec <__swsetup_r+0x4c>
 801abda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801abde:	4299      	cmp	r1, r3
 801abe0:	d002      	beq.n	801abe8 <__swsetup_r+0x48>
 801abe2:	4628      	mov	r0, r5
 801abe4:	f7fe f84a 	bl	8018c7c <_free_r>
 801abe8:	2300      	movs	r3, #0
 801abea:	6363      	str	r3, [r4, #52]	; 0x34
 801abec:	89a3      	ldrh	r3, [r4, #12]
 801abee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801abf2:	81a3      	strh	r3, [r4, #12]
 801abf4:	2300      	movs	r3, #0
 801abf6:	6063      	str	r3, [r4, #4]
 801abf8:	6923      	ldr	r3, [r4, #16]
 801abfa:	6023      	str	r3, [r4, #0]
 801abfc:	89a3      	ldrh	r3, [r4, #12]
 801abfe:	f043 0308 	orr.w	r3, r3, #8
 801ac02:	81a3      	strh	r3, [r4, #12]
 801ac04:	6923      	ldr	r3, [r4, #16]
 801ac06:	b94b      	cbnz	r3, 801ac1c <__swsetup_r+0x7c>
 801ac08:	89a3      	ldrh	r3, [r4, #12]
 801ac0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ac0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ac12:	d003      	beq.n	801ac1c <__swsetup_r+0x7c>
 801ac14:	4621      	mov	r1, r4
 801ac16:	4628      	mov	r0, r5
 801ac18:	f000 f96c 	bl	801aef4 <__smakebuf_r>
 801ac1c:	89a0      	ldrh	r0, [r4, #12]
 801ac1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ac22:	f010 0301 	ands.w	r3, r0, #1
 801ac26:	d00a      	beq.n	801ac3e <__swsetup_r+0x9e>
 801ac28:	2300      	movs	r3, #0
 801ac2a:	60a3      	str	r3, [r4, #8]
 801ac2c:	6963      	ldr	r3, [r4, #20]
 801ac2e:	425b      	negs	r3, r3
 801ac30:	61a3      	str	r3, [r4, #24]
 801ac32:	6923      	ldr	r3, [r4, #16]
 801ac34:	b943      	cbnz	r3, 801ac48 <__swsetup_r+0xa8>
 801ac36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ac3a:	d1c4      	bne.n	801abc6 <__swsetup_r+0x26>
 801ac3c:	bd38      	pop	{r3, r4, r5, pc}
 801ac3e:	0781      	lsls	r1, r0, #30
 801ac40:	bf58      	it	pl
 801ac42:	6963      	ldrpl	r3, [r4, #20]
 801ac44:	60a3      	str	r3, [r4, #8]
 801ac46:	e7f4      	b.n	801ac32 <__swsetup_r+0x92>
 801ac48:	2000      	movs	r0, #0
 801ac4a:	e7f7      	b.n	801ac3c <__swsetup_r+0x9c>
 801ac4c:	20000228 	.word	0x20000228

0801ac50 <__assert_func>:
 801ac50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ac52:	4614      	mov	r4, r2
 801ac54:	461a      	mov	r2, r3
 801ac56:	4b09      	ldr	r3, [pc, #36]	; (801ac7c <__assert_func+0x2c>)
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	4605      	mov	r5, r0
 801ac5c:	68d8      	ldr	r0, [r3, #12]
 801ac5e:	b14c      	cbz	r4, 801ac74 <__assert_func+0x24>
 801ac60:	4b07      	ldr	r3, [pc, #28]	; (801ac80 <__assert_func+0x30>)
 801ac62:	9100      	str	r1, [sp, #0]
 801ac64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ac68:	4906      	ldr	r1, [pc, #24]	; (801ac84 <__assert_func+0x34>)
 801ac6a:	462b      	mov	r3, r5
 801ac6c:	f7fc ff12 	bl	8017a94 <fiprintf>
 801ac70:	f7fb faf2 	bl	8016258 <abort>
 801ac74:	4b04      	ldr	r3, [pc, #16]	; (801ac88 <__assert_func+0x38>)
 801ac76:	461c      	mov	r4, r3
 801ac78:	e7f3      	b.n	801ac62 <__assert_func+0x12>
 801ac7a:	bf00      	nop
 801ac7c:	20000228 	.word	0x20000228
 801ac80:	0801bd88 	.word	0x0801bd88
 801ac84:	0801bd95 	.word	0x0801bd95
 801ac88:	0801bdc3 	.word	0x0801bdc3

0801ac8c <_calloc_r>:
 801ac8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac8e:	fba1 2402 	umull	r2, r4, r1, r2
 801ac92:	b94c      	cbnz	r4, 801aca8 <_calloc_r+0x1c>
 801ac94:	4611      	mov	r1, r2
 801ac96:	9201      	str	r2, [sp, #4]
 801ac98:	f7fb fb16 	bl	80162c8 <_malloc_r>
 801ac9c:	9a01      	ldr	r2, [sp, #4]
 801ac9e:	4605      	mov	r5, r0
 801aca0:	b930      	cbnz	r0, 801acb0 <_calloc_r+0x24>
 801aca2:	4628      	mov	r0, r5
 801aca4:	b003      	add	sp, #12
 801aca6:	bd30      	pop	{r4, r5, pc}
 801aca8:	220c      	movs	r2, #12
 801acaa:	6002      	str	r2, [r0, #0]
 801acac:	2500      	movs	r5, #0
 801acae:	e7f8      	b.n	801aca2 <_calloc_r+0x16>
 801acb0:	4621      	mov	r1, r4
 801acb2:	f7fd f847 	bl	8017d44 <memset>
 801acb6:	e7f4      	b.n	801aca2 <_calloc_r+0x16>

0801acb8 <_strtol_l.constprop.0>:
 801acb8:	2b01      	cmp	r3, #1
 801acba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acbe:	d001      	beq.n	801acc4 <_strtol_l.constprop.0+0xc>
 801acc0:	2b24      	cmp	r3, #36	; 0x24
 801acc2:	d906      	bls.n	801acd2 <_strtol_l.constprop.0+0x1a>
 801acc4:	f7fd f914 	bl	8017ef0 <__errno>
 801acc8:	2316      	movs	r3, #22
 801acca:	6003      	str	r3, [r0, #0]
 801accc:	2000      	movs	r0, #0
 801acce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801adb8 <_strtol_l.constprop.0+0x100>
 801acd6:	460d      	mov	r5, r1
 801acd8:	462e      	mov	r6, r5
 801acda:	f815 4b01 	ldrb.w	r4, [r5], #1
 801acde:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801ace2:	f017 0708 	ands.w	r7, r7, #8
 801ace6:	d1f7      	bne.n	801acd8 <_strtol_l.constprop.0+0x20>
 801ace8:	2c2d      	cmp	r4, #45	; 0x2d
 801acea:	d132      	bne.n	801ad52 <_strtol_l.constprop.0+0x9a>
 801acec:	782c      	ldrb	r4, [r5, #0]
 801acee:	2701      	movs	r7, #1
 801acf0:	1cb5      	adds	r5, r6, #2
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d05b      	beq.n	801adae <_strtol_l.constprop.0+0xf6>
 801acf6:	2b10      	cmp	r3, #16
 801acf8:	d109      	bne.n	801ad0e <_strtol_l.constprop.0+0x56>
 801acfa:	2c30      	cmp	r4, #48	; 0x30
 801acfc:	d107      	bne.n	801ad0e <_strtol_l.constprop.0+0x56>
 801acfe:	782c      	ldrb	r4, [r5, #0]
 801ad00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ad04:	2c58      	cmp	r4, #88	; 0x58
 801ad06:	d14d      	bne.n	801ada4 <_strtol_l.constprop.0+0xec>
 801ad08:	786c      	ldrb	r4, [r5, #1]
 801ad0a:	2310      	movs	r3, #16
 801ad0c:	3502      	adds	r5, #2
 801ad0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801ad12:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad16:	f04f 0e00 	mov.w	lr, #0
 801ad1a:	fbb8 f9f3 	udiv	r9, r8, r3
 801ad1e:	4676      	mov	r6, lr
 801ad20:	fb03 8a19 	mls	sl, r3, r9, r8
 801ad24:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ad28:	f1bc 0f09 	cmp.w	ip, #9
 801ad2c:	d816      	bhi.n	801ad5c <_strtol_l.constprop.0+0xa4>
 801ad2e:	4664      	mov	r4, ip
 801ad30:	42a3      	cmp	r3, r4
 801ad32:	dd24      	ble.n	801ad7e <_strtol_l.constprop.0+0xc6>
 801ad34:	f1be 3fff 	cmp.w	lr, #4294967295
 801ad38:	d008      	beq.n	801ad4c <_strtol_l.constprop.0+0x94>
 801ad3a:	45b1      	cmp	r9, r6
 801ad3c:	d31c      	bcc.n	801ad78 <_strtol_l.constprop.0+0xc0>
 801ad3e:	d101      	bne.n	801ad44 <_strtol_l.constprop.0+0x8c>
 801ad40:	45a2      	cmp	sl, r4
 801ad42:	db19      	blt.n	801ad78 <_strtol_l.constprop.0+0xc0>
 801ad44:	fb06 4603 	mla	r6, r6, r3, r4
 801ad48:	f04f 0e01 	mov.w	lr, #1
 801ad4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad50:	e7e8      	b.n	801ad24 <_strtol_l.constprop.0+0x6c>
 801ad52:	2c2b      	cmp	r4, #43	; 0x2b
 801ad54:	bf04      	itt	eq
 801ad56:	782c      	ldrbeq	r4, [r5, #0]
 801ad58:	1cb5      	addeq	r5, r6, #2
 801ad5a:	e7ca      	b.n	801acf2 <_strtol_l.constprop.0+0x3a>
 801ad5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ad60:	f1bc 0f19 	cmp.w	ip, #25
 801ad64:	d801      	bhi.n	801ad6a <_strtol_l.constprop.0+0xb2>
 801ad66:	3c37      	subs	r4, #55	; 0x37
 801ad68:	e7e2      	b.n	801ad30 <_strtol_l.constprop.0+0x78>
 801ad6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ad6e:	f1bc 0f19 	cmp.w	ip, #25
 801ad72:	d804      	bhi.n	801ad7e <_strtol_l.constprop.0+0xc6>
 801ad74:	3c57      	subs	r4, #87	; 0x57
 801ad76:	e7db      	b.n	801ad30 <_strtol_l.constprop.0+0x78>
 801ad78:	f04f 3eff 	mov.w	lr, #4294967295
 801ad7c:	e7e6      	b.n	801ad4c <_strtol_l.constprop.0+0x94>
 801ad7e:	f1be 3fff 	cmp.w	lr, #4294967295
 801ad82:	d105      	bne.n	801ad90 <_strtol_l.constprop.0+0xd8>
 801ad84:	2322      	movs	r3, #34	; 0x22
 801ad86:	6003      	str	r3, [r0, #0]
 801ad88:	4646      	mov	r6, r8
 801ad8a:	b942      	cbnz	r2, 801ad9e <_strtol_l.constprop.0+0xe6>
 801ad8c:	4630      	mov	r0, r6
 801ad8e:	e79e      	b.n	801acce <_strtol_l.constprop.0+0x16>
 801ad90:	b107      	cbz	r7, 801ad94 <_strtol_l.constprop.0+0xdc>
 801ad92:	4276      	negs	r6, r6
 801ad94:	2a00      	cmp	r2, #0
 801ad96:	d0f9      	beq.n	801ad8c <_strtol_l.constprop.0+0xd4>
 801ad98:	f1be 0f00 	cmp.w	lr, #0
 801ad9c:	d000      	beq.n	801ada0 <_strtol_l.constprop.0+0xe8>
 801ad9e:	1e69      	subs	r1, r5, #1
 801ada0:	6011      	str	r1, [r2, #0]
 801ada2:	e7f3      	b.n	801ad8c <_strtol_l.constprop.0+0xd4>
 801ada4:	2430      	movs	r4, #48	; 0x30
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d1b1      	bne.n	801ad0e <_strtol_l.constprop.0+0x56>
 801adaa:	2308      	movs	r3, #8
 801adac:	e7af      	b.n	801ad0e <_strtol_l.constprop.0+0x56>
 801adae:	2c30      	cmp	r4, #48	; 0x30
 801adb0:	d0a5      	beq.n	801acfe <_strtol_l.constprop.0+0x46>
 801adb2:	230a      	movs	r3, #10
 801adb4:	e7ab      	b.n	801ad0e <_strtol_l.constprop.0+0x56>
 801adb6:	bf00      	nop
 801adb8:	0801b9d9 	.word	0x0801b9d9

0801adbc <_strtol_r>:
 801adbc:	f7ff bf7c 	b.w	801acb8 <_strtol_l.constprop.0>

0801adc0 <_strtoul_l.constprop.0>:
 801adc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801adc4:	4f36      	ldr	r7, [pc, #216]	; (801aea0 <_strtoul_l.constprop.0+0xe0>)
 801adc6:	4686      	mov	lr, r0
 801adc8:	460d      	mov	r5, r1
 801adca:	4628      	mov	r0, r5
 801adcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801add0:	5d3e      	ldrb	r6, [r7, r4]
 801add2:	f016 0608 	ands.w	r6, r6, #8
 801add6:	d1f8      	bne.n	801adca <_strtoul_l.constprop.0+0xa>
 801add8:	2c2d      	cmp	r4, #45	; 0x2d
 801adda:	d130      	bne.n	801ae3e <_strtoul_l.constprop.0+0x7e>
 801addc:	782c      	ldrb	r4, [r5, #0]
 801adde:	2601      	movs	r6, #1
 801ade0:	1c85      	adds	r5, r0, #2
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d057      	beq.n	801ae96 <_strtoul_l.constprop.0+0xd6>
 801ade6:	2b10      	cmp	r3, #16
 801ade8:	d109      	bne.n	801adfe <_strtoul_l.constprop.0+0x3e>
 801adea:	2c30      	cmp	r4, #48	; 0x30
 801adec:	d107      	bne.n	801adfe <_strtoul_l.constprop.0+0x3e>
 801adee:	7828      	ldrb	r0, [r5, #0]
 801adf0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801adf4:	2858      	cmp	r0, #88	; 0x58
 801adf6:	d149      	bne.n	801ae8c <_strtoul_l.constprop.0+0xcc>
 801adf8:	786c      	ldrb	r4, [r5, #1]
 801adfa:	2310      	movs	r3, #16
 801adfc:	3502      	adds	r5, #2
 801adfe:	f04f 38ff 	mov.w	r8, #4294967295
 801ae02:	2700      	movs	r7, #0
 801ae04:	fbb8 f8f3 	udiv	r8, r8, r3
 801ae08:	fb03 f908 	mul.w	r9, r3, r8
 801ae0c:	ea6f 0909 	mvn.w	r9, r9
 801ae10:	4638      	mov	r0, r7
 801ae12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ae16:	f1bc 0f09 	cmp.w	ip, #9
 801ae1a:	d815      	bhi.n	801ae48 <_strtoul_l.constprop.0+0x88>
 801ae1c:	4664      	mov	r4, ip
 801ae1e:	42a3      	cmp	r3, r4
 801ae20:	dd23      	ble.n	801ae6a <_strtoul_l.constprop.0+0xaa>
 801ae22:	f1b7 3fff 	cmp.w	r7, #4294967295
 801ae26:	d007      	beq.n	801ae38 <_strtoul_l.constprop.0+0x78>
 801ae28:	4580      	cmp	r8, r0
 801ae2a:	d31b      	bcc.n	801ae64 <_strtoul_l.constprop.0+0xa4>
 801ae2c:	d101      	bne.n	801ae32 <_strtoul_l.constprop.0+0x72>
 801ae2e:	45a1      	cmp	r9, r4
 801ae30:	db18      	blt.n	801ae64 <_strtoul_l.constprop.0+0xa4>
 801ae32:	fb00 4003 	mla	r0, r0, r3, r4
 801ae36:	2701      	movs	r7, #1
 801ae38:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ae3c:	e7e9      	b.n	801ae12 <_strtoul_l.constprop.0+0x52>
 801ae3e:	2c2b      	cmp	r4, #43	; 0x2b
 801ae40:	bf04      	itt	eq
 801ae42:	782c      	ldrbeq	r4, [r5, #0]
 801ae44:	1c85      	addeq	r5, r0, #2
 801ae46:	e7cc      	b.n	801ade2 <_strtoul_l.constprop.0+0x22>
 801ae48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ae4c:	f1bc 0f19 	cmp.w	ip, #25
 801ae50:	d801      	bhi.n	801ae56 <_strtoul_l.constprop.0+0x96>
 801ae52:	3c37      	subs	r4, #55	; 0x37
 801ae54:	e7e3      	b.n	801ae1e <_strtoul_l.constprop.0+0x5e>
 801ae56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ae5a:	f1bc 0f19 	cmp.w	ip, #25
 801ae5e:	d804      	bhi.n	801ae6a <_strtoul_l.constprop.0+0xaa>
 801ae60:	3c57      	subs	r4, #87	; 0x57
 801ae62:	e7dc      	b.n	801ae1e <_strtoul_l.constprop.0+0x5e>
 801ae64:	f04f 37ff 	mov.w	r7, #4294967295
 801ae68:	e7e6      	b.n	801ae38 <_strtoul_l.constprop.0+0x78>
 801ae6a:	1c7b      	adds	r3, r7, #1
 801ae6c:	d106      	bne.n	801ae7c <_strtoul_l.constprop.0+0xbc>
 801ae6e:	2322      	movs	r3, #34	; 0x22
 801ae70:	f8ce 3000 	str.w	r3, [lr]
 801ae74:	4638      	mov	r0, r7
 801ae76:	b932      	cbnz	r2, 801ae86 <_strtoul_l.constprop.0+0xc6>
 801ae78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae7c:	b106      	cbz	r6, 801ae80 <_strtoul_l.constprop.0+0xc0>
 801ae7e:	4240      	negs	r0, r0
 801ae80:	2a00      	cmp	r2, #0
 801ae82:	d0f9      	beq.n	801ae78 <_strtoul_l.constprop.0+0xb8>
 801ae84:	b107      	cbz	r7, 801ae88 <_strtoul_l.constprop.0+0xc8>
 801ae86:	1e69      	subs	r1, r5, #1
 801ae88:	6011      	str	r1, [r2, #0]
 801ae8a:	e7f5      	b.n	801ae78 <_strtoul_l.constprop.0+0xb8>
 801ae8c:	2430      	movs	r4, #48	; 0x30
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d1b5      	bne.n	801adfe <_strtoul_l.constprop.0+0x3e>
 801ae92:	2308      	movs	r3, #8
 801ae94:	e7b3      	b.n	801adfe <_strtoul_l.constprop.0+0x3e>
 801ae96:	2c30      	cmp	r4, #48	; 0x30
 801ae98:	d0a9      	beq.n	801adee <_strtoul_l.constprop.0+0x2e>
 801ae9a:	230a      	movs	r3, #10
 801ae9c:	e7af      	b.n	801adfe <_strtoul_l.constprop.0+0x3e>
 801ae9e:	bf00      	nop
 801aea0:	0801b9d9 	.word	0x0801b9d9

0801aea4 <_strtoul_r>:
 801aea4:	f7ff bf8c 	b.w	801adc0 <_strtoul_l.constprop.0>

0801aea8 <__swhatbuf_r>:
 801aea8:	b570      	push	{r4, r5, r6, lr}
 801aeaa:	460c      	mov	r4, r1
 801aeac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aeb0:	2900      	cmp	r1, #0
 801aeb2:	b096      	sub	sp, #88	; 0x58
 801aeb4:	4615      	mov	r5, r2
 801aeb6:	461e      	mov	r6, r3
 801aeb8:	da0d      	bge.n	801aed6 <__swhatbuf_r+0x2e>
 801aeba:	89a3      	ldrh	r3, [r4, #12]
 801aebc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801aec0:	f04f 0100 	mov.w	r1, #0
 801aec4:	bf0c      	ite	eq
 801aec6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801aeca:	2340      	movne	r3, #64	; 0x40
 801aecc:	2000      	movs	r0, #0
 801aece:	6031      	str	r1, [r6, #0]
 801aed0:	602b      	str	r3, [r5, #0]
 801aed2:	b016      	add	sp, #88	; 0x58
 801aed4:	bd70      	pop	{r4, r5, r6, pc}
 801aed6:	466a      	mov	r2, sp
 801aed8:	f000 f848 	bl	801af6c <_fstat_r>
 801aedc:	2800      	cmp	r0, #0
 801aede:	dbec      	blt.n	801aeba <__swhatbuf_r+0x12>
 801aee0:	9901      	ldr	r1, [sp, #4]
 801aee2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801aee6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801aeea:	4259      	negs	r1, r3
 801aeec:	4159      	adcs	r1, r3
 801aeee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aef2:	e7eb      	b.n	801aecc <__swhatbuf_r+0x24>

0801aef4 <__smakebuf_r>:
 801aef4:	898b      	ldrh	r3, [r1, #12]
 801aef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aef8:	079d      	lsls	r5, r3, #30
 801aefa:	4606      	mov	r6, r0
 801aefc:	460c      	mov	r4, r1
 801aefe:	d507      	bpl.n	801af10 <__smakebuf_r+0x1c>
 801af00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801af04:	6023      	str	r3, [r4, #0]
 801af06:	6123      	str	r3, [r4, #16]
 801af08:	2301      	movs	r3, #1
 801af0a:	6163      	str	r3, [r4, #20]
 801af0c:	b002      	add	sp, #8
 801af0e:	bd70      	pop	{r4, r5, r6, pc}
 801af10:	ab01      	add	r3, sp, #4
 801af12:	466a      	mov	r2, sp
 801af14:	f7ff ffc8 	bl	801aea8 <__swhatbuf_r>
 801af18:	9900      	ldr	r1, [sp, #0]
 801af1a:	4605      	mov	r5, r0
 801af1c:	4630      	mov	r0, r6
 801af1e:	f7fb f9d3 	bl	80162c8 <_malloc_r>
 801af22:	b948      	cbnz	r0, 801af38 <__smakebuf_r+0x44>
 801af24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af28:	059a      	lsls	r2, r3, #22
 801af2a:	d4ef      	bmi.n	801af0c <__smakebuf_r+0x18>
 801af2c:	f023 0303 	bic.w	r3, r3, #3
 801af30:	f043 0302 	orr.w	r3, r3, #2
 801af34:	81a3      	strh	r3, [r4, #12]
 801af36:	e7e3      	b.n	801af00 <__smakebuf_r+0xc>
 801af38:	89a3      	ldrh	r3, [r4, #12]
 801af3a:	6020      	str	r0, [r4, #0]
 801af3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801af40:	81a3      	strh	r3, [r4, #12]
 801af42:	9b00      	ldr	r3, [sp, #0]
 801af44:	6163      	str	r3, [r4, #20]
 801af46:	9b01      	ldr	r3, [sp, #4]
 801af48:	6120      	str	r0, [r4, #16]
 801af4a:	b15b      	cbz	r3, 801af64 <__smakebuf_r+0x70>
 801af4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af50:	4630      	mov	r0, r6
 801af52:	f000 f81d 	bl	801af90 <_isatty_r>
 801af56:	b128      	cbz	r0, 801af64 <__smakebuf_r+0x70>
 801af58:	89a3      	ldrh	r3, [r4, #12]
 801af5a:	f023 0303 	bic.w	r3, r3, #3
 801af5e:	f043 0301 	orr.w	r3, r3, #1
 801af62:	81a3      	strh	r3, [r4, #12]
 801af64:	89a3      	ldrh	r3, [r4, #12]
 801af66:	431d      	orrs	r5, r3
 801af68:	81a5      	strh	r5, [r4, #12]
 801af6a:	e7cf      	b.n	801af0c <__smakebuf_r+0x18>

0801af6c <_fstat_r>:
 801af6c:	b538      	push	{r3, r4, r5, lr}
 801af6e:	4d07      	ldr	r5, [pc, #28]	; (801af8c <_fstat_r+0x20>)
 801af70:	2300      	movs	r3, #0
 801af72:	4604      	mov	r4, r0
 801af74:	4608      	mov	r0, r1
 801af76:	4611      	mov	r1, r2
 801af78:	602b      	str	r3, [r5, #0]
 801af7a:	f7f3 faca 	bl	800e512 <_fstat>
 801af7e:	1c43      	adds	r3, r0, #1
 801af80:	d102      	bne.n	801af88 <_fstat_r+0x1c>
 801af82:	682b      	ldr	r3, [r5, #0]
 801af84:	b103      	cbz	r3, 801af88 <_fstat_r+0x1c>
 801af86:	6023      	str	r3, [r4, #0]
 801af88:	bd38      	pop	{r3, r4, r5, pc}
 801af8a:	bf00      	nop
 801af8c:	20003470 	.word	0x20003470

0801af90 <_isatty_r>:
 801af90:	b538      	push	{r3, r4, r5, lr}
 801af92:	4d06      	ldr	r5, [pc, #24]	; (801afac <_isatty_r+0x1c>)
 801af94:	2300      	movs	r3, #0
 801af96:	4604      	mov	r4, r0
 801af98:	4608      	mov	r0, r1
 801af9a:	602b      	str	r3, [r5, #0]
 801af9c:	f7f3 fac9 	bl	800e532 <_isatty>
 801afa0:	1c43      	adds	r3, r0, #1
 801afa2:	d102      	bne.n	801afaa <_isatty_r+0x1a>
 801afa4:	682b      	ldr	r3, [r5, #0]
 801afa6:	b103      	cbz	r3, 801afaa <_isatty_r+0x1a>
 801afa8:	6023      	str	r3, [r4, #0]
 801afaa:	bd38      	pop	{r3, r4, r5, pc}
 801afac:	20003470 	.word	0x20003470

0801afb0 <_init>:
 801afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afb2:	bf00      	nop
 801afb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801afb6:	bc08      	pop	{r3}
 801afb8:	469e      	mov	lr, r3
 801afba:	4770      	bx	lr

0801afbc <_fini>:
 801afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afbe:	bf00      	nop
 801afc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801afc2:	bc08      	pop	{r3}
 801afc4:	469e      	mov	lr, r3
 801afc6:	4770      	bx	lr

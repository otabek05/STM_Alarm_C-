
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  0800a0e8  0800a0e8  0001a0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a974  0800a974  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a974  0800a974  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a97c  0800a97c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a98c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00001338  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001518  20001518  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00043aa3  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000063a5  00000000  00000000  00063cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001600  00000000  00000000  0006a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001153  00000000  00000000  0006b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029eef  00000000  00000000  0006c7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ebdf  00000000  00000000  000966e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eb230  00000000  00000000  000b52c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000082fc  00000000  00000000  001a04f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001a87f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0d0 	.word	0x0800a0d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a0d0 	.word	0x0800a0d0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b9a6 	b.w	8000f40 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fce7 	bl	8000618 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc68 	bl	8000524 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fcde 	bl	8000618 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb20 	bl	80002a8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <DHCP_time_handler+0x18>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <DHCP_time_handler+0x18>)
 8000f50:	6013      	str	r3, [r2, #0]
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200001fc 	.word	0x200001fc

08000f60 <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <cJSON_GetErrorPtr+0x18>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <cJSON_GetErrorPtr+0x18>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4413      	add	r3, r2
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20000200 	.word	0x20000200

08000f7c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <case_insensitive_strcmp+0x16>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e056      	b.n	8001044 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d10d      	bne.n	8000fba <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e050      	b.n	8001044 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e04a      	b.n	8001044 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <case_insensitive_strcmp+0xd4>)
 8000fc6:	4413      	add	r3, r2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d103      	bne.n	8000fda <case_insensitive_strcmp+0x5e>
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f103 0220 	add.w	r2, r3, #32
 8000fd8:	e000      	b.n	8000fdc <case_insensitive_strcmp+0x60>
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	73bb      	strb	r3, [r7, #14]
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	491a      	ldr	r1, [pc, #104]	; (8001050 <case_insensitive_strcmp+0xd4>)
 8000fe8:	440b      	add	r3, r1
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d102      	bne.n	8000ffa <case_insensitive_strcmp+0x7e>
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	3320      	adds	r3, #32
 8000ff8:	e000      	b.n	8000ffc <case_insensitive_strcmp+0x80>
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d0d0      	beq.n	8000fa2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	737b      	strb	r3, [r7, #13]
 8001006:	7b7b      	ldrb	r3, [r7, #13]
 8001008:	3301      	adds	r3, #1
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <case_insensitive_strcmp+0xd4>)
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d103      	bne.n	8001020 <case_insensitive_strcmp+0xa4>
 8001018:	7b7b      	ldrb	r3, [r7, #13]
 800101a:	f103 0220 	add.w	r2, r3, #32
 800101e:	e000      	b.n	8001022 <case_insensitive_strcmp+0xa6>
 8001020:	7b7a      	ldrb	r2, [r7, #13]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	733b      	strb	r3, [r7, #12]
 8001028:	7b3b      	ldrb	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	4908      	ldr	r1, [pc, #32]	; (8001050 <case_insensitive_strcmp+0xd4>)
 800102e:	440b      	add	r3, r1
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <case_insensitive_strcmp+0xc4>
 800103a:	7b3b      	ldrb	r3, [r7, #12]
 800103c:	3320      	adds	r3, #32
 800103e:	e000      	b.n	8001042 <case_insensitive_strcmp+0xc6>
 8001040:	7b3b      	ldrb	r3, [r7, #12]
 8001042:	1ad3      	subs	r3, r2, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	0800a618 	.word	0x0800a618

08001054 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2028      	movs	r0, #40	; 0x28
 8001062:	4798      	blx	r3
 8001064:	60f8      	str	r0, [r7, #12]
    if (node)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800106c:	2228      	movs	r2, #40	; 0x28
 800106e:	2100      	movs	r1, #0
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f007 f893 	bl	800819c <memset>
    }

    return node;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800108c:	e037      	b.n	80010fe <cJSON_Delete+0x7e>
    {
        next = item->next;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109c:	2b00      	cmp	r3, #0
 800109e:	d108      	bne.n	80010b2 <cJSON_Delete+0x32>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffe7 	bl	8001080 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d109      	bne.n	80010d2 <cJSON_Delete+0x52>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <cJSON_Delete+0x90>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6912      	ldr	r2, [r2, #16]
 80010ce:	4610      	mov	r0, r2
 80010d0:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <cJSON_Delete+0x72>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <cJSON_Delete+0x90>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6a12      	ldr	r2, [r2, #32]
 80010ee:	4610      	mov	r0, r2
 80010f0:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <cJSON_Delete+0x90>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	4798      	blx	r3
        item = next;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1c4      	bne.n	800108e <cJSON_Delete+0xe>
    }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000

08001114 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001118:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	0000      	movs	r0, r0
	...

08001128 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b098      	sub	sp, #96	; 0x60
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800113e:	2300      	movs	r3, #0
 8001140:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001142:	f7ff ffe7 	bl	8001114 <get_decimal_point>
 8001146:	4603      	mov	r3, r0
 8001148:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <parse_number+0x36>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <parse_number+0x3a>
    {
        return false;
 800115e:	2300      	movs	r3, #0
 8001160:	e0a0      	b.n	80012a4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001162:	2300      	movs	r3, #0
 8001164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001166:	e03d      	b.n	80011e4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	6899      	ldr	r1, [r3, #8]
 8001170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001172:	440b      	add	r3, r1
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b45      	cmp	r3, #69	; 0x45
 800117a:	dc17      	bgt.n	80011ac <parse_number+0x84>
 800117c:	2b2b      	cmp	r3, #43	; 0x2b
 800117e:	db40      	blt.n	8001202 <parse_number+0xda>
 8001180:	3b2b      	subs	r3, #43	; 0x2b
 8001182:	2201      	movs	r2, #1
 8001184:	409a      	lsls	r2, r3
 8001186:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <parse_number+0x190>)
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf14      	ite	ne
 800118e:	2301      	movne	r3, #1
 8001190:	2300      	moveq	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10b      	bne.n	80011b0 <parse_number+0x88>
 8001198:	f002 0308 	and.w	r3, r2, #8
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d111      	bne.n	80011ce <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80011aa:	e02a      	b.n	8001202 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80011ac:	2b65      	cmp	r3, #101	; 0x65
 80011ae:	d128      	bne.n	8001202 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6899      	ldr	r1, [r3, #8]
 80011b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ba:	440b      	add	r3, r1
 80011bc:	4413      	add	r3, r2
 80011be:	7819      	ldrb	r1, [r3, #0]
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011c6:	4413      	add	r3, r2
 80011c8:	460a      	mov	r2, r1
 80011ca:	701a      	strb	r2, [r3, #0]
                break;
 80011cc:	e007      	b.n	80011de <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80011ce:	f107 0208 	add.w	r2, r7, #8
 80011d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011d4:	4413      	add	r3, r2
 80011d6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80011da:	701a      	strb	r2, [r3, #0]
                break;
 80011dc:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e0:	3301      	adds	r3, #1
 80011e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e6:	2b3e      	cmp	r3, #62	; 0x3e
 80011e8:	d80d      	bhi.n	8001206 <parse_number+0xde>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00a      	beq.n	8001206 <parse_number+0xde>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011f6:	441a      	add	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3b3      	bcc.n	8001168 <parse_number+0x40>
        }
    }
loop_end:
 8001200:	e001      	b.n	8001206 <parse_number+0xde>
                goto loop_end;
 8001202:	bf00      	nop
 8001204:	e000      	b.n	8001208 <parse_number+0xe0>
loop_end:
 8001206:	bf00      	nop
    number_c_string[i] = '\0';
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800120e:	4413      	add	r3, r2
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001214:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f006 fe46 	bl	8007eb0 <strtod>
 8001224:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8001228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	429a      	cmp	r2, r3
 8001230:	d101      	bne.n	8001236 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001232:	2300      	movs	r3, #0
 8001234:	e036      	b.n	80012a4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800123c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001240:	a31b      	add	r3, pc, #108	; (adr r3, 80012b0 <parse_number+0x188>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800124a:	f7ff fc6b 	bl	8000b24 <__aeabi_dcmpge>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d004      	beq.n	800125e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800125a:	615a      	str	r2, [r3, #20]
 800125c:	e015      	b.n	800128a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <parse_number+0x194>)
 8001264:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001268:	f7ff fc52 	bl	8000b10 <__aeabi_dcmple>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	e006      	b.n	800128a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800127c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001280:	f7ff fc64 	bl	8000b4c <__aeabi_d2iz>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2208      	movs	r2, #8
 800128e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001296:	f107 0208 	add.w	r2, r7, #8
 800129a:	1a8a      	subs	r2, r1, r2
 800129c:	441a      	add	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	609a      	str	r2, [r3, #8]
    return true;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3760      	adds	r7, #96	; 0x60
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	f3af 8000 	nop.w
 80012b0:	ffc00000 	.word	0xffc00000
 80012b4:	41dfffff 	.word	0x41dfffff
 80012b8:	04007fe5 	.word	0x04007fe5
 80012bc:	c1e00000 	.word	0xc1e00000

080012c0 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	e04c      	b.n	8001370 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4413      	add	r3, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b2f      	cmp	r3, #47	; 0x2f
 80012e0:	d90f      	bls.n	8001302 <parse_hex4+0x42>
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b39      	cmp	r3, #57	; 0x39
 80012ec:	d809      	bhi.n	8001302 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4413      	add	r3, r2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	3b30      	subs	r3, #48	; 0x30
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e02d      	b.n	800135e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b40      	cmp	r3, #64	; 0x40
 800130c:	d90f      	bls.n	800132e <parse_hex4+0x6e>
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b46      	cmp	r3, #70	; 0x46
 8001318:	d809      	bhi.n	800132e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	3b37      	subs	r3, #55	; 0x37
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	e017      	b.n	800135e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b60      	cmp	r3, #96	; 0x60
 8001338:	d90f      	bls.n	800135a <parse_hex4+0x9a>
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b66      	cmp	r3, #102	; 0x66
 8001344:	d809      	bhi.n	800135a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	3b57      	subs	r3, #87	; 0x57
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	e001      	b.n	800135e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800135a:	2300      	movs	r3, #0
 800135c:	e00c      	b.n	8001378 <parse_hex4+0xb8>
        }

        if (i < 3)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d802      	bhi.n	800136a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3301      	adds	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d9af      	bls.n	80012d6 <parse_hex4+0x16>
        }
    }

    return h;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	f340 80b7 	ble.w	800152e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	3302      	adds	r3, #2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff7b 	bl	80012c0 <parse_hex4>
 80013ca:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80013d2:	d304      	bcc.n	80013de <utf16_literal_to_utf8+0x5a>
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80013da:	f0c0 80aa 	bcc.w	8001532 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80013e4:	d337      	bcc.n	8001456 <utf16_literal_to_utf8+0xd2>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80013ec:	d233      	bcs.n	8001456 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	3306      	adds	r3, #6
 80013f2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80013f8:	230c      	movs	r3, #12
 80013fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b05      	cmp	r3, #5
 8001406:	f340 8096 	ble.w	8001536 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b5c      	cmp	r3, #92	; 0x5c
 8001410:	f040 8093 	bne.w	800153a <utf16_literal_to_utf8+0x1b6>
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b75      	cmp	r3, #117	; 0x75
 800141c:	f040 808d 	bne.w	800153a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3302      	adds	r3, #2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff4b 	bl	80012c0 <parse_hex4>
 800142a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001432:	f0c0 8084 	bcc.w	800153e <utf16_literal_to_utf8+0x1ba>
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800143c:	d27f      	bcs.n	800153e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	029a      	lsls	r2, r3, #10
 8001442:	4b43      	ldr	r3, [pc, #268]	; (8001550 <utf16_literal_to_utf8+0x1cc>)
 8001444:	4013      	ands	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800144c:	4313      	orrs	r3, r2
 800144e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001454:	e004      	b.n	8001460 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001456:	2306      	movs	r3, #6
 8001458:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	2b7f      	cmp	r3, #127	; 0x7f
 8001464:	d803      	bhi.n	800146e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800146c:	e01f      	b.n	80014ae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001474:	d206      	bcs.n	8001484 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001476:	2302      	movs	r3, #2
 8001478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800147c:	23c0      	movs	r3, #192	; 0xc0
 800147e:	f887 3020 	strb.w	r3, [r7, #32]
 8001482:	e014      	b.n	80014ae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148a:	d206      	bcs.n	800149a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800148c:	2303      	movs	r3, #3
 800148e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001492:	23e0      	movs	r3, #224	; 0xe0
 8001494:	f887 3020 	strb.w	r3, [r7, #32]
 8001498:	e009      	b.n	80014ae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80014a0:	d24f      	bcs.n	8001542 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80014a2:	2304      	movs	r3, #4
 80014a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80014a8:	23f0      	movs	r3, #240	; 0xf0
 80014aa:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80014b8:	e015      	b.n	80014e6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014cc:	440b      	add	r3, r1
 80014ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014e0:	3b01      	subs	r3, #1
 80014e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80014e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1e5      	bne.n	80014ba <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80014ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d909      	bls.n	800150a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001502:	430a      	orrs	r2, r1
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e007      	b.n	800151a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	b2da      	uxtb	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001522:	441a      	add	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001528:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800152c:	e00b      	b.n	8001546 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800152e:	bf00      	nop
 8001530:	e008      	b.n	8001544 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001532:	bf00      	nop
 8001534:	e006      	b.n	8001544 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001536:	bf00      	nop
 8001538:	e004      	b.n	8001544 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800153a:	bf00      	nop
 800153c:	e002      	b.n	8001544 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800153e:	bf00      	nop
 8001540:	e000      	b.n	8001544 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001542:	bf00      	nop

fail:
    return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	000ffc00 	.word	0x000ffc00

08001554 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	3301      	adds	r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	4413      	add	r3, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b22      	cmp	r3, #34	; 0x22
 8001590:	f040 8103 	bne.w	800179a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800159c:	e017      	b.n	80015ce <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b5c      	cmp	r3, #92	; 0x5c
 80015a4:	d110      	bne.n	80015c8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	f080 80f1 	bcs.w	800179e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	3301      	adds	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
                input_end++;
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	3301      	adds	r3, #1
 80015c6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	3301      	adds	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a3a      	ldr	r2, [r7, #32]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d203      	bcs.n	80015e8 <parse_string+0x94>
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b22      	cmp	r3, #34	; 0x22
 80015e6:	d1da      	bne.n	800159e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	f080 80d3 	bcs.w	80017a2 <parse_string+0x24e>
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b22      	cmp	r3, #34	; 0x22
 8001602:	f040 80ce 	bne.w	80017a2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	4413      	add	r3, r2
 8001610:	6a3a      	ldr	r2, [r7, #32]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	461a      	mov	r2, r3
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	3201      	adds	r2, #1
 8001624:	4610      	mov	r0, r2
 8001626:	4798      	blx	r3
 8001628:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80ba 	beq.w	80017a6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001636:	e094      	b.n	8001762 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b5c      	cmp	r3, #92	; 0x5c
 800163e:	d008      	beq.n	8001652 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001642:	1c53      	adds	r3, r2, #1
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1c59      	adds	r1, r3, #1
 800164a:	60f9      	str	r1, [r7, #12]
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e087      	b.n	8001762 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001652:	2302      	movs	r3, #2
 8001654:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001656:	6a3a      	ldr	r2, [r7, #32]
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	f340 80a4 	ble.w	80017aa <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	3301      	adds	r3, #1
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b75      	cmp	r3, #117	; 0x75
 800166a:	f300 80a0 	bgt.w	80017ae <parse_string+0x25a>
 800166e:	2b5c      	cmp	r3, #92	; 0x5c
 8001670:	da04      	bge.n	800167c <parse_string+0x128>
 8001672:	2b22      	cmp	r3, #34	; 0x22
 8001674:	d05c      	beq.n	8001730 <parse_string+0x1dc>
 8001676:	2b2f      	cmp	r3, #47	; 0x2f
 8001678:	d05a      	beq.n	8001730 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800167a:	e098      	b.n	80017ae <parse_string+0x25a>
            switch (input_pointer[1])
 800167c:	3b5c      	subs	r3, #92	; 0x5c
 800167e:	2b19      	cmp	r3, #25
 8001680:	f200 8095 	bhi.w	80017ae <parse_string+0x25a>
 8001684:	a201      	add	r2, pc, #4	; (adr r2, 800168c <parse_string+0x138>)
 8001686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168a:	bf00      	nop
 800168c:	08001731 	.word	0x08001731
 8001690:	080017af 	.word	0x080017af
 8001694:	080017af 	.word	0x080017af
 8001698:	080017af 	.word	0x080017af
 800169c:	080017af 	.word	0x080017af
 80016a0:	080017af 	.word	0x080017af
 80016a4:	080016f5 	.word	0x080016f5
 80016a8:	080017af 	.word	0x080017af
 80016ac:	080017af 	.word	0x080017af
 80016b0:	080017af 	.word	0x080017af
 80016b4:	08001701 	.word	0x08001701
 80016b8:	080017af 	.word	0x080017af
 80016bc:	080017af 	.word	0x080017af
 80016c0:	080017af 	.word	0x080017af
 80016c4:	080017af 	.word	0x080017af
 80016c8:	080017af 	.word	0x080017af
 80016cc:	080017af 	.word	0x080017af
 80016d0:	080017af 	.word	0x080017af
 80016d4:	0800170d 	.word	0x0800170d
 80016d8:	080017af 	.word	0x080017af
 80016dc:	080017af 	.word	0x080017af
 80016e0:	080017af 	.word	0x080017af
 80016e4:	08001719 	.word	0x08001719
 80016e8:	080017af 	.word	0x080017af
 80016ec:	08001725 	.word	0x08001725
 80016f0:	08001741 	.word	0x08001741
                    *output_pointer++ = '\b';
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60fa      	str	r2, [r7, #12]
 80016fa:	2208      	movs	r2, #8
 80016fc:	701a      	strb	r2, [r3, #0]
                    break;
 80016fe:	e02c      	b.n	800175a <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60fa      	str	r2, [r7, #12]
 8001706:	220c      	movs	r2, #12
 8001708:	701a      	strb	r2, [r3, #0]
                    break;
 800170a:	e026      	b.n	800175a <parse_string+0x206>
                    *output_pointer++ = '\n';
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	60fa      	str	r2, [r7, #12]
 8001712:	220a      	movs	r2, #10
 8001714:	701a      	strb	r2, [r3, #0]
                    break;
 8001716:	e020      	b.n	800175a <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60fa      	str	r2, [r7, #12]
 800171e:	220d      	movs	r2, #13
 8001720:	701a      	strb	r2, [r3, #0]
                    break;
 8001722:	e01a      	b.n	800175a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60fa      	str	r2, [r7, #12]
 800172a:	2209      	movs	r2, #9
 800172c:	701a      	strb	r2, [r3, #0]
                    break;
 800172e:	e014      	b.n	800175a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1c59      	adds	r1, r3, #1
 8001738:	60f9      	str	r1, [r7, #12]
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	701a      	strb	r2, [r3, #0]
                    break;
 800173e:	e00c      	b.n	800175a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	461a      	mov	r2, r3
 8001746:	6a39      	ldr	r1, [r7, #32]
 8001748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800174a:	f7ff fe1b 	bl	8001384 <utf16_literal_to_utf8>
 800174e:	4603      	mov	r3, r0
 8001750:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d02c      	beq.n	80017b2 <parse_string+0x25e>
                    break;
 8001758:	bf00      	nop
            }
            input_pointer += sequence_length;
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175e:	4413      	add	r3, r2
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	429a      	cmp	r2, r3
 8001768:	f4ff af66 	bcc.w	8001638 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2210      	movs	r2, #16
 8001776:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6a3a      	ldr	r2, [r7, #32]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	461a      	mov	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	609a      	str	r2, [r3, #8]

    return true;
 8001796:	2301      	movs	r3, #1
 8001798:	e01e      	b.n	80017d8 <parse_string+0x284>
        goto fail;
 800179a:	bf00      	nop
 800179c:	e00a      	b.n	80017b4 <parse_string+0x260>
                    goto fail;
 800179e:	bf00      	nop
 80017a0:	e008      	b.n	80017b4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 80017a2:	bf00      	nop
 80017a4:	e006      	b.n	80017b4 <parse_string+0x260>
            goto fail; /* allocation failure */
 80017a6:	bf00      	nop
 80017a8:	e004      	b.n	80017b4 <parse_string+0x260>
                goto fail;
 80017aa:	bf00      	nop
 80017ac:	e002      	b.n	80017b4 <parse_string+0x260>
                    goto fail;
 80017ae:	bf00      	nop
 80017b0:	e000      	b.n	80017b4 <parse_string+0x260>
                        goto fail;
 80017b2:	bf00      	nop

fail:
    if (output != NULL)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	69f8      	ldr	r0, [r7, #28]
 80017c0:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	609a      	str	r2, [r3, #8]
    }

    return false;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <buffer_skip_whitespace+0x16>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e02c      	b.n	8001854 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <buffer_skip_whitespace+0x2c>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	d306      	bcc.n	800181a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	e021      	b.n	8001854 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00d      	beq.n	800183c <buffer_skip_whitespace+0x5c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <buffer_skip_whitespace+0x5c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b20      	cmp	r3, #32
 800183a:	d9e9      	bls.n	8001810 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	d104      	bne.n	8001852 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	1e5a      	subs	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <skip_utf8_bom+0x1e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <skip_utf8_bom+0x1e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <skip_utf8_bom+0x22>
    {
        return NULL;
 800187e:	2300      	movs	r3, #0
 8001880:	e01c      	b.n	80018bc <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d018      	beq.n	80018ba <skip_utf8_bom+0x5a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	1d1a      	adds	r2, r3, #4
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	d211      	bcs.n	80018ba <skip_utf8_bom+0x5a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	4413      	add	r3, r2
 80018a0:	2203      	movs	r2, #3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <skip_utf8_bom+0x64>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f006 fc81 	bl	80081ac <strncmp>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d104      	bne.n	80018ba <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	1cda      	adds	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018ba:	687b      	ldr	r3, [r7, #4]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	0800a120 	.word	0x0800a120

080018c8 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	e00c      	b.n	80018f8 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f7fe fcd6 	bl	8000290 <strlen>
 80018e4:	4603      	mov	r3, r0
 80018e6:	3301      	adds	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	6979      	ldr	r1, [r7, #20]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f805 	bl	8001900 <cJSON_ParseWithLengthOpts>
 80018f6:	4603      	mov	r3, r0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800190e:	f107 0318 	add.w	r3, r7, #24
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <cJSON_ParseWithLengthOpts+0x12c>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800192c:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <cJSON_ParseWithLengthOpts+0x12c>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d042      	beq.n	80019be <cJSON_ParseWithLengthOpts+0xbe>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d03f      	beq.n	80019be <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800194a:	4a39      	ldr	r2, [pc, #228]	; (8001a30 <cJSON_ParseWithLengthOpts+0x130>)
 800194c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001950:	ca07      	ldmia	r2, {r0, r1, r2}
 8001952:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001956:	4836      	ldr	r0, [pc, #216]	; (8001a30 <cJSON_ParseWithLengthOpts+0x130>)
 8001958:	f7ff fb7c 	bl	8001054 <cJSON_New_Item>
 800195c:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001960:	2b00      	cmp	r3, #0
 8001962:	d02e      	beq.n	80019c2 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001964:	f107 0318 	add.w	r3, r7, #24
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff79 	bl	8001860 <skip_utf8_bom>
 800196e:	4603      	mov	r3, r0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff35 	bl	80017e0 <buffer_skip_whitespace>
 8001976:	4603      	mov	r3, r0
 8001978:	4619      	mov	r1, r3
 800197a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800197c:	f000 f868 	bl	8001a50 <parse_value>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01f      	beq.n	80019c6 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00e      	beq.n	80019aa <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800198c:	f107 0318 	add.w	r3, r7, #24
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff25 	bl	80017e0 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001996:	6a3a      	ldr	r2, [r7, #32]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	429a      	cmp	r2, r3
 800199c:	d215      	bcs.n	80019ca <cJSON_ParseWithLengthOpts+0xca>
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10f      	bne.n	80019ca <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	441a      	add	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	601a      	str	r2, [r3, #0]
    }

    return item;
 80019ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019bc:	e031      	b.n	8001a22 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80019be:	bf00      	nop
 80019c0:	e004      	b.n	80019cc <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019c2:	bf00      	nop
 80019c4:	e002      	b.n	80019cc <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019c6:	bf00      	nop
 80019c8:	e000      	b.n	80019cc <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80019ca:	bf00      	nop

fail:
    if (item != NULL)
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80019d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019d4:	f7ff fb54 	bl	8001080 <cJSON_Delete>
    }

    if (value != NULL)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d020      	beq.n	8001a20 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80019e6:	6a3a      	ldr	r2, [r7, #32]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d202      	bcs.n	80019f4 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e005      	b.n	8001a00 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	441a      	add	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <cJSON_ParseWithLengthOpts+0x12c>)
 8001a12:	461a      	mov	r2, r3
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a1c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3738      	adds	r7, #56	; 0x38
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000200 	.word	0x20000200
 8001a30:	20000000 	.word	0x20000000

08001a34 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff41 	bl	80018c8 <cJSON_ParseWithOpts>
 8001a46:	4603      	mov	r3, r0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <parse_value+0x18>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <parse_value+0x1c>
    {
        return false; /* no input */
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e0d2      	b.n	8001c12 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01d      	beq.n	8001aae <parse_value+0x5e>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	1d1a      	adds	r2, r3, #4
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d816      	bhi.n	8001aae <parse_value+0x5e>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4413      	add	r3, r2
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	4963      	ldr	r1, [pc, #396]	; (8001c1c <parse_value+0x1cc>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f006 fb8c 	bl	80081ac <strncmp>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	1d1a      	adds	r2, r3, #4
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	609a      	str	r2, [r3, #8]
        return true;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0b1      	b.n	8001c12 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01d      	beq.n	8001af0 <parse_value+0xa0>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	1d5a      	adds	r2, r3, #5
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d816      	bhi.n	8001af0 <parse_value+0xa0>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4413      	add	r3, r2
 8001acc:	2205      	movs	r2, #5
 8001ace:	4954      	ldr	r1, [pc, #336]	; (8001c20 <parse_value+0x1d0>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f006 fb6b 	bl	80081ac <strncmp>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	1d5a      	adds	r2, r3, #5
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	609a      	str	r2, [r3, #8]
        return true;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e090      	b.n	8001c12 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d020      	beq.n	8001b38 <parse_value+0xe8>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	1d1a      	adds	r2, r3, #4
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d819      	bhi.n	8001b38 <parse_value+0xe8>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4944      	ldr	r1, [pc, #272]	; (8001c24 <parse_value+0x1d4>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f006 fb4a 	bl	80081ac <strncmp>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2202      	movs	r2, #2
 8001b22:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	1d1a      	adds	r2, r3, #4
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	609a      	str	r2, [r3, #8]
        return true;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e06c      	b.n	8001c12 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d013      	beq.n	8001b66 <parse_value+0x116>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d20d      	bcs.n	8001b66 <parse_value+0x116>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b22      	cmp	r3, #34	; 0x22
 8001b58:	d105      	bne.n	8001b66 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff fcf9 	bl	8001554 <parse_string>
 8001b62:	4603      	mov	r3, r0
 8001b64:	e055      	b.n	8001c12 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d023      	beq.n	8001bb4 <parse_value+0x164>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d21d      	bcs.n	8001bb4 <parse_value+0x164>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b2d      	cmp	r3, #45	; 0x2d
 8001b86:	d00f      	beq.n	8001ba8 <parse_value+0x158>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b2f      	cmp	r3, #47	; 0x2f
 8001b96:	d90d      	bls.n	8001bb4 <parse_value+0x164>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b39      	cmp	r3, #57	; 0x39
 8001ba6:	d805      	bhi.n	8001bb4 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fabc 	bl	8001128 <parse_number>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	e02e      	b.n	8001c12 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d013      	beq.n	8001be2 <parse_value+0x192>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d20d      	bcs.n	8001be2 <parse_value+0x192>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b5b      	cmp	r3, #91	; 0x5b
 8001bd4:	d105      	bne.n	8001be2 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f825 	bl	8001c28 <parse_array>
 8001bde:	4603      	mov	r3, r0
 8001be0:	e017      	b.n	8001c12 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <parse_value+0x1c0>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d20d      	bcs.n	8001c10 <parse_value+0x1c0>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b7b      	cmp	r3, #123	; 0x7b
 8001c02:	d105      	bne.n	8001c10 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8d2 	bl	8001db0 <parse_object>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	e000      	b.n	8001c12 <parse_value+0x1c2>
    }

    return false;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	0800a0f4 	.word	0x0800a0f4
 8001c20:	0800a124 	.word	0x0800a124
 8001c24:	0800a12c 	.word	0x0800a12c

08001c28 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c42:	d301      	bcc.n	8001c48 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001c44:	2300      	movs	r3, #0
 8001c46:	e0af      	b.n	8001da8 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b5b      	cmp	r3, #91	; 0x5b
 8001c60:	f040 8094 	bne.w	8001d8c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001c6e:	6838      	ldr	r0, [r7, #0]
 8001c70:	f7ff fdb6 	bl	80017e0 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00d      	beq.n	8001c96 <parse_array+0x6e>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d207      	bcs.n	8001c96 <parse_array+0x6e>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4413      	add	r3, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b5d      	cmp	r3, #93	; 0x5d
 8001c94:	d061      	beq.n	8001d5a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <parse_array+0x80>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d305      	bcc.n	8001cb4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	609a      	str	r2, [r3, #8]
        goto fail;
 8001cb2:	e072      	b.n	8001d9a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	1e5a      	subs	r2, r3, #1
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	3310      	adds	r3, #16
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f9c6 	bl	8001054 <cJSON_New_Item>
 8001cc8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d05f      	beq.n	8001d90 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d104      	bne.n	8001ce0 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	e007      	b.n	8001cf0 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f7ff fd70 	bl	80017e0 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001d00:	6839      	ldr	r1, [r7, #0]
 8001d02:	6938      	ldr	r0, [r7, #16]
 8001d04:	f7ff fea4 	bl	8001a50 <parse_value>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d042      	beq.n	8001d94 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001d0e:	6838      	ldr	r0, [r7, #0]
 8001d10:	f7ff fd66 	bl	80017e0 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00d      	beq.n	8001d36 <parse_array+0x10e>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d207      	bcs.n	8001d36 <parse_array+0x10e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b2c      	cmp	r3, #44	; 0x2c
 8001d34:	d0c3      	beq.n	8001cbe <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d02d      	beq.n	8001d98 <parse_array+0x170>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d227      	bcs.n	8001d98 <parse_array+0x170>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4413      	add	r3, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b5d      	cmp	r3, #93	; 0x5d
 8001d56:	d11f      	bne.n	8001d98 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001d58:	e000      	b.n	8001d5c <parse_array+0x134>
        goto success;
 8001d5a:	bf00      	nop
    input_buffer->depth--;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <parse_array+0x14a>
        head->prev = current_item;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	609a      	str	r2, [r3, #8]

    return true;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e00d      	b.n	8001da8 <parse_array+0x180>
        goto fail;
 8001d8c:	bf00      	nop
 8001d8e:	e004      	b.n	8001d9a <parse_array+0x172>
            goto fail; /* allocation failure */
 8001d90:	bf00      	nop
 8001d92:	e002      	b.n	8001d9a <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001d94:	bf00      	nop
 8001d96:	e000      	b.n	8001d9a <parse_array+0x172>
        goto fail; /* expected end of array */
 8001d98:	bf00      	nop

fail:
    if (head != NULL)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001da0:	6978      	ldr	r0, [r7, #20]
 8001da2:	f7ff f96d 	bl	8001080 <cJSON_Delete>
    }

    return false;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dca:	d301      	bcc.n	8001dd0 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e0ea      	b.n	8001fa6 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80d0 	beq.w	8001f82 <parse_object+0x1d2>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	f080 80c9 	bcs.w	8001f82 <parse_object+0x1d2>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b7b      	cmp	r3, #123	; 0x7b
 8001dfe:	f040 80c0 	bne.w	8001f82 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e0c:	6838      	ldr	r0, [r7, #0]
 8001e0e:	f7ff fce7 	bl	80017e0 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00e      	beq.n	8001e36 <parse_object+0x86>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d208      	bcs.n	8001e36 <parse_object+0x86>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b7d      	cmp	r3, #125	; 0x7d
 8001e32:	f000 808d 	beq.w	8001f50 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <parse_object+0x98>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d305      	bcc.n	8001e54 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e52:	e0a1      	b.n	8001f98 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	1e5a      	subs	r2, r3, #1
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	3310      	adds	r3, #16
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f8f6 	bl	8001054 <cJSON_New_Item>
 8001e68:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 808a 	beq.w	8001f86 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d104      	bne.n	8001e82 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e007      	b.n	8001e92 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001e9c:	6838      	ldr	r0, [r7, #0]
 8001e9e:	f7ff fc9f 	bl	80017e0 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	6938      	ldr	r0, [r7, #16]
 8001ea6:	f7ff fb55 	bl	8001554 <parse_string>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d06c      	beq.n	8001f8a <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	f7ff fc95 	bl	80017e0 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d061      	beq.n	8001f8e <parse_object+0x1de>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d25b      	bcs.n	8001f8e <parse_object+0x1de>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b3a      	cmp	r3, #58	; 0x3a
 8001ee4:	d153      	bne.n	8001f8e <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ef0:	6838      	ldr	r0, [r7, #0]
 8001ef2:	f7ff fc75 	bl	80017e0 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001ef6:	6839      	ldr	r1, [r7, #0]
 8001ef8:	6938      	ldr	r0, [r7, #16]
 8001efa:	f7ff fda9 	bl	8001a50 <parse_value>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d046      	beq.n	8001f92 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f7ff fc6b 	bl	80017e0 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00d      	beq.n	8001f2c <parse_object+0x17c>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d207      	bcs.n	8001f2c <parse_object+0x17c>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b2c      	cmp	r3, #44	; 0x2c
 8001f2a:	d098      	beq.n	8001e5e <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d031      	beq.n	8001f96 <parse_object+0x1e6>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d22b      	bcs.n	8001f96 <parse_object+0x1e6>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	4413      	add	r3, r2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b7d      	cmp	r3, #125	; 0x7d
 8001f4c:	d123      	bne.n	8001f96 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001f4e:	e000      	b.n	8001f52 <parse_object+0x1a2>
        goto success; /* empty object */
 8001f50:	bf00      	nop
    input_buffer->depth--;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	1e5a      	subs	r2, r3, #1
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <parse_object+0x1b8>
        head->prev = current_item;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	609a      	str	r2, [r3, #8]
    return true;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e011      	b.n	8001fa6 <parse_object+0x1f6>
        goto fail; /* not an object */
 8001f82:	bf00      	nop
 8001f84:	e008      	b.n	8001f98 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001f86:	bf00      	nop
 8001f88:	e006      	b.n	8001f98 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001f8a:	bf00      	nop
 8001f8c:	e004      	b.n	8001f98 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001f8e:	bf00      	nop
 8001f90:	e002      	b.n	8001f98 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001f92:	bf00      	nop
 8001f94:	e000      	b.n	8001f98 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001f96:	bf00      	nop

fail:
    if (head != NULL)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff f86e 	bl	8001080 <cJSON_Delete>
    }

    return false;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <get_object_item+0x1c>
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <get_object_item+0x20>
    {
        return NULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e033      	b.n	8002036 <get_object_item+0x88>
    }

    current_element = object->child;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d017      	beq.n	800200a <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001fda:	e002      	b.n	8001fe2 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01c      	beq.n	8002022 <get_object_item+0x74>
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d018      	beq.n	8002022 <get_object_item+0x74>
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	68b8      	ldr	r0, [r7, #8]
 8001ff8:	f7fe f8ea 	bl	80001d0 <strcmp>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ec      	bne.n	8001fdc <get_object_item+0x2e>
 8002002:	e00e      	b.n	8002022 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <get_object_item+0x74>
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4619      	mov	r1, r3
 8002016:	68b8      	ldr	r0, [r7, #8]
 8002018:	f7fe ffb0 	bl	8000f7c <case_insensitive_strcmp>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <get_object_item+0x82>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <get_object_item+0x86>
        return NULL;
 8002030:	2300      	movs	r3, #0
 8002032:	e000      	b.n	8002036 <get_object_item+0x88>
    }

    return current_element;
 8002034:	697b      	ldr	r3, [r7, #20]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002048:	2201      	movs	r2, #1
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ffae 	bl	8001fae <get_object_item>
 8002052:	4603      	mov	r3, r0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <cJSON_IsString>:

    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <cJSON_IsString+0x12>
    {
        return false;
 800206a:	2300      	movs	r3, #0
 800206c:	e007      	b.n	800207e <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b10      	cmp	r3, #16
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800208a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208c:	b087      	sub	sp, #28
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	617b      	str	r3, [r7, #20]
        sent = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80020a0:	e018      	b.n	80020d4 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a6:	689c      	ldr	r4, [r3, #8]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	18d6      	adds	r6, r2, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f8c1 	bl	800223c <TimerLeftMS>
 80020ba:	4603      	mov	r3, r0
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	4631      	mov	r1, r6
 80020c0:	4628      	mov	r0, r5
 80020c2:	47a0      	blx	r4
 80020c4:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0e      	blt.n	80020ea <sendPacket+0x60>
            break;
        sent += rc;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	4413      	add	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	429a      	cmp	r2, r3
 80020da:	da07      	bge.n	80020ec <sendPacket+0x62>
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f86b 	bl	80021b8 <TimerIsExpired>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0dc      	beq.n	80020a2 <sendPacket+0x18>
 80020e8:	e000      	b.n	80020ec <sendPacket+0x62>
            break;
 80020ea:	bf00      	nop
    }
    if (sent == length)
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d10b      	bne.n	800210c <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4619      	mov	r1, r3
 8002100:	4610      	mov	r0, r2
 8002102:	f000 f883 	bl	800220c <TimerCountdown>
        rc = SUCCESSS;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e002      	b.n	8002112 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 800210c:	f04f 33ff 	mov.w	r3, #4294967295
 8002110:	617b      	str	r3, [r7, #20]
    return rc;
 8002112:	697b      	ldr	r3, [r7, #20]
}
 8002114:	4618      	mov	r0, r3
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800211c <MQTTDisconnect>:
    return rc;
}


int MQTTDisconnect(MQTTClient* c)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
 8002128:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f832 	bl	800219c <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f84e 	bl	80021e4 <TimerCountdownMS>

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4619      	mov	r1, r3
 8002152:	4610      	mov	r0, r2
 8002154:	f000 f8c0 	bl	80022d8 <MQTTSerialize_disconnect>
 8002158:	6138      	str	r0, [r7, #16]
    if (len > 0)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	dd07      	ble.n	8002170 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	461a      	mov	r2, r3
 8002166:	6939      	ldr	r1, [r7, #16]
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff8e 	bl	800208a <sendPacket>
 800216e:	6178      	str	r0, [r7, #20]

    c->isconnected = 0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8002176:	697b      	ldr	r3, [r7, #20]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	MilliTimer++;
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <MilliTimer_Handler+0x18>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	4a03      	ldr	r2, [pc, #12]	; (8002198 <MilliTimer_Handler+0x18>)
 800218c:	6013      	str	r3, [r2, #0]
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	20000208 	.word	0x20000208

0800219c <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <TimerIsExpired+0x28>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	0fdb      	lsrs	r3, r3, #31
 80021d0:	b2db      	uxtb	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000208 	.word	0x20000208

080021e4 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <TimerCountdownMS+0x24>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	441a      	add	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	605a      	str	r2, [r3, #4]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000208 	.word	0x20000208

0800220c <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800221c:	fb03 f202 	mul.w	r2, r3, r2
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <TimerCountdown+0x2c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	441a      	add	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	605a      	str	r2, [r3, #4]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000208 	.word	0x20000208

0800223c <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <TimerLeftMS+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000208 	.word	0x20000208

08002268 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b01      	cmp	r3, #1
 8002288:	dc03      	bgt.n	8002292 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800228a:	f06f 0301 	mvn.w	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
		goto exit;
 8002290:	e01d      	b.n	80022ce <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	b2da      	uxtb	r2, r3
 800229e:	7e3b      	ldrb	r3, [r7, #24]
 80022a0:	f362 1307 	bfi	r3, r2, #4, #4
 80022a4:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80022a6:	7e3a      	ldrb	r2, [r7, #24]
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f850 	bl	8002354 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 f81c 	bl	80022f6 <MQTTPacket_encode>
 80022be:	4602      	mov	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	4413      	add	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80022ce:	69fb      	ldr	r3, [r7, #28]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 80022e2:	220e      	movs	r2, #14
 80022e4:	6839      	ldr	r1, [r7, #0]
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffbe 	bl	8002268 <MQTTSerialize_zero>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	425a      	negs	r2, r3
 8002308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800230c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002310:	bf58      	it	pl
 8002312:	4253      	negpl	r3, r2
 8002314:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	da00      	bge.n	800231e <MQTTPacket_encode+0x28>
 800231c:	337f      	adds	r3, #127	; 0x7f
 800231e:	11db      	asrs	r3, r3, #7
 8002320:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	dd03      	ble.n	8002330 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8002328:	7afb      	ldrb	r3, [r7, #11]
 800232a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800232e:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60fa      	str	r2, [r7, #12]
 8002336:	461a      	mov	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	7afa      	ldrb	r2, [r7, #11]
 800233e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	dcde      	bgt.n	8002304 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_ZN14CircularBufferC1Ev>:
// CircularBuffer.cpp
#include "CircularBuffer.h"

CircularBuffer::CircularBuffer() : head(0), tail(0) {}
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_ZN5UtilsC1Ev>:





Utils::Utils(){}
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fb0d 	bl	80029ce <_ZN6ConfigC1Ev>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  Nm  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 80023be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2509      	movs	r5, #9
 80023cc:	683c      	ldr	r4, [r7, #0]
 80023ce:	461e      	mov	r6, r3
 80023d0:	e006      	b.n	80023e0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_+0x22>
 80023d2:	4621      	mov	r1, r4
 80023d4:	4630      	mov	r0, r6
 80023d6:	f004 fdc8 	bl	8006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80023da:	3618      	adds	r6, #24
 80023dc:	3418      	adds	r4, #24
 80023de:	3d01      	subs	r5, #1
 80023e0:	2d00      	cmp	r5, #0
 80023e2:	daf6      	bge.n	80023d2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_+0x14>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023ee <_ZN6ConfigaSERKS_>:
}
constexpr size_t MAX_ANALOG_INPUTS = 10;
constexpr size_t MAX_DIGITAL_INPUTS = 10;
constexpr size_t MAX_DIGITAL_OUTPUTS = 10;

class Config {
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	889a      	ldrh	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	809a      	strh	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	3306      	adds	r3, #6
 800240e:	3206      	adds	r2, #6
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	330a      	adds	r3, #10
 800241a:	320a      	adds	r2, #10
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	330e      	adds	r3, #14
 8002426:	320e      	adds	r2, #14
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	3312      	adds	r3, #18
 8002432:	3212      	adds	r2, #18
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	8ada      	ldrh	r2, [r3, #22]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	82da      	strh	r2, [r3, #22]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	7e1a      	ldrb	r2, [r3, #24]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	761a      	strb	r2, [r3, #24]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	69da      	ldr	r2, [r3, #28]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	61da      	str	r2, [r3, #28]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f103 0220 	add.w	r2, r3, #32
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3320      	adds	r3, #32
 800245a:	4619      	mov	r1, r3
 800245c:	4610      	mov	r0, r2
 800245e:	f004 fd84 	bl	8006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	3338      	adds	r3, #56	; 0x38
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f004 fd7b 	bl	8006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	3350      	adds	r3, #80	; 0x50
 800247e:	4619      	mov	r1, r3
 8002480:	4610      	mov	r0, r2
 8002482:	f004 fd72 	bl	8006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	3368      	adds	r3, #104	; 0x68
 8002490:	4619      	mov	r1, r3
 8002492:	4610      	mov	r0, r2
 8002494:	f004 fd69 	bl	8006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	3380      	adds	r3, #128	; 0x80
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f004 fd60 	bl	8006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	339c      	adds	r3, #156	; 0x9c
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7ff ff7b 	bl	80023be <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f7ff ff71 	bl	80023be <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f7ff ff67 	bl	80023be <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <_ZN5Utils4initEP6Config>:

void Utils::init(Config* config){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
	conf = *config;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6839      	ldr	r1, [r7, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff6f 	bl	80023ee <_ZN6ConfigaSERKS_>

	switches[0] = {GPIOE, GPIO_PIN_12}; // switch1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a61      	ldr	r2, [pc, #388]	; (8002698 <_ZN5Utils4initEP6Config+0x19c>)
 8002514:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8002518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800251c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[1] = {GPIOE, GPIO_PIN_13}; // switch2
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a5e      	ldr	r2, [pc, #376]	; (800269c <_ZN5Utils4initEP6Config+0x1a0>)
 8002524:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8002528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800252c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[2] = {GPIOE, GPIO_PIN_14}; // switch3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a5b      	ldr	r2, [pc, #364]	; (80026a0 <_ZN5Utils4initEP6Config+0x1a4>)
 8002534:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8002538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800253c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[3] = {GPIOE, GPIO_PIN_15}; // switch4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a58      	ldr	r2, [pc, #352]	; (80026a4 <_ZN5Utils4initEP6Config+0x1a8>)
 8002544:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800254c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[4] = {GPIOA, GPIO_PIN_4};  // switch5
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a55      	ldr	r2, [pc, #340]	; (80026a8 <_ZN5Utils4initEP6Config+0x1ac>)
 8002554:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8002558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800255c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[5] = {GPIOA, GPIO_PIN_5};  // switch6
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a52      	ldr	r2, [pc, #328]	; (80026ac <_ZN5Utils4initEP6Config+0x1b0>)
 8002564:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8002568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800256c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[6] = {GPIOA, GPIO_PIN_6};  // switch7
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a4f      	ldr	r2, [pc, #316]	; (80026b0 <_ZN5Utils4initEP6Config+0x1b4>)
 8002574:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8002578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800257c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[7] = {GPIOA, GPIO_PIN_7};  // switch8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a4c      	ldr	r2, [pc, #304]	; (80026b4 <_ZN5Utils4initEP6Config+0x1b8>)
 8002584:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8002588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800258c:	e883 0003 	stmia.w	r3, {r0, r1}


    digitalInputs[0] = {GPIOC, GPIO_PIN_0};   // DI1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a49      	ldr	r2, [pc, #292]	; (80026b8 <_ZN5Utils4initEP6Config+0x1bc>)
 8002594:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8002598:	e892 0003 	ldmia.w	r2, {r0, r1}
 800259c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[1] = {GPIOC, GPIO_PIN_1};   // DI2
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a46      	ldr	r2, [pc, #280]	; (80026bc <_ZN5Utils4initEP6Config+0x1c0>)
 80025a4:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 80025a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025ac:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[2] = {GPIOC, GPIO_PIN_2};   // DI3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a43      	ldr	r2, [pc, #268]	; (80026c0 <_ZN5Utils4initEP6Config+0x1c4>)
 80025b4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80025b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025bc:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[3] = {GPIOC, GPIO_PIN_3};   // DI4
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a40      	ldr	r2, [pc, #256]	; (80026c4 <_ZN5Utils4initEP6Config+0x1c8>)
 80025c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025cc:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[4] = {GPIOD, GPIO_PIN_8};   // DI5
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a3d      	ldr	r2, [pc, #244]	; (80026c8 <_ZN5Utils4initEP6Config+0x1cc>)
 80025d4:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 80025d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025dc:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[5] = {GPIOD, GPIO_PIN_9};   // DI6
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3a      	ldr	r2, [pc, #232]	; (80026cc <_ZN5Utils4initEP6Config+0x1d0>)
 80025e4:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 80025e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025ec:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[6] = {GPIOD, GPIO_PIN_10};  // DI7
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a37      	ldr	r2, [pc, #220]	; (80026d0 <_ZN5Utils4initEP6Config+0x1d4>)
 80025f4:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80025f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025fc:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[7] = {GPIOD, GPIO_PIN_13};  // DI8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a34      	ldr	r2, [pc, #208]	; (80026d4 <_ZN5Utils4initEP6Config+0x1d8>)
 8002604:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8002608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800260c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[8] = {GPIOC, GPIO_PIN_6};   // DI9
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a31      	ldr	r2, [pc, #196]	; (80026d8 <_ZN5Utils4initEP6Config+0x1dc>)
 8002614:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8002618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800261c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[9] = {GPIOC, GPIO_PIN_7};   // DI10
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a2e      	ldr	r2, [pc, #184]	; (80026dc <_ZN5Utils4initEP6Config+0x1e0>)
 8002624:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8002628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800262c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[10] = {GPIOC, GPIO_PIN_8};  // DI11
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a2b      	ldr	r2, [pc, #172]	; (80026e0 <_ZN5Utils4initEP6Config+0x1e4>)
 8002634:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8002638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800263c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[11] = {GPIOC, GPIO_PIN_9};  // DI12
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <_ZN5Utils4initEP6Config+0x1e8>)
 8002644:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800264c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[12] = {GPIOA, GPIO_PIN_8};  // DI13
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <_ZN5Utils4initEP6Config+0x1ec>)
 8002654:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800265c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[13] = {GPIOA, GPIO_PIN_9};  // DI14
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a22      	ldr	r2, [pc, #136]	; (80026ec <_ZN5Utils4initEP6Config+0x1f0>)
 8002664:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8002668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800266c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[14] = {GPIOA, GPIO_PIN_10}; // DI15
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <_ZN5Utils4initEP6Config+0x1f4>)
 8002674:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800267c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[15] = {GPIOA, GPIO_PIN_11}; // DI16
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <_ZN5Utils4initEP6Config+0x1f8>)
 8002684:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800268c:	e883 0003 	stmia.w	r3, {r0, r1}


}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	0800a134 	.word	0x0800a134
 800269c:	0800a13c 	.word	0x0800a13c
 80026a0:	0800a144 	.word	0x0800a144
 80026a4:	0800a14c 	.word	0x0800a14c
 80026a8:	0800a154 	.word	0x0800a154
 80026ac:	0800a15c 	.word	0x0800a15c
 80026b0:	0800a164 	.word	0x0800a164
 80026b4:	0800a16c 	.word	0x0800a16c
 80026b8:	0800a174 	.word	0x0800a174
 80026bc:	0800a17c 	.word	0x0800a17c
 80026c0:	0800a184 	.word	0x0800a184
 80026c4:	0800a18c 	.word	0x0800a18c
 80026c8:	0800a194 	.word	0x0800a194
 80026cc:	0800a19c 	.word	0x0800a19c
 80026d0:	0800a1a4 	.word	0x0800a1a4
 80026d4:	0800a1ac 	.word	0x0800a1ac
 80026d8:	0800a1b4 	.word	0x0800a1b4
 80026dc:	0800a1bc 	.word	0x0800a1bc
 80026e0:	0800a1c4 	.word	0x0800a1c4
 80026e4:	0800a1cc 	.word	0x0800a1cc
 80026e8:	0800a1d4 	.word	0x0800a1d4
 80026ec:	0800a1dc 	.word	0x0800a1dc
 80026f0:	0800a1e4 	.word	0x0800a1e4
 80026f4:	0800a1ec 	.word	0x0800a1ec

080026f8 <_ZN5Utils5printEPKcz>:
void Utils::print(const char* fmt, ...){
 80026f8:	b40f      	push	{r0, r1, r2, r3}
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b0c2      	sub	sp, #264	; 0x108
 80026fe:	af00      	add	r7, sp, #0
	 char buff[256];
	 va_list args;
	 va_start(args, fmt);
 8002700:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800270c:	601a      	str	r2, [r3, #0]
	 vsnprintf(buff, sizeof(buff), fmt, args);
 800270e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002716:	f107 0008 	add.w	r0, r7, #8
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002724:	f005 fd12 	bl	800814c <vsniprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 8002728:	f107 0308 	add.w	r3, r7, #8
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fdaf 	bl	8000290 <strlen>
 8002732:	4603      	mov	r3, r0
 8002734:	b29a      	uxth	r2, r3
 8002736:	f107 0108 	add.w	r1, r7, #8
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <_ZN5Utils5printEPKcz+0x5c>)
 8002740:	f003 fb93 	bl	8005e6a <HAL_UART_Transmit>
	                      HAL_MAX_DELAY);
	 va_end(args);
}
 8002744:	bf00      	nop
 8002746:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800274a:	46bd      	mov	sp, r7
 800274c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002750:	b004      	add	sp, #16
 8002752:	4770      	bx	lr
 8002754:	200002f4 	.word	0x200002f4

08002758 <_Z5printPKcz>:
	        free(json_string); // Free the allocated memory
	    }
	    cJSON_Delete(statusJson); // Clean up the cJSON object
}

void print(const char* fmt, ...){
 8002758:	b40f      	push	{r0, r1, r2, r3}
 800275a:	b580      	push	{r7, lr}
 800275c:	b0c2      	sub	sp, #264	; 0x108
 800275e:	af00      	add	r7, sp, #0
	 char buff[256];
	 va_list args;
	 va_start(args, fmt);
 8002760:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800276c:	601a      	str	r2, [r3, #0]
	 vsnprintf(buff, sizeof(buff), fmt, args);
 800276e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002776:	f107 0008 	add.w	r0, r7, #8
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002784:	f005 fce2 	bl	800814c <vsniprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 8002788:	f107 0308 	add.w	r3, r7, #8
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fd7f 	bl	8000290 <strlen>
 8002792:	4603      	mov	r3, r0
 8002794:	b29a      	uxth	r2, r3
 8002796:	f107 0108 	add.w	r1, r7, #8
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	4805      	ldr	r0, [pc, #20]	; (80027b4 <_Z5printPKcz+0x5c>)
 80027a0:	f003 fb63 	bl	8005e6a <HAL_UART_Transmit>
	                      HAL_MAX_DELAY);
	 va_end(args);
}
 80027a4:	bf00      	nop
 80027a6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80027aa:	46bd      	mov	sp, r7
 80027ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027b0:	b004      	add	sp, #16
 80027b2:	4770      	bx	lr
 80027b4:	200002f4 	.word	0x200002f4

080027b8 <_ZN15EthernetManagerD1Ev>:
uint8_t EthernetManager::dns_buffer[2048];
uint8_t EthernetManager::DHCP_SOCKET = 1;
uint8_t EthernetManager::DNS_SOCKET = 1;


EthernetManager::~EthernetManager() {
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

}
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_ZN15EthernetManagerC1Ev>:

EthernetManager::EthernetManager() {
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]

}
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_ZN11UARTHandlerC1Ev>:
// UARTHandler.cpp
#include "UARTHandler.h"

#include "CplusUtils.h"

UARTHandler::UARTHandler() : bufferIndex(0) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3308      	adds	r3, #8
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fdc4 	bl	800237e <_ZN14CircularBufferC1Ev>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
    memset(receiveBuffer, 0, sizeof(receiveBuffer));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800280c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f005 fcc2 	bl	800819c <memset>
}
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_ZN11UARTHandler4initEP20__UART_HandleTypeDef>:


void UARTHandler::init(UART_HandleTypeDef* uartHandle) {
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
    huart = uartHandle;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(huart, &rxByte, 1); // Start reception in interrupt mode
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	2201      	movs	r2, #1
 800283c:	4619      	mov	r1, r3
 800283e:	f003 fb9f 	bl	8005f80 <HAL_UART_Receive_IT>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <_ZN11UARTHandler9onReceiveEv>:

void UARTHandler::setNewDataAvailable(bool isArrived){
	newDataAvailable = isArrived;
}

void UARTHandler::onReceive() {
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]


    if (bufferIndex < sizeof(receiveBuffer) - 1) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800285a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800285e:	4293      	cmp	r3, r2
 8002860:	d821      	bhi.n	80028a6 <_ZN11UARTHandler9onReceiveEv+0x5a>
        receiveBuffer[bufferIndex++] = rxByte;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002868:	1c59      	adds	r1, r3, #1
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	f8c2 1810 	str.w	r1, [r2, #2064]	; 0x810
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	7911      	ldrb	r1, [r2, #4]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	460a      	mov	r2, r1
 800287a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        // Check for message end (e.g., newline character)
        if (rxByte == '\n') {
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	791b      	ldrb	r3, [r3, #4]
 8002882:	2b0a      	cmp	r3, #10
 8002884:	d116      	bne.n	80028b4 <_ZN11UARTHandler9onReceiveEv+0x68>
            receiveBuffer[bufferIndex] = '\0'; // Null-terminate the string
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4413      	add	r3, r2
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            processReceivedData();
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f81a 	bl	80028d0 <_ZN11UARTHandler19processReceivedDataEv>
            bufferIndex = 0; // Reset index for the next message
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
 80028a4:	e006      	b.n	80028b4 <_ZN11UARTHandler9onReceiveEv+0x68>
        }
    } else {
        // Handle buffer overflow
        print("Buffer overflow \r\n");
 80028a6:	4809      	ldr	r0, [pc, #36]	; (80028cc <_ZN11UARTHandler9onReceiveEv+0x80>)
 80028a8:	f7ff ff56 	bl	8002758 <_Z5printPKcz>
        bufferIndex = 0; // Reset buffer index
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    }


    HAL_UART_Receive_IT(huart, &rxByte, 1); // Prepare to receive the next byte
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	2201      	movs	r2, #1
 80028be:	4619      	mov	r1, r3
 80028c0:	f003 fb5e 	bl	8005f80 <HAL_UART_Receive_IT>

}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	0800a210 	.word	0x0800a210

080028d0 <_ZN11UARTHandler19processReceivedDataEv>:


void UARTHandler::processReceivedData() {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]


	cJSON *json = cJSON_Parse(reinterpret_cast<const char*>(receiveBuffer));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f8a8 	bl	8001a34 <cJSON_Parse>
 80028e4:	6178      	str	r0, [r7, #20]
    if (json == NULL) {
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <_ZN11UARTHandler19processReceivedDataEv+0x40>
        const char *error_ptr = cJSON_GetErrorPtr();
 80028ec:	f7fe fb38 	bl	8000f60 <cJSON_GetErrorPtr>
 80028f0:	60f8      	str	r0, [r7, #12]
        if (error_ptr != NULL) {
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <_ZN11UARTHandler19processReceivedDataEv+0x38>
            fprintf(stderr, "Error before: %s\n", error_ptr);
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <_ZN11UARTHandler19processReceivedDataEv+0x94>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4919      	ldr	r1, [pc, #100]	; (8002968 <_ZN11UARTHandler19processReceivedDataEv+0x98>)
 8002902:	4618      	mov	r0, r3
 8002904:	f005 fb84 	bl	8008010 <fiprintf>
        }

        print("Invalid JSON \r\n");
 8002908:	4818      	ldr	r0, [pc, #96]	; (800296c <_ZN11UARTHandler19processReceivedDataEv+0x9c>)
 800290a:	f7ff ff25 	bl	8002758 <_Z5printPKcz>





}
 800290e:	e024      	b.n	800295a <_ZN11UARTHandler19processReceivedDataEv+0x8a>
        cJSON *commandItem = cJSON_GetObjectItemCaseSensitive(json, "status");
 8002910:	4917      	ldr	r1, [pc, #92]	; (8002970 <_ZN11UARTHandler19processReceivedDataEv+0xa0>)
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff fb93 	bl	800203e <cJSON_GetObjectItemCaseSensitive>
 8002918:	6138      	str	r0, [r7, #16]
        if (cJSON_IsString(commandItem) && (commandItem->valuestring != NULL)) {
 800291a:	6938      	ldr	r0, [r7, #16]
 800291c:	f7ff fb9e 	bl	800205c <cJSON_IsString>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <_ZN11UARTHandler19processReceivedDataEv+0x62>
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <_ZN11UARTHandler19processReceivedDataEv+0x62>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <_ZN11UARTHandler19processReceivedDataEv+0x64>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <_ZN11UARTHandler19processReceivedDataEv+0x74>
            print("Received command: %s\n", commandItem->valuestring);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	4619      	mov	r1, r3
 800293e:	480d      	ldr	r0, [pc, #52]	; (8002974 <_ZN11UARTHandler19processReceivedDataEv+0xa4>)
 8002940:	f7ff ff0a 	bl	8002758 <_Z5printPKcz>
            newDataAvailable = false; // Reset the flag after processing
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
	        bufferIndex = 0; // Ready to start receiving new data
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        cJSON_Delete(json);
 8002954:	6978      	ldr	r0, [r7, #20]
 8002956:	f7fe fb93 	bl	8001080 <cJSON_Delete>
}
 800295a:	bf00      	nop
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200001dc 	.word	0x200001dc
 8002968:	0800a224 	.word	0x0800a224
 800296c:	0800a238 	.word	0x0800a238
 8002970:	0800a248 	.word	0x0800a248
 8002974:	0800a250 	.word	0x0800a250

08002978 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev>:
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2409      	movs	r4, #9
 8002984:	461d      	mov	r5, r3
 8002986:	e004      	b.n	8002992 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev+0x1a>
 8002988:	4628      	mov	r0, r5
 800298a:	f004 fae1 	bl	8006f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800298e:	3518      	adds	r5, #24
 8002990:	3c01      	subs	r4, #1
 8002992:	2c00      	cmp	r4, #0
 8002994:	daf8      	bge.n	8002988 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev+0x10>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bdb0      	pop	{r4, r5, r7, pc}

080029a0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>:
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev+0x24>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	429c      	cmp	r4, r3
 80029b8:	d004      	beq.n	80029c4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev+0x24>
 80029ba:	3c18      	subs	r4, #24
 80029bc:	4620      	mov	r0, r4
 80029be:	f004 face 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80029c2:	e7f7      	b.n	80029b4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev+0x14>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd90      	pop	{r4, r7, pc}

080029ce <_ZN6ConfigC1Ev>:
#include "config.h"

uint8_t mac[6];

Config::Config(){
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3320      	adds	r3, #32
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 fab8 	bl	8006f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3338      	adds	r3, #56	; 0x38
 80029e4:	4618      	mov	r0, r3
 80029e6:	f004 fab3 	bl	8006f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3350      	adds	r3, #80	; 0x50
 80029ee:	4618      	mov	r0, r3
 80029f0:	f004 faae 	bl	8006f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3368      	adds	r3, #104	; 0x68
 80029f8:	4618      	mov	r0, r3
 80029fa:	f004 faa9 	bl	8006f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3380      	adds	r3, #128	; 0x80
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 faa4 	bl	8006f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	339c      	adds	r3, #156	; 0x9c
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ffb3 	bl	8002978 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ffad 	bl	8002978 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ffa7 	bl	8002978 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev>

}
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZN6Config4initEv>:

void Config::init() {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	f5ad 7d74 	sub.w	sp, sp, #976	; 0x3d0
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002a40:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002a44:	6018      	str	r0, [r3, #0]

    setBrokerIP({192, 168, 200,158});
 8002a46:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002a4a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8002a4e:	4ae8      	ldr	r2, [pc, #928]	; (8002df0 <_ZN6Config4initEv+0x3bc>)
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f107 0208 	add.w	r2, r7, #8
 8002a58:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002a5c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002a60:	4611      	mov	r1, r2
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	f000 fba4 	bl	80031b0 <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>
    setBrokerPort(1883);
 8002a68:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002a6c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002a70:	f240 715b 	movw	r1, #1883	; 0x75b
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	f000 fbaa 	bl	80031ce <_ZN6Config13setBrokerPortEt>
    setIP({172, 30, 1, 123});
 8002a7a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002a7e:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8002a82:	4adc      	ldr	r2, [pc, #880]	; (8002df4 <_ZN6Config4initEv+0x3c0>)
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f107 020c 	add.w	r2, r7, #12
 8002a8c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002a90:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002a94:	4611      	mov	r1, r2
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	f000 fba8 	bl	80031ec <_ZN6Config5setIPERKSt5arrayIhLj4EE>
    setGateway({172, 30, 1, 254});
 8002a9c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002aa0:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8002aa4:	4ad4      	ldr	r2, [pc, #848]	; (8002df8 <_ZN6Config4initEv+0x3c4>)
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f107 0210 	add.w	r2, r7, #16
 8002aae:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002ab2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	f000 fba7 	bl	800320c <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>
    setSubnet({255, 255, 255, 0});
 8002abe:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002ac2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8002ac6:	4acd      	ldr	r2, [pc, #820]	; (8002dfc <_ZN6Config4initEv+0x3c8>)
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f107 0214 	add.w	r2, r7, #20
 8002ad0:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002ad4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002ad8:	4611      	mov	r1, r2
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	f000 fba6 	bl	800322c <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>
    setDNS({8, 8, 8, 8}); // Google's DNS for example
 8002ae0:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002ae4:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8002ae8:	4ac5      	ldr	r2, [pc, #788]	; (8002e00 <_ZN6Config4initEv+0x3cc>)
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f107 0218 	add.w	r2, r7, #24
 8002af2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002af6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002afa:	4611      	mov	r1, r2
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	f000 fba5 	bl	800324c <_ZN6Config6setDNSERKSt5arrayIhLj4EE>
    setKeepAliveInterval(60);
 8002b02:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002b06:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002b0a:	213c      	movs	r1, #60	; 0x3c
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	f000 fbad 	bl	800326c <_ZN6Config20setKeepAliveIntervalEt>
    setDHCPEnabled(true);
 8002b12:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002b16:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	f000 fbb4 	bl	800328a <_ZN6Config14setDHCPEnabledEb>
    setIntervalTime(1000); // Example interval time
 8002b22:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002b26:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002b2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	f000 fbba 	bl	80032a8 <_ZN6Config15setIntervalTimeEm>

    setUsername("user");
 8002b34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f004 f99d 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002b3e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b42:	f107 031c 	add.w	r3, r7, #28
 8002b46:	49af      	ldr	r1, [pc, #700]	; (8002e04 <_ZN6Config4initEv+0x3d0>)
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f004 fa6d 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002b4e:	f107 021c 	add.w	r2, r7, #28
 8002b52:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002b56:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	f000 fbb1 	bl	80032c4 <_ZN6Config11setUsernameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 f9f9 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 f982 	bl	8006e7a <_ZNSaIcED1Ev>
    setClientId(std::string(clientId));
 8002b76:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002b7a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002b84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 fa18 	bl	8006fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002b90:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b94:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002b98:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	f000 fb9f 	bl	80032e2 <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002ba4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 f9d8 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    setPassword("pass");
 8002bae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f004 f960 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002bb8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002bbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bc0:	4991      	ldr	r1, [pc, #580]	; (8002e08 <_ZN6Config4initEv+0x3d4>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fa30 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002bc8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bcc:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002bd0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	f000 fb92 	bl	8003300 <_ZN6Config11setPasswordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002bdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 f9bc 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002be6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 f945 	bl	8006e7a <_ZNSaIcED1Ev>
    setTopicPublish("topic/pub");
 8002bf0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f004 f93f 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002bfa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002bfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c02:	4982      	ldr	r1, [pc, #520]	; (8002e0c <_ZN6Config4initEv+0x3d8>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f004 fa0f 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002c0a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002c0e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002c12:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002c16:	4611      	mov	r1, r2
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	f000 fb80 	bl	800331e <_ZN6Config15setTopicPublishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002c1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 f99b 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002c28:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f004 f924 	bl	8006e7a <_ZNSaIcED1Ev>
    setQoS(1); // Quality of Service level
 8002c32:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002c36:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	f000 fb7d 	bl	800333c <_ZN6Config6setQoSEi>

    setAnalogInputNames({"A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10"});
 8002c42:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002c46:	4618      	mov	r0, r3
 8002c48:	f004 f916 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002c4c:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8002c50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002c54:	496e      	ldr	r1, [pc, #440]	; (8002e10 <_ZN6Config4initEv+0x3dc>)
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 f9e6 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002c5c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 f909 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002c66:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8002c6a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002c6e:	3318      	adds	r3, #24
 8002c70:	4968      	ldr	r1, [pc, #416]	; (8002e14 <_ZN6Config4initEv+0x3e0>)
 8002c72:	4618      	mov	r0, r3
 8002c74:	f004 f9d8 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002c78:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 f8fb 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002c82:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8002c86:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002c8a:	3330      	adds	r3, #48	; 0x30
 8002c8c:	4962      	ldr	r1, [pc, #392]	; (8002e18 <_ZN6Config4initEv+0x3e4>)
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f004 f9ca 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002c94:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f004 f8ed 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002c9e:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8002ca2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002ca6:	3348      	adds	r3, #72	; 0x48
 8002ca8:	495c      	ldr	r1, [pc, #368]	; (8002e1c <_ZN6Config4initEv+0x3e8>)
 8002caa:	4618      	mov	r0, r3
 8002cac:	f004 f9bc 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002cb0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 f8df 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002cba:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8002cbe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002cc2:	3360      	adds	r3, #96	; 0x60
 8002cc4:	4956      	ldr	r1, [pc, #344]	; (8002e20 <_ZN6Config4initEv+0x3ec>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f004 f9ae 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ccc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f004 f8d1 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002cd6:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8002cda:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002cde:	3378      	adds	r3, #120	; 0x78
 8002ce0:	4950      	ldr	r1, [pc, #320]	; (8002e24 <_ZN6Config4initEv+0x3f0>)
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f004 f9a0 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ce8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 f8c3 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002cf2:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8002cf6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002cfa:	3390      	adds	r3, #144	; 0x90
 8002cfc:	494a      	ldr	r1, [pc, #296]	; (8002e28 <_ZN6Config4initEv+0x3f4>)
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 f992 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002d04:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f004 f8b5 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002d0e:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8002d12:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002d16:	33a8      	adds	r3, #168	; 0xa8
 8002d18:	4944      	ldr	r1, [pc, #272]	; (8002e2c <_ZN6Config4initEv+0x3f8>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 f984 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002d20:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 f8a7 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002d2a:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8002d2e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002d32:	33c0      	adds	r3, #192	; 0xc0
 8002d34:	493e      	ldr	r1, [pc, #248]	; (8002e30 <_ZN6Config4initEv+0x3fc>)
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 f976 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002d3c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 f899 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002d46:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8002d4a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002d4e:	33d8      	adds	r3, #216	; 0xd8
 8002d50:	4938      	ldr	r1, [pc, #224]	; (8002e34 <_ZN6Config4initEv+0x400>)
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 f968 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002d58:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d5c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002d60:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002d64:	4611      	mov	r1, r2
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	f000 faf7 	bl	800335a <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>
 8002d6c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fe15 	bl	80029a0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 8002d76:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 f87d 	bl	8006e7a <_ZNSaIcED1Ev>
 8002d80:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002d84:	4618      	mov	r0, r3
 8002d86:	f004 f878 	bl	8006e7a <_ZNSaIcED1Ev>
 8002d8a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 f873 	bl	8006e7a <_ZNSaIcED1Ev>
 8002d94:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 f86e 	bl	8006e7a <_ZNSaIcED1Ev>
 8002d9e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 f869 	bl	8006e7a <_ZNSaIcED1Ev>
 8002da8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 f864 	bl	8006e7a <_ZNSaIcED1Ev>
 8002db2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 f85f 	bl	8006e7a <_ZNSaIcED1Ev>
 8002dbc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f004 f85a 	bl	8006e7a <_ZNSaIcED1Ev>
 8002dc6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f004 f855 	bl	8006e7a <_ZNSaIcED1Ev>
 8002dd0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f004 f850 	bl	8006e7a <_ZNSaIcED1Ev>
    setDigitalInputNames({"D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10"});
 8002dda:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002dde:	4618      	mov	r0, r3
 8002de0:	f004 f84a 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002de4:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8002de8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002dec:	e024      	b.n	8002e38 <_ZN6Config4initEv+0x404>
 8002dee:	bf00      	nop
 8002df0:	0800a318 	.word	0x0800a318
 8002df4:	0800a31c 	.word	0x0800a31c
 8002df8:	0800a320 	.word	0x0800a320
 8002dfc:	0800a324 	.word	0x0800a324
 8002e00:	0800a328 	.word	0x0800a328
 8002e04:	0800a284 	.word	0x0800a284
 8002e08:	0800a28c 	.word	0x0800a28c
 8002e0c:	0800a294 	.word	0x0800a294
 8002e10:	0800a2a0 	.word	0x0800a2a0
 8002e14:	0800a2a4 	.word	0x0800a2a4
 8002e18:	0800a2a8 	.word	0x0800a2a8
 8002e1c:	0800a2ac 	.word	0x0800a2ac
 8002e20:	0800a2b0 	.word	0x0800a2b0
 8002e24:	0800a2b4 	.word	0x0800a2b4
 8002e28:	0800a2b8 	.word	0x0800a2b8
 8002e2c:	0800a2bc 	.word	0x0800a2bc
 8002e30:	0800a2c0 	.word	0x0800a2c0
 8002e34:	0800a2c4 	.word	0x0800a2c4
 8002e38:	49c9      	ldr	r1, [pc, #804]	; (8003160 <_ZN6Config4initEv+0x72c>)
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 f8f4 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002e40:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8002e44:	4618      	mov	r0, r3
 8002e46:	f004 f817 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002e4a:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8002e4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002e52:	3318      	adds	r3, #24
 8002e54:	49c3      	ldr	r1, [pc, #780]	; (8003164 <_ZN6Config4initEv+0x730>)
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 f8e6 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002e5c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002e60:	4618      	mov	r0, r3
 8002e62:	f004 f809 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002e66:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002e6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002e6e:	3330      	adds	r3, #48	; 0x30
 8002e70:	49bd      	ldr	r1, [pc, #756]	; (8003168 <_ZN6Config4initEv+0x734>)
 8002e72:	4618      	mov	r0, r3
 8002e74:	f004 f8d8 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002e78:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fffb 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002e82:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8002e86:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002e8a:	3348      	adds	r3, #72	; 0x48
 8002e8c:	49b7      	ldr	r1, [pc, #732]	; (800316c <_ZN6Config4initEv+0x738>)
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 f8ca 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002e94:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 ffed 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002e9e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002ea2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002ea6:	3360      	adds	r3, #96	; 0x60
 8002ea8:	49b1      	ldr	r1, [pc, #708]	; (8003170 <_ZN6Config4initEv+0x73c>)
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 f8bc 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002eb0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 ffdf 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002eba:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002ebe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002ec2:	3378      	adds	r3, #120	; 0x78
 8002ec4:	49ab      	ldr	r1, [pc, #684]	; (8003174 <_ZN6Config4initEv+0x740>)
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 f8ae 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ecc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 ffd1 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002ed6:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8002eda:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002ede:	3390      	adds	r3, #144	; 0x90
 8002ee0:	49a5      	ldr	r1, [pc, #660]	; (8003178 <_ZN6Config4initEv+0x744>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 f8a0 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ee8:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 ffc3 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002ef2:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8002ef6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002efa:	33a8      	adds	r3, #168	; 0xa8
 8002efc:	499f      	ldr	r1, [pc, #636]	; (800317c <_ZN6Config4initEv+0x748>)
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 f892 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002f04:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 ffb5 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002f0e:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8002f12:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002f16:	33c0      	adds	r3, #192	; 0xc0
 8002f18:	4999      	ldr	r1, [pc, #612]	; (8003180 <_ZN6Config4initEv+0x74c>)
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f004 f884 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002f20:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 ffa7 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002f2a:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8002f2e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002f32:	33d8      	adds	r3, #216	; 0xd8
 8002f34:	4993      	ldr	r1, [pc, #588]	; (8003184 <_ZN6Config4initEv+0x750>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 f876 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002f3c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002f40:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002f44:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8002f48:	4611      	mov	r1, r2
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	f000 fa14 	bl	8003378 <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>
 8002f50:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fd23 	bl	80029a0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 8002f5a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 ff8b 	bl	8006e7a <_ZNSaIcED1Ev>
 8002f64:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 ff86 	bl	8006e7a <_ZNSaIcED1Ev>
 8002f6e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8002f72:	4618      	mov	r0, r3
 8002f74:	f003 ff81 	bl	8006e7a <_ZNSaIcED1Ev>
 8002f78:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 ff7c 	bl	8006e7a <_ZNSaIcED1Ev>
 8002f82:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 ff77 	bl	8006e7a <_ZNSaIcED1Ev>
 8002f8c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 ff72 	bl	8006e7a <_ZNSaIcED1Ev>
 8002f96:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 ff6d 	bl	8006e7a <_ZNSaIcED1Ev>
 8002fa0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 ff68 	bl	8006e7a <_ZNSaIcED1Ev>
 8002faa:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 ff63 	bl	8006e7a <_ZNSaIcED1Ev>
 8002fb4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 ff5e 	bl	8006e7a <_ZNSaIcED1Ev>
    setDigitalOutputNames({"O1", "O2", "O3", "O4", "O5", "O6", "O7", "O8", "O9", "O10"});
 8002fbe:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 ff58 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002fc8:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8002fcc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002fd0:	496d      	ldr	r1, [pc, #436]	; (8003188 <_ZN6Config4initEv+0x754>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 f828 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002fd8:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 ff4b 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002fe2:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8002fe6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002fea:	3318      	adds	r3, #24
 8002fec:	4967      	ldr	r1, [pc, #412]	; (800318c <_ZN6Config4initEv+0x758>)
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 f81a 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ff4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f003 ff3d 	bl	8006e78 <_ZNSaIcEC1Ev>
 8002ffe:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8003002:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003006:	3330      	adds	r3, #48	; 0x30
 8003008:	4961      	ldr	r1, [pc, #388]	; (8003190 <_ZN6Config4initEv+0x75c>)
 800300a:	4618      	mov	r0, r3
 800300c:	f004 f80c 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003010:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8003014:	4618      	mov	r0, r3
 8003016:	f003 ff2f 	bl	8006e78 <_ZNSaIcEC1Ev>
 800301a:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 800301e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003022:	3348      	adds	r3, #72	; 0x48
 8003024:	495b      	ldr	r1, [pc, #364]	; (8003194 <_ZN6Config4initEv+0x760>)
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fffe 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800302c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003030:	4618      	mov	r0, r3
 8003032:	f003 ff21 	bl	8006e78 <_ZNSaIcEC1Ev>
 8003036:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 800303a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800303e:	3360      	adds	r3, #96	; 0x60
 8003040:	4955      	ldr	r1, [pc, #340]	; (8003198 <_ZN6Config4initEv+0x764>)
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fff0 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003048:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800304c:	4618      	mov	r0, r3
 800304e:	f003 ff13 	bl	8006e78 <_ZNSaIcEC1Ev>
 8003052:	f507 726f 	add.w	r2, r7, #956	; 0x3bc
 8003056:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800305a:	3378      	adds	r3, #120	; 0x78
 800305c:	494f      	ldr	r1, [pc, #316]	; (800319c <_ZN6Config4initEv+0x768>)
 800305e:	4618      	mov	r0, r3
 8003060:	f003 ffe2 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003064:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003068:	4618      	mov	r0, r3
 800306a:	f003 ff05 	bl	8006e78 <_ZNSaIcEC1Ev>
 800306e:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8003072:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003076:	3390      	adds	r3, #144	; 0x90
 8003078:	4949      	ldr	r1, [pc, #292]	; (80031a0 <_ZN6Config4initEv+0x76c>)
 800307a:	4618      	mov	r0, r3
 800307c:	f003 ffd4 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003080:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8003084:	4618      	mov	r0, r3
 8003086:	f003 fef7 	bl	8006e78 <_ZNSaIcEC1Ev>
 800308a:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800308e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003092:	33a8      	adds	r3, #168	; 0xa8
 8003094:	4943      	ldr	r1, [pc, #268]	; (80031a4 <_ZN6Config4initEv+0x770>)
 8003096:	4618      	mov	r0, r3
 8003098:	f003 ffc6 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800309c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 fee9 	bl	8006e78 <_ZNSaIcEC1Ev>
 80030a6:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 80030aa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80030ae:	33c0      	adds	r3, #192	; 0xc0
 80030b0:	493d      	ldr	r1, [pc, #244]	; (80031a8 <_ZN6Config4initEv+0x774>)
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 ffb8 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80030b8:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80030bc:	4618      	mov	r0, r3
 80030be:	f003 fedb 	bl	8006e78 <_ZNSaIcEC1Ev>
 80030c2:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 80030c6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80030ca:	33d8      	adds	r3, #216	; 0xd8
 80030cc:	4937      	ldr	r1, [pc, #220]	; (80031ac <_ZN6Config4initEv+0x778>)
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 ffaa 	bl	8007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80030d4:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80030d8:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80030dc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80030e0:	4611      	mov	r1, r2
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	f000 f958 	bl	8003398 <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>
 80030e8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fc57 	bl	80029a0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 80030f2:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 febf 	bl	8006e7a <_ZNSaIcED1Ev>
 80030fc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003100:	4618      	mov	r0, r3
 8003102:	f003 feba 	bl	8006e7a <_ZNSaIcED1Ev>
 8003106:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800310a:	4618      	mov	r0, r3
 800310c:	f003 feb5 	bl	8006e7a <_ZNSaIcED1Ev>
 8003110:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003114:	4618      	mov	r0, r3
 8003116:	f003 feb0 	bl	8006e7a <_ZNSaIcED1Ev>
 800311a:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800311e:	4618      	mov	r0, r3
 8003120:	f003 feab 	bl	8006e7a <_ZNSaIcED1Ev>
 8003124:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fea6 	bl	8006e7a <_ZNSaIcED1Ev>
 800312e:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8003132:	4618      	mov	r0, r3
 8003134:	f003 fea1 	bl	8006e7a <_ZNSaIcED1Ev>
 8003138:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fe9c 	bl	8006e7a <_ZNSaIcED1Ev>
 8003142:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fe97 	bl	8006e7a <_ZNSaIcED1Ev>
 800314c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fe92 	bl	8006e7a <_ZNSaIcED1Ev>
}
 8003156:	bf00      	nop
 8003158:	f507 7774 	add.w	r7, r7, #976	; 0x3d0
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	0800a2c8 	.word	0x0800a2c8
 8003164:	0800a2cc 	.word	0x0800a2cc
 8003168:	0800a2d0 	.word	0x0800a2d0
 800316c:	0800a2d4 	.word	0x0800a2d4
 8003170:	0800a2d8 	.word	0x0800a2d8
 8003174:	0800a2dc 	.word	0x0800a2dc
 8003178:	0800a2e0 	.word	0x0800a2e0
 800317c:	0800a2e4 	.word	0x0800a2e4
 8003180:	0800a2e8 	.word	0x0800a2e8
 8003184:	0800a2ec 	.word	0x0800a2ec
 8003188:	0800a2f0 	.word	0x0800a2f0
 800318c:	0800a2f4 	.word	0x0800a2f4
 8003190:	0800a2f8 	.word	0x0800a2f8
 8003194:	0800a2fc 	.word	0x0800a2fc
 8003198:	0800a300 	.word	0x0800a300
 800319c:	0800a304 	.word	0x0800a304
 80031a0:	0800a308 	.word	0x0800a308
 80031a4:	0800a30c 	.word	0x0800a30c
 80031a8:	0800a310 	.word	0x0800a310
 80031ac:	0800a314 	.word	0x0800a314

080031b0 <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>:
std::array<std::string, MAX_ANALOG_INPUTS> Config::getAnalogInputNames() { return analog_input_names; }
std::array<std::string, MAX_DIGITAL_INPUTS> Config::getDigitalInputNames()  { return digital_input_names; }
std::array<std::string, MAX_DIGITAL_OUTPUTS> Config::getDigitalOutputNames()  { return digital_output_names; }

// Setters
void Config::setBrokerIP(const std::array<uint8_t, 4>& value) { broker_ip = value; }
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	6810      	ldr	r0, [r2, #0]
 80031c0:	6018      	str	r0, [r3, #0]
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <_ZN6Config13setBrokerPortEt>:
void Config::setBrokerPort(uint16_t value) { broker_port = value; }
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	807b      	strh	r3, [r7, #2]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	887a      	ldrh	r2, [r7, #2]
 80031de:	809a      	strh	r2, [r3, #4]
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <_ZN6Config5setIPERKSt5arrayIhLj4EE>:
void Config::setIP(const std::array<uint8_t, 4>& value) { ip = value; }
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	3306      	adds	r3, #6
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>:
void Config::setGateway(const std::array<uint8_t, 4>& value) { gateway = value; }
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	330a      	adds	r3, #10
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>:
void Config::setSubnet(const std::array<uint8_t, 4>& value) { subnet = value; }
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	330e      	adds	r3, #14
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_ZN6Config6setDNSERKSt5arrayIhLj4EE>:
void Config::setDNS(const std::array<uint8_t, 4>& value) { dns = value; }
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	3312      	adds	r3, #18
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_ZN6Config20setKeepAliveIntervalEt>:
void Config::setKeepAliveInterval(uint16_t value) { keep_alive_interval = value; }
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	82da      	strh	r2, [r3, #22]
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_ZN6Config14setDHCPEnabledEb>:
void Config::setDHCPEnabled(bool value) { dhcp_enabled = value; }
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	70fb      	strb	r3, [r7, #3]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	761a      	strb	r2, [r3, #24]
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <_ZN6Config15setIntervalTimeEm>:
void Config::setIntervalTime(uint32_t value) { interval_time = value; }
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	61da      	str	r2, [r3, #28]
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <_ZN6Config11setUsernameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Config::setUsername(const std::string& value) { username = value; }
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3320      	adds	r3, #32
 80032d2:	6839      	ldr	r1, [r7, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 fe48 	bl	8006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setClientId(const std::string& value) { clientId = value; }
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3338      	adds	r3, #56	; 0x38
 80032f0:	6839      	ldr	r1, [r7, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 fe39 	bl	8006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_ZN6Config11setPasswordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setPassword(const std::string& value) { password = value; }
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3350      	adds	r3, #80	; 0x50
 800330e:	6839      	ldr	r1, [r7, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f003 fe2a 	bl	8006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <_ZN6Config15setTopicPublishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void Config::setTopicSubscribe(const std::string& value) { topic_subscribe = value; }
void Config::setTopicPublish(const std::string& value) { topic_publish = value; }
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3380      	adds	r3, #128	; 0x80
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f003 fe1b 	bl	8006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_ZN6Config6setQoSEi>:
void Config::setQoS(int value) { qos = value; }
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>:
void Config::setAnalogInputNames(const std::array<std::string, MAX_ANALOG_INPUTS>& value) { analog_input_names = value; }
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	339c      	adds	r3, #156	; 0x9c
 8003368:	6839      	ldr	r1, [r7, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff f827 	bl	80023be <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>:
void Config::setDigitalInputNames(const std::array<std::string, MAX_DIGITAL_INPUTS>& value) { digital_input_names = value; }
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff f817 	bl	80023be <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>:
void Config::setDigitalOutputNames(const std::array<std::string, MAX_DIGITAL_OUTPUTS>& value) { digital_output_names = value; }
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff f807 	bl	80023be <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033bc:	f000 feec 	bl	8004198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033c0:	f000 f82a 	bl	8003418 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033c4:	f000 fa54 	bl	8003870 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 80033c8:	f000 f9e8 	bl	800379c <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 80033cc:	f000 fa22 	bl	8003814 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 80033d0:	f000 f896 	bl	8003500 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 80033d4:	f000 f952 	bl	800367c <_ZL12MX_ADC2_Initv>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim1);
//  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);

 config.init();
 80033d8:	480a      	ldr	r0, [pc, #40]	; (8003404 <main+0x4c>)
 80033da:	f7ff fb2b 	bl	8002a34 <_ZN6Config4initEv>

 utils.init(&config);
 80033de:	4909      	ldr	r1, [pc, #36]	; (8003404 <main+0x4c>)
 80033e0:	4809      	ldr	r0, [pc, #36]	; (8003408 <main+0x50>)
 80033e2:	f7ff f88b 	bl	80024fc <_ZN5Utils4initEP6Config>

// mqttClient.init(config, &utils);

// mqttClient.subscribe(config.getTopicSubscribe());

 uartHandler.init(&huart1);
 80033e6:	4909      	ldr	r1, [pc, #36]	; (800340c <main+0x54>)
 80033e8:	4809      	ldr	r0, [pc, #36]	; (8003410 <main+0x58>)
 80033ea:	f7ff fa1a 	bl	8002822 <_ZN11UARTHandler4initEP20__UART_HandleTypeDef>
//	mqttClient.mqttYield();

//	utils.createJSON(&statusJsonBuffer);

 //   mqttClient.publish(statusJsonBuffer, config);
    utils.print("While loop \r\n");
 80033ee:	4809      	ldr	r0, [pc, #36]	; (8003414 <main+0x5c>)
 80033f0:	f7ff f982 	bl	80026f8 <_ZN5Utils5printEPKcz>
    uartHandler.processReceivedData();
 80033f4:	4806      	ldr	r0, [pc, #24]	; (8003410 <main+0x58>)
 80033f6:	f7ff fa6b 	bl	80028d0 <_ZN11UARTHandler19processReceivedDataEv>

    HAL_Delay(3000);
 80033fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80033fe:	f000 ff3d 	bl	800427c <HAL_Delay>
    utils.print("While loop \r\n");
 8003402:	e7f4      	b.n	80033ee <main+0x36>
 8003404:	2000033c 	.word	0x2000033c
 8003408:	200006a8 	.word	0x200006a8
 800340c:	200002f4 	.word	0x200002f4
 8003410:	20000b88 	.word	0x20000b88
 8003414:	0800a340 	.word	0x0800a340

08003418 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b094      	sub	sp, #80	; 0x50
 800341c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800341e:	f107 0320 	add.w	r3, r7, #32
 8003422:	2230      	movs	r2, #48	; 0x30
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f004 feb8 	bl	800819c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <_Z18SystemClock_Configv+0xe0>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <_Z18SystemClock_Configv+0xe0>)
 8003446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344a:	6413      	str	r3, [r2, #64]	; 0x40
 800344c:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <_Z18SystemClock_Configv+0xe0>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <_Z18SystemClock_Configv+0xe4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a26      	ldr	r2, [pc, #152]	; (80034fc <_Z18SystemClock_Configv+0xe4>)
 8003462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <_Z18SystemClock_Configv+0xe4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003474:	2301      	movs	r3, #1
 8003476:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800347e:	2302      	movs	r3, #2
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003482:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003488:	2319      	movs	r3, #25
 800348a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800348c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003490:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003492:	2302      	movs	r3, #2
 8003494:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003496:	2304      	movs	r3, #4
 8003498:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800349a:	f107 0320 	add.w	r3, r7, #32
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 ffb2 	bl	8005408 <HAL_RCC_OscConfig>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf14      	ite	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	2300      	moveq	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80034b4:	f000 faf8 	bl	8003aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b8:	230f      	movs	r3, #15
 80034ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034bc:	2302      	movs	r3, #2
 80034be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034d0:	f107 030c 	add.w	r3, r7, #12
 80034d4:	2105      	movs	r1, #5
 80034d6:	4618      	mov	r0, r3
 80034d8:	f002 fa0e 	bl	80058f8 <HAL_RCC_ClockConfig>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 80034ec:	f000 fadc 	bl	8003aa8 <Error_Handler>
  }
}
 80034f0:	bf00      	nop
 80034f2:	3750      	adds	r7, #80	; 0x50
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40007000 	.word	0x40007000

08003500 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	; 0x30
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003506:	f107 0320 	add.w	r3, r7, #32
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003514:	463b      	mov	r3, r7
 8003516:	2220      	movs	r2, #32
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f004 fe3e 	bl	800819c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003520:	4b52      	ldr	r3, [pc, #328]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 8003522:	4a53      	ldr	r2, [pc, #332]	; (8003670 <_ZL12MX_ADC1_Initv+0x170>)
 8003524:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003526:	4b51      	ldr	r3, [pc, #324]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 8003528:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800352c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800352e:	4b4f      	ldr	r3, [pc, #316]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003534:	4b4d      	ldr	r3, [pc, #308]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 8003536:	2201      	movs	r2, #1
 8003538:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800353a:	4b4c      	ldr	r3, [pc, #304]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 800353c:	2201      	movs	r2, #1
 800353e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003540:	4b4a      	ldr	r3, [pc, #296]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003548:	4b48      	ldr	r3, [pc, #288]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 800354a:	2200      	movs	r2, #0
 800354c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 8003550:	4a48      	ldr	r2, [pc, #288]	; (8003674 <_ZL12MX_ADC1_Initv+0x174>)
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003554:	4b45      	ldr	r3, [pc, #276]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 800355c:	2204      	movs	r2, #4
 800355e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003560:	4b42      	ldr	r3, [pc, #264]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003568:	4b40      	ldr	r3, [pc, #256]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 800356a:	2201      	movs	r2, #1
 800356c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800356e:	483f      	ldr	r0, [pc, #252]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 8003570:	f000 fea8 	bl	80042c4 <HAL_ADC_Init>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	bf14      	ite	ne
 800357a:	2301      	movne	r3, #1
 800357c:	2300      	moveq	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <_ZL12MX_ADC1_Initv+0x88>
  {
    Error_Handler();
 8003584:	f000 fa90 	bl	8003aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003588:	2300      	movs	r3, #0
 800358a:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800358c:	2301      	movs	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003590:	2300      	movs	r3, #0
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003594:	f107 0320 	add.w	r3, r7, #32
 8003598:	4619      	mov	r1, r3
 800359a:	4834      	ldr	r0, [pc, #208]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 800359c:	f001 f804 	bl	80045a8 <HAL_ADC_ConfigChannel>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <_ZL12MX_ADC1_Initv+0xb4>
  {
    Error_Handler();
 80035b0:	f000 fa7a 	bl	8003aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80035b4:	2302      	movs	r3, #2
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035b8:	f107 0320 	add.w	r3, r7, #32
 80035bc:	4619      	mov	r1, r3
 80035be:	482b      	ldr	r0, [pc, #172]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 80035c0:	f000 fff2 	bl	80045a8 <HAL_ADC_ConfigChannel>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf14      	ite	ne
 80035ca:	2301      	movne	r3, #1
 80035cc:	2300      	moveq	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <_ZL12MX_ADC1_Initv+0xd8>
  {
    Error_Handler();
 80035d4:	f000 fa68 	bl	8003aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80035d8:	2303      	movs	r3, #3
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035dc:	f107 0320 	add.w	r3, r7, #32
 80035e0:	4619      	mov	r1, r3
 80035e2:	4822      	ldr	r0, [pc, #136]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 80035e4:	f000 ffe0 	bl	80045a8 <HAL_ADC_ConfigChannel>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 80035f8:	f000 fa56 	bl	8003aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80035fc:	2304      	movs	r3, #4
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003600:	f107 0320 	add.w	r3, r7, #32
 8003604:	4619      	mov	r1, r3
 8003606:	4819      	ldr	r0, [pc, #100]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 8003608:	f000 ffce 	bl	80045a8 <HAL_ADC_ConfigChannel>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <_ZL12MX_ADC1_Initv+0x120>
  {
    Error_Handler();
 800361c:	f000 fa44 	bl	8003aa8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8003620:	2300      	movs	r3, #0
 8003622:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8003624:	2301      	movs	r3, #1
 8003626:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8003628:	2301      	movs	r3, #1
 800362a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8003634:	4b10      	ldr	r3, [pc, #64]	; (8003678 <_ZL12MX_ADC1_Initv+0x178>)
 8003636:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800363c:	2300      	movs	r3, #0
 800363e:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003644:	463b      	mov	r3, r7
 8003646:	4619      	mov	r1, r3
 8003648:	4808      	ldr	r0, [pc, #32]	; (800366c <_ZL12MX_ADC1_Initv+0x16c>)
 800364a:	f001 f9d5 	bl	80049f8 <HAL_ADCEx_InjectedConfigChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <_ZL12MX_ADC1_Initv+0x162>
  {
    Error_Handler();
 800365e:	f000 fa23 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003662:	bf00      	nop
 8003664:	3730      	adds	r7, #48	; 0x30
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	2000020c 	.word	0x2000020c
 8003670:	40012000 	.word	0x40012000
 8003674:	0f000001 	.word	0x0f000001
 8003678:	000f0001 	.word	0x000f0001

0800367c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003682:	463b      	mov	r3, r7
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800368e:	4b40      	ldr	r3, [pc, #256]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 8003690:	4a40      	ldr	r2, [pc, #256]	; (8003794 <_ZL12MX_ADC2_Initv+0x118>)
 8003692:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003694:	4b3e      	ldr	r3, [pc, #248]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 8003696:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800369a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800369c:	4b3c      	ldr	r3, [pc, #240]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 800369e:	2200      	movs	r2, #0
 80036a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80036a2:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80036a8:	4b39      	ldr	r3, [pc, #228]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80036ae:	4b38      	ldr	r3, [pc, #224]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036b6:	4b36      	ldr	r3, [pc, #216]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036bc:	4b34      	ldr	r3, [pc, #208]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 80036be:	4a36      	ldr	r2, [pc, #216]	; (8003798 <_ZL12MX_ADC2_Initv+0x11c>)
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036c2:	4b33      	ldr	r3, [pc, #204]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80036c8:	4b31      	ldr	r3, [pc, #196]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 80036ca:	2204      	movs	r2, #4
 80036cc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80036ce:	4b30      	ldr	r3, [pc, #192]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036d6:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 80036d8:	2201      	movs	r2, #1
 80036da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80036dc:	482c      	ldr	r0, [pc, #176]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 80036de:	f000 fdf1 	bl	80042c4 <HAL_ADC_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 80036f2:	f000 f9d9 	bl	8003aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80036f6:	2301      	movs	r3, #1
 80036f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80036fa:	2301      	movs	r3, #1
 80036fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003702:	463b      	mov	r3, r7
 8003704:	4619      	mov	r1, r3
 8003706:	4822      	ldr	r0, [pc, #136]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 8003708:	f000 ff4e 	bl	80045a8 <HAL_ADC_ConfigChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf14      	ite	ne
 8003712:	2301      	movne	r3, #1
 8003714:	2300      	moveq	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 800371c:	f000 f9c4 	bl	8003aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8003720:	2302      	movs	r3, #2
 8003722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003724:	463b      	mov	r3, r7
 8003726:	4619      	mov	r1, r3
 8003728:	4819      	ldr	r0, [pc, #100]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 800372a:	f000 ff3d 	bl	80045a8 <HAL_ADC_ConfigChannel>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <_ZL12MX_ADC2_Initv+0xc6>
  {
    Error_Handler();
 800373e:	f000 f9b3 	bl	8003aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8003742:	2303      	movs	r3, #3
 8003744:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003746:	463b      	mov	r3, r7
 8003748:	4619      	mov	r1, r3
 800374a:	4811      	ldr	r0, [pc, #68]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 800374c:	f000 ff2c 	bl	80045a8 <HAL_ADC_ConfigChannel>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf14      	ite	ne
 8003756:	2301      	movne	r3, #1
 8003758:	2300      	moveq	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <_ZL12MX_ADC2_Initv+0xe8>
  {
    Error_Handler();
 8003760:	f000 f9a2 	bl	8003aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8003764:	2304      	movs	r3, #4
 8003766:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003768:	463b      	mov	r3, r7
 800376a:	4619      	mov	r1, r3
 800376c:	4808      	ldr	r0, [pc, #32]	; (8003790 <_ZL12MX_ADC2_Initv+0x114>)
 800376e:	f000 ff1b 	bl	80045a8 <HAL_ADC_ConfigChannel>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <_ZL12MX_ADC2_Initv+0x10a>
  {
    Error_Handler();
 8003782:	f000 f991 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000254 	.word	0x20000254
 8003794:	40012100 	.word	0x40012100
 8003798:	0f000001 	.word	0x0f000001

0800379c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80037a0:	4b1a      	ldr	r3, [pc, #104]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037a2:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <_ZL12MX_SPI2_Initv+0x74>)
 80037a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80037b4:	4b15      	ldr	r3, [pc, #84]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037bc:	2200      	movs	r2, #0
 80037be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037c0:	4b12      	ldr	r3, [pc, #72]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037d4:	4b0d      	ldr	r3, [pc, #52]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037dc:	2200      	movs	r2, #0
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037e8:	220a      	movs	r2, #10
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80037ec:	4807      	ldr	r0, [pc, #28]	; (800380c <_ZL12MX_SPI2_Initv+0x70>)
 80037ee:	f002 fa63 	bl	8005cb8 <HAL_SPI_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8003802:	f000 f951 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	2000029c 	.word	0x2000029c
 8003810:	40003800 	.word	0x40003800

08003814 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <_ZL19MX_USART1_UART_Initv+0x54>)
 800381a:	4a14      	ldr	r2, [pc, #80]	; (800386c <_ZL19MX_USART1_UART_Initv+0x58>)
 800381c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <_ZL19MX_USART1_UART_Initv+0x54>)
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <_ZL19MX_USART1_UART_Initv+0x54>)
 800383a:	220c      	movs	r2, #12
 800383c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003846:	2200      	movs	r2, #0
 8003848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800384a:	4807      	ldr	r0, [pc, #28]	; (8003868 <_ZL19MX_USART1_UART_Initv+0x54>)
 800384c:	f002 fabd 	bl	8005dca <HAL_UART_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf14      	ite	ne
 8003856:	2301      	movne	r3, #1
 8003858:	2300      	moveq	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8003860:	f000 f922 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200002f4 	.word	0x200002f4
 800386c:	40011000 	.word	0x40011000

08003870 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	; 0x30
 8003874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003876:	f107 031c 	add.w	r3, r7, #28
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	609a      	str	r2, [r3, #8]
 8003882:	60da      	str	r2, [r3, #12]
 8003884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	4b71      	ldr	r3, [pc, #452]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4a70      	ldr	r2, [pc, #448]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6313      	str	r3, [r2, #48]	; 0x30
 8003896:	4b6e      	ldr	r3, [pc, #440]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	4b6a      	ldr	r3, [pc, #424]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a69      	ldr	r2, [pc, #420]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 80038ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b67      	ldr	r3, [pc, #412]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4a62      	ldr	r2, [pc, #392]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6313      	str	r3, [r2, #48]	; 0x30
 80038ce:	4b60      	ldr	r3, [pc, #384]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b5c      	ldr	r3, [pc, #368]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a5b      	ldr	r2, [pc, #364]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 80038e4:	f043 0310 	orr.w	r3, r3, #16
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	4b55      	ldr	r3, [pc, #340]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a54      	ldr	r2, [pc, #336]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b52      	ldr	r3, [pc, #328]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	607b      	str	r3, [r7, #4]
 8003916:	4b4e      	ldr	r3, [pc, #312]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a4d      	ldr	r2, [pc, #308]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 800391c:	f043 0308 	orr.w	r3, r3, #8
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <_ZL12MX_GPIO_Initv+0x1e0>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, switch5_Pin|switch6_Pin|switch7_Pin|switch8_Pin, GPIO_PIN_RESET);
 800392e:	2200      	movs	r2, #0
 8003930:	21f0      	movs	r1, #240	; 0xf0
 8003932:	4848      	ldr	r0, [pc, #288]	; (8003a54 <_ZL12MX_GPIO_Initv+0x1e4>)
 8003934:	f001 fd36 	bl	80053a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RESET_GPIO_Port, W5500_RESET_Pin, GPIO_PIN_RESET);
 8003938:	2200      	movs	r2, #0
 800393a:	2120      	movs	r1, #32
 800393c:	4846      	ldr	r0, [pc, #280]	; (8003a58 <_ZL12MX_GPIO_Initv+0x1e8>)
 800393e:	f001 fd31 	bl	80053a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, switch1_Pin|switch2_Pin|switch3_Pin|switch4_Pin
 8003942:	2200      	movs	r2, #0
 8003944:	f24f 0102 	movw	r1, #61442	; 0xf002
 8003948:	4844      	ldr	r0, [pc, #272]	; (8003a5c <_ZL12MX_GPIO_Initv+0x1ec>)
 800394a:	f001 fd2b 	bl	80053a4 <HAL_GPIO_WritePin>
                          |sound_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 800394e:	2200      	movs	r2, #0
 8003950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003954:	4842      	ldr	r0, [pc, #264]	; (8003a60 <_ZL12MX_GPIO_Initv+0x1f0>)
 8003956:	f001 fd25 	bl	80053a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 800395a:	f240 33cf 	movw	r3, #975	; 0x3cf
 800395e:	61fb      	str	r3, [r7, #28]
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003960:	2300      	movs	r3, #0
 8003962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003964:	2302      	movs	r3, #2
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	4619      	mov	r1, r3
 800396e:	483a      	ldr	r0, [pc, #232]	; (8003a58 <_ZL12MX_GPIO_Initv+0x1e8>)
 8003970:	f001 fb7c 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pins : switch5_Pin switch6_Pin switch7_Pin switch8_Pin */
  GPIO_InitStruct.Pin = switch5_Pin|switch6_Pin|switch7_Pin|switch8_Pin;
 8003974:	23f0      	movs	r3, #240	; 0xf0
 8003976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003978:	2301      	movs	r3, #1
 800397a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003980:	2300      	movs	r3, #0
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003984:	f107 031c 	add.w	r3, r7, #28
 8003988:	4619      	mov	r1, r3
 800398a:	4832      	ldr	r0, [pc, #200]	; (8003a54 <_ZL12MX_GPIO_Initv+0x1e4>)
 800398c:	f001 fb6e 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RESET_Pin */
  GPIO_InitStruct.Pin = W5500_RESET_Pin;
 8003990:	2320      	movs	r3, #32
 8003992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003994:	2301      	movs	r3, #1
 8003996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399c:	2300      	movs	r3, #0
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_RESET_GPIO_Port, &GPIO_InitStruct);
 80039a0:	f107 031c 	add.w	r3, r7, #28
 80039a4:	4619      	mov	r1, r3
 80039a6:	482c      	ldr	r0, [pc, #176]	; (8003a58 <_ZL12MX_GPIO_Initv+0x1e8>)
 80039a8:	f001 fb60 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pin : NetworkStatus_Pin */
  GPIO_InitStruct.Pin = NetworkStatus_Pin;
 80039ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80039b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NetworkStatus_GPIO_Port, &GPIO_InitStruct);
 80039bc:	f107 031c 	add.w	r3, r7, #28
 80039c0:	4619      	mov	r1, r3
 80039c2:	4826      	ldr	r0, [pc, #152]	; (8003a5c <_ZL12MX_GPIO_Initv+0x1ec>)
 80039c4:	f001 fb52 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pins : switch1_Pin switch2_Pin switch3_Pin switch4_Pin
                           sound_Pin */
  GPIO_InitStruct.Pin = switch1_Pin|switch2_Pin|switch3_Pin|switch4_Pin
 80039c8:	f24f 0302 	movw	r3, #61442	; 0xf002
 80039cc:	61fb      	str	r3, [r7, #28]
                          |sound_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ce:	2301      	movs	r3, #1
 80039d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039da:	f107 031c 	add.w	r3, r7, #28
 80039de:	4619      	mov	r1, r3
 80039e0:	481e      	ldr	r0, [pc, #120]	; (8003a5c <_ZL12MX_GPIO_Initv+0x1ec>)
 80039e2:	f001 fb43 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 80039e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ec:	2301      	movs	r3, #1
 80039ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	2300      	movs	r3, #0
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 80039f8:	f107 031c 	add.w	r3, r7, #28
 80039fc:	4619      	mov	r1, r3
 80039fe:	4818      	ldr	r0, [pc, #96]	; (8003a60 <_ZL12MX_GPIO_Initv+0x1f0>)
 8003a00:	f001 fb34 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pins : DI5_Pin DI6_Pin DI7_Pin DI8_Pin */
  GPIO_InitStruct.Pin = DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin;
 8003a04:	f44f 531c 	mov.w	r3, #9984	; 0x2700
 8003a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a12:	f107 031c 	add.w	r3, r7, #28
 8003a16:	4619      	mov	r1, r3
 8003a18:	4812      	ldr	r0, [pc, #72]	; (8003a64 <_ZL12MX_GPIO_Initv+0x1f4>)
 8003a1a:	f001 fb27 	bl	800506c <HAL_GPIO_Init>

  /*Configure GPIO pins : DI13_Pin DI14_Pin DI15_Pin DI16_Pin */
  GPIO_InitStruct.Pin = DI13_Pin|DI14_Pin|DI15_Pin|DI16_Pin;
 8003a1e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a24:	2300      	movs	r3, #0
 8003a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	4619      	mov	r1, r3
 8003a32:	4808      	ldr	r0, [pc, #32]	; (8003a54 <_ZL12MX_GPIO_Initv+0x1e4>)
 8003a34:	f001 fb1a 	bl	800506c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	2028      	movs	r0, #40	; 0x28
 8003a3e:	f001 fa4c 	bl	8004eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a42:	2028      	movs	r0, #40	; 0x28
 8003a44:	f001 fa65 	bl	8004f12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a48:	bf00      	nop
 8003a4a:	3730      	adds	r7, #48	; 0x30
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40020000 	.word	0x40020000
 8003a58:	40020800 	.word	0x40020800
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40020400 	.word	0x40020400
 8003a64:	40020c00 	.word	0x40020c00

08003a68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11) {
    //  UART_Printf("Internet connection lost \r\n");
    }
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <HAL_UART_RxCpltCallback>:


extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]


    if (huart->Instance == USART1) { // Check if this is the correct UART instance
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_UART_RxCpltCallback+0x20>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d102      	bne.n	8003a98 <HAL_UART_RxCpltCallback+0x18>
    	uartHandler.onReceive();
 8003a92:	4804      	ldr	r0, [pc, #16]	; (8003aa4 <HAL_UART_RxCpltCallback+0x24>)
 8003a94:	f7fe feda 	bl	800284c <_ZN11UARTHandler9onReceiveEv>
    }


}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40011000 	.word	0x40011000
 8003aa4:	20000b88 	.word	0x20000b88

08003aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003aac:	b672      	cpsid	i
}
 8003aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ab0:	e7fe      	b.n	8003ab0 <Error_Handler+0x8>

08003ab2 <_ZN6ConfigD1Ev>:
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe ff6d 	bl	80029a0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe ff67 	bl	80029a0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	339c      	adds	r3, #156	; 0x9c
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe ff62 	bl	80029a0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3380      	adds	r3, #128	; 0x80
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f003 fa3c 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3368      	adds	r3, #104	; 0x68
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 fa37 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3350      	adds	r3, #80	; 0x50
 8003af4:	4618      	mov	r0, r3
 8003af6:	f003 fa32 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3338      	adds	r3, #56	; 0x38
 8003afe:	4618      	mov	r0, r3
 8003b00:	f003 fa2d 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3320      	adds	r3, #32
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 fa28 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <_ZN5UtilsD1Ev>:
public:
    std::string name;
    int status;
};

class Utils {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ffc5 	bl	8003ab2 <_ZN6ConfigD1Ev>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d116      	bne.n	8003b72 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d111      	bne.n	8003b72 <_Z41__static_initialization_and_destruction_0ii+0x3e>
Config config;
 8003b4e:	4816      	ldr	r0, [pc, #88]	; (8003ba8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003b50:	f7fe ff3d 	bl	80029ce <_ZN6ConfigC1Ev>
Utils utils;
 8003b54:	4815      	ldr	r0, [pc, #84]	; (8003bac <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003b56:	f7fe fc25 	bl	80023a4 <_ZN5UtilsC1Ev>
EthernetManager ethManager;
 8003b5a:	4815      	ldr	r0, [pc, #84]	; (8003bb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003b5c:	f7fe fe37 	bl	80027ce <_ZN15EthernetManagerC1Ev>
MQTTConnection mqttClient;
 8003b60:	4814      	ldr	r0, [pc, #80]	; (8003bb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003b62:	f000 f83d 	bl	8003be0 <_ZN14MQTTConnectionC1Ev>
UARTHandler uartHandler;
 8003b66:	4814      	ldr	r0, [pc, #80]	; (8003bb8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003b68:	f7fe fe3c 	bl	80027e4 <_ZN11UARTHandlerC1Ev>
static std::string statusJsonBuffer;
 8003b6c:	4813      	ldr	r0, [pc, #76]	; (8003bbc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003b6e:	f003 f9ef 	bl	8006f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d113      	bne.n	8003ba0 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10e      	bne.n	8003ba0 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8003b82:	480e      	ldr	r0, [pc, #56]	; (8003bbc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003b84:	f003 f9eb 	bl	8006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
MQTTConnection mqttClient;
 8003b88:	480a      	ldr	r0, [pc, #40]	; (8003bb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003b8a:	f000 f839 	bl	8003c00 <_ZN14MQTTConnectionD1Ev>
EthernetManager ethManager;
 8003b8e:	4808      	ldr	r0, [pc, #32]	; (8003bb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003b90:	f7fe fe12 	bl	80027b8 <_ZN15EthernetManagerD1Ev>
Utils utils;
 8003b94:	4805      	ldr	r0, [pc, #20]	; (8003bac <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003b96:	f7ff ffbf 	bl	8003b18 <_ZN5UtilsD1Ev>
Config config;
 8003b9a:	4803      	ldr	r0, [pc, #12]	; (8003ba8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003b9c:	f7ff ff89 	bl	8003ab2 <_ZN6ConfigD1Ev>
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	2000033c 	.word	0x2000033c
 8003bac:	200006a8 	.word	0x200006a8
 8003bb0:	20000b14 	.word	0x20000b14
 8003bb4:	20000b18 	.word	0x20000b18
 8003bb8:	20000b88 	.word	0x20000b88
 8003bbc:	200013a0 	.word	0x200013a0

08003bc0 <_GLOBAL__sub_I_hadc1>:
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f7ff ffb3 	bl	8003b34 <_Z41__static_initialization_and_destruction_0ii>
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_GLOBAL__sub_D_hadc1>:
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003bd8:	2000      	movs	r0, #0
 8003bda:	f7ff ffab 	bl	8003b34 <_Z41__static_initialization_and_destruction_0ii>
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <_ZN14MQTTConnectionC1Ev>:
uint8_t MQTTConnection::send_buffer[2048];
uint8_t MQTTConnection::recieve_buff[2048];
MQTTConnection* MQTTConnection::instance = nullptr;


MQTTConnection::MQTTConnection() {
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

	MQTTConnection::instance = this;
 8003be8:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <_ZN14MQTTConnectionC1Ev+0x1c>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6013      	str	r3, [r2, #0]

}
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	200013b8 	.word	0x200013b8

08003c00 <_ZN14MQTTConnectionD1Ev>:
	  }
}



MQTTConnection::~MQTTConnection() {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
    // Clean up resources, if necessary
    disconnect();
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f80f 	bl	8003c2c <_ZN14MQTTConnection10disconnectEv>
    if (MQTTConnection::instance == this) {
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <_ZN14MQTTConnectionD1Ev+0x28>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d102      	bne.n	8003c1e <_ZN14MQTTConnectionD1Ev+0x1e>
    	MQTTConnection::instance = nullptr;
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <_ZN14MQTTConnectionD1Ev+0x28>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
    }
}
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	200013b8 	.word	0x200013b8

08003c2c <_ZN14MQTTConnection10disconnectEv>:

void MQTTConnection::disconnect() {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    // Disconnect from the MQTT broker
    MQTTDisconnect(&mqttClient);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fa6f 	bl	800211c <MQTTDisconnect>
    utils->print("Disconnected from MQTT broker.\n");
 8003c3e:	4803      	ldr	r0, [pc, #12]	; (8003c4c <_ZN14MQTTConnection10disconnectEv+0x20>)
 8003c40:	f7fe fd5a 	bl	80026f8 <_ZN5Utils5printEPKcz>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	0800a49c 	.word	0x0800a49c

08003c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	4a0f      	ldr	r2, [pc, #60]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c64:	6453      	str	r3, [r2, #68]	; 0x44
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08c      	sub	sp, #48	; 0x30
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca8:	f107 031c 	add.w	r3, r7, #28
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a36      	ldr	r2, [pc, #216]	; (8003d98 <HAL_ADC_MspInit+0xf8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d130      	bne.n	8003d24 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	4b35      	ldr	r3, [pc, #212]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	4a34      	ldr	r2, [pc, #208]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd2:	4b32      	ldr	r3, [pc, #200]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	4a2d      	ldr	r2, [pc, #180]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6313      	str	r3, [r2, #48]	; 0x30
 8003cee:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d06:	f107 031c 	add.w	r3, r7, #28
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4824      	ldr	r0, [pc, #144]	; (8003da0 <HAL_ADC_MspInit+0x100>)
 8003d0e:	f001 f9ad 	bl	800506c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003d12:	2200      	movs	r2, #0
 8003d14:	2100      	movs	r1, #0
 8003d16:	2012      	movs	r0, #18
 8003d18:	f001 f8df 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003d1c:	2012      	movs	r0, #18
 8003d1e:	f001 f8f8 	bl	8004f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003d22:	e034      	b.n	8003d8e <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_ADC_MspInit+0x104>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d12f      	bne.n	8003d8e <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_ADC_MspInit+0xfc>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003d66:	2302      	movs	r3, #2
 8003d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d72:	f107 031c 	add.w	r3, r7, #28
 8003d76:	4619      	mov	r1, r3
 8003d78:	4809      	ldr	r0, [pc, #36]	; (8003da0 <HAL_ADC_MspInit+0x100>)
 8003d7a:	f001 f977 	bl	800506c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2100      	movs	r1, #0
 8003d82:	2012      	movs	r0, #18
 8003d84:	f001 f8a9 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003d88:	2012      	movs	r0, #18
 8003d8a:	f001 f8c2 	bl	8004f12 <HAL_NVIC_EnableIRQ>
}
 8003d8e:	bf00      	nop
 8003d90:	3730      	adds	r7, #48	; 0x30
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40012000 	.word	0x40012000
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40020000 	.word	0x40020000
 8003da4:	40012100 	.word	0x40012100

08003da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <HAL_SPI_MspInit+0x84>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d12c      	bne.n	8003e24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <HAL_SPI_MspInit+0x88>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <HAL_SPI_MspInit+0x88>)
 8003dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <HAL_SPI_MspInit+0x88>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <HAL_SPI_MspInit+0x88>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <HAL_SPI_MspInit+0x88>)
 8003df0:	f043 0302 	orr.w	r3, r3, #2
 8003df4:	6313      	str	r3, [r2, #48]	; 0x30
 8003df6:	4b0e      	ldr	r3, [pc, #56]	; (8003e30 <HAL_SPI_MspInit+0x88>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e02:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e10:	2303      	movs	r3, #3
 8003e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e14:	2305      	movs	r3, #5
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4805      	ldr	r0, [pc, #20]	; (8003e34 <HAL_SPI_MspInit+0x8c>)
 8003e20:	f001 f924 	bl	800506c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003e24:	bf00      	nop
 8003e26:	3728      	adds	r7, #40	; 0x28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40003800 	.word	0x40003800
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40020400 	.word	0x40020400

08003e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e40:	f107 0314 	add.w	r3, r7, #20
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <HAL_UART_MspInit+0x94>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d133      	bne.n	8003ec2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ed0 <HAL_UART_MspInit+0x98>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <HAL_UART_MspInit+0x98>)
 8003e64:	f043 0310 	orr.w	r3, r3, #16
 8003e68:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6a:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_UART_MspInit+0x98>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_UART_MspInit+0x98>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <HAL_UART_MspInit+0x98>)
 8003e80:	f043 0302 	orr.w	r3, r3, #2
 8003e84:	6313      	str	r3, [r2, #48]	; 0x30
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_UART_MspInit+0x98>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e92:	23c0      	movs	r3, #192	; 0xc0
 8003e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e96:	2302      	movs	r3, #2
 8003e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea6:	f107 0314 	add.w	r3, r7, #20
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4809      	ldr	r0, [pc, #36]	; (8003ed4 <HAL_UART_MspInit+0x9c>)
 8003eae:	f001 f8dd 	bl	800506c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	2025      	movs	r0, #37	; 0x25
 8003eb8:	f001 f80f 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ebc:	2025      	movs	r0, #37	; 0x25
 8003ebe:	f001 f828 	bl	8004f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ec2:	bf00      	nop
 8003ec4:	3728      	adds	r7, #40	; 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40011000 	.word	0x40011000
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40020400 	.word	0x40020400

08003ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003edc:	e7fe      	b.n	8003edc <NMI_Handler+0x4>

08003ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee2:	e7fe      	b.n	8003ee2 <HardFault_Handler+0x4>

08003ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee8:	e7fe      	b.n	8003ee8 <MemManage_Handler+0x4>

08003eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eee:	e7fe      	b.n	8003eee <BusFault_Handler+0x4>

08003ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef4:	e7fe      	b.n	8003ef4 <UsageFault_Handler+0x4>

08003ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f12:	b480      	push	{r7}
 8003f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f24:	f000 f98a 	bl	800423c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  MilliTimer_Handler();
 8003f28:	f7fe f92a 	bl	8002180 <MilliTimer_Handler>

  static uint16_t milli_count;
   milli_count++;
 8003f2c:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <SysTick_Handler+0x30>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <SysTick_Handler+0x30>)
 8003f36:	801a      	strh	r2, [r3, #0]
   if(milli_count==1000)
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <SysTick_Handler+0x30>)
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f40:	d104      	bne.n	8003f4c <SysTick_Handler+0x2c>
   {
   milli_count=0;
 8003f42:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <SysTick_Handler+0x30>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	801a      	strh	r2, [r3, #0]
   DHCP_time_handler();
 8003f48:	f7fc fffc 	bl	8000f44 <DHCP_time_handler>
   }

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f4c:	bf00      	nop
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200013bc 	.word	0x200013bc

08003f54 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003f58:	4803      	ldr	r0, [pc, #12]	; (8003f68 <ADC_IRQHandler+0x14>)
 8003f5a:	f000 f9f6 	bl	800434a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003f5e:	4803      	ldr	r0, [pc, #12]	; (8003f6c <ADC_IRQHandler+0x18>)
 8003f60:	f000 f9f3 	bl	800434a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003f64:	bf00      	nop
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	2000020c 	.word	0x2000020c
 8003f6c:	20000254 	.word	0x20000254

08003f70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
	  }

	  */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f74:	4802      	ldr	r0, [pc, #8]	; (8003f80 <USART1_IRQHandler+0x10>)
 8003f76:	f002 f829 	bl	8005fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	200002f4 	.word	0x200002f4

08003f84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NetworkStatus_Pin);
 8003f88:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f8c:	f001 fa24 	bl	80053d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return 1;
 8003f98:	2301      	movs	r3, #1
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_kill>:

int _kill(int pid, int sig)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fae:	f004 f9a9 	bl	8008304 <__errno>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2216      	movs	r2, #22
 8003fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <_exit>:

void _exit (int status)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffe7 	bl	8003fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fd6:	e7fe      	b.n	8003fd6 <_exit+0x12>

08003fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e00a      	b.n	8004000 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fea:	f3af 8000 	nop.w
 8003fee:	4601      	mov	r1, r0
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	60ba      	str	r2, [r7, #8]
 8003ff6:	b2ca      	uxtb	r2, r1
 8003ff8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	dbf0      	blt.n	8003fea <_read+0x12>
  }

  return len;
 8004008:	687b      	ldr	r3, [r7, #4]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e009      	b.n	8004038 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	60ba      	str	r2, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	3301      	adds	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	429a      	cmp	r2, r3
 800403e:	dbf1      	blt.n	8004024 <_write+0x12>
  }
  return len;
 8004040:	687b      	ldr	r3, [r7, #4]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <_close>:

int _close(int file)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004072:	605a      	str	r2, [r3, #4]
  return 0;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <_isatty>:

int _isatty(int file)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800408a:	2301      	movs	r3, #1
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <_sbrk+0x5c>)
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <_sbrk+0x60>)
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <_sbrk+0x64>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040d0:	4b11      	ldr	r3, [pc, #68]	; (8004118 <_sbrk+0x64>)
 80040d2:	4a12      	ldr	r2, [pc, #72]	; (800411c <_sbrk+0x68>)
 80040d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040d6:	4b10      	ldr	r3, [pc, #64]	; (8004118 <_sbrk+0x64>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d207      	bcs.n	80040f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040e4:	f004 f90e 	bl	8008304 <__errno>
 80040e8:	4603      	mov	r3, r0
 80040ea:	220c      	movs	r2, #12
 80040ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
 80040f2:	e009      	b.n	8004108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040f4:	4b08      	ldr	r3, [pc, #32]	; (8004118 <_sbrk+0x64>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <_sbrk+0x64>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	4a05      	ldr	r2, [pc, #20]	; (8004118 <_sbrk+0x64>)
 8004104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20020000 	.word	0x20020000
 8004114:	00000400 	.word	0x00000400
 8004118:	200013c0 	.word	0x200013c0
 800411c:	20001518 	.word	0x20001518

08004120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <SystemInit+0x20>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <SystemInit+0x20>)
 800412c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800417c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004148:	f7ff ffea 	bl	8004120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800414c:	480c      	ldr	r0, [pc, #48]	; (8004180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800414e:	490d      	ldr	r1, [pc, #52]	; (8004184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004150:	4a0d      	ldr	r2, [pc, #52]	; (8004188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004154:	e002      	b.n	800415c <LoopCopyDataInit>

08004156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800415a:	3304      	adds	r3, #4

0800415c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800415c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800415e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004160:	d3f9      	bcc.n	8004156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004162:	4a0a      	ldr	r2, [pc, #40]	; (800418c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004164:	4c0a      	ldr	r4, [pc, #40]	; (8004190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004168:	e001      	b.n	800416e <LoopFillZerobss>

0800416a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800416a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800416c:	3204      	adds	r2, #4

0800416e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800416e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004170:	d3fb      	bcc.n	800416a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004172:	f004 f8cd 	bl	8008310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004176:	f7ff f91f 	bl	80033b8 <main>
  bx  lr    
 800417a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800417c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004184:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004188:	0800a98c 	.word	0x0800a98c
  ldr r2, =_sbss
 800418c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004190:	20001518 	.word	0x20001518

08004194 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004194:	e7fe      	b.n	8004194 <CAN1_RX0_IRQHandler>
	...

08004198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <HAL_Init+0x40>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0d      	ldr	r2, [pc, #52]	; (80041d8 <HAL_Init+0x40>)
 80041a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_Init+0x40>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <HAL_Init+0x40>)
 80041ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <HAL_Init+0x40>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <HAL_Init+0x40>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c0:	2003      	movs	r0, #3
 80041c2:	f000 fe7f 	bl	8004ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041c6:	200f      	movs	r0, #15
 80041c8:	f000 f808 	bl	80041dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041cc:	f7ff fd40 	bl	8003c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023c00 	.word	0x40023c00

080041dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_InitTick+0x54>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_InitTick+0x58>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fe97 	bl	8004f2e <HAL_SYSTICK_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e00e      	b.n	8004228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b0f      	cmp	r3, #15
 800420e:	d80a      	bhi.n	8004226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004210:	2200      	movs	r2, #0
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	f000 fe5f 	bl	8004eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800421c:	4a06      	ldr	r2, [pc, #24]	; (8004238 <HAL_InitTick+0x5c>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	2000000c 	.word	0x2000000c
 8004234:	20000014 	.word	0x20000014
 8004238:	20000010 	.word	0x20000010

0800423c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_IncTick+0x20>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_IncTick+0x24>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4413      	add	r3, r2
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <HAL_IncTick+0x24>)
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000014 	.word	0x20000014
 8004260:	200013c4 	.word	0x200013c4

08004264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return uwTick;
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <HAL_GetTick+0x14>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	200013c4 	.word	0x200013c4

0800427c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004284:	f7ff ffee 	bl	8004264 <HAL_GetTick>
 8004288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d005      	beq.n	80042a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_Delay+0x44>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042a2:	bf00      	nop
 80042a4:	f7ff ffde 	bl	8004264 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d8f7      	bhi.n	80042a4 <HAL_Delay+0x28>
  {
  }
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000014 	.word	0x20000014

080042c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e033      	b.n	8004342 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff fcdc 	bl	8003ca0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d118      	bne.n	8004334 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800430a:	f023 0302 	bic.w	r3, r3, #2
 800430e:	f043 0202 	orr.w	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fa68 	bl	80047ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f023 0303 	bic.w	r3, r3, #3
 800432a:	f043 0201 	orr.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
 8004332:	e001      	b.n	8004338 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d049      	beq.n	8004414 <HAL_ADC_IRQHandler+0xca>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d046      	beq.n	8004414 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	d105      	bne.n	800439e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d12b      	bne.n	8004404 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d127      	bne.n	8004404 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d006      	beq.n	80043d0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d119      	bne.n	8004404 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0220 	bic.w	r2, r2, #32
 80043de:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f043 0201 	orr.w	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f8b0 	bl	800456a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f06f 0212 	mvn.w	r2, #18
 8004412:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d057      	beq.n	80044da <HAL_ADC_IRQHandler+0x190>
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d054      	beq.n	80044da <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d139      	bne.n	80044ca <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004460:	2b00      	cmp	r3, #0
 8004462:	d006      	beq.n	8004472 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800446e:	2b00      	cmp	r3, #0
 8004470:	d12b      	bne.n	80044ca <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800447c:	2b00      	cmp	r3, #0
 800447e:	d124      	bne.n	80044ca <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800448a:	2b00      	cmp	r3, #0
 800448c:	d11d      	bne.n	80044ca <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004492:	2b00      	cmp	r3, #0
 8004494:	d119      	bne.n	80044ca <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044a4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fa8a 	bl	80049e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 020c 	mvn.w	r2, #12
 80044d8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d017      	beq.n	8004520 <HAL_ADC_IRQHandler+0x1d6>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d014      	beq.n	8004520 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d10d      	bne.n	8004520 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f834 	bl	800457e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0201 	mvn.w	r2, #1
 800451e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800452e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d015      	beq.n	8004562 <HAL_ADC_IRQHandler+0x218>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d012      	beq.n	8004562 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	f043 0202 	orr.w	r2, r3, #2
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0220 	mvn.w	r2, #32
 8004550:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f81d 	bl	8004592 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0220 	mvn.w	r2, #32
 8004560:	601a      	str	r2, [r3, #0]
  }
}
 8004562:	bf00      	nop
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x1c>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e105      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x228>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b09      	cmp	r3, #9
 80045d2:	d925      	bls.n	8004620 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68d9      	ldr	r1, [r3, #12]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	4613      	mov	r3, r2
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	4413      	add	r3, r2
 80045e8:	3b1e      	subs	r3, #30
 80045ea:	2207      	movs	r2, #7
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43da      	mvns	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	400a      	ands	r2, r1
 80045f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68d9      	ldr	r1, [r3, #12]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	4618      	mov	r0, r3
 800460c:	4603      	mov	r3, r0
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4403      	add	r3, r0
 8004612:	3b1e      	subs	r3, #30
 8004614:	409a      	lsls	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	e022      	b.n	8004666 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6919      	ldr	r1, [r3, #16]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	2207      	movs	r2, #7
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43da      	mvns	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	400a      	ands	r2, r1
 8004642:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6919      	ldr	r1, [r3, #16]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	4618      	mov	r0, r3
 8004656:	4603      	mov	r3, r0
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4403      	add	r3, r0
 800465c:	409a      	lsls	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b06      	cmp	r3, #6
 800466c:	d824      	bhi.n	80046b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	3b05      	subs	r3, #5
 8004680:	221f      	movs	r2, #31
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43da      	mvns	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	400a      	ands	r2, r1
 800468e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	4618      	mov	r0, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	3b05      	subs	r3, #5
 80046aa:	fa00 f203 	lsl.w	r2, r0, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34
 80046b6:	e04c      	b.n	8004752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d824      	bhi.n	800470a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	3b23      	subs	r3, #35	; 0x23
 80046d2:	221f      	movs	r2, #31
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43da      	mvns	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	400a      	ands	r2, r1
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	4618      	mov	r0, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	3b23      	subs	r3, #35	; 0x23
 80046fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
 8004708:	e023      	b.n	8004752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	3b41      	subs	r3, #65	; 0x41
 800471c:	221f      	movs	r2, #31
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43da      	mvns	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	400a      	ands	r2, r1
 800472a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	b29b      	uxth	r3, r3
 8004738:	4618      	mov	r0, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	3b41      	subs	r3, #65	; 0x41
 8004746:	fa00 f203 	lsl.w	r2, r0, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004752:	4b22      	ldr	r3, [pc, #136]	; (80047dc <HAL_ADC_ConfigChannel+0x234>)
 8004754:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <HAL_ADC_ConfigChannel+0x238>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d109      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x1cc>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b12      	cmp	r3, #18
 8004766:	d105      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a19      	ldr	r2, [pc, #100]	; (80047e0 <HAL_ADC_ConfigChannel+0x238>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d123      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x21e>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b10      	cmp	r3, #16
 8004784:	d003      	beq.n	800478e <HAL_ADC_ConfigChannel+0x1e6>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b11      	cmp	r3, #17
 800478c:	d11b      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d111      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_ADC_ConfigChannel+0x23c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <HAL_ADC_ConfigChannel+0x240>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	0c9a      	lsrs	r2, r3, #18
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80047b8:	e002      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3b01      	subs	r3, #1
 80047be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f9      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40012300 	.word	0x40012300
 80047e0:	40012000 	.word	0x40012000
 80047e4:	2000000c 	.word	0x2000000c
 80047e8:	431bde83 	.word	0x431bde83

080047ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047f4:	4b79      	ldr	r3, [pc, #484]	; (80049dc <ADC_Init+0x1f0>)
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	431a      	orrs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6859      	ldr	r1, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	021a      	lsls	r2, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6899      	ldr	r1, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <ADC_Init+0x1f4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004892:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6899      	ldr	r1, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6899      	ldr	r1, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e00f      	b.n	80048ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0202 	bic.w	r2, r2, #2
 80048f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6899      	ldr	r1, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	7e1b      	ldrb	r3, [r3, #24]
 8004904:	005a      	lsls	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004926:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004936:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	3b01      	subs	r3, #1
 8004944:	035a      	lsls	r2, r3, #13
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	e007      	b.n	8004960 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800496e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	3b01      	subs	r3, #1
 800497c:	051a      	lsls	r2, r3, #20
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6899      	ldr	r1, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049a2:	025a      	lsls	r2, r3, #9
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6899      	ldr	r1, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	029a      	lsls	r2, r3, #10
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40012300 	.word	0x40012300
 80049e0:	0f000001 	.word	0x0f000001

080049e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e17d      	b.n	8004d0c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	d925      	bls.n	8004a6c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68d9      	ldr	r1, [r3, #12]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4613      	mov	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4413      	add	r3, r2
 8004a34:	3b1e      	subs	r3, #30
 8004a36:	2207      	movs	r2, #7
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43da      	mvns	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	400a      	ands	r2, r1
 8004a44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68d9      	ldr	r1, [r3, #12]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	4618      	mov	r0, r3
 8004a58:	4603      	mov	r3, r0
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4403      	add	r3, r0
 8004a5e:	3b1e      	subs	r3, #30
 8004a60:	409a      	lsls	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	e022      	b.n	8004ab2 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6919      	ldr	r1, [r3, #16]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	4413      	add	r3, r2
 8004a80:	2207      	movs	r2, #7
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43da      	mvns	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	400a      	ands	r2, r1
 8004a8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6919      	ldr	r1, [r3, #16]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	4403      	add	r3, r0
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	051a      	lsls	r2, r3, #20
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	3303      	adds	r3, #3
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	221f      	movs	r2, #31
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	43da      	mvns	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	400a      	ands	r2, r1
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	4618      	mov	r0, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3303      	adds	r3, #3
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	fa00 f203 	lsl.w	r2, r0, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	4a74      	ldr	r2, [pc, #464]	; (8004d18 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d022      	beq.n	8004b90 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6899      	ldr	r1, [r3, #8]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	699a      	ldr	r2, [r3, #24]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004b7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6899      	ldr	r1, [r3, #8]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	e00f      	b.n	8004bb0 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004b9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004bae:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	7d5b      	ldrb	r3, [r3, #21]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	e007      	b.n	8004bda <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd8:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	7d1b      	ldrb	r3, [r3, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	e007      	b.n	8004c04 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c02:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d02e      	beq.n	8004c6a <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d840      	bhi.n	8004c92 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d002      	beq.n	8004c1a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d014      	beq.n	8004c42 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004c18:	e03b      	b.n	8004c92 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004c28:	f023 030f 	bic.w	r3, r3, #15
 8004c2c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6959      	ldr	r1, [r3, #20]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	615a      	str	r2, [r3, #20]
      break;
 8004c40:	e03b      	b.n	8004cba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004c50:	f023 030f 	bic.w	r3, r3, #15
 8004c54:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6999      	ldr	r1, [r3, #24]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	619a      	str	r2, [r3, #24]
      break;
 8004c68:	e027      	b.n	8004cba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004c78:	f023 030f 	bic.w	r3, r3, #15
 8004c7c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69d9      	ldr	r1, [r3, #28]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	61da      	str	r2, [r3, #28]
      break;
 8004c90:	e013      	b.n	8004cba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ca0:	f023 030f 	bic.w	r3, r3, #15
 8004ca4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a19      	ldr	r1, [r3, #32]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	621a      	str	r2, [r3, #32]
      break;
 8004cb8:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cba:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a17      	ldr	r2, [pc, #92]	; (8004d20 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d109      	bne.n	8004cdc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b12      	cmp	r3, #18
 8004cce:	d105      	bne.n	8004cdc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10d      	bne.n	8004d02 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d003      	beq.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b11      	cmp	r3, #17
 8004cf4:	d105      	bne.n	8004d02 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	000f0001 	.word	0x000f0001
 8004d1c:	40012300 	.word	0x40012300
 8004d20:	40012000 	.word	0x40012000

08004d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <__NVIC_SetPriorityGrouping+0x44>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d40:	4013      	ands	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d56:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <__NVIC_SetPriorityGrouping+0x44>)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	60d3      	str	r3, [r2, #12]
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000ed00 	.word	0xe000ed00

08004d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <__NVIC_GetPriorityGrouping+0x18>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f003 0307 	and.w	r3, r3, #7
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	e000ed00 	.word	0xe000ed00

08004d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	db0b      	blt.n	8004db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	f003 021f 	and.w	r2, r3, #31
 8004da0:	4907      	ldr	r1, [pc, #28]	; (8004dc0 <__NVIC_EnableIRQ+0x38>)
 8004da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2001      	movs	r0, #1
 8004daa:	fa00 f202 	lsl.w	r2, r0, r2
 8004dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	e000e100 	.word	0xe000e100

08004dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	6039      	str	r1, [r7, #0]
 8004dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	db0a      	blt.n	8004dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	490c      	ldr	r1, [pc, #48]	; (8004e10 <__NVIC_SetPriority+0x4c>)
 8004dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de2:	0112      	lsls	r2, r2, #4
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	440b      	add	r3, r1
 8004de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dec:	e00a      	b.n	8004e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	4908      	ldr	r1, [pc, #32]	; (8004e14 <__NVIC_SetPriority+0x50>)
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	3b04      	subs	r3, #4
 8004dfc:	0112      	lsls	r2, r2, #4
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	440b      	add	r3, r1
 8004e02:	761a      	strb	r2, [r3, #24]
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	e000e100 	.word	0xe000e100
 8004e14:	e000ed00 	.word	0xe000ed00

08004e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b089      	sub	sp, #36	; 0x24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f1c3 0307 	rsb	r3, r3, #7
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	bf28      	it	cs
 8004e36:	2304      	movcs	r3, #4
 8004e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	2b06      	cmp	r3, #6
 8004e40:	d902      	bls.n	8004e48 <NVIC_EncodePriority+0x30>
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3b03      	subs	r3, #3
 8004e46:	e000      	b.n	8004e4a <NVIC_EncodePriority+0x32>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43da      	mvns	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e60:	f04f 31ff 	mov.w	r1, #4294967295
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6a:	43d9      	mvns	r1, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e70:	4313      	orrs	r3, r2
         );
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3724      	adds	r7, #36	; 0x24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e90:	d301      	bcc.n	8004e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e92:	2301      	movs	r3, #1
 8004e94:	e00f      	b.n	8004eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e96:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <SysTick_Config+0x40>)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e9e:	210f      	movs	r1, #15
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	f7ff ff8e 	bl	8004dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <SysTick_Config+0x40>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eae:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <SysTick_Config+0x40>)
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	e000e010 	.word	0xe000e010

08004ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ff29 	bl	8004d24 <__NVIC_SetPriorityGrouping>
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004eec:	f7ff ff3e 	bl	8004d6c <__NVIC_GetPriorityGrouping>
 8004ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	6978      	ldr	r0, [r7, #20]
 8004ef8:	f7ff ff8e 	bl	8004e18 <NVIC_EncodePriority>
 8004efc:	4602      	mov	r2, r0
 8004efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff ff5d 	bl	8004dc4 <__NVIC_SetPriority>
}
 8004f0a:	bf00      	nop
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	4603      	mov	r3, r0
 8004f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff ff31 	bl	8004d88 <__NVIC_EnableIRQ>
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff ffa2 	bl	8004e80 <SysTick_Config>
 8004f3c:	4603      	mov	r3, r0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f54:	f7ff f986 	bl	8004264 <HAL_GetTick>
 8004f58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d008      	beq.n	8004f78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2280      	movs	r2, #128	; 0x80
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e052      	b.n	800501e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0216 	bic.w	r2, r2, #22
 8004f86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <HAL_DMA_Abort+0x62>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0208 	bic.w	r2, r2, #8
 8004fb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fc8:	e013      	b.n	8004ff2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fca:	f7ff f94b 	bl	8004264 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d90c      	bls.n	8004ff2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e015      	b.n	800501e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e4      	bne.n	8004fca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005004:	223f      	movs	r2, #63	; 0x3f
 8005006:	409a      	lsls	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d004      	beq.n	8005044 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e00c      	b.n	800505e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2205      	movs	r2, #5
 8005048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800506c:	b480      	push	{r7}
 800506e:	b089      	sub	sp, #36	; 0x24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	e16b      	b.n	8005360 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005088:	2201      	movs	r2, #1
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4013      	ands	r3, r2
 800509a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	f040 815a 	bne.w	800535a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d005      	beq.n	80050be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d130      	bne.n	8005120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	2203      	movs	r2, #3
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43db      	mvns	r3, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4013      	ands	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f4:	2201      	movs	r2, #1
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 0201 	and.w	r2, r3, #1
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	2b03      	cmp	r3, #3
 800512a:	d017      	beq.n	800515c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	2203      	movs	r2, #3
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4313      	orrs	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d123      	bne.n	80051b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	08da      	lsrs	r2, r3, #3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3208      	adds	r2, #8
 8005170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	220f      	movs	r2, #15
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4313      	orrs	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	08da      	lsrs	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3208      	adds	r2, #8
 80051aa:	69b9      	ldr	r1, [r7, #24]
 80051ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	2203      	movs	r2, #3
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0203 	and.w	r2, r3, #3
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4313      	orrs	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80b4 	beq.w	800535a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	4b60      	ldr	r3, [pc, #384]	; (8005378 <HAL_GPIO_Init+0x30c>)
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	4a5f      	ldr	r2, [pc, #380]	; (8005378 <HAL_GPIO_Init+0x30c>)
 80051fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005200:	6453      	str	r3, [r2, #68]	; 0x44
 8005202:	4b5d      	ldr	r3, [pc, #372]	; (8005378 <HAL_GPIO_Init+0x30c>)
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800520e:	4a5b      	ldr	r2, [pc, #364]	; (800537c <HAL_GPIO_Init+0x310>)
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	089b      	lsrs	r3, r3, #2
 8005214:	3302      	adds	r3, #2
 8005216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	220f      	movs	r2, #15
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4013      	ands	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a52      	ldr	r2, [pc, #328]	; (8005380 <HAL_GPIO_Init+0x314>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d02b      	beq.n	8005292 <HAL_GPIO_Init+0x226>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a51      	ldr	r2, [pc, #324]	; (8005384 <HAL_GPIO_Init+0x318>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d025      	beq.n	800528e <HAL_GPIO_Init+0x222>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a50      	ldr	r2, [pc, #320]	; (8005388 <HAL_GPIO_Init+0x31c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <HAL_GPIO_Init+0x21e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a4f      	ldr	r2, [pc, #316]	; (800538c <HAL_GPIO_Init+0x320>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d019      	beq.n	8005286 <HAL_GPIO_Init+0x21a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a4e      	ldr	r2, [pc, #312]	; (8005390 <HAL_GPIO_Init+0x324>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_GPIO_Init+0x216>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a4d      	ldr	r2, [pc, #308]	; (8005394 <HAL_GPIO_Init+0x328>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00d      	beq.n	800527e <HAL_GPIO_Init+0x212>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a4c      	ldr	r2, [pc, #304]	; (8005398 <HAL_GPIO_Init+0x32c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <HAL_GPIO_Init+0x20e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a4b      	ldr	r2, [pc, #300]	; (800539c <HAL_GPIO_Init+0x330>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d101      	bne.n	8005276 <HAL_GPIO_Init+0x20a>
 8005272:	2307      	movs	r3, #7
 8005274:	e00e      	b.n	8005294 <HAL_GPIO_Init+0x228>
 8005276:	2308      	movs	r3, #8
 8005278:	e00c      	b.n	8005294 <HAL_GPIO_Init+0x228>
 800527a:	2306      	movs	r3, #6
 800527c:	e00a      	b.n	8005294 <HAL_GPIO_Init+0x228>
 800527e:	2305      	movs	r3, #5
 8005280:	e008      	b.n	8005294 <HAL_GPIO_Init+0x228>
 8005282:	2304      	movs	r3, #4
 8005284:	e006      	b.n	8005294 <HAL_GPIO_Init+0x228>
 8005286:	2303      	movs	r3, #3
 8005288:	e004      	b.n	8005294 <HAL_GPIO_Init+0x228>
 800528a:	2302      	movs	r3, #2
 800528c:	e002      	b.n	8005294 <HAL_GPIO_Init+0x228>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <HAL_GPIO_Init+0x228>
 8005292:	2300      	movs	r3, #0
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	f002 0203 	and.w	r2, r2, #3
 800529a:	0092      	lsls	r2, r2, #2
 800529c:	4093      	lsls	r3, r2
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052a4:	4935      	ldr	r1, [pc, #212]	; (800537c <HAL_GPIO_Init+0x310>)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	089b      	lsrs	r3, r3, #2
 80052aa:	3302      	adds	r3, #2
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052b2:	4b3b      	ldr	r3, [pc, #236]	; (80053a0 <HAL_GPIO_Init+0x334>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4013      	ands	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052d6:	4a32      	ldr	r2, [pc, #200]	; (80053a0 <HAL_GPIO_Init+0x334>)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052dc:	4b30      	ldr	r3, [pc, #192]	; (80053a0 <HAL_GPIO_Init+0x334>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	4013      	ands	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005300:	4a27      	ldr	r2, [pc, #156]	; (80053a0 <HAL_GPIO_Init+0x334>)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005306:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <HAL_GPIO_Init+0x334>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	43db      	mvns	r3, r3
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4013      	ands	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800532a:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <HAL_GPIO_Init+0x334>)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005330:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <HAL_GPIO_Init+0x334>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	43db      	mvns	r3, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4013      	ands	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005354:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <HAL_GPIO_Init+0x334>)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3301      	adds	r3, #1
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2b0f      	cmp	r3, #15
 8005364:	f67f ae90 	bls.w	8005088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	3724      	adds	r7, #36	; 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800
 800537c:	40013800 	.word	0x40013800
 8005380:	40020000 	.word	0x40020000
 8005384:	40020400 	.word	0x40020400
 8005388:	40020800 	.word	0x40020800
 800538c:	40020c00 	.word	0x40020c00
 8005390:	40021000 	.word	0x40021000
 8005394:	40021400 	.word	0x40021400
 8005398:	40021800 	.word	0x40021800
 800539c:	40021c00 	.word	0x40021c00
 80053a0:	40013c00 	.word	0x40013c00

080053a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	807b      	strh	r3, [r7, #2]
 80053b0:	4613      	mov	r3, r2
 80053b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053b4:	787b      	ldrb	r3, [r7, #1]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053c0:	e003      	b.n	80053ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053c2:	887b      	ldrh	r3, [r7, #2]
 80053c4:	041a      	lsls	r2, r3, #16
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	619a      	str	r2, [r3, #24]
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d006      	beq.n	80053fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053ee:	4a05      	ldr	r2, [pc, #20]	; (8005404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe fb36 	bl	8003a68 <HAL_GPIO_EXTI_Callback>
  }
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40013c00 	.word	0x40013c00

08005408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e267      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d075      	beq.n	8005512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005426:	4b88      	ldr	r3, [pc, #544]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b04      	cmp	r3, #4
 8005430:	d00c      	beq.n	800544c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005432:	4b85      	ldr	r3, [pc, #532]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800543a:	2b08      	cmp	r3, #8
 800543c:	d112      	bne.n	8005464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800543e:	4b82      	ldr	r3, [pc, #520]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800544a:	d10b      	bne.n	8005464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544c:	4b7e      	ldr	r3, [pc, #504]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d05b      	beq.n	8005510 <HAL_RCC_OscConfig+0x108>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d157      	bne.n	8005510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e242      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546c:	d106      	bne.n	800547c <HAL_RCC_OscConfig+0x74>
 800546e:	4b76      	ldr	r3, [pc, #472]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a75      	ldr	r2, [pc, #468]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e01d      	b.n	80054b8 <HAL_RCC_OscConfig+0xb0>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005484:	d10c      	bne.n	80054a0 <HAL_RCC_OscConfig+0x98>
 8005486:	4b70      	ldr	r3, [pc, #448]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a6f      	ldr	r2, [pc, #444]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800548c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	4b6d      	ldr	r3, [pc, #436]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a6c      	ldr	r2, [pc, #432]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e00b      	b.n	80054b8 <HAL_RCC_OscConfig+0xb0>
 80054a0:	4b69      	ldr	r3, [pc, #420]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a68      	ldr	r2, [pc, #416]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80054a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	4b66      	ldr	r3, [pc, #408]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a65      	ldr	r2, [pc, #404]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80054b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d013      	beq.n	80054e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fe fed0 	bl	8004264 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c8:	f7fe fecc 	bl	8004264 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b64      	cmp	r3, #100	; 0x64
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e207      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054da:	4b5b      	ldr	r3, [pc, #364]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0xc0>
 80054e6:	e014      	b.n	8005512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e8:	f7fe febc 	bl	8004264 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054f0:	f7fe feb8 	bl	8004264 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b64      	cmp	r3, #100	; 0x64
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e1f3      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005502:	4b51      	ldr	r3, [pc, #324]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0xe8>
 800550e:	e000      	b.n	8005512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d063      	beq.n	80055e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800551e:	4b4a      	ldr	r3, [pc, #296]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800552a:	4b47      	ldr	r3, [pc, #284]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005532:	2b08      	cmp	r3, #8
 8005534:	d11c      	bne.n	8005570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005536:	4b44      	ldr	r3, [pc, #272]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d116      	bne.n	8005570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005542:	4b41      	ldr	r3, [pc, #260]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <HAL_RCC_OscConfig+0x152>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d001      	beq.n	800555a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e1c7      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555a:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4937      	ldr	r1, [pc, #220]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800556a:	4313      	orrs	r3, r2
 800556c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800556e:	e03a      	b.n	80055e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d020      	beq.n	80055ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005578:	4b34      	ldr	r3, [pc, #208]	; (800564c <HAL_RCC_OscConfig+0x244>)
 800557a:	2201      	movs	r2, #1
 800557c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fe fe71 	bl	8004264 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005586:	f7fe fe6d 	bl	8004264 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1a8      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005598:	4b2b      	ldr	r3, [pc, #172]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a4:	4b28      	ldr	r3, [pc, #160]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4925      	ldr	r1, [pc, #148]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	600b      	str	r3, [r1, #0]
 80055b8:	e015      	b.n	80055e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ba:	4b24      	ldr	r3, [pc, #144]	; (800564c <HAL_RCC_OscConfig+0x244>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c0:	f7fe fe50 	bl	8004264 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055c8:	f7fe fe4c 	bl	8004264 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e187      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055da:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d036      	beq.n	8005660 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d016      	beq.n	8005628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055fa:	4b15      	ldr	r3, [pc, #84]	; (8005650 <HAL_RCC_OscConfig+0x248>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fe fe30 	bl	8004264 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005608:	f7fe fe2c 	bl	8004264 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e167      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561a:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800561c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x200>
 8005626:	e01b      	b.n	8005660 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <HAL_RCC_OscConfig+0x248>)
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562e:	f7fe fe19 	bl	8004264 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005634:	e00e      	b.n	8005654 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005636:	f7fe fe15 	bl	8004264 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d907      	bls.n	8005654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e150      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
 8005648:	40023800 	.word	0x40023800
 800564c:	42470000 	.word	0x42470000
 8005650:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005654:	4b88      	ldr	r3, [pc, #544]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1ea      	bne.n	8005636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8097 	beq.w	800579c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800566e:	2300      	movs	r3, #0
 8005670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005672:	4b81      	ldr	r3, [pc, #516]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10f      	bne.n	800569e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	4b7d      	ldr	r3, [pc, #500]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	4a7c      	ldr	r2, [pc, #496]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568c:	6413      	str	r3, [r2, #64]	; 0x40
 800568e:	4b7a      	ldr	r3, [pc, #488]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005696:	60bb      	str	r3, [r7, #8]
 8005698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569e:	4b77      	ldr	r3, [pc, #476]	; (800587c <HAL_RCC_OscConfig+0x474>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d118      	bne.n	80056dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056aa:	4b74      	ldr	r3, [pc, #464]	; (800587c <HAL_RCC_OscConfig+0x474>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a73      	ldr	r2, [pc, #460]	; (800587c <HAL_RCC_OscConfig+0x474>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b6:	f7fe fdd5 	bl	8004264 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056be:	f7fe fdd1 	bl	8004264 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e10c      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d0:	4b6a      	ldr	r3, [pc, #424]	; (800587c <HAL_RCC_OscConfig+0x474>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d106      	bne.n	80056f2 <HAL_RCC_OscConfig+0x2ea>
 80056e4:	4b64      	ldr	r3, [pc, #400]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	4a63      	ldr	r2, [pc, #396]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6713      	str	r3, [r2, #112]	; 0x70
 80056f0:	e01c      	b.n	800572c <HAL_RCC_OscConfig+0x324>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d10c      	bne.n	8005714 <HAL_RCC_OscConfig+0x30c>
 80056fa:	4b5f      	ldr	r3, [pc, #380]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a5e      	ldr	r2, [pc, #376]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005700:	f043 0304 	orr.w	r3, r3, #4
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
 8005706:	4b5c      	ldr	r3, [pc, #368]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a5b      	ldr	r2, [pc, #364]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
 8005712:	e00b      	b.n	800572c <HAL_RCC_OscConfig+0x324>
 8005714:	4b58      	ldr	r3, [pc, #352]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005718:	4a57      	ldr	r2, [pc, #348]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	6713      	str	r3, [r2, #112]	; 0x70
 8005720:	4b55      	ldr	r3, [pc, #340]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005724:	4a54      	ldr	r2, [pc, #336]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005726:	f023 0304 	bic.w	r3, r3, #4
 800572a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d015      	beq.n	8005760 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fe fd96 	bl	8004264 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573a:	e00a      	b.n	8005752 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800573c:	f7fe fd92 	bl	8004264 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f241 3288 	movw	r2, #5000	; 0x1388
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e0cb      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005752:	4b49      	ldr	r3, [pc, #292]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0ee      	beq.n	800573c <HAL_RCC_OscConfig+0x334>
 800575e:	e014      	b.n	800578a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005760:	f7fe fd80 	bl	8004264 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005766:	e00a      	b.n	800577e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005768:	f7fe fd7c 	bl	8004264 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e0b5      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800577e:	4b3e      	ldr	r3, [pc, #248]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1ee      	bne.n	8005768 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d105      	bne.n	800579c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005790:	4b39      	ldr	r3, [pc, #228]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	4a38      	ldr	r2, [pc, #224]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80a1 	beq.w	80058e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057a6:	4b34      	ldr	r3, [pc, #208]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 030c 	and.w	r3, r3, #12
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d05c      	beq.n	800586c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d141      	bne.n	800583e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ba:	4b31      	ldr	r3, [pc, #196]	; (8005880 <HAL_RCC_OscConfig+0x478>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c0:	f7fe fd50 	bl	8004264 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c8:	f7fe fd4c 	bl	8004264 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e087      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057da:	4b27      	ldr	r3, [pc, #156]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	019b      	lsls	r3, r3, #6
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	085b      	lsrs	r3, r3, #1
 80057fe:	3b01      	subs	r3, #1
 8005800:	041b      	lsls	r3, r3, #16
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	061b      	lsls	r3, r3, #24
 800580a:	491b      	ldr	r1, [pc, #108]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 800580c:	4313      	orrs	r3, r2
 800580e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005810:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <HAL_RCC_OscConfig+0x478>)
 8005812:	2201      	movs	r2, #1
 8005814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005816:	f7fe fd25 	bl	8004264 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581e:	f7fe fd21 	bl	8004264 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e05c      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005830:	4b11      	ldr	r3, [pc, #68]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0f0      	beq.n	800581e <HAL_RCC_OscConfig+0x416>
 800583c:	e054      	b.n	80058e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <HAL_RCC_OscConfig+0x478>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fe fd0e 	bl	8004264 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584c:	f7fe fd0a 	bl	8004264 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e045      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x444>
 800586a:	e03d      	b.n	80058e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d107      	bne.n	8005884 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e038      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
 8005878:	40023800 	.word	0x40023800
 800587c:	40007000 	.word	0x40007000
 8005880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005884:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <HAL_RCC_OscConfig+0x4ec>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d028      	beq.n	80058e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d121      	bne.n	80058e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d11a      	bne.n	80058e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058b4:	4013      	ands	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058bc:	4293      	cmp	r3, r2
 80058be:	d111      	bne.n	80058e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	3b01      	subs	r3, #1
 80058ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d107      	bne.n	80058e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40023800 	.word	0x40023800

080058f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0cc      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800590c:	4b68      	ldr	r3, [pc, #416]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d90c      	bls.n	8005934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591a:	4b65      	ldr	r3, [pc, #404]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005922:	4b63      	ldr	r3, [pc, #396]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e0b8      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d020      	beq.n	8005982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800594c:	4b59      	ldr	r3, [pc, #356]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4a58      	ldr	r2, [pc, #352]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005964:	4b53      	ldr	r3, [pc, #332]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	4a52      	ldr	r2, [pc, #328]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800596e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005970:	4b50      	ldr	r3, [pc, #320]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	494d      	ldr	r1, [pc, #308]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	4313      	orrs	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d044      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005996:	4b47      	ldr	r3, [pc, #284]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d119      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e07f      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d003      	beq.n	80059b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d107      	bne.n	80059c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b6:	4b3f      	ldr	r3, [pc, #252]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e06f      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c6:	4b3b      	ldr	r3, [pc, #236]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e067      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059d6:	4b37      	ldr	r3, [pc, #220]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f023 0203 	bic.w	r2, r3, #3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	4934      	ldr	r1, [pc, #208]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e8:	f7fe fc3c 	bl	8004264 <HAL_GetTick>
 80059ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ee:	e00a      	b.n	8005a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f0:	f7fe fc38 	bl	8004264 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e04f      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a06:	4b2b      	ldr	r3, [pc, #172]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 020c 	and.w	r2, r3, #12
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d1eb      	bne.n	80059f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a18:	4b25      	ldr	r3, [pc, #148]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d20c      	bcs.n	8005a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a26:	4b22      	ldr	r3, [pc, #136]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2e:	4b20      	ldr	r3, [pc, #128]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e032      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a4c:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4916      	ldr	r1, [pc, #88]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a6a:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	490e      	ldr	r1, [pc, #56]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a7e:	f000 f821 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	490a      	ldr	r1, [pc, #40]	; (8005ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a90:	5ccb      	ldrb	r3, [r1, r3]
 8005a92:	fa22 f303 	lsr.w	r3, r2, r3
 8005a96:	4a09      	ldr	r2, [pc, #36]	; (8005abc <HAL_RCC_ClockConfig+0x1c4>)
 8005a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fb9c 	bl	80041dc <HAL_InitTick>

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40023c00 	.word	0x40023c00
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	0800a560 	.word	0x0800a560
 8005abc:	2000000c 	.word	0x2000000c
 8005ac0:	20000010 	.word	0x20000010

08005ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac8:	b090      	sub	sp, #64	; 0x40
 8005aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005adc:	4b59      	ldr	r3, [pc, #356]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 030c 	and.w	r3, r3, #12
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d00d      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x40>
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	f200 80a1 	bhi.w	8005c30 <HAL_RCC_GetSysClockFreq+0x16c>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_RCC_GetSysClockFreq+0x34>
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d003      	beq.n	8005afe <HAL_RCC_GetSysClockFreq+0x3a>
 8005af6:	e09b      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005af8:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8005afa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005afc:	e09b      	b.n	8005c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005afe:	4b53      	ldr	r3, [pc, #332]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8005b00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b02:	e098      	b.n	8005c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b04:	4b4f      	ldr	r3, [pc, #316]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b0e:	4b4d      	ldr	r3, [pc, #308]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d028      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b1a:	4b4a      	ldr	r3, [pc, #296]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	099b      	lsrs	r3, r3, #6
 8005b20:	2200      	movs	r2, #0
 8005b22:	623b      	str	r3, [r7, #32]
 8005b24:	627a      	str	r2, [r7, #36]	; 0x24
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4b47      	ldr	r3, [pc, #284]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8005b30:	fb03 f201 	mul.w	r2, r3, r1
 8005b34:	2300      	movs	r3, #0
 8005b36:	fb00 f303 	mul.w	r3, r0, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	4a43      	ldr	r2, [pc, #268]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8005b3e:	fba0 1202 	umull	r1, r2, r0, r2
 8005b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b44:	460a      	mov	r2, r1
 8005b46:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b4a:	4413      	add	r3, r2
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b50:	2200      	movs	r2, #0
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	61fa      	str	r2, [r7, #28]
 8005b56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b5e:	f7fb f83d 	bl	8000bdc <__aeabi_uldivmod>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4613      	mov	r3, r2
 8005b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b6a:	e053      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b6c:	4b35      	ldr	r3, [pc, #212]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	099b      	lsrs	r3, r3, #6
 8005b72:	2200      	movs	r2, #0
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	617a      	str	r2, [r7, #20]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b7e:	f04f 0b00 	mov.w	fp, #0
 8005b82:	4652      	mov	r2, sl
 8005b84:	465b      	mov	r3, fp
 8005b86:	f04f 0000 	mov.w	r0, #0
 8005b8a:	f04f 0100 	mov.w	r1, #0
 8005b8e:	0159      	lsls	r1, r3, #5
 8005b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b94:	0150      	lsls	r0, r2, #5
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	ebb2 080a 	subs.w	r8, r2, sl
 8005b9e:	eb63 090b 	sbc.w	r9, r3, fp
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005bae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005bb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005bb6:	ebb2 0408 	subs.w	r4, r2, r8
 8005bba:	eb63 0509 	sbc.w	r5, r3, r9
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	00eb      	lsls	r3, r5, #3
 8005bc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bcc:	00e2      	lsls	r2, r4, #3
 8005bce:	4614      	mov	r4, r2
 8005bd0:	461d      	mov	r5, r3
 8005bd2:	eb14 030a 	adds.w	r3, r4, sl
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	eb45 030b 	adc.w	r3, r5, fp
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bea:	4629      	mov	r1, r5
 8005bec:	028b      	lsls	r3, r1, #10
 8005bee:	4621      	mov	r1, r4
 8005bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	028a      	lsls	r2, r1, #10
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfe:	2200      	movs	r2, #0
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	60fa      	str	r2, [r7, #12]
 8005c04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c08:	f7fa ffe8 	bl	8000bdc <__aeabi_uldivmod>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4613      	mov	r3, r2
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c2e:	e002      	b.n	8005c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3740      	adds	r7, #64	; 0x40
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800
 8005c48:	00f42400 	.word	0x00f42400
 8005c4c:	017d7840 	.word	0x017d7840

08005c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c54:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	2000000c 	.word	0x2000000c

08005c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c6c:	f7ff fff0 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	0a9b      	lsrs	r3, r3, #10
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	4903      	ldr	r1, [pc, #12]	; (8005c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c7e:	5ccb      	ldrb	r3, [r1, r3]
 8005c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	0800a570 	.word	0x0800a570

08005c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c94:	f7ff ffdc 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	0b5b      	lsrs	r3, r3, #13
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	4903      	ldr	r1, [pc, #12]	; (8005cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ca6:	5ccb      	ldrb	r3, [r1, r3]
 8005ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	0800a570 	.word	0x0800a570

08005cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e07b      	b.n	8005dc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d108      	bne.n	8005ce4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cda:	d009      	beq.n	8005cf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	61da      	str	r2, [r3, #28]
 8005ce2:	e005      	b.n	8005cf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fe f84c 	bl	8003da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d74:	ea42 0103 	orr.w	r1, r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	0c1b      	lsrs	r3, r3, #16
 8005d8e:	f003 0104 	and.w	r1, r3, #4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	f003 0210 	and.w	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69da      	ldr	r2, [r3, #28]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e042      	b.n	8005e62 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7fe f821 	bl	8003e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2224      	movs	r2, #36	; 0x24
 8005dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fdbe 	bl	8006990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b08a      	sub	sp, #40	; 0x28
 8005e6e:	af02      	add	r7, sp, #8
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d175      	bne.n	8005f76 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_UART_Transmit+0x2c>
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e06e      	b.n	8005f78 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2221      	movs	r2, #33	; 0x21
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ea8:	f7fe f9dc 	bl	8004264 <HAL_GetTick>
 8005eac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	88fa      	ldrh	r2, [r7, #6]
 8005eb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	88fa      	ldrh	r2, [r7, #6]
 8005eb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec2:	d108      	bne.n	8005ed6 <HAL_UART_Transmit+0x6c>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d104      	bne.n	8005ed6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e003      	b.n	8005ede <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ede:	e02e      	b.n	8005f3e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2180      	movs	r1, #128	; 0x80
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fb20 	bl	8006530 <UART_WaitOnFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e03a      	b.n	8005f78 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10b      	bne.n	8005f20 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	e007      	b.n	8005f30 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	781a      	ldrb	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1cb      	bne.n	8005ee0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2140      	movs	r1, #64	; 0x40
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 faec 	bl	8006530 <UART_WaitOnFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e006      	b.n	8005f78 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e000      	b.n	8005f78 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f76:	2302      	movs	r3, #2
  }
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d112      	bne.n	8005fc0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_UART_Receive_IT+0x26>
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e00b      	b.n	8005fc2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fb13 	bl	80065e2 <UART_Start_Receive_IT>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	e000      	b.n	8005fc2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005fc0:	2302      	movs	r3, #2
  }
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b0ba      	sub	sp, #232	; 0xe8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800600a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10f      	bne.n	8006032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d009      	beq.n	8006032 <HAL_UART_IRQHandler+0x66>
 800601e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fbf2 	bl	8006814 <UART_Receive_IT>
      return;
 8006030:	e25b      	b.n	80064ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 80de 	beq.w	80061f8 <HAL_UART_IRQHandler+0x22c>
 800603c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800604c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80d1 	beq.w	80061f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <HAL_UART_IRQHandler+0xae>
 8006062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	f043 0201 	orr.w	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <HAL_UART_IRQHandler+0xd2>
 8006086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006096:	f043 0202 	orr.w	r2, r3, #2
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <HAL_UART_IRQHandler+0xf6>
 80060aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ba:	f043 0204 	orr.w	r2, r3, #4
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d011      	beq.n	80060f2 <HAL_UART_IRQHandler+0x126>
 80060ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d105      	bne.n	80060e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	f043 0208 	orr.w	r2, r3, #8
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 81f2 	beq.w	80064e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_UART_IRQHandler+0x14e>
 8006108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fb7d 	bl	8006814 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	bf0c      	ite	eq
 8006128:	2301      	moveq	r3, #1
 800612a:	2300      	movne	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <HAL_UART_IRQHandler+0x17a>
 800613e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d04f      	beq.n	80061e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fa85 	bl	8006656 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d141      	bne.n	80061de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3314      	adds	r3, #20
 8006160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3314      	adds	r3, #20
 8006182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006186:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800618a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800619e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1d9      	bne.n	800615a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d013      	beq.n	80061d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	4a7e      	ldr	r2, [pc, #504]	; (80063ac <HAL_UART_IRQHandler+0x3e0>)
 80061b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe ff33 	bl	8005026 <HAL_DMA_Abort_IT>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061d0:	4610      	mov	r0, r2
 80061d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d4:	e00e      	b.n	80061f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f994 	bl	8006504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061dc:	e00a      	b.n	80061f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f990 	bl	8006504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e4:	e006      	b.n	80061f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f98c 	bl	8006504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80061f2:	e175      	b.n	80064e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f4:	bf00      	nop
    return;
 80061f6:	e173      	b.n	80064e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f040 814f 	bne.w	80064a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 8148 	beq.w	80064a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 8141 	beq.w	80064a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	60bb      	str	r3, [r7, #8]
 8006232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	f040 80b6 	bne.w	80063b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8145 	beq.w	80064e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800625e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006262:	429a      	cmp	r2, r3
 8006264:	f080 813e 	bcs.w	80064e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800626e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800627a:	f000 8088 	beq.w	800638e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	330c      	adds	r3, #12
 8006284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800629c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80062aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1d9      	bne.n	800627e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3314      	adds	r3, #20
 80062d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3314      	adds	r3, #20
 80062ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e1      	bne.n	80062ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3314      	adds	r3, #20
 800630c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3314      	adds	r3, #20
 8006326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800632a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800632c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e3      	bne.n	8006306 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800635c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800635e:	f023 0310 	bic.w	r3, r3, #16
 8006362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	330c      	adds	r3, #12
 800636c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006370:	65ba      	str	r2, [r7, #88]	; 0x58
 8006372:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800637e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e3      	bne.n	800634c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006388:	4618      	mov	r0, r3
 800638a:	f7fe fddc 	bl	8004f46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800639c:	b29b      	uxth	r3, r3
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f8b7 	bl	8006518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063aa:	e09b      	b.n	80064e4 <HAL_UART_IRQHandler+0x518>
 80063ac:	0800671d 	.word	0x0800671d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 808e 	beq.w	80064e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80063cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8089 	beq.w	80064e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063fa:	647a      	str	r2, [r7, #68]	; 0x44
 80063fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e3      	bne.n	80063d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	623b      	str	r3, [r7, #32]
   return(result);
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3314      	adds	r3, #20
 800642e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006432:	633a      	str	r2, [r7, #48]	; 0x30
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e3      	bne.n	800640e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	60fb      	str	r3, [r7, #12]
   return(result);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0310 	bic.w	r3, r3, #16
 800646a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006478:	61fa      	str	r2, [r7, #28]
 800647a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	617b      	str	r3, [r7, #20]
   return(result);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e3      	bne.n	8006454 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006492:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f83d 	bl	8006518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800649e:	e023      	b.n	80064e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d009      	beq.n	80064c0 <HAL_UART_IRQHandler+0x4f4>
 80064ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f943 	bl	8006744 <UART_Transmit_IT>
    return;
 80064be:	e014      	b.n	80064ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00e      	beq.n	80064ea <HAL_UART_IRQHandler+0x51e>
 80064cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f983 	bl	80067e4 <UART_EndTransmit_IT>
    return;
 80064de:	e004      	b.n	80064ea <HAL_UART_IRQHandler+0x51e>
    return;
 80064e0:	bf00      	nop
 80064e2:	e002      	b.n	80064ea <HAL_UART_IRQHandler+0x51e>
      return;
 80064e4:	bf00      	nop
 80064e6:	e000      	b.n	80064ea <HAL_UART_IRQHandler+0x51e>
      return;
 80064e8:	bf00      	nop
  }
}
 80064ea:	37e8      	adds	r7, #232	; 0xe8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006540:	e03b      	b.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d037      	beq.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654a:	f7fd fe8b 	bl	8004264 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	6a3a      	ldr	r2, [r7, #32]
 8006556:	429a      	cmp	r2, r3
 8006558:	d302      	bcc.n	8006560 <UART_WaitOnFlagUntilTimeout+0x30>
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e03a      	b.n	80065da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b00      	cmp	r3, #0
 8006570:	d023      	beq.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d020      	beq.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d01d      	beq.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b08      	cmp	r3, #8
 800658a:	d116      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f857 	bl	8006656 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2208      	movs	r2, #8
 80065ac:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e00f      	b.n	80065da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4013      	ands	r3, r2
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	bf0c      	ite	eq
 80065ca:	2301      	moveq	r3, #1
 80065cc:	2300      	movne	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d0b4      	beq.n	8006542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	88fa      	ldrh	r2, [r7, #6]
 80065fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2222      	movs	r2, #34	; 0x22
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006626:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695a      	ldr	r2, [r3, #20]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0220 	orr.w	r2, r2, #32
 8006646:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006656:	b480      	push	{r7}
 8006658:	b095      	sub	sp, #84	; 0x54
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006674:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	330c      	adds	r3, #12
 800667c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800667e:	643a      	str	r2, [r7, #64]	; 0x40
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e5      	bne.n	800665e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3314      	adds	r3, #20
 8006698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3314      	adds	r3, #20
 80066b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e5      	bne.n	8006692 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d119      	bne.n	8006702 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f023 0310 	bic.w	r3, r3, #16
 80066e4:	647b      	str	r3, [r7, #68]	; 0x44
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	330c      	adds	r3, #12
 80066ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066ee:	61ba      	str	r2, [r7, #24]
 80066f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6979      	ldr	r1, [r7, #20]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	613b      	str	r3, [r7, #16]
   return(result);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e5      	bne.n	80066ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006710:	bf00      	nop
 8006712:	3754      	adds	r7, #84	; 0x54
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7ff fee4 	bl	8006504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b21      	cmp	r3, #33	; 0x21
 8006756:	d13e      	bne.n	80067d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006760:	d114      	bne.n	800678c <UART_Transmit_IT+0x48>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d110      	bne.n	800678c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800677e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	1c9a      	adds	r2, r3, #2
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	621a      	str	r2, [r3, #32]
 800678a:	e008      	b.n	800679e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	1c59      	adds	r1, r3, #1
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6211      	str	r1, [r2, #32]
 8006796:	781a      	ldrb	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	4619      	mov	r1, r3
 80067ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10f      	bne.n	80067d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e000      	b.n	80067d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067d6:	2302      	movs	r3, #2
  }
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fe73 	bl	80064f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08c      	sub	sp, #48	; 0x30
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b22      	cmp	r3, #34	; 0x22
 8006826:	f040 80ae 	bne.w	8006986 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006832:	d117      	bne.n	8006864 <UART_Receive_IT+0x50>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d113      	bne.n	8006864 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800683c:	2300      	movs	r3, #0
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006852:	b29a      	uxth	r2, r3
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	1c9a      	adds	r2, r3, #2
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	629a      	str	r2, [r3, #40]	; 0x28
 8006862:	e026      	b.n	80068b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006876:	d007      	beq.n	8006888 <UART_Receive_IT+0x74>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <UART_Receive_IT+0x82>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d106      	bne.n	8006896 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	e008      	b.n	80068a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	4619      	mov	r1, r3
 80068c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d15d      	bne.n	8006982 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0220 	bic.w	r2, r2, #32
 80068d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0201 	bic.w	r2, r2, #1
 80068f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	2b01      	cmp	r3, #1
 800690a:	d135      	bne.n	8006978 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	330c      	adds	r3, #12
 8006918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	613b      	str	r3, [r7, #16]
   return(result);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f023 0310 	bic.w	r3, r3, #16
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006932:	623a      	str	r2, [r7, #32]
 8006934:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	69f9      	ldr	r1, [r7, #28]
 8006938:	6a3a      	ldr	r2, [r7, #32]
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	2b10      	cmp	r3, #16
 8006952:	d10a      	bne.n	800696a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff fdd1 	bl	8006518 <HAL_UARTEx_RxEventCallback>
 8006976:	e002      	b.n	800697e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fd f881 	bl	8003a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	e002      	b.n	8006988 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e000      	b.n	8006988 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006986:	2302      	movs	r3, #2
  }
}
 8006988:	4618      	mov	r0, r3
 800698a:	3730      	adds	r7, #48	; 0x30
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006994:	b0c0      	sub	sp, #256	; 0x100
 8006996:	af00      	add	r7, sp, #0
 8006998:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ac:	68d9      	ldr	r1, [r3, #12]
 80069ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	ea40 0301 	orr.w	r3, r0, r1
 80069b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069e8:	f021 010c 	bic.w	r1, r1, #12
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069f6:	430b      	orrs	r3, r1
 80069f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0a:	6999      	ldr	r1, [r3, #24]
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	ea40 0301 	orr.w	r3, r0, r1
 8006a16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b8f      	ldr	r3, [pc, #572]	; (8006c5c <UART_SetConfig+0x2cc>)
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d005      	beq.n	8006a30 <UART_SetConfig+0xa0>
 8006a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b8d      	ldr	r3, [pc, #564]	; (8006c60 <UART_SetConfig+0x2d0>)
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d104      	bne.n	8006a3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a30:	f7ff f92e 	bl	8005c90 <HAL_RCC_GetPCLK2Freq>
 8006a34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a38:	e003      	b.n	8006a42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a3a:	f7ff f915 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 8006a3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4c:	f040 810c 	bne.w	8006c68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a62:	4622      	mov	r2, r4
 8006a64:	462b      	mov	r3, r5
 8006a66:	1891      	adds	r1, r2, r2
 8006a68:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a6a:	415b      	adcs	r3, r3
 8006a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a72:	4621      	mov	r1, r4
 8006a74:	eb12 0801 	adds.w	r8, r2, r1
 8006a78:	4629      	mov	r1, r5
 8006a7a:	eb43 0901 	adc.w	r9, r3, r1
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a92:	4690      	mov	r8, r2
 8006a94:	4699      	mov	r9, r3
 8006a96:	4623      	mov	r3, r4
 8006a98:	eb18 0303 	adds.w	r3, r8, r3
 8006a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	eb49 0303 	adc.w	r3, r9, r3
 8006aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ab6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006aba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006abe:	460b      	mov	r3, r1
 8006ac0:	18db      	adds	r3, r3, r3
 8006ac2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	eb42 0303 	adc.w	r3, r2, r3
 8006aca:	657b      	str	r3, [r7, #84]	; 0x54
 8006acc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ad0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ad4:	f7fa f882 	bl	8000bdc <__aeabi_uldivmod>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4b61      	ldr	r3, [pc, #388]	; (8006c64 <UART_SetConfig+0x2d4>)
 8006ade:	fba3 2302 	umull	r2, r3, r3, r2
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	011c      	lsls	r4, r3, #4
 8006ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006af0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006af4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006af8:	4642      	mov	r2, r8
 8006afa:	464b      	mov	r3, r9
 8006afc:	1891      	adds	r1, r2, r2
 8006afe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b00:	415b      	adcs	r3, r3
 8006b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b08:	4641      	mov	r1, r8
 8006b0a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b0e:	4649      	mov	r1, r9
 8006b10:	eb43 0b01 	adc.w	fp, r3, r1
 8006b14:	f04f 0200 	mov.w	r2, #0
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b28:	4692      	mov	sl, r2
 8006b2a:	469b      	mov	fp, r3
 8006b2c:	4643      	mov	r3, r8
 8006b2e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b36:	464b      	mov	r3, r9
 8006b38:	eb4b 0303 	adc.w	r3, fp, r3
 8006b3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b54:	460b      	mov	r3, r1
 8006b56:	18db      	adds	r3, r3, r3
 8006b58:	643b      	str	r3, [r7, #64]	; 0x40
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	eb42 0303 	adc.w	r3, r2, r3
 8006b60:	647b      	str	r3, [r7, #68]	; 0x44
 8006b62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b6a:	f7fa f837 	bl	8000bdc <__aeabi_uldivmod>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4611      	mov	r1, r2
 8006b74:	4b3b      	ldr	r3, [pc, #236]	; (8006c64 <UART_SetConfig+0x2d4>)
 8006b76:	fba3 2301 	umull	r2, r3, r3, r1
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	2264      	movs	r2, #100	; 0x64
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	1acb      	subs	r3, r1, r3
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b8a:	4b36      	ldr	r3, [pc, #216]	; (8006c64 <UART_SetConfig+0x2d4>)
 8006b8c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b98:	441c      	add	r4, r3
 8006b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ba4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ba8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bac:	4642      	mov	r2, r8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	1891      	adds	r1, r2, r2
 8006bb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bb4:	415b      	adcs	r3, r3
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bbc:	4641      	mov	r1, r8
 8006bbe:	1851      	adds	r1, r2, r1
 8006bc0:	6339      	str	r1, [r7, #48]	; 0x30
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	414b      	adcs	r3, r1
 8006bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc8:	f04f 0200 	mov.w	r2, #0
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bd4:	4659      	mov	r1, fp
 8006bd6:	00cb      	lsls	r3, r1, #3
 8006bd8:	4651      	mov	r1, sl
 8006bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bde:	4651      	mov	r1, sl
 8006be0:	00ca      	lsls	r2, r1, #3
 8006be2:	4610      	mov	r0, r2
 8006be4:	4619      	mov	r1, r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	4642      	mov	r2, r8
 8006bea:	189b      	adds	r3, r3, r2
 8006bec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	460a      	mov	r2, r1
 8006bf4:	eb42 0303 	adc.w	r3, r2, r3
 8006bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c10:	460b      	mov	r3, r1
 8006c12:	18db      	adds	r3, r3, r3
 8006c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c16:	4613      	mov	r3, r2
 8006c18:	eb42 0303 	adc.w	r3, r2, r3
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c26:	f7f9 ffd9 	bl	8000bdc <__aeabi_uldivmod>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <UART_SetConfig+0x2d4>)
 8006c30:	fba3 1302 	umull	r1, r3, r3, r2
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	2164      	movs	r1, #100	; 0x64
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	3332      	adds	r3, #50	; 0x32
 8006c42:	4a08      	ldr	r2, [pc, #32]	; (8006c64 <UART_SetConfig+0x2d4>)
 8006c44:	fba2 2303 	umull	r2, r3, r2, r3
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	f003 0207 	and.w	r2, r3, #7
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4422      	add	r2, r4
 8006c56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c58:	e106      	b.n	8006e68 <UART_SetConfig+0x4d8>
 8006c5a:	bf00      	nop
 8006c5c:	40011000 	.word	0x40011000
 8006c60:	40011400 	.word	0x40011400
 8006c64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c7a:	4642      	mov	r2, r8
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	1891      	adds	r1, r2, r2
 8006c80:	6239      	str	r1, [r7, #32]
 8006c82:	415b      	adcs	r3, r3
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
 8006c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c8a:	4641      	mov	r1, r8
 8006c8c:	1854      	adds	r4, r2, r1
 8006c8e:	4649      	mov	r1, r9
 8006c90:	eb43 0501 	adc.w	r5, r3, r1
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	f04f 0300 	mov.w	r3, #0
 8006c9c:	00eb      	lsls	r3, r5, #3
 8006c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ca2:	00e2      	lsls	r2, r4, #3
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	461d      	mov	r5, r3
 8006ca8:	4643      	mov	r3, r8
 8006caa:	18e3      	adds	r3, r4, r3
 8006cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	eb45 0303 	adc.w	r3, r5, r3
 8006cb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	008b      	lsls	r3, r1, #2
 8006cda:	4621      	mov	r1, r4
 8006cdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	008a      	lsls	r2, r1, #2
 8006ce4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ce8:	f7f9 ff78 	bl	8000bdc <__aeabi_uldivmod>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4b60      	ldr	r3, [pc, #384]	; (8006e74 <UART_SetConfig+0x4e4>)
 8006cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	011c      	lsls	r4, r3, #4
 8006cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	464b      	mov	r3, r9
 8006d10:	1891      	adds	r1, r2, r2
 8006d12:	61b9      	str	r1, [r7, #24]
 8006d14:	415b      	adcs	r3, r3
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	1851      	adds	r1, r2, r1
 8006d20:	6139      	str	r1, [r7, #16]
 8006d22:	4649      	mov	r1, r9
 8006d24:	414b      	adcs	r3, r1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	f04f 0300 	mov.w	r3, #0
 8006d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d34:	4659      	mov	r1, fp
 8006d36:	00cb      	lsls	r3, r1, #3
 8006d38:	4651      	mov	r1, sl
 8006d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d3e:	4651      	mov	r1, sl
 8006d40:	00ca      	lsls	r2, r1, #3
 8006d42:	4610      	mov	r0, r2
 8006d44:	4619      	mov	r1, r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	4642      	mov	r2, r8
 8006d4a:	189b      	adds	r3, r3, r2
 8006d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d50:	464b      	mov	r3, r9
 8006d52:	460a      	mov	r2, r1
 8006d54:	eb42 0303 	adc.w	r3, r2, r3
 8006d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d74:	4649      	mov	r1, r9
 8006d76:	008b      	lsls	r3, r1, #2
 8006d78:	4641      	mov	r1, r8
 8006d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d7e:	4641      	mov	r1, r8
 8006d80:	008a      	lsls	r2, r1, #2
 8006d82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d86:	f7f9 ff29 	bl	8000bdc <__aeabi_uldivmod>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4b38      	ldr	r3, [pc, #224]	; (8006e74 <UART_SetConfig+0x4e4>)
 8006d92:	fba3 2301 	umull	r2, r3, r3, r1
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	2264      	movs	r2, #100	; 0x64
 8006d9a:	fb02 f303 	mul.w	r3, r2, r3
 8006d9e:	1acb      	subs	r3, r1, r3
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	3332      	adds	r3, #50	; 0x32
 8006da4:	4a33      	ldr	r2, [pc, #204]	; (8006e74 <UART_SetConfig+0x4e4>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006db0:	441c      	add	r4, r3
 8006db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db6:	2200      	movs	r2, #0
 8006db8:	673b      	str	r3, [r7, #112]	; 0x70
 8006dba:	677a      	str	r2, [r7, #116]	; 0x74
 8006dbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	1891      	adds	r1, r2, r2
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	415b      	adcs	r3, r3
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dd0:	4641      	mov	r1, r8
 8006dd2:	1851      	adds	r1, r2, r1
 8006dd4:	6039      	str	r1, [r7, #0]
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	414b      	adcs	r3, r1
 8006dda:	607b      	str	r3, [r7, #4]
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006de8:	4659      	mov	r1, fp
 8006dea:	00cb      	lsls	r3, r1, #3
 8006dec:	4651      	mov	r1, sl
 8006dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006df2:	4651      	mov	r1, sl
 8006df4:	00ca      	lsls	r2, r1, #3
 8006df6:	4610      	mov	r0, r2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4642      	mov	r2, r8
 8006dfe:	189b      	adds	r3, r3, r2
 8006e00:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e02:	464b      	mov	r3, r9
 8006e04:	460a      	mov	r2, r1
 8006e06:	eb42 0303 	adc.w	r3, r2, r3
 8006e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	663b      	str	r3, [r7, #96]	; 0x60
 8006e16:	667a      	str	r2, [r7, #100]	; 0x64
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e24:	4649      	mov	r1, r9
 8006e26:	008b      	lsls	r3, r1, #2
 8006e28:	4641      	mov	r1, r8
 8006e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e2e:	4641      	mov	r1, r8
 8006e30:	008a      	lsls	r2, r1, #2
 8006e32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e36:	f7f9 fed1 	bl	8000bdc <__aeabi_uldivmod>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	; (8006e74 <UART_SetConfig+0x4e4>)
 8006e40:	fba3 1302 	umull	r1, r3, r3, r2
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	2164      	movs	r1, #100	; 0x64
 8006e48:	fb01 f303 	mul.w	r3, r1, r3
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	3332      	adds	r3, #50	; 0x32
 8006e52:	4a08      	ldr	r2, [pc, #32]	; (8006e74 <UART_SetConfig+0x4e4>)
 8006e54:	fba2 2303 	umull	r2, r3, r2, r3
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	f003 020f 	and.w	r2, r3, #15
 8006e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4422      	add	r2, r4
 8006e66:	609a      	str	r2, [r3, #8]
}
 8006e68:	bf00      	nop
 8006e6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e74:	51eb851f 	.word	0x51eb851f

08006e78 <_ZNSaIcEC1Ev>:
 8006e78:	4770      	bx	lr

08006e7a <_ZNSaIcED1Ev>:
 8006e7a:	4770      	bx	lr

08006e7c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8006e7c:	b10a      	cbz	r2, 8006e82 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8006e7e:	f001 ba6e 	b.w	800835e <memcpy>
 8006e82:	4770      	bx	lr

08006e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006e84:	b508      	push	{r3, lr}
 8006e86:	680b      	ldr	r3, [r1, #0]
 8006e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8c:	d302      	bcc.n	8006e94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8006e8e:	480d      	ldr	r0, [pc, #52]	; (8006ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8006e90:	f000 f8f8 	bl	8007084 <_ZSt20__throw_length_errorPKc>
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d90b      	bls.n	8006eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006e98:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8006e9c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8006ea0:	d206      	bcs.n	8006eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006ea2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006ea6:	bf2a      	itet	cs
 8006ea8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8006eac:	6008      	strcc	r0, [r1, #0]
 8006eae:	600b      	strcs	r3, [r1, #0]
 8006eb0:	6808      	ldr	r0, [r1, #0]
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d501      	bpl.n	8006eba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8006eb6:	f000 f8df 	bl	8007078 <_ZSt17__throw_bad_allocv>
 8006eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ebe:	f000 b8ca 	b.w	8007056 <_Znwj>
 8006ec2:	bf00      	nop
 8006ec4:	0800a578 	.word	0x0800a578

08006ec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006ec8:	f850 3b08 	ldr.w	r3, [r0], #8
 8006ecc:	4283      	cmp	r3, r0
 8006ece:	d002      	beq.n	8006ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 b8be 	b.w	8007052 <_ZdlPv>
 8006ed6:	4770      	bx	lr

08006ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8006ed8:	2a01      	cmp	r2, #1
 8006eda:	b410      	push	{r4}
 8006edc:	d104      	bne.n	8006ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8006ede:	780a      	ldrb	r2, [r1, #0]
 8006ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee4:	7002      	strb	r2, [r0, #0]
 8006ee6:	4770      	bx	lr
 8006ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eec:	f7ff bfc6 	b.w	8006e7c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08006ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8006ef0:	b508      	push	{r3, lr}
 8006ef2:	1a52      	subs	r2, r2, r1
 8006ef4:	f7ff fff0 	bl	8006ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006ef8:	bd08      	pop	{r3, pc}

08006efa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8006efa:	b508      	push	{r3, lr}
 8006efc:	1a52      	subs	r2, r2, r1
 8006efe:	f7ff ffeb 	bl	8006ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006f02:	bd08      	pop	{r3, pc}

08006f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8006f04:	4288      	cmp	r0, r1
 8006f06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f08:	4604      	mov	r4, r0
 8006f0a:	460e      	mov	r6, r1
 8006f0c:	d01e      	beq.n	8006f4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	684d      	ldr	r5, [r1, #4]
 8006f12:	f853 2b08 	ldr.w	r2, [r3], #8
 8006f16:	429a      	cmp	r2, r3
 8006f18:	bf14      	ite	ne
 8006f1a:	6882      	ldrne	r2, [r0, #8]
 8006f1c:	220f      	moveq	r2, #15
 8006f1e:	42aa      	cmp	r2, r5
 8006f20:	d20a      	bcs.n	8006f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8006f22:	a901      	add	r1, sp, #4
 8006f24:	9501      	str	r5, [sp, #4]
 8006f26:	f7ff ffad 	bl	8006e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f7ff ffcb 	bl	8006ec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006f32:	9b01      	ldr	r3, [sp, #4]
 8006f34:	6027      	str	r7, [r4, #0]
 8006f36:	60a3      	str	r3, [r4, #8]
 8006f38:	b125      	cbz	r5, 8006f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8006f3a:	6831      	ldr	r1, [r6, #0]
 8006f3c:	6820      	ldr	r0, [r4, #0]
 8006f3e:	462a      	mov	r2, r5
 8006f40:	f7ff ffca 	bl	8006ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	6065      	str	r5, [r4, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	555a      	strb	r2, [r3, r5]
 8006f4c:	b003      	add	sp, #12
 8006f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8006f50:	f100 0208 	add.w	r2, r0, #8
 8006f54:	6002      	str	r2, [r0, #0]
 8006f56:	2200      	movs	r2, #0
 8006f58:	6042      	str	r2, [r0, #4]
 8006f5a:	7202      	strb	r2, [r0, #8]
 8006f5c:	4770      	bx	lr

08006f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006f5e:	b510      	push	{r4, lr}
 8006f60:	4604      	mov	r4, r0
 8006f62:	f7ff ffb1 	bl	8006ec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006f66:	4620      	mov	r0, r4
 8006f68:	bd10      	pop	{r4, pc}

08006f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	f7ff ffc9 	bl	8006f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8006f72:	4620      	mov	r0, r4
 8006f74:	bd10      	pop	{r4, pc}
	...

08006f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8006f78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4616      	mov	r6, r2
 8006f7e:	460d      	mov	r5, r1
 8006f80:	b919      	cbnz	r1, 8006f8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8006f82:	b112      	cbz	r2, 8006f8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8006f84:	480d      	ldr	r0, [pc, #52]	; (8006fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8006f86:	f000 f87a 	bl	800707e <_ZSt19__throw_logic_errorPKc>
 8006f8a:	1b73      	subs	r3, r6, r5
 8006f8c:	2b0f      	cmp	r3, #15
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	d907      	bls.n	8006fa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8006f92:	2200      	movs	r2, #0
 8006f94:	a901      	add	r1, sp, #4
 8006f96:	4620      	mov	r0, r4
 8006f98:	f7ff ff74 	bl	8006e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006f9c:	9b01      	ldr	r3, [sp, #4]
 8006f9e:	6020      	str	r0, [r4, #0]
 8006fa0:	60a3      	str	r3, [r4, #8]
 8006fa2:	4632      	mov	r2, r6
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	f7ff ffa2 	bl	8006ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8006fac:	9b01      	ldr	r3, [sp, #4]
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	6063      	str	r3, [r4, #4]
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	54d1      	strb	r1, [r2, r3]
 8006fb6:	b002      	add	sp, #8
 8006fb8:	bd70      	pop	{r4, r5, r6, pc}
 8006fba:	bf00      	nop
 8006fbc:	0800a590 	.word	0x0800a590

08006fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	f100 0308 	add.w	r3, r0, #8
 8006fc6:	6003      	str	r3, [r0, #0]
 8006fc8:	e9d1 5200 	ldrd	r5, r2, [r1]
 8006fcc:	4604      	mov	r4, r0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	442a      	add	r2, r5
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f7ff ffcf 	bl	8006f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8006fda:	4620      	mov	r0, r4
 8006fdc:	bd38      	pop	{r3, r4, r5, pc}
	...

08006fe0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8006fe0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	b919      	cbnz	r1, 8006ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006fea:	b112      	cbz	r2, 8006ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006fec:	480d      	ldr	r0, [pc, #52]	; (8007024 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8006fee:	f000 f846 	bl	800707e <_ZSt19__throw_logic_errorPKc>
 8006ff2:	1b73      	subs	r3, r6, r5
 8006ff4:	2b0f      	cmp	r3, #15
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	d907      	bls.n	800700a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	a901      	add	r1, sp, #4
 8006ffe:	4620      	mov	r0, r4
 8007000:	f7ff ff40 	bl	8006e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	6020      	str	r0, [r4, #0]
 8007008:	60a3      	str	r3, [r4, #8]
 800700a:	4632      	mov	r2, r6
 800700c:	4629      	mov	r1, r5
 800700e:	6820      	ldr	r0, [r4, #0]
 8007010:	f7ff ff73 	bl	8006efa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8007014:	9b01      	ldr	r3, [sp, #4]
 8007016:	6822      	ldr	r2, [r4, #0]
 8007018:	6063      	str	r3, [r4, #4]
 800701a:	2100      	movs	r1, #0
 800701c:	54d1      	strb	r1, [r2, r3]
 800701e:	b002      	add	sp, #8
 8007020:	bd70      	pop	{r4, r5, r6, pc}
 8007022:	bf00      	nop
 8007024:	0800a590 	.word	0x0800a590

08007028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	f100 0308 	add.w	r3, r0, #8
 800702e:	4604      	mov	r4, r0
 8007030:	6003      	str	r3, [r0, #0]
 8007032:	460d      	mov	r5, r1
 8007034:	b159      	cbz	r1, 800704e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8007036:	4608      	mov	r0, r1
 8007038:	f7f9 f92a 	bl	8000290 <strlen>
 800703c:	182a      	adds	r2, r5, r0
 800703e:	4620      	mov	r0, r4
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	4629      	mov	r1, r5
 8007046:	f7ff ffcb 	bl	8006fe0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800704a:	4620      	mov	r0, r4
 800704c:	bd38      	pop	{r3, r4, r5, pc}
 800704e:	2201      	movs	r2, #1
 8007050:	e7f5      	b.n	800703e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08007052 <_ZdlPv>:
 8007052:	f000 b833 	b.w	80070bc <free>

08007056 <_Znwj>:
 8007056:	2801      	cmp	r0, #1
 8007058:	bf38      	it	cc
 800705a:	2001      	movcc	r0, #1
 800705c:	b510      	push	{r4, lr}
 800705e:	4604      	mov	r4, r0
 8007060:	4620      	mov	r0, r4
 8007062:	f000 f823 	bl	80070ac <malloc>
 8007066:	b100      	cbz	r0, 800706a <_Znwj+0x14>
 8007068:	bd10      	pop	{r4, pc}
 800706a:	f000 f80f 	bl	800708c <_ZSt15get_new_handlerv>
 800706e:	b908      	cbnz	r0, 8007074 <_Znwj+0x1e>
 8007070:	f000 f814 	bl	800709c <abort>
 8007074:	4780      	blx	r0
 8007076:	e7f3      	b.n	8007060 <_Znwj+0xa>

08007078 <_ZSt17__throw_bad_allocv>:
 8007078:	b508      	push	{r3, lr}
 800707a:	f000 f80f 	bl	800709c <abort>

0800707e <_ZSt19__throw_logic_errorPKc>:
 800707e:	b508      	push	{r3, lr}
 8007080:	f000 f80c 	bl	800709c <abort>

08007084 <_ZSt20__throw_length_errorPKc>:
 8007084:	b508      	push	{r3, lr}
 8007086:	f000 f809 	bl	800709c <abort>
	...

0800708c <_ZSt15get_new_handlerv>:
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <_ZSt15get_new_handlerv+0xc>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	f3bf 8f5b 	dmb	ish
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	200013c8 	.word	0x200013c8

0800709c <abort>:
 800709c:	b508      	push	{r3, lr}
 800709e:	2006      	movs	r0, #6
 80070a0:	f001 f8be 	bl	8008220 <raise>
 80070a4:	2001      	movs	r0, #1
 80070a6:	f7fc ff8d 	bl	8003fc4 <_exit>
	...

080070ac <malloc>:
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <malloc+0xc>)
 80070ae:	4601      	mov	r1, r0
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	f000 b82b 	b.w	800710c <_malloc_r>
 80070b6:	bf00      	nop
 80070b8:	200001dc 	.word	0x200001dc

080070bc <free>:
 80070bc:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <free+0xc>)
 80070be:	4601      	mov	r1, r0
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	f001 b965 	b.w	8008390 <_free_r>
 80070c6:	bf00      	nop
 80070c8:	200001dc 	.word	0x200001dc

080070cc <sbrk_aligned>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	4e0e      	ldr	r6, [pc, #56]	; (8007108 <sbrk_aligned+0x3c>)
 80070d0:	460c      	mov	r4, r1
 80070d2:	6831      	ldr	r1, [r6, #0]
 80070d4:	4605      	mov	r5, r0
 80070d6:	b911      	cbnz	r1, 80070de <sbrk_aligned+0x12>
 80070d8:	f001 f8f2 	bl	80082c0 <_sbrk_r>
 80070dc:	6030      	str	r0, [r6, #0]
 80070de:	4621      	mov	r1, r4
 80070e0:	4628      	mov	r0, r5
 80070e2:	f001 f8ed 	bl	80082c0 <_sbrk_r>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	d00a      	beq.n	8007100 <sbrk_aligned+0x34>
 80070ea:	1cc4      	adds	r4, r0, #3
 80070ec:	f024 0403 	bic.w	r4, r4, #3
 80070f0:	42a0      	cmp	r0, r4
 80070f2:	d007      	beq.n	8007104 <sbrk_aligned+0x38>
 80070f4:	1a21      	subs	r1, r4, r0
 80070f6:	4628      	mov	r0, r5
 80070f8:	f001 f8e2 	bl	80082c0 <_sbrk_r>
 80070fc:	3001      	adds	r0, #1
 80070fe:	d101      	bne.n	8007104 <sbrk_aligned+0x38>
 8007100:	f04f 34ff 	mov.w	r4, #4294967295
 8007104:	4620      	mov	r0, r4
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	200013d0 	.word	0x200013d0

0800710c <_malloc_r>:
 800710c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007110:	1ccd      	adds	r5, r1, #3
 8007112:	f025 0503 	bic.w	r5, r5, #3
 8007116:	3508      	adds	r5, #8
 8007118:	2d0c      	cmp	r5, #12
 800711a:	bf38      	it	cc
 800711c:	250c      	movcc	r5, #12
 800711e:	2d00      	cmp	r5, #0
 8007120:	4607      	mov	r7, r0
 8007122:	db01      	blt.n	8007128 <_malloc_r+0x1c>
 8007124:	42a9      	cmp	r1, r5
 8007126:	d905      	bls.n	8007134 <_malloc_r+0x28>
 8007128:	230c      	movs	r3, #12
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	2600      	movs	r6, #0
 800712e:	4630      	mov	r0, r6
 8007130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007134:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007208 <_malloc_r+0xfc>
 8007138:	f000 f868 	bl	800720c <__malloc_lock>
 800713c:	f8d8 3000 	ldr.w	r3, [r8]
 8007140:	461c      	mov	r4, r3
 8007142:	bb5c      	cbnz	r4, 800719c <_malloc_r+0x90>
 8007144:	4629      	mov	r1, r5
 8007146:	4638      	mov	r0, r7
 8007148:	f7ff ffc0 	bl	80070cc <sbrk_aligned>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	4604      	mov	r4, r0
 8007150:	d155      	bne.n	80071fe <_malloc_r+0xf2>
 8007152:	f8d8 4000 	ldr.w	r4, [r8]
 8007156:	4626      	mov	r6, r4
 8007158:	2e00      	cmp	r6, #0
 800715a:	d145      	bne.n	80071e8 <_malloc_r+0xdc>
 800715c:	2c00      	cmp	r4, #0
 800715e:	d048      	beq.n	80071f2 <_malloc_r+0xe6>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	4631      	mov	r1, r6
 8007164:	4638      	mov	r0, r7
 8007166:	eb04 0903 	add.w	r9, r4, r3
 800716a:	f001 f8a9 	bl	80082c0 <_sbrk_r>
 800716e:	4581      	cmp	r9, r0
 8007170:	d13f      	bne.n	80071f2 <_malloc_r+0xe6>
 8007172:	6821      	ldr	r1, [r4, #0]
 8007174:	1a6d      	subs	r5, r5, r1
 8007176:	4629      	mov	r1, r5
 8007178:	4638      	mov	r0, r7
 800717a:	f7ff ffa7 	bl	80070cc <sbrk_aligned>
 800717e:	3001      	adds	r0, #1
 8007180:	d037      	beq.n	80071f2 <_malloc_r+0xe6>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	442b      	add	r3, r5
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	f8d8 3000 	ldr.w	r3, [r8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d038      	beq.n	8007202 <_malloc_r+0xf6>
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	42a2      	cmp	r2, r4
 8007194:	d12b      	bne.n	80071ee <_malloc_r+0xe2>
 8007196:	2200      	movs	r2, #0
 8007198:	605a      	str	r2, [r3, #4]
 800719a:	e00f      	b.n	80071bc <_malloc_r+0xb0>
 800719c:	6822      	ldr	r2, [r4, #0]
 800719e:	1b52      	subs	r2, r2, r5
 80071a0:	d41f      	bmi.n	80071e2 <_malloc_r+0xd6>
 80071a2:	2a0b      	cmp	r2, #11
 80071a4:	d917      	bls.n	80071d6 <_malloc_r+0xca>
 80071a6:	1961      	adds	r1, r4, r5
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	6025      	str	r5, [r4, #0]
 80071ac:	bf18      	it	ne
 80071ae:	6059      	strne	r1, [r3, #4]
 80071b0:	6863      	ldr	r3, [r4, #4]
 80071b2:	bf08      	it	eq
 80071b4:	f8c8 1000 	streq.w	r1, [r8]
 80071b8:	5162      	str	r2, [r4, r5]
 80071ba:	604b      	str	r3, [r1, #4]
 80071bc:	4638      	mov	r0, r7
 80071be:	f104 060b 	add.w	r6, r4, #11
 80071c2:	f000 f829 	bl	8007218 <__malloc_unlock>
 80071c6:	f026 0607 	bic.w	r6, r6, #7
 80071ca:	1d23      	adds	r3, r4, #4
 80071cc:	1af2      	subs	r2, r6, r3
 80071ce:	d0ae      	beq.n	800712e <_malloc_r+0x22>
 80071d0:	1b9b      	subs	r3, r3, r6
 80071d2:	50a3      	str	r3, [r4, r2]
 80071d4:	e7ab      	b.n	800712e <_malloc_r+0x22>
 80071d6:	42a3      	cmp	r3, r4
 80071d8:	6862      	ldr	r2, [r4, #4]
 80071da:	d1dd      	bne.n	8007198 <_malloc_r+0x8c>
 80071dc:	f8c8 2000 	str.w	r2, [r8]
 80071e0:	e7ec      	b.n	80071bc <_malloc_r+0xb0>
 80071e2:	4623      	mov	r3, r4
 80071e4:	6864      	ldr	r4, [r4, #4]
 80071e6:	e7ac      	b.n	8007142 <_malloc_r+0x36>
 80071e8:	4634      	mov	r4, r6
 80071ea:	6876      	ldr	r6, [r6, #4]
 80071ec:	e7b4      	b.n	8007158 <_malloc_r+0x4c>
 80071ee:	4613      	mov	r3, r2
 80071f0:	e7cc      	b.n	800718c <_malloc_r+0x80>
 80071f2:	230c      	movs	r3, #12
 80071f4:	603b      	str	r3, [r7, #0]
 80071f6:	4638      	mov	r0, r7
 80071f8:	f000 f80e 	bl	8007218 <__malloc_unlock>
 80071fc:	e797      	b.n	800712e <_malloc_r+0x22>
 80071fe:	6025      	str	r5, [r4, #0]
 8007200:	e7dc      	b.n	80071bc <_malloc_r+0xb0>
 8007202:	605b      	str	r3, [r3, #4]
 8007204:	deff      	udf	#255	; 0xff
 8007206:	bf00      	nop
 8007208:	200013cc 	.word	0x200013cc

0800720c <__malloc_lock>:
 800720c:	4801      	ldr	r0, [pc, #4]	; (8007214 <__malloc_lock+0x8>)
 800720e:	f001 b8a4 	b.w	800835a <__retarget_lock_acquire_recursive>
 8007212:	bf00      	nop
 8007214:	20001514 	.word	0x20001514

08007218 <__malloc_unlock>:
 8007218:	4801      	ldr	r0, [pc, #4]	; (8007220 <__malloc_unlock+0x8>)
 800721a:	f001 b89f 	b.w	800835c <__retarget_lock_release_recursive>
 800721e:	bf00      	nop
 8007220:	20001514 	.word	0x20001514

08007224 <realloc>:
 8007224:	4b02      	ldr	r3, [pc, #8]	; (8007230 <realloc+0xc>)
 8007226:	460a      	mov	r2, r1
 8007228:	4601      	mov	r1, r0
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	f000 b802 	b.w	8007234 <_realloc_r>
 8007230:	200001dc 	.word	0x200001dc

08007234 <_realloc_r>:
 8007234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007238:	4680      	mov	r8, r0
 800723a:	4614      	mov	r4, r2
 800723c:	460e      	mov	r6, r1
 800723e:	b921      	cbnz	r1, 800724a <_realloc_r+0x16>
 8007240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007244:	4611      	mov	r1, r2
 8007246:	f7ff bf61 	b.w	800710c <_malloc_r>
 800724a:	b92a      	cbnz	r2, 8007258 <_realloc_r+0x24>
 800724c:	f001 f8a0 	bl	8008390 <_free_r>
 8007250:	4625      	mov	r5, r4
 8007252:	4628      	mov	r0, r5
 8007254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007258:	f002 f8fd 	bl	8009456 <_malloc_usable_size_r>
 800725c:	4284      	cmp	r4, r0
 800725e:	4607      	mov	r7, r0
 8007260:	d802      	bhi.n	8007268 <_realloc_r+0x34>
 8007262:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007266:	d812      	bhi.n	800728e <_realloc_r+0x5a>
 8007268:	4621      	mov	r1, r4
 800726a:	4640      	mov	r0, r8
 800726c:	f7ff ff4e 	bl	800710c <_malloc_r>
 8007270:	4605      	mov	r5, r0
 8007272:	2800      	cmp	r0, #0
 8007274:	d0ed      	beq.n	8007252 <_realloc_r+0x1e>
 8007276:	42bc      	cmp	r4, r7
 8007278:	4622      	mov	r2, r4
 800727a:	4631      	mov	r1, r6
 800727c:	bf28      	it	cs
 800727e:	463a      	movcs	r2, r7
 8007280:	f001 f86d 	bl	800835e <memcpy>
 8007284:	4631      	mov	r1, r6
 8007286:	4640      	mov	r0, r8
 8007288:	f001 f882 	bl	8008390 <_free_r>
 800728c:	e7e1      	b.n	8007252 <_realloc_r+0x1e>
 800728e:	4635      	mov	r5, r6
 8007290:	e7df      	b.n	8007252 <_realloc_r+0x1e>

08007292 <sulp>:
 8007292:	b570      	push	{r4, r5, r6, lr}
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	ec45 4b10 	vmov	d0, r4, r5
 800729c:	4616      	mov	r6, r2
 800729e:	f001 ff99 	bl	80091d4 <__ulp>
 80072a2:	ec51 0b10 	vmov	r0, r1, d0
 80072a6:	b17e      	cbz	r6, 80072c8 <sulp+0x36>
 80072a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80072ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	dd09      	ble.n	80072c8 <sulp+0x36>
 80072b4:	051b      	lsls	r3, r3, #20
 80072b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80072ba:	2400      	movs	r4, #0
 80072bc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80072c0:	4622      	mov	r2, r4
 80072c2:	462b      	mov	r3, r5
 80072c4:	f7f9 f9a8 	bl	8000618 <__aeabi_dmul>
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
 80072ca:	0000      	movs	r0, r0
 80072cc:	0000      	movs	r0, r0
	...

080072d0 <_strtod_l>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	ed2d 8b02 	vpush	{d8}
 80072d8:	b09b      	sub	sp, #108	; 0x6c
 80072da:	4604      	mov	r4, r0
 80072dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80072de:	2200      	movs	r2, #0
 80072e0:	9216      	str	r2, [sp, #88]	; 0x58
 80072e2:	460d      	mov	r5, r1
 80072e4:	f04f 0800 	mov.w	r8, #0
 80072e8:	f04f 0900 	mov.w	r9, #0
 80072ec:	460a      	mov	r2, r1
 80072ee:	9215      	str	r2, [sp, #84]	; 0x54
 80072f0:	7811      	ldrb	r1, [r2, #0]
 80072f2:	292b      	cmp	r1, #43	; 0x2b
 80072f4:	d04c      	beq.n	8007390 <_strtod_l+0xc0>
 80072f6:	d83a      	bhi.n	800736e <_strtod_l+0x9e>
 80072f8:	290d      	cmp	r1, #13
 80072fa:	d834      	bhi.n	8007366 <_strtod_l+0x96>
 80072fc:	2908      	cmp	r1, #8
 80072fe:	d834      	bhi.n	800736a <_strtod_l+0x9a>
 8007300:	2900      	cmp	r1, #0
 8007302:	d03d      	beq.n	8007380 <_strtod_l+0xb0>
 8007304:	2200      	movs	r2, #0
 8007306:	920a      	str	r2, [sp, #40]	; 0x28
 8007308:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800730a:	7832      	ldrb	r2, [r6, #0]
 800730c:	2a30      	cmp	r2, #48	; 0x30
 800730e:	f040 80b4 	bne.w	800747a <_strtod_l+0x1aa>
 8007312:	7872      	ldrb	r2, [r6, #1]
 8007314:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007318:	2a58      	cmp	r2, #88	; 0x58
 800731a:	d170      	bne.n	80073fe <_strtod_l+0x12e>
 800731c:	9302      	str	r3, [sp, #8]
 800731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	ab16      	add	r3, sp, #88	; 0x58
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	4a8e      	ldr	r2, [pc, #568]	; (8007560 <_strtod_l+0x290>)
 8007328:	ab17      	add	r3, sp, #92	; 0x5c
 800732a:	a915      	add	r1, sp, #84	; 0x54
 800732c:	4620      	mov	r0, r4
 800732e:	f001 f8e3 	bl	80084f8 <__gethex>
 8007332:	f010 070f 	ands.w	r7, r0, #15
 8007336:	4605      	mov	r5, r0
 8007338:	d005      	beq.n	8007346 <_strtod_l+0x76>
 800733a:	2f06      	cmp	r7, #6
 800733c:	d12a      	bne.n	8007394 <_strtod_l+0xc4>
 800733e:	3601      	adds	r6, #1
 8007340:	2300      	movs	r3, #0
 8007342:	9615      	str	r6, [sp, #84]	; 0x54
 8007344:	930a      	str	r3, [sp, #40]	; 0x28
 8007346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007348:	2b00      	cmp	r3, #0
 800734a:	f040 857f 	bne.w	8007e4c <_strtod_l+0xb7c>
 800734e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007350:	b1db      	cbz	r3, 800738a <_strtod_l+0xba>
 8007352:	4642      	mov	r2, r8
 8007354:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007358:	ec43 2b10 	vmov	d0, r2, r3
 800735c:	b01b      	add	sp, #108	; 0x6c
 800735e:	ecbd 8b02 	vpop	{d8}
 8007362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	2920      	cmp	r1, #32
 8007368:	d1cc      	bne.n	8007304 <_strtod_l+0x34>
 800736a:	3201      	adds	r2, #1
 800736c:	e7bf      	b.n	80072ee <_strtod_l+0x1e>
 800736e:	292d      	cmp	r1, #45	; 0x2d
 8007370:	d1c8      	bne.n	8007304 <_strtod_l+0x34>
 8007372:	2101      	movs	r1, #1
 8007374:	910a      	str	r1, [sp, #40]	; 0x28
 8007376:	1c51      	adds	r1, r2, #1
 8007378:	9115      	str	r1, [sp, #84]	; 0x54
 800737a:	7852      	ldrb	r2, [r2, #1]
 800737c:	2a00      	cmp	r2, #0
 800737e:	d1c3      	bne.n	8007308 <_strtod_l+0x38>
 8007380:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007382:	9515      	str	r5, [sp, #84]	; 0x54
 8007384:	2b00      	cmp	r3, #0
 8007386:	f040 855f 	bne.w	8007e48 <_strtod_l+0xb78>
 800738a:	4642      	mov	r2, r8
 800738c:	464b      	mov	r3, r9
 800738e:	e7e3      	b.n	8007358 <_strtod_l+0x88>
 8007390:	2100      	movs	r1, #0
 8007392:	e7ef      	b.n	8007374 <_strtod_l+0xa4>
 8007394:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007396:	b13a      	cbz	r2, 80073a8 <_strtod_l+0xd8>
 8007398:	2135      	movs	r1, #53	; 0x35
 800739a:	a818      	add	r0, sp, #96	; 0x60
 800739c:	f002 f817 	bl	80093ce <__copybits>
 80073a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80073a2:	4620      	mov	r0, r4
 80073a4:	f001 fbea 	bl	8008b7c <_Bfree>
 80073a8:	3f01      	subs	r7, #1
 80073aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073ac:	2f04      	cmp	r7, #4
 80073ae:	d806      	bhi.n	80073be <_strtod_l+0xee>
 80073b0:	e8df f007 	tbb	[pc, r7]
 80073b4:	201d0314 	.word	0x201d0314
 80073b8:	14          	.byte	0x14
 80073b9:	00          	.byte	0x00
 80073ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80073be:	05e9      	lsls	r1, r5, #23
 80073c0:	bf48      	it	mi
 80073c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80073c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073ca:	0d1b      	lsrs	r3, r3, #20
 80073cc:	051b      	lsls	r3, r3, #20
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1b9      	bne.n	8007346 <_strtod_l+0x76>
 80073d2:	f000 ff97 	bl	8008304 <__errno>
 80073d6:	2322      	movs	r3, #34	; 0x22
 80073d8:	6003      	str	r3, [r0, #0]
 80073da:	e7b4      	b.n	8007346 <_strtod_l+0x76>
 80073dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80073e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80073ec:	e7e7      	b.n	80073be <_strtod_l+0xee>
 80073ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007568 <_strtod_l+0x298>
 80073f2:	e7e4      	b.n	80073be <_strtod_l+0xee>
 80073f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80073f8:	f04f 38ff 	mov.w	r8, #4294967295
 80073fc:	e7df      	b.n	80073be <_strtod_l+0xee>
 80073fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	9215      	str	r2, [sp, #84]	; 0x54
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b30      	cmp	r3, #48	; 0x30
 8007408:	d0f9      	beq.n	80073fe <_strtod_l+0x12e>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d09b      	beq.n	8007346 <_strtod_l+0x76>
 800740e:	2301      	movs	r3, #1
 8007410:	f04f 0a00 	mov.w	sl, #0
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007418:	930b      	str	r3, [sp, #44]	; 0x2c
 800741a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800741e:	46d3      	mov	fp, sl
 8007420:	220a      	movs	r2, #10
 8007422:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007424:	7806      	ldrb	r6, [r0, #0]
 8007426:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800742a:	b2d9      	uxtb	r1, r3
 800742c:	2909      	cmp	r1, #9
 800742e:	d926      	bls.n	800747e <_strtod_l+0x1ae>
 8007430:	494c      	ldr	r1, [pc, #304]	; (8007564 <_strtod_l+0x294>)
 8007432:	2201      	movs	r2, #1
 8007434:	f000 feba 	bl	80081ac <strncmp>
 8007438:	2800      	cmp	r0, #0
 800743a:	d030      	beq.n	800749e <_strtod_l+0x1ce>
 800743c:	2000      	movs	r0, #0
 800743e:	4632      	mov	r2, r6
 8007440:	9005      	str	r0, [sp, #20]
 8007442:	465e      	mov	r6, fp
 8007444:	4603      	mov	r3, r0
 8007446:	2a65      	cmp	r2, #101	; 0x65
 8007448:	d001      	beq.n	800744e <_strtod_l+0x17e>
 800744a:	2a45      	cmp	r2, #69	; 0x45
 800744c:	d113      	bne.n	8007476 <_strtod_l+0x1a6>
 800744e:	b91e      	cbnz	r6, 8007458 <_strtod_l+0x188>
 8007450:	9a04      	ldr	r2, [sp, #16]
 8007452:	4302      	orrs	r2, r0
 8007454:	d094      	beq.n	8007380 <_strtod_l+0xb0>
 8007456:	2600      	movs	r6, #0
 8007458:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800745a:	1c6a      	adds	r2, r5, #1
 800745c:	9215      	str	r2, [sp, #84]	; 0x54
 800745e:	786a      	ldrb	r2, [r5, #1]
 8007460:	2a2b      	cmp	r2, #43	; 0x2b
 8007462:	d074      	beq.n	800754e <_strtod_l+0x27e>
 8007464:	2a2d      	cmp	r2, #45	; 0x2d
 8007466:	d078      	beq.n	800755a <_strtod_l+0x28a>
 8007468:	f04f 0c00 	mov.w	ip, #0
 800746c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007470:	2909      	cmp	r1, #9
 8007472:	d97f      	bls.n	8007574 <_strtod_l+0x2a4>
 8007474:	9515      	str	r5, [sp, #84]	; 0x54
 8007476:	2700      	movs	r7, #0
 8007478:	e09e      	b.n	80075b8 <_strtod_l+0x2e8>
 800747a:	2300      	movs	r3, #0
 800747c:	e7c8      	b.n	8007410 <_strtod_l+0x140>
 800747e:	f1bb 0f08 	cmp.w	fp, #8
 8007482:	bfd8      	it	le
 8007484:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007486:	f100 0001 	add.w	r0, r0, #1
 800748a:	bfda      	itte	le
 800748c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007490:	9309      	strle	r3, [sp, #36]	; 0x24
 8007492:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007496:	f10b 0b01 	add.w	fp, fp, #1
 800749a:	9015      	str	r0, [sp, #84]	; 0x54
 800749c:	e7c1      	b.n	8007422 <_strtod_l+0x152>
 800749e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	9215      	str	r2, [sp, #84]	; 0x54
 80074a4:	785a      	ldrb	r2, [r3, #1]
 80074a6:	f1bb 0f00 	cmp.w	fp, #0
 80074aa:	d037      	beq.n	800751c <_strtod_l+0x24c>
 80074ac:	9005      	str	r0, [sp, #20]
 80074ae:	465e      	mov	r6, fp
 80074b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80074b4:	2b09      	cmp	r3, #9
 80074b6:	d912      	bls.n	80074de <_strtod_l+0x20e>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e7c4      	b.n	8007446 <_strtod_l+0x176>
 80074bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	9215      	str	r2, [sp, #84]	; 0x54
 80074c2:	785a      	ldrb	r2, [r3, #1]
 80074c4:	3001      	adds	r0, #1
 80074c6:	2a30      	cmp	r2, #48	; 0x30
 80074c8:	d0f8      	beq.n	80074bc <_strtod_l+0x1ec>
 80074ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	f200 84c1 	bhi.w	8007e56 <_strtod_l+0xb86>
 80074d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074d6:	9005      	str	r0, [sp, #20]
 80074d8:	2000      	movs	r0, #0
 80074da:	930b      	str	r3, [sp, #44]	; 0x2c
 80074dc:	4606      	mov	r6, r0
 80074de:	3a30      	subs	r2, #48	; 0x30
 80074e0:	f100 0301 	add.w	r3, r0, #1
 80074e4:	d014      	beq.n	8007510 <_strtod_l+0x240>
 80074e6:	9905      	ldr	r1, [sp, #20]
 80074e8:	4419      	add	r1, r3
 80074ea:	9105      	str	r1, [sp, #20]
 80074ec:	4633      	mov	r3, r6
 80074ee:	eb00 0c06 	add.w	ip, r0, r6
 80074f2:	210a      	movs	r1, #10
 80074f4:	4563      	cmp	r3, ip
 80074f6:	d113      	bne.n	8007520 <_strtod_l+0x250>
 80074f8:	1833      	adds	r3, r6, r0
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	f106 0601 	add.w	r6, r6, #1
 8007500:	4406      	add	r6, r0
 8007502:	dc1a      	bgt.n	800753a <_strtod_l+0x26a>
 8007504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007506:	230a      	movs	r3, #10
 8007508:	fb03 2301 	mla	r3, r3, r1, r2
 800750c:	9309      	str	r3, [sp, #36]	; 0x24
 800750e:	2300      	movs	r3, #0
 8007510:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007512:	1c51      	adds	r1, r2, #1
 8007514:	9115      	str	r1, [sp, #84]	; 0x54
 8007516:	7852      	ldrb	r2, [r2, #1]
 8007518:	4618      	mov	r0, r3
 800751a:	e7c9      	b.n	80074b0 <_strtod_l+0x1e0>
 800751c:	4658      	mov	r0, fp
 800751e:	e7d2      	b.n	80074c6 <_strtod_l+0x1f6>
 8007520:	2b08      	cmp	r3, #8
 8007522:	f103 0301 	add.w	r3, r3, #1
 8007526:	dc03      	bgt.n	8007530 <_strtod_l+0x260>
 8007528:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800752a:	434f      	muls	r7, r1
 800752c:	9709      	str	r7, [sp, #36]	; 0x24
 800752e:	e7e1      	b.n	80074f4 <_strtod_l+0x224>
 8007530:	2b10      	cmp	r3, #16
 8007532:	bfd8      	it	le
 8007534:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007538:	e7dc      	b.n	80074f4 <_strtod_l+0x224>
 800753a:	2e10      	cmp	r6, #16
 800753c:	bfdc      	itt	le
 800753e:	230a      	movle	r3, #10
 8007540:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007544:	e7e3      	b.n	800750e <_strtod_l+0x23e>
 8007546:	2300      	movs	r3, #0
 8007548:	9305      	str	r3, [sp, #20]
 800754a:	2301      	movs	r3, #1
 800754c:	e780      	b.n	8007450 <_strtod_l+0x180>
 800754e:	f04f 0c00 	mov.w	ip, #0
 8007552:	1caa      	adds	r2, r5, #2
 8007554:	9215      	str	r2, [sp, #84]	; 0x54
 8007556:	78aa      	ldrb	r2, [r5, #2]
 8007558:	e788      	b.n	800746c <_strtod_l+0x19c>
 800755a:	f04f 0c01 	mov.w	ip, #1
 800755e:	e7f8      	b.n	8007552 <_strtod_l+0x282>
 8007560:	0800a5c8 	.word	0x0800a5c8
 8007564:	0800a5ba 	.word	0x0800a5ba
 8007568:	7ff00000 	.word	0x7ff00000
 800756c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800756e:	1c51      	adds	r1, r2, #1
 8007570:	9115      	str	r1, [sp, #84]	; 0x54
 8007572:	7852      	ldrb	r2, [r2, #1]
 8007574:	2a30      	cmp	r2, #48	; 0x30
 8007576:	d0f9      	beq.n	800756c <_strtod_l+0x29c>
 8007578:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800757c:	2908      	cmp	r1, #8
 800757e:	f63f af7a 	bhi.w	8007476 <_strtod_l+0x1a6>
 8007582:	3a30      	subs	r2, #48	; 0x30
 8007584:	9208      	str	r2, [sp, #32]
 8007586:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007588:	920c      	str	r2, [sp, #48]	; 0x30
 800758a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800758c:	1c57      	adds	r7, r2, #1
 800758e:	9715      	str	r7, [sp, #84]	; 0x54
 8007590:	7852      	ldrb	r2, [r2, #1]
 8007592:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007596:	f1be 0f09 	cmp.w	lr, #9
 800759a:	d938      	bls.n	800760e <_strtod_l+0x33e>
 800759c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800759e:	1a7f      	subs	r7, r7, r1
 80075a0:	2f08      	cmp	r7, #8
 80075a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80075a6:	dc03      	bgt.n	80075b0 <_strtod_l+0x2e0>
 80075a8:	9908      	ldr	r1, [sp, #32]
 80075aa:	428f      	cmp	r7, r1
 80075ac:	bfa8      	it	ge
 80075ae:	460f      	movge	r7, r1
 80075b0:	f1bc 0f00 	cmp.w	ip, #0
 80075b4:	d000      	beq.n	80075b8 <_strtod_l+0x2e8>
 80075b6:	427f      	negs	r7, r7
 80075b8:	2e00      	cmp	r6, #0
 80075ba:	d14f      	bne.n	800765c <_strtod_l+0x38c>
 80075bc:	9904      	ldr	r1, [sp, #16]
 80075be:	4301      	orrs	r1, r0
 80075c0:	f47f aec1 	bne.w	8007346 <_strtod_l+0x76>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f47f aedb 	bne.w	8007380 <_strtod_l+0xb0>
 80075ca:	2a69      	cmp	r2, #105	; 0x69
 80075cc:	d029      	beq.n	8007622 <_strtod_l+0x352>
 80075ce:	dc26      	bgt.n	800761e <_strtod_l+0x34e>
 80075d0:	2a49      	cmp	r2, #73	; 0x49
 80075d2:	d026      	beq.n	8007622 <_strtod_l+0x352>
 80075d4:	2a4e      	cmp	r2, #78	; 0x4e
 80075d6:	f47f aed3 	bne.w	8007380 <_strtod_l+0xb0>
 80075da:	499b      	ldr	r1, [pc, #620]	; (8007848 <_strtod_l+0x578>)
 80075dc:	a815      	add	r0, sp, #84	; 0x54
 80075de:	f001 f9cb 	bl	8008978 <__match>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	f43f aecc 	beq.w	8007380 <_strtod_l+0xb0>
 80075e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b28      	cmp	r3, #40	; 0x28
 80075ee:	d12f      	bne.n	8007650 <_strtod_l+0x380>
 80075f0:	4996      	ldr	r1, [pc, #600]	; (800784c <_strtod_l+0x57c>)
 80075f2:	aa18      	add	r2, sp, #96	; 0x60
 80075f4:	a815      	add	r0, sp, #84	; 0x54
 80075f6:	f001 f9d3 	bl	80089a0 <__hexnan>
 80075fa:	2805      	cmp	r0, #5
 80075fc:	d128      	bne.n	8007650 <_strtod_l+0x380>
 80075fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007600:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007604:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007608:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800760c:	e69b      	b.n	8007346 <_strtod_l+0x76>
 800760e:	9f08      	ldr	r7, [sp, #32]
 8007610:	210a      	movs	r1, #10
 8007612:	fb01 2107 	mla	r1, r1, r7, r2
 8007616:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800761a:	9208      	str	r2, [sp, #32]
 800761c:	e7b5      	b.n	800758a <_strtod_l+0x2ba>
 800761e:	2a6e      	cmp	r2, #110	; 0x6e
 8007620:	e7d9      	b.n	80075d6 <_strtod_l+0x306>
 8007622:	498b      	ldr	r1, [pc, #556]	; (8007850 <_strtod_l+0x580>)
 8007624:	a815      	add	r0, sp, #84	; 0x54
 8007626:	f001 f9a7 	bl	8008978 <__match>
 800762a:	2800      	cmp	r0, #0
 800762c:	f43f aea8 	beq.w	8007380 <_strtod_l+0xb0>
 8007630:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007632:	4988      	ldr	r1, [pc, #544]	; (8007854 <_strtod_l+0x584>)
 8007634:	3b01      	subs	r3, #1
 8007636:	a815      	add	r0, sp, #84	; 0x54
 8007638:	9315      	str	r3, [sp, #84]	; 0x54
 800763a:	f001 f99d 	bl	8008978 <__match>
 800763e:	b910      	cbnz	r0, 8007646 <_strtod_l+0x376>
 8007640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007642:	3301      	adds	r3, #1
 8007644:	9315      	str	r3, [sp, #84]	; 0x54
 8007646:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007864 <_strtod_l+0x594>
 800764a:	f04f 0800 	mov.w	r8, #0
 800764e:	e67a      	b.n	8007346 <_strtod_l+0x76>
 8007650:	4881      	ldr	r0, [pc, #516]	; (8007858 <_strtod_l+0x588>)
 8007652:	f000 fe95 	bl	8008380 <nan>
 8007656:	ec59 8b10 	vmov	r8, r9, d0
 800765a:	e674      	b.n	8007346 <_strtod_l+0x76>
 800765c:	9b05      	ldr	r3, [sp, #20]
 800765e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007660:	1afb      	subs	r3, r7, r3
 8007662:	f1bb 0f00 	cmp.w	fp, #0
 8007666:	bf08      	it	eq
 8007668:	46b3      	moveq	fp, r6
 800766a:	2e10      	cmp	r6, #16
 800766c:	9308      	str	r3, [sp, #32]
 800766e:	4635      	mov	r5, r6
 8007670:	bfa8      	it	ge
 8007672:	2510      	movge	r5, #16
 8007674:	f7f8 ff56 	bl	8000524 <__aeabi_ui2d>
 8007678:	2e09      	cmp	r6, #9
 800767a:	4680      	mov	r8, r0
 800767c:	4689      	mov	r9, r1
 800767e:	dd13      	ble.n	80076a8 <_strtod_l+0x3d8>
 8007680:	4b76      	ldr	r3, [pc, #472]	; (800785c <_strtod_l+0x58c>)
 8007682:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007686:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800768a:	f7f8 ffc5 	bl	8000618 <__aeabi_dmul>
 800768e:	4680      	mov	r8, r0
 8007690:	4650      	mov	r0, sl
 8007692:	4689      	mov	r9, r1
 8007694:	f7f8 ff46 	bl	8000524 <__aeabi_ui2d>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4640      	mov	r0, r8
 800769e:	4649      	mov	r1, r9
 80076a0:	f7f8 fe04 	bl	80002ac <__adddf3>
 80076a4:	4680      	mov	r8, r0
 80076a6:	4689      	mov	r9, r1
 80076a8:	2e0f      	cmp	r6, #15
 80076aa:	dc38      	bgt.n	800771e <_strtod_l+0x44e>
 80076ac:	9b08      	ldr	r3, [sp, #32]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f43f ae49 	beq.w	8007346 <_strtod_l+0x76>
 80076b4:	dd24      	ble.n	8007700 <_strtod_l+0x430>
 80076b6:	2b16      	cmp	r3, #22
 80076b8:	dc0b      	bgt.n	80076d2 <_strtod_l+0x402>
 80076ba:	4968      	ldr	r1, [pc, #416]	; (800785c <_strtod_l+0x58c>)
 80076bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	f7f8 ffa6 	bl	8000618 <__aeabi_dmul>
 80076cc:	4680      	mov	r8, r0
 80076ce:	4689      	mov	r9, r1
 80076d0:	e639      	b.n	8007346 <_strtod_l+0x76>
 80076d2:	9a08      	ldr	r2, [sp, #32]
 80076d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80076d8:	4293      	cmp	r3, r2
 80076da:	db20      	blt.n	800771e <_strtod_l+0x44e>
 80076dc:	4c5f      	ldr	r4, [pc, #380]	; (800785c <_strtod_l+0x58c>)
 80076de:	f1c6 060f 	rsb	r6, r6, #15
 80076e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80076e6:	4642      	mov	r2, r8
 80076e8:	464b      	mov	r3, r9
 80076ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076ee:	f7f8 ff93 	bl	8000618 <__aeabi_dmul>
 80076f2:	9b08      	ldr	r3, [sp, #32]
 80076f4:	1b9e      	subs	r6, r3, r6
 80076f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80076fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80076fe:	e7e3      	b.n	80076c8 <_strtod_l+0x3f8>
 8007700:	9b08      	ldr	r3, [sp, #32]
 8007702:	3316      	adds	r3, #22
 8007704:	db0b      	blt.n	800771e <_strtod_l+0x44e>
 8007706:	9b05      	ldr	r3, [sp, #20]
 8007708:	1bdf      	subs	r7, r3, r7
 800770a:	4b54      	ldr	r3, [pc, #336]	; (800785c <_strtod_l+0x58c>)
 800770c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007714:	4640      	mov	r0, r8
 8007716:	4649      	mov	r1, r9
 8007718:	f7f9 f8a8 	bl	800086c <__aeabi_ddiv>
 800771c:	e7d6      	b.n	80076cc <_strtod_l+0x3fc>
 800771e:	9b08      	ldr	r3, [sp, #32]
 8007720:	1b75      	subs	r5, r6, r5
 8007722:	441d      	add	r5, r3
 8007724:	2d00      	cmp	r5, #0
 8007726:	dd70      	ble.n	800780a <_strtod_l+0x53a>
 8007728:	f015 030f 	ands.w	r3, r5, #15
 800772c:	d00a      	beq.n	8007744 <_strtod_l+0x474>
 800772e:	494b      	ldr	r1, [pc, #300]	; (800785c <_strtod_l+0x58c>)
 8007730:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007734:	4642      	mov	r2, r8
 8007736:	464b      	mov	r3, r9
 8007738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800773c:	f7f8 ff6c 	bl	8000618 <__aeabi_dmul>
 8007740:	4680      	mov	r8, r0
 8007742:	4689      	mov	r9, r1
 8007744:	f035 050f 	bics.w	r5, r5, #15
 8007748:	d04d      	beq.n	80077e6 <_strtod_l+0x516>
 800774a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800774e:	dd22      	ble.n	8007796 <_strtod_l+0x4c6>
 8007750:	2500      	movs	r5, #0
 8007752:	46ab      	mov	fp, r5
 8007754:	9509      	str	r5, [sp, #36]	; 0x24
 8007756:	9505      	str	r5, [sp, #20]
 8007758:	2322      	movs	r3, #34	; 0x22
 800775a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007864 <_strtod_l+0x594>
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	f04f 0800 	mov.w	r8, #0
 8007764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007766:	2b00      	cmp	r3, #0
 8007768:	f43f aded 	beq.w	8007346 <_strtod_l+0x76>
 800776c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800776e:	4620      	mov	r0, r4
 8007770:	f001 fa04 	bl	8008b7c <_Bfree>
 8007774:	9905      	ldr	r1, [sp, #20]
 8007776:	4620      	mov	r0, r4
 8007778:	f001 fa00 	bl	8008b7c <_Bfree>
 800777c:	4659      	mov	r1, fp
 800777e:	4620      	mov	r0, r4
 8007780:	f001 f9fc 	bl	8008b7c <_Bfree>
 8007784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007786:	4620      	mov	r0, r4
 8007788:	f001 f9f8 	bl	8008b7c <_Bfree>
 800778c:	4629      	mov	r1, r5
 800778e:	4620      	mov	r0, r4
 8007790:	f001 f9f4 	bl	8008b7c <_Bfree>
 8007794:	e5d7      	b.n	8007346 <_strtod_l+0x76>
 8007796:	4b32      	ldr	r3, [pc, #200]	; (8007860 <_strtod_l+0x590>)
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	2300      	movs	r3, #0
 800779c:	112d      	asrs	r5, r5, #4
 800779e:	4640      	mov	r0, r8
 80077a0:	4649      	mov	r1, r9
 80077a2:	469a      	mov	sl, r3
 80077a4:	2d01      	cmp	r5, #1
 80077a6:	dc21      	bgt.n	80077ec <_strtod_l+0x51c>
 80077a8:	b10b      	cbz	r3, 80077ae <_strtod_l+0x4de>
 80077aa:	4680      	mov	r8, r0
 80077ac:	4689      	mov	r9, r1
 80077ae:	492c      	ldr	r1, [pc, #176]	; (8007860 <_strtod_l+0x590>)
 80077b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80077b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80077b8:	4642      	mov	r2, r8
 80077ba:	464b      	mov	r3, r9
 80077bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c0:	f7f8 ff2a 	bl	8000618 <__aeabi_dmul>
 80077c4:	4b27      	ldr	r3, [pc, #156]	; (8007864 <_strtod_l+0x594>)
 80077c6:	460a      	mov	r2, r1
 80077c8:	400b      	ands	r3, r1
 80077ca:	4927      	ldr	r1, [pc, #156]	; (8007868 <_strtod_l+0x598>)
 80077cc:	428b      	cmp	r3, r1
 80077ce:	4680      	mov	r8, r0
 80077d0:	d8be      	bhi.n	8007750 <_strtod_l+0x480>
 80077d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80077d6:	428b      	cmp	r3, r1
 80077d8:	bf86      	itte	hi
 80077da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800786c <_strtod_l+0x59c>
 80077de:	f04f 38ff 	movhi.w	r8, #4294967295
 80077e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80077e6:	2300      	movs	r3, #0
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	e07b      	b.n	80078e4 <_strtod_l+0x614>
 80077ec:	07ea      	lsls	r2, r5, #31
 80077ee:	d505      	bpl.n	80077fc <_strtod_l+0x52c>
 80077f0:	9b04      	ldr	r3, [sp, #16]
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 ff0f 	bl	8000618 <__aeabi_dmul>
 80077fa:	2301      	movs	r3, #1
 80077fc:	9a04      	ldr	r2, [sp, #16]
 80077fe:	3208      	adds	r2, #8
 8007800:	f10a 0a01 	add.w	sl, sl, #1
 8007804:	106d      	asrs	r5, r5, #1
 8007806:	9204      	str	r2, [sp, #16]
 8007808:	e7cc      	b.n	80077a4 <_strtod_l+0x4d4>
 800780a:	d0ec      	beq.n	80077e6 <_strtod_l+0x516>
 800780c:	426d      	negs	r5, r5
 800780e:	f015 020f 	ands.w	r2, r5, #15
 8007812:	d00a      	beq.n	800782a <_strtod_l+0x55a>
 8007814:	4b11      	ldr	r3, [pc, #68]	; (800785c <_strtod_l+0x58c>)
 8007816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800781a:	4640      	mov	r0, r8
 800781c:	4649      	mov	r1, r9
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f7f9 f823 	bl	800086c <__aeabi_ddiv>
 8007826:	4680      	mov	r8, r0
 8007828:	4689      	mov	r9, r1
 800782a:	112d      	asrs	r5, r5, #4
 800782c:	d0db      	beq.n	80077e6 <_strtod_l+0x516>
 800782e:	2d1f      	cmp	r5, #31
 8007830:	dd1e      	ble.n	8007870 <_strtod_l+0x5a0>
 8007832:	2500      	movs	r5, #0
 8007834:	46ab      	mov	fp, r5
 8007836:	9509      	str	r5, [sp, #36]	; 0x24
 8007838:	9505      	str	r5, [sp, #20]
 800783a:	2322      	movs	r3, #34	; 0x22
 800783c:	f04f 0800 	mov.w	r8, #0
 8007840:	f04f 0900 	mov.w	r9, #0
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	e78d      	b.n	8007764 <_strtod_l+0x494>
 8007848:	0800a5c5 	.word	0x0800a5c5
 800784c:	0800a5dc 	.word	0x0800a5dc
 8007850:	0800a5bc 	.word	0x0800a5bc
 8007854:	0800a5bf 	.word	0x0800a5bf
 8007858:	0800a972 	.word	0x0800a972
 800785c:	0800a830 	.word	0x0800a830
 8007860:	0800a808 	.word	0x0800a808
 8007864:	7ff00000 	.word	0x7ff00000
 8007868:	7ca00000 	.word	0x7ca00000
 800786c:	7fefffff 	.word	0x7fefffff
 8007870:	f015 0310 	ands.w	r3, r5, #16
 8007874:	bf18      	it	ne
 8007876:	236a      	movne	r3, #106	; 0x6a
 8007878:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007c1c <_strtod_l+0x94c>
 800787c:	9304      	str	r3, [sp, #16]
 800787e:	4640      	mov	r0, r8
 8007880:	4649      	mov	r1, r9
 8007882:	2300      	movs	r3, #0
 8007884:	07ea      	lsls	r2, r5, #31
 8007886:	d504      	bpl.n	8007892 <_strtod_l+0x5c2>
 8007888:	e9da 2300 	ldrd	r2, r3, [sl]
 800788c:	f7f8 fec4 	bl	8000618 <__aeabi_dmul>
 8007890:	2301      	movs	r3, #1
 8007892:	106d      	asrs	r5, r5, #1
 8007894:	f10a 0a08 	add.w	sl, sl, #8
 8007898:	d1f4      	bne.n	8007884 <_strtod_l+0x5b4>
 800789a:	b10b      	cbz	r3, 80078a0 <_strtod_l+0x5d0>
 800789c:	4680      	mov	r8, r0
 800789e:	4689      	mov	r9, r1
 80078a0:	9b04      	ldr	r3, [sp, #16]
 80078a2:	b1bb      	cbz	r3, 80078d4 <_strtod_l+0x604>
 80078a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80078a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	4649      	mov	r1, r9
 80078b0:	dd10      	ble.n	80078d4 <_strtod_l+0x604>
 80078b2:	2b1f      	cmp	r3, #31
 80078b4:	f340 811e 	ble.w	8007af4 <_strtod_l+0x824>
 80078b8:	2b34      	cmp	r3, #52	; 0x34
 80078ba:	bfde      	ittt	le
 80078bc:	f04f 33ff 	movle.w	r3, #4294967295
 80078c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80078c4:	4093      	lslle	r3, r2
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	bfcc      	ite	gt
 80078cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80078d0:	ea03 0901 	andle.w	r9, r3, r1
 80078d4:	2200      	movs	r2, #0
 80078d6:	2300      	movs	r3, #0
 80078d8:	4640      	mov	r0, r8
 80078da:	4649      	mov	r1, r9
 80078dc:	f7f9 f904 	bl	8000ae8 <__aeabi_dcmpeq>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d1a6      	bne.n	8007832 <_strtod_l+0x562>
 80078e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078ea:	4633      	mov	r3, r6
 80078ec:	465a      	mov	r2, fp
 80078ee:	4620      	mov	r0, r4
 80078f0:	f001 f9ac 	bl	8008c4c <__s2b>
 80078f4:	9009      	str	r0, [sp, #36]	; 0x24
 80078f6:	2800      	cmp	r0, #0
 80078f8:	f43f af2a 	beq.w	8007750 <_strtod_l+0x480>
 80078fc:	9a08      	ldr	r2, [sp, #32]
 80078fe:	9b05      	ldr	r3, [sp, #20]
 8007900:	2a00      	cmp	r2, #0
 8007902:	eba3 0307 	sub.w	r3, r3, r7
 8007906:	bfa8      	it	ge
 8007908:	2300      	movge	r3, #0
 800790a:	930c      	str	r3, [sp, #48]	; 0x30
 800790c:	2500      	movs	r5, #0
 800790e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007912:	9312      	str	r3, [sp, #72]	; 0x48
 8007914:	46ab      	mov	fp, r5
 8007916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007918:	4620      	mov	r0, r4
 800791a:	6859      	ldr	r1, [r3, #4]
 800791c:	f001 f8ee 	bl	8008afc <_Balloc>
 8007920:	9005      	str	r0, [sp, #20]
 8007922:	2800      	cmp	r0, #0
 8007924:	f43f af18 	beq.w	8007758 <_strtod_l+0x488>
 8007928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792a:	691a      	ldr	r2, [r3, #16]
 800792c:	3202      	adds	r2, #2
 800792e:	f103 010c 	add.w	r1, r3, #12
 8007932:	0092      	lsls	r2, r2, #2
 8007934:	300c      	adds	r0, #12
 8007936:	f000 fd12 	bl	800835e <memcpy>
 800793a:	ec49 8b10 	vmov	d0, r8, r9
 800793e:	aa18      	add	r2, sp, #96	; 0x60
 8007940:	a917      	add	r1, sp, #92	; 0x5c
 8007942:	4620      	mov	r0, r4
 8007944:	f001 fcb6 	bl	80092b4 <__d2b>
 8007948:	ec49 8b18 	vmov	d8, r8, r9
 800794c:	9016      	str	r0, [sp, #88]	; 0x58
 800794e:	2800      	cmp	r0, #0
 8007950:	f43f af02 	beq.w	8007758 <_strtod_l+0x488>
 8007954:	2101      	movs	r1, #1
 8007956:	4620      	mov	r0, r4
 8007958:	f001 fa10 	bl	8008d7c <__i2b>
 800795c:	4683      	mov	fp, r0
 800795e:	2800      	cmp	r0, #0
 8007960:	f43f aefa 	beq.w	8007758 <_strtod_l+0x488>
 8007964:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007966:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007968:	2e00      	cmp	r6, #0
 800796a:	bfab      	itete	ge
 800796c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800796e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007970:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007972:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007976:	bfac      	ite	ge
 8007978:	eb06 0a03 	addge.w	sl, r6, r3
 800797c:	1b9f      	sublt	r7, r3, r6
 800797e:	9b04      	ldr	r3, [sp, #16]
 8007980:	1af6      	subs	r6, r6, r3
 8007982:	4416      	add	r6, r2
 8007984:	4ba0      	ldr	r3, [pc, #640]	; (8007c08 <_strtod_l+0x938>)
 8007986:	3e01      	subs	r6, #1
 8007988:	429e      	cmp	r6, r3
 800798a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800798e:	f280 80c4 	bge.w	8007b1a <_strtod_l+0x84a>
 8007992:	1b9b      	subs	r3, r3, r6
 8007994:	2b1f      	cmp	r3, #31
 8007996:	eba2 0203 	sub.w	r2, r2, r3
 800799a:	f04f 0101 	mov.w	r1, #1
 800799e:	f300 80b0 	bgt.w	8007b02 <_strtod_l+0x832>
 80079a2:	fa01 f303 	lsl.w	r3, r1, r3
 80079a6:	930e      	str	r3, [sp, #56]	; 0x38
 80079a8:	2300      	movs	r3, #0
 80079aa:	930d      	str	r3, [sp, #52]	; 0x34
 80079ac:	eb0a 0602 	add.w	r6, sl, r2
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	45b2      	cmp	sl, r6
 80079b4:	4417      	add	r7, r2
 80079b6:	441f      	add	r7, r3
 80079b8:	4653      	mov	r3, sl
 80079ba:	bfa8      	it	ge
 80079bc:	4633      	movge	r3, r6
 80079be:	42bb      	cmp	r3, r7
 80079c0:	bfa8      	it	ge
 80079c2:	463b      	movge	r3, r7
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bfc2      	ittt	gt
 80079c8:	1af6      	subgt	r6, r6, r3
 80079ca:	1aff      	subgt	r7, r7, r3
 80079cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80079d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dd17      	ble.n	8007a06 <_strtod_l+0x736>
 80079d6:	4659      	mov	r1, fp
 80079d8:	461a      	mov	r2, r3
 80079da:	4620      	mov	r0, r4
 80079dc:	f001 fa8e 	bl	8008efc <__pow5mult>
 80079e0:	4683      	mov	fp, r0
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f43f aeb8 	beq.w	8007758 <_strtod_l+0x488>
 80079e8:	4601      	mov	r1, r0
 80079ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80079ec:	4620      	mov	r0, r4
 80079ee:	f001 f9db 	bl	8008da8 <__multiply>
 80079f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f43f aeaf 	beq.w	8007758 <_strtod_l+0x488>
 80079fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079fc:	4620      	mov	r0, r4
 80079fe:	f001 f8bd 	bl	8008b7c <_Bfree>
 8007a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a04:	9316      	str	r3, [sp, #88]	; 0x58
 8007a06:	2e00      	cmp	r6, #0
 8007a08:	f300 808c 	bgt.w	8007b24 <_strtod_l+0x854>
 8007a0c:	9b08      	ldr	r3, [sp, #32]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dd08      	ble.n	8007a24 <_strtod_l+0x754>
 8007a12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a14:	9905      	ldr	r1, [sp, #20]
 8007a16:	4620      	mov	r0, r4
 8007a18:	f001 fa70 	bl	8008efc <__pow5mult>
 8007a1c:	9005      	str	r0, [sp, #20]
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f43f ae9a 	beq.w	8007758 <_strtod_l+0x488>
 8007a24:	2f00      	cmp	r7, #0
 8007a26:	dd08      	ble.n	8007a3a <_strtod_l+0x76a>
 8007a28:	9905      	ldr	r1, [sp, #20]
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f001 fabf 	bl	8008fb0 <__lshift>
 8007a32:	9005      	str	r0, [sp, #20]
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f43f ae8f 	beq.w	8007758 <_strtod_l+0x488>
 8007a3a:	f1ba 0f00 	cmp.w	sl, #0
 8007a3e:	dd08      	ble.n	8007a52 <_strtod_l+0x782>
 8007a40:	4659      	mov	r1, fp
 8007a42:	4652      	mov	r2, sl
 8007a44:	4620      	mov	r0, r4
 8007a46:	f001 fab3 	bl	8008fb0 <__lshift>
 8007a4a:	4683      	mov	fp, r0
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f43f ae83 	beq.w	8007758 <_strtod_l+0x488>
 8007a52:	9a05      	ldr	r2, [sp, #20]
 8007a54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007a56:	4620      	mov	r0, r4
 8007a58:	f001 fb32 	bl	80090c0 <__mdiff>
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f43f ae7a 	beq.w	8007758 <_strtod_l+0x488>
 8007a64:	68c3      	ldr	r3, [r0, #12]
 8007a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60c3      	str	r3, [r0, #12]
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	f001 fb0b 	bl	8009088 <__mcmp>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	da60      	bge.n	8007b38 <_strtod_l+0x868>
 8007a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a78:	ea53 0308 	orrs.w	r3, r3, r8
 8007a7c:	f040 8084 	bne.w	8007b88 <_strtod_l+0x8b8>
 8007a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d17f      	bne.n	8007b88 <_strtod_l+0x8b8>
 8007a88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a8c:	0d1b      	lsrs	r3, r3, #20
 8007a8e:	051b      	lsls	r3, r3, #20
 8007a90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a94:	d978      	bls.n	8007b88 <_strtod_l+0x8b8>
 8007a96:	696b      	ldr	r3, [r5, #20]
 8007a98:	b913      	cbnz	r3, 8007aa0 <_strtod_l+0x7d0>
 8007a9a:	692b      	ldr	r3, [r5, #16]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	dd73      	ble.n	8007b88 <_strtod_l+0x8b8>
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f001 fa83 	bl	8008fb0 <__lshift>
 8007aaa:	4659      	mov	r1, fp
 8007aac:	4605      	mov	r5, r0
 8007aae:	f001 faeb 	bl	8009088 <__mcmp>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	dd68      	ble.n	8007b88 <_strtod_l+0x8b8>
 8007ab6:	9904      	ldr	r1, [sp, #16]
 8007ab8:	4a54      	ldr	r2, [pc, #336]	; (8007c0c <_strtod_l+0x93c>)
 8007aba:	464b      	mov	r3, r9
 8007abc:	2900      	cmp	r1, #0
 8007abe:	f000 8084 	beq.w	8007bca <_strtod_l+0x8fa>
 8007ac2:	ea02 0109 	and.w	r1, r2, r9
 8007ac6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007aca:	dc7e      	bgt.n	8007bca <_strtod_l+0x8fa>
 8007acc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ad0:	f77f aeb3 	ble.w	800783a <_strtod_l+0x56a>
 8007ad4:	4b4e      	ldr	r3, [pc, #312]	; (8007c10 <_strtod_l+0x940>)
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4649      	mov	r1, r9
 8007ada:	2200      	movs	r2, #0
 8007adc:	f7f8 fd9c 	bl	8000618 <__aeabi_dmul>
 8007ae0:	4b4a      	ldr	r3, [pc, #296]	; (8007c0c <_strtod_l+0x93c>)
 8007ae2:	400b      	ands	r3, r1
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	4689      	mov	r9, r1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f47f ae3f 	bne.w	800776c <_strtod_l+0x49c>
 8007aee:	2322      	movs	r3, #34	; 0x22
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	e63b      	b.n	800776c <_strtod_l+0x49c>
 8007af4:	f04f 32ff 	mov.w	r2, #4294967295
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	ea03 0808 	and.w	r8, r3, r8
 8007b00:	e6e8      	b.n	80078d4 <_strtod_l+0x604>
 8007b02:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007b06:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007b0a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007b0e:	36e2      	adds	r6, #226	; 0xe2
 8007b10:	fa01 f306 	lsl.w	r3, r1, r6
 8007b14:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007b18:	e748      	b.n	80079ac <_strtod_l+0x6dc>
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007b22:	e743      	b.n	80079ac <_strtod_l+0x6dc>
 8007b24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b26:	4632      	mov	r2, r6
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f001 fa41 	bl	8008fb0 <__lshift>
 8007b2e:	9016      	str	r0, [sp, #88]	; 0x58
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f47f af6b 	bne.w	8007a0c <_strtod_l+0x73c>
 8007b36:	e60f      	b.n	8007758 <_strtod_l+0x488>
 8007b38:	46ca      	mov	sl, r9
 8007b3a:	d171      	bne.n	8007c20 <_strtod_l+0x950>
 8007b3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b42:	b352      	cbz	r2, 8007b9a <_strtod_l+0x8ca>
 8007b44:	4a33      	ldr	r2, [pc, #204]	; (8007c14 <_strtod_l+0x944>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d12a      	bne.n	8007ba0 <_strtod_l+0x8d0>
 8007b4a:	9b04      	ldr	r3, [sp, #16]
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	b1fb      	cbz	r3, 8007b90 <_strtod_l+0x8c0>
 8007b50:	4b2e      	ldr	r3, [pc, #184]	; (8007c0c <_strtod_l+0x93c>)
 8007b52:	ea09 0303 	and.w	r3, r9, r3
 8007b56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5e:	d81a      	bhi.n	8007b96 <_strtod_l+0x8c6>
 8007b60:	0d1b      	lsrs	r3, r3, #20
 8007b62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	4299      	cmp	r1, r3
 8007b6c:	d118      	bne.n	8007ba0 <_strtod_l+0x8d0>
 8007b6e:	4b2a      	ldr	r3, [pc, #168]	; (8007c18 <_strtod_l+0x948>)
 8007b70:	459a      	cmp	sl, r3
 8007b72:	d102      	bne.n	8007b7a <_strtod_l+0x8aa>
 8007b74:	3101      	adds	r1, #1
 8007b76:	f43f adef 	beq.w	8007758 <_strtod_l+0x488>
 8007b7a:	4b24      	ldr	r3, [pc, #144]	; (8007c0c <_strtod_l+0x93c>)
 8007b7c:	ea0a 0303 	and.w	r3, sl, r3
 8007b80:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007b84:	f04f 0800 	mov.w	r8, #0
 8007b88:	9b04      	ldr	r3, [sp, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1a2      	bne.n	8007ad4 <_strtod_l+0x804>
 8007b8e:	e5ed      	b.n	800776c <_strtod_l+0x49c>
 8007b90:	f04f 33ff 	mov.w	r3, #4294967295
 8007b94:	e7e9      	b.n	8007b6a <_strtod_l+0x89a>
 8007b96:	4613      	mov	r3, r2
 8007b98:	e7e7      	b.n	8007b6a <_strtod_l+0x89a>
 8007b9a:	ea53 0308 	orrs.w	r3, r3, r8
 8007b9e:	d08a      	beq.n	8007ab6 <_strtod_l+0x7e6>
 8007ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ba2:	b1e3      	cbz	r3, 8007bde <_strtod_l+0x90e>
 8007ba4:	ea13 0f0a 	tst.w	r3, sl
 8007ba8:	d0ee      	beq.n	8007b88 <_strtod_l+0x8b8>
 8007baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bac:	9a04      	ldr	r2, [sp, #16]
 8007bae:	4640      	mov	r0, r8
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	b1c3      	cbz	r3, 8007be6 <_strtod_l+0x916>
 8007bb4:	f7ff fb6d 	bl	8007292 <sulp>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	ec51 0b18 	vmov	r0, r1, d8
 8007bc0:	f7f8 fb74 	bl	80002ac <__adddf3>
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	4689      	mov	r9, r1
 8007bc8:	e7de      	b.n	8007b88 <_strtod_l+0x8b8>
 8007bca:	4013      	ands	r3, r2
 8007bcc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007bd0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007bd4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007bd8:	f04f 38ff 	mov.w	r8, #4294967295
 8007bdc:	e7d4      	b.n	8007b88 <_strtod_l+0x8b8>
 8007bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007be0:	ea13 0f08 	tst.w	r3, r8
 8007be4:	e7e0      	b.n	8007ba8 <_strtod_l+0x8d8>
 8007be6:	f7ff fb54 	bl	8007292 <sulp>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	ec51 0b18 	vmov	r0, r1, d8
 8007bf2:	f7f8 fb59 	bl	80002a8 <__aeabi_dsub>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	4689      	mov	r9, r1
 8007bfe:	f7f8 ff73 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d0c0      	beq.n	8007b88 <_strtod_l+0x8b8>
 8007c06:	e618      	b.n	800783a <_strtod_l+0x56a>
 8007c08:	fffffc02 	.word	0xfffffc02
 8007c0c:	7ff00000 	.word	0x7ff00000
 8007c10:	39500000 	.word	0x39500000
 8007c14:	000fffff 	.word	0x000fffff
 8007c18:	7fefffff 	.word	0x7fefffff
 8007c1c:	0800a5f0 	.word	0x0800a5f0
 8007c20:	4659      	mov	r1, fp
 8007c22:	4628      	mov	r0, r5
 8007c24:	f001 fba0 	bl	8009368 <__ratio>
 8007c28:	ec57 6b10 	vmov	r6, r7, d0
 8007c2c:	ee10 0a10 	vmov	r0, s0
 8007c30:	2200      	movs	r2, #0
 8007c32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c36:	4639      	mov	r1, r7
 8007c38:	f7f8 ff6a 	bl	8000b10 <__aeabi_dcmple>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d071      	beq.n	8007d24 <_strtod_l+0xa54>
 8007c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d17c      	bne.n	8007d40 <_strtod_l+0xa70>
 8007c46:	f1b8 0f00 	cmp.w	r8, #0
 8007c4a:	d15a      	bne.n	8007d02 <_strtod_l+0xa32>
 8007c4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d15d      	bne.n	8007d10 <_strtod_l+0xa40>
 8007c54:	4b90      	ldr	r3, [pc, #576]	; (8007e98 <_strtod_l+0xbc8>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	4630      	mov	r0, r6
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	f7f8 ff4e 	bl	8000afc <__aeabi_dcmplt>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d15c      	bne.n	8007d1e <_strtod_l+0xa4e>
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	4b8c      	ldr	r3, [pc, #560]	; (8007e9c <_strtod_l+0xbcc>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f7f8 fcd4 	bl	8000618 <__aeabi_dmul>
 8007c70:	4606      	mov	r6, r0
 8007c72:	460f      	mov	r7, r1
 8007c74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007c78:	9606      	str	r6, [sp, #24]
 8007c7a:	9307      	str	r3, [sp, #28]
 8007c7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007c84:	4b86      	ldr	r3, [pc, #536]	; (8007ea0 <_strtod_l+0xbd0>)
 8007c86:	ea0a 0303 	and.w	r3, sl, r3
 8007c8a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c8e:	4b85      	ldr	r3, [pc, #532]	; (8007ea4 <_strtod_l+0xbd4>)
 8007c90:	429a      	cmp	r2, r3
 8007c92:	f040 8090 	bne.w	8007db6 <_strtod_l+0xae6>
 8007c96:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007c9a:	ec49 8b10 	vmov	d0, r8, r9
 8007c9e:	f001 fa99 	bl	80091d4 <__ulp>
 8007ca2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ca6:	ec51 0b10 	vmov	r0, r1, d0
 8007caa:	f7f8 fcb5 	bl	8000618 <__aeabi_dmul>
 8007cae:	4642      	mov	r2, r8
 8007cb0:	464b      	mov	r3, r9
 8007cb2:	f7f8 fafb 	bl	80002ac <__adddf3>
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4979      	ldr	r1, [pc, #484]	; (8007ea0 <_strtod_l+0xbd0>)
 8007cba:	4a7b      	ldr	r2, [pc, #492]	; (8007ea8 <_strtod_l+0xbd8>)
 8007cbc:	4019      	ands	r1, r3
 8007cbe:	4291      	cmp	r1, r2
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	d944      	bls.n	8007d4e <_strtod_l+0xa7e>
 8007cc4:	ee18 2a90 	vmov	r2, s17
 8007cc8:	4b78      	ldr	r3, [pc, #480]	; (8007eac <_strtod_l+0xbdc>)
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d104      	bne.n	8007cd8 <_strtod_l+0xa08>
 8007cce:	ee18 3a10 	vmov	r3, s16
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	f43f ad40 	beq.w	8007758 <_strtod_l+0x488>
 8007cd8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007eac <_strtod_l+0xbdc>
 8007cdc:	f04f 38ff 	mov.w	r8, #4294967295
 8007ce0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 ff4a 	bl	8008b7c <_Bfree>
 8007ce8:	9905      	ldr	r1, [sp, #20]
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 ff46 	bl	8008b7c <_Bfree>
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 ff42 	bl	8008b7c <_Bfree>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 ff3e 	bl	8008b7c <_Bfree>
 8007d00:	e609      	b.n	8007916 <_strtod_l+0x646>
 8007d02:	f1b8 0f01 	cmp.w	r8, #1
 8007d06:	d103      	bne.n	8007d10 <_strtod_l+0xa40>
 8007d08:	f1b9 0f00 	cmp.w	r9, #0
 8007d0c:	f43f ad95 	beq.w	800783a <_strtod_l+0x56a>
 8007d10:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007e68 <_strtod_l+0xb98>
 8007d14:	4f60      	ldr	r7, [pc, #384]	; (8007e98 <_strtod_l+0xbc8>)
 8007d16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d1a:	2600      	movs	r6, #0
 8007d1c:	e7ae      	b.n	8007c7c <_strtod_l+0x9ac>
 8007d1e:	4f5f      	ldr	r7, [pc, #380]	; (8007e9c <_strtod_l+0xbcc>)
 8007d20:	2600      	movs	r6, #0
 8007d22:	e7a7      	b.n	8007c74 <_strtod_l+0x9a4>
 8007d24:	4b5d      	ldr	r3, [pc, #372]	; (8007e9c <_strtod_l+0xbcc>)
 8007d26:	4630      	mov	r0, r6
 8007d28:	4639      	mov	r1, r7
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f7f8 fc74 	bl	8000618 <__aeabi_dmul>
 8007d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d32:	4606      	mov	r6, r0
 8007d34:	460f      	mov	r7, r1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d09c      	beq.n	8007c74 <_strtod_l+0x9a4>
 8007d3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007d3e:	e79d      	b.n	8007c7c <_strtod_l+0x9ac>
 8007d40:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007e70 <_strtod_l+0xba0>
 8007d44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d48:	ec57 6b17 	vmov	r6, r7, d7
 8007d4c:	e796      	b.n	8007c7c <_strtod_l+0x9ac>
 8007d4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007d52:	9b04      	ldr	r3, [sp, #16]
 8007d54:	46ca      	mov	sl, r9
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1c2      	bne.n	8007ce0 <_strtod_l+0xa10>
 8007d5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d60:	0d1b      	lsrs	r3, r3, #20
 8007d62:	051b      	lsls	r3, r3, #20
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d1bb      	bne.n	8007ce0 <_strtod_l+0xa10>
 8007d68:	4630      	mov	r0, r6
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	f7f8 ff4e 	bl	8000c0c <__aeabi_d2lz>
 8007d70:	f7f8 fc24 	bl	80005bc <__aeabi_l2d>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 fa94 	bl	80002a8 <__aeabi_dsub>
 8007d80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d86:	ea43 0308 	orr.w	r3, r3, r8
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	460f      	mov	r7, r1
 8007d90:	d054      	beq.n	8007e3c <_strtod_l+0xb6c>
 8007d92:	a339      	add	r3, pc, #228	; (adr r3, 8007e78 <_strtod_l+0xba8>)
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f7f8 feb0 	bl	8000afc <__aeabi_dcmplt>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	f47f ace5 	bne.w	800776c <_strtod_l+0x49c>
 8007da2:	a337      	add	r3, pc, #220	; (adr r3, 8007e80 <_strtod_l+0xbb0>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 fec4 	bl	8000b38 <__aeabi_dcmpgt>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d095      	beq.n	8007ce0 <_strtod_l+0xa10>
 8007db4:	e4da      	b.n	800776c <_strtod_l+0x49c>
 8007db6:	9b04      	ldr	r3, [sp, #16]
 8007db8:	b333      	cbz	r3, 8007e08 <_strtod_l+0xb38>
 8007dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007dc0:	d822      	bhi.n	8007e08 <_strtod_l+0xb38>
 8007dc2:	a331      	add	r3, pc, #196	; (adr r3, 8007e88 <_strtod_l+0xbb8>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	4630      	mov	r0, r6
 8007dca:	4639      	mov	r1, r7
 8007dcc:	f7f8 fea0 	bl	8000b10 <__aeabi_dcmple>
 8007dd0:	b1a0      	cbz	r0, 8007dfc <_strtod_l+0xb2c>
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f7f8 fee1 	bl	8000b9c <__aeabi_d2uiz>
 8007dda:	2801      	cmp	r0, #1
 8007ddc:	bf38      	it	cc
 8007dde:	2001      	movcc	r0, #1
 8007de0:	f7f8 fba0 	bl	8000524 <__aeabi_ui2d>
 8007de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de6:	4606      	mov	r6, r0
 8007de8:	460f      	mov	r7, r1
 8007dea:	bb23      	cbnz	r3, 8007e36 <_strtod_l+0xb66>
 8007dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007df0:	9010      	str	r0, [sp, #64]	; 0x40
 8007df2:	9311      	str	r3, [sp, #68]	; 0x44
 8007df4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007df8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e0c:	eeb0 0a48 	vmov.f32	s0, s16
 8007e10:	eef0 0a68 	vmov.f32	s1, s17
 8007e14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007e18:	f001 f9dc 	bl	80091d4 <__ulp>
 8007e1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e20:	ec53 2b10 	vmov	r2, r3, d0
 8007e24:	f7f8 fbf8 	bl	8000618 <__aeabi_dmul>
 8007e28:	ec53 2b18 	vmov	r2, r3, d8
 8007e2c:	f7f8 fa3e 	bl	80002ac <__adddf3>
 8007e30:	4680      	mov	r8, r0
 8007e32:	4689      	mov	r9, r1
 8007e34:	e78d      	b.n	8007d52 <_strtod_l+0xa82>
 8007e36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007e3a:	e7db      	b.n	8007df4 <_strtod_l+0xb24>
 8007e3c:	a314      	add	r3, pc, #80	; (adr r3, 8007e90 <_strtod_l+0xbc0>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	f7f8 fe5b 	bl	8000afc <__aeabi_dcmplt>
 8007e46:	e7b3      	b.n	8007db0 <_strtod_l+0xae0>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	f7ff ba7c 	b.w	800734e <_strtod_l+0x7e>
 8007e56:	2a65      	cmp	r2, #101	; 0x65
 8007e58:	f43f ab75 	beq.w	8007546 <_strtod_l+0x276>
 8007e5c:	2a45      	cmp	r2, #69	; 0x45
 8007e5e:	f43f ab72 	beq.w	8007546 <_strtod_l+0x276>
 8007e62:	2301      	movs	r3, #1
 8007e64:	f7ff bbaa 	b.w	80075bc <_strtod_l+0x2ec>
 8007e68:	00000000 	.word	0x00000000
 8007e6c:	bff00000 	.word	0xbff00000
 8007e70:	00000000 	.word	0x00000000
 8007e74:	3ff00000 	.word	0x3ff00000
 8007e78:	94a03595 	.word	0x94a03595
 8007e7c:	3fdfffff 	.word	0x3fdfffff
 8007e80:	35afe535 	.word	0x35afe535
 8007e84:	3fe00000 	.word	0x3fe00000
 8007e88:	ffc00000 	.word	0xffc00000
 8007e8c:	41dfffff 	.word	0x41dfffff
 8007e90:	94a03595 	.word	0x94a03595
 8007e94:	3fcfffff 	.word	0x3fcfffff
 8007e98:	3ff00000 	.word	0x3ff00000
 8007e9c:	3fe00000 	.word	0x3fe00000
 8007ea0:	7ff00000 	.word	0x7ff00000
 8007ea4:	7fe00000 	.word	0x7fe00000
 8007ea8:	7c9fffff 	.word	0x7c9fffff
 8007eac:	7fefffff 	.word	0x7fefffff

08007eb0 <strtod>:
 8007eb0:	460a      	mov	r2, r1
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	4802      	ldr	r0, [pc, #8]	; (8007ec0 <strtod+0x10>)
 8007eb6:	4b03      	ldr	r3, [pc, #12]	; (8007ec4 <strtod+0x14>)
 8007eb8:	6800      	ldr	r0, [r0, #0]
 8007eba:	f7ff ba09 	b.w	80072d0 <_strtod_l>
 8007ebe:	bf00      	nop
 8007ec0:	200001dc 	.word	0x200001dc
 8007ec4:	20000024 	.word	0x20000024

08007ec8 <std>:
 8007ec8:	2300      	movs	r3, #0
 8007eca:	b510      	push	{r4, lr}
 8007ecc:	4604      	mov	r4, r0
 8007ece:	e9c0 3300 	strd	r3, r3, [r0]
 8007ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ed6:	6083      	str	r3, [r0, #8]
 8007ed8:	8181      	strh	r1, [r0, #12]
 8007eda:	6643      	str	r3, [r0, #100]	; 0x64
 8007edc:	81c2      	strh	r2, [r0, #14]
 8007ede:	6183      	str	r3, [r0, #24]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	2208      	movs	r2, #8
 8007ee4:	305c      	adds	r0, #92	; 0x5c
 8007ee6:	f000 f959 	bl	800819c <memset>
 8007eea:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <std+0x58>)
 8007eec:	6263      	str	r3, [r4, #36]	; 0x24
 8007eee:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <std+0x5c>)
 8007ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <std+0x60>)
 8007ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <std+0x64>)
 8007ef8:	6323      	str	r3, [r4, #48]	; 0x30
 8007efa:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <std+0x68>)
 8007efc:	6224      	str	r4, [r4, #32]
 8007efe:	429c      	cmp	r4, r3
 8007f00:	d006      	beq.n	8007f10 <std+0x48>
 8007f02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007f06:	4294      	cmp	r4, r2
 8007f08:	d002      	beq.n	8007f10 <std+0x48>
 8007f0a:	33d0      	adds	r3, #208	; 0xd0
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	d105      	bne.n	8007f1c <std+0x54>
 8007f10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f18:	f000 ba1e 	b.w	8008358 <__retarget_lock_init_recursive>
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	bf00      	nop
 8007f20:	08008071 	.word	0x08008071
 8007f24:	08008093 	.word	0x08008093
 8007f28:	080080cb 	.word	0x080080cb
 8007f2c:	080080ef 	.word	0x080080ef
 8007f30:	200013d4 	.word	0x200013d4

08007f34 <stdio_exit_handler>:
 8007f34:	4a02      	ldr	r2, [pc, #8]	; (8007f40 <stdio_exit_handler+0xc>)
 8007f36:	4903      	ldr	r1, [pc, #12]	; (8007f44 <stdio_exit_handler+0x10>)
 8007f38:	4803      	ldr	r0, [pc, #12]	; (8007f48 <stdio_exit_handler+0x14>)
 8007f3a:	f000 b87b 	b.w	8008034 <_fwalk_sglue>
 8007f3e:	bf00      	nop
 8007f40:	20000018 	.word	0x20000018
 8007f44:	08009de5 	.word	0x08009de5
 8007f48:	20000190 	.word	0x20000190

08007f4c <cleanup_stdio>:
 8007f4c:	6841      	ldr	r1, [r0, #4]
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <cleanup_stdio+0x34>)
 8007f50:	4299      	cmp	r1, r3
 8007f52:	b510      	push	{r4, lr}
 8007f54:	4604      	mov	r4, r0
 8007f56:	d001      	beq.n	8007f5c <cleanup_stdio+0x10>
 8007f58:	f001 ff44 	bl	8009de4 <_fflush_r>
 8007f5c:	68a1      	ldr	r1, [r4, #8]
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <cleanup_stdio+0x38>)
 8007f60:	4299      	cmp	r1, r3
 8007f62:	d002      	beq.n	8007f6a <cleanup_stdio+0x1e>
 8007f64:	4620      	mov	r0, r4
 8007f66:	f001 ff3d 	bl	8009de4 <_fflush_r>
 8007f6a:	68e1      	ldr	r1, [r4, #12]
 8007f6c:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <cleanup_stdio+0x3c>)
 8007f6e:	4299      	cmp	r1, r3
 8007f70:	d004      	beq.n	8007f7c <cleanup_stdio+0x30>
 8007f72:	4620      	mov	r0, r4
 8007f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f78:	f001 bf34 	b.w	8009de4 <_fflush_r>
 8007f7c:	bd10      	pop	{r4, pc}
 8007f7e:	bf00      	nop
 8007f80:	200013d4 	.word	0x200013d4
 8007f84:	2000143c 	.word	0x2000143c
 8007f88:	200014a4 	.word	0x200014a4

08007f8c <global_stdio_init.part.0>:
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <global_stdio_init.part.0+0x30>)
 8007f90:	4c0b      	ldr	r4, [pc, #44]	; (8007fc0 <global_stdio_init.part.0+0x34>)
 8007f92:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <global_stdio_init.part.0+0x38>)
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	4620      	mov	r0, r4
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	f7ff ff94 	bl	8007ec8 <std>
 8007fa0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	2109      	movs	r1, #9
 8007fa8:	f7ff ff8e 	bl	8007ec8 <std>
 8007fac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb6:	2112      	movs	r1, #18
 8007fb8:	f7ff bf86 	b.w	8007ec8 <std>
 8007fbc:	2000150c 	.word	0x2000150c
 8007fc0:	200013d4 	.word	0x200013d4
 8007fc4:	08007f35 	.word	0x08007f35

08007fc8 <__sfp_lock_acquire>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	; (8007fd0 <__sfp_lock_acquire+0x8>)
 8007fca:	f000 b9c6 	b.w	800835a <__retarget_lock_acquire_recursive>
 8007fce:	bf00      	nop
 8007fd0:	20001515 	.word	0x20001515

08007fd4 <__sfp_lock_release>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	; (8007fdc <__sfp_lock_release+0x8>)
 8007fd6:	f000 b9c1 	b.w	800835c <__retarget_lock_release_recursive>
 8007fda:	bf00      	nop
 8007fdc:	20001515 	.word	0x20001515

08007fe0 <__sinit>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	f7ff fff0 	bl	8007fc8 <__sfp_lock_acquire>
 8007fe8:	6a23      	ldr	r3, [r4, #32]
 8007fea:	b11b      	cbz	r3, 8007ff4 <__sinit+0x14>
 8007fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff0:	f7ff bff0 	b.w	8007fd4 <__sfp_lock_release>
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <__sinit+0x28>)
 8007ff6:	6223      	str	r3, [r4, #32]
 8007ff8:	4b04      	ldr	r3, [pc, #16]	; (800800c <__sinit+0x2c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1f5      	bne.n	8007fec <__sinit+0xc>
 8008000:	f7ff ffc4 	bl	8007f8c <global_stdio_init.part.0>
 8008004:	e7f2      	b.n	8007fec <__sinit+0xc>
 8008006:	bf00      	nop
 8008008:	08007f4d 	.word	0x08007f4d
 800800c:	2000150c 	.word	0x2000150c

08008010 <fiprintf>:
 8008010:	b40e      	push	{r1, r2, r3}
 8008012:	b503      	push	{r0, r1, lr}
 8008014:	4601      	mov	r1, r0
 8008016:	ab03      	add	r3, sp, #12
 8008018:	4805      	ldr	r0, [pc, #20]	; (8008030 <fiprintf+0x20>)
 800801a:	f853 2b04 	ldr.w	r2, [r3], #4
 800801e:	6800      	ldr	r0, [r0, #0]
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	f001 fbaf 	bl	8009784 <_vfiprintf_r>
 8008026:	b002      	add	sp, #8
 8008028:	f85d eb04 	ldr.w	lr, [sp], #4
 800802c:	b003      	add	sp, #12
 800802e:	4770      	bx	lr
 8008030:	200001dc 	.word	0x200001dc

08008034 <_fwalk_sglue>:
 8008034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008038:	4607      	mov	r7, r0
 800803a:	4688      	mov	r8, r1
 800803c:	4614      	mov	r4, r2
 800803e:	2600      	movs	r6, #0
 8008040:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008044:	f1b9 0901 	subs.w	r9, r9, #1
 8008048:	d505      	bpl.n	8008056 <_fwalk_sglue+0x22>
 800804a:	6824      	ldr	r4, [r4, #0]
 800804c:	2c00      	cmp	r4, #0
 800804e:	d1f7      	bne.n	8008040 <_fwalk_sglue+0xc>
 8008050:	4630      	mov	r0, r6
 8008052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008056:	89ab      	ldrh	r3, [r5, #12]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d907      	bls.n	800806c <_fwalk_sglue+0x38>
 800805c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008060:	3301      	adds	r3, #1
 8008062:	d003      	beq.n	800806c <_fwalk_sglue+0x38>
 8008064:	4629      	mov	r1, r5
 8008066:	4638      	mov	r0, r7
 8008068:	47c0      	blx	r8
 800806a:	4306      	orrs	r6, r0
 800806c:	3568      	adds	r5, #104	; 0x68
 800806e:	e7e9      	b.n	8008044 <_fwalk_sglue+0x10>

08008070 <__sread>:
 8008070:	b510      	push	{r4, lr}
 8008072:	460c      	mov	r4, r1
 8008074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008078:	f000 f8fc 	bl	8008274 <_read_r>
 800807c:	2800      	cmp	r0, #0
 800807e:	bfab      	itete	ge
 8008080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008082:	89a3      	ldrhlt	r3, [r4, #12]
 8008084:	181b      	addge	r3, r3, r0
 8008086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800808a:	bfac      	ite	ge
 800808c:	6563      	strge	r3, [r4, #84]	; 0x54
 800808e:	81a3      	strhlt	r3, [r4, #12]
 8008090:	bd10      	pop	{r4, pc}

08008092 <__swrite>:
 8008092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008096:	461f      	mov	r7, r3
 8008098:	898b      	ldrh	r3, [r1, #12]
 800809a:	05db      	lsls	r3, r3, #23
 800809c:	4605      	mov	r5, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	4616      	mov	r6, r2
 80080a2:	d505      	bpl.n	80080b0 <__swrite+0x1e>
 80080a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a8:	2302      	movs	r3, #2
 80080aa:	2200      	movs	r2, #0
 80080ac:	f000 f8d0 	bl	8008250 <_lseek_r>
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	4632      	mov	r2, r6
 80080be:	463b      	mov	r3, r7
 80080c0:	4628      	mov	r0, r5
 80080c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080c6:	f000 b90b 	b.w	80082e0 <_write_r>

080080ca <__sseek>:
 80080ca:	b510      	push	{r4, lr}
 80080cc:	460c      	mov	r4, r1
 80080ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d2:	f000 f8bd 	bl	8008250 <_lseek_r>
 80080d6:	1c43      	adds	r3, r0, #1
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	bf15      	itete	ne
 80080dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80080de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080e6:	81a3      	strheq	r3, [r4, #12]
 80080e8:	bf18      	it	ne
 80080ea:	81a3      	strhne	r3, [r4, #12]
 80080ec:	bd10      	pop	{r4, pc}

080080ee <__sclose>:
 80080ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f2:	f000 b89d 	b.w	8008230 <_close_r>

080080f6 <_vsniprintf_r>:
 80080f6:	b530      	push	{r4, r5, lr}
 80080f8:	4614      	mov	r4, r2
 80080fa:	2c00      	cmp	r4, #0
 80080fc:	b09b      	sub	sp, #108	; 0x6c
 80080fe:	4605      	mov	r5, r0
 8008100:	461a      	mov	r2, r3
 8008102:	da05      	bge.n	8008110 <_vsniprintf_r+0x1a>
 8008104:	238b      	movs	r3, #139	; 0x8b
 8008106:	6003      	str	r3, [r0, #0]
 8008108:	f04f 30ff 	mov.w	r0, #4294967295
 800810c:	b01b      	add	sp, #108	; 0x6c
 800810e:	bd30      	pop	{r4, r5, pc}
 8008110:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008114:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008118:	bf14      	ite	ne
 800811a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800811e:	4623      	moveq	r3, r4
 8008120:	9302      	str	r3, [sp, #8]
 8008122:	9305      	str	r3, [sp, #20]
 8008124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008128:	9100      	str	r1, [sp, #0]
 800812a:	9104      	str	r1, [sp, #16]
 800812c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008130:	4669      	mov	r1, sp
 8008132:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008134:	f001 f9fe 	bl	8009534 <_svfiprintf_r>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	bfbc      	itt	lt
 800813c:	238b      	movlt	r3, #139	; 0x8b
 800813e:	602b      	strlt	r3, [r5, #0]
 8008140:	2c00      	cmp	r4, #0
 8008142:	d0e3      	beq.n	800810c <_vsniprintf_r+0x16>
 8008144:	9b00      	ldr	r3, [sp, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	e7df      	b.n	800810c <_vsniprintf_r+0x16>

0800814c <vsniprintf>:
 800814c:	b507      	push	{r0, r1, r2, lr}
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	4613      	mov	r3, r2
 8008152:	460a      	mov	r2, r1
 8008154:	4601      	mov	r1, r0
 8008156:	4803      	ldr	r0, [pc, #12]	; (8008164 <vsniprintf+0x18>)
 8008158:	6800      	ldr	r0, [r0, #0]
 800815a:	f7ff ffcc 	bl	80080f6 <_vsniprintf_r>
 800815e:	b003      	add	sp, #12
 8008160:	f85d fb04 	ldr.w	pc, [sp], #4
 8008164:	200001dc 	.word	0x200001dc

08008168 <memmove>:
 8008168:	4288      	cmp	r0, r1
 800816a:	b510      	push	{r4, lr}
 800816c:	eb01 0402 	add.w	r4, r1, r2
 8008170:	d902      	bls.n	8008178 <memmove+0x10>
 8008172:	4284      	cmp	r4, r0
 8008174:	4623      	mov	r3, r4
 8008176:	d807      	bhi.n	8008188 <memmove+0x20>
 8008178:	1e43      	subs	r3, r0, #1
 800817a:	42a1      	cmp	r1, r4
 800817c:	d008      	beq.n	8008190 <memmove+0x28>
 800817e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008182:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008186:	e7f8      	b.n	800817a <memmove+0x12>
 8008188:	4402      	add	r2, r0
 800818a:	4601      	mov	r1, r0
 800818c:	428a      	cmp	r2, r1
 800818e:	d100      	bne.n	8008192 <memmove+0x2a>
 8008190:	bd10      	pop	{r4, pc}
 8008192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800819a:	e7f7      	b.n	800818c <memmove+0x24>

0800819c <memset>:
 800819c:	4402      	add	r2, r0
 800819e:	4603      	mov	r3, r0
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d100      	bne.n	80081a6 <memset+0xa>
 80081a4:	4770      	bx	lr
 80081a6:	f803 1b01 	strb.w	r1, [r3], #1
 80081aa:	e7f9      	b.n	80081a0 <memset+0x4>

080081ac <strncmp>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	b16a      	cbz	r2, 80081cc <strncmp+0x20>
 80081b0:	3901      	subs	r1, #1
 80081b2:	1884      	adds	r4, r0, r2
 80081b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80081bc:	429a      	cmp	r2, r3
 80081be:	d103      	bne.n	80081c8 <strncmp+0x1c>
 80081c0:	42a0      	cmp	r0, r4
 80081c2:	d001      	beq.n	80081c8 <strncmp+0x1c>
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	d1f5      	bne.n	80081b4 <strncmp+0x8>
 80081c8:	1ad0      	subs	r0, r2, r3
 80081ca:	bd10      	pop	{r4, pc}
 80081cc:	4610      	mov	r0, r2
 80081ce:	e7fc      	b.n	80081ca <strncmp+0x1e>

080081d0 <_raise_r>:
 80081d0:	291f      	cmp	r1, #31
 80081d2:	b538      	push	{r3, r4, r5, lr}
 80081d4:	4604      	mov	r4, r0
 80081d6:	460d      	mov	r5, r1
 80081d8:	d904      	bls.n	80081e4 <_raise_r+0x14>
 80081da:	2316      	movs	r3, #22
 80081dc:	6003      	str	r3, [r0, #0]
 80081de:	f04f 30ff 	mov.w	r0, #4294967295
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80081e6:	b112      	cbz	r2, 80081ee <_raise_r+0x1e>
 80081e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081ec:	b94b      	cbnz	r3, 8008202 <_raise_r+0x32>
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 f864 	bl	80082bc <_getpid_r>
 80081f4:	462a      	mov	r2, r5
 80081f6:	4601      	mov	r1, r0
 80081f8:	4620      	mov	r0, r4
 80081fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081fe:	f000 b84b 	b.w	8008298 <_kill_r>
 8008202:	2b01      	cmp	r3, #1
 8008204:	d00a      	beq.n	800821c <_raise_r+0x4c>
 8008206:	1c59      	adds	r1, r3, #1
 8008208:	d103      	bne.n	8008212 <_raise_r+0x42>
 800820a:	2316      	movs	r3, #22
 800820c:	6003      	str	r3, [r0, #0]
 800820e:	2001      	movs	r0, #1
 8008210:	e7e7      	b.n	80081e2 <_raise_r+0x12>
 8008212:	2400      	movs	r4, #0
 8008214:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008218:	4628      	mov	r0, r5
 800821a:	4798      	blx	r3
 800821c:	2000      	movs	r0, #0
 800821e:	e7e0      	b.n	80081e2 <_raise_r+0x12>

08008220 <raise>:
 8008220:	4b02      	ldr	r3, [pc, #8]	; (800822c <raise+0xc>)
 8008222:	4601      	mov	r1, r0
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	f7ff bfd3 	b.w	80081d0 <_raise_r>
 800822a:	bf00      	nop
 800822c:	200001dc 	.word	0x200001dc

08008230 <_close_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4d06      	ldr	r5, [pc, #24]	; (800824c <_close_r+0x1c>)
 8008234:	2300      	movs	r3, #0
 8008236:	4604      	mov	r4, r0
 8008238:	4608      	mov	r0, r1
 800823a:	602b      	str	r3, [r5, #0]
 800823c:	f7fb ff05 	bl	800404a <_close>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d102      	bne.n	800824a <_close_r+0x1a>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	b103      	cbz	r3, 800824a <_close_r+0x1a>
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	20001510 	.word	0x20001510

08008250 <_lseek_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d07      	ldr	r5, [pc, #28]	; (8008270 <_lseek_r+0x20>)
 8008254:	4604      	mov	r4, r0
 8008256:	4608      	mov	r0, r1
 8008258:	4611      	mov	r1, r2
 800825a:	2200      	movs	r2, #0
 800825c:	602a      	str	r2, [r5, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	f7fb ff1a 	bl	8004098 <_lseek>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_lseek_r+0x1e>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_lseek_r+0x1e>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	20001510 	.word	0x20001510

08008274 <_read_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d07      	ldr	r5, [pc, #28]	; (8008294 <_read_r+0x20>)
 8008278:	4604      	mov	r4, r0
 800827a:	4608      	mov	r0, r1
 800827c:	4611      	mov	r1, r2
 800827e:	2200      	movs	r2, #0
 8008280:	602a      	str	r2, [r5, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	f7fb fea8 	bl	8003fd8 <_read>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_read_r+0x1e>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_read_r+0x1e>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	20001510 	.word	0x20001510

08008298 <_kill_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4d07      	ldr	r5, [pc, #28]	; (80082b8 <_kill_r+0x20>)
 800829c:	2300      	movs	r3, #0
 800829e:	4604      	mov	r4, r0
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	602b      	str	r3, [r5, #0]
 80082a6:	f7fb fe7d 	bl	8003fa4 <_kill>
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	d102      	bne.n	80082b4 <_kill_r+0x1c>
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	b103      	cbz	r3, 80082b4 <_kill_r+0x1c>
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	bd38      	pop	{r3, r4, r5, pc}
 80082b6:	bf00      	nop
 80082b8:	20001510 	.word	0x20001510

080082bc <_getpid_r>:
 80082bc:	f7fb be6a 	b.w	8003f94 <_getpid>

080082c0 <_sbrk_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d06      	ldr	r5, [pc, #24]	; (80082dc <_sbrk_r+0x1c>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	f7fb fef2 	bl	80040b4 <_sbrk>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_sbrk_r+0x1a>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_sbrk_r+0x1a>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20001510 	.word	0x20001510

080082e0 <_write_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	; (8008300 <_write_r+0x20>)
 80082e4:	4604      	mov	r4, r0
 80082e6:	4608      	mov	r0, r1
 80082e8:	4611      	mov	r1, r2
 80082ea:	2200      	movs	r2, #0
 80082ec:	602a      	str	r2, [r5, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f7fb fe8f 	bl	8004012 <_write>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_write_r+0x1e>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_write_r+0x1e>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	20001510 	.word	0x20001510

08008304 <__errno>:
 8008304:	4b01      	ldr	r3, [pc, #4]	; (800830c <__errno+0x8>)
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	200001dc 	.word	0x200001dc

08008310 <__libc_init_array>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	4d0d      	ldr	r5, [pc, #52]	; (8008348 <__libc_init_array+0x38>)
 8008314:	4c0d      	ldr	r4, [pc, #52]	; (800834c <__libc_init_array+0x3c>)
 8008316:	1b64      	subs	r4, r4, r5
 8008318:	10a4      	asrs	r4, r4, #2
 800831a:	2600      	movs	r6, #0
 800831c:	42a6      	cmp	r6, r4
 800831e:	d109      	bne.n	8008334 <__libc_init_array+0x24>
 8008320:	4d0b      	ldr	r5, [pc, #44]	; (8008350 <__libc_init_array+0x40>)
 8008322:	4c0c      	ldr	r4, [pc, #48]	; (8008354 <__libc_init_array+0x44>)
 8008324:	f001 fed4 	bl	800a0d0 <_init>
 8008328:	1b64      	subs	r4, r4, r5
 800832a:	10a4      	asrs	r4, r4, #2
 800832c:	2600      	movs	r6, #0
 800832e:	42a6      	cmp	r6, r4
 8008330:	d105      	bne.n	800833e <__libc_init_array+0x2e>
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	f855 3b04 	ldr.w	r3, [r5], #4
 8008338:	4798      	blx	r3
 800833a:	3601      	adds	r6, #1
 800833c:	e7ee      	b.n	800831c <__libc_init_array+0xc>
 800833e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008342:	4798      	blx	r3
 8008344:	3601      	adds	r6, #1
 8008346:	e7f2      	b.n	800832e <__libc_init_array+0x1e>
 8008348:	0800a97c 	.word	0x0800a97c
 800834c:	0800a97c 	.word	0x0800a97c
 8008350:	0800a97c 	.word	0x0800a97c
 8008354:	0800a984 	.word	0x0800a984

08008358 <__retarget_lock_init_recursive>:
 8008358:	4770      	bx	lr

0800835a <__retarget_lock_acquire_recursive>:
 800835a:	4770      	bx	lr

0800835c <__retarget_lock_release_recursive>:
 800835c:	4770      	bx	lr

0800835e <memcpy>:
 800835e:	440a      	add	r2, r1
 8008360:	4291      	cmp	r1, r2
 8008362:	f100 33ff 	add.w	r3, r0, #4294967295
 8008366:	d100      	bne.n	800836a <memcpy+0xc>
 8008368:	4770      	bx	lr
 800836a:	b510      	push	{r4, lr}
 800836c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008374:	4291      	cmp	r1, r2
 8008376:	d1f9      	bne.n	800836c <memcpy+0xe>
 8008378:	bd10      	pop	{r4, pc}
 800837a:	0000      	movs	r0, r0
 800837c:	0000      	movs	r0, r0
	...

08008380 <nan>:
 8008380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008388 <nan+0x8>
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	00000000 	.word	0x00000000
 800838c:	7ff80000 	.word	0x7ff80000

08008390 <_free_r>:
 8008390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008392:	2900      	cmp	r1, #0
 8008394:	d044      	beq.n	8008420 <_free_r+0x90>
 8008396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800839a:	9001      	str	r0, [sp, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f1a1 0404 	sub.w	r4, r1, #4
 80083a2:	bfb8      	it	lt
 80083a4:	18e4      	addlt	r4, r4, r3
 80083a6:	f7fe ff31 	bl	800720c <__malloc_lock>
 80083aa:	4a1e      	ldr	r2, [pc, #120]	; (8008424 <_free_r+0x94>)
 80083ac:	9801      	ldr	r0, [sp, #4]
 80083ae:	6813      	ldr	r3, [r2, #0]
 80083b0:	b933      	cbnz	r3, 80083c0 <_free_r+0x30>
 80083b2:	6063      	str	r3, [r4, #4]
 80083b4:	6014      	str	r4, [r2, #0]
 80083b6:	b003      	add	sp, #12
 80083b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083bc:	f7fe bf2c 	b.w	8007218 <__malloc_unlock>
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d908      	bls.n	80083d6 <_free_r+0x46>
 80083c4:	6825      	ldr	r5, [r4, #0]
 80083c6:	1961      	adds	r1, r4, r5
 80083c8:	428b      	cmp	r3, r1
 80083ca:	bf01      	itttt	eq
 80083cc:	6819      	ldreq	r1, [r3, #0]
 80083ce:	685b      	ldreq	r3, [r3, #4]
 80083d0:	1949      	addeq	r1, r1, r5
 80083d2:	6021      	streq	r1, [r4, #0]
 80083d4:	e7ed      	b.n	80083b2 <_free_r+0x22>
 80083d6:	461a      	mov	r2, r3
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	b10b      	cbz	r3, 80083e0 <_free_r+0x50>
 80083dc:	42a3      	cmp	r3, r4
 80083de:	d9fa      	bls.n	80083d6 <_free_r+0x46>
 80083e0:	6811      	ldr	r1, [r2, #0]
 80083e2:	1855      	adds	r5, r2, r1
 80083e4:	42a5      	cmp	r5, r4
 80083e6:	d10b      	bne.n	8008400 <_free_r+0x70>
 80083e8:	6824      	ldr	r4, [r4, #0]
 80083ea:	4421      	add	r1, r4
 80083ec:	1854      	adds	r4, r2, r1
 80083ee:	42a3      	cmp	r3, r4
 80083f0:	6011      	str	r1, [r2, #0]
 80083f2:	d1e0      	bne.n	80083b6 <_free_r+0x26>
 80083f4:	681c      	ldr	r4, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	6053      	str	r3, [r2, #4]
 80083fa:	440c      	add	r4, r1
 80083fc:	6014      	str	r4, [r2, #0]
 80083fe:	e7da      	b.n	80083b6 <_free_r+0x26>
 8008400:	d902      	bls.n	8008408 <_free_r+0x78>
 8008402:	230c      	movs	r3, #12
 8008404:	6003      	str	r3, [r0, #0]
 8008406:	e7d6      	b.n	80083b6 <_free_r+0x26>
 8008408:	6825      	ldr	r5, [r4, #0]
 800840a:	1961      	adds	r1, r4, r5
 800840c:	428b      	cmp	r3, r1
 800840e:	bf04      	itt	eq
 8008410:	6819      	ldreq	r1, [r3, #0]
 8008412:	685b      	ldreq	r3, [r3, #4]
 8008414:	6063      	str	r3, [r4, #4]
 8008416:	bf04      	itt	eq
 8008418:	1949      	addeq	r1, r1, r5
 800841a:	6021      	streq	r1, [r4, #0]
 800841c:	6054      	str	r4, [r2, #4]
 800841e:	e7ca      	b.n	80083b6 <_free_r+0x26>
 8008420:	b003      	add	sp, #12
 8008422:	bd30      	pop	{r4, r5, pc}
 8008424:	200013cc 	.word	0x200013cc

08008428 <rshift>:
 8008428:	6903      	ldr	r3, [r0, #16]
 800842a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800842e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008432:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008436:	f100 0414 	add.w	r4, r0, #20
 800843a:	dd45      	ble.n	80084c8 <rshift+0xa0>
 800843c:	f011 011f 	ands.w	r1, r1, #31
 8008440:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008444:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008448:	d10c      	bne.n	8008464 <rshift+0x3c>
 800844a:	f100 0710 	add.w	r7, r0, #16
 800844e:	4629      	mov	r1, r5
 8008450:	42b1      	cmp	r1, r6
 8008452:	d334      	bcc.n	80084be <rshift+0x96>
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	1eea      	subs	r2, r5, #3
 800845a:	4296      	cmp	r6, r2
 800845c:	bf38      	it	cc
 800845e:	2300      	movcc	r3, #0
 8008460:	4423      	add	r3, r4
 8008462:	e015      	b.n	8008490 <rshift+0x68>
 8008464:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008468:	f1c1 0820 	rsb	r8, r1, #32
 800846c:	40cf      	lsrs	r7, r1
 800846e:	f105 0e04 	add.w	lr, r5, #4
 8008472:	46a1      	mov	r9, r4
 8008474:	4576      	cmp	r6, lr
 8008476:	46f4      	mov	ip, lr
 8008478:	d815      	bhi.n	80084a6 <rshift+0x7e>
 800847a:	1a9a      	subs	r2, r3, r2
 800847c:	0092      	lsls	r2, r2, #2
 800847e:	3a04      	subs	r2, #4
 8008480:	3501      	adds	r5, #1
 8008482:	42ae      	cmp	r6, r5
 8008484:	bf38      	it	cc
 8008486:	2200      	movcc	r2, #0
 8008488:	18a3      	adds	r3, r4, r2
 800848a:	50a7      	str	r7, [r4, r2]
 800848c:	b107      	cbz	r7, 8008490 <rshift+0x68>
 800848e:	3304      	adds	r3, #4
 8008490:	1b1a      	subs	r2, r3, r4
 8008492:	42a3      	cmp	r3, r4
 8008494:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008498:	bf08      	it	eq
 800849a:	2300      	moveq	r3, #0
 800849c:	6102      	str	r2, [r0, #16]
 800849e:	bf08      	it	eq
 80084a0:	6143      	streq	r3, [r0, #20]
 80084a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084a6:	f8dc c000 	ldr.w	ip, [ip]
 80084aa:	fa0c fc08 	lsl.w	ip, ip, r8
 80084ae:	ea4c 0707 	orr.w	r7, ip, r7
 80084b2:	f849 7b04 	str.w	r7, [r9], #4
 80084b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084ba:	40cf      	lsrs	r7, r1
 80084bc:	e7da      	b.n	8008474 <rshift+0x4c>
 80084be:	f851 cb04 	ldr.w	ip, [r1], #4
 80084c2:	f847 cf04 	str.w	ip, [r7, #4]!
 80084c6:	e7c3      	b.n	8008450 <rshift+0x28>
 80084c8:	4623      	mov	r3, r4
 80084ca:	e7e1      	b.n	8008490 <rshift+0x68>

080084cc <__hexdig_fun>:
 80084cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084d0:	2b09      	cmp	r3, #9
 80084d2:	d802      	bhi.n	80084da <__hexdig_fun+0xe>
 80084d4:	3820      	subs	r0, #32
 80084d6:	b2c0      	uxtb	r0, r0
 80084d8:	4770      	bx	lr
 80084da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084de:	2b05      	cmp	r3, #5
 80084e0:	d801      	bhi.n	80084e6 <__hexdig_fun+0x1a>
 80084e2:	3847      	subs	r0, #71	; 0x47
 80084e4:	e7f7      	b.n	80084d6 <__hexdig_fun+0xa>
 80084e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80084ea:	2b05      	cmp	r3, #5
 80084ec:	d801      	bhi.n	80084f2 <__hexdig_fun+0x26>
 80084ee:	3827      	subs	r0, #39	; 0x27
 80084f0:	e7f1      	b.n	80084d6 <__hexdig_fun+0xa>
 80084f2:	2000      	movs	r0, #0
 80084f4:	4770      	bx	lr
	...

080084f8 <__gethex>:
 80084f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	4617      	mov	r7, r2
 80084fe:	680a      	ldr	r2, [r1, #0]
 8008500:	b085      	sub	sp, #20
 8008502:	f102 0b02 	add.w	fp, r2, #2
 8008506:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800850a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800850e:	4681      	mov	r9, r0
 8008510:	468a      	mov	sl, r1
 8008512:	9302      	str	r3, [sp, #8]
 8008514:	32fe      	adds	r2, #254	; 0xfe
 8008516:	eb02 030b 	add.w	r3, r2, fp
 800851a:	46d8      	mov	r8, fp
 800851c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008520:	9301      	str	r3, [sp, #4]
 8008522:	2830      	cmp	r0, #48	; 0x30
 8008524:	d0f7      	beq.n	8008516 <__gethex+0x1e>
 8008526:	f7ff ffd1 	bl	80084cc <__hexdig_fun>
 800852a:	4604      	mov	r4, r0
 800852c:	2800      	cmp	r0, #0
 800852e:	d138      	bne.n	80085a2 <__gethex+0xaa>
 8008530:	49a7      	ldr	r1, [pc, #668]	; (80087d0 <__gethex+0x2d8>)
 8008532:	2201      	movs	r2, #1
 8008534:	4640      	mov	r0, r8
 8008536:	f7ff fe39 	bl	80081ac <strncmp>
 800853a:	4606      	mov	r6, r0
 800853c:	2800      	cmp	r0, #0
 800853e:	d169      	bne.n	8008614 <__gethex+0x11c>
 8008540:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008544:	465d      	mov	r5, fp
 8008546:	f7ff ffc1 	bl	80084cc <__hexdig_fun>
 800854a:	2800      	cmp	r0, #0
 800854c:	d064      	beq.n	8008618 <__gethex+0x120>
 800854e:	465a      	mov	r2, fp
 8008550:	7810      	ldrb	r0, [r2, #0]
 8008552:	2830      	cmp	r0, #48	; 0x30
 8008554:	4690      	mov	r8, r2
 8008556:	f102 0201 	add.w	r2, r2, #1
 800855a:	d0f9      	beq.n	8008550 <__gethex+0x58>
 800855c:	f7ff ffb6 	bl	80084cc <__hexdig_fun>
 8008560:	2301      	movs	r3, #1
 8008562:	fab0 f480 	clz	r4, r0
 8008566:	0964      	lsrs	r4, r4, #5
 8008568:	465e      	mov	r6, fp
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	4642      	mov	r2, r8
 800856e:	4615      	mov	r5, r2
 8008570:	3201      	adds	r2, #1
 8008572:	7828      	ldrb	r0, [r5, #0]
 8008574:	f7ff ffaa 	bl	80084cc <__hexdig_fun>
 8008578:	2800      	cmp	r0, #0
 800857a:	d1f8      	bne.n	800856e <__gethex+0x76>
 800857c:	4994      	ldr	r1, [pc, #592]	; (80087d0 <__gethex+0x2d8>)
 800857e:	2201      	movs	r2, #1
 8008580:	4628      	mov	r0, r5
 8008582:	f7ff fe13 	bl	80081ac <strncmp>
 8008586:	b978      	cbnz	r0, 80085a8 <__gethex+0xb0>
 8008588:	b946      	cbnz	r6, 800859c <__gethex+0xa4>
 800858a:	1c6e      	adds	r6, r5, #1
 800858c:	4632      	mov	r2, r6
 800858e:	4615      	mov	r5, r2
 8008590:	3201      	adds	r2, #1
 8008592:	7828      	ldrb	r0, [r5, #0]
 8008594:	f7ff ff9a 	bl	80084cc <__hexdig_fun>
 8008598:	2800      	cmp	r0, #0
 800859a:	d1f8      	bne.n	800858e <__gethex+0x96>
 800859c:	1b73      	subs	r3, r6, r5
 800859e:	009e      	lsls	r6, r3, #2
 80085a0:	e004      	b.n	80085ac <__gethex+0xb4>
 80085a2:	2400      	movs	r4, #0
 80085a4:	4626      	mov	r6, r4
 80085a6:	e7e1      	b.n	800856c <__gethex+0x74>
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	d1f7      	bne.n	800859c <__gethex+0xa4>
 80085ac:	782b      	ldrb	r3, [r5, #0]
 80085ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085b2:	2b50      	cmp	r3, #80	; 0x50
 80085b4:	d13d      	bne.n	8008632 <__gethex+0x13a>
 80085b6:	786b      	ldrb	r3, [r5, #1]
 80085b8:	2b2b      	cmp	r3, #43	; 0x2b
 80085ba:	d02f      	beq.n	800861c <__gethex+0x124>
 80085bc:	2b2d      	cmp	r3, #45	; 0x2d
 80085be:	d031      	beq.n	8008624 <__gethex+0x12c>
 80085c0:	1c69      	adds	r1, r5, #1
 80085c2:	f04f 0b00 	mov.w	fp, #0
 80085c6:	7808      	ldrb	r0, [r1, #0]
 80085c8:	f7ff ff80 	bl	80084cc <__hexdig_fun>
 80085cc:	1e42      	subs	r2, r0, #1
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	2a18      	cmp	r2, #24
 80085d2:	d82e      	bhi.n	8008632 <__gethex+0x13a>
 80085d4:	f1a0 0210 	sub.w	r2, r0, #16
 80085d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80085dc:	f7ff ff76 	bl	80084cc <__hexdig_fun>
 80085e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80085e4:	fa5f fc8c 	uxtb.w	ip, ip
 80085e8:	f1bc 0f18 	cmp.w	ip, #24
 80085ec:	d91d      	bls.n	800862a <__gethex+0x132>
 80085ee:	f1bb 0f00 	cmp.w	fp, #0
 80085f2:	d000      	beq.n	80085f6 <__gethex+0xfe>
 80085f4:	4252      	negs	r2, r2
 80085f6:	4416      	add	r6, r2
 80085f8:	f8ca 1000 	str.w	r1, [sl]
 80085fc:	b1dc      	cbz	r4, 8008636 <__gethex+0x13e>
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	bf14      	ite	ne
 8008604:	f04f 0800 	movne.w	r8, #0
 8008608:	f04f 0806 	moveq.w	r8, #6
 800860c:	4640      	mov	r0, r8
 800860e:	b005      	add	sp, #20
 8008610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008614:	4645      	mov	r5, r8
 8008616:	4626      	mov	r6, r4
 8008618:	2401      	movs	r4, #1
 800861a:	e7c7      	b.n	80085ac <__gethex+0xb4>
 800861c:	f04f 0b00 	mov.w	fp, #0
 8008620:	1ca9      	adds	r1, r5, #2
 8008622:	e7d0      	b.n	80085c6 <__gethex+0xce>
 8008624:	f04f 0b01 	mov.w	fp, #1
 8008628:	e7fa      	b.n	8008620 <__gethex+0x128>
 800862a:	230a      	movs	r3, #10
 800862c:	fb03 0002 	mla	r0, r3, r2, r0
 8008630:	e7d0      	b.n	80085d4 <__gethex+0xdc>
 8008632:	4629      	mov	r1, r5
 8008634:	e7e0      	b.n	80085f8 <__gethex+0x100>
 8008636:	eba5 0308 	sub.w	r3, r5, r8
 800863a:	3b01      	subs	r3, #1
 800863c:	4621      	mov	r1, r4
 800863e:	2b07      	cmp	r3, #7
 8008640:	dc0a      	bgt.n	8008658 <__gethex+0x160>
 8008642:	4648      	mov	r0, r9
 8008644:	f000 fa5a 	bl	8008afc <_Balloc>
 8008648:	4604      	mov	r4, r0
 800864a:	b940      	cbnz	r0, 800865e <__gethex+0x166>
 800864c:	4b61      	ldr	r3, [pc, #388]	; (80087d4 <__gethex+0x2dc>)
 800864e:	4602      	mov	r2, r0
 8008650:	21e4      	movs	r1, #228	; 0xe4
 8008652:	4861      	ldr	r0, [pc, #388]	; (80087d8 <__gethex+0x2e0>)
 8008654:	f001 fc84 	bl	8009f60 <__assert_func>
 8008658:	3101      	adds	r1, #1
 800865a:	105b      	asrs	r3, r3, #1
 800865c:	e7ef      	b.n	800863e <__gethex+0x146>
 800865e:	f100 0a14 	add.w	sl, r0, #20
 8008662:	2300      	movs	r3, #0
 8008664:	495a      	ldr	r1, [pc, #360]	; (80087d0 <__gethex+0x2d8>)
 8008666:	f8cd a004 	str.w	sl, [sp, #4]
 800866a:	469b      	mov	fp, r3
 800866c:	45a8      	cmp	r8, r5
 800866e:	d342      	bcc.n	80086f6 <__gethex+0x1fe>
 8008670:	9801      	ldr	r0, [sp, #4]
 8008672:	f840 bb04 	str.w	fp, [r0], #4
 8008676:	eba0 000a 	sub.w	r0, r0, sl
 800867a:	1080      	asrs	r0, r0, #2
 800867c:	6120      	str	r0, [r4, #16]
 800867e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008682:	4658      	mov	r0, fp
 8008684:	f000 fb2c 	bl	8008ce0 <__hi0bits>
 8008688:	683d      	ldr	r5, [r7, #0]
 800868a:	eba8 0000 	sub.w	r0, r8, r0
 800868e:	42a8      	cmp	r0, r5
 8008690:	dd59      	ble.n	8008746 <__gethex+0x24e>
 8008692:	eba0 0805 	sub.w	r8, r0, r5
 8008696:	4641      	mov	r1, r8
 8008698:	4620      	mov	r0, r4
 800869a:	f000 febb 	bl	8009414 <__any_on>
 800869e:	4683      	mov	fp, r0
 80086a0:	b1b8      	cbz	r0, 80086d2 <__gethex+0x1da>
 80086a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80086a6:	1159      	asrs	r1, r3, #5
 80086a8:	f003 021f 	and.w	r2, r3, #31
 80086ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80086b0:	f04f 0b01 	mov.w	fp, #1
 80086b4:	fa0b f202 	lsl.w	r2, fp, r2
 80086b8:	420a      	tst	r2, r1
 80086ba:	d00a      	beq.n	80086d2 <__gethex+0x1da>
 80086bc:	455b      	cmp	r3, fp
 80086be:	dd06      	ble.n	80086ce <__gethex+0x1d6>
 80086c0:	f1a8 0102 	sub.w	r1, r8, #2
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fea5 	bl	8009414 <__any_on>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d138      	bne.n	8008740 <__gethex+0x248>
 80086ce:	f04f 0b02 	mov.w	fp, #2
 80086d2:	4641      	mov	r1, r8
 80086d4:	4620      	mov	r0, r4
 80086d6:	f7ff fea7 	bl	8008428 <rshift>
 80086da:	4446      	add	r6, r8
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	42b3      	cmp	r3, r6
 80086e0:	da41      	bge.n	8008766 <__gethex+0x26e>
 80086e2:	4621      	mov	r1, r4
 80086e4:	4648      	mov	r0, r9
 80086e6:	f000 fa49 	bl	8008b7c <_Bfree>
 80086ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ec:	2300      	movs	r3, #0
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80086f4:	e78a      	b.n	800860c <__gethex+0x114>
 80086f6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80086fa:	2a2e      	cmp	r2, #46	; 0x2e
 80086fc:	d014      	beq.n	8008728 <__gethex+0x230>
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d106      	bne.n	8008710 <__gethex+0x218>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	f843 bb04 	str.w	fp, [r3], #4
 8008708:	f04f 0b00 	mov.w	fp, #0
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	465b      	mov	r3, fp
 8008710:	7828      	ldrb	r0, [r5, #0]
 8008712:	9303      	str	r3, [sp, #12]
 8008714:	f7ff feda 	bl	80084cc <__hexdig_fun>
 8008718:	9b03      	ldr	r3, [sp, #12]
 800871a:	f000 000f 	and.w	r0, r0, #15
 800871e:	4098      	lsls	r0, r3
 8008720:	ea4b 0b00 	orr.w	fp, fp, r0
 8008724:	3304      	adds	r3, #4
 8008726:	e7a1      	b.n	800866c <__gethex+0x174>
 8008728:	45a8      	cmp	r8, r5
 800872a:	d8e8      	bhi.n	80086fe <__gethex+0x206>
 800872c:	2201      	movs	r2, #1
 800872e:	4628      	mov	r0, r5
 8008730:	9303      	str	r3, [sp, #12]
 8008732:	f7ff fd3b 	bl	80081ac <strncmp>
 8008736:	4926      	ldr	r1, [pc, #152]	; (80087d0 <__gethex+0x2d8>)
 8008738:	9b03      	ldr	r3, [sp, #12]
 800873a:	2800      	cmp	r0, #0
 800873c:	d1df      	bne.n	80086fe <__gethex+0x206>
 800873e:	e795      	b.n	800866c <__gethex+0x174>
 8008740:	f04f 0b03 	mov.w	fp, #3
 8008744:	e7c5      	b.n	80086d2 <__gethex+0x1da>
 8008746:	da0b      	bge.n	8008760 <__gethex+0x268>
 8008748:	eba5 0800 	sub.w	r8, r5, r0
 800874c:	4621      	mov	r1, r4
 800874e:	4642      	mov	r2, r8
 8008750:	4648      	mov	r0, r9
 8008752:	f000 fc2d 	bl	8008fb0 <__lshift>
 8008756:	eba6 0608 	sub.w	r6, r6, r8
 800875a:	4604      	mov	r4, r0
 800875c:	f100 0a14 	add.w	sl, r0, #20
 8008760:	f04f 0b00 	mov.w	fp, #0
 8008764:	e7ba      	b.n	80086dc <__gethex+0x1e4>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	42b3      	cmp	r3, r6
 800876a:	dd73      	ble.n	8008854 <__gethex+0x35c>
 800876c:	1b9e      	subs	r6, r3, r6
 800876e:	42b5      	cmp	r5, r6
 8008770:	dc34      	bgt.n	80087dc <__gethex+0x2e4>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d023      	beq.n	80087c0 <__gethex+0x2c8>
 8008778:	2b03      	cmp	r3, #3
 800877a:	d025      	beq.n	80087c8 <__gethex+0x2d0>
 800877c:	2b01      	cmp	r3, #1
 800877e:	d115      	bne.n	80087ac <__gethex+0x2b4>
 8008780:	42b5      	cmp	r5, r6
 8008782:	d113      	bne.n	80087ac <__gethex+0x2b4>
 8008784:	2d01      	cmp	r5, #1
 8008786:	d10b      	bne.n	80087a0 <__gethex+0x2a8>
 8008788:	9a02      	ldr	r2, [sp, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	2301      	movs	r3, #1
 8008790:	6123      	str	r3, [r4, #16]
 8008792:	f8ca 3000 	str.w	r3, [sl]
 8008796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008798:	f04f 0862 	mov.w	r8, #98	; 0x62
 800879c:	601c      	str	r4, [r3, #0]
 800879e:	e735      	b.n	800860c <__gethex+0x114>
 80087a0:	1e69      	subs	r1, r5, #1
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 fe36 	bl	8009414 <__any_on>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d1ed      	bne.n	8008788 <__gethex+0x290>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4648      	mov	r0, r9
 80087b0:	f000 f9e4 	bl	8008b7c <_Bfree>
 80087b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087b6:	2300      	movs	r3, #0
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	f04f 0850 	mov.w	r8, #80	; 0x50
 80087be:	e725      	b.n	800860c <__gethex+0x114>
 80087c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1f2      	bne.n	80087ac <__gethex+0x2b4>
 80087c6:	e7df      	b.n	8008788 <__gethex+0x290>
 80087c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1dc      	bne.n	8008788 <__gethex+0x290>
 80087ce:	e7ed      	b.n	80087ac <__gethex+0x2b4>
 80087d0:	0800a5ba 	.word	0x0800a5ba
 80087d4:	0800a721 	.word	0x0800a721
 80087d8:	0800a732 	.word	0x0800a732
 80087dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80087e0:	f1bb 0f00 	cmp.w	fp, #0
 80087e4:	d133      	bne.n	800884e <__gethex+0x356>
 80087e6:	f1b8 0f00 	cmp.w	r8, #0
 80087ea:	d004      	beq.n	80087f6 <__gethex+0x2fe>
 80087ec:	4641      	mov	r1, r8
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 fe10 	bl	8009414 <__any_on>
 80087f4:	4683      	mov	fp, r0
 80087f6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80087fa:	2301      	movs	r3, #1
 80087fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008800:	f008 081f 	and.w	r8, r8, #31
 8008804:	fa03 f308 	lsl.w	r3, r3, r8
 8008808:	4213      	tst	r3, r2
 800880a:	4631      	mov	r1, r6
 800880c:	4620      	mov	r0, r4
 800880e:	bf18      	it	ne
 8008810:	f04b 0b02 	orrne.w	fp, fp, #2
 8008814:	1bad      	subs	r5, r5, r6
 8008816:	f7ff fe07 	bl	8008428 <rshift>
 800881a:	687e      	ldr	r6, [r7, #4]
 800881c:	f04f 0802 	mov.w	r8, #2
 8008820:	f1bb 0f00 	cmp.w	fp, #0
 8008824:	d04a      	beq.n	80088bc <__gethex+0x3c4>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d016      	beq.n	800885a <__gethex+0x362>
 800882c:	2b03      	cmp	r3, #3
 800882e:	d018      	beq.n	8008862 <__gethex+0x36a>
 8008830:	2b01      	cmp	r3, #1
 8008832:	d109      	bne.n	8008848 <__gethex+0x350>
 8008834:	f01b 0f02 	tst.w	fp, #2
 8008838:	d006      	beq.n	8008848 <__gethex+0x350>
 800883a:	f8da 3000 	ldr.w	r3, [sl]
 800883e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008842:	f01b 0f01 	tst.w	fp, #1
 8008846:	d10f      	bne.n	8008868 <__gethex+0x370>
 8008848:	f048 0810 	orr.w	r8, r8, #16
 800884c:	e036      	b.n	80088bc <__gethex+0x3c4>
 800884e:	f04f 0b01 	mov.w	fp, #1
 8008852:	e7d0      	b.n	80087f6 <__gethex+0x2fe>
 8008854:	f04f 0801 	mov.w	r8, #1
 8008858:	e7e2      	b.n	8008820 <__gethex+0x328>
 800885a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800885c:	f1c3 0301 	rsb	r3, r3, #1
 8008860:	930f      	str	r3, [sp, #60]	; 0x3c
 8008862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0ef      	beq.n	8008848 <__gethex+0x350>
 8008868:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800886c:	f104 0214 	add.w	r2, r4, #20
 8008870:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800887a:	2300      	movs	r3, #0
 800887c:	4694      	mov	ip, r2
 800887e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008882:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008886:	d01e      	beq.n	80088c6 <__gethex+0x3ce>
 8008888:	3101      	adds	r1, #1
 800888a:	f8cc 1000 	str.w	r1, [ip]
 800888e:	f1b8 0f02 	cmp.w	r8, #2
 8008892:	f104 0214 	add.w	r2, r4, #20
 8008896:	d13d      	bne.n	8008914 <__gethex+0x41c>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	3b01      	subs	r3, #1
 800889c:	42ab      	cmp	r3, r5
 800889e:	d10b      	bne.n	80088b8 <__gethex+0x3c0>
 80088a0:	1169      	asrs	r1, r5, #5
 80088a2:	2301      	movs	r3, #1
 80088a4:	f005 051f 	and.w	r5, r5, #31
 80088a8:	fa03 f505 	lsl.w	r5, r3, r5
 80088ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088b0:	421d      	tst	r5, r3
 80088b2:	bf18      	it	ne
 80088b4:	f04f 0801 	movne.w	r8, #1
 80088b8:	f048 0820 	orr.w	r8, r8, #32
 80088bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088be:	601c      	str	r4, [r3, #0]
 80088c0:	9b02      	ldr	r3, [sp, #8]
 80088c2:	601e      	str	r6, [r3, #0]
 80088c4:	e6a2      	b.n	800860c <__gethex+0x114>
 80088c6:	4290      	cmp	r0, r2
 80088c8:	f842 3c04 	str.w	r3, [r2, #-4]
 80088cc:	d8d6      	bhi.n	800887c <__gethex+0x384>
 80088ce:	68a2      	ldr	r2, [r4, #8]
 80088d0:	4593      	cmp	fp, r2
 80088d2:	db17      	blt.n	8008904 <__gethex+0x40c>
 80088d4:	6861      	ldr	r1, [r4, #4]
 80088d6:	4648      	mov	r0, r9
 80088d8:	3101      	adds	r1, #1
 80088da:	f000 f90f 	bl	8008afc <_Balloc>
 80088de:	4682      	mov	sl, r0
 80088e0:	b918      	cbnz	r0, 80088ea <__gethex+0x3f2>
 80088e2:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <__gethex+0x458>)
 80088e4:	4602      	mov	r2, r0
 80088e6:	2184      	movs	r1, #132	; 0x84
 80088e8:	e6b3      	b.n	8008652 <__gethex+0x15a>
 80088ea:	6922      	ldr	r2, [r4, #16]
 80088ec:	3202      	adds	r2, #2
 80088ee:	f104 010c 	add.w	r1, r4, #12
 80088f2:	0092      	lsls	r2, r2, #2
 80088f4:	300c      	adds	r0, #12
 80088f6:	f7ff fd32 	bl	800835e <memcpy>
 80088fa:	4621      	mov	r1, r4
 80088fc:	4648      	mov	r0, r9
 80088fe:	f000 f93d 	bl	8008b7c <_Bfree>
 8008902:	4654      	mov	r4, sl
 8008904:	6922      	ldr	r2, [r4, #16]
 8008906:	1c51      	adds	r1, r2, #1
 8008908:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800890c:	6121      	str	r1, [r4, #16]
 800890e:	2101      	movs	r1, #1
 8008910:	6151      	str	r1, [r2, #20]
 8008912:	e7bc      	b.n	800888e <__gethex+0x396>
 8008914:	6921      	ldr	r1, [r4, #16]
 8008916:	4559      	cmp	r1, fp
 8008918:	dd0b      	ble.n	8008932 <__gethex+0x43a>
 800891a:	2101      	movs	r1, #1
 800891c:	4620      	mov	r0, r4
 800891e:	f7ff fd83 	bl	8008428 <rshift>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	3601      	adds	r6, #1
 8008926:	42b3      	cmp	r3, r6
 8008928:	f6ff aedb 	blt.w	80086e2 <__gethex+0x1ea>
 800892c:	f04f 0801 	mov.w	r8, #1
 8008930:	e7c2      	b.n	80088b8 <__gethex+0x3c0>
 8008932:	f015 051f 	ands.w	r5, r5, #31
 8008936:	d0f9      	beq.n	800892c <__gethex+0x434>
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	441a      	add	r2, r3
 800893c:	f1c5 0520 	rsb	r5, r5, #32
 8008940:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008944:	f000 f9cc 	bl	8008ce0 <__hi0bits>
 8008948:	42a8      	cmp	r0, r5
 800894a:	dbe6      	blt.n	800891a <__gethex+0x422>
 800894c:	e7ee      	b.n	800892c <__gethex+0x434>
 800894e:	bf00      	nop
 8008950:	0800a721 	.word	0x0800a721

08008954 <L_shift>:
 8008954:	f1c2 0208 	rsb	r2, r2, #8
 8008958:	0092      	lsls	r2, r2, #2
 800895a:	b570      	push	{r4, r5, r6, lr}
 800895c:	f1c2 0620 	rsb	r6, r2, #32
 8008960:	6843      	ldr	r3, [r0, #4]
 8008962:	6804      	ldr	r4, [r0, #0]
 8008964:	fa03 f506 	lsl.w	r5, r3, r6
 8008968:	432c      	orrs	r4, r5
 800896a:	40d3      	lsrs	r3, r2
 800896c:	6004      	str	r4, [r0, #0]
 800896e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008972:	4288      	cmp	r0, r1
 8008974:	d3f4      	bcc.n	8008960 <L_shift+0xc>
 8008976:	bd70      	pop	{r4, r5, r6, pc}

08008978 <__match>:
 8008978:	b530      	push	{r4, r5, lr}
 800897a:	6803      	ldr	r3, [r0, #0]
 800897c:	3301      	adds	r3, #1
 800897e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008982:	b914      	cbnz	r4, 800898a <__match+0x12>
 8008984:	6003      	str	r3, [r0, #0]
 8008986:	2001      	movs	r0, #1
 8008988:	bd30      	pop	{r4, r5, pc}
 800898a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800898e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008992:	2d19      	cmp	r5, #25
 8008994:	bf98      	it	ls
 8008996:	3220      	addls	r2, #32
 8008998:	42a2      	cmp	r2, r4
 800899a:	d0f0      	beq.n	800897e <__match+0x6>
 800899c:	2000      	movs	r0, #0
 800899e:	e7f3      	b.n	8008988 <__match+0x10>

080089a0 <__hexnan>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	680b      	ldr	r3, [r1, #0]
 80089a6:	6801      	ldr	r1, [r0, #0]
 80089a8:	115e      	asrs	r6, r3, #5
 80089aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089ae:	f013 031f 	ands.w	r3, r3, #31
 80089b2:	b087      	sub	sp, #28
 80089b4:	bf18      	it	ne
 80089b6:	3604      	addne	r6, #4
 80089b8:	2500      	movs	r5, #0
 80089ba:	1f37      	subs	r7, r6, #4
 80089bc:	4682      	mov	sl, r0
 80089be:	4690      	mov	r8, r2
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80089c6:	46b9      	mov	r9, r7
 80089c8:	463c      	mov	r4, r7
 80089ca:	9502      	str	r5, [sp, #8]
 80089cc:	46ab      	mov	fp, r5
 80089ce:	784a      	ldrb	r2, [r1, #1]
 80089d0:	1c4b      	adds	r3, r1, #1
 80089d2:	9303      	str	r3, [sp, #12]
 80089d4:	b342      	cbz	r2, 8008a28 <__hexnan+0x88>
 80089d6:	4610      	mov	r0, r2
 80089d8:	9105      	str	r1, [sp, #20]
 80089da:	9204      	str	r2, [sp, #16]
 80089dc:	f7ff fd76 	bl	80084cc <__hexdig_fun>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d14f      	bne.n	8008a84 <__hexnan+0xe4>
 80089e4:	9a04      	ldr	r2, [sp, #16]
 80089e6:	9905      	ldr	r1, [sp, #20]
 80089e8:	2a20      	cmp	r2, #32
 80089ea:	d818      	bhi.n	8008a1e <__hexnan+0x7e>
 80089ec:	9b02      	ldr	r3, [sp, #8]
 80089ee:	459b      	cmp	fp, r3
 80089f0:	dd13      	ble.n	8008a1a <__hexnan+0x7a>
 80089f2:	454c      	cmp	r4, r9
 80089f4:	d206      	bcs.n	8008a04 <__hexnan+0x64>
 80089f6:	2d07      	cmp	r5, #7
 80089f8:	dc04      	bgt.n	8008a04 <__hexnan+0x64>
 80089fa:	462a      	mov	r2, r5
 80089fc:	4649      	mov	r1, r9
 80089fe:	4620      	mov	r0, r4
 8008a00:	f7ff ffa8 	bl	8008954 <L_shift>
 8008a04:	4544      	cmp	r4, r8
 8008a06:	d950      	bls.n	8008aaa <__hexnan+0x10a>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f1a4 0904 	sub.w	r9, r4, #4
 8008a0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a12:	f8cd b008 	str.w	fp, [sp, #8]
 8008a16:	464c      	mov	r4, r9
 8008a18:	461d      	mov	r5, r3
 8008a1a:	9903      	ldr	r1, [sp, #12]
 8008a1c:	e7d7      	b.n	80089ce <__hexnan+0x2e>
 8008a1e:	2a29      	cmp	r2, #41	; 0x29
 8008a20:	d155      	bne.n	8008ace <__hexnan+0x12e>
 8008a22:	3102      	adds	r1, #2
 8008a24:	f8ca 1000 	str.w	r1, [sl]
 8008a28:	f1bb 0f00 	cmp.w	fp, #0
 8008a2c:	d04f      	beq.n	8008ace <__hexnan+0x12e>
 8008a2e:	454c      	cmp	r4, r9
 8008a30:	d206      	bcs.n	8008a40 <__hexnan+0xa0>
 8008a32:	2d07      	cmp	r5, #7
 8008a34:	dc04      	bgt.n	8008a40 <__hexnan+0xa0>
 8008a36:	462a      	mov	r2, r5
 8008a38:	4649      	mov	r1, r9
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f7ff ff8a 	bl	8008954 <L_shift>
 8008a40:	4544      	cmp	r4, r8
 8008a42:	d934      	bls.n	8008aae <__hexnan+0x10e>
 8008a44:	f1a8 0204 	sub.w	r2, r8, #4
 8008a48:	4623      	mov	r3, r4
 8008a4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a52:	429f      	cmp	r7, r3
 8008a54:	d2f9      	bcs.n	8008a4a <__hexnan+0xaa>
 8008a56:	1b3b      	subs	r3, r7, r4
 8008a58:	f023 0303 	bic.w	r3, r3, #3
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	3e03      	subs	r6, #3
 8008a60:	3401      	adds	r4, #1
 8008a62:	42a6      	cmp	r6, r4
 8008a64:	bf38      	it	cc
 8008a66:	2304      	movcc	r3, #4
 8008a68:	4443      	add	r3, r8
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f843 2b04 	str.w	r2, [r3], #4
 8008a70:	429f      	cmp	r7, r3
 8008a72:	d2fb      	bcs.n	8008a6c <__hexnan+0xcc>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	b91b      	cbnz	r3, 8008a80 <__hexnan+0xe0>
 8008a78:	4547      	cmp	r7, r8
 8008a7a:	d126      	bne.n	8008aca <__hexnan+0x12a>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	2005      	movs	r0, #5
 8008a82:	e025      	b.n	8008ad0 <__hexnan+0x130>
 8008a84:	3501      	adds	r5, #1
 8008a86:	2d08      	cmp	r5, #8
 8008a88:	f10b 0b01 	add.w	fp, fp, #1
 8008a8c:	dd06      	ble.n	8008a9c <__hexnan+0xfc>
 8008a8e:	4544      	cmp	r4, r8
 8008a90:	d9c3      	bls.n	8008a1a <__hexnan+0x7a>
 8008a92:	2300      	movs	r3, #0
 8008a94:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a98:	2501      	movs	r5, #1
 8008a9a:	3c04      	subs	r4, #4
 8008a9c:	6822      	ldr	r2, [r4, #0]
 8008a9e:	f000 000f 	and.w	r0, r0, #15
 8008aa2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008aa6:	6020      	str	r0, [r4, #0]
 8008aa8:	e7b7      	b.n	8008a1a <__hexnan+0x7a>
 8008aaa:	2508      	movs	r5, #8
 8008aac:	e7b5      	b.n	8008a1a <__hexnan+0x7a>
 8008aae:	9b01      	ldr	r3, [sp, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d0df      	beq.n	8008a74 <__hexnan+0xd4>
 8008ab4:	f1c3 0320 	rsb	r3, r3, #32
 8008ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8008abc:	40da      	lsrs	r2, r3
 8008abe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008ac8:	e7d4      	b.n	8008a74 <__hexnan+0xd4>
 8008aca:	3f04      	subs	r7, #4
 8008acc:	e7d2      	b.n	8008a74 <__hexnan+0xd4>
 8008ace:	2004      	movs	r0, #4
 8008ad0:	b007      	add	sp, #28
 8008ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ad6 <__ascii_mbtowc>:
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	b901      	cbnz	r1, 8008adc <__ascii_mbtowc+0x6>
 8008ada:	a901      	add	r1, sp, #4
 8008adc:	b142      	cbz	r2, 8008af0 <__ascii_mbtowc+0x1a>
 8008ade:	b14b      	cbz	r3, 8008af4 <__ascii_mbtowc+0x1e>
 8008ae0:	7813      	ldrb	r3, [r2, #0]
 8008ae2:	600b      	str	r3, [r1, #0]
 8008ae4:	7812      	ldrb	r2, [r2, #0]
 8008ae6:	1e10      	subs	r0, r2, #0
 8008ae8:	bf18      	it	ne
 8008aea:	2001      	movne	r0, #1
 8008aec:	b002      	add	sp, #8
 8008aee:	4770      	bx	lr
 8008af0:	4610      	mov	r0, r2
 8008af2:	e7fb      	b.n	8008aec <__ascii_mbtowc+0x16>
 8008af4:	f06f 0001 	mvn.w	r0, #1
 8008af8:	e7f8      	b.n	8008aec <__ascii_mbtowc+0x16>
	...

08008afc <_Balloc>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	69c6      	ldr	r6, [r0, #28]
 8008b00:	4604      	mov	r4, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	b976      	cbnz	r6, 8008b24 <_Balloc+0x28>
 8008b06:	2010      	movs	r0, #16
 8008b08:	f7fe fad0 	bl	80070ac <malloc>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	61e0      	str	r0, [r4, #28]
 8008b10:	b920      	cbnz	r0, 8008b1c <_Balloc+0x20>
 8008b12:	4b18      	ldr	r3, [pc, #96]	; (8008b74 <_Balloc+0x78>)
 8008b14:	4818      	ldr	r0, [pc, #96]	; (8008b78 <_Balloc+0x7c>)
 8008b16:	216b      	movs	r1, #107	; 0x6b
 8008b18:	f001 fa22 	bl	8009f60 <__assert_func>
 8008b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b20:	6006      	str	r6, [r0, #0]
 8008b22:	60c6      	str	r6, [r0, #12]
 8008b24:	69e6      	ldr	r6, [r4, #28]
 8008b26:	68f3      	ldr	r3, [r6, #12]
 8008b28:	b183      	cbz	r3, 8008b4c <_Balloc+0x50>
 8008b2a:	69e3      	ldr	r3, [r4, #28]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b32:	b9b8      	cbnz	r0, 8008b64 <_Balloc+0x68>
 8008b34:	2101      	movs	r1, #1
 8008b36:	fa01 f605 	lsl.w	r6, r1, r5
 8008b3a:	1d72      	adds	r2, r6, #5
 8008b3c:	0092      	lsls	r2, r2, #2
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f001 fa2c 	bl	8009f9c <_calloc_r>
 8008b44:	b160      	cbz	r0, 8008b60 <_Balloc+0x64>
 8008b46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b4a:	e00e      	b.n	8008b6a <_Balloc+0x6e>
 8008b4c:	2221      	movs	r2, #33	; 0x21
 8008b4e:	2104      	movs	r1, #4
 8008b50:	4620      	mov	r0, r4
 8008b52:	f001 fa23 	bl	8009f9c <_calloc_r>
 8008b56:	69e3      	ldr	r3, [r4, #28]
 8008b58:	60f0      	str	r0, [r6, #12]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e4      	bne.n	8008b2a <_Balloc+0x2e>
 8008b60:	2000      	movs	r0, #0
 8008b62:	bd70      	pop	{r4, r5, r6, pc}
 8008b64:	6802      	ldr	r2, [r0, #0]
 8008b66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b70:	e7f7      	b.n	8008b62 <_Balloc+0x66>
 8008b72:	bf00      	nop
 8008b74:	0800a792 	.word	0x0800a792
 8008b78:	0800a7a9 	.word	0x0800a7a9

08008b7c <_Bfree>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	69c6      	ldr	r6, [r0, #28]
 8008b80:	4605      	mov	r5, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	b976      	cbnz	r6, 8008ba4 <_Bfree+0x28>
 8008b86:	2010      	movs	r0, #16
 8008b88:	f7fe fa90 	bl	80070ac <malloc>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	61e8      	str	r0, [r5, #28]
 8008b90:	b920      	cbnz	r0, 8008b9c <_Bfree+0x20>
 8008b92:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <_Bfree+0x3c>)
 8008b94:	4809      	ldr	r0, [pc, #36]	; (8008bbc <_Bfree+0x40>)
 8008b96:	218f      	movs	r1, #143	; 0x8f
 8008b98:	f001 f9e2 	bl	8009f60 <__assert_func>
 8008b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ba0:	6006      	str	r6, [r0, #0]
 8008ba2:	60c6      	str	r6, [r0, #12]
 8008ba4:	b13c      	cbz	r4, 8008bb6 <_Bfree+0x3a>
 8008ba6:	69eb      	ldr	r3, [r5, #28]
 8008ba8:	6862      	ldr	r2, [r4, #4]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bb0:	6021      	str	r1, [r4, #0]
 8008bb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	0800a792 	.word	0x0800a792
 8008bbc:	0800a7a9 	.word	0x0800a7a9

08008bc0 <__multadd>:
 8008bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc4:	690d      	ldr	r5, [r1, #16]
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	460c      	mov	r4, r1
 8008bca:	461e      	mov	r6, r3
 8008bcc:	f101 0c14 	add.w	ip, r1, #20
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	f8dc 3000 	ldr.w	r3, [ip]
 8008bd6:	b299      	uxth	r1, r3
 8008bd8:	fb02 6101 	mla	r1, r2, r1, r6
 8008bdc:	0c1e      	lsrs	r6, r3, #16
 8008bde:	0c0b      	lsrs	r3, r1, #16
 8008be0:	fb02 3306 	mla	r3, r2, r6, r3
 8008be4:	b289      	uxth	r1, r1
 8008be6:	3001      	adds	r0, #1
 8008be8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bec:	4285      	cmp	r5, r0
 8008bee:	f84c 1b04 	str.w	r1, [ip], #4
 8008bf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bf6:	dcec      	bgt.n	8008bd2 <__multadd+0x12>
 8008bf8:	b30e      	cbz	r6, 8008c3e <__multadd+0x7e>
 8008bfa:	68a3      	ldr	r3, [r4, #8]
 8008bfc:	42ab      	cmp	r3, r5
 8008bfe:	dc19      	bgt.n	8008c34 <__multadd+0x74>
 8008c00:	6861      	ldr	r1, [r4, #4]
 8008c02:	4638      	mov	r0, r7
 8008c04:	3101      	adds	r1, #1
 8008c06:	f7ff ff79 	bl	8008afc <_Balloc>
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	b928      	cbnz	r0, 8008c1a <__multadd+0x5a>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b0c      	ldr	r3, [pc, #48]	; (8008c44 <__multadd+0x84>)
 8008c12:	480d      	ldr	r0, [pc, #52]	; (8008c48 <__multadd+0x88>)
 8008c14:	21ba      	movs	r1, #186	; 0xba
 8008c16:	f001 f9a3 	bl	8009f60 <__assert_func>
 8008c1a:	6922      	ldr	r2, [r4, #16]
 8008c1c:	3202      	adds	r2, #2
 8008c1e:	f104 010c 	add.w	r1, r4, #12
 8008c22:	0092      	lsls	r2, r2, #2
 8008c24:	300c      	adds	r0, #12
 8008c26:	f7ff fb9a 	bl	800835e <memcpy>
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f7ff ffa5 	bl	8008b7c <_Bfree>
 8008c32:	4644      	mov	r4, r8
 8008c34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c38:	3501      	adds	r5, #1
 8008c3a:	615e      	str	r6, [r3, #20]
 8008c3c:	6125      	str	r5, [r4, #16]
 8008c3e:	4620      	mov	r0, r4
 8008c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c44:	0800a721 	.word	0x0800a721
 8008c48:	0800a7a9 	.word	0x0800a7a9

08008c4c <__s2b>:
 8008c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c50:	460c      	mov	r4, r1
 8008c52:	4615      	mov	r5, r2
 8008c54:	461f      	mov	r7, r3
 8008c56:	2209      	movs	r2, #9
 8008c58:	3308      	adds	r3, #8
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c60:	2100      	movs	r1, #0
 8008c62:	2201      	movs	r2, #1
 8008c64:	429a      	cmp	r2, r3
 8008c66:	db09      	blt.n	8008c7c <__s2b+0x30>
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f7ff ff47 	bl	8008afc <_Balloc>
 8008c6e:	b940      	cbnz	r0, 8008c82 <__s2b+0x36>
 8008c70:	4602      	mov	r2, r0
 8008c72:	4b19      	ldr	r3, [pc, #100]	; (8008cd8 <__s2b+0x8c>)
 8008c74:	4819      	ldr	r0, [pc, #100]	; (8008cdc <__s2b+0x90>)
 8008c76:	21d3      	movs	r1, #211	; 0xd3
 8008c78:	f001 f972 	bl	8009f60 <__assert_func>
 8008c7c:	0052      	lsls	r2, r2, #1
 8008c7e:	3101      	adds	r1, #1
 8008c80:	e7f0      	b.n	8008c64 <__s2b+0x18>
 8008c82:	9b08      	ldr	r3, [sp, #32]
 8008c84:	6143      	str	r3, [r0, #20]
 8008c86:	2d09      	cmp	r5, #9
 8008c88:	f04f 0301 	mov.w	r3, #1
 8008c8c:	6103      	str	r3, [r0, #16]
 8008c8e:	dd16      	ble.n	8008cbe <__s2b+0x72>
 8008c90:	f104 0909 	add.w	r9, r4, #9
 8008c94:	46c8      	mov	r8, r9
 8008c96:	442c      	add	r4, r5
 8008c98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008c9c:	4601      	mov	r1, r0
 8008c9e:	3b30      	subs	r3, #48	; 0x30
 8008ca0:	220a      	movs	r2, #10
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f7ff ff8c 	bl	8008bc0 <__multadd>
 8008ca8:	45a0      	cmp	r8, r4
 8008caa:	d1f5      	bne.n	8008c98 <__s2b+0x4c>
 8008cac:	f1a5 0408 	sub.w	r4, r5, #8
 8008cb0:	444c      	add	r4, r9
 8008cb2:	1b2d      	subs	r5, r5, r4
 8008cb4:	1963      	adds	r3, r4, r5
 8008cb6:	42bb      	cmp	r3, r7
 8008cb8:	db04      	blt.n	8008cc4 <__s2b+0x78>
 8008cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cbe:	340a      	adds	r4, #10
 8008cc0:	2509      	movs	r5, #9
 8008cc2:	e7f6      	b.n	8008cb2 <__s2b+0x66>
 8008cc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008cc8:	4601      	mov	r1, r0
 8008cca:	3b30      	subs	r3, #48	; 0x30
 8008ccc:	220a      	movs	r2, #10
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f7ff ff76 	bl	8008bc0 <__multadd>
 8008cd4:	e7ee      	b.n	8008cb4 <__s2b+0x68>
 8008cd6:	bf00      	nop
 8008cd8:	0800a721 	.word	0x0800a721
 8008cdc:	0800a7a9 	.word	0x0800a7a9

08008ce0 <__hi0bits>:
 8008ce0:	0c03      	lsrs	r3, r0, #16
 8008ce2:	041b      	lsls	r3, r3, #16
 8008ce4:	b9d3      	cbnz	r3, 8008d1c <__hi0bits+0x3c>
 8008ce6:	0400      	lsls	r0, r0, #16
 8008ce8:	2310      	movs	r3, #16
 8008cea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008cee:	bf04      	itt	eq
 8008cf0:	0200      	lsleq	r0, r0, #8
 8008cf2:	3308      	addeq	r3, #8
 8008cf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008cf8:	bf04      	itt	eq
 8008cfa:	0100      	lsleq	r0, r0, #4
 8008cfc:	3304      	addeq	r3, #4
 8008cfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d02:	bf04      	itt	eq
 8008d04:	0080      	lsleq	r0, r0, #2
 8008d06:	3302      	addeq	r3, #2
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	db05      	blt.n	8008d18 <__hi0bits+0x38>
 8008d0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d10:	f103 0301 	add.w	r3, r3, #1
 8008d14:	bf08      	it	eq
 8008d16:	2320      	moveq	r3, #32
 8008d18:	4618      	mov	r0, r3
 8008d1a:	4770      	bx	lr
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	e7e4      	b.n	8008cea <__hi0bits+0xa>

08008d20 <__lo0bits>:
 8008d20:	6803      	ldr	r3, [r0, #0]
 8008d22:	f013 0207 	ands.w	r2, r3, #7
 8008d26:	d00c      	beq.n	8008d42 <__lo0bits+0x22>
 8008d28:	07d9      	lsls	r1, r3, #31
 8008d2a:	d422      	bmi.n	8008d72 <__lo0bits+0x52>
 8008d2c:	079a      	lsls	r2, r3, #30
 8008d2e:	bf49      	itett	mi
 8008d30:	085b      	lsrmi	r3, r3, #1
 8008d32:	089b      	lsrpl	r3, r3, #2
 8008d34:	6003      	strmi	r3, [r0, #0]
 8008d36:	2201      	movmi	r2, #1
 8008d38:	bf5c      	itt	pl
 8008d3a:	6003      	strpl	r3, [r0, #0]
 8008d3c:	2202      	movpl	r2, #2
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4770      	bx	lr
 8008d42:	b299      	uxth	r1, r3
 8008d44:	b909      	cbnz	r1, 8008d4a <__lo0bits+0x2a>
 8008d46:	0c1b      	lsrs	r3, r3, #16
 8008d48:	2210      	movs	r2, #16
 8008d4a:	b2d9      	uxtb	r1, r3
 8008d4c:	b909      	cbnz	r1, 8008d52 <__lo0bits+0x32>
 8008d4e:	3208      	adds	r2, #8
 8008d50:	0a1b      	lsrs	r3, r3, #8
 8008d52:	0719      	lsls	r1, r3, #28
 8008d54:	bf04      	itt	eq
 8008d56:	091b      	lsreq	r3, r3, #4
 8008d58:	3204      	addeq	r2, #4
 8008d5a:	0799      	lsls	r1, r3, #30
 8008d5c:	bf04      	itt	eq
 8008d5e:	089b      	lsreq	r3, r3, #2
 8008d60:	3202      	addeq	r2, #2
 8008d62:	07d9      	lsls	r1, r3, #31
 8008d64:	d403      	bmi.n	8008d6e <__lo0bits+0x4e>
 8008d66:	085b      	lsrs	r3, r3, #1
 8008d68:	f102 0201 	add.w	r2, r2, #1
 8008d6c:	d003      	beq.n	8008d76 <__lo0bits+0x56>
 8008d6e:	6003      	str	r3, [r0, #0]
 8008d70:	e7e5      	b.n	8008d3e <__lo0bits+0x1e>
 8008d72:	2200      	movs	r2, #0
 8008d74:	e7e3      	b.n	8008d3e <__lo0bits+0x1e>
 8008d76:	2220      	movs	r2, #32
 8008d78:	e7e1      	b.n	8008d3e <__lo0bits+0x1e>
	...

08008d7c <__i2b>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	460c      	mov	r4, r1
 8008d80:	2101      	movs	r1, #1
 8008d82:	f7ff febb 	bl	8008afc <_Balloc>
 8008d86:	4602      	mov	r2, r0
 8008d88:	b928      	cbnz	r0, 8008d96 <__i2b+0x1a>
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <__i2b+0x24>)
 8008d8c:	4805      	ldr	r0, [pc, #20]	; (8008da4 <__i2b+0x28>)
 8008d8e:	f240 1145 	movw	r1, #325	; 0x145
 8008d92:	f001 f8e5 	bl	8009f60 <__assert_func>
 8008d96:	2301      	movs	r3, #1
 8008d98:	6144      	str	r4, [r0, #20]
 8008d9a:	6103      	str	r3, [r0, #16]
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	bf00      	nop
 8008da0:	0800a721 	.word	0x0800a721
 8008da4:	0800a7a9 	.word	0x0800a7a9

08008da8 <__multiply>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	4691      	mov	r9, r2
 8008dae:	690a      	ldr	r2, [r1, #16]
 8008db0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	bfb8      	it	lt
 8008db8:	460b      	movlt	r3, r1
 8008dba:	460c      	mov	r4, r1
 8008dbc:	bfbc      	itt	lt
 8008dbe:	464c      	movlt	r4, r9
 8008dc0:	4699      	movlt	r9, r3
 8008dc2:	6927      	ldr	r7, [r4, #16]
 8008dc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008dc8:	68a3      	ldr	r3, [r4, #8]
 8008dca:	6861      	ldr	r1, [r4, #4]
 8008dcc:	eb07 060a 	add.w	r6, r7, sl
 8008dd0:	42b3      	cmp	r3, r6
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	bfb8      	it	lt
 8008dd6:	3101      	addlt	r1, #1
 8008dd8:	f7ff fe90 	bl	8008afc <_Balloc>
 8008ddc:	b930      	cbnz	r0, 8008dec <__multiply+0x44>
 8008dde:	4602      	mov	r2, r0
 8008de0:	4b44      	ldr	r3, [pc, #272]	; (8008ef4 <__multiply+0x14c>)
 8008de2:	4845      	ldr	r0, [pc, #276]	; (8008ef8 <__multiply+0x150>)
 8008de4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008de8:	f001 f8ba 	bl	8009f60 <__assert_func>
 8008dec:	f100 0514 	add.w	r5, r0, #20
 8008df0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008df4:	462b      	mov	r3, r5
 8008df6:	2200      	movs	r2, #0
 8008df8:	4543      	cmp	r3, r8
 8008dfa:	d321      	bcc.n	8008e40 <__multiply+0x98>
 8008dfc:	f104 0314 	add.w	r3, r4, #20
 8008e00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e04:	f109 0314 	add.w	r3, r9, #20
 8008e08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e0c:	9202      	str	r2, [sp, #8]
 8008e0e:	1b3a      	subs	r2, r7, r4
 8008e10:	3a15      	subs	r2, #21
 8008e12:	f022 0203 	bic.w	r2, r2, #3
 8008e16:	3204      	adds	r2, #4
 8008e18:	f104 0115 	add.w	r1, r4, #21
 8008e1c:	428f      	cmp	r7, r1
 8008e1e:	bf38      	it	cc
 8008e20:	2204      	movcc	r2, #4
 8008e22:	9201      	str	r2, [sp, #4]
 8008e24:	9a02      	ldr	r2, [sp, #8]
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d80c      	bhi.n	8008e46 <__multiply+0x9e>
 8008e2c:	2e00      	cmp	r6, #0
 8008e2e:	dd03      	ble.n	8008e38 <__multiply+0x90>
 8008e30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d05b      	beq.n	8008ef0 <__multiply+0x148>
 8008e38:	6106      	str	r6, [r0, #16]
 8008e3a:	b005      	add	sp, #20
 8008e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e40:	f843 2b04 	str.w	r2, [r3], #4
 8008e44:	e7d8      	b.n	8008df8 <__multiply+0x50>
 8008e46:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e4a:	f1ba 0f00 	cmp.w	sl, #0
 8008e4e:	d024      	beq.n	8008e9a <__multiply+0xf2>
 8008e50:	f104 0e14 	add.w	lr, r4, #20
 8008e54:	46a9      	mov	r9, r5
 8008e56:	f04f 0c00 	mov.w	ip, #0
 8008e5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e5e:	f8d9 1000 	ldr.w	r1, [r9]
 8008e62:	fa1f fb82 	uxth.w	fp, r2
 8008e66:	b289      	uxth	r1, r1
 8008e68:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008e70:	f8d9 2000 	ldr.w	r2, [r9]
 8008e74:	4461      	add	r1, ip
 8008e76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e7a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008e7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e82:	b289      	uxth	r1, r1
 8008e84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e88:	4577      	cmp	r7, lr
 8008e8a:	f849 1b04 	str.w	r1, [r9], #4
 8008e8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e92:	d8e2      	bhi.n	8008e5a <__multiply+0xb2>
 8008e94:	9a01      	ldr	r2, [sp, #4]
 8008e96:	f845 c002 	str.w	ip, [r5, r2]
 8008e9a:	9a03      	ldr	r2, [sp, #12]
 8008e9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	f1b9 0f00 	cmp.w	r9, #0
 8008ea6:	d021      	beq.n	8008eec <__multiply+0x144>
 8008ea8:	6829      	ldr	r1, [r5, #0]
 8008eaa:	f104 0c14 	add.w	ip, r4, #20
 8008eae:	46ae      	mov	lr, r5
 8008eb0:	f04f 0a00 	mov.w	sl, #0
 8008eb4:	f8bc b000 	ldrh.w	fp, [ip]
 8008eb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ebc:	fb09 220b 	mla	r2, r9, fp, r2
 8008ec0:	4452      	add	r2, sl
 8008ec2:	b289      	uxth	r1, r1
 8008ec4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ec8:	f84e 1b04 	str.w	r1, [lr], #4
 8008ecc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ed0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ed4:	f8be 1000 	ldrh.w	r1, [lr]
 8008ed8:	fb09 110a 	mla	r1, r9, sl, r1
 8008edc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008ee0:	4567      	cmp	r7, ip
 8008ee2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ee6:	d8e5      	bhi.n	8008eb4 <__multiply+0x10c>
 8008ee8:	9a01      	ldr	r2, [sp, #4]
 8008eea:	50a9      	str	r1, [r5, r2]
 8008eec:	3504      	adds	r5, #4
 8008eee:	e799      	b.n	8008e24 <__multiply+0x7c>
 8008ef0:	3e01      	subs	r6, #1
 8008ef2:	e79b      	b.n	8008e2c <__multiply+0x84>
 8008ef4:	0800a721 	.word	0x0800a721
 8008ef8:	0800a7a9 	.word	0x0800a7a9

08008efc <__pow5mult>:
 8008efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f00:	4615      	mov	r5, r2
 8008f02:	f012 0203 	ands.w	r2, r2, #3
 8008f06:	4606      	mov	r6, r0
 8008f08:	460f      	mov	r7, r1
 8008f0a:	d007      	beq.n	8008f1c <__pow5mult+0x20>
 8008f0c:	4c25      	ldr	r4, [pc, #148]	; (8008fa4 <__pow5mult+0xa8>)
 8008f0e:	3a01      	subs	r2, #1
 8008f10:	2300      	movs	r3, #0
 8008f12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f16:	f7ff fe53 	bl	8008bc0 <__multadd>
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	10ad      	asrs	r5, r5, #2
 8008f1e:	d03d      	beq.n	8008f9c <__pow5mult+0xa0>
 8008f20:	69f4      	ldr	r4, [r6, #28]
 8008f22:	b97c      	cbnz	r4, 8008f44 <__pow5mult+0x48>
 8008f24:	2010      	movs	r0, #16
 8008f26:	f7fe f8c1 	bl	80070ac <malloc>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	61f0      	str	r0, [r6, #28]
 8008f2e:	b928      	cbnz	r0, 8008f3c <__pow5mult+0x40>
 8008f30:	4b1d      	ldr	r3, [pc, #116]	; (8008fa8 <__pow5mult+0xac>)
 8008f32:	481e      	ldr	r0, [pc, #120]	; (8008fac <__pow5mult+0xb0>)
 8008f34:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008f38:	f001 f812 	bl	8009f60 <__assert_func>
 8008f3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f40:	6004      	str	r4, [r0, #0]
 8008f42:	60c4      	str	r4, [r0, #12]
 8008f44:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008f48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f4c:	b94c      	cbnz	r4, 8008f62 <__pow5mult+0x66>
 8008f4e:	f240 2171 	movw	r1, #625	; 0x271
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff ff12 	bl	8008d7c <__i2b>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f5e:	4604      	mov	r4, r0
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	f04f 0900 	mov.w	r9, #0
 8008f66:	07eb      	lsls	r3, r5, #31
 8008f68:	d50a      	bpl.n	8008f80 <__pow5mult+0x84>
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	4622      	mov	r2, r4
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7ff ff1a 	bl	8008da8 <__multiply>
 8008f74:	4639      	mov	r1, r7
 8008f76:	4680      	mov	r8, r0
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7ff fdff 	bl	8008b7c <_Bfree>
 8008f7e:	4647      	mov	r7, r8
 8008f80:	106d      	asrs	r5, r5, #1
 8008f82:	d00b      	beq.n	8008f9c <__pow5mult+0xa0>
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	b938      	cbnz	r0, 8008f98 <__pow5mult+0x9c>
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f7ff ff0b 	bl	8008da8 <__multiply>
 8008f92:	6020      	str	r0, [r4, #0]
 8008f94:	f8c0 9000 	str.w	r9, [r0]
 8008f98:	4604      	mov	r4, r0
 8008f9a:	e7e4      	b.n	8008f66 <__pow5mult+0x6a>
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa2:	bf00      	nop
 8008fa4:	0800a8f8 	.word	0x0800a8f8
 8008fa8:	0800a792 	.word	0x0800a792
 8008fac:	0800a7a9 	.word	0x0800a7a9

08008fb0 <__lshift>:
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	6849      	ldr	r1, [r1, #4]
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	4691      	mov	r9, r2
 8008fc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fc8:	f108 0601 	add.w	r6, r8, #1
 8008fcc:	42b3      	cmp	r3, r6
 8008fce:	db0b      	blt.n	8008fe8 <__lshift+0x38>
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	f7ff fd93 	bl	8008afc <_Balloc>
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	b948      	cbnz	r0, 8008fee <__lshift+0x3e>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	4b28      	ldr	r3, [pc, #160]	; (8009080 <__lshift+0xd0>)
 8008fde:	4829      	ldr	r0, [pc, #164]	; (8009084 <__lshift+0xd4>)
 8008fe0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008fe4:	f000 ffbc 	bl	8009f60 <__assert_func>
 8008fe8:	3101      	adds	r1, #1
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	e7ee      	b.n	8008fcc <__lshift+0x1c>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f100 0114 	add.w	r1, r0, #20
 8008ff4:	f100 0210 	add.w	r2, r0, #16
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	4553      	cmp	r3, sl
 8008ffc:	db33      	blt.n	8009066 <__lshift+0xb6>
 8008ffe:	6920      	ldr	r0, [r4, #16]
 8009000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009004:	f104 0314 	add.w	r3, r4, #20
 8009008:	f019 091f 	ands.w	r9, r9, #31
 800900c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009010:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009014:	d02b      	beq.n	800906e <__lshift+0xbe>
 8009016:	f1c9 0e20 	rsb	lr, r9, #32
 800901a:	468a      	mov	sl, r1
 800901c:	2200      	movs	r2, #0
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	fa00 f009 	lsl.w	r0, r0, r9
 8009024:	4310      	orrs	r0, r2
 8009026:	f84a 0b04 	str.w	r0, [sl], #4
 800902a:	f853 2b04 	ldr.w	r2, [r3], #4
 800902e:	459c      	cmp	ip, r3
 8009030:	fa22 f20e 	lsr.w	r2, r2, lr
 8009034:	d8f3      	bhi.n	800901e <__lshift+0x6e>
 8009036:	ebac 0304 	sub.w	r3, ip, r4
 800903a:	3b15      	subs	r3, #21
 800903c:	f023 0303 	bic.w	r3, r3, #3
 8009040:	3304      	adds	r3, #4
 8009042:	f104 0015 	add.w	r0, r4, #21
 8009046:	4584      	cmp	ip, r0
 8009048:	bf38      	it	cc
 800904a:	2304      	movcc	r3, #4
 800904c:	50ca      	str	r2, [r1, r3]
 800904e:	b10a      	cbz	r2, 8009054 <__lshift+0xa4>
 8009050:	f108 0602 	add.w	r6, r8, #2
 8009054:	3e01      	subs	r6, #1
 8009056:	4638      	mov	r0, r7
 8009058:	612e      	str	r6, [r5, #16]
 800905a:	4621      	mov	r1, r4
 800905c:	f7ff fd8e 	bl	8008b7c <_Bfree>
 8009060:	4628      	mov	r0, r5
 8009062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009066:	f842 0f04 	str.w	r0, [r2, #4]!
 800906a:	3301      	adds	r3, #1
 800906c:	e7c5      	b.n	8008ffa <__lshift+0x4a>
 800906e:	3904      	subs	r1, #4
 8009070:	f853 2b04 	ldr.w	r2, [r3], #4
 8009074:	f841 2f04 	str.w	r2, [r1, #4]!
 8009078:	459c      	cmp	ip, r3
 800907a:	d8f9      	bhi.n	8009070 <__lshift+0xc0>
 800907c:	e7ea      	b.n	8009054 <__lshift+0xa4>
 800907e:	bf00      	nop
 8009080:	0800a721 	.word	0x0800a721
 8009084:	0800a7a9 	.word	0x0800a7a9

08009088 <__mcmp>:
 8009088:	b530      	push	{r4, r5, lr}
 800908a:	6902      	ldr	r2, [r0, #16]
 800908c:	690c      	ldr	r4, [r1, #16]
 800908e:	1b12      	subs	r2, r2, r4
 8009090:	d10e      	bne.n	80090b0 <__mcmp+0x28>
 8009092:	f100 0314 	add.w	r3, r0, #20
 8009096:	3114      	adds	r1, #20
 8009098:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800909c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80090a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80090a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80090a8:	42a5      	cmp	r5, r4
 80090aa:	d003      	beq.n	80090b4 <__mcmp+0x2c>
 80090ac:	d305      	bcc.n	80090ba <__mcmp+0x32>
 80090ae:	2201      	movs	r2, #1
 80090b0:	4610      	mov	r0, r2
 80090b2:	bd30      	pop	{r4, r5, pc}
 80090b4:	4283      	cmp	r3, r0
 80090b6:	d3f3      	bcc.n	80090a0 <__mcmp+0x18>
 80090b8:	e7fa      	b.n	80090b0 <__mcmp+0x28>
 80090ba:	f04f 32ff 	mov.w	r2, #4294967295
 80090be:	e7f7      	b.n	80090b0 <__mcmp+0x28>

080090c0 <__mdiff>:
 80090c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	460c      	mov	r4, r1
 80090c6:	4606      	mov	r6, r0
 80090c8:	4611      	mov	r1, r2
 80090ca:	4620      	mov	r0, r4
 80090cc:	4690      	mov	r8, r2
 80090ce:	f7ff ffdb 	bl	8009088 <__mcmp>
 80090d2:	1e05      	subs	r5, r0, #0
 80090d4:	d110      	bne.n	80090f8 <__mdiff+0x38>
 80090d6:	4629      	mov	r1, r5
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff fd0f 	bl	8008afc <_Balloc>
 80090de:	b930      	cbnz	r0, 80090ee <__mdiff+0x2e>
 80090e0:	4b3a      	ldr	r3, [pc, #232]	; (80091cc <__mdiff+0x10c>)
 80090e2:	4602      	mov	r2, r0
 80090e4:	f240 2137 	movw	r1, #567	; 0x237
 80090e8:	4839      	ldr	r0, [pc, #228]	; (80091d0 <__mdiff+0x110>)
 80090ea:	f000 ff39 	bl	8009f60 <__assert_func>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f8:	bfa4      	itt	ge
 80090fa:	4643      	movge	r3, r8
 80090fc:	46a0      	movge	r8, r4
 80090fe:	4630      	mov	r0, r6
 8009100:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009104:	bfa6      	itte	ge
 8009106:	461c      	movge	r4, r3
 8009108:	2500      	movge	r5, #0
 800910a:	2501      	movlt	r5, #1
 800910c:	f7ff fcf6 	bl	8008afc <_Balloc>
 8009110:	b920      	cbnz	r0, 800911c <__mdiff+0x5c>
 8009112:	4b2e      	ldr	r3, [pc, #184]	; (80091cc <__mdiff+0x10c>)
 8009114:	4602      	mov	r2, r0
 8009116:	f240 2145 	movw	r1, #581	; 0x245
 800911a:	e7e5      	b.n	80090e8 <__mdiff+0x28>
 800911c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009120:	6926      	ldr	r6, [r4, #16]
 8009122:	60c5      	str	r5, [r0, #12]
 8009124:	f104 0914 	add.w	r9, r4, #20
 8009128:	f108 0514 	add.w	r5, r8, #20
 800912c:	f100 0e14 	add.w	lr, r0, #20
 8009130:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009134:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009138:	f108 0210 	add.w	r2, r8, #16
 800913c:	46f2      	mov	sl, lr
 800913e:	2100      	movs	r1, #0
 8009140:	f859 3b04 	ldr.w	r3, [r9], #4
 8009144:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009148:	fa11 f88b 	uxtah	r8, r1, fp
 800914c:	b299      	uxth	r1, r3
 800914e:	0c1b      	lsrs	r3, r3, #16
 8009150:	eba8 0801 	sub.w	r8, r8, r1
 8009154:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009158:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800915c:	fa1f f888 	uxth.w	r8, r8
 8009160:	1419      	asrs	r1, r3, #16
 8009162:	454e      	cmp	r6, r9
 8009164:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009168:	f84a 3b04 	str.w	r3, [sl], #4
 800916c:	d8e8      	bhi.n	8009140 <__mdiff+0x80>
 800916e:	1b33      	subs	r3, r6, r4
 8009170:	3b15      	subs	r3, #21
 8009172:	f023 0303 	bic.w	r3, r3, #3
 8009176:	3304      	adds	r3, #4
 8009178:	3415      	adds	r4, #21
 800917a:	42a6      	cmp	r6, r4
 800917c:	bf38      	it	cc
 800917e:	2304      	movcc	r3, #4
 8009180:	441d      	add	r5, r3
 8009182:	4473      	add	r3, lr
 8009184:	469e      	mov	lr, r3
 8009186:	462e      	mov	r6, r5
 8009188:	4566      	cmp	r6, ip
 800918a:	d30e      	bcc.n	80091aa <__mdiff+0xea>
 800918c:	f10c 0203 	add.w	r2, ip, #3
 8009190:	1b52      	subs	r2, r2, r5
 8009192:	f022 0203 	bic.w	r2, r2, #3
 8009196:	3d03      	subs	r5, #3
 8009198:	45ac      	cmp	ip, r5
 800919a:	bf38      	it	cc
 800919c:	2200      	movcc	r2, #0
 800919e:	4413      	add	r3, r2
 80091a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80091a4:	b17a      	cbz	r2, 80091c6 <__mdiff+0x106>
 80091a6:	6107      	str	r7, [r0, #16]
 80091a8:	e7a4      	b.n	80090f4 <__mdiff+0x34>
 80091aa:	f856 8b04 	ldr.w	r8, [r6], #4
 80091ae:	fa11 f288 	uxtah	r2, r1, r8
 80091b2:	1414      	asrs	r4, r2, #16
 80091b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80091b8:	b292      	uxth	r2, r2
 80091ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80091be:	f84e 2b04 	str.w	r2, [lr], #4
 80091c2:	1421      	asrs	r1, r4, #16
 80091c4:	e7e0      	b.n	8009188 <__mdiff+0xc8>
 80091c6:	3f01      	subs	r7, #1
 80091c8:	e7ea      	b.n	80091a0 <__mdiff+0xe0>
 80091ca:	bf00      	nop
 80091cc:	0800a721 	.word	0x0800a721
 80091d0:	0800a7a9 	.word	0x0800a7a9

080091d4 <__ulp>:
 80091d4:	b082      	sub	sp, #8
 80091d6:	ed8d 0b00 	vstr	d0, [sp]
 80091da:	9a01      	ldr	r2, [sp, #4]
 80091dc:	4b0f      	ldr	r3, [pc, #60]	; (800921c <__ulp+0x48>)
 80091de:	4013      	ands	r3, r2
 80091e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dc08      	bgt.n	80091fa <__ulp+0x26>
 80091e8:	425b      	negs	r3, r3
 80091ea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80091ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80091f2:	da04      	bge.n	80091fe <__ulp+0x2a>
 80091f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091f8:	4113      	asrs	r3, r2
 80091fa:	2200      	movs	r2, #0
 80091fc:	e008      	b.n	8009210 <__ulp+0x3c>
 80091fe:	f1a2 0314 	sub.w	r3, r2, #20
 8009202:	2b1e      	cmp	r3, #30
 8009204:	bfda      	itte	le
 8009206:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800920a:	40da      	lsrle	r2, r3
 800920c:	2201      	movgt	r2, #1
 800920e:	2300      	movs	r3, #0
 8009210:	4619      	mov	r1, r3
 8009212:	4610      	mov	r0, r2
 8009214:	ec41 0b10 	vmov	d0, r0, r1
 8009218:	b002      	add	sp, #8
 800921a:	4770      	bx	lr
 800921c:	7ff00000 	.word	0x7ff00000

08009220 <__b2d>:
 8009220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009224:	6906      	ldr	r6, [r0, #16]
 8009226:	f100 0814 	add.w	r8, r0, #20
 800922a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800922e:	1f37      	subs	r7, r6, #4
 8009230:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009234:	4610      	mov	r0, r2
 8009236:	f7ff fd53 	bl	8008ce0 <__hi0bits>
 800923a:	f1c0 0320 	rsb	r3, r0, #32
 800923e:	280a      	cmp	r0, #10
 8009240:	600b      	str	r3, [r1, #0]
 8009242:	491b      	ldr	r1, [pc, #108]	; (80092b0 <__b2d+0x90>)
 8009244:	dc15      	bgt.n	8009272 <__b2d+0x52>
 8009246:	f1c0 0c0b 	rsb	ip, r0, #11
 800924a:	fa22 f30c 	lsr.w	r3, r2, ip
 800924e:	45b8      	cmp	r8, r7
 8009250:	ea43 0501 	orr.w	r5, r3, r1
 8009254:	bf34      	ite	cc
 8009256:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800925a:	2300      	movcs	r3, #0
 800925c:	3015      	adds	r0, #21
 800925e:	fa02 f000 	lsl.w	r0, r2, r0
 8009262:	fa23 f30c 	lsr.w	r3, r3, ip
 8009266:	4303      	orrs	r3, r0
 8009268:	461c      	mov	r4, r3
 800926a:	ec45 4b10 	vmov	d0, r4, r5
 800926e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009272:	45b8      	cmp	r8, r7
 8009274:	bf3a      	itte	cc
 8009276:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800927a:	f1a6 0708 	subcc.w	r7, r6, #8
 800927e:	2300      	movcs	r3, #0
 8009280:	380b      	subs	r0, #11
 8009282:	d012      	beq.n	80092aa <__b2d+0x8a>
 8009284:	f1c0 0120 	rsb	r1, r0, #32
 8009288:	fa23 f401 	lsr.w	r4, r3, r1
 800928c:	4082      	lsls	r2, r0
 800928e:	4322      	orrs	r2, r4
 8009290:	4547      	cmp	r7, r8
 8009292:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009296:	bf8c      	ite	hi
 8009298:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800929c:	2200      	movls	r2, #0
 800929e:	4083      	lsls	r3, r0
 80092a0:	40ca      	lsrs	r2, r1
 80092a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80092a6:	4313      	orrs	r3, r2
 80092a8:	e7de      	b.n	8009268 <__b2d+0x48>
 80092aa:	ea42 0501 	orr.w	r5, r2, r1
 80092ae:	e7db      	b.n	8009268 <__b2d+0x48>
 80092b0:	3ff00000 	.word	0x3ff00000

080092b4 <__d2b>:
 80092b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092b8:	460f      	mov	r7, r1
 80092ba:	2101      	movs	r1, #1
 80092bc:	ec59 8b10 	vmov	r8, r9, d0
 80092c0:	4616      	mov	r6, r2
 80092c2:	f7ff fc1b 	bl	8008afc <_Balloc>
 80092c6:	4604      	mov	r4, r0
 80092c8:	b930      	cbnz	r0, 80092d8 <__d2b+0x24>
 80092ca:	4602      	mov	r2, r0
 80092cc:	4b24      	ldr	r3, [pc, #144]	; (8009360 <__d2b+0xac>)
 80092ce:	4825      	ldr	r0, [pc, #148]	; (8009364 <__d2b+0xb0>)
 80092d0:	f240 310f 	movw	r1, #783	; 0x30f
 80092d4:	f000 fe44 	bl	8009f60 <__assert_func>
 80092d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092e0:	bb2d      	cbnz	r5, 800932e <__d2b+0x7a>
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	f1b8 0300 	subs.w	r3, r8, #0
 80092e8:	d026      	beq.n	8009338 <__d2b+0x84>
 80092ea:	4668      	mov	r0, sp
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	f7ff fd17 	bl	8008d20 <__lo0bits>
 80092f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092f6:	b1e8      	cbz	r0, 8009334 <__d2b+0x80>
 80092f8:	f1c0 0320 	rsb	r3, r0, #32
 80092fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009300:	430b      	orrs	r3, r1
 8009302:	40c2      	lsrs	r2, r0
 8009304:	6163      	str	r3, [r4, #20]
 8009306:	9201      	str	r2, [sp, #4]
 8009308:	9b01      	ldr	r3, [sp, #4]
 800930a:	61a3      	str	r3, [r4, #24]
 800930c:	2b00      	cmp	r3, #0
 800930e:	bf14      	ite	ne
 8009310:	2202      	movne	r2, #2
 8009312:	2201      	moveq	r2, #1
 8009314:	6122      	str	r2, [r4, #16]
 8009316:	b1bd      	cbz	r5, 8009348 <__d2b+0x94>
 8009318:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800931c:	4405      	add	r5, r0
 800931e:	603d      	str	r5, [r7, #0]
 8009320:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009324:	6030      	str	r0, [r6, #0]
 8009326:	4620      	mov	r0, r4
 8009328:	b003      	add	sp, #12
 800932a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800932e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009332:	e7d6      	b.n	80092e2 <__d2b+0x2e>
 8009334:	6161      	str	r1, [r4, #20]
 8009336:	e7e7      	b.n	8009308 <__d2b+0x54>
 8009338:	a801      	add	r0, sp, #4
 800933a:	f7ff fcf1 	bl	8008d20 <__lo0bits>
 800933e:	9b01      	ldr	r3, [sp, #4]
 8009340:	6163      	str	r3, [r4, #20]
 8009342:	3020      	adds	r0, #32
 8009344:	2201      	movs	r2, #1
 8009346:	e7e5      	b.n	8009314 <__d2b+0x60>
 8009348:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800934c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009350:	6038      	str	r0, [r7, #0]
 8009352:	6918      	ldr	r0, [r3, #16]
 8009354:	f7ff fcc4 	bl	8008ce0 <__hi0bits>
 8009358:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800935c:	e7e2      	b.n	8009324 <__d2b+0x70>
 800935e:	bf00      	nop
 8009360:	0800a721 	.word	0x0800a721
 8009364:	0800a7a9 	.word	0x0800a7a9

08009368 <__ratio>:
 8009368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	4688      	mov	r8, r1
 800936e:	4669      	mov	r1, sp
 8009370:	4681      	mov	r9, r0
 8009372:	f7ff ff55 	bl	8009220 <__b2d>
 8009376:	a901      	add	r1, sp, #4
 8009378:	4640      	mov	r0, r8
 800937a:	ec55 4b10 	vmov	r4, r5, d0
 800937e:	f7ff ff4f 	bl	8009220 <__b2d>
 8009382:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009386:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800938a:	eba3 0c02 	sub.w	ip, r3, r2
 800938e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009392:	1a9b      	subs	r3, r3, r2
 8009394:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009398:	ec51 0b10 	vmov	r0, r1, d0
 800939c:	2b00      	cmp	r3, #0
 800939e:	bfd6      	itet	le
 80093a0:	460a      	movle	r2, r1
 80093a2:	462a      	movgt	r2, r5
 80093a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80093a8:	468b      	mov	fp, r1
 80093aa:	462f      	mov	r7, r5
 80093ac:	bfd4      	ite	le
 80093ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80093b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80093b6:	4620      	mov	r0, r4
 80093b8:	ee10 2a10 	vmov	r2, s0
 80093bc:	465b      	mov	r3, fp
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 fa54 	bl	800086c <__aeabi_ddiv>
 80093c4:	ec41 0b10 	vmov	d0, r0, r1
 80093c8:	b003      	add	sp, #12
 80093ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093ce <__copybits>:
 80093ce:	3901      	subs	r1, #1
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	1149      	asrs	r1, r1, #5
 80093d4:	6914      	ldr	r4, [r2, #16]
 80093d6:	3101      	adds	r1, #1
 80093d8:	f102 0314 	add.w	r3, r2, #20
 80093dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80093e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80093e4:	1f05      	subs	r5, r0, #4
 80093e6:	42a3      	cmp	r3, r4
 80093e8:	d30c      	bcc.n	8009404 <__copybits+0x36>
 80093ea:	1aa3      	subs	r3, r4, r2
 80093ec:	3b11      	subs	r3, #17
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	3211      	adds	r2, #17
 80093f4:	42a2      	cmp	r2, r4
 80093f6:	bf88      	it	hi
 80093f8:	2300      	movhi	r3, #0
 80093fa:	4418      	add	r0, r3
 80093fc:	2300      	movs	r3, #0
 80093fe:	4288      	cmp	r0, r1
 8009400:	d305      	bcc.n	800940e <__copybits+0x40>
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	f853 6b04 	ldr.w	r6, [r3], #4
 8009408:	f845 6f04 	str.w	r6, [r5, #4]!
 800940c:	e7eb      	b.n	80093e6 <__copybits+0x18>
 800940e:	f840 3b04 	str.w	r3, [r0], #4
 8009412:	e7f4      	b.n	80093fe <__copybits+0x30>

08009414 <__any_on>:
 8009414:	f100 0214 	add.w	r2, r0, #20
 8009418:	6900      	ldr	r0, [r0, #16]
 800941a:	114b      	asrs	r3, r1, #5
 800941c:	4298      	cmp	r0, r3
 800941e:	b510      	push	{r4, lr}
 8009420:	db11      	blt.n	8009446 <__any_on+0x32>
 8009422:	dd0a      	ble.n	800943a <__any_on+0x26>
 8009424:	f011 011f 	ands.w	r1, r1, #31
 8009428:	d007      	beq.n	800943a <__any_on+0x26>
 800942a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800942e:	fa24 f001 	lsr.w	r0, r4, r1
 8009432:	fa00 f101 	lsl.w	r1, r0, r1
 8009436:	428c      	cmp	r4, r1
 8009438:	d10b      	bne.n	8009452 <__any_on+0x3e>
 800943a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800943e:	4293      	cmp	r3, r2
 8009440:	d803      	bhi.n	800944a <__any_on+0x36>
 8009442:	2000      	movs	r0, #0
 8009444:	bd10      	pop	{r4, pc}
 8009446:	4603      	mov	r3, r0
 8009448:	e7f7      	b.n	800943a <__any_on+0x26>
 800944a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800944e:	2900      	cmp	r1, #0
 8009450:	d0f5      	beq.n	800943e <__any_on+0x2a>
 8009452:	2001      	movs	r0, #1
 8009454:	e7f6      	b.n	8009444 <__any_on+0x30>

08009456 <_malloc_usable_size_r>:
 8009456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945a:	1f18      	subs	r0, r3, #4
 800945c:	2b00      	cmp	r3, #0
 800945e:	bfbc      	itt	lt
 8009460:	580b      	ldrlt	r3, [r1, r0]
 8009462:	18c0      	addlt	r0, r0, r3
 8009464:	4770      	bx	lr

08009466 <__ascii_wctomb>:
 8009466:	b149      	cbz	r1, 800947c <__ascii_wctomb+0x16>
 8009468:	2aff      	cmp	r2, #255	; 0xff
 800946a:	bf85      	ittet	hi
 800946c:	238a      	movhi	r3, #138	; 0x8a
 800946e:	6003      	strhi	r3, [r0, #0]
 8009470:	700a      	strbls	r2, [r1, #0]
 8009472:	f04f 30ff 	movhi.w	r0, #4294967295
 8009476:	bf98      	it	ls
 8009478:	2001      	movls	r0, #1
 800947a:	4770      	bx	lr
 800947c:	4608      	mov	r0, r1
 800947e:	4770      	bx	lr

08009480 <__ssputs_r>:
 8009480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009484:	688e      	ldr	r6, [r1, #8]
 8009486:	461f      	mov	r7, r3
 8009488:	42be      	cmp	r6, r7
 800948a:	680b      	ldr	r3, [r1, #0]
 800948c:	4682      	mov	sl, r0
 800948e:	460c      	mov	r4, r1
 8009490:	4690      	mov	r8, r2
 8009492:	d82c      	bhi.n	80094ee <__ssputs_r+0x6e>
 8009494:	898a      	ldrh	r2, [r1, #12]
 8009496:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800949a:	d026      	beq.n	80094ea <__ssputs_r+0x6a>
 800949c:	6965      	ldr	r5, [r4, #20]
 800949e:	6909      	ldr	r1, [r1, #16]
 80094a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094a4:	eba3 0901 	sub.w	r9, r3, r1
 80094a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094ac:	1c7b      	adds	r3, r7, #1
 80094ae:	444b      	add	r3, r9
 80094b0:	106d      	asrs	r5, r5, #1
 80094b2:	429d      	cmp	r5, r3
 80094b4:	bf38      	it	cc
 80094b6:	461d      	movcc	r5, r3
 80094b8:	0553      	lsls	r3, r2, #21
 80094ba:	d527      	bpl.n	800950c <__ssputs_r+0x8c>
 80094bc:	4629      	mov	r1, r5
 80094be:	f7fd fe25 	bl	800710c <_malloc_r>
 80094c2:	4606      	mov	r6, r0
 80094c4:	b360      	cbz	r0, 8009520 <__ssputs_r+0xa0>
 80094c6:	6921      	ldr	r1, [r4, #16]
 80094c8:	464a      	mov	r2, r9
 80094ca:	f7fe ff48 	bl	800835e <memcpy>
 80094ce:	89a3      	ldrh	r3, [r4, #12]
 80094d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	6126      	str	r6, [r4, #16]
 80094dc:	6165      	str	r5, [r4, #20]
 80094de:	444e      	add	r6, r9
 80094e0:	eba5 0509 	sub.w	r5, r5, r9
 80094e4:	6026      	str	r6, [r4, #0]
 80094e6:	60a5      	str	r5, [r4, #8]
 80094e8:	463e      	mov	r6, r7
 80094ea:	42be      	cmp	r6, r7
 80094ec:	d900      	bls.n	80094f0 <__ssputs_r+0x70>
 80094ee:	463e      	mov	r6, r7
 80094f0:	6820      	ldr	r0, [r4, #0]
 80094f2:	4632      	mov	r2, r6
 80094f4:	4641      	mov	r1, r8
 80094f6:	f7fe fe37 	bl	8008168 <memmove>
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	1b9b      	subs	r3, r3, r6
 80094fe:	60a3      	str	r3, [r4, #8]
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	4433      	add	r3, r6
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	2000      	movs	r0, #0
 8009508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950c:	462a      	mov	r2, r5
 800950e:	f7fd fe91 	bl	8007234 <_realloc_r>
 8009512:	4606      	mov	r6, r0
 8009514:	2800      	cmp	r0, #0
 8009516:	d1e0      	bne.n	80094da <__ssputs_r+0x5a>
 8009518:	6921      	ldr	r1, [r4, #16]
 800951a:	4650      	mov	r0, sl
 800951c:	f7fe ff38 	bl	8008390 <_free_r>
 8009520:	230c      	movs	r3, #12
 8009522:	f8ca 3000 	str.w	r3, [sl]
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	f04f 30ff 	mov.w	r0, #4294967295
 8009532:	e7e9      	b.n	8009508 <__ssputs_r+0x88>

08009534 <_svfiprintf_r>:
 8009534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009538:	4698      	mov	r8, r3
 800953a:	898b      	ldrh	r3, [r1, #12]
 800953c:	061b      	lsls	r3, r3, #24
 800953e:	b09d      	sub	sp, #116	; 0x74
 8009540:	4607      	mov	r7, r0
 8009542:	460d      	mov	r5, r1
 8009544:	4614      	mov	r4, r2
 8009546:	d50e      	bpl.n	8009566 <_svfiprintf_r+0x32>
 8009548:	690b      	ldr	r3, [r1, #16]
 800954a:	b963      	cbnz	r3, 8009566 <_svfiprintf_r+0x32>
 800954c:	2140      	movs	r1, #64	; 0x40
 800954e:	f7fd fddd 	bl	800710c <_malloc_r>
 8009552:	6028      	str	r0, [r5, #0]
 8009554:	6128      	str	r0, [r5, #16]
 8009556:	b920      	cbnz	r0, 8009562 <_svfiprintf_r+0x2e>
 8009558:	230c      	movs	r3, #12
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	e0d0      	b.n	8009704 <_svfiprintf_r+0x1d0>
 8009562:	2340      	movs	r3, #64	; 0x40
 8009564:	616b      	str	r3, [r5, #20]
 8009566:	2300      	movs	r3, #0
 8009568:	9309      	str	r3, [sp, #36]	; 0x24
 800956a:	2320      	movs	r3, #32
 800956c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009570:	f8cd 800c 	str.w	r8, [sp, #12]
 8009574:	2330      	movs	r3, #48	; 0x30
 8009576:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800971c <_svfiprintf_r+0x1e8>
 800957a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800957e:	f04f 0901 	mov.w	r9, #1
 8009582:	4623      	mov	r3, r4
 8009584:	469a      	mov	sl, r3
 8009586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800958a:	b10a      	cbz	r2, 8009590 <_svfiprintf_r+0x5c>
 800958c:	2a25      	cmp	r2, #37	; 0x25
 800958e:	d1f9      	bne.n	8009584 <_svfiprintf_r+0x50>
 8009590:	ebba 0b04 	subs.w	fp, sl, r4
 8009594:	d00b      	beq.n	80095ae <_svfiprintf_r+0x7a>
 8009596:	465b      	mov	r3, fp
 8009598:	4622      	mov	r2, r4
 800959a:	4629      	mov	r1, r5
 800959c:	4638      	mov	r0, r7
 800959e:	f7ff ff6f 	bl	8009480 <__ssputs_r>
 80095a2:	3001      	adds	r0, #1
 80095a4:	f000 80a9 	beq.w	80096fa <_svfiprintf_r+0x1c6>
 80095a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095aa:	445a      	add	r2, fp
 80095ac:	9209      	str	r2, [sp, #36]	; 0x24
 80095ae:	f89a 3000 	ldrb.w	r3, [sl]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 80a1 	beq.w	80096fa <_svfiprintf_r+0x1c6>
 80095b8:	2300      	movs	r3, #0
 80095ba:	f04f 32ff 	mov.w	r2, #4294967295
 80095be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095c2:	f10a 0a01 	add.w	sl, sl, #1
 80095c6:	9304      	str	r3, [sp, #16]
 80095c8:	9307      	str	r3, [sp, #28]
 80095ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095ce:	931a      	str	r3, [sp, #104]	; 0x68
 80095d0:	4654      	mov	r4, sl
 80095d2:	2205      	movs	r2, #5
 80095d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d8:	4850      	ldr	r0, [pc, #320]	; (800971c <_svfiprintf_r+0x1e8>)
 80095da:	f7f6 fe09 	bl	80001f0 <memchr>
 80095de:	9a04      	ldr	r2, [sp, #16]
 80095e0:	b9d8      	cbnz	r0, 800961a <_svfiprintf_r+0xe6>
 80095e2:	06d0      	lsls	r0, r2, #27
 80095e4:	bf44      	itt	mi
 80095e6:	2320      	movmi	r3, #32
 80095e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095ec:	0711      	lsls	r1, r2, #28
 80095ee:	bf44      	itt	mi
 80095f0:	232b      	movmi	r3, #43	; 0x2b
 80095f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095f6:	f89a 3000 	ldrb.w	r3, [sl]
 80095fa:	2b2a      	cmp	r3, #42	; 0x2a
 80095fc:	d015      	beq.n	800962a <_svfiprintf_r+0xf6>
 80095fe:	9a07      	ldr	r2, [sp, #28]
 8009600:	4654      	mov	r4, sl
 8009602:	2000      	movs	r0, #0
 8009604:	f04f 0c0a 	mov.w	ip, #10
 8009608:	4621      	mov	r1, r4
 800960a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800960e:	3b30      	subs	r3, #48	; 0x30
 8009610:	2b09      	cmp	r3, #9
 8009612:	d94d      	bls.n	80096b0 <_svfiprintf_r+0x17c>
 8009614:	b1b0      	cbz	r0, 8009644 <_svfiprintf_r+0x110>
 8009616:	9207      	str	r2, [sp, #28]
 8009618:	e014      	b.n	8009644 <_svfiprintf_r+0x110>
 800961a:	eba0 0308 	sub.w	r3, r0, r8
 800961e:	fa09 f303 	lsl.w	r3, r9, r3
 8009622:	4313      	orrs	r3, r2
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	46a2      	mov	sl, r4
 8009628:	e7d2      	b.n	80095d0 <_svfiprintf_r+0x9c>
 800962a:	9b03      	ldr	r3, [sp, #12]
 800962c:	1d19      	adds	r1, r3, #4
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	9103      	str	r1, [sp, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	bfbb      	ittet	lt
 8009636:	425b      	neglt	r3, r3
 8009638:	f042 0202 	orrlt.w	r2, r2, #2
 800963c:	9307      	strge	r3, [sp, #28]
 800963e:	9307      	strlt	r3, [sp, #28]
 8009640:	bfb8      	it	lt
 8009642:	9204      	strlt	r2, [sp, #16]
 8009644:	7823      	ldrb	r3, [r4, #0]
 8009646:	2b2e      	cmp	r3, #46	; 0x2e
 8009648:	d10c      	bne.n	8009664 <_svfiprintf_r+0x130>
 800964a:	7863      	ldrb	r3, [r4, #1]
 800964c:	2b2a      	cmp	r3, #42	; 0x2a
 800964e:	d134      	bne.n	80096ba <_svfiprintf_r+0x186>
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	1d1a      	adds	r2, r3, #4
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	9203      	str	r2, [sp, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	bfb8      	it	lt
 800965c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009660:	3402      	adds	r4, #2
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800972c <_svfiprintf_r+0x1f8>
 8009668:	7821      	ldrb	r1, [r4, #0]
 800966a:	2203      	movs	r2, #3
 800966c:	4650      	mov	r0, sl
 800966e:	f7f6 fdbf 	bl	80001f0 <memchr>
 8009672:	b138      	cbz	r0, 8009684 <_svfiprintf_r+0x150>
 8009674:	9b04      	ldr	r3, [sp, #16]
 8009676:	eba0 000a 	sub.w	r0, r0, sl
 800967a:	2240      	movs	r2, #64	; 0x40
 800967c:	4082      	lsls	r2, r0
 800967e:	4313      	orrs	r3, r2
 8009680:	3401      	adds	r4, #1
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009688:	4825      	ldr	r0, [pc, #148]	; (8009720 <_svfiprintf_r+0x1ec>)
 800968a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800968e:	2206      	movs	r2, #6
 8009690:	f7f6 fdae 	bl	80001f0 <memchr>
 8009694:	2800      	cmp	r0, #0
 8009696:	d038      	beq.n	800970a <_svfiprintf_r+0x1d6>
 8009698:	4b22      	ldr	r3, [pc, #136]	; (8009724 <_svfiprintf_r+0x1f0>)
 800969a:	bb1b      	cbnz	r3, 80096e4 <_svfiprintf_r+0x1b0>
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	3307      	adds	r3, #7
 80096a0:	f023 0307 	bic.w	r3, r3, #7
 80096a4:	3308      	adds	r3, #8
 80096a6:	9303      	str	r3, [sp, #12]
 80096a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096aa:	4433      	add	r3, r6
 80096ac:	9309      	str	r3, [sp, #36]	; 0x24
 80096ae:	e768      	b.n	8009582 <_svfiprintf_r+0x4e>
 80096b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80096b4:	460c      	mov	r4, r1
 80096b6:	2001      	movs	r0, #1
 80096b8:	e7a6      	b.n	8009608 <_svfiprintf_r+0xd4>
 80096ba:	2300      	movs	r3, #0
 80096bc:	3401      	adds	r4, #1
 80096be:	9305      	str	r3, [sp, #20]
 80096c0:	4619      	mov	r1, r3
 80096c2:	f04f 0c0a 	mov.w	ip, #10
 80096c6:	4620      	mov	r0, r4
 80096c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096cc:	3a30      	subs	r2, #48	; 0x30
 80096ce:	2a09      	cmp	r2, #9
 80096d0:	d903      	bls.n	80096da <_svfiprintf_r+0x1a6>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d0c6      	beq.n	8009664 <_svfiprintf_r+0x130>
 80096d6:	9105      	str	r1, [sp, #20]
 80096d8:	e7c4      	b.n	8009664 <_svfiprintf_r+0x130>
 80096da:	fb0c 2101 	mla	r1, ip, r1, r2
 80096de:	4604      	mov	r4, r0
 80096e0:	2301      	movs	r3, #1
 80096e2:	e7f0      	b.n	80096c6 <_svfiprintf_r+0x192>
 80096e4:	ab03      	add	r3, sp, #12
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	462a      	mov	r2, r5
 80096ea:	4b0f      	ldr	r3, [pc, #60]	; (8009728 <_svfiprintf_r+0x1f4>)
 80096ec:	a904      	add	r1, sp, #16
 80096ee:	4638      	mov	r0, r7
 80096f0:	f3af 8000 	nop.w
 80096f4:	1c42      	adds	r2, r0, #1
 80096f6:	4606      	mov	r6, r0
 80096f8:	d1d6      	bne.n	80096a8 <_svfiprintf_r+0x174>
 80096fa:	89ab      	ldrh	r3, [r5, #12]
 80096fc:	065b      	lsls	r3, r3, #25
 80096fe:	f53f af2d 	bmi.w	800955c <_svfiprintf_r+0x28>
 8009702:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009704:	b01d      	add	sp, #116	; 0x74
 8009706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970a:	ab03      	add	r3, sp, #12
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	462a      	mov	r2, r5
 8009710:	4b05      	ldr	r3, [pc, #20]	; (8009728 <_svfiprintf_r+0x1f4>)
 8009712:	a904      	add	r1, sp, #16
 8009714:	4638      	mov	r0, r7
 8009716:	f000 f9bd 	bl	8009a94 <_printf_i>
 800971a:	e7eb      	b.n	80096f4 <_svfiprintf_r+0x1c0>
 800971c:	0800a904 	.word	0x0800a904
 8009720:	0800a90e 	.word	0x0800a90e
 8009724:	00000000 	.word	0x00000000
 8009728:	08009481 	.word	0x08009481
 800972c:	0800a90a 	.word	0x0800a90a

08009730 <__sfputc_r>:
 8009730:	6893      	ldr	r3, [r2, #8]
 8009732:	3b01      	subs	r3, #1
 8009734:	2b00      	cmp	r3, #0
 8009736:	b410      	push	{r4}
 8009738:	6093      	str	r3, [r2, #8]
 800973a:	da08      	bge.n	800974e <__sfputc_r+0x1e>
 800973c:	6994      	ldr	r4, [r2, #24]
 800973e:	42a3      	cmp	r3, r4
 8009740:	db01      	blt.n	8009746 <__sfputc_r+0x16>
 8009742:	290a      	cmp	r1, #10
 8009744:	d103      	bne.n	800974e <__sfputc_r+0x1e>
 8009746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800974a:	f000 bb73 	b.w	8009e34 <__swbuf_r>
 800974e:	6813      	ldr	r3, [r2, #0]
 8009750:	1c58      	adds	r0, r3, #1
 8009752:	6010      	str	r0, [r2, #0]
 8009754:	7019      	strb	r1, [r3, #0]
 8009756:	4608      	mov	r0, r1
 8009758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800975c:	4770      	bx	lr

0800975e <__sfputs_r>:
 800975e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009760:	4606      	mov	r6, r0
 8009762:	460f      	mov	r7, r1
 8009764:	4614      	mov	r4, r2
 8009766:	18d5      	adds	r5, r2, r3
 8009768:	42ac      	cmp	r4, r5
 800976a:	d101      	bne.n	8009770 <__sfputs_r+0x12>
 800976c:	2000      	movs	r0, #0
 800976e:	e007      	b.n	8009780 <__sfputs_r+0x22>
 8009770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009774:	463a      	mov	r2, r7
 8009776:	4630      	mov	r0, r6
 8009778:	f7ff ffda 	bl	8009730 <__sfputc_r>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	d1f3      	bne.n	8009768 <__sfputs_r+0xa>
 8009780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009784 <_vfiprintf_r>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	460d      	mov	r5, r1
 800978a:	b09d      	sub	sp, #116	; 0x74
 800978c:	4614      	mov	r4, r2
 800978e:	4698      	mov	r8, r3
 8009790:	4606      	mov	r6, r0
 8009792:	b118      	cbz	r0, 800979c <_vfiprintf_r+0x18>
 8009794:	6a03      	ldr	r3, [r0, #32]
 8009796:	b90b      	cbnz	r3, 800979c <_vfiprintf_r+0x18>
 8009798:	f7fe fc22 	bl	8007fe0 <__sinit>
 800979c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800979e:	07d9      	lsls	r1, r3, #31
 80097a0:	d405      	bmi.n	80097ae <_vfiprintf_r+0x2a>
 80097a2:	89ab      	ldrh	r3, [r5, #12]
 80097a4:	059a      	lsls	r2, r3, #22
 80097a6:	d402      	bmi.n	80097ae <_vfiprintf_r+0x2a>
 80097a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097aa:	f7fe fdd6 	bl	800835a <__retarget_lock_acquire_recursive>
 80097ae:	89ab      	ldrh	r3, [r5, #12]
 80097b0:	071b      	lsls	r3, r3, #28
 80097b2:	d501      	bpl.n	80097b8 <_vfiprintf_r+0x34>
 80097b4:	692b      	ldr	r3, [r5, #16]
 80097b6:	b99b      	cbnz	r3, 80097e0 <_vfiprintf_r+0x5c>
 80097b8:	4629      	mov	r1, r5
 80097ba:	4630      	mov	r0, r6
 80097bc:	f000 fb78 	bl	8009eb0 <__swsetup_r>
 80097c0:	b170      	cbz	r0, 80097e0 <_vfiprintf_r+0x5c>
 80097c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097c4:	07dc      	lsls	r4, r3, #31
 80097c6:	d504      	bpl.n	80097d2 <_vfiprintf_r+0x4e>
 80097c8:	f04f 30ff 	mov.w	r0, #4294967295
 80097cc:	b01d      	add	sp, #116	; 0x74
 80097ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d2:	89ab      	ldrh	r3, [r5, #12]
 80097d4:	0598      	lsls	r0, r3, #22
 80097d6:	d4f7      	bmi.n	80097c8 <_vfiprintf_r+0x44>
 80097d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097da:	f7fe fdbf 	bl	800835c <__retarget_lock_release_recursive>
 80097de:	e7f3      	b.n	80097c8 <_vfiprintf_r+0x44>
 80097e0:	2300      	movs	r3, #0
 80097e2:	9309      	str	r3, [sp, #36]	; 0x24
 80097e4:	2320      	movs	r3, #32
 80097e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ee:	2330      	movs	r3, #48	; 0x30
 80097f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80099a4 <_vfiprintf_r+0x220>
 80097f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097f8:	f04f 0901 	mov.w	r9, #1
 80097fc:	4623      	mov	r3, r4
 80097fe:	469a      	mov	sl, r3
 8009800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009804:	b10a      	cbz	r2, 800980a <_vfiprintf_r+0x86>
 8009806:	2a25      	cmp	r2, #37	; 0x25
 8009808:	d1f9      	bne.n	80097fe <_vfiprintf_r+0x7a>
 800980a:	ebba 0b04 	subs.w	fp, sl, r4
 800980e:	d00b      	beq.n	8009828 <_vfiprintf_r+0xa4>
 8009810:	465b      	mov	r3, fp
 8009812:	4622      	mov	r2, r4
 8009814:	4629      	mov	r1, r5
 8009816:	4630      	mov	r0, r6
 8009818:	f7ff ffa1 	bl	800975e <__sfputs_r>
 800981c:	3001      	adds	r0, #1
 800981e:	f000 80a9 	beq.w	8009974 <_vfiprintf_r+0x1f0>
 8009822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009824:	445a      	add	r2, fp
 8009826:	9209      	str	r2, [sp, #36]	; 0x24
 8009828:	f89a 3000 	ldrb.w	r3, [sl]
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 80a1 	beq.w	8009974 <_vfiprintf_r+0x1f0>
 8009832:	2300      	movs	r3, #0
 8009834:	f04f 32ff 	mov.w	r2, #4294967295
 8009838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800983c:	f10a 0a01 	add.w	sl, sl, #1
 8009840:	9304      	str	r3, [sp, #16]
 8009842:	9307      	str	r3, [sp, #28]
 8009844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009848:	931a      	str	r3, [sp, #104]	; 0x68
 800984a:	4654      	mov	r4, sl
 800984c:	2205      	movs	r2, #5
 800984e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009852:	4854      	ldr	r0, [pc, #336]	; (80099a4 <_vfiprintf_r+0x220>)
 8009854:	f7f6 fccc 	bl	80001f0 <memchr>
 8009858:	9a04      	ldr	r2, [sp, #16]
 800985a:	b9d8      	cbnz	r0, 8009894 <_vfiprintf_r+0x110>
 800985c:	06d1      	lsls	r1, r2, #27
 800985e:	bf44      	itt	mi
 8009860:	2320      	movmi	r3, #32
 8009862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009866:	0713      	lsls	r3, r2, #28
 8009868:	bf44      	itt	mi
 800986a:	232b      	movmi	r3, #43	; 0x2b
 800986c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009870:	f89a 3000 	ldrb.w	r3, [sl]
 8009874:	2b2a      	cmp	r3, #42	; 0x2a
 8009876:	d015      	beq.n	80098a4 <_vfiprintf_r+0x120>
 8009878:	9a07      	ldr	r2, [sp, #28]
 800987a:	4654      	mov	r4, sl
 800987c:	2000      	movs	r0, #0
 800987e:	f04f 0c0a 	mov.w	ip, #10
 8009882:	4621      	mov	r1, r4
 8009884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009888:	3b30      	subs	r3, #48	; 0x30
 800988a:	2b09      	cmp	r3, #9
 800988c:	d94d      	bls.n	800992a <_vfiprintf_r+0x1a6>
 800988e:	b1b0      	cbz	r0, 80098be <_vfiprintf_r+0x13a>
 8009890:	9207      	str	r2, [sp, #28]
 8009892:	e014      	b.n	80098be <_vfiprintf_r+0x13a>
 8009894:	eba0 0308 	sub.w	r3, r0, r8
 8009898:	fa09 f303 	lsl.w	r3, r9, r3
 800989c:	4313      	orrs	r3, r2
 800989e:	9304      	str	r3, [sp, #16]
 80098a0:	46a2      	mov	sl, r4
 80098a2:	e7d2      	b.n	800984a <_vfiprintf_r+0xc6>
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	1d19      	adds	r1, r3, #4
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	9103      	str	r1, [sp, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	bfbb      	ittet	lt
 80098b0:	425b      	neglt	r3, r3
 80098b2:	f042 0202 	orrlt.w	r2, r2, #2
 80098b6:	9307      	strge	r3, [sp, #28]
 80098b8:	9307      	strlt	r3, [sp, #28]
 80098ba:	bfb8      	it	lt
 80098bc:	9204      	strlt	r2, [sp, #16]
 80098be:	7823      	ldrb	r3, [r4, #0]
 80098c0:	2b2e      	cmp	r3, #46	; 0x2e
 80098c2:	d10c      	bne.n	80098de <_vfiprintf_r+0x15a>
 80098c4:	7863      	ldrb	r3, [r4, #1]
 80098c6:	2b2a      	cmp	r3, #42	; 0x2a
 80098c8:	d134      	bne.n	8009934 <_vfiprintf_r+0x1b0>
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	1d1a      	adds	r2, r3, #4
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	9203      	str	r2, [sp, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bfb8      	it	lt
 80098d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80098da:	3402      	adds	r4, #2
 80098dc:	9305      	str	r3, [sp, #20]
 80098de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80099b4 <_vfiprintf_r+0x230>
 80098e2:	7821      	ldrb	r1, [r4, #0]
 80098e4:	2203      	movs	r2, #3
 80098e6:	4650      	mov	r0, sl
 80098e8:	f7f6 fc82 	bl	80001f0 <memchr>
 80098ec:	b138      	cbz	r0, 80098fe <_vfiprintf_r+0x17a>
 80098ee:	9b04      	ldr	r3, [sp, #16]
 80098f0:	eba0 000a 	sub.w	r0, r0, sl
 80098f4:	2240      	movs	r2, #64	; 0x40
 80098f6:	4082      	lsls	r2, r0
 80098f8:	4313      	orrs	r3, r2
 80098fa:	3401      	adds	r4, #1
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009902:	4829      	ldr	r0, [pc, #164]	; (80099a8 <_vfiprintf_r+0x224>)
 8009904:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009908:	2206      	movs	r2, #6
 800990a:	f7f6 fc71 	bl	80001f0 <memchr>
 800990e:	2800      	cmp	r0, #0
 8009910:	d03f      	beq.n	8009992 <_vfiprintf_r+0x20e>
 8009912:	4b26      	ldr	r3, [pc, #152]	; (80099ac <_vfiprintf_r+0x228>)
 8009914:	bb1b      	cbnz	r3, 800995e <_vfiprintf_r+0x1da>
 8009916:	9b03      	ldr	r3, [sp, #12]
 8009918:	3307      	adds	r3, #7
 800991a:	f023 0307 	bic.w	r3, r3, #7
 800991e:	3308      	adds	r3, #8
 8009920:	9303      	str	r3, [sp, #12]
 8009922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009924:	443b      	add	r3, r7
 8009926:	9309      	str	r3, [sp, #36]	; 0x24
 8009928:	e768      	b.n	80097fc <_vfiprintf_r+0x78>
 800992a:	fb0c 3202 	mla	r2, ip, r2, r3
 800992e:	460c      	mov	r4, r1
 8009930:	2001      	movs	r0, #1
 8009932:	e7a6      	b.n	8009882 <_vfiprintf_r+0xfe>
 8009934:	2300      	movs	r3, #0
 8009936:	3401      	adds	r4, #1
 8009938:	9305      	str	r3, [sp, #20]
 800993a:	4619      	mov	r1, r3
 800993c:	f04f 0c0a 	mov.w	ip, #10
 8009940:	4620      	mov	r0, r4
 8009942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009946:	3a30      	subs	r2, #48	; 0x30
 8009948:	2a09      	cmp	r2, #9
 800994a:	d903      	bls.n	8009954 <_vfiprintf_r+0x1d0>
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0c6      	beq.n	80098de <_vfiprintf_r+0x15a>
 8009950:	9105      	str	r1, [sp, #20]
 8009952:	e7c4      	b.n	80098de <_vfiprintf_r+0x15a>
 8009954:	fb0c 2101 	mla	r1, ip, r1, r2
 8009958:	4604      	mov	r4, r0
 800995a:	2301      	movs	r3, #1
 800995c:	e7f0      	b.n	8009940 <_vfiprintf_r+0x1bc>
 800995e:	ab03      	add	r3, sp, #12
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	462a      	mov	r2, r5
 8009964:	4b12      	ldr	r3, [pc, #72]	; (80099b0 <_vfiprintf_r+0x22c>)
 8009966:	a904      	add	r1, sp, #16
 8009968:	4630      	mov	r0, r6
 800996a:	f3af 8000 	nop.w
 800996e:	4607      	mov	r7, r0
 8009970:	1c78      	adds	r0, r7, #1
 8009972:	d1d6      	bne.n	8009922 <_vfiprintf_r+0x19e>
 8009974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009976:	07d9      	lsls	r1, r3, #31
 8009978:	d405      	bmi.n	8009986 <_vfiprintf_r+0x202>
 800997a:	89ab      	ldrh	r3, [r5, #12]
 800997c:	059a      	lsls	r2, r3, #22
 800997e:	d402      	bmi.n	8009986 <_vfiprintf_r+0x202>
 8009980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009982:	f7fe fceb 	bl	800835c <__retarget_lock_release_recursive>
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	065b      	lsls	r3, r3, #25
 800998a:	f53f af1d 	bmi.w	80097c8 <_vfiprintf_r+0x44>
 800998e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009990:	e71c      	b.n	80097cc <_vfiprintf_r+0x48>
 8009992:	ab03      	add	r3, sp, #12
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	462a      	mov	r2, r5
 8009998:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <_vfiprintf_r+0x22c>)
 800999a:	a904      	add	r1, sp, #16
 800999c:	4630      	mov	r0, r6
 800999e:	f000 f879 	bl	8009a94 <_printf_i>
 80099a2:	e7e4      	b.n	800996e <_vfiprintf_r+0x1ea>
 80099a4:	0800a904 	.word	0x0800a904
 80099a8:	0800a90e 	.word	0x0800a90e
 80099ac:	00000000 	.word	0x00000000
 80099b0:	0800975f 	.word	0x0800975f
 80099b4:	0800a90a 	.word	0x0800a90a

080099b8 <_printf_common>:
 80099b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099bc:	4616      	mov	r6, r2
 80099be:	4699      	mov	r9, r3
 80099c0:	688a      	ldr	r2, [r1, #8]
 80099c2:	690b      	ldr	r3, [r1, #16]
 80099c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099c8:	4293      	cmp	r3, r2
 80099ca:	bfb8      	it	lt
 80099cc:	4613      	movlt	r3, r2
 80099ce:	6033      	str	r3, [r6, #0]
 80099d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099d4:	4607      	mov	r7, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	b10a      	cbz	r2, 80099de <_printf_common+0x26>
 80099da:	3301      	adds	r3, #1
 80099dc:	6033      	str	r3, [r6, #0]
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	0699      	lsls	r1, r3, #26
 80099e2:	bf42      	ittt	mi
 80099e4:	6833      	ldrmi	r3, [r6, #0]
 80099e6:	3302      	addmi	r3, #2
 80099e8:	6033      	strmi	r3, [r6, #0]
 80099ea:	6825      	ldr	r5, [r4, #0]
 80099ec:	f015 0506 	ands.w	r5, r5, #6
 80099f0:	d106      	bne.n	8009a00 <_printf_common+0x48>
 80099f2:	f104 0a19 	add.w	sl, r4, #25
 80099f6:	68e3      	ldr	r3, [r4, #12]
 80099f8:	6832      	ldr	r2, [r6, #0]
 80099fa:	1a9b      	subs	r3, r3, r2
 80099fc:	42ab      	cmp	r3, r5
 80099fe:	dc26      	bgt.n	8009a4e <_printf_common+0x96>
 8009a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a04:	1e13      	subs	r3, r2, #0
 8009a06:	6822      	ldr	r2, [r4, #0]
 8009a08:	bf18      	it	ne
 8009a0a:	2301      	movne	r3, #1
 8009a0c:	0692      	lsls	r2, r2, #26
 8009a0e:	d42b      	bmi.n	8009a68 <_printf_common+0xb0>
 8009a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a14:	4649      	mov	r1, r9
 8009a16:	4638      	mov	r0, r7
 8009a18:	47c0      	blx	r8
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	d01e      	beq.n	8009a5c <_printf_common+0xa4>
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	6922      	ldr	r2, [r4, #16]
 8009a22:	f003 0306 	and.w	r3, r3, #6
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	bf02      	ittt	eq
 8009a2a:	68e5      	ldreq	r5, [r4, #12]
 8009a2c:	6833      	ldreq	r3, [r6, #0]
 8009a2e:	1aed      	subeq	r5, r5, r3
 8009a30:	68a3      	ldr	r3, [r4, #8]
 8009a32:	bf0c      	ite	eq
 8009a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a38:	2500      	movne	r5, #0
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	bfc4      	itt	gt
 8009a3e:	1a9b      	subgt	r3, r3, r2
 8009a40:	18ed      	addgt	r5, r5, r3
 8009a42:	2600      	movs	r6, #0
 8009a44:	341a      	adds	r4, #26
 8009a46:	42b5      	cmp	r5, r6
 8009a48:	d11a      	bne.n	8009a80 <_printf_common+0xc8>
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	e008      	b.n	8009a60 <_printf_common+0xa8>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	4652      	mov	r2, sl
 8009a52:	4649      	mov	r1, r9
 8009a54:	4638      	mov	r0, r7
 8009a56:	47c0      	blx	r8
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d103      	bne.n	8009a64 <_printf_common+0xac>
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a64:	3501      	adds	r5, #1
 8009a66:	e7c6      	b.n	80099f6 <_printf_common+0x3e>
 8009a68:	18e1      	adds	r1, r4, r3
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	2030      	movs	r0, #48	; 0x30
 8009a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a72:	4422      	add	r2, r4
 8009a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a7c:	3302      	adds	r3, #2
 8009a7e:	e7c7      	b.n	8009a10 <_printf_common+0x58>
 8009a80:	2301      	movs	r3, #1
 8009a82:	4622      	mov	r2, r4
 8009a84:	4649      	mov	r1, r9
 8009a86:	4638      	mov	r0, r7
 8009a88:	47c0      	blx	r8
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	d0e6      	beq.n	8009a5c <_printf_common+0xa4>
 8009a8e:	3601      	adds	r6, #1
 8009a90:	e7d9      	b.n	8009a46 <_printf_common+0x8e>
	...

08009a94 <_printf_i>:
 8009a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a98:	7e0f      	ldrb	r7, [r1, #24]
 8009a9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a9c:	2f78      	cmp	r7, #120	; 0x78
 8009a9e:	4691      	mov	r9, r2
 8009aa0:	4680      	mov	r8, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	469a      	mov	sl, r3
 8009aa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009aaa:	d807      	bhi.n	8009abc <_printf_i+0x28>
 8009aac:	2f62      	cmp	r7, #98	; 0x62
 8009aae:	d80a      	bhi.n	8009ac6 <_printf_i+0x32>
 8009ab0:	2f00      	cmp	r7, #0
 8009ab2:	f000 80d4 	beq.w	8009c5e <_printf_i+0x1ca>
 8009ab6:	2f58      	cmp	r7, #88	; 0x58
 8009ab8:	f000 80c0 	beq.w	8009c3c <_printf_i+0x1a8>
 8009abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ac4:	e03a      	b.n	8009b3c <_printf_i+0xa8>
 8009ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aca:	2b15      	cmp	r3, #21
 8009acc:	d8f6      	bhi.n	8009abc <_printf_i+0x28>
 8009ace:	a101      	add	r1, pc, #4	; (adr r1, 8009ad4 <_printf_i+0x40>)
 8009ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ad4:	08009b2d 	.word	0x08009b2d
 8009ad8:	08009b41 	.word	0x08009b41
 8009adc:	08009abd 	.word	0x08009abd
 8009ae0:	08009abd 	.word	0x08009abd
 8009ae4:	08009abd 	.word	0x08009abd
 8009ae8:	08009abd 	.word	0x08009abd
 8009aec:	08009b41 	.word	0x08009b41
 8009af0:	08009abd 	.word	0x08009abd
 8009af4:	08009abd 	.word	0x08009abd
 8009af8:	08009abd 	.word	0x08009abd
 8009afc:	08009abd 	.word	0x08009abd
 8009b00:	08009c45 	.word	0x08009c45
 8009b04:	08009b6d 	.word	0x08009b6d
 8009b08:	08009bff 	.word	0x08009bff
 8009b0c:	08009abd 	.word	0x08009abd
 8009b10:	08009abd 	.word	0x08009abd
 8009b14:	08009c67 	.word	0x08009c67
 8009b18:	08009abd 	.word	0x08009abd
 8009b1c:	08009b6d 	.word	0x08009b6d
 8009b20:	08009abd 	.word	0x08009abd
 8009b24:	08009abd 	.word	0x08009abd
 8009b28:	08009c07 	.word	0x08009c07
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	1d1a      	adds	r2, r3, #4
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	602a      	str	r2, [r5, #0]
 8009b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e09f      	b.n	8009c80 <_printf_i+0x1ec>
 8009b40:	6820      	ldr	r0, [r4, #0]
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	0607      	lsls	r7, r0, #24
 8009b46:	f103 0104 	add.w	r1, r3, #4
 8009b4a:	6029      	str	r1, [r5, #0]
 8009b4c:	d501      	bpl.n	8009b52 <_printf_i+0xbe>
 8009b4e:	681e      	ldr	r6, [r3, #0]
 8009b50:	e003      	b.n	8009b5a <_printf_i+0xc6>
 8009b52:	0646      	lsls	r6, r0, #25
 8009b54:	d5fb      	bpl.n	8009b4e <_printf_i+0xba>
 8009b56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b5a:	2e00      	cmp	r6, #0
 8009b5c:	da03      	bge.n	8009b66 <_printf_i+0xd2>
 8009b5e:	232d      	movs	r3, #45	; 0x2d
 8009b60:	4276      	negs	r6, r6
 8009b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b66:	485a      	ldr	r0, [pc, #360]	; (8009cd0 <_printf_i+0x23c>)
 8009b68:	230a      	movs	r3, #10
 8009b6a:	e012      	b.n	8009b92 <_printf_i+0xfe>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	6820      	ldr	r0, [r4, #0]
 8009b70:	1d19      	adds	r1, r3, #4
 8009b72:	6029      	str	r1, [r5, #0]
 8009b74:	0605      	lsls	r5, r0, #24
 8009b76:	d501      	bpl.n	8009b7c <_printf_i+0xe8>
 8009b78:	681e      	ldr	r6, [r3, #0]
 8009b7a:	e002      	b.n	8009b82 <_printf_i+0xee>
 8009b7c:	0641      	lsls	r1, r0, #25
 8009b7e:	d5fb      	bpl.n	8009b78 <_printf_i+0xe4>
 8009b80:	881e      	ldrh	r6, [r3, #0]
 8009b82:	4853      	ldr	r0, [pc, #332]	; (8009cd0 <_printf_i+0x23c>)
 8009b84:	2f6f      	cmp	r7, #111	; 0x6f
 8009b86:	bf0c      	ite	eq
 8009b88:	2308      	moveq	r3, #8
 8009b8a:	230a      	movne	r3, #10
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b92:	6865      	ldr	r5, [r4, #4]
 8009b94:	60a5      	str	r5, [r4, #8]
 8009b96:	2d00      	cmp	r5, #0
 8009b98:	bfa2      	ittt	ge
 8009b9a:	6821      	ldrge	r1, [r4, #0]
 8009b9c:	f021 0104 	bicge.w	r1, r1, #4
 8009ba0:	6021      	strge	r1, [r4, #0]
 8009ba2:	b90e      	cbnz	r6, 8009ba8 <_printf_i+0x114>
 8009ba4:	2d00      	cmp	r5, #0
 8009ba6:	d04b      	beq.n	8009c40 <_printf_i+0x1ac>
 8009ba8:	4615      	mov	r5, r2
 8009baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bae:	fb03 6711 	mls	r7, r3, r1, r6
 8009bb2:	5dc7      	ldrb	r7, [r0, r7]
 8009bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bb8:	4637      	mov	r7, r6
 8009bba:	42bb      	cmp	r3, r7
 8009bbc:	460e      	mov	r6, r1
 8009bbe:	d9f4      	bls.n	8009baa <_printf_i+0x116>
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d10b      	bne.n	8009bdc <_printf_i+0x148>
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	07de      	lsls	r6, r3, #31
 8009bc8:	d508      	bpl.n	8009bdc <_printf_i+0x148>
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	6861      	ldr	r1, [r4, #4]
 8009bce:	4299      	cmp	r1, r3
 8009bd0:	bfde      	ittt	le
 8009bd2:	2330      	movle	r3, #48	; 0x30
 8009bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bdc:	1b52      	subs	r2, r2, r5
 8009bde:	6122      	str	r2, [r4, #16]
 8009be0:	f8cd a000 	str.w	sl, [sp]
 8009be4:	464b      	mov	r3, r9
 8009be6:	aa03      	add	r2, sp, #12
 8009be8:	4621      	mov	r1, r4
 8009bea:	4640      	mov	r0, r8
 8009bec:	f7ff fee4 	bl	80099b8 <_printf_common>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d14a      	bne.n	8009c8a <_printf_i+0x1f6>
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	b004      	add	sp, #16
 8009bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	f043 0320 	orr.w	r3, r3, #32
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	4833      	ldr	r0, [pc, #204]	; (8009cd4 <_printf_i+0x240>)
 8009c08:	2778      	movs	r7, #120	; 0x78
 8009c0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	6829      	ldr	r1, [r5, #0]
 8009c12:	061f      	lsls	r7, r3, #24
 8009c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c18:	d402      	bmi.n	8009c20 <_printf_i+0x18c>
 8009c1a:	065f      	lsls	r7, r3, #25
 8009c1c:	bf48      	it	mi
 8009c1e:	b2b6      	uxthmi	r6, r6
 8009c20:	07df      	lsls	r7, r3, #31
 8009c22:	bf48      	it	mi
 8009c24:	f043 0320 	orrmi.w	r3, r3, #32
 8009c28:	6029      	str	r1, [r5, #0]
 8009c2a:	bf48      	it	mi
 8009c2c:	6023      	strmi	r3, [r4, #0]
 8009c2e:	b91e      	cbnz	r6, 8009c38 <_printf_i+0x1a4>
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	f023 0320 	bic.w	r3, r3, #32
 8009c36:	6023      	str	r3, [r4, #0]
 8009c38:	2310      	movs	r3, #16
 8009c3a:	e7a7      	b.n	8009b8c <_printf_i+0xf8>
 8009c3c:	4824      	ldr	r0, [pc, #144]	; (8009cd0 <_printf_i+0x23c>)
 8009c3e:	e7e4      	b.n	8009c0a <_printf_i+0x176>
 8009c40:	4615      	mov	r5, r2
 8009c42:	e7bd      	b.n	8009bc0 <_printf_i+0x12c>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	6826      	ldr	r6, [r4, #0]
 8009c48:	6961      	ldr	r1, [r4, #20]
 8009c4a:	1d18      	adds	r0, r3, #4
 8009c4c:	6028      	str	r0, [r5, #0]
 8009c4e:	0635      	lsls	r5, r6, #24
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	d501      	bpl.n	8009c58 <_printf_i+0x1c4>
 8009c54:	6019      	str	r1, [r3, #0]
 8009c56:	e002      	b.n	8009c5e <_printf_i+0x1ca>
 8009c58:	0670      	lsls	r0, r6, #25
 8009c5a:	d5fb      	bpl.n	8009c54 <_printf_i+0x1c0>
 8009c5c:	8019      	strh	r1, [r3, #0]
 8009c5e:	2300      	movs	r3, #0
 8009c60:	6123      	str	r3, [r4, #16]
 8009c62:	4615      	mov	r5, r2
 8009c64:	e7bc      	b.n	8009be0 <_printf_i+0x14c>
 8009c66:	682b      	ldr	r3, [r5, #0]
 8009c68:	1d1a      	adds	r2, r3, #4
 8009c6a:	602a      	str	r2, [r5, #0]
 8009c6c:	681d      	ldr	r5, [r3, #0]
 8009c6e:	6862      	ldr	r2, [r4, #4]
 8009c70:	2100      	movs	r1, #0
 8009c72:	4628      	mov	r0, r5
 8009c74:	f7f6 fabc 	bl	80001f0 <memchr>
 8009c78:	b108      	cbz	r0, 8009c7e <_printf_i+0x1ea>
 8009c7a:	1b40      	subs	r0, r0, r5
 8009c7c:	6060      	str	r0, [r4, #4]
 8009c7e:	6863      	ldr	r3, [r4, #4]
 8009c80:	6123      	str	r3, [r4, #16]
 8009c82:	2300      	movs	r3, #0
 8009c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c88:	e7aa      	b.n	8009be0 <_printf_i+0x14c>
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	462a      	mov	r2, r5
 8009c8e:	4649      	mov	r1, r9
 8009c90:	4640      	mov	r0, r8
 8009c92:	47d0      	blx	sl
 8009c94:	3001      	adds	r0, #1
 8009c96:	d0ad      	beq.n	8009bf4 <_printf_i+0x160>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	079b      	lsls	r3, r3, #30
 8009c9c:	d413      	bmi.n	8009cc6 <_printf_i+0x232>
 8009c9e:	68e0      	ldr	r0, [r4, #12]
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	4298      	cmp	r0, r3
 8009ca4:	bfb8      	it	lt
 8009ca6:	4618      	movlt	r0, r3
 8009ca8:	e7a6      	b.n	8009bf8 <_printf_i+0x164>
 8009caa:	2301      	movs	r3, #1
 8009cac:	4632      	mov	r2, r6
 8009cae:	4649      	mov	r1, r9
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	47d0      	blx	sl
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d09d      	beq.n	8009bf4 <_printf_i+0x160>
 8009cb8:	3501      	adds	r5, #1
 8009cba:	68e3      	ldr	r3, [r4, #12]
 8009cbc:	9903      	ldr	r1, [sp, #12]
 8009cbe:	1a5b      	subs	r3, r3, r1
 8009cc0:	42ab      	cmp	r3, r5
 8009cc2:	dcf2      	bgt.n	8009caa <_printf_i+0x216>
 8009cc4:	e7eb      	b.n	8009c9e <_printf_i+0x20a>
 8009cc6:	2500      	movs	r5, #0
 8009cc8:	f104 0619 	add.w	r6, r4, #25
 8009ccc:	e7f5      	b.n	8009cba <_printf_i+0x226>
 8009cce:	bf00      	nop
 8009cd0:	0800a915 	.word	0x0800a915
 8009cd4:	0800a926 	.word	0x0800a926

08009cd8 <__sflush_r>:
 8009cd8:	898a      	ldrh	r2, [r1, #12]
 8009cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cde:	4605      	mov	r5, r0
 8009ce0:	0710      	lsls	r0, r2, #28
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	d458      	bmi.n	8009d98 <__sflush_r+0xc0>
 8009ce6:	684b      	ldr	r3, [r1, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dc05      	bgt.n	8009cf8 <__sflush_r+0x20>
 8009cec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dc02      	bgt.n	8009cf8 <__sflush_r+0x20>
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cfa:	2e00      	cmp	r6, #0
 8009cfc:	d0f9      	beq.n	8009cf2 <__sflush_r+0x1a>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d04:	682f      	ldr	r7, [r5, #0]
 8009d06:	6a21      	ldr	r1, [r4, #32]
 8009d08:	602b      	str	r3, [r5, #0]
 8009d0a:	d032      	beq.n	8009d72 <__sflush_r+0x9a>
 8009d0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	075a      	lsls	r2, r3, #29
 8009d12:	d505      	bpl.n	8009d20 <__sflush_r+0x48>
 8009d14:	6863      	ldr	r3, [r4, #4]
 8009d16:	1ac0      	subs	r0, r0, r3
 8009d18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d1a:	b10b      	cbz	r3, 8009d20 <__sflush_r+0x48>
 8009d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d1e:	1ac0      	subs	r0, r0, r3
 8009d20:	2300      	movs	r3, #0
 8009d22:	4602      	mov	r2, r0
 8009d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d26:	6a21      	ldr	r1, [r4, #32]
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b0      	blx	r6
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	d106      	bne.n	8009d40 <__sflush_r+0x68>
 8009d32:	6829      	ldr	r1, [r5, #0]
 8009d34:	291d      	cmp	r1, #29
 8009d36:	d82b      	bhi.n	8009d90 <__sflush_r+0xb8>
 8009d38:	4a29      	ldr	r2, [pc, #164]	; (8009de0 <__sflush_r+0x108>)
 8009d3a:	410a      	asrs	r2, r1
 8009d3c:	07d6      	lsls	r6, r2, #31
 8009d3e:	d427      	bmi.n	8009d90 <__sflush_r+0xb8>
 8009d40:	2200      	movs	r2, #0
 8009d42:	6062      	str	r2, [r4, #4]
 8009d44:	04d9      	lsls	r1, r3, #19
 8009d46:	6922      	ldr	r2, [r4, #16]
 8009d48:	6022      	str	r2, [r4, #0]
 8009d4a:	d504      	bpl.n	8009d56 <__sflush_r+0x7e>
 8009d4c:	1c42      	adds	r2, r0, #1
 8009d4e:	d101      	bne.n	8009d54 <__sflush_r+0x7c>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	b903      	cbnz	r3, 8009d56 <__sflush_r+0x7e>
 8009d54:	6560      	str	r0, [r4, #84]	; 0x54
 8009d56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d58:	602f      	str	r7, [r5, #0]
 8009d5a:	2900      	cmp	r1, #0
 8009d5c:	d0c9      	beq.n	8009cf2 <__sflush_r+0x1a>
 8009d5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d62:	4299      	cmp	r1, r3
 8009d64:	d002      	beq.n	8009d6c <__sflush_r+0x94>
 8009d66:	4628      	mov	r0, r5
 8009d68:	f7fe fb12 	bl	8008390 <_free_r>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	6360      	str	r0, [r4, #52]	; 0x34
 8009d70:	e7c0      	b.n	8009cf4 <__sflush_r+0x1c>
 8009d72:	2301      	movs	r3, #1
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b0      	blx	r6
 8009d78:	1c41      	adds	r1, r0, #1
 8009d7a:	d1c8      	bne.n	8009d0e <__sflush_r+0x36>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0c5      	beq.n	8009d0e <__sflush_r+0x36>
 8009d82:	2b1d      	cmp	r3, #29
 8009d84:	d001      	beq.n	8009d8a <__sflush_r+0xb2>
 8009d86:	2b16      	cmp	r3, #22
 8009d88:	d101      	bne.n	8009d8e <__sflush_r+0xb6>
 8009d8a:	602f      	str	r7, [r5, #0]
 8009d8c:	e7b1      	b.n	8009cf2 <__sflush_r+0x1a>
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	e7ad      	b.n	8009cf4 <__sflush_r+0x1c>
 8009d98:	690f      	ldr	r7, [r1, #16]
 8009d9a:	2f00      	cmp	r7, #0
 8009d9c:	d0a9      	beq.n	8009cf2 <__sflush_r+0x1a>
 8009d9e:	0793      	lsls	r3, r2, #30
 8009da0:	680e      	ldr	r6, [r1, #0]
 8009da2:	bf08      	it	eq
 8009da4:	694b      	ldreq	r3, [r1, #20]
 8009da6:	600f      	str	r7, [r1, #0]
 8009da8:	bf18      	it	ne
 8009daa:	2300      	movne	r3, #0
 8009dac:	eba6 0807 	sub.w	r8, r6, r7
 8009db0:	608b      	str	r3, [r1, #8]
 8009db2:	f1b8 0f00 	cmp.w	r8, #0
 8009db6:	dd9c      	ble.n	8009cf2 <__sflush_r+0x1a>
 8009db8:	6a21      	ldr	r1, [r4, #32]
 8009dba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dbc:	4643      	mov	r3, r8
 8009dbe:	463a      	mov	r2, r7
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b0      	blx	r6
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	dc06      	bgt.n	8009dd6 <__sflush_r+0xfe>
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dce:	81a3      	strh	r3, [r4, #12]
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	e78e      	b.n	8009cf4 <__sflush_r+0x1c>
 8009dd6:	4407      	add	r7, r0
 8009dd8:	eba8 0800 	sub.w	r8, r8, r0
 8009ddc:	e7e9      	b.n	8009db2 <__sflush_r+0xda>
 8009dde:	bf00      	nop
 8009de0:	dfbffffe 	.word	0xdfbffffe

08009de4 <_fflush_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	690b      	ldr	r3, [r1, #16]
 8009de8:	4605      	mov	r5, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	b913      	cbnz	r3, 8009df4 <_fflush_r+0x10>
 8009dee:	2500      	movs	r5, #0
 8009df0:	4628      	mov	r0, r5
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	b118      	cbz	r0, 8009dfe <_fflush_r+0x1a>
 8009df6:	6a03      	ldr	r3, [r0, #32]
 8009df8:	b90b      	cbnz	r3, 8009dfe <_fflush_r+0x1a>
 8009dfa:	f7fe f8f1 	bl	8007fe0 <__sinit>
 8009dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0f3      	beq.n	8009dee <_fflush_r+0xa>
 8009e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e08:	07d0      	lsls	r0, r2, #31
 8009e0a:	d404      	bmi.n	8009e16 <_fflush_r+0x32>
 8009e0c:	0599      	lsls	r1, r3, #22
 8009e0e:	d402      	bmi.n	8009e16 <_fflush_r+0x32>
 8009e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e12:	f7fe faa2 	bl	800835a <__retarget_lock_acquire_recursive>
 8009e16:	4628      	mov	r0, r5
 8009e18:	4621      	mov	r1, r4
 8009e1a:	f7ff ff5d 	bl	8009cd8 <__sflush_r>
 8009e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e20:	07da      	lsls	r2, r3, #31
 8009e22:	4605      	mov	r5, r0
 8009e24:	d4e4      	bmi.n	8009df0 <_fflush_r+0xc>
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	059b      	lsls	r3, r3, #22
 8009e2a:	d4e1      	bmi.n	8009df0 <_fflush_r+0xc>
 8009e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e2e:	f7fe fa95 	bl	800835c <__retarget_lock_release_recursive>
 8009e32:	e7dd      	b.n	8009df0 <_fflush_r+0xc>

08009e34 <__swbuf_r>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	460e      	mov	r6, r1
 8009e38:	4614      	mov	r4, r2
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	b118      	cbz	r0, 8009e46 <__swbuf_r+0x12>
 8009e3e:	6a03      	ldr	r3, [r0, #32]
 8009e40:	b90b      	cbnz	r3, 8009e46 <__swbuf_r+0x12>
 8009e42:	f7fe f8cd 	bl	8007fe0 <__sinit>
 8009e46:	69a3      	ldr	r3, [r4, #24]
 8009e48:	60a3      	str	r3, [r4, #8]
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	071a      	lsls	r2, r3, #28
 8009e4e:	d525      	bpl.n	8009e9c <__swbuf_r+0x68>
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	b31b      	cbz	r3, 8009e9c <__swbuf_r+0x68>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	6922      	ldr	r2, [r4, #16]
 8009e58:	1a98      	subs	r0, r3, r2
 8009e5a:	6963      	ldr	r3, [r4, #20]
 8009e5c:	b2f6      	uxtb	r6, r6
 8009e5e:	4283      	cmp	r3, r0
 8009e60:	4637      	mov	r7, r6
 8009e62:	dc04      	bgt.n	8009e6e <__swbuf_r+0x3a>
 8009e64:	4621      	mov	r1, r4
 8009e66:	4628      	mov	r0, r5
 8009e68:	f7ff ffbc 	bl	8009de4 <_fflush_r>
 8009e6c:	b9e0      	cbnz	r0, 8009ea8 <__swbuf_r+0x74>
 8009e6e:	68a3      	ldr	r3, [r4, #8]
 8009e70:	3b01      	subs	r3, #1
 8009e72:	60a3      	str	r3, [r4, #8]
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	1c5a      	adds	r2, r3, #1
 8009e78:	6022      	str	r2, [r4, #0]
 8009e7a:	701e      	strb	r6, [r3, #0]
 8009e7c:	6962      	ldr	r2, [r4, #20]
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d004      	beq.n	8009e8e <__swbuf_r+0x5a>
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	07db      	lsls	r3, r3, #31
 8009e88:	d506      	bpl.n	8009e98 <__swbuf_r+0x64>
 8009e8a:	2e0a      	cmp	r6, #10
 8009e8c:	d104      	bne.n	8009e98 <__swbuf_r+0x64>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f7ff ffa7 	bl	8009de4 <_fflush_r>
 8009e96:	b938      	cbnz	r0, 8009ea8 <__swbuf_r+0x74>
 8009e98:	4638      	mov	r0, r7
 8009e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f000 f806 	bl	8009eb0 <__swsetup_r>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d0d5      	beq.n	8009e54 <__swbuf_r+0x20>
 8009ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8009eac:	e7f4      	b.n	8009e98 <__swbuf_r+0x64>
	...

08009eb0 <__swsetup_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4b2a      	ldr	r3, [pc, #168]	; (8009f5c <__swsetup_r+0xac>)
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	6818      	ldr	r0, [r3, #0]
 8009eb8:	460c      	mov	r4, r1
 8009eba:	b118      	cbz	r0, 8009ec4 <__swsetup_r+0x14>
 8009ebc:	6a03      	ldr	r3, [r0, #32]
 8009ebe:	b90b      	cbnz	r3, 8009ec4 <__swsetup_r+0x14>
 8009ec0:	f7fe f88e 	bl	8007fe0 <__sinit>
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eca:	0718      	lsls	r0, r3, #28
 8009ecc:	d422      	bmi.n	8009f14 <__swsetup_r+0x64>
 8009ece:	06d9      	lsls	r1, r3, #27
 8009ed0:	d407      	bmi.n	8009ee2 <__swsetup_r+0x32>
 8009ed2:	2309      	movs	r3, #9
 8009ed4:	602b      	str	r3, [r5, #0]
 8009ed6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee0:	e034      	b.n	8009f4c <__swsetup_r+0x9c>
 8009ee2:	0758      	lsls	r0, r3, #29
 8009ee4:	d512      	bpl.n	8009f0c <__swsetup_r+0x5c>
 8009ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ee8:	b141      	cbz	r1, 8009efc <__swsetup_r+0x4c>
 8009eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009eee:	4299      	cmp	r1, r3
 8009ef0:	d002      	beq.n	8009ef8 <__swsetup_r+0x48>
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f7fe fa4c 	bl	8008390 <_free_r>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	6363      	str	r3, [r4, #52]	; 0x34
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f02:	81a3      	strh	r3, [r4, #12]
 8009f04:	2300      	movs	r3, #0
 8009f06:	6063      	str	r3, [r4, #4]
 8009f08:	6923      	ldr	r3, [r4, #16]
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f043 0308 	orr.w	r3, r3, #8
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	6923      	ldr	r3, [r4, #16]
 8009f16:	b94b      	cbnz	r3, 8009f2c <__swsetup_r+0x7c>
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f22:	d003      	beq.n	8009f2c <__swsetup_r+0x7c>
 8009f24:	4621      	mov	r1, r4
 8009f26:	4628      	mov	r0, r5
 8009f28:	f000 f874 	bl	800a014 <__smakebuf_r>
 8009f2c:	89a0      	ldrh	r0, [r4, #12]
 8009f2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f32:	f010 0301 	ands.w	r3, r0, #1
 8009f36:	d00a      	beq.n	8009f4e <__swsetup_r+0x9e>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60a3      	str	r3, [r4, #8]
 8009f3c:	6963      	ldr	r3, [r4, #20]
 8009f3e:	425b      	negs	r3, r3
 8009f40:	61a3      	str	r3, [r4, #24]
 8009f42:	6923      	ldr	r3, [r4, #16]
 8009f44:	b943      	cbnz	r3, 8009f58 <__swsetup_r+0xa8>
 8009f46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f4a:	d1c4      	bne.n	8009ed6 <__swsetup_r+0x26>
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	0781      	lsls	r1, r0, #30
 8009f50:	bf58      	it	pl
 8009f52:	6963      	ldrpl	r3, [r4, #20]
 8009f54:	60a3      	str	r3, [r4, #8]
 8009f56:	e7f4      	b.n	8009f42 <__swsetup_r+0x92>
 8009f58:	2000      	movs	r0, #0
 8009f5a:	e7f7      	b.n	8009f4c <__swsetup_r+0x9c>
 8009f5c:	200001dc 	.word	0x200001dc

08009f60 <__assert_func>:
 8009f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f62:	4614      	mov	r4, r2
 8009f64:	461a      	mov	r2, r3
 8009f66:	4b09      	ldr	r3, [pc, #36]	; (8009f8c <__assert_func+0x2c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	68d8      	ldr	r0, [r3, #12]
 8009f6e:	b14c      	cbz	r4, 8009f84 <__assert_func+0x24>
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <__assert_func+0x30>)
 8009f72:	9100      	str	r1, [sp, #0]
 8009f74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f78:	4906      	ldr	r1, [pc, #24]	; (8009f94 <__assert_func+0x34>)
 8009f7a:	462b      	mov	r3, r5
 8009f7c:	f7fe f848 	bl	8008010 <fiprintf>
 8009f80:	f7fd f88c 	bl	800709c <abort>
 8009f84:	4b04      	ldr	r3, [pc, #16]	; (8009f98 <__assert_func+0x38>)
 8009f86:	461c      	mov	r4, r3
 8009f88:	e7f3      	b.n	8009f72 <__assert_func+0x12>
 8009f8a:	bf00      	nop
 8009f8c:	200001dc 	.word	0x200001dc
 8009f90:	0800a937 	.word	0x0800a937
 8009f94:	0800a944 	.word	0x0800a944
 8009f98:	0800a972 	.word	0x0800a972

08009f9c <_calloc_r>:
 8009f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f9e:	fba1 2402 	umull	r2, r4, r1, r2
 8009fa2:	b94c      	cbnz	r4, 8009fb8 <_calloc_r+0x1c>
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	9201      	str	r2, [sp, #4]
 8009fa8:	f7fd f8b0 	bl	800710c <_malloc_r>
 8009fac:	9a01      	ldr	r2, [sp, #4]
 8009fae:	4605      	mov	r5, r0
 8009fb0:	b930      	cbnz	r0, 8009fc0 <_calloc_r+0x24>
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	b003      	add	sp, #12
 8009fb6:	bd30      	pop	{r4, r5, pc}
 8009fb8:	220c      	movs	r2, #12
 8009fba:	6002      	str	r2, [r0, #0]
 8009fbc:	2500      	movs	r5, #0
 8009fbe:	e7f8      	b.n	8009fb2 <_calloc_r+0x16>
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	f7fe f8eb 	bl	800819c <memset>
 8009fc6:	e7f4      	b.n	8009fb2 <_calloc_r+0x16>

08009fc8 <__swhatbuf_r>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	460c      	mov	r4, r1
 8009fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd0:	2900      	cmp	r1, #0
 8009fd2:	b096      	sub	sp, #88	; 0x58
 8009fd4:	4615      	mov	r5, r2
 8009fd6:	461e      	mov	r6, r3
 8009fd8:	da0d      	bge.n	8009ff6 <__swhatbuf_r+0x2e>
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009fe0:	f04f 0100 	mov.w	r1, #0
 8009fe4:	bf0c      	ite	eq
 8009fe6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009fea:	2340      	movne	r3, #64	; 0x40
 8009fec:	2000      	movs	r0, #0
 8009fee:	6031      	str	r1, [r6, #0]
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	b016      	add	sp, #88	; 0x58
 8009ff4:	bd70      	pop	{r4, r5, r6, pc}
 8009ff6:	466a      	mov	r2, sp
 8009ff8:	f000 f848 	bl	800a08c <_fstat_r>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	dbec      	blt.n	8009fda <__swhatbuf_r+0x12>
 800a000:	9901      	ldr	r1, [sp, #4]
 800a002:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a006:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a00a:	4259      	negs	r1, r3
 800a00c:	4159      	adcs	r1, r3
 800a00e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a012:	e7eb      	b.n	8009fec <__swhatbuf_r+0x24>

0800a014 <__smakebuf_r>:
 800a014:	898b      	ldrh	r3, [r1, #12]
 800a016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a018:	079d      	lsls	r5, r3, #30
 800a01a:	4606      	mov	r6, r0
 800a01c:	460c      	mov	r4, r1
 800a01e:	d507      	bpl.n	800a030 <__smakebuf_r+0x1c>
 800a020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	6123      	str	r3, [r4, #16]
 800a028:	2301      	movs	r3, #1
 800a02a:	6163      	str	r3, [r4, #20]
 800a02c:	b002      	add	sp, #8
 800a02e:	bd70      	pop	{r4, r5, r6, pc}
 800a030:	ab01      	add	r3, sp, #4
 800a032:	466a      	mov	r2, sp
 800a034:	f7ff ffc8 	bl	8009fc8 <__swhatbuf_r>
 800a038:	9900      	ldr	r1, [sp, #0]
 800a03a:	4605      	mov	r5, r0
 800a03c:	4630      	mov	r0, r6
 800a03e:	f7fd f865 	bl	800710c <_malloc_r>
 800a042:	b948      	cbnz	r0, 800a058 <__smakebuf_r+0x44>
 800a044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a048:	059a      	lsls	r2, r3, #22
 800a04a:	d4ef      	bmi.n	800a02c <__smakebuf_r+0x18>
 800a04c:	f023 0303 	bic.w	r3, r3, #3
 800a050:	f043 0302 	orr.w	r3, r3, #2
 800a054:	81a3      	strh	r3, [r4, #12]
 800a056:	e7e3      	b.n	800a020 <__smakebuf_r+0xc>
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	6020      	str	r0, [r4, #0]
 800a05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a060:	81a3      	strh	r3, [r4, #12]
 800a062:	9b00      	ldr	r3, [sp, #0]
 800a064:	6163      	str	r3, [r4, #20]
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	6120      	str	r0, [r4, #16]
 800a06a:	b15b      	cbz	r3, 800a084 <__smakebuf_r+0x70>
 800a06c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a070:	4630      	mov	r0, r6
 800a072:	f000 f81d 	bl	800a0b0 <_isatty_r>
 800a076:	b128      	cbz	r0, 800a084 <__smakebuf_r+0x70>
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	f023 0303 	bic.w	r3, r3, #3
 800a07e:	f043 0301 	orr.w	r3, r3, #1
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	431d      	orrs	r5, r3
 800a088:	81a5      	strh	r5, [r4, #12]
 800a08a:	e7cf      	b.n	800a02c <__smakebuf_r+0x18>

0800a08c <_fstat_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d07      	ldr	r5, [pc, #28]	; (800a0ac <_fstat_r+0x20>)
 800a090:	2300      	movs	r3, #0
 800a092:	4604      	mov	r4, r0
 800a094:	4608      	mov	r0, r1
 800a096:	4611      	mov	r1, r2
 800a098:	602b      	str	r3, [r5, #0]
 800a09a:	f7f9 ffe2 	bl	8004062 <_fstat>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	d102      	bne.n	800a0a8 <_fstat_r+0x1c>
 800a0a2:	682b      	ldr	r3, [r5, #0]
 800a0a4:	b103      	cbz	r3, 800a0a8 <_fstat_r+0x1c>
 800a0a6:	6023      	str	r3, [r4, #0]
 800a0a8:	bd38      	pop	{r3, r4, r5, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20001510 	.word	0x20001510

0800a0b0 <_isatty_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d06      	ldr	r5, [pc, #24]	; (800a0cc <_isatty_r+0x1c>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	f7f9 ffe1 	bl	8004082 <_isatty>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_isatty_r+0x1a>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_isatty_r+0x1a>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	20001510 	.word	0x20001510

0800a0d0 <_init>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	bf00      	nop
 800a0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d6:	bc08      	pop	{r3}
 800a0d8:	469e      	mov	lr, r3
 800a0da:	4770      	bx	lr

0800a0dc <_fini>:
 800a0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0de:	bf00      	nop
 800a0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e2:	bc08      	pop	{r3}
 800a0e4:	469e      	mov	lr, r3
 800a0e6:	4770      	bx	lr

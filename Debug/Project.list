
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800b468  0800b468  0001b468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b998  0800b998  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b998  0800b998  0001b998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9a0  0800b9a0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b9a0  0800b9a0  0001b9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b9a8  0800b9a8  0001b9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800b9b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          000056f0  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005794  20005794  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039c6f  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005df2  00000000  00000000  00059d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013c8  00000000  00000000  0005fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f44  00000000  00000000  00060f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029d40  00000000  00000000  00061e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d484  00000000  00000000  0008bbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e945c  00000000  00000000  000a9048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b08  00000000  00000000  001924a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00198fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b450 	.word	0x0800b450

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800b450 	.word	0x0800b450

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000580:	2204      	movs	r2, #4
 8000582:	4909      	ldr	r1, [pc, #36]	; (80005a8 <default_ip_assign+0x2c>)
 8000584:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000588:	f001 fc72 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 800058c:	2204      	movs	r2, #4
 800058e:	4907      	ldr	r1, [pc, #28]	; (80005ac <default_ip_assign+0x30>)
 8000590:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000594:	f001 fc6c 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8000598:	2204      	movs	r2, #4
 800059a:	4905      	ldr	r1, [pc, #20]	; (80005b0 <default_ip_assign+0x34>)
 800059c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005a0:	f001 fc66 	bl	8001e70 <WIZCHIP_WRITE_BUF>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000cc 	.word	0x200000cc
 80005ac:	200000d4 	.word	0x200000d4
 80005b0:	200000d0 	.word	0x200000d0

080005b4 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	2000      	movs	r0, #0
 80005bc:	f001 fbaa 	bl	8001d14 <WIZCHIP_WRITE>
   getMR(); // for delay
 80005c0:	2000      	movs	r0, #0
 80005c2:	f001 fb5b 	bl	8001c7c <WIZCHIP_READ>
   default_ip_assign();
 80005c6:	f7ff ffd9 	bl	800057c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 80005ca:	2206      	movs	r2, #6
 80005cc:	4903      	ldr	r1, [pc, #12]	; (80005dc <default_ip_update+0x28>)
 80005ce:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80005d2:	f001 fc4d 	bl	8001e70 <WIZCHIP_WRITE_BUF>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000ec 	.word	0x200000ec

080005e0 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	2000      	movs	r0, #0
 80005e8:	f001 fb94 	bl	8001d14 <WIZCHIP_WRITE>
	getMR(); // for delay
 80005ec:	2000      	movs	r0, #0
 80005ee:	f001 fb45 	bl	8001c7c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80005f2:	2206      	movs	r2, #6
 80005f4:	4903      	ldr	r1, [pc, #12]	; (8000604 <default_ip_conflict+0x24>)
 80005f6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80005fa:	f001 fc39 	bl	8001e70 <WIZCHIP_WRITE_BUF>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000ec 	.word	0x200000ec

08000608 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <reg_dhcp_cbfunc+0x50>)
 8000616:	4a11      	ldr	r2, [pc, #68]	; (800065c <reg_dhcp_cbfunc+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <reg_dhcp_cbfunc+0x58>)
 800061c:	4a11      	ldr	r2, [pc, #68]	; (8000664 <reg_dhcp_cbfunc+0x5c>)
 800061e:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <reg_dhcp_cbfunc+0x60>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <reg_dhcp_cbfunc+0x64>)
 8000624:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <reg_dhcp_cbfunc+0x2a>
 800062c:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <reg_dhcp_cbfunc+0x50>)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <reg_dhcp_cbfunc+0x36>
 8000638:	4a09      	ldr	r2, [pc, #36]	; (8000660 <reg_dhcp_cbfunc+0x58>)
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <reg_dhcp_cbfunc+0x42>
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <reg_dhcp_cbfunc+0x60>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000010 	.word	0x20000010
 800065c:	0800057d 	.word	0x0800057d
 8000660:	20000014 	.word	0x20000014
 8000664:	080005b5 	.word	0x080005b5
 8000668:	20000018 	.word	0x20000018
 800066c:	080005e1 	.word	0x080005e1

08000670 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8000676:	463b      	mov	r3, r7
 8000678:	2206      	movs	r2, #6
 800067a:	4619      	mov	r1, r3
 800067c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000680:	f001 fb96 	bl	8001db0 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8000684:	4b72      	ldr	r3, [pc, #456]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 800068c:	4b70      	ldr	r3, [pc, #448]	; (8000850 <makeDHCPMSG+0x1e0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2201      	movs	r2, #1
 8000692:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8000694:	4b6e      	ldr	r3, [pc, #440]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2206      	movs	r2, #6
 800069a:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 800069c:	4b6c      	ldr	r3, [pc, #432]	; (8000850 <makeDHCPMSG+0x1e0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 80006a4:	4b6a      	ldr	r3, [pc, #424]	; (8000850 <makeDHCPMSG+0x1e0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3304      	adds	r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80006ac:	4b69      	ldr	r3, [pc, #420]	; (8000854 <makeDHCPMSG+0x1e4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	0e1b      	lsrs	r3, r3, #24
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80006b8:	4b66      	ldr	r3, [pc, #408]	; (8000854 <makeDHCPMSG+0x1e4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	0c1a      	lsrs	r2, r3, #16
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	3301      	adds	r3, #1
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80006c6:	4b63      	ldr	r3, [pc, #396]	; (8000854 <makeDHCPMSG+0x1e4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	0a1a      	lsrs	r2, r3, #8
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	3302      	adds	r3, #2
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80006d4:	4b5f      	ldr	r3, [pc, #380]	; (8000854 <makeDHCPMSG+0x1e4>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3303      	adds	r3, #3
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80006e0:	4b5b      	ldr	r3, [pc, #364]	; (8000850 <makeDHCPMSG+0x1e0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2200      	movs	r2, #0
 80006e6:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80006e8:	4b59      	ldr	r3, [pc, #356]	; (8000850 <makeDHCPMSG+0x1e0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	330a      	adds	r3, #10
 80006ee:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	3301      	adds	r3, #1
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80006fe:	4b54      	ldr	r3, [pc, #336]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2200      	movs	r2, #0
 8000704:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8000706:	4b52      	ldr	r3, [pc, #328]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 800070e:	4b50      	ldr	r3, [pc, #320]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8000716:	4b4e      	ldr	r3, [pc, #312]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2200      	movs	r2, #0
 800071c:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 800071e:	4b4c      	ldr	r3, [pc, #304]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2200      	movs	r2, #0
 8000724:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8000726:	4b4a      	ldr	r3, [pc, #296]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2200      	movs	r2, #0
 800072c:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 800072e:	4b48      	ldr	r3, [pc, #288]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8000736:	4b46      	ldr	r3, [pc, #280]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2200      	movs	r2, #0
 800073c:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 800073e:	4b44      	ldr	r3, [pc, #272]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2200      	movs	r2, #0
 8000744:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8000746:	4b42      	ldr	r3, [pc, #264]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2200      	movs	r2, #0
 800074c:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 800074e:	4b40      	ldr	r3, [pc, #256]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2200      	movs	r2, #0
 8000754:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8000756:	4b3e      	ldr	r3, [pc, #248]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2200      	movs	r2, #0
 800075c:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 800075e:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8000766:	4b3a      	ldr	r3, [pc, #232]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 800076e:	4b38      	ldr	r3, [pc, #224]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8000776:	4b36      	ldr	r3, [pc, #216]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a35      	ldr	r2, [pc, #212]	; (8000858 <makeDHCPMSG+0x1e8>)
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8000788:	4b31      	ldr	r3, [pc, #196]	; (8000850 <makeDHCPMSG+0x1e0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a32      	ldr	r2, [pc, #200]	; (8000858 <makeDHCPMSG+0x1e8>)
 800078e:	7852      	ldrb	r2, [r2, #1]
 8000790:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a30      	ldr	r2, [pc, #192]	; (8000858 <makeDHCPMSG+0x1e8>)
 8000798:	7892      	ldrb	r2, [r2, #2]
 800079a:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 800079c:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <makeDHCPMSG+0x1e0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a2d      	ldr	r2, [pc, #180]	; (8000858 <makeDHCPMSG+0x1e8>)
 80007a2:	78d2      	ldrb	r2, [r2, #3]
 80007a4:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <makeDHCPMSG+0x1e0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a2b      	ldr	r2, [pc, #172]	; (8000858 <makeDHCPMSG+0x1e8>)
 80007ac:	7912      	ldrb	r2, [r2, #4]
 80007ae:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80007b2:	4b27      	ldr	r3, [pc, #156]	; (8000850 <makeDHCPMSG+0x1e0>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a28      	ldr	r2, [pc, #160]	; (8000858 <makeDHCPMSG+0x1e8>)
 80007b8:	7952      	ldrb	r2, [r2, #5]
 80007ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80007be:	2306      	movs	r3, #6
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	e008      	b.n	80007d6 <makeDHCPMSG+0x166>
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <makeDHCPMSG+0x1e0>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	4413      	add	r3, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	771a      	strb	r2, [r3, #28]
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	3301      	adds	r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d9f3      	bls.n	80007c4 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e009      	b.n	80007f6 <makeDHCPMSG+0x186>
 80007e2:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <makeDHCPMSG+0x1e0>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4413      	add	r3, r2
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	3301      	adds	r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b3f      	cmp	r3, #63	; 0x3f
 80007fa:	d9f2      	bls.n	80007e2 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	e009      	b.n	8000816 <makeDHCPMSG+0x1a6>
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	4413      	add	r3, r2
 800080a:	2200      	movs	r2, #0
 800080c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	3301      	adds	r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	2b00      	cmp	r3, #0
 800081c:	daf1      	bge.n	8000802 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2263      	movs	r2, #99	; 0x63
 8000824:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <makeDHCPMSG+0x1e0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2282      	movs	r2, #130	; 0x82
 800082e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <makeDHCPMSG+0x1e0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2253      	movs	r2, #83	; 0x53
 8000838:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <makeDHCPMSG+0x1e0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2263      	movs	r2, #99	; 0x63
 8000842:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000e8 	.word	0x200000e8
 8000854:	200000e4 	.word	0x200000e4
 8000858:	200000ec 	.word	0x200000ec

0800085c <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8000866:	f7ff ff03 	bl	8000670 <makeDHCPMSG>

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800086a:	2304      	movs	r3, #4
 800086c:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800086e:	4ba9      	ldr	r3, [pc, #676]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	88bb      	ldrh	r3, [r7, #4]
 8000874:	1c59      	adds	r1, r3, #1
 8000876:	80b9      	strh	r1, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	2235      	movs	r2, #53	; 0x35
 800087c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000880:	4ba4      	ldr	r3, [pc, #656]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	88bb      	ldrh	r3, [r7, #4]
 8000886:	1c59      	adds	r1, r3, #1
 8000888:	80b9      	strh	r1, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	2201      	movs	r2, #1
 800088e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8000892:	4ba0      	ldr	r3, [pc, #640]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	88bb      	ldrh	r3, [r7, #4]
 8000898:	1c59      	adds	r1, r3, #1
 800089a:	80b9      	strh	r1, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	2201      	movs	r2, #1
 80008a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80008a4:	4b9b      	ldr	r3, [pc, #620]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	88bb      	ldrh	r3, [r7, #4]
 80008aa:	1c59      	adds	r1, r3, #1
 80008ac:	80b9      	strh	r1, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	223d      	movs	r2, #61	; 0x3d
 80008b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80008b6:	4b97      	ldr	r3, [pc, #604]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	88bb      	ldrh	r3, [r7, #4]
 80008bc:	1c59      	adds	r1, r3, #1
 80008be:	80b9      	strh	r1, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	2207      	movs	r2, #7
 80008c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80008c8:	4b92      	ldr	r3, [pc, #584]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	88bb      	ldrh	r3, [r7, #4]
 80008ce:	1c59      	adds	r1, r3, #1
 80008d0:	80b9      	strh	r1, [r7, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	2201      	movs	r2, #1
 80008d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80008da:	4b8e      	ldr	r3, [pc, #568]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	88bb      	ldrh	r3, [r7, #4]
 80008e0:	1c59      	adds	r1, r3, #1
 80008e2:	80b9      	strh	r1, [r7, #4]
 80008e4:	4618      	mov	r0, r3
 80008e6:	4b8c      	ldr	r3, [pc, #560]	; (8000b18 <send_DHCP_DISCOVER+0x2bc>)
 80008e8:	7819      	ldrb	r1, [r3, #0]
 80008ea:	1813      	adds	r3, r2, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80008f2:	4b88      	ldr	r3, [pc, #544]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	88bb      	ldrh	r3, [r7, #4]
 80008f8:	1c59      	adds	r1, r3, #1
 80008fa:	80b9      	strh	r1, [r7, #4]
 80008fc:	4618      	mov	r0, r3
 80008fe:	4b86      	ldr	r3, [pc, #536]	; (8000b18 <send_DHCP_DISCOVER+0x2bc>)
 8000900:	7859      	ldrb	r1, [r3, #1]
 8000902:	1813      	adds	r3, r2, r0
 8000904:	460a      	mov	r2, r1
 8000906:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800090a:	4b82      	ldr	r3, [pc, #520]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	88bb      	ldrh	r3, [r7, #4]
 8000910:	1c59      	adds	r1, r3, #1
 8000912:	80b9      	strh	r1, [r7, #4]
 8000914:	4618      	mov	r0, r3
 8000916:	4b80      	ldr	r3, [pc, #512]	; (8000b18 <send_DHCP_DISCOVER+0x2bc>)
 8000918:	7899      	ldrb	r1, [r3, #2]
 800091a:	1813      	adds	r3, r2, r0
 800091c:	460a      	mov	r2, r1
 800091e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8000922:	4b7c      	ldr	r3, [pc, #496]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	1c59      	adds	r1, r3, #1
 800092a:	80b9      	strh	r1, [r7, #4]
 800092c:	4618      	mov	r0, r3
 800092e:	4b7a      	ldr	r3, [pc, #488]	; (8000b18 <send_DHCP_DISCOVER+0x2bc>)
 8000930:	78d9      	ldrb	r1, [r3, #3]
 8000932:	1813      	adds	r3, r2, r0
 8000934:	460a      	mov	r2, r1
 8000936:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800093a:	4b76      	ldr	r3, [pc, #472]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	88bb      	ldrh	r3, [r7, #4]
 8000940:	1c59      	adds	r1, r3, #1
 8000942:	80b9      	strh	r1, [r7, #4]
 8000944:	4618      	mov	r0, r3
 8000946:	4b74      	ldr	r3, [pc, #464]	; (8000b18 <send_DHCP_DISCOVER+0x2bc>)
 8000948:	7919      	ldrb	r1, [r3, #4]
 800094a:	1813      	adds	r3, r2, r0
 800094c:	460a      	mov	r2, r1
 800094e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8000952:	4b70      	ldr	r3, [pc, #448]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	88bb      	ldrh	r3, [r7, #4]
 8000958:	1c59      	adds	r1, r3, #1
 800095a:	80b9      	strh	r1, [r7, #4]
 800095c:	4618      	mov	r0, r3
 800095e:	4b6e      	ldr	r3, [pc, #440]	; (8000b18 <send_DHCP_DISCOVER+0x2bc>)
 8000960:	7959      	ldrb	r1, [r3, #5]
 8000962:	1813      	adds	r3, r2, r0
 8000964:	460a      	mov	r2, r1
 8000966:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800096a:	4b6a      	ldr	r3, [pc, #424]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	1c59      	adds	r1, r3, #1
 8000972:	80b9      	strh	r1, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	220c      	movs	r2, #12
 8000978:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 800097c:	4b65      	ldr	r3, [pc, #404]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	88bb      	ldrh	r3, [r7, #4]
 8000982:	1c59      	adds	r1, r3, #1
 8000984:	80b9      	strh	r1, [r7, #4]
 8000986:	4413      	add	r3, r2
 8000988:	2200      	movs	r2, #0
 800098a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	e00f      	b.n	80009b4 <send_DHCP_DISCOVER+0x158>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8000994:	88f9      	ldrh	r1, [r7, #6]
 8000996:	4b5f      	ldr	r3, [pc, #380]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	88bb      	ldrh	r3, [r7, #4]
 800099c:	1c58      	adds	r0, r3, #1
 800099e:	80b8      	strh	r0, [r7, #4]
 80009a0:	4618      	mov	r0, r3
 80009a2:	4b5e      	ldr	r3, [pc, #376]	; (8000b1c <send_DHCP_DISCOVER+0x2c0>)
 80009a4:	5c59      	ldrb	r1, [r3, r1]
 80009a6:	1813      	adds	r3, r2, r0
 80009a8:	460a      	mov	r2, r1
 80009aa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	3301      	adds	r3, #1
 80009b2:	80fb      	strh	r3, [r7, #6]
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	4a59      	ldr	r2, [pc, #356]	; (8000b1c <send_DHCP_DISCOVER+0x2c0>)
 80009b8:	5cd3      	ldrb	r3, [r2, r3]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1ea      	bne.n	8000994 <send_DHCP_DISCOVER+0x138>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80009be:	4b55      	ldr	r3, [pc, #340]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	88bb      	ldrh	r3, [r7, #4]
 80009c4:	1c59      	adds	r1, r3, #1
 80009c6:	80b9      	strh	r1, [r7, #4]
 80009c8:	4618      	mov	r0, r3
 80009ca:	4b53      	ldr	r3, [pc, #332]	; (8000b18 <send_DHCP_DISCOVER+0x2bc>)
 80009cc:	78d9      	ldrb	r1, [r3, #3]
 80009ce:	1813      	adds	r3, r2, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80009d6:	4b4f      	ldr	r3, [pc, #316]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	1c59      	adds	r1, r3, #1
 80009de:	80b9      	strh	r1, [r7, #4]
 80009e0:	4618      	mov	r0, r3
 80009e2:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <send_DHCP_DISCOVER+0x2bc>)
 80009e4:	7919      	ldrb	r1, [r3, #4]
 80009e6:	1813      	adds	r3, r2, r0
 80009e8:	460a      	mov	r2, r1
 80009ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80009ee:	4b49      	ldr	r3, [pc, #292]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	88bb      	ldrh	r3, [r7, #4]
 80009f4:	1c59      	adds	r1, r3, #1
 80009f6:	80b9      	strh	r1, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	4b47      	ldr	r3, [pc, #284]	; (8000b18 <send_DHCP_DISCOVER+0x2bc>)
 80009fc:	7959      	ldrb	r1, [r3, #5]
 80009fe:	1813      	adds	r3, r2, r0
 8000a00:	460a      	mov	r2, r1
 8000a02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	b2d9      	uxtb	r1, r3
 8000a0a:	4b42      	ldr	r3, [pc, #264]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	88b8      	ldrh	r0, [r7, #4]
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	3304      	adds	r3, #4
 8000a14:	1ac3      	subs	r3, r0, r3
 8000a16:	3103      	adds	r1, #3
 8000a18:	b2c9      	uxtb	r1, r1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8000a22:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	1c59      	adds	r1, r3, #1
 8000a2a:	80b9      	strh	r1, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	2237      	movs	r2, #55	; 0x37
 8000a30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8000a34:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	1c59      	adds	r1, r3, #1
 8000a3c:	80b9      	strh	r1, [r7, #4]
 8000a3e:	4413      	add	r3, r2
 8000a40:	2206      	movs	r2, #6
 8000a42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	1c59      	adds	r1, r3, #1
 8000a4e:	80b9      	strh	r1, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	2201      	movs	r2, #1
 8000a54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8000a58:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	88bb      	ldrh	r3, [r7, #4]
 8000a5e:	1c59      	adds	r1, r3, #1
 8000a60:	80b9      	strh	r1, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	2203      	movs	r2, #3
 8000a66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	88bb      	ldrh	r3, [r7, #4]
 8000a70:	1c59      	adds	r1, r3, #1
 8000a72:	80b9      	strh	r1, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	2206      	movs	r2, #6
 8000a78:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	1c59      	adds	r1, r3, #1
 8000a84:	80b9      	strh	r1, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	220f      	movs	r2, #15
 8000a8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	1c59      	adds	r1, r3, #1
 8000a96:	80b9      	strh	r1, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	223a      	movs	r2, #58	; 0x3a
 8000a9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	88bb      	ldrh	r3, [r7, #4]
 8000aa6:	1c59      	adds	r1, r3, #1
 8000aa8:	80b9      	strh	r1, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	223b      	movs	r2, #59	; 0x3b
 8000aae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	1c59      	adds	r1, r3, #1
 8000aba:	80b9      	strh	r1, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	22ff      	movs	r2, #255	; 0xff
 8000ac0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	80fb      	strh	r3, [r7, #6]
 8000ac8:	e009      	b.n	8000ade <send_DHCP_DISCOVER+0x282>
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	3301      	adds	r3, #1
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8000ae4:	d3f1      	bcc.n	8000aca <send_DHCP_DISCOVER+0x26e>

	// send broadcasting packet
	ip[0] = 255;
 8000ae6:	23ff      	movs	r3, #255	; 0xff
 8000ae8:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8000aea:	23ff      	movs	r3, #255	; 0xff
 8000aec:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8000aee:	23ff      	movs	r3, #255	; 0xff
 8000af0:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8000af2:	23ff      	movs	r3, #255	; 0xff
 8000af4:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <send_DHCP_DISCOVER+0x2c4>)
 8000af8:	7818      	ldrb	r0, [r3, #0]
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <send_DHCP_DISCOVER+0x2b8>)
 8000afc:	6819      	ldr	r1, [r3, #0]
 8000afe:	463b      	mov	r3, r7
 8000b00:	2243      	movs	r2, #67	; 0x43
 8000b02:	9200      	str	r2, [sp, #0]
 8000b04:	f44f 7209 	mov.w	r2, #548	; 0x224
 8000b08:	f002 f82c 	bl	8002b64 <sendto>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200000e8 	.word	0x200000e8
 8000b18:	200000ec 	.word	0x200000ec
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	200000c0 	.word	0x200000c0

08000b24 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8000b2e:	f7ff fd9f 	bl	8000670 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <send_DHCP_REQUEST+0x7c>)
 8000b34:	f993 3000 	ldrsb.w	r3, [r3]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d004      	beq.n	8000b46 <send_DHCP_REQUEST+0x22>
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <send_DHCP_REQUEST+0x7c>)
 8000b3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	d134      	bne.n	8000bb0 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <send_DHCP_REQUEST+0x80>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	330a      	adds	r3, #10
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <send_DHCP_REQUEST+0x80>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	330a      	adds	r3, #10
 8000b56:	3301      	adds	r3, #1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <send_DHCP_REQUEST+0x80>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <send_DHCP_REQUEST+0x84>)
 8000b62:	7812      	ldrb	r2, [r2, #0]
 8000b64:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <send_DHCP_REQUEST+0x80>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <send_DHCP_REQUEST+0x84>)
 8000b6c:	7852      	ldrb	r2, [r2, #1]
 8000b6e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <send_DHCP_REQUEST+0x80>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <send_DHCP_REQUEST+0x84>)
 8000b76:	7892      	ldrb	r2, [r2, #2]
 8000b78:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <send_DHCP_REQUEST+0x80>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <send_DHCP_REQUEST+0x84>)
 8000b80:	78d2      	ldrb	r2, [r2, #3]
 8000b82:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <send_DHCP_REQUEST+0x88>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <send_DHCP_REQUEST+0x88>)
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <send_DHCP_REQUEST+0x88>)
 8000b92:	789b      	ldrb	r3, [r3, #2]
 8000b94:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <send_DHCP_REQUEST+0x88>)
 8000b98:	78db      	ldrb	r3, [r3, #3]
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	e010      	b.n	8000bc0 <send_DHCP_REQUEST+0x9c>
 8000b9e:	bf00      	nop
 8000ba0:	200000dc 	.word	0x200000dc
 8000ba4:	200000e8 	.word	0x200000e8
 8000ba8:	200000cc 	.word	0x200000cc
 8000bac:	200000c4 	.word	0x200000c4
   }
   else
   {
   	ip[0] = 255;
 8000bb0:	23ff      	movs	r3, #255	; 0xff
 8000bb2:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8000bb4:	23ff      	movs	r3, #255	; 0xff
 8000bb6:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8000bb8:	23ff      	movs	r3, #255	; 0xff
 8000bba:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8000bbc:	23ff      	movs	r3, #255	; 0xff
 8000bbe:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8000bc4:	4b8d      	ldr	r3, [pc, #564]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	897b      	ldrh	r3, [r7, #10]
 8000bca:	1c59      	adds	r1, r3, #1
 8000bcc:	8179      	strh	r1, [r7, #10]
 8000bce:	4413      	add	r3, r2
 8000bd0:	2235      	movs	r2, #53	; 0x35
 8000bd2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000bd6:	4b89      	ldr	r3, [pc, #548]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	897b      	ldrh	r3, [r7, #10]
 8000bdc:	1c59      	adds	r1, r3, #1
 8000bde:	8179      	strh	r1, [r7, #10]
 8000be0:	4413      	add	r3, r2
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8000be8:	4b84      	ldr	r3, [pc, #528]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	897b      	ldrh	r3, [r7, #10]
 8000bee:	1c59      	adds	r1, r3, #1
 8000bf0:	8179      	strh	r1, [r7, #10]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8000bfa:	4b80      	ldr	r3, [pc, #512]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	897b      	ldrh	r3, [r7, #10]
 8000c00:	1c59      	adds	r1, r3, #1
 8000c02:	8179      	strh	r1, [r7, #10]
 8000c04:	4413      	add	r3, r2
 8000c06:	223d      	movs	r2, #61	; 0x3d
 8000c08:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8000c0c:	4b7b      	ldr	r3, [pc, #492]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	897b      	ldrh	r3, [r7, #10]
 8000c12:	1c59      	adds	r1, r3, #1
 8000c14:	8179      	strh	r1, [r7, #10]
 8000c16:	4413      	add	r3, r2
 8000c18:	2207      	movs	r2, #7
 8000c1a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8000c1e:	4b77      	ldr	r3, [pc, #476]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	897b      	ldrh	r3, [r7, #10]
 8000c24:	1c59      	adds	r1, r3, #1
 8000c26:	8179      	strh	r1, [r7, #10]
 8000c28:	4413      	add	r3, r2
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8000c30:	4b72      	ldr	r3, [pc, #456]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	897b      	ldrh	r3, [r7, #10]
 8000c36:	1c59      	adds	r1, r3, #1
 8000c38:	8179      	strh	r1, [r7, #10]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	4b70      	ldr	r3, [pc, #448]	; (8000e00 <send_DHCP_REQUEST+0x2dc>)
 8000c3e:	7819      	ldrb	r1, [r3, #0]
 8000c40:	1813      	adds	r3, r2, r0
 8000c42:	460a      	mov	r2, r1
 8000c44:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8000c48:	4b6c      	ldr	r3, [pc, #432]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	897b      	ldrh	r3, [r7, #10]
 8000c4e:	1c59      	adds	r1, r3, #1
 8000c50:	8179      	strh	r1, [r7, #10]
 8000c52:	4618      	mov	r0, r3
 8000c54:	4b6a      	ldr	r3, [pc, #424]	; (8000e00 <send_DHCP_REQUEST+0x2dc>)
 8000c56:	7859      	ldrb	r1, [r3, #1]
 8000c58:	1813      	adds	r3, r2, r0
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8000c60:	4b66      	ldr	r3, [pc, #408]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	897b      	ldrh	r3, [r7, #10]
 8000c66:	1c59      	adds	r1, r3, #1
 8000c68:	8179      	strh	r1, [r7, #10]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	4b64      	ldr	r3, [pc, #400]	; (8000e00 <send_DHCP_REQUEST+0x2dc>)
 8000c6e:	7899      	ldrb	r1, [r3, #2]
 8000c70:	1813      	adds	r3, r2, r0
 8000c72:	460a      	mov	r2, r1
 8000c74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8000c78:	4b60      	ldr	r3, [pc, #384]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	897b      	ldrh	r3, [r7, #10]
 8000c7e:	1c59      	adds	r1, r3, #1
 8000c80:	8179      	strh	r1, [r7, #10]
 8000c82:	4618      	mov	r0, r3
 8000c84:	4b5e      	ldr	r3, [pc, #376]	; (8000e00 <send_DHCP_REQUEST+0x2dc>)
 8000c86:	78d9      	ldrb	r1, [r3, #3]
 8000c88:	1813      	adds	r3, r2, r0
 8000c8a:	460a      	mov	r2, r1
 8000c8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8000c90:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	897b      	ldrh	r3, [r7, #10]
 8000c96:	1c59      	adds	r1, r3, #1
 8000c98:	8179      	strh	r1, [r7, #10]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	4b58      	ldr	r3, [pc, #352]	; (8000e00 <send_DHCP_REQUEST+0x2dc>)
 8000c9e:	7919      	ldrb	r1, [r3, #4]
 8000ca0:	1813      	adds	r3, r2, r0
 8000ca2:	460a      	mov	r2, r1
 8000ca4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8000ca8:	4b54      	ldr	r3, [pc, #336]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	897b      	ldrh	r3, [r7, #10]
 8000cae:	1c59      	adds	r1, r3, #1
 8000cb0:	8179      	strh	r1, [r7, #10]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	4b52      	ldr	r3, [pc, #328]	; (8000e00 <send_DHCP_REQUEST+0x2dc>)
 8000cb6:	7959      	ldrb	r1, [r3, #5]
 8000cb8:	1813      	adds	r3, r2, r0
 8000cba:	460a      	mov	r2, r1
 8000cbc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	f040 8084 	bne.w	8000dd0 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8000cc8:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	897b      	ldrh	r3, [r7, #10]
 8000cce:	1c59      	adds	r1, r3, #1
 8000cd0:	8179      	strh	r1, [r7, #10]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	2232      	movs	r2, #50	; 0x32
 8000cd6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8000cda:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	897b      	ldrh	r3, [r7, #10]
 8000ce0:	1c59      	adds	r1, r3, #1
 8000ce2:	8179      	strh	r1, [r7, #10]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8000cec:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	897b      	ldrh	r3, [r7, #10]
 8000cf2:	1c59      	adds	r1, r3, #1
 8000cf4:	8179      	strh	r1, [r7, #10]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <send_DHCP_REQUEST+0x2e0>)
 8000cfa:	7819      	ldrb	r1, [r3, #0]
 8000cfc:	1813      	adds	r3, r2, r0
 8000cfe:	460a      	mov	r2, r1
 8000d00:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8000d04:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	897b      	ldrh	r3, [r7, #10]
 8000d0a:	1c59      	adds	r1, r3, #1
 8000d0c:	8179      	strh	r1, [r7, #10]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <send_DHCP_REQUEST+0x2e0>)
 8000d12:	7859      	ldrb	r1, [r3, #1]
 8000d14:	1813      	adds	r3, r2, r0
 8000d16:	460a      	mov	r2, r1
 8000d18:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8000d1c:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	897b      	ldrh	r3, [r7, #10]
 8000d22:	1c59      	adds	r1, r3, #1
 8000d24:	8179      	strh	r1, [r7, #10]
 8000d26:	4618      	mov	r0, r3
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <send_DHCP_REQUEST+0x2e0>)
 8000d2a:	7899      	ldrb	r1, [r3, #2]
 8000d2c:	1813      	adds	r3, r2, r0
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8000d34:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	897b      	ldrh	r3, [r7, #10]
 8000d3a:	1c59      	adds	r1, r3, #1
 8000d3c:	8179      	strh	r1, [r7, #10]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <send_DHCP_REQUEST+0x2e0>)
 8000d42:	78d9      	ldrb	r1, [r3, #3]
 8000d44:	1813      	adds	r3, r2, r0
 8000d46:	460a      	mov	r2, r1
 8000d48:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	897b      	ldrh	r3, [r7, #10]
 8000d52:	1c59      	adds	r1, r3, #1
 8000d54:	8179      	strh	r1, [r7, #10]
 8000d56:	4413      	add	r3, r2
 8000d58:	2236      	movs	r2, #54	; 0x36
 8000d5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	897b      	ldrh	r3, [r7, #10]
 8000d64:	1c59      	adds	r1, r3, #1
 8000d66:	8179      	strh	r1, [r7, #10]
 8000d68:	4413      	add	r3, r2
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	897b      	ldrh	r3, [r7, #10]
 8000d76:	1c59      	adds	r1, r3, #1
 8000d78:	8179      	strh	r1, [r7, #10]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <send_DHCP_REQUEST+0x2e4>)
 8000d7e:	7819      	ldrb	r1, [r3, #0]
 8000d80:	1813      	adds	r3, r2, r0
 8000d82:	460a      	mov	r2, r1
 8000d84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	897b      	ldrh	r3, [r7, #10]
 8000d8e:	1c59      	adds	r1, r3, #1
 8000d90:	8179      	strh	r1, [r7, #10]
 8000d92:	4618      	mov	r0, r3
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <send_DHCP_REQUEST+0x2e4>)
 8000d96:	7859      	ldrb	r1, [r3, #1]
 8000d98:	1813      	adds	r3, r2, r0
 8000d9a:	460a      	mov	r2, r1
 8000d9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	897b      	ldrh	r3, [r7, #10]
 8000da6:	1c59      	adds	r1, r3, #1
 8000da8:	8179      	strh	r1, [r7, #10]
 8000daa:	4618      	mov	r0, r3
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <send_DHCP_REQUEST+0x2e4>)
 8000dae:	7899      	ldrb	r1, [r3, #2]
 8000db0:	1813      	adds	r3, r2, r0
 8000db2:	460a      	mov	r2, r1
 8000db4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	897b      	ldrh	r3, [r7, #10]
 8000dbe:	1c59      	adds	r1, r3, #1
 8000dc0:	8179      	strh	r1, [r7, #10]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <send_DHCP_REQUEST+0x2e4>)
 8000dc6:	78d9      	ldrb	r1, [r3, #3]
 8000dc8:	1813      	adds	r3, r2, r0
 8000dca:	460a      	mov	r2, r1
 8000dcc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	897b      	ldrh	r3, [r7, #10]
 8000dd6:	1c59      	adds	r1, r3, #1
 8000dd8:	8179      	strh	r1, [r7, #10]
 8000dda:	4413      	add	r3, r2
 8000ddc:	220c      	movs	r2, #12
 8000dde:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <send_DHCP_REQUEST+0x2d8>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	897b      	ldrh	r3, [r7, #10]
 8000de8:	1c59      	adds	r1, r3, #1
 8000dea:	8179      	strh	r1, [r7, #10]
 8000dec:	4413      	add	r3, r2
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e019      	b.n	8000e2e <send_DHCP_REQUEST+0x30a>
 8000dfa:	bf00      	nop
 8000dfc:	200000e8 	.word	0x200000e8
 8000e00:	200000ec 	.word	0x200000ec
 8000e04:	200000cc 	.word	0x200000cc
 8000e08:	200000c4 	.word	0x200000c4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8000e0c:	4b86      	ldr	r3, [pc, #536]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	897b      	ldrh	r3, [r7, #10]
 8000e12:	1c59      	adds	r1, r3, #1
 8000e14:	8179      	strh	r1, [r7, #10]
 8000e16:	4618      	mov	r0, r3
 8000e18:	4984      	ldr	r1, [pc, #528]	; (800102c <send_DHCP_REQUEST+0x508>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	440b      	add	r3, r1
 8000e1e:	7819      	ldrb	r1, [r3, #0]
 8000e20:	1813      	adds	r3, r2, r0
 8000e22:	460a      	mov	r2, r1
 8000e24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4a7f      	ldr	r2, [pc, #508]	; (800102c <send_DHCP_REQUEST+0x508>)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1e8      	bne.n	8000e0c <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8000e3a:	4b7d      	ldr	r3, [pc, #500]	; (8001030 <send_DHCP_REQUEST+0x50c>)
 8000e3c:	78db      	ldrb	r3, [r3, #3]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b79      	ldr	r3, [pc, #484]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000e44:	681c      	ldr	r4, [r3, #0]
 8000e46:	897b      	ldrh	r3, [r7, #10]
 8000e48:	1c59      	adds	r1, r3, #1
 8000e4a:	8179      	strh	r1, [r7, #10]
 8000e4c:	461d      	mov	r5, r3
 8000e4e:	4610      	mov	r0, r2
 8000e50:	f000 fede 	bl	8001c10 <NibbleToHex>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	1963      	adds	r3, r4, r5
 8000e5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8000e5e:	4b74      	ldr	r3, [pc, #464]	; (8001030 <send_DHCP_REQUEST+0x50c>)
 8000e60:	78da      	ldrb	r2, [r3, #3]
 8000e62:	4b71      	ldr	r3, [pc, #452]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000e64:	681c      	ldr	r4, [r3, #0]
 8000e66:	897b      	ldrh	r3, [r7, #10]
 8000e68:	1c59      	adds	r1, r3, #1
 8000e6a:	8179      	strh	r1, [r7, #10]
 8000e6c:	461d      	mov	r5, r3
 8000e6e:	4610      	mov	r0, r2
 8000e70:	f000 fece 	bl	8001c10 <NibbleToHex>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	1963      	adds	r3, r4, r5
 8000e7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8000e7e:	4b6c      	ldr	r3, [pc, #432]	; (8001030 <send_DHCP_REQUEST+0x50c>)
 8000e80:	791b      	ldrb	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b68      	ldr	r3, [pc, #416]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000e88:	681c      	ldr	r4, [r3, #0]
 8000e8a:	897b      	ldrh	r3, [r7, #10]
 8000e8c:	1c59      	adds	r1, r3, #1
 8000e8e:	8179      	strh	r1, [r7, #10]
 8000e90:	461d      	mov	r5, r3
 8000e92:	4610      	mov	r0, r2
 8000e94:	f000 febc 	bl	8001c10 <NibbleToHex>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	1963      	adds	r3, r4, r5
 8000e9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8000ea2:	4b63      	ldr	r3, [pc, #396]	; (8001030 <send_DHCP_REQUEST+0x50c>)
 8000ea4:	791a      	ldrb	r2, [r3, #4]
 8000ea6:	4b60      	ldr	r3, [pc, #384]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000ea8:	681c      	ldr	r4, [r3, #0]
 8000eaa:	897b      	ldrh	r3, [r7, #10]
 8000eac:	1c59      	adds	r1, r3, #1
 8000eae:	8179      	strh	r1, [r7, #10]
 8000eb0:	461d      	mov	r5, r3
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	f000 feac 	bl	8001c10 <NibbleToHex>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	1963      	adds	r3, r4, r5
 8000ebe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8000ec2:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <send_DHCP_REQUEST+0x50c>)
 8000ec4:	795b      	ldrb	r3, [r3, #5]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b57      	ldr	r3, [pc, #348]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000ecc:	681c      	ldr	r4, [r3, #0]
 8000ece:	897b      	ldrh	r3, [r7, #10]
 8000ed0:	1c59      	adds	r1, r3, #1
 8000ed2:	8179      	strh	r1, [r7, #10]
 8000ed4:	461d      	mov	r5, r3
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	f000 fe9a 	bl	8001c10 <NibbleToHex>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	1963      	adds	r3, r4, r5
 8000ee2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8000ee6:	4b52      	ldr	r3, [pc, #328]	; (8001030 <send_DHCP_REQUEST+0x50c>)
 8000ee8:	795a      	ldrb	r2, [r3, #5]
 8000eea:	4b4f      	ldr	r3, [pc, #316]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000eec:	681c      	ldr	r4, [r3, #0]
 8000eee:	897b      	ldrh	r3, [r7, #10]
 8000ef0:	1c59      	adds	r1, r3, #1
 8000ef2:	8179      	strh	r1, [r7, #10]
 8000ef4:	461d      	mov	r5, r3
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	f000 fe8a 	bl	8001c10 <NibbleToHex>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	1963      	adds	r3, r4, r5
 8000f02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	b2d9      	uxtb	r1, r3
 8000f0a:	4b47      	ldr	r3, [pc, #284]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	8978      	ldrh	r0, [r7, #10]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3307      	adds	r3, #7
 8000f14:	1ac3      	subs	r3, r0, r3
 8000f16:	3106      	adds	r1, #6
 8000f18:	b2c9      	uxtb	r1, r1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	897b      	ldrh	r3, [r7, #10]
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	8179      	strh	r1, [r7, #10]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2237      	movs	r2, #55	; 0x37
 8000f30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8000f34:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	897b      	ldrh	r3, [r7, #10]
 8000f3a:	1c59      	adds	r1, r3, #1
 8000f3c:	8179      	strh	r1, [r7, #10]
 8000f3e:	4413      	add	r3, r2
 8000f40:	2208      	movs	r2, #8
 8000f42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	897b      	ldrh	r3, [r7, #10]
 8000f4c:	1c59      	adds	r1, r3, #1
 8000f4e:	8179      	strh	r1, [r7, #10]
 8000f50:	4413      	add	r3, r2
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8000f58:	4b33      	ldr	r3, [pc, #204]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	897b      	ldrh	r3, [r7, #10]
 8000f5e:	1c59      	adds	r1, r3, #1
 8000f60:	8179      	strh	r1, [r7, #10]
 8000f62:	4413      	add	r3, r2
 8000f64:	2203      	movs	r2, #3
 8000f66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	897b      	ldrh	r3, [r7, #10]
 8000f70:	1c59      	adds	r1, r3, #1
 8000f72:	8179      	strh	r1, [r7, #10]
 8000f74:	4413      	add	r3, r2
 8000f76:	2206      	movs	r2, #6
 8000f78:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	897b      	ldrh	r3, [r7, #10]
 8000f82:	1c59      	adds	r1, r3, #1
 8000f84:	8179      	strh	r1, [r7, #10]
 8000f86:	4413      	add	r3, r2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	897b      	ldrh	r3, [r7, #10]
 8000f94:	1c59      	adds	r1, r3, #1
 8000f96:	8179      	strh	r1, [r7, #10]
 8000f98:	4413      	add	r3, r2
 8000f9a:	223a      	movs	r2, #58	; 0x3a
 8000f9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	897b      	ldrh	r3, [r7, #10]
 8000fa6:	1c59      	adds	r1, r3, #1
 8000fa8:	8179      	strh	r1, [r7, #10]
 8000faa:	4413      	add	r3, r2
 8000fac:	223b      	movs	r2, #59	; 0x3b
 8000fae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	897b      	ldrh	r3, [r7, #10]
 8000fb8:	1c59      	adds	r1, r3, #1
 8000fba:	8179      	strh	r1, [r7, #10]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	221f      	movs	r2, #31
 8000fc0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	897b      	ldrh	r3, [r7, #10]
 8000fca:	1c59      	adds	r1, r3, #1
 8000fcc:	8179      	strh	r1, [r7, #10]
 8000fce:	4413      	add	r3, r2
 8000fd0:	2221      	movs	r2, #33	; 0x21
 8000fd2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	897b      	ldrh	r3, [r7, #10]
 8000fdc:	1c59      	adds	r1, r3, #1
 8000fde:	8179      	strh	r1, [r7, #10]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8000fe8:	897b      	ldrh	r3, [r7, #10]
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e009      	b.n	8001002 <send_DHCP_REQUEST+0x4de>
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	33ec      	adds	r3, #236	; 0xec
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001008:	dbf1      	blt.n	8000fee <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <send_DHCP_REQUEST+0x510>)
 800100c:	7818      	ldrb	r0, [r3, #0]
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <send_DHCP_REQUEST+0x504>)
 8001010:	6819      	ldr	r1, [r3, #0]
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2243      	movs	r2, #67	; 0x43
 8001016:	9200      	str	r2, [sp, #0]
 8001018:	f44f 7209 	mov.w	r2, #548	; 0x224
 800101c:	f001 fda2 	bl	8002b64 <sendto>

}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bdb0      	pop	{r4, r5, r7, pc}
 8001028:	200000e8 	.word	0x200000e8
 800102c:	20000008 	.word	0x20000008
 8001030:	200000ec 	.word	0x200000ec
 8001034:	200000c0 	.word	0x200000c0

08001038 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001042:	f7ff fb15 	bl	8000670 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001046:	2304      	movs	r3, #4
 8001048:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800104a:	4b9f      	ldr	r3, [pc, #636]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	330a      	adds	r3, #10
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001054:	4b9c      	ldr	r3, [pc, #624]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	330a      	adds	r3, #10
 800105a:	3301      	adds	r3, #1
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001060:	4b99      	ldr	r3, [pc, #612]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	897b      	ldrh	r3, [r7, #10]
 8001066:	1c59      	adds	r1, r3, #1
 8001068:	8179      	strh	r1, [r7, #10]
 800106a:	4413      	add	r3, r2
 800106c:	2235      	movs	r2, #53	; 0x35
 800106e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001072:	4b95      	ldr	r3, [pc, #596]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	897b      	ldrh	r3, [r7, #10]
 8001078:	1c59      	adds	r1, r3, #1
 800107a:	8179      	strh	r1, [r7, #10]
 800107c:	4413      	add	r3, r2
 800107e:	2201      	movs	r2, #1
 8001080:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001084:	4b90      	ldr	r3, [pc, #576]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	897b      	ldrh	r3, [r7, #10]
 800108a:	1c59      	adds	r1, r3, #1
 800108c:	8179      	strh	r1, [r7, #10]
 800108e:	4413      	add	r3, r2
 8001090:	2204      	movs	r2, #4
 8001092:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001096:	4b8c      	ldr	r3, [pc, #560]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	897b      	ldrh	r3, [r7, #10]
 800109c:	1c59      	adds	r1, r3, #1
 800109e:	8179      	strh	r1, [r7, #10]
 80010a0:	4413      	add	r3, r2
 80010a2:	223d      	movs	r2, #61	; 0x3d
 80010a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80010a8:	4b87      	ldr	r3, [pc, #540]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	897b      	ldrh	r3, [r7, #10]
 80010ae:	1c59      	adds	r1, r3, #1
 80010b0:	8179      	strh	r1, [r7, #10]
 80010b2:	4413      	add	r3, r2
 80010b4:	2207      	movs	r2, #7
 80010b6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80010ba:	4b83      	ldr	r3, [pc, #524]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	897b      	ldrh	r3, [r7, #10]
 80010c0:	1c59      	adds	r1, r3, #1
 80010c2:	8179      	strh	r1, [r7, #10]
 80010c4:	4413      	add	r3, r2
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80010cc:	4b7e      	ldr	r3, [pc, #504]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	897b      	ldrh	r3, [r7, #10]
 80010d2:	1c59      	adds	r1, r3, #1
 80010d4:	8179      	strh	r1, [r7, #10]
 80010d6:	4618      	mov	r0, r3
 80010d8:	4b7c      	ldr	r3, [pc, #496]	; (80012cc <send_DHCP_DECLINE+0x294>)
 80010da:	7819      	ldrb	r1, [r3, #0]
 80010dc:	1813      	adds	r3, r2, r0
 80010de:	460a      	mov	r2, r1
 80010e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80010e4:	4b78      	ldr	r3, [pc, #480]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	897b      	ldrh	r3, [r7, #10]
 80010ea:	1c59      	adds	r1, r3, #1
 80010ec:	8179      	strh	r1, [r7, #10]
 80010ee:	4618      	mov	r0, r3
 80010f0:	4b76      	ldr	r3, [pc, #472]	; (80012cc <send_DHCP_DECLINE+0x294>)
 80010f2:	7859      	ldrb	r1, [r3, #1]
 80010f4:	1813      	adds	r3, r2, r0
 80010f6:	460a      	mov	r2, r1
 80010f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80010fc:	4b72      	ldr	r3, [pc, #456]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	897b      	ldrh	r3, [r7, #10]
 8001102:	1c59      	adds	r1, r3, #1
 8001104:	8179      	strh	r1, [r7, #10]
 8001106:	4618      	mov	r0, r3
 8001108:	4b70      	ldr	r3, [pc, #448]	; (80012cc <send_DHCP_DECLINE+0x294>)
 800110a:	7899      	ldrb	r1, [r3, #2]
 800110c:	1813      	adds	r3, r2, r0
 800110e:	460a      	mov	r2, r1
 8001110:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001114:	4b6c      	ldr	r3, [pc, #432]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	897b      	ldrh	r3, [r7, #10]
 800111a:	1c59      	adds	r1, r3, #1
 800111c:	8179      	strh	r1, [r7, #10]
 800111e:	4618      	mov	r0, r3
 8001120:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <send_DHCP_DECLINE+0x294>)
 8001122:	78d9      	ldrb	r1, [r3, #3]
 8001124:	1813      	adds	r3, r2, r0
 8001126:	460a      	mov	r2, r1
 8001128:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800112c:	4b66      	ldr	r3, [pc, #408]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	897b      	ldrh	r3, [r7, #10]
 8001132:	1c59      	adds	r1, r3, #1
 8001134:	8179      	strh	r1, [r7, #10]
 8001136:	4618      	mov	r0, r3
 8001138:	4b64      	ldr	r3, [pc, #400]	; (80012cc <send_DHCP_DECLINE+0x294>)
 800113a:	7919      	ldrb	r1, [r3, #4]
 800113c:	1813      	adds	r3, r2, r0
 800113e:	460a      	mov	r2, r1
 8001140:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001144:	4b60      	ldr	r3, [pc, #384]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	897b      	ldrh	r3, [r7, #10]
 800114a:	1c59      	adds	r1, r3, #1
 800114c:	8179      	strh	r1, [r7, #10]
 800114e:	4618      	mov	r0, r3
 8001150:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <send_DHCP_DECLINE+0x294>)
 8001152:	7959      	ldrb	r1, [r3, #5]
 8001154:	1813      	adds	r3, r2, r0
 8001156:	460a      	mov	r2, r1
 8001158:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800115c:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	897b      	ldrh	r3, [r7, #10]
 8001162:	1c59      	adds	r1, r3, #1
 8001164:	8179      	strh	r1, [r7, #10]
 8001166:	4413      	add	r3, r2
 8001168:	2232      	movs	r2, #50	; 0x32
 800116a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800116e:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	897b      	ldrh	r3, [r7, #10]
 8001174:	1c59      	adds	r1, r3, #1
 8001176:	8179      	strh	r1, [r7, #10]
 8001178:	4413      	add	r3, r2
 800117a:	2204      	movs	r2, #4
 800117c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001180:	4b51      	ldr	r3, [pc, #324]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	1c59      	adds	r1, r3, #1
 8001188:	8179      	strh	r1, [r7, #10]
 800118a:	4618      	mov	r0, r3
 800118c:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <send_DHCP_DECLINE+0x298>)
 800118e:	7819      	ldrb	r1, [r3, #0]
 8001190:	1813      	adds	r3, r2, r0
 8001192:	460a      	mov	r2, r1
 8001194:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001198:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	897b      	ldrh	r3, [r7, #10]
 800119e:	1c59      	adds	r1, r3, #1
 80011a0:	8179      	strh	r1, [r7, #10]
 80011a2:	4618      	mov	r0, r3
 80011a4:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <send_DHCP_DECLINE+0x298>)
 80011a6:	7859      	ldrb	r1, [r3, #1]
 80011a8:	1813      	adds	r3, r2, r0
 80011aa:	460a      	mov	r2, r1
 80011ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80011b0:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	897b      	ldrh	r3, [r7, #10]
 80011b6:	1c59      	adds	r1, r3, #1
 80011b8:	8179      	strh	r1, [r7, #10]
 80011ba:	4618      	mov	r0, r3
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <send_DHCP_DECLINE+0x298>)
 80011be:	7899      	ldrb	r1, [r3, #2]
 80011c0:	1813      	adds	r3, r2, r0
 80011c2:	460a      	mov	r2, r1
 80011c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80011c8:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	897b      	ldrh	r3, [r7, #10]
 80011ce:	1c59      	adds	r1, r3, #1
 80011d0:	8179      	strh	r1, [r7, #10]
 80011d2:	4618      	mov	r0, r3
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <send_DHCP_DECLINE+0x298>)
 80011d6:	78d9      	ldrb	r1, [r3, #3]
 80011d8:	1813      	adds	r3, r2, r0
 80011da:	460a      	mov	r2, r1
 80011dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80011e0:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	897b      	ldrh	r3, [r7, #10]
 80011e6:	1c59      	adds	r1, r3, #1
 80011e8:	8179      	strh	r1, [r7, #10]
 80011ea:	4413      	add	r3, r2
 80011ec:	2236      	movs	r2, #54	; 0x36
 80011ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	897b      	ldrh	r3, [r7, #10]
 80011f8:	1c59      	adds	r1, r3, #1
 80011fa:	8179      	strh	r1, [r7, #10]
 80011fc:	4413      	add	r3, r2
 80011fe:	2204      	movs	r2, #4
 8001200:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	897b      	ldrh	r3, [r7, #10]
 800120a:	1c59      	adds	r1, r3, #1
 800120c:	8179      	strh	r1, [r7, #10]
 800120e:	4618      	mov	r0, r3
 8001210:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <send_DHCP_DECLINE+0x29c>)
 8001212:	7819      	ldrb	r1, [r3, #0]
 8001214:	1813      	adds	r3, r2, r0
 8001216:	460a      	mov	r2, r1
 8001218:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	897b      	ldrh	r3, [r7, #10]
 8001222:	1c59      	adds	r1, r3, #1
 8001224:	8179      	strh	r1, [r7, #10]
 8001226:	4618      	mov	r0, r3
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <send_DHCP_DECLINE+0x29c>)
 800122a:	7859      	ldrb	r1, [r3, #1]
 800122c:	1813      	adds	r3, r2, r0
 800122e:	460a      	mov	r2, r1
 8001230:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	897b      	ldrh	r3, [r7, #10]
 800123a:	1c59      	adds	r1, r3, #1
 800123c:	8179      	strh	r1, [r7, #10]
 800123e:	4618      	mov	r0, r3
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <send_DHCP_DECLINE+0x29c>)
 8001242:	7899      	ldrb	r1, [r3, #2]
 8001244:	1813      	adds	r3, r2, r0
 8001246:	460a      	mov	r2, r1
 8001248:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	897b      	ldrh	r3, [r7, #10]
 8001252:	1c59      	adds	r1, r3, #1
 8001254:	8179      	strh	r1, [r7, #10]
 8001256:	4618      	mov	r0, r3
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <send_DHCP_DECLINE+0x29c>)
 800125a:	78d9      	ldrb	r1, [r3, #3]
 800125c:	1813      	adds	r3, r2, r0
 800125e:	460a      	mov	r2, r1
 8001260:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	897b      	ldrh	r3, [r7, #10]
 800126a:	1c59      	adds	r1, r3, #1
 800126c:	8179      	strh	r1, [r7, #10]
 800126e:	4413      	add	r3, r2
 8001270:	22ff      	movs	r2, #255	; 0xff
 8001272:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001276:	897b      	ldrh	r3, [r7, #10]
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e009      	b.n	8001290 <send_DHCP_DECLINE+0x258>
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	33ec      	adds	r3, #236	; 0xec
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3301      	adds	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001296:	dbf1      	blt.n	800127c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001298:	23ff      	movs	r3, #255	; 0xff
 800129a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800129c:	23ff      	movs	r3, #255	; 0xff
 800129e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80012a0:	23ff      	movs	r3, #255	; 0xff
 80012a2:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80012a4:	23ff      	movs	r3, #255	; 0xff
 80012a6:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <send_DHCP_DECLINE+0x2a0>)
 80012aa:	7818      	ldrb	r0, [r3, #0]
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <send_DHCP_DECLINE+0x290>)
 80012ae:	6819      	ldr	r1, [r3, #0]
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2243      	movs	r2, #67	; 0x43
 80012b4:	9200      	str	r2, [sp, #0]
 80012b6:	f44f 7209 	mov.w	r2, #548	; 0x224
 80012ba:	f001 fc53 	bl	8002b64 <sendto>
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000e8 	.word	0x200000e8
 80012cc:	200000ec 	.word	0x200000ec
 80012d0:	200000cc 	.word	0x200000cc
 80012d4:	200000c4 	.word	0x200000c4
 80012d8:	200000c0 	.word	0x200000c0

080012dc <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 80012e6:	4baa      	ldr	r3, [pc, #680]	; (8001590 <parseDHCPMSG+0x2b4>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fe6b 	bl	8001fc6 <getSn_RX_RSR>
 80012f0:	4603      	mov	r3, r0
 80012f2:	823b      	strh	r3, [r7, #16]
 80012f4:	8a3b      	ldrh	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d011      	beq.n	800131e <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 80012fa:	4ba5      	ldr	r3, [pc, #660]	; (8001590 <parseDHCPMSG+0x2b4>)
 80012fc:	7818      	ldrb	r0, [r3, #0]
 80012fe:	4ba5      	ldr	r3, [pc, #660]	; (8001594 <parseDHCPMSG+0x2b8>)
 8001300:	6819      	ldr	r1, [r3, #0]
 8001302:	1d3c      	adds	r4, r7, #4
 8001304:	8a3a      	ldrh	r2, [r7, #16]
 8001306:	1cbb      	adds	r3, r7, #2
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	4623      	mov	r3, r4
 800130c:	f001 fd60 	bl	8002dd0 <recvfrom>
 8001310:	4603      	mov	r3, r0
 8001312:	823b      	strh	r3, [r7, #16]
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;

   if (svr_port == DHCP_SERVER_PORT) {
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	2b43      	cmp	r3, #67	; 0x43
 8001318:	f040 81a7 	bne.w	800166a <parseDHCPMSG+0x38e>
 800131c:	e001      	b.n	8001322 <parseDHCPMSG+0x46>
   else return 0;
 800131e:	2300      	movs	r3, #0
 8001320:	e1a5      	b.n	800166e <parseDHCPMSG+0x392>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001322:	4b9c      	ldr	r3, [pc, #624]	; (8001594 <parseDHCPMSG+0x2b8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	7f1a      	ldrb	r2, [r3, #28]
 8001328:	4b9b      	ldr	r3, [pc, #620]	; (8001598 <parseDHCPMSG+0x2bc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d124      	bne.n	800137a <parseDHCPMSG+0x9e>
 8001330:	4b98      	ldr	r3, [pc, #608]	; (8001594 <parseDHCPMSG+0x2b8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	7f5a      	ldrb	r2, [r3, #29]
 8001336:	4b98      	ldr	r3, [pc, #608]	; (8001598 <parseDHCPMSG+0x2bc>)
 8001338:	785b      	ldrb	r3, [r3, #1]
 800133a:	429a      	cmp	r2, r3
 800133c:	d11d      	bne.n	800137a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800133e:	4b95      	ldr	r3, [pc, #596]	; (8001594 <parseDHCPMSG+0x2b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	7f9a      	ldrb	r2, [r3, #30]
 8001344:	4b94      	ldr	r3, [pc, #592]	; (8001598 <parseDHCPMSG+0x2bc>)
 8001346:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001348:	429a      	cmp	r2, r3
 800134a:	d116      	bne.n	800137a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800134c:	4b91      	ldr	r3, [pc, #580]	; (8001594 <parseDHCPMSG+0x2b8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	7fda      	ldrb	r2, [r3, #31]
 8001352:	4b91      	ldr	r3, [pc, #580]	; (8001598 <parseDHCPMSG+0x2bc>)
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	429a      	cmp	r2, r3
 8001358:	d10f      	bne.n	800137a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800135a:	4b8e      	ldr	r3, [pc, #568]	; (8001594 <parseDHCPMSG+0x2b8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001362:	4b8d      	ldr	r3, [pc, #564]	; (8001598 <parseDHCPMSG+0x2bc>)
 8001364:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d107      	bne.n	800137a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800136a:	4b8a      	ldr	r3, [pc, #552]	; (8001594 <parseDHCPMSG+0x2b8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001372:	4b89      	ldr	r3, [pc, #548]	; (8001598 <parseDHCPMSG+0x2bc>)
 8001374:	795b      	ldrb	r3, [r3, #5]
 8001376:	429a      	cmp	r2, r3
 8001378:	d001      	beq.n	800137e <parseDHCPMSG+0xa2>
         return 0;
 800137a:	2300      	movs	r3, #0
 800137c:	e177      	b.n	800166e <parseDHCPMSG+0x392>
		p = (uint8_t *)(&pDHCPMSG->op);
 800137e:	4b85      	ldr	r3, [pc, #532]	; (8001594 <parseDHCPMSG+0x2b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	33f0      	adds	r3, #240	; 0xf0
 8001388:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800138a:	8a3b      	ldrh	r3, [r7, #16]
 800138c:	3bf0      	subs	r3, #240	; 0xf0
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4413      	add	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001394:	e164      	b.n	8001660 <parseDHCPMSG+0x384>

			switch ( *p ) {
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b36      	cmp	r3, #54	; 0x36
 800139c:	dc76      	bgt.n	800148c <parseDHCPMSG+0x1b0>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f2c0 8151 	blt.w	8001646 <parseDHCPMSG+0x36a>
 80013a4:	2b36      	cmp	r3, #54	; 0x36
 80013a6:	f200 814e 	bhi.w	8001646 <parseDHCPMSG+0x36a>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <parseDHCPMSG+0xd4>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	08001499 	.word	0x08001499
 80013b4:	080014b9 	.word	0x080014b9
 80013b8:	08001647 	.word	0x08001647
 80013bc:	080014f7 	.word	0x080014f7
 80013c0:	08001647 	.word	0x08001647
 80013c4:	08001647 	.word	0x08001647
 80013c8:	08001543 	.word	0x08001543
 80013cc:	08001647 	.word	0x08001647
 80013d0:	08001647 	.word	0x08001647
 80013d4:	08001647 	.word	0x08001647
 80013d8:	08001647 	.word	0x08001647
 80013dc:	08001647 	.word	0x08001647
 80013e0:	08001647 	.word	0x08001647
 80013e4:	08001647 	.word	0x08001647
 80013e8:	08001647 	.word	0x08001647
 80013ec:	08001647 	.word	0x08001647
 80013f0:	08001647 	.word	0x08001647
 80013f4:	08001647 	.word	0x08001647
 80013f8:	08001647 	.word	0x08001647
 80013fc:	08001647 	.word	0x08001647
 8001400:	08001647 	.word	0x08001647
 8001404:	08001647 	.word	0x08001647
 8001408:	08001647 	.word	0x08001647
 800140c:	08001647 	.word	0x08001647
 8001410:	08001647 	.word	0x08001647
 8001414:	08001647 	.word	0x08001647
 8001418:	08001647 	.word	0x08001647
 800141c:	08001647 	.word	0x08001647
 8001420:	08001647 	.word	0x08001647
 8001424:	08001647 	.word	0x08001647
 8001428:	08001647 	.word	0x08001647
 800142c:	08001647 	.word	0x08001647
 8001430:	08001647 	.word	0x08001647
 8001434:	08001647 	.word	0x08001647
 8001438:	08001647 	.word	0x08001647
 800143c:	08001647 	.word	0x08001647
 8001440:	08001647 	.word	0x08001647
 8001444:	08001647 	.word	0x08001647
 8001448:	08001647 	.word	0x08001647
 800144c:	08001647 	.word	0x08001647
 8001450:	08001647 	.word	0x08001647
 8001454:	08001647 	.word	0x08001647
 8001458:	08001647 	.word	0x08001647
 800145c:	08001647 	.word	0x08001647
 8001460:	08001647 	.word	0x08001647
 8001464:	08001647 	.word	0x08001647
 8001468:	08001647 	.word	0x08001647
 800146c:	08001647 	.word	0x08001647
 8001470:	08001647 	.word	0x08001647
 8001474:	08001647 	.word	0x08001647
 8001478:	08001647 	.word	0x08001647
 800147c:	080015a9 	.word	0x080015a9
 8001480:	08001647 	.word	0x08001647
 8001484:	080014a1 	.word	0x080014a1
 8001488:	08001605 	.word	0x08001605
 800148c:	2bff      	cmp	r3, #255	; 0xff
 800148e:	f040 80da 	bne.w	8001646 <parseDHCPMSG+0x36a>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	617b      	str	r3, [r7, #20]
   				break;
 8001496:	e0e3      	b.n	8001660 <parseDHCPMSG+0x384>
            case padOption :
   				p++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
   				break;
 800149e:	e0df      	b.n	8001660 <parseDHCPMSG+0x384>
   			case dhcpMessageType :
   				p++;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3301      	adds	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
   				p++;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	617a      	str	r2, [r7, #20]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	74fb      	strb	r3, [r7, #19]
   				break;
 80014b6:	e0d3      	b.n	8001660 <parseDHCPMSG+0x384>
   			case subnetMask :
   				p++;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
   				p++;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	617a      	str	r2, [r7, #20]
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <parseDHCPMSG+0x2c0>)
 80014ce:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	617a      	str	r2, [r7, #20]
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	4b30      	ldr	r3, [pc, #192]	; (800159c <parseDHCPMSG+0x2c0>)
 80014da:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	617a      	str	r2, [r7, #20]
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	4b2d      	ldr	r3, [pc, #180]	; (800159c <parseDHCPMSG+0x2c0>)
 80014e6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	617a      	str	r2, [r7, #20]
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <parseDHCPMSG+0x2c0>)
 80014f2:	70da      	strb	r2, [r3, #3]
   				break;
 80014f4:	e0b4      	b.n	8001660 <parseDHCPMSG+0x384>
   			case routersOnSubnet :
   				p++;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	617a      	str	r2, [r7, #20]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	617a      	str	r2, [r7, #20]
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <parseDHCPMSG+0x2c4>)
 8001510:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	617a      	str	r2, [r7, #20]
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <parseDHCPMSG+0x2c4>)
 800151c:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	617a      	str	r2, [r7, #20]
 8001524:	781a      	ldrb	r2, [r3, #0]
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <parseDHCPMSG+0x2c4>)
 8001528:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	617a      	str	r2, [r7, #20]
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <parseDHCPMSG+0x2c4>)
 8001534:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	3b04      	subs	r3, #4
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4413      	add	r3, r2
 800153e:	617b      	str	r3, [r7, #20]
   				break;
 8001540:	e08e      	b.n	8001660 <parseDHCPMSG+0x384>
   			case dns :
   				p++;                  
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	617a      	str	r2, [r7, #20]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	617a      	str	r2, [r7, #20]
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <parseDHCPMSG+0x2c8>)
 800155c:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	617a      	str	r2, [r7, #20]
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <parseDHCPMSG+0x2c8>)
 8001568:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	617a      	str	r2, [r7, #20]
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <parseDHCPMSG+0x2c8>)
 8001574:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	617a      	str	r2, [r7, #20]
 800157c:	781a      	ldrb	r2, [r3, #0]
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <parseDHCPMSG+0x2c8>)
 8001580:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	3b04      	subs	r3, #4
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4413      	add	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
   				break;
 800158c:	e068      	b.n	8001660 <parseDHCPMSG+0x384>
 800158e:	bf00      	nop
 8001590:	200000c0 	.word	0x200000c0
 8001594:	200000e8 	.word	0x200000e8
 8001598:	200000ec 	.word	0x200000ec
 800159c:	200000d4 	.word	0x200000d4
 80015a0:	200000d0 	.word	0x200000d0
 80015a4:	200000d8 	.word	0x200000d8
   			case dhcpIPaddrLeaseTime :
   				p++;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3301      	adds	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	617a      	str	r2, [r7, #20]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	617a      	str	r2, [r7, #20]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <parseDHCPMSG+0x39c>)
 80015c4:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <parseDHCPMSG+0x39c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	021a      	lsls	r2, r3, #8
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	1c59      	adds	r1, r3, #1
 80015d0:	6179      	str	r1, [r7, #20]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a28      	ldr	r2, [pc, #160]	; (8001678 <parseDHCPMSG+0x39c>)
 80015d8:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80015da:	4b27      	ldr	r3, [pc, #156]	; (8001678 <parseDHCPMSG+0x39c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	021a      	lsls	r2, r3, #8
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	1c59      	adds	r1, r3, #1
 80015e4:	6179      	str	r1, [r7, #20]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <parseDHCPMSG+0x39c>)
 80015ec:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <parseDHCPMSG+0x39c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	021a      	lsls	r2, r3, #8
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	6179      	str	r1, [r7, #20]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <parseDHCPMSG+0x39c>)
 8001600:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8001602:	e02d      	b.n	8001660 <parseDHCPMSG+0x384>
   			case dhcpServerIdentifier :
   				p++;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	617a      	str	r2, [r7, #20]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	617a      	str	r2, [r7, #20]
 800161a:	781a      	ldrb	r2, [r3, #0]
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <parseDHCPMSG+0x3a0>)
 800161e:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	617a      	str	r2, [r7, #20]
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <parseDHCPMSG+0x3a0>)
 800162a:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	617a      	str	r2, [r7, #20]
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <parseDHCPMSG+0x3a0>)
 8001636:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	617a      	str	r2, [r7, #20]
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <parseDHCPMSG+0x3a0>)
 8001642:	70da      	strb	r2, [r3, #3]
   				break;
 8001644:	e00c      	b.n	8001660 <parseDHCPMSG+0x384>
   			default :
   				p++;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	617a      	str	r2, [r7, #20]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
   				break;
 800165e:	bf00      	nop
		while ( p < e ) {
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	f4ff ae96 	bcc.w	8001396 <parseDHCPMSG+0xba>
			} // switch
		} // while
	} // if
	return	type;
 800166a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800166e:	4618      	mov	r0, r3
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000
 800167c:	200000c4 	.word	0x200000c4

08001680 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8001686:	4b7f      	ldr	r3, [pc, #508]	; (8001884 <DHCP_run+0x204>)
 8001688:	f993 3000 	ldrsb.w	r3, [r3]
 800168c:	2b06      	cmp	r3, #6
 800168e:	d101      	bne.n	8001694 <DHCP_run+0x14>
 8001690:	2305      	movs	r3, #5
 8001692:	e0f3      	b.n	800187c <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8001694:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <DHCP_run+0x208>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	3301      	adds	r3, #1
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 faea 	bl	8001c7c <WIZCHIP_READ>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b22      	cmp	r3, #34	; 0x22
 80016ac:	d006      	beq.n	80016bc <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80016ae:	4b76      	ldr	r3, [pc, #472]	; (8001888 <DHCP_run+0x208>)
 80016b0:	7818      	ldrb	r0, [r3, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	2244      	movs	r2, #68	; 0x44
 80016b6:	2102      	movs	r1, #2
 80016b8:	f000 fdd0 	bl	800225c <socket>

	ret = DHCP_RUNNING;
 80016bc:	2301      	movs	r3, #1
 80016be:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80016c0:	f7ff fe0c 	bl	80012dc <parseDHCPMSG>
 80016c4:	4603      	mov	r3, r0
 80016c6:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80016c8:	4b6e      	ldr	r3, [pc, #440]	; (8001884 <DHCP_run+0x204>)
 80016ca:	f993 3000 	ldrsb.w	r3, [r3]
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	f200 80d0 	bhi.w	8001874 <DHCP_run+0x1f4>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <DHCP_run+0x5c>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	080016f1 	.word	0x080016f1
 80016e0:	08001715 	.word	0x08001715
 80016e4:	08001759 	.word	0x08001759
 80016e8:	080017a9 	.word	0x080017a9
 80016ec:	08001803 	.word	0x08001803
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <DHCP_run+0x20c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80016f6:	4b65      	ldr	r3, [pc, #404]	; (800188c <DHCP_run+0x20c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80016fc:	4b63      	ldr	r3, [pc, #396]	; (800188c <DHCP_run+0x20c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8001702:	4b62      	ldr	r3, [pc, #392]	; (800188c <DHCP_run+0x20c>)
 8001704:	2200      	movs	r2, #0
 8001706:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8001708:	f7ff f8a8 	bl	800085c <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800170c:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <DHCP_run+0x204>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
   		break;
 8001712:	e0b2      	b.n	800187a <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d119      	bne.n	800174e <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800171a:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <DHCP_run+0x210>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	7c1a      	ldrb	r2, [r3, #16]
 8001720:	4b5a      	ldr	r3, [pc, #360]	; (800188c <DHCP_run+0x20c>)
 8001722:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <DHCP_run+0x210>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	7c5a      	ldrb	r2, [r3, #17]
 800172a:	4b58      	ldr	r3, [pc, #352]	; (800188c <DHCP_run+0x20c>)
 800172c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800172e:	4b58      	ldr	r3, [pc, #352]	; (8001890 <DHCP_run+0x210>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	7c9a      	ldrb	r2, [r3, #18]
 8001734:	4b55      	ldr	r3, [pc, #340]	; (800188c <DHCP_run+0x20c>)
 8001736:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8001738:	4b55      	ldr	r3, [pc, #340]	; (8001890 <DHCP_run+0x210>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	7cda      	ldrb	r2, [r3, #19]
 800173e:	4b53      	ldr	r3, [pc, #332]	; (800188c <DHCP_run+0x20c>)
 8001740:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8001742:	f7ff f9ef 	bl	8000b24 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8001746:	4b4f      	ldr	r3, [pc, #316]	; (8001884 <DHCP_run+0x204>)
 8001748:	2202      	movs	r2, #2
 800174a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 800174c:	e095      	b.n	800187a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800174e:	f000 f8b1 	bl	80018b4 <check_DHCP_timeout>
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
         break;
 8001756:	e090      	b.n	800187a <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d116      	bne.n	800178c <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800175e:	f000 f909 	bl	8001974 <check_DHCP_leasedIP>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8001768:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <DHCP_run+0x214>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4798      	blx	r3
					reset_DHCP_timeout();
 800176e:	f000 f9ab 	bl	8001ac8 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8001772:	4b44      	ldr	r3, [pc, #272]	; (8001884 <DHCP_run+0x204>)
 8001774:	2203      	movs	r2, #3
 8001776:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8001778:	e07f      	b.n	800187a <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800177a:	f000 f9a5 	bl	8001ac8 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800177e:	4b46      	ldr	r3, [pc, #280]	; (8001898 <DHCP_run+0x218>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8001784:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <DHCP_run+0x204>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
		break;
 800178a:	e076      	b.n	800187a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	2b06      	cmp	r3, #6
 8001790:	d105      	bne.n	800179e <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8001792:	f000 f999 	bl	8001ac8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <DHCP_run+0x204>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
		break;
 800179c:	e06d      	b.n	800187a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800179e:	f000 f889 	bl	80018b4 <check_DHCP_timeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
		break;
 80017a6:	e068      	b.n	800187a <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 80017a8:	2304      	movs	r3, #4
 80017aa:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <DHCP_run+0x21c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d060      	beq.n	8001878 <DHCP_run+0x1f8>
 80017b6:	4b39      	ldr	r3, [pc, #228]	; (800189c <DHCP_run+0x21c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	085a      	lsrs	r2, r3, #1
 80017bc:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <DHCP_run+0x220>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d259      	bcs.n	8001878 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <DHCP_run+0x20c>)
 80017ca:	781a      	ldrb	r2, [r3, #0]
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <DHCP_run+0x224>)
 80017ce:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <DHCP_run+0x20c>)
 80017d2:	785a      	ldrb	r2, [r3, #1]
 80017d4:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <DHCP_run+0x224>)
 80017d6:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80017d8:	4b2c      	ldr	r3, [pc, #176]	; (800188c <DHCP_run+0x20c>)
 80017da:	789a      	ldrb	r2, [r3, #2]
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <DHCP_run+0x224>)
 80017de:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <DHCP_run+0x20c>)
 80017e2:	78da      	ldrb	r2, [r3, #3]
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <DHCP_run+0x224>)
 80017e6:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80017e8:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <DHCP_run+0x228>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a2e      	ldr	r2, [pc, #184]	; (80018a8 <DHCP_run+0x228>)
 80017f0:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80017f2:	f7ff f997 	bl	8000b24 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80017f6:	f000 f967 	bl	8001ac8 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <DHCP_run+0x204>)
 80017fc:	2204      	movs	r2, #4
 80017fe:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001800:	e03a      	b.n	8001878 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8001802:	2304      	movs	r3, #4
 8001804:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d125      	bne.n	8001858 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <DHCP_run+0x22c>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <DHCP_run+0x224>)
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <DHCP_run+0x20c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d111      	bne.n	8001842 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <DHCP_run+0x224>)
 8001820:	785a      	ldrb	r2, [r3, #1]
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <DHCP_run+0x20c>)
 8001824:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8001826:	429a      	cmp	r2, r3
 8001828:	d10b      	bne.n	8001842 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <DHCP_run+0x224>)
 800182c:	789a      	ldrb	r2, [r3, #2]
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <DHCP_run+0x20c>)
 8001830:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d105      	bne.n	8001842 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <DHCP_run+0x224>)
 8001838:	78da      	ldrb	r2, [r3, #3]
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <DHCP_run+0x20c>)
 800183c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d004      	beq.n	800184c <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8001842:	2303      	movs	r3, #3
 8001844:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <DHCP_run+0x230>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 800184c:	f000 f93c 	bl	8001ac8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <DHCP_run+0x204>)
 8001852:	2203      	movs	r2, #3
 8001854:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8001856:	e010      	b.n	800187a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	2b06      	cmp	r3, #6
 800185c:	d105      	bne.n	800186a <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800185e:	f000 f933 	bl	8001ac8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <DHCP_run+0x204>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
	   	break;
 8001868:	e007      	b.n	800187a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800186a:	f000 f823 	bl	80018b4 <check_DHCP_timeout>
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	   	break;
 8001872:	e002      	b.n	800187a <DHCP_run+0x1fa>
		default :
   		break;
 8001874:	bf00      	nop
 8001876:	e000      	b.n	800187a <DHCP_run+0x1fa>
		break;
 8001878:	bf00      	nop
	}

	return ret;
 800187a:	79fb      	ldrb	r3, [r7, #7]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200000dc 	.word	0x200000dc
 8001888:	200000c0 	.word	0x200000c0
 800188c:	200000cc 	.word	0x200000cc
 8001890:	200000e8 	.word	0x200000e8
 8001894:	20000010 	.word	0x20000010
 8001898:	20000018 	.word	0x20000018
 800189c:	20000000 	.word	0x20000000
 80018a0:	200000e0 	.word	0x200000e0
 80018a4:	200000c8 	.word	0x200000c8
 80018a8:	200000e4 	.word	0x200000e4
 80018ac:	200000dd 	.word	0x200000dd
 80018b0:	20000014 	.word	0x20000014

080018b4 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80018ba:	2301      	movs	r3, #1
 80018bc:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <check_DHCP_timeout+0xb0>)
 80018c0:	f993 3000 	ldrsb.w	r3, [r3]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	dc2d      	bgt.n	8001924 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <check_DHCP_timeout+0xb4>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <check_DHCP_timeout+0xb8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d242      	bcs.n	800195a <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80018d4:	4b26      	ldr	r3, [pc, #152]	; (8001970 <check_DHCP_timeout+0xbc>)
 80018d6:	f993 3000 	ldrsb.w	r3, [r3]
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d00c      	beq.n	80018f8 <check_DHCP_timeout+0x44>
 80018de:	2b04      	cmp	r3, #4
 80018e0:	dc0d      	bgt.n	80018fe <check_DHCP_timeout+0x4a>
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d002      	beq.n	80018ec <check_DHCP_timeout+0x38>
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d003      	beq.n	80018f2 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80018ea:	e008      	b.n	80018fe <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80018ec:	f7fe ffb6 	bl	800085c <send_DHCP_DISCOVER>
				break;
 80018f0:	e006      	b.n	8001900 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80018f2:	f7ff f917 	bl	8000b24 <send_DHCP_REQUEST>
				break;
 80018f6:	e003      	b.n	8001900 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80018f8:	f7ff f914 	bl	8000b24 <send_DHCP_REQUEST>
				break;
 80018fc:	e000      	b.n	8001900 <check_DHCP_timeout+0x4c>
				break;
 80018fe:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <check_DHCP_timeout+0xb8>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <check_DHCP_timeout+0xb8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	330a      	adds	r3, #10
 800190c:	4a16      	ldr	r2, [pc, #88]	; (8001968 <check_DHCP_timeout+0xb4>)
 800190e:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <check_DHCP_timeout+0xb0>)
 8001912:	f993 3000 	ldrsb.w	r3, [r3]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	3301      	adds	r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	b25a      	sxtb	r2, r3
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <check_DHCP_timeout+0xb0>)
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e01a      	b.n	800195a <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <check_DHCP_timeout+0xbc>)
 8001926:	f993 3000 	ldrsb.w	r3, [r3]
 800192a:	2b04      	cmp	r3, #4
 800192c:	d00c      	beq.n	8001948 <check_DHCP_timeout+0x94>
 800192e:	2b04      	cmp	r3, #4
 8001930:	dc10      	bgt.n	8001954 <check_DHCP_timeout+0xa0>
 8001932:	2b01      	cmp	r3, #1
 8001934:	d002      	beq.n	800193c <check_DHCP_timeout+0x88>
 8001936:	2b02      	cmp	r3, #2
 8001938:	d006      	beq.n	8001948 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800193a:	e00b      	b.n	8001954 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <check_DHCP_timeout+0xbc>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8001942:	2300      	movs	r3, #0
 8001944:	71fb      	strb	r3, [r7, #7]
				break;
 8001946:	e006      	b.n	8001956 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8001948:	f7fe ff88 	bl	800085c <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <check_DHCP_timeout+0xbc>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
				break;
 8001952:	e000      	b.n	8001956 <check_DHCP_timeout+0xa2>
				break;
 8001954:	bf00      	nop
		}
		reset_DHCP_timeout();
 8001956:	f000 f8b7 	bl	8001ac8 <reset_DHCP_timeout>
	}
	return ret;
 800195a:	79fb      	ldrb	r3, [r7, #7]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200000dd 	.word	0x200000dd
 8001968:	20000004 	.word	0x20000004
 800196c:	200000e0 	.word	0x200000e0
 8001970:	200000dc 	.word	0x200000dc

08001974 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800197a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800197e:	f000 f97d 	bl	8001c7c <WIZCHIP_READ>
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8001986:	2103      	movs	r1, #3
 8001988:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800198c:	f000 f9c2 	bl	8001d14 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <check_DHCP_leasedIP+0x6c>)
 8001992:	7818      	ldrb	r0, [r3, #0]
 8001994:	f241 3388 	movw	r3, #5000	; 0x1388
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <check_DHCP_leasedIP+0x70>)
 800199c:	2211      	movs	r2, #17
 800199e:	4912      	ldr	r1, [pc, #72]	; (80019e8 <check_DHCP_leasedIP+0x74>)
 80019a0:	f001 f8e0 	bl	8002b64 <sendto>
 80019a4:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80019ae:	f000 f9b1 	bl	8001d14 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f113 0f0d 	cmn.w	r3, #13
 80019b8:	d101      	bne.n	80019be <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00c      	b.n	80019d8 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80019be:	f7ff fb3b 	bl	8001038 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <check_DHCP_leasedIP+0x78>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80019c8:	bf00      	nop
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <check_DHCP_leasedIP+0x78>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d9f9      	bls.n	80019ca <check_DHCP_leasedIP+0x56>

		return 0;
 80019d6:	2300      	movs	r3, #0
	}
}	
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200000c0 	.word	0x200000c0
 80019e4:	200000cc 	.word	0x200000cc
 80019e8:	0800b468 	.word	0x0800b468
 80019ec:	200000e0 	.word	0x200000e0

080019f0 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8001a00:	2206      	movs	r2, #6
 8001a02:	492b      	ldr	r1, [pc, #172]	; (8001ab0 <DHCP_init+0xc0>)
 8001a04:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001a08:	f000 f9d2 	bl	8001db0 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <DHCP_init+0xc0>)
 8001a0e:	781a      	ldrb	r2, [r3, #0]
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <DHCP_init+0xc0>)
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <DHCP_init+0xc0>)
 8001a1a:	789b      	ldrb	r3, [r3, #2]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <DHCP_init+0xc0>)
 8001a22:	78db      	ldrb	r3, [r3, #3]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <DHCP_init+0xc0>)
 8001a2a:	791b      	ldrb	r3, [r3, #4]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <DHCP_init+0xc0>)
 8001a32:	795b      	ldrb	r3, [r3, #5]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d117      	bne.n	8001a6c <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <DHCP_init+0xc0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <DHCP_init+0xc0>)
 8001a44:	2208      	movs	r2, #8
 8001a46:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <DHCP_init+0xc0>)
 8001a4a:	22dc      	movs	r2, #220	; 0xdc
 8001a4c:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <DHCP_init+0xc0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <DHCP_init+0xc0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <DHCP_init+0xc0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8001a60:	2206      	movs	r2, #6
 8001a62:	4913      	ldr	r1, [pc, #76]	; (8001ab0 <DHCP_init+0xc0>)
 8001a64:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001a68:	f000 fa02 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8001a6c:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <DHCP_init+0xc4>)
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8001a72:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <DHCP_init+0xc8>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <DHCP_init+0xcc>)
 8001a7a:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <DHCP_init+0xd0>)
 8001a7c:	601a      	str	r2, [r3, #0]

	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2204      	movs	r2, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001a8a:	f000 f9f1 	bl	8001e70 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2204      	movs	r2, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a9a:	f000 f9e9 	bl	8001e70 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8001a9e:	f000 f813 	bl	8001ac8 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <DHCP_init+0xd4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200000ec 	.word	0x200000ec
 8001ab4:	200000c0 	.word	0x200000c0
 8001ab8:	200000e8 	.word	0x200000e8
 8001abc:	200000e4 	.word	0x200000e4
 8001ac0:	12345678 	.word	0x12345678
 8001ac4:	200000dc 	.word	0x200000dc

08001ac8 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <reset_DHCP_timeout+0x20>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <reset_DHCP_timeout+0x24>)
 8001ad4:	220a      	movs	r2, #10
 8001ad6:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <reset_DHCP_timeout+0x28>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	200000e0 	.word	0x200000e0
 8001aec:	20000004 	.word	0x20000004
 8001af0:	200000dd 	.word	0x200000dd

08001af4 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <DHCP_time_handler+0x18>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <DHCP_time_handler+0x18>)
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	200000e0 	.word	0x200000e0

08001b10 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <getIPfromDHCP+0x3c>)
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3301      	adds	r3, #1
 8001b24:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <getIPfromDHCP+0x3c>)
 8001b26:	7852      	ldrb	r2, [r2, #1]
 8001b28:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <getIPfromDHCP+0x3c>)
 8001b30:	7892      	ldrb	r2, [r2, #2]
 8001b32:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3303      	adds	r3, #3
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <getIPfromDHCP+0x3c>)
 8001b3a:	78d2      	ldrb	r2, [r2, #3]
 8001b3c:	701a      	strb	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200000cc 	.word	0x200000cc

08001b50 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <getGWfromDHCP+0x3c>)
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <getGWfromDHCP+0x3c>)
 8001b66:	7852      	ldrb	r2, [r2, #1]
 8001b68:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <getGWfromDHCP+0x3c>)
 8001b70:	7892      	ldrb	r2, [r2, #2]
 8001b72:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3303      	adds	r3, #3
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <getGWfromDHCP+0x3c>)
 8001b7a:	78d2      	ldrb	r2, [r2, #3]
 8001b7c:	701a      	strb	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	200000d0 	.word	0x200000d0

08001b90 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <getSNfromDHCP+0x3c>)
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <getSNfromDHCP+0x3c>)
 8001ba6:	7852      	ldrb	r2, [r2, #1]
 8001ba8:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3302      	adds	r3, #2
 8001bae:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <getSNfromDHCP+0x3c>)
 8001bb0:	7892      	ldrb	r2, [r2, #2]
 8001bb2:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3303      	adds	r3, #3
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <getSNfromDHCP+0x3c>)
 8001bba:	78d2      	ldrb	r2, [r2, #3]
 8001bbc:	701a      	strb	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200000d4 	.word	0x200000d4

08001bd0 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <getDNSfromDHCP+0x3c>)
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3301      	adds	r3, #1
 8001be4:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <getDNSfromDHCP+0x3c>)
 8001be6:	7852      	ldrb	r2, [r2, #1]
 8001be8:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3302      	adds	r3, #2
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <getDNSfromDHCP+0x3c>)
 8001bf0:	7892      	ldrb	r2, [r2, #2]
 8001bf2:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3303      	adds	r3, #3
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <getDNSfromDHCP+0x3c>)
 8001bfa:	78d2      	ldrb	r2, [r2, #3]
 8001bfc:	701a      	strb	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	200000d8 	.word	0x200000d8

08001c10 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	2b09      	cmp	r3, #9
 8001c26:	d803      	bhi.n	8001c30 <NibbleToHex+0x20>
    return nibble + '0';
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	3330      	adds	r3, #48	; 0x30
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	e002      	b.n	8001c36 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	3337      	adds	r3, #55	; 0x37
 8001c34:	b2db      	uxtb	r3, r3
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8001c50:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <DNS_init+0x2c>)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8001c56:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <DNS_init+0x30>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <DNS_init+0x34>)
 8001c5e:	f241 1222 	movw	r2, #4386	; 0x1122
 8001c62:	801a      	strh	r2, [r3, #0]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	200000f8 	.word	0x200000f8
 8001c74:	200000f4 	.word	0x200000f4
 8001c78:	200000fa 	.word	0x200000fa

08001c7c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <WIZCHIP_READ+0x24>
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d114      	bne.n	8001cca <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	0c12      	lsrs	r2, r2, #16
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	4610      	mov	r0, r2
 8001cac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	0a12      	lsrs	r2, r2, #8
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4798      	blx	r3
 8001cc8:	e011      	b.n	8001cee <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f107 020c 	add.w	r2, r7, #12
 8001ce8:	2103      	movs	r1, #3
 8001cea:	4610      	mov	r0, r2
 8001cec:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4798      	blx	r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <WIZCHIP_READ+0x94>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	4798      	blx	r3
   return ret;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000020 	.word	0x20000020

08001d14 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <WIZCHIP_WRITE+0x98>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <WIZCHIP_WRITE+0x98>)
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <WIZCHIP_WRITE+0x98>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d119      	bne.n	8001d70 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <WIZCHIP_WRITE+0x98>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	0c12      	lsrs	r2, r2, #16
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	4610      	mov	r0, r2
 8001d48:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <WIZCHIP_WRITE+0x98>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	0a12      	lsrs	r2, r2, #8
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	4610      	mov	r0, r2
 8001d56:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <WIZCHIP_WRITE+0x98>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	4610      	mov	r0, r2
 8001d62:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <WIZCHIP_WRITE+0x98>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4798      	blx	r3
 8001d6e:	e013      	b.n	8001d98 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <WIZCHIP_WRITE+0x98>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f107 020c 	add.w	r2, r7, #12
 8001d92:	2104      	movs	r1, #4
 8001d94:	4610      	mov	r0, r2
 8001d96:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <WIZCHIP_WRITE+0x98>)
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001d9e:	4b03      	ldr	r3, [pc, #12]	; (8001dac <WIZCHIP_WRITE+0x98>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4798      	blx	r3
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000020 	.word	0x20000020

08001db0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <WIZCHIP_READ_BUF+0x2a>
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d126      	bne.n	8001e28 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	0c12      	lsrs	r2, r2, #16
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	4610      	mov	r0, r2
 8001de6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	0a12      	lsrs	r2, r2, #8
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	4610      	mov	r0, r2
 8001df4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	82fb      	strh	r3, [r7, #22]
 8001e06:	e00a      	b.n	8001e1e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	8afa      	ldrh	r2, [r7, #22]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	188c      	adds	r4, r1, r2
 8001e12:	4798      	blx	r3
 8001e14:	4603      	mov	r3, r0
 8001e16:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001e18:	8afb      	ldrh	r3, [r7, #22]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	82fb      	strh	r3, [r7, #22]
 8001e1e:	8afa      	ldrh	r2, [r7, #22]
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3f0      	bcc.n	8001e08 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e26:	e017      	b.n	8001e58 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	0c1b      	lsrs	r3, r3, #16
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f107 0210 	add.w	r2, r7, #16
 8001e46:	2103      	movs	r1, #3
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	4611      	mov	r1, r2
 8001e54:	68b8      	ldr	r0, [r7, #8]
 8001e56:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001e5e:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <WIZCHIP_READ_BUF+0xbc>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4798      	blx	r3
}
 8001e64:	bf00      	nop
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd90      	pop	{r4, r7, pc}
 8001e6c:	20000020 	.word	0x20000020

08001e70 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d126      	bne.n	8001ee8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	0c12      	lsrs	r2, r2, #16
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	0a12      	lsrs	r2, r2, #8
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	82fb      	strh	r3, [r7, #22]
 8001ec6:	e00a      	b.n	8001ede <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	8afa      	ldrh	r2, [r7, #22]
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	440a      	add	r2, r1
 8001ed2:	7812      	ldrb	r2, [r2, #0]
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001ed8:	8afb      	ldrh	r3, [r7, #22]
 8001eda:	3301      	adds	r3, #1
 8001edc:	82fb      	strh	r3, [r7, #22]
 8001ede:	8afa      	ldrh	r2, [r7, #22]
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d3f0      	bcc.n	8001ec8 <WIZCHIP_WRITE_BUF+0x58>
 8001ee6:	e017      	b.n	8001f18 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	0c1b      	lsrs	r3, r3, #16
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f107 0210 	add.w	r2, r7, #16
 8001f06:	2103      	movs	r1, #3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	4611      	mov	r1, r2
 8001f14:	68b8      	ldr	r0, [r7, #8]
 8001f16:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001f1e:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <WIZCHIP_WRITE_BUF+0xbc>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	4798      	blx	r3
}
 8001f24:	bf00      	nop
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000020 	.word	0x20000020

08001f30 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	81fb      	strh	r3, [r7, #14]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	3301      	adds	r3, #1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fe94 	bl	8001c7c <WIZCHIP_READ>
 8001f54:	4603      	mov	r3, r0
 8001f56:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001f58:	89bb      	ldrh	r3, [r7, #12]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	b29c      	uxth	r4, r3
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	3301      	adds	r3, #1
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fe86 	bl	8001c7c <WIZCHIP_READ>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4423      	add	r3, r4
 8001f76:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001f78:	89bb      	ldrh	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01a      	beq.n	8001fb4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	3301      	adds	r3, #1
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fe76 	bl	8001c7c <WIZCHIP_READ>
 8001f90:	4603      	mov	r3, r0
 8001f92:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001f94:	89fb      	ldrh	r3, [r7, #14]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	b29c      	uxth	r4, r3
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fe68 	bl	8001c7c <WIZCHIP_READ>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4423      	add	r3, r4
 8001fb2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001fb4:	89fa      	ldrh	r2, [r7, #14]
 8001fb6:	89bb      	ldrh	r3, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1c2      	bne.n	8001f42 <getSn_TX_FSR+0x12>
   return val;
 8001fbc:	89fb      	ldrh	r3, [r7, #14]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd90      	pop	{r4, r7, pc}

08001fc6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001fc6:	b590      	push	{r4, r7, lr}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	81fb      	strh	r3, [r7, #14]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	3301      	adds	r3, #1
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fe49 	bl	8001c7c <WIZCHIP_READ>
 8001fea:	4603      	mov	r3, r0
 8001fec:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001fee:	89bb      	ldrh	r3, [r7, #12]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	b29c      	uxth	r4, r3
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe3b 	bl	8001c7c <WIZCHIP_READ>
 8002006:	4603      	mov	r3, r0
 8002008:	b29b      	uxth	r3, r3
 800200a:	4423      	add	r3, r4
 800200c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800200e:	89bb      	ldrh	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01a      	beq.n	800204a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3301      	adds	r3, #1
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fe2b 	bl	8001c7c <WIZCHIP_READ>
 8002026:	4603      	mov	r3, r0
 8002028:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800202a:	89fb      	ldrh	r3, [r7, #14]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b29c      	uxth	r4, r3
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3301      	adds	r3, #1
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fe1d 	bl	8001c7c <WIZCHIP_READ>
 8002042:	4603      	mov	r3, r0
 8002044:	b29b      	uxth	r3, r3
 8002046:	4423      	add	r3, r4
 8002048:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800204a:	89fa      	ldrh	r2, [r7, #14]
 800204c:	89bb      	ldrh	r3, [r7, #12]
 800204e:	429a      	cmp	r2, r3
 8002050:	d1c2      	bne.n	8001fd8 <getSn_RX_RSR+0x12>
   return val;
 8002052:	89fb      	ldrh	r3, [r7, #14]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bd90      	pop	{r4, r7, pc}

0800205c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	71fb      	strb	r3, [r7, #7]
 8002068:	4613      	mov	r3, r2
 800206a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002074:	88bb      	ldrh	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d048      	beq.n	800210c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	3301      	adds	r3, #1
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fdf8 	bl	8001c7c <WIZCHIP_READ>
 800208c:	4603      	mov	r3, r0
 800208e:	b29b      	uxth	r3, r3
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	b29c      	uxth	r4, r3
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	3301      	adds	r3, #1
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fdeb 	bl	8001c7c <WIZCHIP_READ>
 80020a6:	4603      	mov	r3, r0
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	4423      	add	r3, r4
 80020ac:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80020ae:	89fb      	ldrh	r3, [r7, #14]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	79fa      	ldrb	r2, [r7, #7]
 80020b4:	0092      	lsls	r2, r2, #2
 80020b6:	3202      	adds	r2, #2
 80020b8:	00d2      	lsls	r2, r2, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80020be:	88bb      	ldrh	r3, [r7, #4]
 80020c0:	461a      	mov	r2, r3
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	68b8      	ldr	r0, [r7, #8]
 80020c6:	f7ff fed3 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80020ca:	89fa      	ldrh	r2, [r7, #14]
 80020cc:	88bb      	ldrh	r3, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	3301      	adds	r3, #1
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80020de:	461a      	mov	r2, r3
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	4619      	mov	r1, r3
 80020ea:	4610      	mov	r0, r2
 80020ec:	f7ff fe12 	bl	8001d14 <WIZCHIP_WRITE>
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	3301      	adds	r3, #1
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80020fc:	461a      	mov	r2, r3
 80020fe:	89fb      	ldrh	r3, [r7, #14]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4619      	mov	r1, r3
 8002104:	4610      	mov	r0, r2
 8002106:	f7ff fe05 	bl	8001d14 <WIZCHIP_WRITE>
 800210a:	e000      	b.n	800210e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800210c:	bf00      	nop
}
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}

08002114 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
 8002120:	4613      	mov	r3, r2
 8002122:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800212c:	88bb      	ldrh	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d048      	beq.n	80021c4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	3301      	adds	r3, #1
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fd9c 	bl	8001c7c <WIZCHIP_READ>
 8002144:	4603      	mov	r3, r0
 8002146:	b29b      	uxth	r3, r3
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	b29c      	uxth	r4, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	3301      	adds	r3, #1
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fd8f 	bl	8001c7c <WIZCHIP_READ>
 800215e:	4603      	mov	r3, r0
 8002160:	b29b      	uxth	r3, r3
 8002162:	4423      	add	r3, r4
 8002164:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002166:	89fb      	ldrh	r3, [r7, #14]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	3203      	adds	r2, #3
 8002170:	00d2      	lsls	r2, r2, #3
 8002172:	4413      	add	r3, r2
 8002174:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002176:	88bb      	ldrh	r3, [r7, #4]
 8002178:	461a      	mov	r2, r3
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	68b8      	ldr	r0, [r7, #8]
 800217e:	f7ff fe17 	bl	8001db0 <WIZCHIP_READ_BUF>
   ptr += len;
 8002182:	89fa      	ldrh	r2, [r7, #14]
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	3301      	adds	r3, #1
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002196:	461a      	mov	r2, r3
 8002198:	89fb      	ldrh	r3, [r7, #14]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	b29b      	uxth	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f7ff fdb6 	bl	8001d14 <WIZCHIP_WRITE>
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	3301      	adds	r3, #1
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80021b4:	461a      	mov	r2, r3
 80021b6:	89fb      	ldrh	r3, [r7, #14]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4619      	mov	r1, r3
 80021bc:	4610      	mov	r0, r2
 80021be:	f7ff fda9 	bl	8001d14 <WIZCHIP_WRITE>
 80021c2:	e000      	b.n	80021c6 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80021c4:	bf00      	nop
}
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}

080021cc <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	460a      	mov	r2, r1
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	4613      	mov	r3, r2
 80021da:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	3301      	adds	r3, #1
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fd45 	bl	8001c7c <WIZCHIP_READ>
 80021f2:	4603      	mov	r3, r0
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	b29c      	uxth	r4, r3
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	3301      	adds	r3, #1
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fd38 	bl	8001c7c <WIZCHIP_READ>
 800220c:	4603      	mov	r3, r0
 800220e:	b29b      	uxth	r3, r3
 8002210:	4423      	add	r3, r4
 8002212:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8002214:	89fa      	ldrh	r2, [r7, #14]
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	3301      	adds	r3, #1
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002228:	461a      	mov	r2, r3
 800222a:	89fb      	ldrh	r3, [r7, #14]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	b29b      	uxth	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f7ff fd6d 	bl	8001d14 <WIZCHIP_WRITE>
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	3301      	adds	r3, #1
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002246:	461a      	mov	r2, r3
 8002248:	89fb      	ldrh	r3, [r7, #14]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f7ff fd60 	bl	8001d14 <WIZCHIP_WRITE>
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}

0800225c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	4604      	mov	r4, r0
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	461a      	mov	r2, r3
 800226a:	4623      	mov	r3, r4
 800226c:	71fb      	strb	r3, [r7, #7]
 800226e:	4603      	mov	r3, r0
 8002270:	71bb      	strb	r3, [r7, #6]
 8002272:	460b      	mov	r3, r1
 8002274:	80bb      	strh	r3, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d902      	bls.n	8002286 <socket+0x2a>
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	e0f0      	b.n	8002468 <socket+0x20c>
	switch(protocol)
 8002286:	79bb      	ldrb	r3, [r7, #6]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d005      	beq.n	8002298 <socket+0x3c>
 800228c:	2b00      	cmp	r3, #0
 800228e:	dd11      	ble.n	80022b4 <socket+0x58>
 8002290:	3b02      	subs	r3, #2
 8002292:	2b02      	cmp	r3, #2
 8002294:	d80e      	bhi.n	80022b4 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002296:	e010      	b.n	80022ba <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	2204      	movs	r2, #4
 800229e:	4619      	mov	r1, r3
 80022a0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80022a4:	f7ff fd84 	bl	8001db0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <socket+0x5e>
 80022ae:	f06f 0302 	mvn.w	r3, #2
 80022b2:	e0d9      	b.n	8002468 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80022b4:	f06f 0304 	mvn.w	r3, #4
 80022b8:	e0d6      	b.n	8002468 <socket+0x20c>
         break;
 80022ba:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <socket+0x70>
 80022c6:	f06f 0305 	mvn.w	r3, #5
 80022ca:	e0cd      	b.n	8002468 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d028      	beq.n	8002324 <socket+0xc8>
	{
   	switch(protocol)
 80022d2:	79bb      	ldrb	r3, [r7, #6]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d002      	beq.n	80022de <socket+0x82>
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d008      	beq.n	80022ee <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80022dc:	e022      	b.n	8002324 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11a      	bne.n	800231e <socket+0xc2>
 80022e8:	f06f 0305 	mvn.w	r3, #5
 80022ec:	e0bc      	b.n	8002468 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80022f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db02      	blt.n	8002306 <socket+0xaa>
 8002300:	f06f 0305 	mvn.w	r3, #5
 8002304:	e0b0      	b.n	8002468 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db04      	blt.n	8002322 <socket+0xc6>
 8002318:	f06f 0305 	mvn.w	r3, #5
 800231c:	e0a4      	b.n	8002468 <socket+0x20c>
   	      break;
 800231e:	bf00      	nop
 8002320:	e000      	b.n	8002324 <socket+0xc8>
   	      break;
 8002322:	bf00      	nop
   	}
   }
	close(sn);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f8ac 	bl	8002484 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	3301      	adds	r3, #1
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4618      	mov	r0, r3
 8002336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800233a:	f023 030f 	bic.w	r3, r3, #15
 800233e:	b25a      	sxtb	r2, r3
 8002340:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002344:	4313      	orrs	r3, r2
 8002346:	b25b      	sxtb	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4619      	mov	r1, r3
 800234c:	f7ff fce2 	bl	8001d14 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002350:	88bb      	ldrh	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d110      	bne.n	8002378 <socket+0x11c>
	{
	   port = sock_any_port++;
 8002356:	4b46      	ldr	r3, [pc, #280]	; (8002470 <socket+0x214>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	b291      	uxth	r1, r2
 800235e:	4a44      	ldr	r2, [pc, #272]	; (8002470 <socket+0x214>)
 8002360:	8011      	strh	r1, [r2, #0]
 8002362:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002364:	4b42      	ldr	r3, [pc, #264]	; (8002470 <socket+0x214>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800236c:	4293      	cmp	r3, r2
 800236e:	d103      	bne.n	8002378 <socket+0x11c>
 8002370:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <socket+0x214>)
 8002372:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002376:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	3301      	adds	r3, #1
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002384:	461a      	mov	r2, r3
 8002386:	88bb      	ldrh	r3, [r7, #4]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	b29b      	uxth	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	4619      	mov	r1, r3
 8002390:	4610      	mov	r0, r2
 8002392:	f7ff fcbf 	bl	8001d14 <WIZCHIP_WRITE>
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	3301      	adds	r3, #1
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	461a      	mov	r2, r3
 80023a4:	88bb      	ldrh	r3, [r7, #4]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f7ff fcb2 	bl	8001d14 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	3301      	adds	r3, #1
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023bc:	2101      	movs	r1, #1
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fca8 	bl	8001d14 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80023c4:	bf00      	nop
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	3301      	adds	r3, #1
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fc52 	bl	8001c7c <WIZCHIP_READ>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f3      	bne.n	80023c6 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2201      	movs	r2, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	4b21      	ldr	r3, [pc, #132]	; (8002474 <socket+0x218>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	4013      	ands	r3, r2
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <socket+0x218>)
 80023fa:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 0201 	and.w	r2, r3, #1
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	b21a      	sxth	r2, r3
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <socket+0x218>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b21b      	sxth	r3, r3
 8002410:	4313      	orrs	r3, r2
 8002412:	b21b      	sxth	r3, r3
 8002414:	b29a      	uxth	r2, r3
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <socket+0x218>)
 8002418:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2201      	movs	r2, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	b21b      	sxth	r3, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	b21a      	sxth	r2, r3
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <socket+0x21c>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4013      	ands	r3, r2
 8002430:	b21b      	sxth	r3, r3
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <socket+0x21c>)
 8002436:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <socket+0x220>)
 800243c:	2100      	movs	r1, #0
 800243e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <socket+0x224>)
 8002446:	2100      	movs	r1, #0
 8002448:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800244a:	bf00      	nop
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	3301      	adds	r3, #1
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fc0f 	bl	8001c7c <WIZCHIP_READ>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f3      	beq.n	800244c <socket+0x1f0>
   return (int8_t)sn;
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	2000001c 	.word	0x2000001c
 8002474:	200000fc 	.word	0x200000fc
 8002478:	200000fe 	.word	0x200000fe
 800247c:	20000100 	.word	0x20000100
 8002480:	20000110 	.word	0x20000110

08002484 <close>:

int8_t close(uint8_t sn)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d902      	bls.n	800249a <close+0x16>
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	e055      	b.n	8002546 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	3301      	adds	r3, #1
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024a6:	2110      	movs	r1, #16
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fc33 	bl	8001d14 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80024ae:	bf00      	nop
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	3301      	adds	r3, #1
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fbdd 	bl	8001c7c <WIZCHIP_READ>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f3      	bne.n	80024b0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	3301      	adds	r3, #1
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80024d4:	211f      	movs	r1, #31
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fc1c 	bl	8001d14 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2201      	movs	r2, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	b21b      	sxth	r3, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	b21a      	sxth	r2, r3
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <close+0xcc>)
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	4013      	ands	r3, r2
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <close+0xcc>)
 80024f8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2201      	movs	r2, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	b21b      	sxth	r3, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	b21a      	sxth	r2, r3
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <close+0xd0>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b21b      	sxth	r3, r3
 800250e:	4013      	ands	r3, r2
 8002510:	b21b      	sxth	r3, r3
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <close+0xd0>)
 8002516:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <close+0xd4>)
 800251c:	2100      	movs	r1, #0
 800251e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	4a0d      	ldr	r2, [pc, #52]	; (800255c <close+0xd8>)
 8002526:	2100      	movs	r1, #0
 8002528:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800252a:	bf00      	nop
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	3301      	adds	r3, #1
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fb9f 	bl	8001c7c <WIZCHIP_READ>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f3      	bne.n	800252c <close+0xa8>
	return SOCK_OK;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200000fc 	.word	0x200000fc
 8002554:	200000fe 	.word	0x200000fe
 8002558:	20000100 	.word	0x20000100
 800255c:	20000110 	.word	0x20000110

08002560 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
 800256c:	4613      	mov	r3, r2
 800256e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	2b08      	cmp	r3, #8
 8002574:	d902      	bls.n	800257c <connect+0x1c>
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	e0c6      	b.n	800270a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	3301      	adds	r3, #1
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fb79 	bl	8001c7c <WIZCHIP_READ>
 800258a:	4603      	mov	r3, r0
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	2b01      	cmp	r3, #1
 8002592:	d002      	beq.n	800259a <connect+0x3a>
 8002594:	f06f 0304 	mvn.w	r3, #4
 8002598:	e0b7      	b.n	800270a <connect+0x1aa>
   CHECK_SOCKINIT();
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	3301      	adds	r3, #1
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fb68 	bl	8001c7c <WIZCHIP_READ>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b13      	cmp	r3, #19
 80025b0:	d002      	beq.n	80025b8 <connect+0x58>
 80025b2:	f06f 0302 	mvn.w	r3, #2
 80025b6:	e0a8      	b.n	800270a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	3201      	adds	r2, #1
 80025c6:	7812      	ldrb	r2, [r2, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	3202      	adds	r2, #2
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	3203      	adds	r2, #3
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d002      	beq.n	80025f6 <connect+0x96>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <connect+0x9c>
 80025f6:	f06f 030b 	mvn.w	r3, #11
 80025fa:	e086      	b.n	800270a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80025fc:	88bb      	ldrh	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <connect+0xa8>
 8002602:	f06f 030a 	mvn.w	r3, #10
 8002606:	e080      	b.n	800270a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	3301      	adds	r3, #1
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002614:	2204      	movs	r2, #4
 8002616:	6839      	ldr	r1, [r7, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fc29 	bl	8001e70 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	3301      	adds	r3, #1
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262a:	461a      	mov	r2, r3
 800262c:	88bb      	ldrh	r3, [r7, #4]
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	b29b      	uxth	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f7ff fb6c 	bl	8001d14 <WIZCHIP_WRITE>
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	3301      	adds	r3, #1
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002648:	461a      	mov	r2, r3
 800264a:	88bb      	ldrh	r3, [r7, #4]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f7ff fb5f 	bl	8001d14 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	3301      	adds	r3, #1
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002662:	2104      	movs	r1, #4
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fb55 	bl	8001d14 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800266a:	bf00      	nop
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	3301      	adds	r3, #1
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff faff 	bl	8001c7c <WIZCHIP_READ>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f3      	bne.n	800266c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <connect+0x1b4>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	fa42 f303 	asr.w	r3, r2, r3
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02b      	beq.n	80026f0 <connect+0x190>
 8002698:	2300      	movs	r3, #0
 800269a:	e036      	b.n	800270a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	3301      	adds	r3, #1
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fae7 	bl	8001c7c <WIZCHIP_READ>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00c      	beq.n	80026d2 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	3301      	adds	r3, #1
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026c4:	2108      	movs	r1, #8
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fb24 	bl	8001d14 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80026cc:	f06f 030c 	mvn.w	r3, #12
 80026d0:	e01b      	b.n	800270a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	3301      	adds	r3, #1
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff facc 	bl	8001c7c <WIZCHIP_READ>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80026ea:	f06f 0303 	mvn.w	r3, #3
 80026ee:	e00c      	b.n	800270a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	3301      	adds	r3, #1
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fabd 	bl	8001c7c <WIZCHIP_READ>
 8002702:	4603      	mov	r3, r0
 8002704:	2b17      	cmp	r3, #23
 8002706:	d1c9      	bne.n	800269c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8002708:	2301      	movs	r3, #1
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200000fc 	.word	0x200000fc

08002718 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d902      	bls.n	800272e <disconnect+0x16>
 8002728:	f04f 33ff 	mov.w	r3, #4294967295
 800272c:	e062      	b.n	80027f4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	3301      	adds	r3, #1
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff faa0 	bl	8001c7c <WIZCHIP_READ>
 800273c:	4603      	mov	r3, r0
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	2b01      	cmp	r3, #1
 8002744:	d002      	beq.n	800274c <disconnect+0x34>
 8002746:	f06f 0304 	mvn.w	r3, #4
 800274a:	e053      	b.n	80027f4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	3301      	adds	r3, #1
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002758:	2108      	movs	r1, #8
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fada 	bl	8001d14 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002760:	bf00      	nop
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	3301      	adds	r3, #1
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fa84 	bl	8001c7c <WIZCHIP_READ>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f3      	bne.n	8002762 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2201      	movs	r2, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	b21b      	sxth	r3, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	b21a      	sxth	r2, r3
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <disconnect+0xe4>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b21b      	sxth	r3, r3
 800278e:	4013      	ands	r3, r2
 8002790:	b21b      	sxth	r3, r3
 8002792:	b29a      	uxth	r2, r3
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <disconnect+0xe4>)
 8002796:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <disconnect+0xe8>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	fa42 f303 	asr.w	r3, r2, r3
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d016      	beq.n	80027da <disconnect+0xc2>
 80027ac:	2300      	movs	r3, #0
 80027ae:	e021      	b.n	80027f4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	3301      	adds	r3, #1
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fa5d 	bl	8001c7c <WIZCHIP_READ>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <disconnect+0xc2>
	   {
	      close(sn);
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fe58 	bl	8002484 <close>
	      return SOCKERR_TIMEOUT;
 80027d4:	f06f 030c 	mvn.w	r3, #12
 80027d8:	e00c      	b.n	80027f4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	3301      	adds	r3, #1
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fa48 	bl	8001c7c <WIZCHIP_READ>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1de      	bne.n	80027b0 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80027f2:	2301      	movs	r3, #1
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200000fe 	.word	0x200000fe
 8002800:	200000fc 	.word	0x200000fc

08002804 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
 8002810:	4613      	mov	r3, r2
 8002812:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002818:	2300      	movs	r3, #0
 800281a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d902      	bls.n	8002828 <send+0x24>
 8002822:	f04f 33ff 	mov.w	r3, #4294967295
 8002826:	e0de      	b.n	80029e6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	3301      	adds	r3, #1
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fa23 	bl	8001c7c <WIZCHIP_READ>
 8002836:	4603      	mov	r3, r0
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	2b01      	cmp	r3, #1
 800283e:	d002      	beq.n	8002846 <send+0x42>
 8002840:	f06f 0304 	mvn.w	r3, #4
 8002844:	e0cf      	b.n	80029e6 <send+0x1e2>
   CHECK_SOCKDATA();
 8002846:	88bb      	ldrh	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <send+0x4e>
 800284c:	f06f 030d 	mvn.w	r3, #13
 8002850:	e0c9      	b.n	80029e6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	3301      	adds	r3, #1
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fa0c 	bl	8001c7c <WIZCHIP_READ>
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b17      	cmp	r3, #23
 800286c:	d005      	beq.n	800287a <send+0x76>
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b1c      	cmp	r3, #28
 8002872:	d002      	beq.n	800287a <send+0x76>
 8002874:	f06f 0306 	mvn.w	r3, #6
 8002878:	e0b5      	b.n	80029e6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <send+0x1ec>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	fa42 f303 	asr.w	r3, r2, r3
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d039      	beq.n	8002902 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	3301      	adds	r3, #1
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f9ee 	bl	8001c7c <WIZCHIP_READ>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d019      	beq.n	80028e6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	3301      	adds	r3, #1
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028be:	2110      	movs	r1, #16
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fa27 	bl	8001d14 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	2201      	movs	r2, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <send+0x1ec>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b21b      	sxth	r3, r3
 80028da:	4013      	ands	r3, r2
 80028dc:	b21b      	sxth	r3, r3
 80028de:	b29a      	uxth	r2, r3
 80028e0:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <send+0x1ec>)
 80028e2:	801a      	strh	r2, [r3, #0]
 80028e4:	e00d      	b.n	8002902 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <send+0xfa>
      {
         close(sn);
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fdc6 	bl	8002484 <close>
         return SOCKERR_TIMEOUT;
 80028f8:	f06f 030c 	mvn.w	r3, #12
 80028fc:	e073      	b.n	80029e6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80028fe:	2300      	movs	r3, #0
 8002900:	e071      	b.n	80029e6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	3301      	adds	r3, #1
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f9b4 	bl	8001c7c <WIZCHIP_READ>
 8002914:	4603      	mov	r3, r0
 8002916:	b29b      	uxth	r3, r3
 8002918:	029b      	lsls	r3, r3, #10
 800291a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800291c:	88ba      	ldrh	r2, [r7, #4]
 800291e:	89bb      	ldrh	r3, [r7, #12]
 8002920:	429a      	cmp	r2, r3
 8002922:	d901      	bls.n	8002928 <send+0x124>
 8002924:	89bb      	ldrh	r3, [r7, #12]
 8002926:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fb00 	bl	8001f30 <getSn_TX_FSR>
 8002930:	4603      	mov	r3, r0
 8002932:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	3301      	adds	r3, #1
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff f99b 	bl	8001c7c <WIZCHIP_READ>
 8002946:	4603      	mov	r3, r0
 8002948:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b17      	cmp	r3, #23
 800294e:	d009      	beq.n	8002964 <send+0x160>
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b1c      	cmp	r3, #28
 8002954:	d006      	beq.n	8002964 <send+0x160>
      {
         close(sn);
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fd93 	bl	8002484 <close>
         return SOCKERR_SOCKSTATUS;
 800295e:	f06f 0306 	mvn.w	r3, #6
 8002962:	e040      	b.n	80029e6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <send+0x1f0>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	fa42 f303 	asr.w	r3, r2, r3
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <send+0x180>
 8002978:	88ba      	ldrh	r2, [r7, #4]
 800297a:	89bb      	ldrh	r3, [r7, #12]
 800297c:	429a      	cmp	r2, r3
 800297e:	d901      	bls.n	8002984 <send+0x180>
 8002980:	2300      	movs	r3, #0
 8002982:	e030      	b.n	80029e6 <send+0x1e2>
      if(len <= freesize) break;
 8002984:	88ba      	ldrh	r2, [r7, #4]
 8002986:	89bb      	ldrh	r3, [r7, #12]
 8002988:	429a      	cmp	r2, r3
 800298a:	d900      	bls.n	800298e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800298c:	e7cc      	b.n	8002928 <send+0x124>
      if(len <= freesize) break;
 800298e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002990:	88ba      	ldrh	r2, [r7, #4]
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fb60 	bl	800205c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	3301      	adds	r3, #1
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029a8:	2120      	movs	r1, #32
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff f9b2 	bl	8001d14 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80029b0:	bf00      	nop
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3301      	adds	r3, #1
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff f95c 	bl	8001c7c <WIZCHIP_READ>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f3      	bne.n	80029b2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	2201      	movs	r2, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <send+0x1ec>)
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b21b      	sxth	r3, r3
 80029da:	4313      	orrs	r3, r2
 80029dc:	b21b      	sxth	r3, r3
 80029de:	b29a      	uxth	r2, r3
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <send+0x1ec>)
 80029e2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80029e4:	88bb      	ldrh	r3, [r7, #4]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200000fe 	.word	0x200000fe
 80029f4:	200000fc 	.word	0x200000fc

080029f8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	71fb      	strb	r3, [r7, #7]
 8002a04:	4613      	mov	r3, r2
 8002a06:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d902      	bls.n	8002a1c <recv+0x24>
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	e09c      	b.n	8002b56 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	3301      	adds	r3, #1
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f929 	bl	8001c7c <WIZCHIP_READ>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d002      	beq.n	8002a3a <recv+0x42>
 8002a34:	f06f 0304 	mvn.w	r3, #4
 8002a38:	e08d      	b.n	8002b56 <recv+0x15e>
   CHECK_SOCKDATA();
 8002a3a:	88bb      	ldrh	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <recv+0x4e>
 8002a40:	f06f 030d 	mvn.w	r3, #13
 8002a44:	e087      	b.n	8002b56 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f912 	bl	8001c7c <WIZCHIP_READ>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	029b      	lsls	r3, r3, #10
 8002a5e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002a60:	89ba      	ldrh	r2, [r7, #12]
 8002a62:	88bb      	ldrh	r3, [r7, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d201      	bcs.n	8002a6c <recv+0x74>
 8002a68:	89bb      	ldrh	r3, [r7, #12]
 8002a6a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff faa9 	bl	8001fc6 <getSn_RX_RSR>
 8002a74:	4603      	mov	r3, r0
 8002a76:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff f8f9 	bl	8001c7c <WIZCHIP_READ>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b17      	cmp	r3, #23
 8002a92:	d026      	beq.n	8002ae2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b1c      	cmp	r3, #28
 8002a98:	d11c      	bne.n	8002ad4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d133      	bne.n	8002b08 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fa44 	bl	8001f30 <getSn_TX_FSR>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461c      	mov	r4, r3
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff f8df 	bl	8001c7c <WIZCHIP_READ>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	029b      	lsls	r3, r3, #10
 8002ac2:	429c      	cmp	r4, r3
 8002ac4:	d10d      	bne.n	8002ae2 <recv+0xea>
               {
                  close(sn);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fcdb 	bl	8002484 <close>
                  return SOCKERR_SOCKSTATUS;
 8002ace:	f06f 0306 	mvn.w	r3, #6
 8002ad2:	e040      	b.n	8002b56 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fcd4 	bl	8002484 <close>
               return SOCKERR_SOCKSTATUS;
 8002adc:	f06f 0306 	mvn.w	r3, #6
 8002ae0:	e039      	b.n	8002b56 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <recv+0x168>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	fa42 f303 	asr.w	r3, r2, r3
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <recv+0x108>
 8002af6:	89bb      	ldrh	r3, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <recv+0x108>
 8002afc:	2300      	movs	r3, #0
 8002afe:	e02a      	b.n	8002b56 <recv+0x15e>
         if(recvsize != 0) break;
 8002b00:	89bb      	ldrh	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8002b06:	e7b1      	b.n	8002a6c <recv+0x74>
               if(recvsize != 0) break;
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <recv+0x116>
         if(recvsize != 0) break;
 8002b0c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002b0e:	89ba      	ldrh	r2, [r7, #12]
 8002b10:	88bb      	ldrh	r3, [r7, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d201      	bcs.n	8002b1a <recv+0x122>
 8002b16:	89bb      	ldrh	r3, [r7, #12]
 8002b18:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002b1a:	88ba      	ldrh	r2, [r7, #4]
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff faf7 	bl	8002114 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b32:	2140      	movs	r1, #64	; 0x40
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff f8ed 	bl	8001d14 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002b3a:	bf00      	nop
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	3301      	adds	r3, #1
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff f897 	bl	8001c7c <WIZCHIP_READ>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f3      	bne.n	8002b3c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002b54:	88bb      	ldrh	r3, [r7, #4]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200000fc 	.word	0x200000fc

08002b64 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	4603      	mov	r3, r0
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	4613      	mov	r3, r2
 8002b74:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d902      	bls.n	8002b8a <sendto+0x26>
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
 8002b88:	e11b      	b.n	8002dc2 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	3301      	adds	r3, #1
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f872 	bl	8001c7c <WIZCHIP_READ>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	3b02      	subs	r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d902      	bls.n	8002baa <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002ba4:	f06f 0304 	mvn.w	r3, #4
 8002ba8:	e10b      	b.n	8002dc2 <sendto+0x25e>
         break;
 8002baa:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002bac:	89bb      	ldrh	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <sendto+0x54>
 8002bb2:	f06f 030d 	mvn.w	r3, #13
 8002bb6:	e104      	b.n	8002dc2 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	3201      	adds	r2, #1
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	3202      	adds	r2, #2
 8002bd4:	7812      	ldrb	r2, [r2, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	3203      	adds	r2, #3
 8002be2:	7812      	ldrb	r2, [r2, #0]
 8002be4:	4413      	add	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10e      	bne.n	8002c0c <sendto+0xa8>
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f840 	bl	8001c7c <WIZCHIP_READ>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d002      	beq.n	8002c0c <sendto+0xa8>
 8002c06:	f06f 030b 	mvn.w	r3, #11
 8002c0a:	e0da      	b.n	8002dc2 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002c0c:	8c3b      	ldrh	r3, [r7, #32]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10e      	bne.n	8002c30 <sendto+0xcc>
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	3301      	adds	r3, #1
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff f82e 	bl	8001c7c <WIZCHIP_READ>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d002      	beq.n	8002c30 <sendto+0xcc>
 8002c2a:	f06f 030a 	mvn.w	r3, #10
 8002c2e:	e0c8      	b.n	8002dc2 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	3301      	adds	r3, #1
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff f81d 	bl	8001c7c <WIZCHIP_READ>
 8002c42:	4603      	mov	r3, r0
 8002c44:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b42      	cmp	r3, #66	; 0x42
 8002c4a:	d008      	beq.n	8002c5e <sendto+0xfa>
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	2b22      	cmp	r3, #34	; 0x22
 8002c50:	d005      	beq.n	8002c5e <sendto+0xfa>
 8002c52:	7dfb      	ldrb	r3, [r7, #23]
 8002c54:	2b32      	cmp	r3, #50	; 0x32
 8002c56:	d002      	beq.n	8002c5e <sendto+0xfa>
 8002c58:	f06f 0306 	mvn.w	r3, #6
 8002c5c:	e0b1      	b.n	8002dc2 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3301      	adds	r3, #1
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f8fe 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	3301      	adds	r3, #1
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c80:	461a      	mov	r2, r3
 8002c82:	8c3b      	ldrh	r3, [r7, #32]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	f7ff f841 	bl	8001d14 <WIZCHIP_WRITE>
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	3301      	adds	r3, #1
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	8c3b      	ldrh	r3, [r7, #32]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f7ff f834 	bl	8001d14 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe ffdf 	bl	8001c7c <WIZCHIP_READ>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	029b      	lsls	r3, r3, #10
 8002cc4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002cc6:	89ba      	ldrh	r2, [r7, #12]
 8002cc8:	8abb      	ldrh	r3, [r7, #20]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d901      	bls.n	8002cd2 <sendto+0x16e>
 8002cce:	8abb      	ldrh	r3, [r7, #20]
 8002cd0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f92b 	bl	8001f30 <getSn_TX_FSR>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe ffc6 	bl	8001c7c <WIZCHIP_READ>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d102      	bne.n	8002cfc <sendto+0x198>
 8002cf6:	f06f 0303 	mvn.w	r3, #3
 8002cfa:	e062      	b.n	8002dc2 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002cfc:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <sendto+0x268>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	fa42 f303 	asr.w	r3, r2, r3
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <sendto+0x1b8>
 8002d10:	89ba      	ldrh	r2, [r7, #12]
 8002d12:	8abb      	ldrh	r3, [r7, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d901      	bls.n	8002d1c <sendto+0x1b8>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e052      	b.n	8002dc2 <sendto+0x25e>
      if(len <= freesize) break;
 8002d1c:	89ba      	ldrh	r2, [r7, #12]
 8002d1e:	8abb      	ldrh	r3, [r7, #20]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d900      	bls.n	8002d26 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8002d24:	e7d5      	b.n	8002cd2 <sendto+0x16e>
      if(len <= freesize) break;
 8002d26:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8002d28:	89ba      	ldrh	r2, [r7, #12]
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f994 	bl	800205c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	3301      	adds	r3, #1
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d40:	2120      	movs	r1, #32
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe ffe6 	bl	8001d14 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002d48:	bf00      	nop
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	3301      	adds	r3, #1
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe ff90 	bl	8001c7c <WIZCHIP_READ>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f3      	bne.n	8002d4a <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	3301      	adds	r3, #1
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe ff84 	bl	8001c7c <WIZCHIP_READ>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d92:	2110      	movs	r1, #16
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fe ffbd 	bl	8001d14 <WIZCHIP_WRITE>
         break;
 8002d9a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002d9c:	89bb      	ldrh	r3, [r7, #12]
 8002d9e:	e010      	b.n	8002dc2 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0db      	beq.n	8002d62 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	3301      	adds	r3, #1
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002db6:	2108      	movs	r1, #8
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe ffab 	bl	8001d14 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8002dbe:	f06f 030c 	mvn.w	r3, #12
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200000fc 	.word	0x200000fc

08002dd0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	4613      	mov	r3, r2
 8002de0:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d902      	bls.n	8002df2 <recvfrom+0x22>
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295
 8002df0:	e1d4      	b.n	800319c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	3301      	adds	r3, #1
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe ff3e 	bl	8001c7c <WIZCHIP_READ>
 8002e00:	4603      	mov	r3, r0
 8002e02:	777b      	strb	r3, [r7, #29]
 8002e04:	7f7b      	ldrb	r3, [r7, #29]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	3b02      	subs	r3, #2
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d902      	bls.n	8002e16 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002e10:	f06f 0304 	mvn.w	r3, #4
 8002e14:	e1c2      	b.n	800319c <recvfrom+0x3cc>
         break;
 8002e16:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002e18:	89bb      	ldrh	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <recvfrom+0x54>
 8002e1e:	f06f 030d 	mvn.w	r3, #13
 8002e22:	e1bb      	b.n	800319c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	4a88      	ldr	r2, [pc, #544]	; (8003048 <recvfrom+0x278>)
 8002e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d128      	bne.n	8002e82 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f8c7 	bl	8001fc6 <getSn_RX_RSR>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	3301      	adds	r3, #1
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe ff17 	bl	8001c7c <WIZCHIP_READ>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d102      	bne.n	8002e5a <recvfrom+0x8a>
 8002e54:	f06f 0303 	mvn.w	r3, #3
 8002e58:	e1a0      	b.n	800319c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8002e5a:	4b7c      	ldr	r3, [pc, #496]	; (800304c <recvfrom+0x27c>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	fa42 f303 	asr.w	r3, r2, r3
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <recvfrom+0xa8>
 8002e6e:	8bfb      	ldrh	r3, [r7, #30]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <recvfrom+0xa8>
 8002e74:	2300      	movs	r3, #0
 8002e76:	e191      	b.n	800319c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8002e78:	8bfb      	ldrh	r3, [r7, #30]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d100      	bne.n	8002e80 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8002e7e:	e7d7      	b.n	8002e30 <recvfrom+0x60>
         if(pack_len != 0) break;
 8002e80:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8002e82:	7f7b      	ldrb	r3, [r7, #29]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d079      	beq.n	8002f80 <recvfrom+0x1b0>
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	f300 8142 	bgt.w	8003116 <recvfrom+0x346>
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d003      	beq.n	8002e9e <recvfrom+0xce>
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	f000 80dc 	beq.w	8003054 <recvfrom+0x284>
 8002e9c:	e13b      	b.n	8003116 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	4a69      	ldr	r2, [pc, #420]	; (8003048 <recvfrom+0x278>)
 8002ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d152      	bne.n	8002f50 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8002eaa:	f107 0114 	add.w	r1, r7, #20
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff f92e 	bl	8002114 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ec4:	2140      	movs	r1, #64	; 0x40
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe ff24 	bl	8001d14 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002ecc:	bf00      	nop
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fece 	bl	8001c7c <WIZCHIP_READ>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f3      	bne.n	8002ece <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8002ee6:	7d3a      	ldrb	r2, [r7, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	7d7a      	ldrb	r2, [r7, #21]
 8002ef2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	7dba      	ldrb	r2, [r7, #22]
 8002efa:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3303      	adds	r3, #3
 8002f00:	7dfa      	ldrb	r2, [r7, #23]
 8002f02:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8002f04:	7e3b      	ldrb	r3, [r7, #24]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	7e7b      	ldrb	r3, [r7, #25]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8002f20:	7eba      	ldrb	r2, [r7, #26]
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	b291      	uxth	r1, r2
 8002f26:	4a48      	ldr	r2, [pc, #288]	; (8003048 <recvfrom+0x278>)
 8002f28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	4a46      	ldr	r2, [pc, #280]	; (8003048 <recvfrom+0x278>)
 8002f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	b299      	uxth	r1, r3
 8002f38:	7efb      	ldrb	r3, [r7, #27]
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	440a      	add	r2, r1
 8002f40:	b291      	uxth	r1, r2
 8002f42:	4a41      	ldr	r2, [pc, #260]	; (8003048 <recvfrom+0x278>)
 8002f44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	4a41      	ldr	r2, [pc, #260]	; (8003050 <recvfrom+0x280>)
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	4a3d      	ldr	r2, [pc, #244]	; (8003048 <recvfrom+0x278>)
 8002f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f58:	89ba      	ldrh	r2, [r7, #12]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d202      	bcs.n	8002f64 <recvfrom+0x194>
 8002f5e:	89bb      	ldrh	r3, [r7, #12]
 8002f60:	83fb      	strh	r3, [r7, #30]
 8002f62:	e004      	b.n	8002f6e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	4a38      	ldr	r2, [pc, #224]	; (8003048 <recvfrom+0x278>)
 8002f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f6c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8002f6e:	8bfb      	ldrh	r3, [r7, #30]
 8002f70:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002f72:	8bfa      	ldrh	r2, [r7, #30]
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff f8cb 	bl	8002114 <wiz_recv_data>
			break;
 8002f7e:	e0d6      	b.n	800312e <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	4a31      	ldr	r2, [pc, #196]	; (8003048 <recvfrom+0x278>)
 8002f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d146      	bne.n	800301a <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8002f8c:	f107 0114 	add.w	r1, r7, #20
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2202      	movs	r2, #2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f8bd 	bl	8002114 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe feb3 	bl	8001d14 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002fae:	bf00      	nop
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe fe5d 	bl	8001c7c <WIZCHIP_READ>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f3      	bne.n	8002fb0 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8002fc8:	7d3a      	ldrb	r2, [r7, #20]
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	b291      	uxth	r1, r2
 8002fce:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <recvfrom+0x278>)
 8002fd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	4a1c      	ldr	r2, [pc, #112]	; (8003048 <recvfrom+0x278>)
 8002fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	7d7b      	ldrb	r3, [r7, #21]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	3a02      	subs	r2, #2
 8002fec:	b291      	uxth	r1, r2
 8002fee:	4a16      	ldr	r2, [pc, #88]	; (8003048 <recvfrom+0x278>)
 8002ff0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	4a14      	ldr	r2, [pc, #80]	; (8003048 <recvfrom+0x278>)
 8002ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ffc:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8003000:	4293      	cmp	r3, r2
 8003002:	d906      	bls.n	8003012 <recvfrom+0x242>
   			{
   			   close(sn);
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fa3c 	bl	8002484 <close>
   			   return SOCKFATAL_PACKLEN;
 800300c:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8003010:	e0c4      	b.n	800319c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <recvfrom+0x280>)
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <recvfrom+0x278>)
 800301e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003022:	89ba      	ldrh	r2, [r7, #12]
 8003024:	429a      	cmp	r2, r3
 8003026:	d202      	bcs.n	800302e <recvfrom+0x25e>
 8003028:	89bb      	ldrh	r3, [r7, #12]
 800302a:	83fb      	strh	r3, [r7, #30]
 800302c:	e004      	b.n	8003038 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	4a05      	ldr	r2, [pc, #20]	; (8003048 <recvfrom+0x278>)
 8003032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003036:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003038:	8bfa      	ldrh	r2, [r7, #30]
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f868 	bl	8002114 <wiz_recv_data>
		   break;
 8003044:	e073      	b.n	800312e <recvfrom+0x35e>
 8003046:	bf00      	nop
 8003048:	20000100 	.word	0x20000100
 800304c:	200000fc 	.word	0x200000fc
 8003050:	20000110 	.word	0x20000110
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	4a53      	ldr	r2, [pc, #332]	; (80031a4 <recvfrom+0x3d4>)
 8003058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d144      	bne.n	80030ea <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8003060:	f107 0114 	add.w	r1, r7, #20
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2206      	movs	r2, #6
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f853 	bl	8002114 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	3301      	adds	r3, #1
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800307a:	2140      	movs	r1, #64	; 0x40
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fe49 	bl	8001d14 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003082:	bf00      	nop
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	3301      	adds	r3, #1
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fdf3 	bl	8001c7c <WIZCHIP_READ>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f3      	bne.n	8003084 <recvfrom+0x2b4>
   			addr[0] = head[0];
 800309c:	7d3a      	ldrb	r2, [r7, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3301      	adds	r3, #1
 80030a6:	7d7a      	ldrb	r2, [r7, #21]
 80030a8:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3302      	adds	r3, #2
 80030ae:	7dba      	ldrb	r2, [r7, #22]
 80030b0:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3303      	adds	r3, #3
 80030b6:	7dfa      	ldrb	r2, [r7, #23]
 80030b8:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80030ba:	7e3a      	ldrb	r2, [r7, #24]
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	b291      	uxth	r1, r2
 80030c0:	4a38      	ldr	r2, [pc, #224]	; (80031a4 <recvfrom+0x3d4>)
 80030c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	4a36      	ldr	r2, [pc, #216]	; (80031a4 <recvfrom+0x3d4>)
 80030ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	b299      	uxth	r1, r3
 80030d2:	7e7b      	ldrb	r3, [r7, #25]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	440a      	add	r2, r1
 80030da:	b291      	uxth	r1, r2
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <recvfrom+0x3d4>)
 80030de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <recvfrom+0x3d8>)
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	4a2d      	ldr	r2, [pc, #180]	; (80031a4 <recvfrom+0x3d4>)
 80030ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030f2:	89ba      	ldrh	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d202      	bcs.n	80030fe <recvfrom+0x32e>
 80030f8:	89bb      	ldrh	r3, [r7, #12]
 80030fa:	83fb      	strh	r3, [r7, #30]
 80030fc:	e004      	b.n	8003108 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <recvfrom+0x3d4>)
 8003102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003106:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003108:	8bfa      	ldrh	r2, [r7, #30]
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff f800 	bl	8002114 <wiz_recv_data>
			break;
 8003114:	e00b      	b.n	800312e <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8003116:	8bfa      	ldrh	r2, [r7, #30]
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff f855 	bl	80021cc <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	491f      	ldr	r1, [pc, #124]	; (80031a4 <recvfrom+0x3d4>)
 8003126:	8bfa      	ldrh	r2, [r7, #30]
 8003128:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800312c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	3301      	adds	r3, #1
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800313a:	2140      	movs	r1, #64	; 0x40
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fde9 	bl	8001d14 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8003142:	bf00      	nop
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	3301      	adds	r3, #1
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe fd93 	bl	8001c7c <WIZCHIP_READ>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f3      	bne.n	8003144 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <recvfrom+0x3d4>)
 8003160:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	8bfa      	ldrh	r2, [r7, #30]
 8003168:	1a8a      	subs	r2, r1, r2
 800316a:	b291      	uxth	r1, r2
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <recvfrom+0x3d4>)
 800316e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	4a0b      	ldr	r2, [pc, #44]	; (80031a4 <recvfrom+0x3d4>)
 8003176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	4a09      	ldr	r2, [pc, #36]	; (80031a8 <recvfrom+0x3d8>)
 8003182:	5cd2      	ldrb	r2, [r2, r3]
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	b2d1      	uxtb	r1, r2
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <recvfrom+0x3d8>)
 800318e:	54d1      	strb	r1, [r2, r3]
 8003190:	e003      	b.n	800319a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <recvfrom+0x3d8>)
 8003196:	2100      	movs	r1, #0
 8003198:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800319a:	8bfb      	ldrh	r3, [r7, #30]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000100 	.word	0x20000100
 80031a8:	20000110 	.word	0x20000110

080031ac <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	70fb      	strb	r3, [r7, #3]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
 8003220:	2300      	movs	r3, #0
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	807b      	strh	r3, [r7, #2]
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	807b      	strh	r3, [r7, #2]
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <reg_wizchip_cs_cbfunc+0x16>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <reg_wizchip_cs_cbfunc+0x40>)
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <reg_wizchip_cs_cbfunc+0x44>)
 800328e:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <reg_wizchip_cs_cbfunc+0x40>)
 8003292:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <reg_wizchip_cs_cbfunc+0x48>)
 8003294:	615a      	str	r2, [r3, #20]
 8003296:	e006      	b.n	80032a6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003298:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <reg_wizchip_cs_cbfunc+0x40>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <reg_wizchip_cs_cbfunc+0x40>)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6153      	str	r3, [r2, #20]
   }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000020 	.word	0x20000020
 80032b8:	080031c9 	.word	0x080031c9
 80032bc:	080031d7 	.word	0x080031d7

080032c0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80032ca:	bf00      	nop
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <reg_wizchip_spi_cbfunc+0x4c>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f9      	beq.n	80032cc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <reg_wizchip_spi_cbfunc+0x24>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d106      	bne.n	80032f2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <reg_wizchip_spi_cbfunc+0x4c>)
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <reg_wizchip_spi_cbfunc+0x50>)
 80032e8:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <reg_wizchip_spi_cbfunc+0x4c>)
 80032ec:	4a09      	ldr	r2, [pc, #36]	; (8003314 <reg_wizchip_spi_cbfunc+0x54>)
 80032ee:	61da      	str	r2, [r3, #28]
 80032f0:	e006      	b.n	8003300 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80032f2:	4a06      	ldr	r2, [pc, #24]	; (800330c <reg_wizchip_spi_cbfunc+0x4c>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <reg_wizchip_spi_cbfunc+0x4c>)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	61d3      	str	r3, [r2, #28]
   }
}
 80032fe:	bf00      	nop
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	20000020 	.word	0x20000020
 8003310:	0800321d 	.word	0x0800321d
 8003314:	0800322d 	.word	0x0800322d

08003318 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003322:	bf00      	nop
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f9      	beq.n	8003324 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <reg_wizchip_spiburst_cbfunc+0x24>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <reg_wizchip_spiburst_cbfunc+0x50>)
 8003340:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003344:	4a09      	ldr	r2, [pc, #36]	; (800336c <reg_wizchip_spiburst_cbfunc+0x54>)
 8003346:	625a      	str	r2, [r3, #36]	; 0x24
 8003348:	e006      	b.n	8003358 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800334a:	4a06      	ldr	r2, [pc, #24]	; (8003364 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003350:	4a04      	ldr	r2, [pc, #16]	; (8003364 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	20000020 	.word	0x20000020
 8003368:	08003243 	.word	0x08003243
 800336c:	0800325b 	.word	0x0800325b

08003370 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
#if    _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	f200 80c2 	bhi.w	8003514 <ctlwizchip+0x1a4>
 8003390:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <ctlwizchip+0x28>)
 8003392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003396:	bf00      	nop
 8003398:	080033d9 	.word	0x080033d9
 800339c:	080033df 	.word	0x080033df
 80033a0:	0800340b 	.word	0x0800340b
 80033a4:	080033ff 	.word	0x080033ff
 80033a8:	08003419 	.word	0x08003419
 80033ac:	08003425 	.word	0x08003425
 80033b0:	08003433 	.word	0x08003433
 80033b4:	08003459 	.word	0x08003459
 80033b8:	0800347f 	.word	0x0800347f
 80033bc:	080034b9 	.word	0x080034b9
 80033c0:	080034bf 	.word	0x080034bf
 80033c4:	080034c7 	.word	0x080034c7
 80033c8:	0800351b 	.word	0x0800351b
 80033cc:	080034cf 	.word	0x080034cf
 80033d0:	080034dd 	.word	0x080034dd
 80033d4:	080034f9 	.word	0x080034f9
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80033d8:	f000 f8a8 	bl	800352c <wizchip_sw_reset>
         break;
 80033dc:	e09e      	b.n	800351c <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3308      	adds	r3, #8
 80033ec:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f8e5 	bl	80035c4 <wizchip_init>
 80033fa:	4603      	mov	r3, r0
 80033fc:	e08f      	b.n	800351e <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f96a 	bl	80036dc <wizchip_clrinterrupt>
         break;
 8003408:	e088      	b.n	800351c <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800340a:	f000 f985 	bl	8003718 <wizchip_getinterrupt>
 800340e:	4603      	mov	r3, r0
 8003410:	461a      	mov	r2, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	801a      	strh	r2, [r3, #0]
         break;
 8003416:	e081      	b.n	800351c <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f9a0 	bl	8003762 <wizchip_setinterruptmask>
         break;         
 8003422:	e07b      	b.n	800351c <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003424:	f000 f9b8 	bl	8003798 <wizchip_getinterruptmask>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	801a      	strh	r2, [r3, #0]
         break;
 8003430:	e074      	b.n	800351c <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	b29b      	uxth	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	4619      	mov	r1, r3
 800343e:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003442:	f7fe fc67 	bl	8001d14 <WIZCHIP_WRITE>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003452:	f7fe fc5f 	bl	8001d14 <WIZCHIP_WRITE>
         break;
 8003456:	e061      	b.n	800351c <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003458:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800345c:	f7fe fc0e 	bl	8001c7c <WIZCHIP_READ>
 8003460:	4603      	mov	r3, r0
 8003462:	b29b      	uxth	r3, r3
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	b29c      	uxth	r4, r3
 8003468:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800346c:	f7fe fc06 	bl	8001c7c <WIZCHIP_READ>
 8003470:	4603      	mov	r3, r0
 8003472:	b29b      	uxth	r3, r3
 8003474:	4423      	add	r3, r4
 8003476:	b29a      	uxth	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	801a      	strh	r2, [r3, #0]
         break;
 800347c:	e04e      	b.n	800351c <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800347e:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <ctlwizchip+0x1b8>)
 8003480:	789a      	ldrb	r2, [r3, #2]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	3301      	adds	r3, #1
 800348a:	4a27      	ldr	r2, [pc, #156]	; (8003528 <ctlwizchip+0x1b8>)
 800348c:	78d2      	ldrb	r2, [r2, #3]
 800348e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	3302      	adds	r3, #2
 8003494:	4a24      	ldr	r2, [pc, #144]	; (8003528 <ctlwizchip+0x1b8>)
 8003496:	7912      	ldrb	r2, [r2, #4]
 8003498:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	3303      	adds	r3, #3
 800349e:	4a22      	ldr	r2, [pc, #136]	; (8003528 <ctlwizchip+0x1b8>)
 80034a0:	7952      	ldrb	r2, [r2, #5]
 80034a2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <ctlwizchip+0x1b8>)
 80034aa:	7992      	ldrb	r2, [r2, #6]
 80034ac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	3305      	adds	r3, #5
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
         break;
 80034b6:	e031      	b.n	800351c <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80034b8:	f000 f9c0 	bl	800383c <wizphy_reset>
         break;
 80034bc:	e02e      	b.n	800351c <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80034be:	6838      	ldr	r0, [r7, #0]
 80034c0:	f000 f9e3 	bl	800388a <wizphy_setphyconf>
         break;
 80034c4:	e02a      	b.n	800351c <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	f000 fa22 	bl	8003910 <wizphy_getphyconf>
         break;
 80034cc:	e026      	b.n	800351c <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fa86 	bl	80039e4 <wizphy_setphypmode>
 80034d8:	4603      	mov	r3, r0
 80034da:	e020      	b.n	800351e <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80034dc:	f000 f995 	bl	800380a <wizphy_getphypmode>
 80034e0:	4603      	mov	r3, r0
 80034e2:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	2bff      	cmp	r3, #255	; 0xff
 80034e8:	d102      	bne.n	80034f0 <ctlwizchip+0x180>
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	e016      	b.n	800351e <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	7dfa      	ldrb	r2, [r7, #23]
 80034f4:	701a      	strb	r2, [r3, #0]
         break;
 80034f6:	e011      	b.n	800351c <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80034f8:	f000 f971 	bl	80037de <wizphy_getphylink>
 80034fc:	4603      	mov	r3, r0
 80034fe:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2bff      	cmp	r3, #255	; 0xff
 8003504:	d102      	bne.n	800350c <ctlwizchip+0x19c>
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	e008      	b.n	800351e <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	7dfa      	ldrb	r2, [r7, #23]
 8003510:	701a      	strb	r2, [r3, #0]
         break;
 8003512:	e003      	b.n	800351c <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	e001      	b.n	800351e <ctlwizchip+0x1ae>
         break;
 800351a:	bf00      	nop
   }
   return 0;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	bd90      	pop	{r4, r7, pc}
 8003526:	bf00      	nop
 8003528:	20000020 	.word	0x20000020

0800352c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	2206      	movs	r2, #6
 8003536:	4619      	mov	r1, r3
 8003538:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800353c:	f7fe fc38 	bl	8001db0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	2204      	movs	r2, #4
 8003546:	4619      	mov	r1, r3
 8003548:	f44f 7080 	mov.w	r0, #256	; 0x100
 800354c:	f7fe fc30 	bl	8001db0 <WIZCHIP_READ_BUF>
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	2204      	movs	r2, #4
 8003556:	4619      	mov	r1, r3
 8003558:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800355c:	f7fe fc28 	bl	8001db0 <WIZCHIP_READ_BUF>
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	2204      	movs	r2, #4
 8003566:	4619      	mov	r1, r3
 8003568:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800356c:	f7fe fc20 	bl	8001db0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	2000      	movs	r0, #0
 8003574:	f7fe fbce 	bl	8001d14 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003578:	2000      	movs	r0, #0
 800357a:	f7fe fb7f 	bl	8001c7c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800357e:	1d3b      	adds	r3, r7, #4
 8003580:	2206      	movs	r2, #6
 8003582:	4619      	mov	r1, r3
 8003584:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003588:	f7fe fc72 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	2204      	movs	r2, #4
 8003592:	4619      	mov	r1, r3
 8003594:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003598:	f7fe fc6a 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800359c:	f107 0310 	add.w	r3, r7, #16
 80035a0:	2204      	movs	r2, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80035a8:	f7fe fc62 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	2204      	movs	r2, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80035b8:	f7fe fc5a 	bl	8001e70 <WIZCHIP_WRITE_BUF>
}
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80035d2:	f7ff ffab 	bl	800352c <wizchip_sw_reset>
   if(txsize)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d03b      	beq.n	8003654 <wizchip_init+0x90>
   {
      tmp = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e015      	b.n	8003612 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 80035e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	4413      	add	r3, r2
 80035ee:	781a      	ldrb	r2, [r3, #0]
 80035f0:	7bbb      	ldrb	r3, [r7, #14]
 80035f2:	4413      	add	r3, r2
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 80035f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	dd02      	ble.n	8003606 <wizchip_init+0x42>
 8003600:	f04f 33ff 	mov.w	r3, #4294967295
 8003604:	e066      	b.n	80036d4 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003616:	2b07      	cmp	r3, #7
 8003618:	dde5      	ble.n	80035e6 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e015      	b.n	800364c <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8003620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	3301      	adds	r3, #1
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800362e:	4618      	mov	r0, r3
 8003630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4413      	add	r3, r2
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	4619      	mov	r1, r3
 800363c:	f7fe fb6a 	bl	8001d14 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3301      	adds	r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003650:	2b07      	cmp	r3, #7
 8003652:	dde5      	ble.n	8003620 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d03b      	beq.n	80036d2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
 8003662:	e015      	b.n	8003690 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8003664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	4413      	add	r3, r2
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	7bbb      	ldrb	r3, [r7, #14]
 8003670:	4413      	add	r3, r2
 8003672:	b2db      	uxtb	r3, r3
 8003674:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8003676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800367a:	2b10      	cmp	r3, #16
 800367c:	dd02      	ble.n	8003684 <wizchip_init+0xc0>
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e027      	b.n	80036d4 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3301      	adds	r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003694:	2b07      	cmp	r3, #7
 8003696:	dde5      	ble.n	8003664 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]
 800369c:	e015      	b.n	80036ca <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 800369e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	3301      	adds	r3, #1
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80036ac:	4618      	mov	r0, r3
 80036ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	f7fe fb2b 	bl	8001d14 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	73fb      	strb	r3, [r7, #15]
 80036ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ce:	2b07      	cmp	r3, #7
 80036d0:	dde5      	ble.n	800369e <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	f023 030f 	bic.w	r3, r3, #15
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	4619      	mov	r1, r3
 80036fc:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003700:	f7fe fb08 	bl	8001d14 <WIZCHIP_WRITE>
   setSIR(sir);
 8003704:	7bbb      	ldrb	r3, [r7, #14]
 8003706:	4619      	mov	r1, r3
 8003708:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800370c:	f7fe fb02 	bl	8001d14 <WIZCHIP_WRITE>
#endif   
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800372a:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800372e:	f7fe faa5 	bl	8001c7c <WIZCHIP_READ>
 8003732:	4603      	mov	r3, r0
 8003734:	f023 030f 	bic.w	r3, r3, #15
 8003738:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800373a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800373e:	f7fe fa9d 	bl	8001c7c <WIZCHIP_READ>
 8003742:	4603      	mov	r3, r0
 8003744:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003746:	79bb      	ldrb	r3, [r7, #6]
 8003748:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800374a:	88bb      	ldrh	r3, [r7, #4]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	b29a      	uxth	r2, r3
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	b29b      	uxth	r3, r3
 8003754:	4413      	add	r3, r2
 8003756:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003758:	88bb      	ldrh	r3, [r7, #4]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	4603      	mov	r3, r0
 800376a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	b29b      	uxth	r3, r3
 8003776:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	4619      	mov	r1, r3
 800377c:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003780:	f7fe fac8 	bl	8001d14 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003784:	7bbb      	ldrb	r3, [r7, #14]
 8003786:	4619      	mov	r1, r3
 8003788:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800378c:	f7fe fac2 	bl	8001d14 <WIZCHIP_WRITE>
#endif   
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80037aa:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80037ae:	f7fe fa65 	bl	8001c7c <WIZCHIP_READ>
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80037b6:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80037ba:	f7fe fa5f 	bl	8001c7c <WIZCHIP_READ>
 80037be:	4603      	mov	r3, r0
 80037c0:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80037c2:	79bb      	ldrb	r3, [r7, #6]
 80037c4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80037c6:	88bb      	ldrh	r3, [r7, #4]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80037d4:	88bb      	ldrh	r3, [r7, #4]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80037e4:	2300      	movs	r3, #0
 80037e6:	71fb      	strb	r3, [r7, #7]
       tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80037e8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80037ec:	f7fe fa46 	bl	8001c7c <WIZCHIP_READ>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80037fa:	2301      	movs	r3, #1
 80037fc:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003814:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003818:	f7fe fa30 	bl	8001c7c <WIZCHIP_READ>
 800381c:	4603      	mov	r3, r0
 800381e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003822:	2b30      	cmp	r3, #48	; 0x30
 8003824:	d102      	bne.n	800382c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003826:	2301      	movs	r3, #1
 8003828:	71fb      	strb	r3, [r7, #7]
 800382a:	e001      	b.n	8003830 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800382c:	2300      	movs	r3, #0
 800382e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003842:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003846:	f7fe fa19 	bl	8001c7c <WIZCHIP_READ>
 800384a:	4603      	mov	r3, r0
 800384c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003854:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	4619      	mov	r1, r3
 800385a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800385e:	f7fe fa59 	bl	8001d14 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003862:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003866:	f7fe fa09 	bl	8001c7c <WIZCHIP_READ>
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003874:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	4619      	mov	r1, r3
 800387a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800387e:	f7fe fa49 	bl	8001d14 <WIZCHIP_WRITE>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d104      	bne.n	80038a8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a4:	73fb      	strb	r3, [r7, #15]
 80038a6:	e003      	b.n	80038b0 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ae:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	785b      	ldrb	r3, [r3, #1]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d104      	bne.n	80038c2 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80038be:	73fb      	strb	r3, [r7, #15]
 80038c0:	e019      	b.n	80038f6 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	78db      	ldrb	r3, [r3, #3]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10d      	bne.n	80038e6 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	789b      	ldrb	r3, [r3, #2]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d104      	bne.n	80038dc <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	f043 0318 	orr.w	r3, r3, #24
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	e00c      	b.n	80038f6 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	f043 0308 	orr.w	r3, r3, #8
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	e007      	b.n	80038f6 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	789b      	ldrb	r3, [r3, #2]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d103      	bne.n	80038f6 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	f043 0310 	orr.w	r3, r3, #16
 80038f4:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	4619      	mov	r1, r3
 80038fa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80038fe:	f7fe fa09 	bl	8001d14 <WIZCHIP_WRITE>
   wizphy_reset();
 8003902:	f7ff ff9b 	bl	800383c <wizphy_reset>
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800391c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003920:	f7fe f9ac 	bl	8001c7c <WIZCHIP_READ>
 8003924:	4603      	mov	r3, r0
 8003926:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	119b      	asrs	r3, r3, #6
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	b2da      	uxtb	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800393e:	2b20      	cmp	r3, #32
 8003940:	d001      	beq.n	8003946 <wizphy_getphyconf+0x36>
 8003942:	2b38      	cmp	r3, #56	; 0x38
 8003944:	d103      	bne.n	800394e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	705a      	strb	r2, [r3, #1]
         break;
 800394c:	e003      	b.n	8003956 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	705a      	strb	r2, [r3, #1]
         break;
 8003954:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800395c:	3b10      	subs	r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	bf8c      	ite	hi
 8003962:	2201      	movhi	r2, #1
 8003964:	2200      	movls	r2, #0
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	2a00      	cmp	r2, #0
 800396a:	d10f      	bne.n	800398c <wizphy_getphyconf+0x7c>
 800396c:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <wizphy_getphyconf+0xcc>)
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf14      	ite	ne
 800397a:	2301      	movne	r3, #1
 800397c:	2300      	moveq	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	709a      	strb	r2, [r3, #2]
         break;
 800398a:	e003      	b.n	8003994 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	709a      	strb	r2, [r3, #2]
         break;
 8003992:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800399a:	3b08      	subs	r3, #8
 800399c:	2b18      	cmp	r3, #24
 800399e:	bf8c      	ite	hi
 80039a0:	2201      	movhi	r2, #1
 80039a2:	2200      	movls	r2, #0
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	2a00      	cmp	r2, #0
 80039a8:	d10f      	bne.n	80039ca <wizphy_getphyconf+0xba>
 80039aa:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <wizphy_getphyconf+0xd0>)
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf14      	ite	ne
 80039b8:	2301      	movne	r3, #1
 80039ba:	2300      	moveq	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	70da      	strb	r2, [r3, #3]
         break;
 80039c8:	e003      	b.n	80039d2 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	70da      	strb	r2, [r3, #3]
         break;
 80039d0:	bf00      	nop
   }
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	00010101 	.word	0x00010101
 80039e0:	01010001 	.word	0x01010001

080039e4 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80039f2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039f6:	f7fe f941 	bl	8001c7c <WIZCHIP_READ>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <wizphy_setphypmode+0x2a>
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0c:	e030      	b.n	8003a70 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003a14:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d104      	bne.n	8003a26 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	e003      	b.n	8003a2e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003a2c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a36:	f7fe f96d 	bl	8001d14 <WIZCHIP_WRITE>
   wizphy_reset();
 8003a3a:	f7ff feff 	bl	800383c <wizphy_reset>
   tmp = getPHYCFGR();
 8003a3e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a42:	f7fe f91b 	bl	8001c7c <WIZCHIP_READ>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d106      	bne.n	8003a5e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <wizphy_setphypmode+0x88>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e008      	b.n	8003a70 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <wizphy_setphypmode+0x88>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e001      	b.n	8003a70 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2206      	movs	r2, #6
 8003a84:	4619      	mov	r1, r3
 8003a86:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003a8a:	f7fe f9f1 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	330e      	adds	r3, #14
 8003a92:	2204      	movs	r2, #4
 8003a94:	4619      	mov	r1, r3
 8003a96:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a9a:	f7fe f9e9 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	330a      	adds	r3, #10
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003aaa:	f7fe f9e1 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3306      	adds	r3, #6
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003aba:	f7fe f9d9 	bl	8001e70 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7c9a      	ldrb	r2, [r3, #18]
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <wizchip_setnetinfo+0x78>)
 8003ac4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7cda      	ldrb	r2, [r3, #19]
 8003aca:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <wizchip_setnetinfo+0x78>)
 8003acc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	7d1a      	ldrb	r2, [r3, #20]
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <wizchip_setnetinfo+0x78>)
 8003ad4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7d5a      	ldrb	r2, [r3, #21]
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <wizchip_setnetinfo+0x78>)
 8003adc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	7d9a      	ldrb	r2, [r3, #22]
 8003ae2:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <wizchip_setnetinfo+0x7c>)
 8003ae4:	701a      	strb	r2, [r3, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000118 	.word	0x20000118
 8003af4:	2000011c 	.word	0x2000011c

08003af8 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "../../Lib/MQTT/MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <getNextPacketId+0x1c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	e000      	b.n	8003b3a <getNextPacketId+0x1e>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8003b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b50:	b087      	sub	sp, #28
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5e:	617b      	str	r3, [r7, #20]
        sent = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8003b64:	e018      	b.n	8003b98 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6a:	689c      	ldr	r4, [r3, #8]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	18d6      	adds	r6, r2, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fdd9 	bl	8004730 <TimerLeftMS>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	4631      	mov	r1, r6
 8003b84:	4628      	mov	r0, r5
 8003b86:	47a0      	blx	r4
 8003b88:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	db0e      	blt.n	8003bae <sendPacket+0x60>
            break;
        sent += rc;
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4413      	add	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	da07      	bge.n	8003bb0 <sendPacket+0x62>
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fd83 	bl	80046ac <TimerIsExpired>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0dc      	beq.n	8003b66 <sendPacket+0x18>
 8003bac:	e000      	b.n	8003bb0 <sendPacket+0x62>
            break;
 8003bae:	bf00      	nop
    }
    if (sent == length)
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d10b      	bne.n	8003bd0 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f000 fd9b 	bl	8004700 <TimerCountdown>
        rc = SUCCESSS;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e002      	b.n	8003bd6 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd4:	617b      	str	r3, [r7, #20]
    return rc;
 8003bd6:	697b      	ldr	r3, [r7, #20]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003be0 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e009      	b.n	8003c0e <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	2200      	movs	r2, #0
 8003c06:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	ddf2      	ble.n	8003bfa <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a3a      	ldr	r2, [r7, #32]
 8003c24:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2a:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c30:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3354      	adds	r3, #84	; 0x54
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fd1e 	bl	8004690 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 8003c54:	bf00      	nop
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b08b      	sub	sp, #44	; 0x2c
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8003c70:	2304      	movs	r3, #4
 8003c72:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	3301      	adds	r3, #1
 8003c84:	623b      	str	r3, [r7, #32]
 8003c86:	6a3a      	ldr	r2, [r7, #32]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	dd03      	ble.n	8003c96 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c92:	61bb      	str	r3, [r7, #24]
            goto exit;
 8003c94:	e021      	b.n	8003cda <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	685c      	ldr	r4, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003ca0:	f107 0117 	add.w	r1, r7, #23
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	47a0      	blx	r4
 8003caa:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d112      	bne.n	8003cd8 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	441a      	add	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	01db      	lsls	r3, r3, #7
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	b25b      	sxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	dbd1      	blt.n	8003c7a <decodePacket+0x1e>
exit:
 8003cd6:	e000      	b.n	8003cda <decodePacket+0x7e>
            goto exit;
 8003cd8:	bf00      	nop
    return len;
 8003cda:	6a3b      	ldr	r3, [r7, #32]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	372c      	adds	r7, #44	; 0x2c
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd90      	pop	{r4, r7, pc}

08003ce4 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8003ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf2:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
    int len = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	685c      	ldr	r4, [r3, #4]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	695e      	ldr	r6, [r3, #20]
 8003d0e:	68b8      	ldr	r0, [r7, #8]
 8003d10:	f000 fd0e 	bl	8004730 <TimerLeftMS>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2201      	movs	r2, #1
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	47a0      	blx	r4
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d13b      	bne.n	8003d9c <readPacket+0xb8>
        goto exit;

    len = 1;
 8003d24:	2301      	movs	r3, #1
 8003d26:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8003d28:	68b8      	ldr	r0, [r7, #8]
 8003d2a:	f000 fd01 	bl	8004730 <TimerLeftMS>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	f107 0310 	add.w	r3, r7, #16
 8003d34:	4619      	mov	r1, r3
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff ff90 	bl	8003c5c <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	3301      	adds	r3, #1
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 f866 	bl	8004e18 <MQTTPacket_encode>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4413      	add	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	dd16      	ble.n	8003d88 <readPacket+0xa4>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5e:	685c      	ldr	r4, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	18d6      	adds	r6, r2, r3
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	68b8      	ldr	r0, [r7, #8]
 8003d72:	f000 fcdd 	bl	8004730 <TimerLeftMS>
 8003d76:	4603      	mov	r3, r0
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4631      	mov	r1, r6
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	47a0      	blx	r4
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d10b      	bne.n	8003da0 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8003d90:	7d3b      	ldrb	r3, [r7, #20]
 8003d92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	e002      	b.n	8003da2 <readPacket+0xbe>
        goto exit;
 8003d9c:	bf00      	nop
 8003d9e:	e000      	b.n	8003da2 <readPacket+0xbe>
        goto exit;
 8003da0:	bf00      	nop
exit:
    return rc;
 8003da2:	69fb      	ldr	r3, [r7, #28]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3724      	adds	r7, #36	; 0x24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dac <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4413      	add	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8003dcc:	e039      	b.n	8003e42 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b2f      	cmp	r3, #47	; 0x2f
 8003dd4:	d103      	bne.n	8003dde <isTopicMatched+0x32>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b2f      	cmp	r3, #47	; 0x2f
 8003ddc:	d13a      	bne.n	8003e54 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b2b      	cmp	r3, #43	; 0x2b
 8003de4:	d009      	beq.n	8003dfa <isTopicMatched+0x4e>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b23      	cmp	r3, #35	; 0x23
 8003dec:	d005      	beq.n	8003dfa <isTopicMatched+0x4e>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d12e      	bne.n	8003e58 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b2b      	cmp	r3, #43	; 0x2b
 8003e00:	d112      	bne.n	8003e28 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	3301      	adds	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8003e08:	e005      	b.n	8003e16 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20b      	bcs.n	8003e36 <isTopicMatched+0x8a>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b2f      	cmp	r3, #47	; 0x2f
 8003e24:	d1f1      	bne.n	8003e0a <isTopicMatched+0x5e>
 8003e26:	e006      	b.n	8003e36 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b23      	cmp	r3, #35	; 0x23
 8003e2e:	d102      	bne.n	8003e36 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	613b      	str	r3, [r7, #16]
        curf++;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
        curn++;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <isTopicMatched+0xae>
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3bd      	bcc.n	8003dce <isTopicMatched+0x22>
 8003e52:	e002      	b.n	8003e5a <isTopicMatched+0xae>
            break;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <isTopicMatched+0xae>
            break;
 8003e58:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d105      	bne.n	8003e6e <isTopicMatched+0xc2>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <isTopicMatched+0xc2>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <isTopicMatched+0xc4>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b08a      	sub	sp, #40	; 0x28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
 8003e94:	e03f      	b.n	8003f16 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d034      	beq.n	8003f10 <deliverMessage+0x92>
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	3304      	adds	r3, #4
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	68b8      	ldr	r0, [r7, #8]
 8003eb6:	f001 f97f 	bl	80051b8 <MQTTPacket_equals>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10c      	bne.n	8003eda <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ff6c 	bl	8003dac <isTopicMatched>
 8003ed4:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01a      	beq.n	8003f10 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	3304      	adds	r3, #4
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d012      	beq.n	8003f10 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8003eea:	f107 0318 	add.w	r3, r7, #24
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fe00 	bl	8003af8 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	3304      	adds	r3, #4
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f107 0218 	add.w	r2, r7, #24
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4798      	blx	r3
                rc = SUCCESSS;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	3301      	adds	r3, #1
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	ddbc      	ble.n	8003e96 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d112      	bne.n	8003f4a <deliverMessage+0xcc>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8003f2c:	f107 0310 	add.w	r3, r7, #16
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fddf 	bl	8003af8 <NewMessageData>
        c->defaultMessageHandler(&md);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	f107 0210 	add.w	r2, r7, #16
 8003f42:	4610      	mov	r0, r2
 8003f44:	4798      	blx	r3
        rc = SUCCESSS;
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3728      	adds	r7, #40	; 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <keepalive>:


int keepalive(MQTTClient* c)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8003f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f60:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
        goto exit;
 8003f6e:	e033      	b.n	8003fd8 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3354      	adds	r3, #84	; 0x54
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fb99 	bl	80046ac <TimerIsExpired>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d02a      	beq.n	8003fd6 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7f1b      	ldrb	r3, [r3, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d126      	bne.n	8003fd6 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8003f88:	f107 0308 	add.w	r3, r7, #8
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fb7f 	bl	8004690 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8003f92:	f107 0308 	add.w	r3, r7, #8
 8003f96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb9c 	bl	80046d8 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f000 fe68 	bl	8004c80 <MQTTSerialize_pingreq>
 8003fb0:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	dd0f      	ble.n	8003fd8 <keepalive+0x84>
 8003fb8:	f107 0308 	add.w	r3, r7, #8
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	6939      	ldr	r1, [r7, #16]
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fdc4 	bl	8003b4e <sendPacket>
 8003fc6:	6178      	str	r0, [r7, #20]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <keepalive+0x84>
                c->ping_outstanding = 1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	771a      	strb	r2, [r3, #28]
 8003fd4:	e000      	b.n	8003fd8 <keepalive+0x84>
        }
    }

exit:
 8003fd6:	bf00      	nop
    return rc;
 8003fd8:	697b      	ldr	r3, [r7, #20]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8003fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe6:	b095      	sub	sp, #84	; 0x54
 8003fe8:	af06      	add	r7, sp, #24
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8003fee:	6839      	ldr	r1, [r7, #0]
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fe77 	bl	8003ce4 <readPacket>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8003ffe:	2300      	movs	r3, #0
 8004000:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8004002:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004004:	3b02      	subs	r3, #2
 8004006:	2b0b      	cmp	r3, #11
 8004008:	f200 80c0 	bhi.w	800418c <cycle+0x1a8>
 800400c:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <cycle+0x30>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	0800418d 	.word	0x0800418d
 8004018:	08004045 	.word	0x08004045
 800401c:	0800418d 	.word	0x0800418d
 8004020:	0800410d 	.word	0x0800410d
 8004024:	0800418d 	.word	0x0800418d
 8004028:	0800418d 	.word	0x0800418d
 800402c:	0800418d 	.word	0x0800418d
 8004030:	0800418d 	.word	0x0800418d
 8004034:	0800418d 	.word	0x0800418d
 8004038:	0800418d 	.word	0x0800418d
 800403c:	0800418d 	.word	0x0800418d
 8004040:	0800417f 	.word	0x0800417f
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800404c:	4616      	mov	r6, r2
 800404e:	f107 0210 	add.w	r2, r7, #16
 8004052:	1d15      	adds	r5, r2, #4
 8004054:	f107 0210 	add.w	r2, r7, #16
 8004058:	1c54      	adds	r4, r2, #1
 800405a:	f107 010c 	add.w	r1, r7, #12
 800405e:	f107 0210 	add.w	r2, r7, #16
 8004062:	1c90      	adds	r0, r2, #2
 8004064:	9604      	str	r6, [sp, #16]
 8004066:	9303      	str	r3, [sp, #12]
 8004068:	f107 0310 	add.w	r3, r7, #16
 800406c:	330c      	adds	r3, #12
 800406e:	9302      	str	r3, [sp, #8]
 8004070:	f107 0310 	add.w	r3, r7, #16
 8004074:	3308      	adds	r3, #8
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	f107 0320 	add.w	r3, r7, #32
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	462b      	mov	r3, r5
 8004080:	4622      	mov	r2, r4
 8004082:	f000 fe0c 	bl	8004c9e <MQTTDeserialize_publish>
 8004086:	4603      	mov	r3, r0
 8004088:	2b01      	cmp	r3, #1
 800408a:	f040 8083 	bne.w	8004194 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8004094:	f107 0210 	add.w	r2, r7, #16
 8004098:	f107 0320 	add.w	r3, r7, #32
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff feed 	bl	8003e7e <deliverMessage>
            if (msg.qos != QOS0)
 80040a4:	7c3b      	ldrb	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d06d      	beq.n	8004186 <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 80040aa:	7c3b      	ldrb	r3, [r7, #16]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d10c      	bne.n	80040ca <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6918      	ldr	r0, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4619      	mov	r1, r3
 80040ba:	8abb      	ldrh	r3, [r7, #20]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2300      	movs	r3, #0
 80040c0:	2204      	movs	r2, #4
 80040c2:	f001 f946 	bl	8005352 <MQTTSerialize_ack>
 80040c6:	6378      	str	r0, [r7, #52]	; 0x34
 80040c8:	e00e      	b.n	80040e8 <cycle+0x104>
                else if (msg.qos == QOS2)
 80040ca:	7c3b      	ldrb	r3, [r7, #16]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d10b      	bne.n	80040e8 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6918      	ldr	r0, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4619      	mov	r1, r3
 80040da:	8abb      	ldrh	r3, [r7, #20]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	2300      	movs	r3, #0
 80040e0:	2205      	movs	r2, #5
 80040e2:	f001 f936 	bl	8005352 <MQTTSerialize_ack>
 80040e6:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	dc03      	bgt.n	80040f6 <cycle+0x112>
                    rc = FAILURE;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
 80040f2:	633b      	str	r3, [r7, #48]	; 0x30
 80040f4:	e005      	b.n	8004102 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fd27 	bl	8003b4e <sendPacket>
 8004100:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d13d      	bne.n	8004186 <cycle+0x1a2>
                    goto exit; // there was a problem
 800410a:	e044      	b.n	8004196 <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695c      	ldr	r4, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f107 020a 	add.w	r2, r7, #10
 8004118:	f107 0109 	add.w	r1, r7, #9
 800411c:	f107 0008 	add.w	r0, r7, #8
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	4623      	mov	r3, r4
 8004124:	f000 fe2d 	bl	8004d82 <MQTTDeserialize_ack>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d003      	beq.n	8004136 <cycle+0x152>
                rc = FAILURE;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
 8004134:	e01e      	b.n	8004174 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6918      	ldr	r0, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4619      	mov	r1, r3
 8004140:	897b      	ldrh	r3, [r7, #10]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	2206      	movs	r2, #6
 8004148:	f001 f903 	bl	8005352 <MQTTSerialize_ack>
 800414c:	6378      	str	r0, [r7, #52]	; 0x34
 800414e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004150:	2b00      	cmp	r3, #0
 8004152:	dc03      	bgt.n	800415c <cycle+0x178>
                rc = FAILURE;
 8004154:	f04f 33ff 	mov.w	r3, #4294967295
 8004158:	633b      	str	r3, [r7, #48]	; 0x30
 800415a:	e00b      	b.n	8004174 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff fcf4 	bl	8003b4e <sendPacket>
 8004166:	6338      	str	r0, [r7, #48]	; 0x30
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <cycle+0x190>
                rc = FAILURE; // there was a problem
 800416e:	f04f 33ff 	mov.w	r3, #4294967295
 8004172:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d106      	bne.n	800418a <cycle+0x1a6>
                goto exit; // there was a problem
 800417c:	e00b      	b.n	8004196 <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
            break;
 8004184:	e002      	b.n	800418c <cycle+0x1a8>
            break;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <cycle+0x1a8>
            break;
 800418a:	bf00      	nop
    }
    keepalive(c);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff fee1 	bl	8003f54 <keepalive>
 8004192:	e000      	b.n	8004196 <cycle+0x1b2>
                goto exit;
 8004194:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <cycle+0x1bc>
        rc = packet_type;
 800419c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800419e:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	373c      	adds	r7, #60	; 0x3c
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041aa:	bf00      	nop

080041ac <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fa66 	bl	8004690 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	f107 030c 	add.w	r3, r7, #12
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fa83 	bl	80046d8 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 80041d2:	f107 030c 	add.w	r3, r7, #12
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ff03 	bl	8003fe4 <cycle>
 80041de:	4603      	mov	r3, r0
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d102      	bne.n	80041ec <MQTTYield+0x40>
    {
        rc = FAILURE;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	617b      	str	r3, [r7, #20]
    }

    return rc;
 80041ec:	697b      	ldr	r3, [r7, #20]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
 8004206:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fa4f 	bl	80046ac <TimerIsExpired>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff fee4 	bl	8003fe4 <cycle>
 800421c:	6178      	str	r0, [r7, #20]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	429a      	cmp	r2, r3
 8004224:	d1f0      	bne.n	8004208 <waitfor+0x12>
 8004226:	e000      	b.n	800422a <waitfor+0x34>
            break; // we timed out
 8004228:	bf00      	nop

    return rc;
 800422a:	697b      	ldr	r3, [r7, #20]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b09e      	sub	sp, #120	; 0x78
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295
 8004242:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8004244:	4a3d      	ldr	r2, [pc, #244]	; (800433c <MQTTConnect+0x108>)
 8004246:	f107 0310 	add.w	r3, r7, #16
 800424a:	4611      	mov	r1, r2
 800424c:	2258      	movs	r2, #88	; 0x58
 800424e:	4618      	mov	r0, r3
 8004250:	f006 fdb4 	bl	800adbc <memcpy>
    int len = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d15d      	bne.n	800431c <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8004260:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fa13 	bl	8004690 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004272:	4611      	mov	r1, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fa2f 	bl	80046d8 <TimerCountdownMS>

    if (options == 0)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8004280:	f107 0310 	add.w	r3, r7, #16
 8004284:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	8b1b      	ldrh	r3, [r3, #24]
 800428a:	461a      	mov	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f000 fa2f 	bl	8004700 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6918      	ldr	r0, [r3, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	4619      	mov	r1, r3
 80042ae:	f000 fb5f 	bl	8004970 <MQTTSerialize_connect>
 80042b2:	6738      	str	r0, [r7, #112]	; 0x70
 80042b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	dd32      	ble.n	8004320 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 80042ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80042be:	461a      	mov	r2, r3
 80042c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fc43 	bl	8003b4e <sendPacket>
 80042c8:	6778      	str	r0, [r7, #116]	; 0x74
 80042ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d129      	bne.n	8004324 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 80042d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80042d4:	461a      	mov	r2, r3
 80042d6:	2102      	movs	r1, #2
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff8c 	bl	80041f6 <waitfor>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d117      	bne.n	8004314 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 80042e4:	23ff      	movs	r3, #255	; 0xff
 80042e6:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f107 010f 	add.w	r1, r7, #15
 80042f8:	f107 000e 	add.w	r0, r7, #14
 80042fc:	f000 fc24 	bl	8004b48 <MQTTDeserialize_connack>
 8004300:	4603      	mov	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d102      	bne.n	800430c <MQTTConnect+0xd8>
            rc = connack_rc;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	677b      	str	r3, [r7, #116]	; 0x74
 800430a:	e00c      	b.n	8004326 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 800430c:	f04f 33ff 	mov.w	r3, #4294967295
 8004310:	677b      	str	r3, [r7, #116]	; 0x74
 8004312:	e008      	b.n	8004326 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 8004314:	f04f 33ff 	mov.w	r3, #4294967295
 8004318:	677b      	str	r3, [r7, #116]	; 0x74
 800431a:	e004      	b.n	8004326 <MQTTConnect+0xf2>
		goto exit;
 800431c:	bf00      	nop
 800431e:	e002      	b.n	8004326 <MQTTConnect+0xf2>
        goto exit;
 8004320:	bf00      	nop
 8004322:	e000      	b.n	8004326 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 8004324:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 8004326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <MQTTConnect+0xfe>
        c->isconnected = 1;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 8004332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8004334:	4618      	mov	r0, r3
 8004336:	3778      	adds	r7, #120	; 0x78
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	0800b47c 	.word	0x0800b47c

08004340 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	b094      	sub	sp, #80	; 0x50
 8004344:	af04      	add	r7, sp, #16
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8004350:	f04f 33ff 	mov.w	r3, #4294967295
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 800435a:	2300      	movs	r3, #0
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	2300      	movs	r3, #0
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8083 	beq.w	800447e <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 8004378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800437c:	4618      	mov	r0, r3
 800437e:	f000 f987 	bl	8004690 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f000 f9a3 	bl	80046d8 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691c      	ldr	r4, [r3, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	461d      	mov	r5, r3
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fbbd 	bl	8003b1c <getNextPacketId>
 80043a2:	4603      	mov	r3, r0
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	f107 031f 	add.w	r3, r7, #31
 80043aa:	9302      	str	r3, [sp, #8]
 80043ac:	f107 0320 	add.w	r3, r7, #32
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	2301      	movs	r3, #1
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	4613      	mov	r3, r2
 80043b8:	2200      	movs	r2, #0
 80043ba:	4629      	mov	r1, r5
 80043bc:	4620      	mov	r0, r4
 80043be:	f001 f844 	bl	800544a <MQTTSerialize_subscribe>
 80043c2:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	dd5b      	ble.n	8004482 <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 80043ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ce:	461a      	mov	r2, r3
 80043d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff fbbb 	bl	8003b4e <sendPacket>
 80043d8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80043da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d152      	bne.n	8004486 <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 80043e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043e4:	461a      	mov	r2, r3
 80043e6:	2109      	movs	r1, #9
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff ff04 	bl	80041f6 <waitfor>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b09      	cmp	r3, #9
 80043f2:	d140      	bne.n	8004476 <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	f04f 33ff 	mov.w	r3, #4294967295
 80043fc:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	68d2      	ldr	r2, [r2, #12]
 8004406:	4614      	mov	r4, r2
 8004408:	f107 0114 	add.w	r1, r7, #20
 800440c:	f107 0218 	add.w	r2, r7, #24
 8004410:	f107 0012 	add.w	r0, r7, #18
 8004414:	9401      	str	r4, [sp, #4]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	460b      	mov	r3, r1
 800441a:	2101      	movs	r1, #1
 800441c:	f001 f88f 	bl	800553e <MQTTDeserialize_suback>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 800442a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d02b      	beq.n	8004488 <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004430:	2300      	movs	r3, #0
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
 8004434:	e01b      	b.n	800446e <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	3304      	adds	r3, #4
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4413      	add	r3, r2
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d110      	bne.n	8004468 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	3304      	adds	r3, #4
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4413      	add	r3, r2
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	3304      	adds	r3, #4
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	609a      	str	r2, [r3, #8]
                    rc = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8004466:	e00f      	b.n	8004488 <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	3301      	adds	r3, #1
 800446c:	63bb      	str	r3, [r7, #56]	; 0x38
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	2b04      	cmp	r3, #4
 8004472:	dde0      	ble.n	8004436 <MQTTSubscribe+0xf6>
 8004474:	e008      	b.n	8004488 <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 8004476:	f04f 33ff 	mov.w	r3, #4294967295
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447c:	e004      	b.n	8004488 <MQTTSubscribe+0x148>
		goto exit;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <MQTTSubscribe+0x148>
        goto exit;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 8004486:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8004488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800448a:	4618      	mov	r0, r3
 800448c:	3740      	adds	r7, #64	; 0x40
 800448e:	46bd      	mov	sp, r7
 8004490:	bdb0      	pop	{r4, r5, r7, pc}

08004492 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8004492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004494:	b097      	sub	sp, #92	; 0x5c
 8004496:	af08      	add	r7, sp, #32
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61fb      	str	r3, [r7, #28]
 80044a8:	2300      	movs	r3, #0
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	2300      	movs	r3, #0
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	61fb      	str	r3, [r7, #28]
    int len = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 809b 	beq.w	80045f8 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 80044c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f8e2 	bl	8004690 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044d4:	4611      	mov	r1, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f8fe 	bl	80046d8 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d003      	beq.n	80044ec <MQTTPublish+0x5a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d106      	bne.n	80044fa <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f7ff fb15 	bl	8003b1c <getNextPacketId>
 80044f2:	4603      	mov	r3, r0
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	469c      	mov	ip, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	469e      	mov	lr, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	785d      	ldrb	r5, [r3, #1]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800451c:	9206      	str	r2, [sp, #24]
 800451e:	9305      	str	r3, [sp, #20]
 8004520:	ac02      	add	r4, sp, #8
 8004522:	f107 031c 	add.w	r3, r7, #28
 8004526:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800452a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800452e:	9601      	str	r6, [sp, #4]
 8004530:	9500      	str	r5, [sp, #0]
 8004532:	4673      	mov	r3, lr
 8004534:	2200      	movs	r2, #0
 8004536:	4661      	mov	r1, ip
 8004538:	6838      	ldr	r0, [r7, #0]
 800453a:	f000 fe94 	bl	8005266 <MQTTSerialize_publish>
 800453e:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	2b00      	cmp	r3, #0
 8004544:	dd5a      	ble.n	80045fc <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8004546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800454a:	461a      	mov	r2, r3
 800454c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7ff fafd 	bl	8003b4e <sendPacket>
 8004554:	6378      	str	r0, [r7, #52]	; 0x34
 8004556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004558:	2b00      	cmp	r3, #0
 800455a:	d151      	bne.n	8004600 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d122      	bne.n	80045aa <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8004564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004568:	461a      	mov	r2, r3
 800456a:	2104      	movs	r1, #4
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7ff fe42 	bl	80041f6 <waitfor>
 8004572:	4603      	mov	r3, r0
 8004574:	2b04      	cmp	r3, #4
 8004576:	d114      	bne.n	80045a2 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	695c      	ldr	r4, [r3, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f107 021a 	add.w	r2, r7, #26
 8004584:	f107 0119 	add.w	r1, r7, #25
 8004588:	f107 0018 	add.w	r0, r7, #24
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	4623      	mov	r3, r4
 8004590:	f000 fbf7 	bl	8004d82 <MQTTDeserialize_ack>
 8004594:	4603      	mov	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d035      	beq.n	8004606 <MQTTPublish+0x174>
                rc = FAILURE;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	637b      	str	r3, [r7, #52]	; 0x34
 80045a0:	e031      	b.n	8004606 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
 80045a8:	e02d      	b.n	8004606 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d128      	bne.n	8004604 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 80045b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045b6:	461a      	mov	r2, r3
 80045b8:	2107      	movs	r1, #7
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f7ff fe1b 	bl	80041f6 <waitfor>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b07      	cmp	r3, #7
 80045c4:	d114      	bne.n	80045f0 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	695c      	ldr	r4, [r3, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f107 0216 	add.w	r2, r7, #22
 80045d2:	f107 0115 	add.w	r1, r7, #21
 80045d6:	f107 0014 	add.w	r0, r7, #20
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4623      	mov	r3, r4
 80045de:	f000 fbd0 	bl	8004d82 <MQTTDeserialize_ack>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d00e      	beq.n	8004606 <MQTTPublish+0x174>
                rc = FAILURE;
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ec:	637b      	str	r3, [r7, #52]	; 0x34
 80045ee:	e00a      	b.n	8004606 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
 80045f4:	637b      	str	r3, [r7, #52]	; 0x34
 80045f6:	e006      	b.n	8004606 <MQTTPublish+0x174>
		goto exit;
 80045f8:	bf00      	nop
 80045fa:	e004      	b.n	8004606 <MQTTPublish+0x174>
        goto exit;
 80045fc:	bf00      	nop
 80045fe:	e002      	b.n	8004606 <MQTTPublish+0x174>
        goto exit; // there was a problem
 8004600:	bf00      	nop
 8004602:	e000      	b.n	8004606 <MQTTPublish+0x174>
    }

exit:
 8004604:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004608:	4618      	mov	r0, r3
 800460a:	373c      	adds	r7, #60	; 0x3c
 800460c:	46bd      	mov	sp, r7
 800460e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004610 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f832 	bl	8004690 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	f107 0308 	add.w	r3, r7, #8
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f84e 	bl	80046d8 <TimerCountdownMS>

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f000 fb0b 	bl	8004c62 <MQTTSerialize_disconnect>
 800464c:	6138      	str	r0, [r7, #16]
    if (len > 0)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	dd07      	ble.n	8004664 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 8004654:	f107 0308 	add.w	r3, r7, #8
 8004658:	461a      	mov	r2, r3
 800465a:	6939      	ldr	r1, [r7, #16]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff fa76 	bl	8003b4e <sendPacket>
 8004662:	6178      	str	r0, [r7, #20]

    c->isconnected = 0;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800466a:	697b      	ldr	r3, [r7, #20]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
	MilliTimer++;
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <MilliTimer_Handler+0x18>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	4a03      	ldr	r2, [pc, #12]	; (800468c <MilliTimer_Handler+0x18>)
 8004680:	6013      	str	r3, [r2, #0]
}
 8004682:	bf00      	nop
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	20000120 	.word	0x20000120

08004690 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	605a      	str	r2, [r3, #4]
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <TimerIsExpired+0x28>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	0fdb      	lsrs	r3, r3, #31
 80046c4:	b2db      	uxtb	r3, r3
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000120 	.word	0x20000120

080046d8 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <TimerCountdownMS+0x24>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	441a      	add	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	605a      	str	r2, [r3, #4]
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000120 	.word	0x20000120

08004700 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004710:	fb03 f202 	mul.w	r2, r3, r2
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <TimerCountdown+0x2c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	441a      	add	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	605a      	str	r2, [r3, #4]
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000120 	.word	0x20000120

08004730 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <TimerLeftMS+0x28>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000120 	.word	0x20000120

0800475c <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a07      	ldr	r2, [pc, #28]	; (800478c <NewNetwork+0x30>)
 8004770:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a06      	ldr	r2, [pc, #24]	; (8004790 <NewNetwork+0x34>)
 8004776:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a06      	ldr	r2, [pc, #24]	; (8004794 <NewNetwork+0x38>)
 800477c:	60da      	str	r2, [r3, #12]
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	08004799 	.word	0x08004799
 8004790:	080047f3 	.word	0x080047f3
 8004794:	0800483b 	.word	0x0800483b

08004798 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	3301      	adds	r3, #1
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fd fa61 	bl	8001c7c <WIZCHIP_READ>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b17      	cmp	r3, #23
 80047be:	d113      	bne.n	80047e8 <w5x00_read+0x50>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fd fbfd 	bl	8001fc6 <getSn_RX_RSR>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	b292      	uxth	r2, r2
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe f90a 	bl	80029f8 <recv>
 80047e4:	4603      	mov	r3, r0
 80047e6:	e000      	b.n	80047ea <w5x00_read+0x52>

	return SOCK_ERROR;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	3301      	adds	r3, #1
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd fa34 	bl	8001c7c <WIZCHIP_READ>
 8004814:	4603      	mov	r3, r0
 8004816:	2b17      	cmp	r3, #23
 8004818:	d10a      	bne.n	8004830 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	b292      	uxth	r2, r2
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd ffec 	bl	8002804 <send>
 800482c:	4603      	mov	r3, r0
 800482e:	e000      	b.n	8004832 <w5x00_write+0x40>

	return SOCK_ERROR;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	4618      	mov	r0, r3
 800484a:	f7fd ff65 	bl	8002718 <disconnect>
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b086      	sub	sp, #24
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	4613      	mov	r3, r2
 8004862:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8004864:	f243 0339 	movw	r3, #12345	; 0x3039
 8004868:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	b2d8      	uxtb	r0, r3
 8004870:	8afa      	ldrh	r2, [r7, #22]
 8004872:	2300      	movs	r3, #0
 8004874:	2101      	movs	r1, #1
 8004876:	f7fd fcf1 	bl	800225c <socket>
 800487a:	4603      	mov	r3, r0
 800487c:	461a      	mov	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d001      	beq.n	800488a <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8004886:	2300      	movs	r3, #0
 8004888:	e00d      	b.n	80048a6 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f7fd fe63 	bl	8002560 <connect>
 800489a:	4603      	mov	r3, r0
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <ConnectNetwork+0x50>

	return SOCK_OK;
 80048a4:	2301      	movs	r3, #1
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80048ae:	b590      	push	{r4, r7, lr}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
	int len = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	7a1b      	ldrb	r3, [r3, #8]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d102      	bne.n	80048c8 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80048c2:	230c      	movs	r3, #12
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e005      	b.n	80048d4 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	7a1b      	ldrb	r3, [r3, #8]
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d101      	bne.n	80048d4 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80048d0:	230a      	movs	r3, #10
 80048d2:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	330c      	adds	r3, #12
 80048d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048dc:	f000 fc53 	bl	8005186 <MQTTstrlen>
 80048e0:	4603      	mov	r3, r0
 80048e2:	3302      	adds	r3, #2
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7edb      	ldrb	r3, [r3, #27]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d013      	beq.n	800491a <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3324      	adds	r3, #36	; 0x24
 80048f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048fa:	f000 fc44 	bl	8005186 <MQTTstrlen>
 80048fe:	4603      	mov	r3, r0
 8004900:	1c9c      	adds	r4, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3330      	adds	r3, #48	; 0x30
 8004906:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800490a:	f000 fc3c 	bl	8005186 <MQTTstrlen>
 800490e:	4603      	mov	r3, r0
 8004910:	4423      	add	r3, r4
 8004912:	3302      	adds	r3, #2
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <MQTTSerialize_connectLength+0x7c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3340      	adds	r3, #64	; 0x40
 800492e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004932:	f000 fc28 	bl	8005186 <MQTTstrlen>
 8004936:	4603      	mov	r3, r0
 8004938:	3302      	adds	r3, #2
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d103      	bne.n	8004950 <MQTTSerialize_connectLength+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	334c      	adds	r3, #76	; 0x4c
 8004954:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004958:	f000 fc15 	bl	8005186 <MQTTstrlen>
 800495c:	4603      	mov	r3, r0
 800495e:	3302      	adds	r3, #2
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	bd90      	pop	{r4, r7, pc}

08004970 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	; 0x28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
	int len = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800498c:	f04f 33ff 	mov.w	r3, #4294967295
 8004990:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff ff8b 	bl	80048ae <MQTTSerialize_connectLength>
 8004998:	6238      	str	r0, [r7, #32]
 800499a:	6a38      	ldr	r0, [r7, #32]
 800499c:	f000 faa8 	bl	8004ef0 <MQTTPacket_len>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4293      	cmp	r3, r2
 80049a6:	da03      	bge.n	80049b0 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80049a8:	f06f 0301 	mvn.w	r3, #1
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80049ae:	e0c2      	b.n	8004b36 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80049b4:	7e3b      	ldrb	r3, [r7, #24]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f362 1307 	bfi	r3, r2, #4, #4
 80049bc:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80049be:	7e3a      	ldrb	r2, [r7, #24]
 80049c0:	f107 031c 	add.w	r3, r7, #28
 80049c4:	4611      	mov	r1, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fb21 	bl	800500e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	6a39      	ldr	r1, [r7, #32]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fa21 	bl	8004e18 <MQTTPacket_encode>
 80049d6:	4602      	mov	r2, r0
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	7a1b      	ldrb	r3, [r3, #8]
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d10c      	bne.n	8004a00 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80049e6:	f107 031c 	add.w	r3, r7, #28
 80049ea:	4955      	ldr	r1, [pc, #340]	; (8004b40 <MQTTSerialize_connect+0x1d0>)
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fb4c 	bl	800508a <writeCString>
		writeChar(&ptr, (char) 4);
 80049f2:	f107 031c 	add.w	r3, r7, #28
 80049f6:	2104      	movs	r1, #4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fb08 	bl	800500e <writeChar>
 80049fe:	e00b      	b.n	8004a18 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8004a00:	f107 031c 	add.w	r3, r7, #28
 8004a04:	494f      	ldr	r1, [pc, #316]	; (8004b44 <MQTTSerialize_connect+0x1d4>)
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fb3f 	bl	800508a <writeCString>
		writeChar(&ptr, (char) 3);
 8004a0c:	f107 031c 	add.w	r3, r7, #28
 8004a10:	2103      	movs	r1, #3
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fafb 	bl	800500e <writeChar>
	}

	flags.all = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	7e9b      	ldrb	r3, [r3, #26]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	7d3b      	ldrb	r3, [r7, #20]
 8004a28:	f362 0341 	bfi	r3, r2, #1, #1
 8004a2c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7edb      	ldrb	r3, [r3, #27]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	7d3b      	ldrb	r3, [r7, #20]
 8004a3e:	f362 0382 	bfi	r3, r2, #2, #1
 8004a42:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8004a44:	7d3b      	ldrb	r3, [r7, #20]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d013      	beq.n	8004a78 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	7d3b      	ldrb	r3, [r7, #20]
 8004a5e:	f362 03c4 	bfi	r3, r2, #3, #2
 8004a62:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	7d3b      	ldrb	r3, [r7, #20]
 8004a72:	f362 1345 	bfi	r3, r2, #5, #1
 8004a76:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <MQTTSerialize_connect+0x118>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8004a88:	7d3b      	ldrb	r3, [r7, #20]
 8004a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d103      	bne.n	8004aa0 <MQTTSerialize_connect+0x130>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8004aa0:	7d3b      	ldrb	r3, [r7, #20]
 8004aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa6:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8004aa8:	7d3a      	ldrb	r2, [r7, #20]
 8004aaa:	f107 031c 	add.w	r3, r7, #28
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 faac 	bl	800500e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8b1b      	ldrh	r3, [r3, #24]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f107 031c 	add.w	r3, r7, #28
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fab8 	bl	8005038 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f107 001c 	add.w	r0, r7, #28
 8004ace:	330c      	adds	r3, #12
 8004ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ad2:	f000 faf9 	bl	80050c8 <writeMQTTString>
	if (options->willFlag)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7edb      	ldrb	r3, [r3, #27]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00d      	beq.n	8004afa <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f107 001c 	add.w	r0, r7, #28
 8004ae4:	3324      	adds	r3, #36	; 0x24
 8004ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ae8:	f000 faee 	bl	80050c8 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f107 001c 	add.w	r0, r7, #28
 8004af2:	3330      	adds	r3, #48	; 0x30
 8004af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af6:	f000 fae7 	bl	80050c8 <writeMQTTString>
	}
	if (flags.bits.username)
 8004afa:	7d3b      	ldrb	r3, [r7, #20]
 8004afc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f107 001c 	add.w	r0, r7, #28
 8004b0c:	3340      	adds	r3, #64	; 0x40
 8004b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b10:	f000 fada 	bl	80050c8 <writeMQTTString>
	if (flags.bits.password)
 8004b14:	7d3b      	ldrb	r3, [r7, #20]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d006      	beq.n	8004b2e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f107 001c 	add.w	r0, r7, #28
 8004b26:	334c      	adds	r3, #76	; 0x4c
 8004b28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b2a:	f000 facd 	bl	80050c8 <writeMQTTString>

	rc = ptr - buf;
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3728      	adds	r7, #40	; 0x28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	0800b4d4 	.word	0x0800b4d4
 8004b44:	0800b4dc 	.word	0x0800b4dc

08004b48 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004b6a:	f107 0318 	add.w	r3, r7, #24
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fa39 	bl	8004fe6 <readChar>
 8004b74:	4603      	mov	r3, r0
 8004b76:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8004b78:	7f3b      	ldrb	r3, [r7, #28]
 8004b7a:	f023 030f 	bic.w	r3, r3, #15
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d12e      	bne.n	8004be2 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f107 0214 	add.w	r2, r7, #20
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 f9f9 	bl	8004f84 <MQTTPacket_decodeBuf>
 8004b92:	6278      	str	r0, [r7, #36]	; 0x24
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	6a3a      	ldr	r2, [r7, #32]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	dd1b      	ble.n	8004be6 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8004bae:	f107 0318 	add.w	r3, r7, #24
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fa17 	bl	8004fe6 <readChar>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8004bbc:	7c3b      	ldrb	r3, [r7, #16]
 8004bbe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8004bca:	f107 0318 	add.w	r3, r7, #24
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fa09 	bl	8004fe6 <readChar>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
 8004be0:	e002      	b.n	8004be8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8004be2:	bf00      	nop
 8004be4:	e000      	b.n	8004be8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8004be6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3728      	adds	r7, #40	; 0x28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b088      	sub	sp, #32
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295
 8004c08:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	dc03      	bgt.n	8004c1c <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004c14:	f06f 0301 	mvn.w	r3, #1
 8004c18:	61fb      	str	r3, [r7, #28]
		goto exit;
 8004c1a:	e01d      	b.n	8004c58 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	7e3b      	ldrb	r3, [r7, #24]
 8004c2a:	f362 1307 	bfi	r3, r2, #4, #4
 8004c2e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8004c30:	7e3a      	ldrb	r2, [r7, #24]
 8004c32:	f107 0314 	add.w	r3, r7, #20
 8004c36:	4611      	mov	r1, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f9e8 	bl	800500e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2100      	movs	r1, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f8e8 	bl	8004e18 <MQTTPacket_encode>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004c58:	69fb      	ldr	r3, [r7, #28]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 8004c6c:	220e      	movs	r2, #14
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ffbe 	bl	8004bf2 <MQTTSerialize_zero>
 8004c76:	4603      	mov	r3, r0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8004c8a:	220c      	movs	r2, #12
 8004c8c:	6839      	ldr	r1, [r7, #0]
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff ffaf 	bl	8004bf2 <MQTTSerialize_zero>
 8004c94:	4603      	mov	r3, r0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b08a      	sub	sp, #40	; 0x28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004cc0:	f107 0318 	add.w	r3, r7, #24
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f98e 	bl	8004fe6 <readChar>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8004cce:	7f3b      	ldrb	r3, [r7, #28]
 8004cd0:	f023 030f 	bic.w	r3, r3, #15
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b30      	cmp	r3, #48	; 0x30
 8004cd8:	d14b      	bne.n	8004d72 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8004cda:	7f3b      	ldrb	r3, [r7, #28]
 8004cdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8004ce8:	7f3b      	ldrb	r3, [r7, #28]
 8004cea:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8004cf6:	7f3b      	ldrb	r3, [r7, #28]
 8004cf8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	f107 0214 	add.w	r2, r7, #20
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f939 	bl	8004f84 <MQTTPacket_decodeBuf>
 8004d12:	6278      	str	r0, [r7, #36]	; 0x24
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	4413      	add	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4413      	add	r3, r2
 8004d22:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8004d24:	f107 0318 	add.w	r3, r7, #24
 8004d28:	6a3a      	ldr	r2, [r7, #32]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2e:	f000 f9f9 	bl	8005124 <readMQTTLenString>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01e      	beq.n	8004d76 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	6a3a      	ldr	r2, [r7, #32]
 8004d3c:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	db19      	blt.n	8004d76 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	dd08      	ble.n	8004d5c <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8004d4a:	f107 0318 	add.w	r3, r7, #24
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f92e 	bl	8004fb0 <readInt>
 8004d54:	4603      	mov	r3, r0
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	1ad2      	subs	r2, r2, r3
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	601a      	str	r2, [r3, #0]
	rc = 1;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d70:	e002      	b.n	8004d78 <MQTTDeserialize_publish+0xda>
		goto exit;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <MQTTDeserialize_publish+0xda>
		goto exit;
 8004d76:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3728      	adds	r7, #40	; 0x28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b08a      	sub	sp, #40	; 0x28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8004d90:	2300      	movs	r3, #0
 8004d92:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004da0:	f107 0318 	add.w	r3, r7, #24
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 f91e 	bl	8004fe6 <readChar>
 8004daa:	4603      	mov	r3, r0
 8004dac:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8004dae:	7f3b      	ldrb	r3, [r7, #28]
 8004db0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8004dbc:	7f3b      	ldrb	r3, [r7, #28]
 8004dbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f107 0214 	add.w	r2, r7, #20
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f8d6 	bl	8004f84 <MQTTPacket_decodeBuf>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	4413      	add	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4413      	add	r3, r2
 8004de8:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	6a3a      	ldr	r2, [r7, #32]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	dd0b      	ble.n	8004e0c <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8004df4:	f107 0318 	add.w	r3, r7, #24
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f8d9 	bl	8004fb0 <readInt>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8004e06:	2301      	movs	r3, #1
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0a:	e000      	b.n	8004e0e <MQTTDeserialize_ack+0x8c>
		goto exit;
 8004e0c:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3728      	adds	r7, #40	; 0x28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	425a      	negs	r2, r3
 8004e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e32:	bf58      	it	pl
 8004e34:	4253      	negpl	r3, r2
 8004e36:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da00      	bge.n	8004e40 <MQTTPacket_encode+0x28>
 8004e3e:	337f      	adds	r3, #127	; 0x7f
 8004e40:	11db      	asrs	r3, r3, #7
 8004e42:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	dd03      	ble.n	8004e52 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8004e4a:	7afb      	ldrb	r3, [r7, #11]
 8004e4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e50:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	60fa      	str	r2, [r7, #12]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	7afa      	ldrb	r2, [r7, #11]
 8004e60:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dcde      	bgt.n	8004e26 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8004e68:	68fb      	ldr	r3, [r7, #12]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b086      	sub	sp, #24
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8004e80:	2301      	movs	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
	int len = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8004e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e92:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	3301      	adds	r3, #1
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	dd03      	ble.n	8004ea8 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8004ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea4:	60fb      	str	r3, [r7, #12]
			goto exit;
 8004ea6:	e01d      	b.n	8004ee4 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8004ea8:	f107 020b 	add.w	r2, r7, #11
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4798      	blx	r3
 8004eb4:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d112      	bne.n	8004ee2 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	7afb      	ldrb	r3, [r7, #11]
 8004ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec6:	6979      	ldr	r1, [r7, #20]
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	441a      	add	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	01db      	lsls	r3, r3, #7
 8004ed6:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	dbd6      	blt.n	8004e8e <MQTTPacket_decode+0x18>
exit:
 8004ee0:	e000      	b.n	8004ee4 <MQTTPacket_decode+0x6e>
			goto exit;
 8004ee2:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8004ee4:	693b      	ldr	r3, [r7, #16]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3301      	adds	r3, #1
 8004efc:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b7f      	cmp	r3, #127	; 0x7f
 8004f02:	dc03      	bgt.n	8004f0c <MQTTPacket_len+0x1c>
		rem_len += 1;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3301      	adds	r3, #1
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	e012      	b.n	8004f32 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f12:	da03      	bge.n	8004f1c <MQTTPacket_len+0x2c>
		rem_len += 2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3302      	adds	r3, #2
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	e00a      	b.n	8004f32 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <MQTTPacket_len+0x50>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	dc03      	bgt.n	8004f2c <MQTTPacket_len+0x3c>
		rem_len += 3;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3303      	adds	r3, #3
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	e002      	b.n	8004f32 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	607b      	str	r3, [r7, #4]
	return rem_len;
 8004f32:	687b      	ldr	r3, [r7, #4]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	001ffffe 	.word	0x001ffffe

08004f44 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e00a      	b.n	8004f6a <bufchar+0x26>
		*c = *bufptr++;
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <bufchar+0x3c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	4909      	ldr	r1, [pc, #36]	; (8004f80 <bufchar+0x3c>)
 8004f5c:	600a      	str	r2, [r1, #0]
 8004f5e:	781a      	ldrb	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	dbf0      	blt.n	8004f54 <bufchar+0x10>
	return count;
 8004f72:	683b      	ldr	r3, [r7, #0]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	20000124 	.word	0x20000124

08004f84 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8004f8e:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <MQTTPacket_decodeBuf+0x24>)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	4805      	ldr	r0, [pc, #20]	; (8004fac <MQTTPacket_decodeBuf+0x28>)
 8004f98:	f7ff ff6d 	bl	8004e76 <MQTTPacket_decode>
 8004f9c:	4603      	mov	r3, r0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000124 	.word	0x20000124
 8004fac:	08004f45 	.word	0x08004f45

08004fb0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	3201      	adds	r2, #1
 8004fc8:	7812      	ldrb	r2, [r2, #0]
 8004fca:	4413      	add	r3, r2
 8004fcc:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	1c9a      	adds	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	601a      	str	r2, [r3, #0]
	return len;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	601a      	str	r2, [r3, #0]
	return c;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	601a      	str	r2, [r3, #0]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	da00      	bge.n	800504a <writeInt+0x12>
 8005048:	33ff      	adds	r3, #255	; 0xff
 800504a:	121b      	asrs	r3, r3, #8
 800504c:	461a      	mov	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	425a      	negs	r2, r3
 8005064:	b2db      	uxtb	r3, r3
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	bf58      	it	pl
 800506a:	4253      	negpl	r3, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	601a      	str	r2, [r3, #0]
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8005094:	6838      	ldr	r0, [r7, #0]
 8005096:	f7fb f8eb 	bl	8000270 <strlen>
 800509a:	4603      	mov	r3, r0
 800509c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ffc9 	bl	8005038 <writeInt>
	memcpy(*pptr, string, len);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f005 fe84 	bl	800adbc <memcpy>
	*pptr += len;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	441a      	add	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	4638      	mov	r0, r7
 80050d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	dd12      	ble.n	8005102 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4619      	mov	r1, r3
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff ffa9 	bl	8005038 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f005 fe64 	bl	800adbc <memcpy>
		*pptr += mqttstring.lenstring.len;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	441a      	add	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8005100:	e00c      	b.n	800511c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff ffbc 	bl	800508a <writeCString>
}
 8005112:	e003      	b.n	800511c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8005114:	2100      	movs	r1, #0
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff ff8e 	bl	8005038 <writeInt>
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	dd1a      	ble.n	8005176 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8005140:	68b8      	ldr	r0, [r7, #8]
 8005142:	f7ff ff35 	bl	8004fb0 <readInt>
 8005146:	4602      	mov	r2, r0
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	6852      	ldr	r2, [r2, #4]
 8005154:	4413      	add	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d30c      	bcc.n	8005176 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	6852      	ldr	r2, [r2, #4]
 800516c:	441a      	add	r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	601a      	str	r2, [r3, #0]
			rc = 1;
 8005172:	2301      	movs	r3, #1
 8005174:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800517c:	697b      	ldr	r3, [r7, #20]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	1d3b      	adds	r3, r7, #4
 800518e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d006      	beq.n	80051aa <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fb f866 	bl	8000270 <strlen>
 80051a4:	4603      	mov	r3, r0
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e001      	b.n	80051ae <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	617b      	str	r3, [r7, #20]
	return rc;
 80051ae:	697b      	ldr	r3, [r7, #20]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	int alen = 0,
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
		blen = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fb f847 	bl	8000270 <strlen>
 80051e2:	4603      	mov	r3, r0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e005      	b.n	80051f4 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 80051f4:	6838      	ldr	r0, [r7, #0]
 80051f6:	f7fb f83b 	bl	8000270 <strlen>
 80051fa:	4603      	mov	r3, r0
 80051fc:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	429a      	cmp	r2, r3
 8005204:	d10a      	bne.n	800521c <MQTTPacket_equals+0x64>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	461a      	mov	r2, r3
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6938      	ldr	r0, [r7, #16]
 800520e:	f005 fd43 	bl	800ac98 <strncmp>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <MQTTPacket_equals+0x64>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <MQTTPacket_equals+0x66>
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	4638      	mov	r0, r7
 8005230:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8005238:	463b      	mov	r3, r7
 800523a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800523e:	f7ff ffa2 	bl	8005186 <MQTTstrlen>
 8005242:	4603      	mov	r3, r0
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	4413      	add	r3, r2
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4413      	add	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	dd02      	ble.n	800525c <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	3302      	adds	r3, #2
 800525a:	617b      	str	r3, [r7, #20]
	return len;
 800525c:	697b      	ldr	r3, [r7, #20]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b08a      	sub	sp, #40	; 0x28
 800526a:	af02      	add	r7, sp, #8
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8005286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800528e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005290:	6838      	ldr	r0, [r7, #0]
 8005292:	f7ff ffc8 	bl	8005226 <MQTTSerialize_publishLength>
 8005296:	61b8      	str	r0, [r7, #24]
 8005298:	69b8      	ldr	r0, [r7, #24]
 800529a:	f7ff fe29 	bl	8004ef0 <MQTTPacket_len>
 800529e:	4602      	mov	r2, r0
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4293      	cmp	r3, r2
 80052a4:	da03      	bge.n	80052ae <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80052a6:	f06f 0301 	mvn.w	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
		goto exit;
 80052ac:	e04c      	b.n	8005348 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 80052ae:	7c3b      	ldrb	r3, [r7, #16]
 80052b0:	2203      	movs	r2, #3
 80052b2:	f362 1307 	bfi	r3, r2, #4, #4
 80052b6:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	7c3b      	ldrb	r3, [r7, #16]
 80052c2:	f362 03c3 	bfi	r3, r2, #3, #1
 80052c6:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	7c3b      	ldrb	r3, [r7, #16]
 80052d2:	f362 0342 	bfi	r3, r2, #1, #2
 80052d6:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 80052d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	7c3b      	ldrb	r3, [r7, #16]
 80052e4:	f362 0300 	bfi	r3, r2, #0, #1
 80052e8:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 80052ea:	7c3a      	ldrb	r2, [r7, #16]
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fe8b 	bl	800500e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	69b9      	ldr	r1, [r7, #24]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fd8b 	bl	8004e18 <MQTTPacket_encode>
 8005302:	4602      	mov	r2, r0
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800530a:	f107 0014 	add.w	r0, r7, #20
 800530e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005314:	f7ff fed8 	bl	80050c8 <writeMQTTString>

	if (qos > 0)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	dd06      	ble.n	800532c <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800531e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005320:	f107 0314 	add.w	r3, r7, #20
 8005324:	4611      	mov	r1, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fe86 	bl	8005038 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005332:	4618      	mov	r0, r3
 8005334:	f005 fd42 	bl	800adbc <memcpy>
	ptr += payloadlen;
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533c:	4413      	add	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005348:	69fb      	ldr	r3, [r7, #28]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b088      	sub	sp, #32
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	4611      	mov	r1, r2
 800535e:	461a      	mov	r2, r3
 8005360:	460b      	mov	r3, r1
 8005362:	71fb      	strb	r3, [r7, #7]
 8005364:	4613      	mov	r3, r2
 8005366:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8005368:	2300      	movs	r3, #0
 800536a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b03      	cmp	r3, #3
 8005378:	dc03      	bgt.n	8005382 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800537a:	f06f 0301 	mvn.w	r3, #1
 800537e:	61fb      	str	r3, [r7, #28]
		goto exit;
 8005380:	e037      	b.n	80053f2 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	b2da      	uxtb	r2, r3
 800538a:	7e3b      	ldrb	r3, [r7, #24]
 800538c:	f362 1307 	bfi	r3, r2, #4, #4
 8005390:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8005392:	79bb      	ldrb	r3, [r7, #6]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	b2da      	uxtb	r2, r3
 800539a:	7e3b      	ldrb	r3, [r7, #24]
 800539c:	f362 03c3 	bfi	r3, r2, #3, #1
 80053a0:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	2b06      	cmp	r3, #6
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	7e3b      	ldrb	r3, [r7, #24]
 80053b6:	f362 0342 	bfi	r3, r2, #1, #2
 80053ba:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80053bc:	7e3a      	ldrb	r2, [r7, #24]
 80053be:	f107 0314 	add.w	r3, r7, #20
 80053c2:	4611      	mov	r1, r2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fe22 	bl	800500e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2102      	movs	r1, #2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fd22 	bl	8004e18 <MQTTPacket_encode>
 80053d4:	4602      	mov	r2, r0
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4413      	add	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 80053dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053de:	f107 0314 	add.w	r3, r7, #20
 80053e2:	4611      	mov	r1, r2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fe27 	bl	8005038 <writeInt>
	rc = ptr - buf;
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80053f2:	69fb      	ldr	r3, [r7, #28]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8005406:	2302      	movs	r3, #2
 8005408:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	e013      	b.n	8005438 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4613      	mov	r3, r2
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	461a      	mov	r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	4413      	add	r3, r2
 8005420:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005424:	f7ff feaf 	bl	8005186 <MQTTstrlen>
 8005428:	4603      	mov	r3, r0
 800542a:	3303      	adds	r3, #3
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	4413      	add	r3, r2
 8005430:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3301      	adds	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	429a      	cmp	r2, r3
 800543e:	dbe7      	blt.n	8005410 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8005440:	68bb      	ldr	r3, [r7, #8]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b08a      	sub	sp, #40	; 0x28
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	4611      	mov	r1, r2
 8005456:	461a      	mov	r2, r3
 8005458:	460b      	mov	r3, r1
 800545a:	71fb      	strb	r3, [r7, #7]
 800545c:	4613      	mov	r3, r2
 800545e:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8005474:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005478:	f7ff ffc0 	bl	80053fc <MQTTSerialize_subscribeLength>
 800547c:	61f8      	str	r0, [r7, #28]
 800547e:	69f8      	ldr	r0, [r7, #28]
 8005480:	f7ff fd36 	bl	8004ef0 <MQTTPacket_len>
 8005484:	4602      	mov	r2, r0
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4293      	cmp	r3, r2
 800548a:	da03      	bge.n	8005494 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800548c:	f06f 0301 	mvn.w	r3, #1
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8005492:	e04f      	b.n	8005534 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8005498:	7d3b      	ldrb	r3, [r7, #20]
 800549a:	2208      	movs	r2, #8
 800549c:	f362 1307 	bfi	r3, r2, #4, #4
 80054a0:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	7d3b      	ldrb	r3, [r7, #20]
 80054ac:	f362 03c3 	bfi	r3, r2, #3, #1
 80054b0:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 80054b2:	7d3b      	ldrb	r3, [r7, #20]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f362 0342 	bfi	r3, r2, #1, #2
 80054ba:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80054bc:	7d3a      	ldrb	r2, [r7, #20]
 80054be:	f107 0318 	add.w	r3, r7, #24
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff fda2 	bl	800500e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	69f9      	ldr	r1, [r7, #28]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fca2 	bl	8004e18 <MQTTPacket_encode>
 80054d4:	4602      	mov	r2, r0
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	4413      	add	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 80054dc:	88ba      	ldrh	r2, [r7, #4]
 80054de:	f107 0318 	add.w	r3, r7, #24
 80054e2:	4611      	mov	r1, r2
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff fda7 	bl	8005038 <writeInt>

	for (i = 0; i < count; ++i)
 80054ea:	2300      	movs	r3, #0
 80054ec:	623b      	str	r3, [r7, #32]
 80054ee:	e019      	b.n	8005524 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 80054f0:	6a3a      	ldr	r2, [r7, #32]
 80054f2:	4613      	mov	r3, r2
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	461a      	mov	r2, r3
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	4413      	add	r3, r2
 8005500:	f107 0018 	add.w	r0, r7, #24
 8005504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005506:	f7ff fddf 	bl	80050c8 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800550e:	4413      	add	r3, r2
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	f107 0318 	add.w	r3, r7, #24
 8005516:	4611      	mov	r1, r2
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff fd78 	bl	800500e <writeChar>
	for (i = 0; i < count; ++i)
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	3301      	adds	r3, #1
 8005522:	623b      	str	r3, [r7, #32]
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	429a      	cmp	r2, r3
 800552a:	dbe1      	blt.n	80054f0 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005536:	4618      	mov	r0, r3
 8005538:	3728      	adds	r7, #40	; 0x28
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b08a      	sub	sp, #40	; 0x28
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8005554:	2300      	movs	r3, #0
 8005556:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800555c:	f107 0318 	add.w	r3, r7, #24
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fd40 	bl	8004fe6 <readChar>
 8005566:	4603      	mov	r3, r0
 8005568:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800556a:	7f3b      	ldrb	r3, [r7, #28]
 800556c:	f023 030f 	bic.w	r3, r3, #15
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b90      	cmp	r3, #144	; 0x90
 8005574:	d142      	bne.n	80055fc <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	f107 0214 	add.w	r2, r7, #20
 800557c:	4611      	mov	r1, r2
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fd00 	bl	8004f84 <MQTTPacket_decodeBuf>
 8005584:	6278      	str	r0, [r7, #36]	; 0x24
 8005586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	4413      	add	r3, r2
 800558c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4413      	add	r3, r2
 8005594:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	dd2f      	ble.n	8005600 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 80055a0:	f107 0318 	add.w	r3, r7, #24
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff fd03 	bl	8004fb0 <readInt>
 80055aa:	4603      	mov	r3, r0
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	801a      	strh	r2, [r3, #0]

	*count = 0;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80055b8:	e019      	b.n	80055ee <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	da03      	bge.n	80055cc <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 80055c4:	f04f 33ff 	mov.w	r3, #4294967295
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 80055ca:	e01a      	b.n	8005602 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 80055cc:	f107 0318 	add.w	r3, r7, #24
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff fd08 	bl	8004fe6 <readChar>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4618      	mov	r0, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	1c59      	adds	r1, r3, #1
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6011      	str	r1, [r2, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	4413      	add	r3, r2
 80055ea:	4602      	mov	r2, r0
 80055ec:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	6a3a      	ldr	r2, [r7, #32]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d8e1      	bhi.n	80055ba <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 80055f6:	2301      	movs	r3, #1
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
 80055fa:	e002      	b.n	8005602 <MQTTDeserialize_suback+0xc4>
		goto exit;
 80055fc:	bf00      	nop
 80055fe:	e000      	b.n	8005602 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8005600:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005604:	4618      	mov	r0, r3
 8005606:	3728      	adds	r7, #40	; 0x28
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <_ZN15EthernetManagerD1Ev>:
// Static buffer definitions
uint8_t EthernetManager::dhcp_buffer[2048];
uint8_t EthernetManager::dns_buffer[2048];


EthernetManager::~EthernetManager() {
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]

}
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <_ZN15EthernetManagerC1Ev>:

EthernetManager::EthernetManager() {
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]

}
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <_ZN15EthernetManager12isIpAssignedEv>:

bool EthernetManager::ip_assigned = false;

bool EthernetManager::isIpAssigned() {
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	return ip_assigned;
 8005640:	4b03      	ldr	r3, [pc, #12]	; (8005650 <_ZN15EthernetManager12isIpAssignedEv+0x18>)
 8005642:	781b      	ldrb	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	20001128 	.word	0x20001128

08005654 <_ZN15EthernetManager12setIPAssigedEb>:

void EthernetManager::setIPAssiged(bool val){
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
	ip_assigned = val;
 8005660:	4a04      	ldr	r2, [pc, #16]	; (8005674 <_ZN15EthernetManager12setIPAssigedEb+0x20>)
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	7013      	strb	r3, [r2, #0]
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20001128 	.word	0x20001128

08005678 <_ZN15EthernetManager10initializeEPK6Config>:

void EthernetManager::initialize(const Config *conf) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
	Print("Initializing Internet \r\n");
 8005682:	480f      	ldr	r0, [pc, #60]	; (80056c0 <_ZN15EthernetManager10initializeEPK6Config+0x48>)
 8005684:	f002 f96c 	bl	8007960 <_Z5PrintPKcz>
    resetAssert();
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f81b 	bl	80056c4 <_ZN15EthernetManager11resetAssertEv>
    HAL_Delay(100); // Delay for the reset
 800568e:	2064      	movs	r0, #100	; 0x64
 8005690:	f002 fa32 	bl	8007af8 <HAL_Delay>
    resetDeassert();
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f829 	bl	80056ec <_ZN15EthernetManager13resetDeassertEv>
    HAL_Delay(300);
 800569a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800569e:	f002 fa2b 	bl	8007af8 <HAL_Delay>
    initWIZCHIP();
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8aa 	bl	80057fc <_ZN15EthernetManager11initWIZCHIPEv>
    if (conf != nullptr) {
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <_ZN15EthernetManager10initializeEPK6Config+0x3e>
        configureNetwork(conf);
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f8ff 	bl	80058b4 <_ZN15EthernetManager16configureNetworkEPK6Config>
    }
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	0800b4e4 	.word	0x0800b4e4

080056c4 <_ZN15EthernetManager11resetAssertEv>:
    // Consider re-applying network configuration if needed
}



void EthernetManager::resetAssert() {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	Print("Resetting!!! \r\n");
 80056cc:	4805      	ldr	r0, [pc, #20]	; (80056e4 <_ZN15EthernetManager11resetAssertEv+0x20>)
 80056ce:	f002 f947 	bl	8007960 <_Z5PrintPKcz>
    HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_RESET);
 80056d2:	2200      	movs	r2, #0
 80056d4:	2120      	movs	r1, #32
 80056d6:	4804      	ldr	r0, [pc, #16]	; (80056e8 <_ZN15EthernetManager11resetAssertEv+0x24>)
 80056d8:	f003 fa10 	bl	8008afc <HAL_GPIO_WritePin>
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	0800b500 	.word	0x0800b500
 80056e8:	40020800 	.word	0x40020800

080056ec <_ZN15EthernetManager13resetDeassertEv>:

void EthernetManager::resetDeassert() {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	Print("Desserting!!! \r\n");
 80056f4:	4805      	ldr	r0, [pc, #20]	; (800570c <_ZN15EthernetManager13resetDeassertEv+0x20>)
 80056f6:	f002 f933 	bl	8007960 <_Z5PrintPKcz>
    HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_SET);
 80056fa:	2201      	movs	r2, #1
 80056fc:	2120      	movs	r1, #32
 80056fe:	4804      	ldr	r0, [pc, #16]	; (8005710 <_ZN15EthernetManager13resetDeassertEv+0x24>)
 8005700:	f003 f9fc 	bl	8008afc <HAL_GPIO_WritePin>
}
 8005704:	bf00      	nop
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	0800b510 	.word	0x0800b510
 8005710:	40020800 	.word	0x40020800

08005714 <_ZN15EthernetManager12W5500_SelectEv>:


void EthernetManager::W5500_Select() {
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8005718:	2200      	movs	r2, #0
 800571a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800571e:	4802      	ldr	r0, [pc, #8]	; (8005728 <_ZN15EthernetManager12W5500_SelectEv+0x14>)
 8005720:	f003 f9ec 	bl	8008afc <HAL_GPIO_WritePin>
}
 8005724:	bf00      	nop
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40020400 	.word	0x40020400

0800572c <_ZN15EthernetManager14W5500_UnselectEv>:


void EthernetManager::W5500_Unselect() {
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8005730:	2201      	movs	r2, #1
 8005732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005736:	4802      	ldr	r0, [pc, #8]	; (8005740 <_ZN15EthernetManager14W5500_UnselectEv+0x14>)
 8005738:	f003 f9e0 	bl	8008afc <HAL_GPIO_WritePin>
}
 800573c:	bf00      	nop
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40020400 	.word	0x40020400

08005744 <_ZN15EthernetManager14W5500_ReadBuffEPht>:

void EthernetManager::unselectW5500() {
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
}

void EthernetManager::W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8005750:	887a      	ldrh	r2, [r7, #2]
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4803      	ldr	r0, [pc, #12]	; (8005768 <_ZN15EthernetManager14W5500_ReadBuffEPht+0x24>)
 800575a:	f004 f825 	bl	80097a8 <HAL_SPI_Receive>
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	200011bc 	.word	0x200011bc

0800576c <_ZN15EthernetManager15W5500_WriteBuffEPht>:

void EthernetManager::W5500_WriteBuff( uint8_t* buff, uint16_t len) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 8005778:	887a      	ldrh	r2, [r7, #2]
 800577a:	f04f 33ff 	mov.w	r3, #4294967295
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4803      	ldr	r0, [pc, #12]	; (8005790 <_ZN15EthernetManager15W5500_WriteBuffEPht+0x24>)
 8005782:	f003 fece 	bl	8009522 <HAL_SPI_Transmit>
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200011bc 	.word	0x200011bc

08005794 <_ZN15EthernetManager14W5500_ReadByteEv>:

uint8_t EthernetManager::W5500_ReadByte() {
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, 1);
 800579a:	1dfb      	adds	r3, r7, #7
 800579c:	2101      	movs	r1, #1
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff ffd0 	bl	8005744 <_ZN15EthernetManager14W5500_ReadBuffEPht>
    return byte;
 80057a4:	79fb      	ldrb	r3, [r7, #7]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <_ZN15EthernetManager15W5500_WriteByteEh>:

void EthernetManager::W5500_WriteByte(uint8_t byte) {
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	4603      	mov	r3, r0
 80057b6:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, 1);
 80057b8:	1dfb      	adds	r3, r7, #7
 80057ba:	2101      	movs	r1, #1
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff ffd5 	bl	800576c <_ZN15EthernetManager15W5500_WriteBuffEPht>
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <_ZN15EthernetManager19Callback_IPAssignedEv>:

void EthernetManager::Callback_IPAssigned() {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
	Print("Connected to the internet!!\r\n");
 80057d0:	4803      	ldr	r0, [pc, #12]	; (80057e0 <_ZN15EthernetManager19Callback_IPAssignedEv+0x14>)
 80057d2:	f002 f8c5 	bl	8007960 <_Z5PrintPKcz>
	ip_assigned = true;
 80057d6:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <_ZN15EthernetManager19Callback_IPAssignedEv+0x18>)
 80057d8:	2201      	movs	r2, #1
 80057da:	701a      	strb	r2, [r3, #0]
}
 80057dc:	bf00      	nop
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	0800b524 	.word	0x0800b524
 80057e4:	20001128 	.word	0x20001128

080057e8 <_ZN15EthernetManager19Callback_IPConflictEv>:

void EthernetManager::Callback_IPConflict() {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  Print("Callback: IP conflict!\r\n");
 80057ec:	4802      	ldr	r0, [pc, #8]	; (80057f8 <_ZN15EthernetManager19Callback_IPConflictEv+0x10>)
 80057ee:	f002 f8b7 	bl	8007960 <_Z5PrintPKcz>
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	0800b544 	.word	0x0800b544

080057fc <_ZN15EthernetManager11initWIZCHIPEv>:


void EthernetManager::initWIZCHIP() {
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
    Print("\r\nWIZCHIP Initialization called!\r\n");
 8005804:	4821      	ldr	r0, [pc, #132]	; (800588c <_ZN15EthernetManager11initWIZCHIPEv+0x90>)
 8005806:	f002 f8ab 	bl	8007960 <_Z5PrintPKcz>
    W5500_Unselect();
 800580a:	f7ff ff8f 	bl	800572c <_ZN15EthernetManager14W5500_UnselectEv>
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800580e:	4920      	ldr	r1, [pc, #128]	; (8005890 <_ZN15EthernetManager11initWIZCHIPEv+0x94>)
 8005810:	4820      	ldr	r0, [pc, #128]	; (8005894 <_ZN15EthernetManager11initWIZCHIPEv+0x98>)
 8005812:	f7fd fd2f 	bl	8003274 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8005816:	4920      	ldr	r1, [pc, #128]	; (8005898 <_ZN15EthernetManager11initWIZCHIPEv+0x9c>)
 8005818:	4820      	ldr	r0, [pc, #128]	; (800589c <_ZN15EthernetManager11initWIZCHIPEv+0xa0>)
 800581a:	f7fd fd51 	bl	80032c0 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800581e:	4920      	ldr	r1, [pc, #128]	; (80058a0 <_ZN15EthernetManager11initWIZCHIPEv+0xa4>)
 8005820:	4820      	ldr	r0, [pc, #128]	; (80058a4 <_ZN15EthernetManager11initWIZCHIPEv+0xa8>)
 8005822:	f7fd fd79 	bl	8003318 <reg_wizchip_spiburst_cbfunc>

    uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8005826:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <_ZN15EthernetManager11initWIZCHIPEv+0xac>)
 8005828:	f107 0410 	add.w	r4, r7, #16
 800582c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800582e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (ctlwizchip(CW_INIT_WIZCHIP, (void*)memsize) == -1) {
 8005832:	f107 0310 	add.w	r3, r7, #16
 8005836:	4619      	mov	r1, r3
 8005838:	2001      	movs	r0, #1
 800583a:	f7fd fd99 	bl	8003370 <ctlwizchip>
 800583e:	4603      	mov	r3, r0
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	bf0c      	ite	eq
 8005846:	2301      	moveq	r3, #1
 8005848:	2300      	movne	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <_ZN15EthernetManager11initWIZCHIPEv+0x5c>
        Print("WIZCHIP Initialization failed.\r\n");
 8005850:	4816      	ldr	r0, [pc, #88]	; (80058ac <_ZN15EthernetManager11initWIZCHIPEv+0xb0>)
 8005852:	f002 f885 	bl	8007960 <_Z5PrintPKcz>
        return;
 8005856:	e015      	b.n	8005884 <_ZN15EthernetManager11initWIZCHIPEv+0x88>
    }

    // Check PHY link status
    uint8_t tmp;
    do {
        if (ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1) {
 8005858:	f107 030f 	add.w	r3, r7, #15
 800585c:	4619      	mov	r1, r3
 800585e:	200f      	movs	r0, #15
 8005860:	f7fd fd86 	bl	8003370 <ctlwizchip>
 8005864:	4603      	mov	r3, r0
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	bf0c      	ite	eq
 800586c:	2301      	moveq	r3, #1
 800586e:	2300      	movne	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <_ZN15EthernetManager11initWIZCHIPEv+0x82>
           Print("UNKNOWN PHY LINK STATUS.\r\n");
 8005876:	480e      	ldr	r0, [pc, #56]	; (80058b0 <_ZN15EthernetManager11initWIZCHIPEv+0xb4>)
 8005878:	f002 f872 	bl	8007960 <_Z5PrintPKcz>
            return;
 800587c:	e002      	b.n	8005884 <_ZN15EthernetManager11initWIZCHIPEv+0x88>
        }
    } while (tmp == PHY_LINK_OFF);
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0e9      	beq.n	8005858 <_ZN15EthernetManager11initWIZCHIPEv+0x5c>
 //   UART_Printf("WIZCHIP Initialized successfully.\r\n");
}
 8005884:	3724      	adds	r7, #36	; 0x24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd90      	pop	{r4, r7, pc}
 800588a:	bf00      	nop
 800588c:	0800b560 	.word	0x0800b560
 8005890:	0800572d 	.word	0x0800572d
 8005894:	08005715 	.word	0x08005715
 8005898:	080057af 	.word	0x080057af
 800589c:	08005795 	.word	0x08005795
 80058a0:	0800576d 	.word	0x0800576d
 80058a4:	08005745 	.word	0x08005745
 80058a8:	0800b5c4 	.word	0x0800b5c4
 80058ac:	0800b584 	.word	0x0800b584
 80058b0:	0800b5a8 	.word	0x0800b5a8

080058b4 <_ZN15EthernetManager16configureNetworkEPK6Config>:


void EthernetManager::configureNetwork(const Config* conf) {
 80058b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b8:	b0a2      	sub	sp, #136	; 0x88
 80058ba:	af0e      	add	r7, sp, #56	; 0x38
 80058bc:	61f8      	str	r0, [r7, #28]
 80058be:	61b9      	str	r1, [r7, #24]


	Print("Initializing Netwok Configuration!!! \r\n");
 80058c0:	489b      	ldr	r0, [pc, #620]	; (8005b30 <_ZN15EthernetManager16configureNetworkEPK6Config+0x27c>)
 80058c2:	f002 f84d 	bl	8007960 <_Z5PrintPKcz>

    if (conf == nullptr) {
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 812c 	beq.w	8005b26 <_ZN15EthernetManager16configureNetworkEPK6Config+0x272>

           return;
       }

       uint8_t mac[6];
       getSHAR(mac); // Assuming you have a function getSHAR to get MAC address
 80058ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058d2:	2206      	movs	r2, #6
 80058d4:	4619      	mov	r1, r3
 80058d6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80058da:	f7fc fa69 	bl	8001db0 <WIZCHIP_READ_BUF>
       HAL_Delay(300);
 80058de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80058e2:	f002 f909 	bl	8007af8 <HAL_Delay>

       wiz_NetInfo net_info = {
 80058e6:	f107 0320 	add.w	r3, r7, #32
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	605a      	str	r2, [r3, #4]
 80058f0:	609a      	str	r2, [r3, #8]
 80058f2:	60da      	str	r2, [r3, #12]
 80058f4:	611a      	str	r2, [r3, #16]
 80058f6:	f8c3 2013 	str.w	r2, [r3, #19]
 80058fa:	2302      	movs	r3, #2
 80058fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8005900:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
           {0,}, // IP address (will be set by DHCP or static config)
           {0,}, // Gateway (will be set by DHCP or static config)
           {0,}, // Subnet Mask (will be set by DHCP or static config)
           {0,}, // DNS server (will be set by DHCP or static config)
           NETINFO_DHCP // Default to DHCP
       };
 8005904:	f887 3020 	strb.w	r3, [r7, #32]
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8005908:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
       };
 800590c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8005910:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
       };
 8005914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8005918:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
       };
 800591c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8005920:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
       };
 8005924:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8005928:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
       };
 800592c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

       setSHAR(net_info.mac); // Apply MAC address
 8005930:	f107 0320 	add.w	r3, r7, #32
 8005934:	2206      	movs	r2, #6
 8005936:	4619      	mov	r1, r3
 8005938:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800593c:	f7fc fa98 	bl	8001e70 <WIZCHIP_WRITE_BUF>
       Print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8005940:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
       Print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8005944:	4618      	mov	r0, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8005946:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
       Print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800594a:	461c      	mov	r4, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 800594c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
       Print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8005950:	461d      	mov	r5, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8005952:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005956:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800595a:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
       Print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800595e:	9102      	str	r1, [sp, #8]
 8005960:	9201      	str	r2, [sp, #4]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	462b      	mov	r3, r5
 8005966:	4622      	mov	r2, r4
 8005968:	4601      	mov	r1, r0
 800596a:	4872      	ldr	r0, [pc, #456]	; (8005b34 <_ZN15EthernetManager16configureNetworkEPK6Config+0x280>)
 800596c:	f001 fff8 	bl	8007960 <_Z5PrintPKcz>

       if (conf->getDHCPEnabled()) {
 8005970:	69b8      	ldr	r0, [r7, #24]
 8005972:	f000 fdcb 	bl	800650c <_ZNK6Config14getDHCPEnabledEv>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d044      	beq.n	8005a06 <_ZN15EthernetManager16configureNetworkEPK6Config+0x152>
           // DHCP mode
           DHCP_init(DHCP_SOCKET, dhcp_buffer);
 800597c:	496e      	ldr	r1, [pc, #440]	; (8005b38 <_ZN15EthernetManager16configureNetworkEPK6Config+0x284>)
 800597e:	2001      	movs	r0, #1
 8005980:	f7fc f836 	bl	80019f0 <DHCP_init>
           reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8005984:	4a6d      	ldr	r2, [pc, #436]	; (8005b3c <_ZN15EthernetManager16configureNetworkEPK6Config+0x288>)
 8005986:	496e      	ldr	r1, [pc, #440]	; (8005b40 <_ZN15EthernetManager16configureNetworkEPK6Config+0x28c>)
 8005988:	486d      	ldr	r0, [pc, #436]	; (8005b40 <_ZN15EthernetManager16configureNetworkEPK6Config+0x28c>)
 800598a:	f7fa fe3d 	bl	8000608 <reg_dhcp_cbfunc>



   	    do {
   	        Print("Attempting DHCP lease...\r\n");
 800598e:	486d      	ldr	r0, [pc, #436]	; (8005b44 <_ZN15EthernetManager16configureNetworkEPK6Config+0x290>)
 8005990:	f001 ffe6 	bl	8007960 <_Z5PrintPKcz>
   	         setIPAssiged(false);
 8005994:	2100      	movs	r1, #0
 8005996:	69f8      	ldr	r0, [r7, #28]
 8005998:	f7ff fe5c 	bl	8005654 <_ZN15EthernetManager12setIPAssigedEb>
   	        while (!isIpAssigned()) {
 800599c:	e005      	b.n	80059aa <_ZN15EthernetManager16configureNetworkEPK6Config+0xf6>
   	            DHCP_run();
 800599e:	f7fb fe6f 	bl	8001680 <DHCP_run>
   	            HAL_Delay(300); // Delay between DHCP runs
 80059a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80059a6:	f002 f8a7 	bl	8007af8 <HAL_Delay>
   	        while (!isIpAssigned()) {
 80059aa:	69f8      	ldr	r0, [r7, #28]
 80059ac:	f7ff fe44 	bl	8005638 <_ZN15EthernetManager12isIpAssignedEv>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f083 0301 	eor.w	r3, r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f0      	bne.n	800599e <_ZN15EthernetManager16configureNetworkEPK6Config+0xea>
   	        }
   	    } while (!isIpAssigned()); // Retry mechanism if not successful
 80059bc:	69f8      	ldr	r0, [r7, #28]
 80059be:	f7ff fe3b 	bl	8005638 <_ZN15EthernetManager12isIpAssignedEv>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f083 0301 	eor.w	r3, r3, #1
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1df      	bne.n	800598e <_ZN15EthernetManager16configureNetworkEPK6Config+0xda>

           Print("ip has been obtained!!! \r\n");
 80059ce:	485e      	ldr	r0, [pc, #376]	; (8005b48 <_ZN15EthernetManager16configureNetworkEPK6Config+0x294>)
 80059d0:	f001 ffc6 	bl	8007960 <_Z5PrintPKcz>
           // Get network configuration from DHCP
           getIPfromDHCP(net_info.ip);
 80059d4:	f107 0320 	add.w	r3, r7, #32
 80059d8:	3306      	adds	r3, #6
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fc f898 	bl	8001b10 <getIPfromDHCP>
           getGWfromDHCP(net_info.gw);
 80059e0:	f107 0320 	add.w	r3, r7, #32
 80059e4:	330e      	adds	r3, #14
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fc f8b2 	bl	8001b50 <getGWfromDHCP>
           getSNfromDHCP(net_info.sn);
 80059ec:	f107 0320 	add.w	r3, r7, #32
 80059f0:	330a      	adds	r3, #10
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fc f8cc 	bl	8001b90 <getSNfromDHCP>
           getDNSfromDHCP(net_info.dns);
 80059f8:	f107 0320 	add.w	r3, r7, #32
 80059fc:	3312      	adds	r3, #18
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fc f8e6 	bl	8001bd0 <getDNSfromDHCP>
 8005a04:	e03d      	b.n	8005a82 <_ZN15EthernetManager16configureNetworkEPK6Config+0x1ce>
       } else {
    	   Print("Mode is in Static!!! \r\n");
 8005a06:	4851      	ldr	r0, [pc, #324]	; (8005b4c <_ZN15EthernetManager16configureNetworkEPK6Config+0x298>)
 8005a08:	f001 ffaa 	bl	8007960 <_Z5PrintPKcz>
           // Static IP mode
    	   std::memcpy(net_info.ip, conf->getIP().data(), 4); // For std::array
 8005a0c:	69b8      	ldr	r0, [r7, #24]
 8005a0e:	f000 fcfd 	bl	800640c <_ZNK6Config5getIPEv>
 8005a12:	4603      	mov	r3, r0
 8005a14:	643b      	str	r3, [r7, #64]	; 0x40
 8005a16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f89c 	bl	8005b58 <_ZNSt5arrayIhLj4EE4dataEv>
 8005a20:	4603      	mov	r3, r0
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
    	   std::memcpy(net_info.gw, conf->getGateway().data(), 4); // For std::array
 8005a28:	69b8      	ldr	r0, [r7, #24]
 8005a2a:	f000 fd0c 	bl	8006446 <_ZNK6Config10getGatewayEv>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	647b      	str	r3, [r7, #68]	; 0x44
 8005a32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f88e 	bl	8005b58 <_ZNSt5arrayIhLj4EE4dataEv>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
    	   std::memcpy(net_info.sn, conf->getSubnet().data(), 4); // For std::array
 8005a44:	69b8      	ldr	r0, [r7, #24]
 8005a46:	f000 fd1b 	bl	8006480 <_ZNK6Config9getSubnetEv>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f880 	bl	8005b58 <_ZNSt5arrayIhLj4EE4dataEv>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8c7 302a 	str.w	r3, [r7, #42]	; 0x2a
    	   std::memcpy(net_info.dns, conf->getDNS().data(), 4); // For std::array
 8005a60:	69b8      	ldr	r0, [r7, #24]
 8005a62:	f000 fd2a 	bl	80064ba <_ZNK6Config6getDNSEv>
 8005a66:	4603      	mov	r3, r0
 8005a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 f872 	bl	8005b58 <_ZNSt5arrayIhLj4EE4dataEv>
 8005a74:	4603      	mov	r3, r0
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
           net_info.dhcp = NETINFO_STATIC;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
       }

       // Apply network settings to WIZnet chip
       wizchip_setnetinfo(&net_info);
 8005a82:	f107 0320 	add.w	r3, r7, #32
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fd fff6 	bl	8003a78 <wizchip_setnetinfo>

       // Print network information
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8005a8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005a90:	469c      	mov	ip, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8005a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005a96:	469e      	mov	lr, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8005a98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005a9c:	4698      	mov	r8, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8005a9e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005aa2:	4618      	mov	r0, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8005aa4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005aa8:	461c      	mov	r4, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8005aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005aae:	461d      	mov	r5, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8005ab0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005ab4:	461e      	mov	r6, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8005ab6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005aba:	617b      	str	r3, [r7, #20]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8005abc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005ac0:	613b      	str	r3, [r7, #16]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8005ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005ac6:	60fb      	str	r3, [r7, #12]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8005ac8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005acc:	60bb      	str	r3, [r7, #8]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8005ace:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005ad2:	607b      	str	r3, [r7, #4]
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8005ad4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005ad8:	603b      	str	r3, [r7, #0]
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8005ada:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005ade:	4619      	mov	r1, r3
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8005ae0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005ae4:	461a      	mov	r2, r3
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8005ae6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
       Print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8005aea:	930c      	str	r3, [sp, #48]	; 0x30
 8005aec:	920b      	str	r2, [sp, #44]	; 0x2c
 8005aee:	910a      	str	r1, [sp, #40]	; 0x28
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	9209      	str	r2, [sp, #36]	; 0x24
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	9208      	str	r2, [sp, #32]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	9207      	str	r2, [sp, #28]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	9206      	str	r2, [sp, #24]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	9205      	str	r2, [sp, #20]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	9304      	str	r3, [sp, #16]
 8005b08:	9603      	str	r6, [sp, #12]
 8005b0a:	9502      	str	r5, [sp, #8]
 8005b0c:	9401      	str	r4, [sp, #4]
 8005b0e:	9000      	str	r0, [sp, #0]
 8005b10:	4643      	mov	r3, r8
 8005b12:	4672      	mov	r2, lr
 8005b14:	4661      	mov	r1, ip
 8005b16:	480e      	ldr	r0, [pc, #56]	; (8005b50 <_ZN15EthernetManager16configureNetworkEPK6Config+0x29c>)
 8005b18:	f001 ff22 	bl	8007960 <_Z5PrintPKcz>

       // Initializing DNS if necessary
       DNS_init(DNS_SOCKET, dns_buffer);
 8005b1c:	490d      	ldr	r1, [pc, #52]	; (8005b54 <_ZN15EthernetManager16configureNetworkEPK6Config+0x2a0>)
 8005b1e:	2001      	movs	r0, #1
 8005b20:	f7fc f890 	bl	8001c44 <DNS_init>
 8005b24:	e000      	b.n	8005b28 <_ZN15EthernetManager16configureNetworkEPK6Config+0x274>
           return;
 8005b26:	bf00      	nop
}
 8005b28:	3750      	adds	r7, #80	; 0x50
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b30:	0800b5d4 	.word	0x0800b5d4
 8005b34:	0800b5fc 	.word	0x0800b5fc
 8005b38:	20000128 	.word	0x20000128
 8005b3c:	080057e9 	.word	0x080057e9
 8005b40:	080057cd 	.word	0x080057cd
 8005b44:	0800b62c 	.word	0x0800b62c
 8005b48:	0800b648 	.word	0x0800b648
 8005b4c:	0800b664 	.word	0x0800b664
 8005b50:	0800b67c 	.word	0x0800b67c
 8005b54:	20000928 	.word	0x20000928

08005b58 <_ZNSt5arrayIhLj4EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f805 	bl	8005b72 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev>:
    struct array
 8005b88:	b5b0      	push	{r4, r5, r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2409      	movs	r4, #9
 8005b94:	461d      	mov	r5, r3
 8005b96:	e004      	b.n	8005ba2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev+0x1a>
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f004 fe87 	bl	800a8ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005b9e:	3518      	adds	r5, #24
 8005ba0:	3c01      	subs	r4, #1
 8005ba2:	2c00      	cmp	r4, #0
 8005ba4:	daf8      	bge.n	8005b98 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev+0x10>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bdb0      	pop	{r4, r5, r7, pc}

08005bb0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>:
 8005bb0:	b590      	push	{r4, r7, lr}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev+0x24>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	429c      	cmp	r4, r3
 8005bc8:	d004      	beq.n	8005bd4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev+0x24>
 8005bca:	3c18      	subs	r4, #24
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f004 fe74 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005bd2:	e7f7      	b.n	8005bc4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev+0x14>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd90      	pop	{r4, r7, pc}

08005bde <_ZN6ConfigC1Ev>:
#include "config.h"

uint8_t mac[6];

Config::Config(){
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3320      	adds	r3, #32
 8005bea:	4618      	mov	r0, r3
 8005bec:	f004 fe5e 	bl	800a8ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3338      	adds	r3, #56	; 0x38
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f004 fe59 	bl	800a8ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3350      	adds	r3, #80	; 0x50
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f004 fe54 	bl	800a8ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3368      	adds	r3, #104	; 0x68
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f004 fe4f 	bl	800a8ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3380      	adds	r3, #128	; 0x80
 8005c12:	4618      	mov	r0, r3
 8005c14:	f004 fe4a 	bl	800a8ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	339c      	adds	r3, #156	; 0x9c
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff ffb3 	bl	8005b88 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff ffad 	bl	8005b88 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff ffa7 	bl	8005b88 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1Ev>

}
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <_ZN6Config4initEv>:

void Config::init() {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	f5ad 7d74 	sub.w	sp, sp, #976	; 0x3d0
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005c50:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005c54:	6018      	str	r0, [r3, #0]

    setBrokerIP({175, 210, 42,26});
 8005c56:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005c5a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8005c5e:	4ae8      	ldr	r2, [pc, #928]	; (8006000 <_ZN6Config4initEv+0x3bc>)
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f107 0208 	add.w	r2, r7, #8
 8005c68:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005c6c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005c70:	4611      	mov	r1, r2
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	f000 fcb9 	bl	80065ea <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>
    setBrokerPort(1883);
 8005c78:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005c7c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005c80:	f240 715b 	movw	r1, #1883	; 0x75b
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	f000 fcbf 	bl	8006608 <_ZN6Config13setBrokerPortEt>
    setIP({172, 30, 1, 123});
 8005c8a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005c8e:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8005c92:	4adc      	ldr	r2, [pc, #880]	; (8006004 <_ZN6Config4initEv+0x3c0>)
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	f107 020c 	add.w	r2, r7, #12
 8005c9c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005ca0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	f000 fcbd 	bl	8006626 <_ZN6Config5setIPERKSt5arrayIhLj4EE>
    setGateway({172, 30, 1, 254});
 8005cac:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005cb0:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8005cb4:	4ad4      	ldr	r2, [pc, #848]	; (8006008 <_ZN6Config4initEv+0x3c4>)
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	f107 0210 	add.w	r2, r7, #16
 8005cbe:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005cc2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	f000 fcbc 	bl	8006646 <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>
    setSubnet({255, 255, 255, 0});
 8005cce:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005cd2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8005cd6:	4acd      	ldr	r2, [pc, #820]	; (800600c <_ZN6Config4initEv+0x3c8>)
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f107 0214 	add.w	r2, r7, #20
 8005ce0:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005ce4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005ce8:	4611      	mov	r1, r2
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	f000 fcbb 	bl	8006666 <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>
    setDNS({8, 8, 8, 8}); // Google's DNS for example
 8005cf0:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005cf4:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8005cf8:	4ac5      	ldr	r2, [pc, #788]	; (8006010 <_ZN6Config4initEv+0x3cc>)
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	f107 0218 	add.w	r2, r7, #24
 8005d02:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005d06:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	f000 fcba 	bl	8006686 <_ZN6Config6setDNSERKSt5arrayIhLj4EE>
    setKeepAliveInterval(60);
 8005d12:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005d16:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005d1a:	213c      	movs	r1, #60	; 0x3c
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	f000 fcc2 	bl	80066a6 <_ZN6Config20setKeepAliveIntervalEt>
    setDHCPEnabled(true);
 8005d22:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005d26:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	f000 fcc9 	bl	80066c4 <_ZN6Config14setDHCPEnabledEb>
    setIntervalTime(1000); // Example interval time
 8005d32:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005d36:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005d3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	f000 fccf 	bl	80066e2 <_ZN6Config15setIntervalTimeEm>

    setUsername("user");
 8005d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f004 fd43 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005d4e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005d52:	f107 031c 	add.w	r3, r7, #28
 8005d56:	49af      	ldr	r1, [pc, #700]	; (8006014 <_ZN6Config4initEv+0x3d0>)
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f004 fe15 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005d5e:	f107 021c 	add.w	r2, r7, #28
 8005d62:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005d66:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	f000 fcc6 	bl	80066fe <_ZN6Config11setUsernameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005d72:	f107 031c 	add.w	r3, r7, #28
 8005d76:	4618      	mov	r0, r3
 8005d78:	f004 fd9f 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d80:	4618      	mov	r0, r3
 8005d82:	f004 fd28 	bl	800a7d6 <_ZNSaIcED1Ev>
    setClientId(std::string(clientId));
 8005d86:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005d8a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f004 fdc0 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005da0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005da4:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005da8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005dac:	4611      	mov	r1, r2
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	f000 fcb4 	bl	800671c <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005db4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005db8:	4618      	mov	r0, r3
 8005dba:	f004 fd7e 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>


    setPassword("pass");
 8005dbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f004 fd06 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005dc8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005dcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005dd0:	4991      	ldr	r1, [pc, #580]	; (8006018 <_ZN6Config4initEv+0x3d4>)
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f004 fdd8 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005dd8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005ddc:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005de0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005de4:	4611      	mov	r1, r2
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	f000 fca7 	bl	800673a <_ZN6Config11setPasswordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005dec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005df0:	4618      	mov	r0, r3
 8005df2:	f004 fd62 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005df6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f004 fceb 	bl	800a7d6 <_ZNSaIcED1Ev>
    setTopicPublish("topic/pub");
 8005e00:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005e04:	4618      	mov	r0, r3
 8005e06:	f004 fce5 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005e0a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e12:	4982      	ldr	r1, [pc, #520]	; (800601c <_ZN6Config4initEv+0x3d8>)
 8005e14:	4618      	mov	r0, r3
 8005e16:	f004 fdb7 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e1a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005e1e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005e22:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005e26:	4611      	mov	r1, r2
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	f000 fc95 	bl	8006758 <_ZN6Config15setTopicPublishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005e2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e32:	4618      	mov	r0, r3
 8005e34:	f004 fd41 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e38:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f004 fcca 	bl	800a7d6 <_ZNSaIcED1Ev>
    setQoS(1); // Quality of Service level
 8005e42:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005e46:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	f000 fc92 	bl	8006776 <_ZN6Config6setQoSEi>


    setAnalogInputNames({"A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10"});
 8005e52:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005e56:	4618      	mov	r0, r3
 8005e58:	f004 fcbc 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005e5c:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8005e60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005e64:	496e      	ldr	r1, [pc, #440]	; (8006020 <_ZN6Config4initEv+0x3dc>)
 8005e66:	4618      	mov	r0, r3
 8005e68:	f004 fd8e 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e6c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005e70:	4618      	mov	r0, r3
 8005e72:	f004 fcaf 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005e76:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8005e7a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005e7e:	3318      	adds	r3, #24
 8005e80:	4968      	ldr	r1, [pc, #416]	; (8006024 <_ZN6Config4initEv+0x3e0>)
 8005e82:	4618      	mov	r0, r3
 8005e84:	f004 fd80 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e88:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f004 fca1 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005e92:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8005e96:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005e9a:	3330      	adds	r3, #48	; 0x30
 8005e9c:	4962      	ldr	r1, [pc, #392]	; (8006028 <_ZN6Config4initEv+0x3e4>)
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f004 fd72 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005ea4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f004 fc93 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005eae:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8005eb2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005eb6:	3348      	adds	r3, #72	; 0x48
 8005eb8:	495c      	ldr	r1, [pc, #368]	; (800602c <_ZN6Config4initEv+0x3e8>)
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f004 fd64 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005ec0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f004 fc85 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005eca:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8005ece:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005ed2:	3360      	adds	r3, #96	; 0x60
 8005ed4:	4956      	ldr	r1, [pc, #344]	; (8006030 <_ZN6Config4initEv+0x3ec>)
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f004 fd56 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005edc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f004 fc77 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005ee6:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8005eea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005eee:	3378      	adds	r3, #120	; 0x78
 8005ef0:	4950      	ldr	r1, [pc, #320]	; (8006034 <_ZN6Config4initEv+0x3f0>)
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f004 fd48 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005ef8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005efc:	4618      	mov	r0, r3
 8005efe:	f004 fc69 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005f02:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8005f06:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005f0a:	3390      	adds	r3, #144	; 0x90
 8005f0c:	494a      	ldr	r1, [pc, #296]	; (8006038 <_ZN6Config4initEv+0x3f4>)
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f004 fd3a 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005f14:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f004 fc5b 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005f1e:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8005f22:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005f26:	33a8      	adds	r3, #168	; 0xa8
 8005f28:	4944      	ldr	r1, [pc, #272]	; (800603c <_ZN6Config4initEv+0x3f8>)
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f004 fd2c 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005f30:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005f34:	4618      	mov	r0, r3
 8005f36:	f004 fc4d 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005f3a:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8005f3e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005f42:	33c0      	adds	r3, #192	; 0xc0
 8005f44:	493e      	ldr	r1, [pc, #248]	; (8006040 <_ZN6Config4initEv+0x3fc>)
 8005f46:	4618      	mov	r0, r3
 8005f48:	f004 fd1e 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005f4c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8005f50:	4618      	mov	r0, r3
 8005f52:	f004 fc3f 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005f56:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8005f5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005f5e:	33d8      	adds	r3, #216	; 0xd8
 8005f60:	4938      	ldr	r1, [pc, #224]	; (8006044 <_ZN6Config4initEv+0x400>)
 8005f62:	4618      	mov	r0, r3
 8005f64:	f004 fd10 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005f68:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005f6c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005f70:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8005f74:	4611      	mov	r1, r2
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	f000 fc24 	bl	80067c4 <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>
 8005f7c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fe15 	bl	8005bb0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 8005f86:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f004 fc23 	bl	800a7d6 <_ZNSaIcED1Ev>
 8005f90:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005f94:	4618      	mov	r0, r3
 8005f96:	f004 fc1e 	bl	800a7d6 <_ZNSaIcED1Ev>
 8005f9a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f004 fc19 	bl	800a7d6 <_ZNSaIcED1Ev>
 8005fa4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f004 fc14 	bl	800a7d6 <_ZNSaIcED1Ev>
 8005fae:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f004 fc0f 	bl	800a7d6 <_ZNSaIcED1Ev>
 8005fb8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f004 fc0a 	bl	800a7d6 <_ZNSaIcED1Ev>
 8005fc2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f004 fc05 	bl	800a7d6 <_ZNSaIcED1Ev>
 8005fcc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f004 fc00 	bl	800a7d6 <_ZNSaIcED1Ev>
 8005fd6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f004 fbfb 	bl	800a7d6 <_ZNSaIcED1Ev>
 8005fe0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f004 fbf6 	bl	800a7d6 <_ZNSaIcED1Ev>
    setDigitalInputNames({"D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10"});
 8005fea:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f004 fbf0 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8005ff4:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8005ff8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005ffc:	e024      	b.n	8006048 <_ZN6Config4initEv+0x404>
 8005ffe:	bf00      	nop
 8006000:	0800b758 	.word	0x0800b758
 8006004:	0800b75c 	.word	0x0800b75c
 8006008:	0800b760 	.word	0x0800b760
 800600c:	0800b764 	.word	0x0800b764
 8006010:	0800b768 	.word	0x0800b768
 8006014:	0800b6c4 	.word	0x0800b6c4
 8006018:	0800b6cc 	.word	0x0800b6cc
 800601c:	0800b6d4 	.word	0x0800b6d4
 8006020:	0800b6e0 	.word	0x0800b6e0
 8006024:	0800b6e4 	.word	0x0800b6e4
 8006028:	0800b6e8 	.word	0x0800b6e8
 800602c:	0800b6ec 	.word	0x0800b6ec
 8006030:	0800b6f0 	.word	0x0800b6f0
 8006034:	0800b6f4 	.word	0x0800b6f4
 8006038:	0800b6f8 	.word	0x0800b6f8
 800603c:	0800b6fc 	.word	0x0800b6fc
 8006040:	0800b700 	.word	0x0800b700
 8006044:	0800b704 	.word	0x0800b704
 8006048:	49c9      	ldr	r1, [pc, #804]	; (8006370 <_ZN6Config4initEv+0x72c>)
 800604a:	4618      	mov	r0, r3
 800604c:	f004 fc9c 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006050:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8006054:	4618      	mov	r0, r3
 8006056:	f004 fbbd 	bl	800a7d4 <_ZNSaIcEC1Ev>
 800605a:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800605e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006062:	3318      	adds	r3, #24
 8006064:	49c3      	ldr	r1, [pc, #780]	; (8006374 <_ZN6Config4initEv+0x730>)
 8006066:	4618      	mov	r0, r3
 8006068:	f004 fc8e 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800606c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8006070:	4618      	mov	r0, r3
 8006072:	f004 fbaf 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8006076:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800607a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800607e:	3330      	adds	r3, #48	; 0x30
 8006080:	49bd      	ldr	r1, [pc, #756]	; (8006378 <_ZN6Config4initEv+0x734>)
 8006082:	4618      	mov	r0, r3
 8006084:	f004 fc80 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006088:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800608c:	4618      	mov	r0, r3
 800608e:	f004 fba1 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8006092:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8006096:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800609a:	3348      	adds	r3, #72	; 0x48
 800609c:	49b7      	ldr	r1, [pc, #732]	; (800637c <_ZN6Config4initEv+0x738>)
 800609e:	4618      	mov	r0, r3
 80060a0:	f004 fc72 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80060a4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f004 fb93 	bl	800a7d4 <_ZNSaIcEC1Ev>
 80060ae:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80060b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80060b6:	3360      	adds	r3, #96	; 0x60
 80060b8:	49b1      	ldr	r1, [pc, #708]	; (8006380 <_ZN6Config4initEv+0x73c>)
 80060ba:	4618      	mov	r0, r3
 80060bc:	f004 fc64 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80060c0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f004 fb85 	bl	800a7d4 <_ZNSaIcEC1Ev>
 80060ca:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80060ce:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80060d2:	3378      	adds	r3, #120	; 0x78
 80060d4:	49ab      	ldr	r1, [pc, #684]	; (8006384 <_ZN6Config4initEv+0x740>)
 80060d6:	4618      	mov	r0, r3
 80060d8:	f004 fc56 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80060dc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80060e0:	4618      	mov	r0, r3
 80060e2:	f004 fb77 	bl	800a7d4 <_ZNSaIcEC1Ev>
 80060e6:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80060ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80060ee:	3390      	adds	r3, #144	; 0x90
 80060f0:	49a5      	ldr	r1, [pc, #660]	; (8006388 <_ZN6Config4initEv+0x744>)
 80060f2:	4618      	mov	r0, r3
 80060f4:	f004 fc48 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80060f8:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80060fc:	4618      	mov	r0, r3
 80060fe:	f004 fb69 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8006102:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8006106:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800610a:	33a8      	adds	r3, #168	; 0xa8
 800610c:	499f      	ldr	r1, [pc, #636]	; (800638c <_ZN6Config4initEv+0x748>)
 800610e:	4618      	mov	r0, r3
 8006110:	f004 fc3a 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006114:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8006118:	4618      	mov	r0, r3
 800611a:	f004 fb5b 	bl	800a7d4 <_ZNSaIcEC1Ev>
 800611e:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8006122:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006126:	33c0      	adds	r3, #192	; 0xc0
 8006128:	4999      	ldr	r1, [pc, #612]	; (8006390 <_ZN6Config4initEv+0x74c>)
 800612a:	4618      	mov	r0, r3
 800612c:	f004 fc2c 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006130:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8006134:	4618      	mov	r0, r3
 8006136:	f004 fb4d 	bl	800a7d4 <_ZNSaIcEC1Ev>
 800613a:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 800613e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006142:	33d8      	adds	r3, #216	; 0xd8
 8006144:	4993      	ldr	r1, [pc, #588]	; (8006394 <_ZN6Config4initEv+0x750>)
 8006146:	4618      	mov	r0, r3
 8006148:	f004 fc1e 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800614c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8006150:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006154:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8006158:	4611      	mov	r1, r2
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	f000 fb41 	bl	80067e2 <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>
 8006160:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fd23 	bl	8005bb0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 800616a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800616e:	4618      	mov	r0, r3
 8006170:	f004 fb31 	bl	800a7d6 <_ZNSaIcED1Ev>
 8006174:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8006178:	4618      	mov	r0, r3
 800617a:	f004 fb2c 	bl	800a7d6 <_ZNSaIcED1Ev>
 800617e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8006182:	4618      	mov	r0, r3
 8006184:	f004 fb27 	bl	800a7d6 <_ZNSaIcED1Ev>
 8006188:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800618c:	4618      	mov	r0, r3
 800618e:	f004 fb22 	bl	800a7d6 <_ZNSaIcED1Ev>
 8006192:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8006196:	4618      	mov	r0, r3
 8006198:	f004 fb1d 	bl	800a7d6 <_ZNSaIcED1Ev>
 800619c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f004 fb18 	bl	800a7d6 <_ZNSaIcED1Ev>
 80061a6:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80061aa:	4618      	mov	r0, r3
 80061ac:	f004 fb13 	bl	800a7d6 <_ZNSaIcED1Ev>
 80061b0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80061b4:	4618      	mov	r0, r3
 80061b6:	f004 fb0e 	bl	800a7d6 <_ZNSaIcED1Ev>
 80061ba:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80061be:	4618      	mov	r0, r3
 80061c0:	f004 fb09 	bl	800a7d6 <_ZNSaIcED1Ev>
 80061c4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80061c8:	4618      	mov	r0, r3
 80061ca:	f004 fb04 	bl	800a7d6 <_ZNSaIcED1Ev>
    setDigitalOutputNames({"O1", "O2", "O3", "O4", "O5", "O6", "O7", "O8", "O9", "O10"});
 80061ce:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80061d2:	4618      	mov	r0, r3
 80061d4:	f004 fafe 	bl	800a7d4 <_ZNSaIcEC1Ev>
 80061d8:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 80061dc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80061e0:	496d      	ldr	r1, [pc, #436]	; (8006398 <_ZN6Config4initEv+0x754>)
 80061e2:	4618      	mov	r0, r3
 80061e4:	f004 fbd0 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80061e8:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 80061ec:	4618      	mov	r0, r3
 80061ee:	f004 faf1 	bl	800a7d4 <_ZNSaIcEC1Ev>
 80061f2:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 80061f6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80061fa:	3318      	adds	r3, #24
 80061fc:	4967      	ldr	r1, [pc, #412]	; (800639c <_ZN6Config4initEv+0x758>)
 80061fe:	4618      	mov	r0, r3
 8006200:	f004 fbc2 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006204:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8006208:	4618      	mov	r0, r3
 800620a:	f004 fae3 	bl	800a7d4 <_ZNSaIcEC1Ev>
 800620e:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8006212:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8006216:	3330      	adds	r3, #48	; 0x30
 8006218:	4961      	ldr	r1, [pc, #388]	; (80063a0 <_ZN6Config4initEv+0x75c>)
 800621a:	4618      	mov	r0, r3
 800621c:	f004 fbb4 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006220:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8006224:	4618      	mov	r0, r3
 8006226:	f004 fad5 	bl	800a7d4 <_ZNSaIcEC1Ev>
 800622a:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 800622e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8006232:	3348      	adds	r3, #72	; 0x48
 8006234:	495b      	ldr	r1, [pc, #364]	; (80063a4 <_ZN6Config4initEv+0x760>)
 8006236:	4618      	mov	r0, r3
 8006238:	f004 fba6 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800623c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8006240:	4618      	mov	r0, r3
 8006242:	f004 fac7 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8006246:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 800624a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800624e:	3360      	adds	r3, #96	; 0x60
 8006250:	4955      	ldr	r1, [pc, #340]	; (80063a8 <_ZN6Config4initEv+0x764>)
 8006252:	4618      	mov	r0, r3
 8006254:	f004 fb98 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006258:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800625c:	4618      	mov	r0, r3
 800625e:	f004 fab9 	bl	800a7d4 <_ZNSaIcEC1Ev>
 8006262:	f507 726f 	add.w	r2, r7, #956	; 0x3bc
 8006266:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800626a:	3378      	adds	r3, #120	; 0x78
 800626c:	494f      	ldr	r1, [pc, #316]	; (80063ac <_ZN6Config4initEv+0x768>)
 800626e:	4618      	mov	r0, r3
 8006270:	f004 fb8a 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006274:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8006278:	4618      	mov	r0, r3
 800627a:	f004 faab 	bl	800a7d4 <_ZNSaIcEC1Ev>
 800627e:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8006282:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8006286:	3390      	adds	r3, #144	; 0x90
 8006288:	4949      	ldr	r1, [pc, #292]	; (80063b0 <_ZN6Config4initEv+0x76c>)
 800628a:	4618      	mov	r0, r3
 800628c:	f004 fb7c 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006290:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8006294:	4618      	mov	r0, r3
 8006296:	f004 fa9d 	bl	800a7d4 <_ZNSaIcEC1Ev>
 800629a:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800629e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80062a2:	33a8      	adds	r3, #168	; 0xa8
 80062a4:	4943      	ldr	r1, [pc, #268]	; (80063b4 <_ZN6Config4initEv+0x770>)
 80062a6:	4618      	mov	r0, r3
 80062a8:	f004 fb6e 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80062ac:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80062b0:	4618      	mov	r0, r3
 80062b2:	f004 fa8f 	bl	800a7d4 <_ZNSaIcEC1Ev>
 80062b6:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 80062ba:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80062be:	33c0      	adds	r3, #192	; 0xc0
 80062c0:	493d      	ldr	r1, [pc, #244]	; (80063b8 <_ZN6Config4initEv+0x774>)
 80062c2:	4618      	mov	r0, r3
 80062c4:	f004 fb60 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80062c8:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80062cc:	4618      	mov	r0, r3
 80062ce:	f004 fa81 	bl	800a7d4 <_ZNSaIcEC1Ev>
 80062d2:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 80062d6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80062da:	33d8      	adds	r3, #216	; 0xd8
 80062dc:	4937      	ldr	r1, [pc, #220]	; (80063bc <_ZN6Config4initEv+0x778>)
 80062de:	4618      	mov	r0, r3
 80062e0:	f004 fb52 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80062e4:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80062e8:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80062ec:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80062f0:	4611      	mov	r1, r2
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	f000 fa85 	bl	8006802 <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>
 80062f8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fc57 	bl	8005bb0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 8006302:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8006306:	4618      	mov	r0, r3
 8006308:	f004 fa65 	bl	800a7d6 <_ZNSaIcED1Ev>
 800630c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8006310:	4618      	mov	r0, r3
 8006312:	f004 fa60 	bl	800a7d6 <_ZNSaIcED1Ev>
 8006316:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800631a:	4618      	mov	r0, r3
 800631c:	f004 fa5b 	bl	800a7d6 <_ZNSaIcED1Ev>
 8006320:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8006324:	4618      	mov	r0, r3
 8006326:	f004 fa56 	bl	800a7d6 <_ZNSaIcED1Ev>
 800632a:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800632e:	4618      	mov	r0, r3
 8006330:	f004 fa51 	bl	800a7d6 <_ZNSaIcED1Ev>
 8006334:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8006338:	4618      	mov	r0, r3
 800633a:	f004 fa4c 	bl	800a7d6 <_ZNSaIcED1Ev>
 800633e:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8006342:	4618      	mov	r0, r3
 8006344:	f004 fa47 	bl	800a7d6 <_ZNSaIcED1Ev>
 8006348:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800634c:	4618      	mov	r0, r3
 800634e:	f004 fa42 	bl	800a7d6 <_ZNSaIcED1Ev>
 8006352:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8006356:	4618      	mov	r0, r3
 8006358:	f004 fa3d 	bl	800a7d6 <_ZNSaIcED1Ev>
 800635c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8006360:	4618      	mov	r0, r3
 8006362:	f004 fa38 	bl	800a7d6 <_ZNSaIcED1Ev>
}
 8006366:	bf00      	nop
 8006368:	f507 7774 	add.w	r7, r7, #976	; 0x3d0
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	0800b708 	.word	0x0800b708
 8006374:	0800b70c 	.word	0x0800b70c
 8006378:	0800b710 	.word	0x0800b710
 800637c:	0800b714 	.word	0x0800b714
 8006380:	0800b718 	.word	0x0800b718
 8006384:	0800b71c 	.word	0x0800b71c
 8006388:	0800b720 	.word	0x0800b720
 800638c:	0800b724 	.word	0x0800b724
 8006390:	0800b728 	.word	0x0800b728
 8006394:	0800b72c 	.word	0x0800b72c
 8006398:	0800b730 	.word	0x0800b730
 800639c:	0800b734 	.word	0x0800b734
 80063a0:	0800b738 	.word	0x0800b738
 80063a4:	0800b73c 	.word	0x0800b73c
 80063a8:	0800b740 	.word	0x0800b740
 80063ac:	0800b744 	.word	0x0800b744
 80063b0:	0800b748 	.word	0x0800b748
 80063b4:	0800b74c 	.word	0x0800b74c
 80063b8:	0800b750 	.word	0x0800b750
 80063bc:	0800b754 	.word	0x0800b754

080063c0 <_ZNK6Config11getBrokerIPEv>:


// Getters
std::array<uint8_t, 4> Config::getBrokerIP() const { return broker_ip; }
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	2300      	movs	r3, #0
 80063d0:	7b3a      	ldrb	r2, [r7, #12]
 80063d2:	f362 0307 	bfi	r3, r2, #0, #8
 80063d6:	7b7a      	ldrb	r2, [r7, #13]
 80063d8:	f362 230f 	bfi	r3, r2, #8, #8
 80063dc:	7bba      	ldrb	r2, [r7, #14]
 80063de:	f362 4317 	bfi	r3, r2, #16, #8
 80063e2:	7bfa      	ldrb	r2, [r7, #15]
 80063e4:	f362 631f 	bfi	r3, r2, #24, #8
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <_ZNK6Config13getBrokerPortEv>:
uint16_t Config::getBrokerPort() const { return broker_port; }
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	889b      	ldrh	r3, [r3, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <_ZNK6Config5getIPEv>:
std::array<uint8_t, 4> Config::getIP() const { return ip; }
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	3206      	adds	r2, #6
 800641c:	6810      	ldr	r0, [r2, #0]
 800641e:	6018      	str	r0, [r3, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	7b3a      	ldrb	r2, [r7, #12]
 8006424:	f362 0307 	bfi	r3, r2, #0, #8
 8006428:	7b7a      	ldrb	r2, [r7, #13]
 800642a:	f362 230f 	bfi	r3, r2, #8, #8
 800642e:	7bba      	ldrb	r2, [r7, #14]
 8006430:	f362 4317 	bfi	r3, r2, #16, #8
 8006434:	7bfa      	ldrb	r2, [r7, #15]
 8006436:	f362 631f 	bfi	r3, r2, #24, #8
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <_ZNK6Config10getGatewayEv>:
std::array<uint8_t, 4> Config::getGateway() const { return gateway; }
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	f107 030c 	add.w	r3, r7, #12
 8006454:	320a      	adds	r2, #10
 8006456:	6810      	ldr	r0, [r2, #0]
 8006458:	6018      	str	r0, [r3, #0]
 800645a:	2300      	movs	r3, #0
 800645c:	7b3a      	ldrb	r2, [r7, #12]
 800645e:	f362 0307 	bfi	r3, r2, #0, #8
 8006462:	7b7a      	ldrb	r2, [r7, #13]
 8006464:	f362 230f 	bfi	r3, r2, #8, #8
 8006468:	7bba      	ldrb	r2, [r7, #14]
 800646a:	f362 4317 	bfi	r3, r2, #16, #8
 800646e:	7bfa      	ldrb	r2, [r7, #15]
 8006470:	f362 631f 	bfi	r3, r2, #24, #8
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <_ZNK6Config9getSubnetEv>:
std::array<uint8_t, 4> Config::getSubnet() const { return subnet; }
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	f107 030c 	add.w	r3, r7, #12
 800648e:	320e      	adds	r2, #14
 8006490:	6810      	ldr	r0, [r2, #0]
 8006492:	6018      	str	r0, [r3, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	7b3a      	ldrb	r2, [r7, #12]
 8006498:	f362 0307 	bfi	r3, r2, #0, #8
 800649c:	7b7a      	ldrb	r2, [r7, #13]
 800649e:	f362 230f 	bfi	r3, r2, #8, #8
 80064a2:	7bba      	ldrb	r2, [r7, #14]
 80064a4:	f362 4317 	bfi	r3, r2, #16, #8
 80064a8:	7bfa      	ldrb	r2, [r7, #15]
 80064aa:	f362 631f 	bfi	r3, r2, #24, #8
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <_ZNK6Config6getDNSEv>:
std::array<uint8_t, 4> Config::getDNS() const { return dns; }
 80064ba:	b480      	push	{r7}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	f107 030c 	add.w	r3, r7, #12
 80064c8:	3212      	adds	r2, #18
 80064ca:	6810      	ldr	r0, [r2, #0]
 80064cc:	6018      	str	r0, [r3, #0]
 80064ce:	2300      	movs	r3, #0
 80064d0:	7b3a      	ldrb	r2, [r7, #12]
 80064d2:	f362 0307 	bfi	r3, r2, #0, #8
 80064d6:	7b7a      	ldrb	r2, [r7, #13]
 80064d8:	f362 230f 	bfi	r3, r2, #8, #8
 80064dc:	7bba      	ldrb	r2, [r7, #14]
 80064de:	f362 4317 	bfi	r3, r2, #16, #8
 80064e2:	7bfa      	ldrb	r2, [r7, #15]
 80064e4:	f362 631f 	bfi	r3, r2, #24, #8
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <_ZNK6Config20getKeepAliveIntervalEv>:
uint16_t Config::getKeepAliveInterval() const { return keep_alive_interval; }
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8adb      	ldrh	r3, [r3, #22]
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <_ZNK6Config14getDHCPEnabledEv>:
bool Config::getDHCPEnabled() const { return dhcp_enabled; }
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	7e1b      	ldrb	r3, [r3, #24]
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <_ZNK6Config11getUsernameB5cxx11Ev>:
uint32_t Config::getIntervalTime()  const { return interval_time;}
std::string Config::getUsername()const { return username; }
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	3320      	adds	r3, #32
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f004 f9f3 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <_ZNK6Config11getClientIdB5cxx11Ev>:
std::string Config::getClientId()const  { return clientId; }
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	3338      	adds	r3, #56	; 0x38
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f004 f9e4 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <_ZNK6Config11getPasswordB5cxx11Ev>:
std::string Config::getPassword()const { return password; }
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	3350      	adds	r3, #80	; 0x50
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f004 f9d5 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <_ZNK6Config17getTopicSubscribeB5cxx11Ev>:
std::string Config::getTopicSubscribe()const { return topic_subscribe; }
 800657e:	b580      	push	{r7, lr}
 8006580:	b082      	sub	sp, #8
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	3368      	adds	r3, #104	; 0x68
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f004 f9c6 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <_ZNK6Config15getTopicPublishB5cxx11Ev>:
std::string Config::getTopicPublish()const {return topic_publish;}
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	3380      	adds	r3, #128	; 0x80
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f004 f9b7 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1ERKS6_>:
 80065ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2509      	movs	r5, #9
 80065c8:	683c      	ldr	r4, [r7, #0]
 80065ca:	461e      	mov	r6, r3
 80065cc:	e006      	b.n	80065dc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1ERKS6_+0x22>
 80065ce:	4621      	mov	r1, r4
 80065d0:	4630      	mov	r0, r6
 80065d2:	f004 f9a5 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80065d6:	3618      	adds	r6, #24
 80065d8:	3418      	adds	r4, #24
 80065da:	3d01      	subs	r5, #1
 80065dc:	2d00      	cmp	r5, #0
 80065de:	daf6      	bge.n	80065ce <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1ERKS6_+0x14>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065ea <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>:
std::array<std::string, MAX_ANALOG_INPUTS> Config::getAnalogInputNames() { return analog_input_names; }
std::array<std::string, MAX_DIGITAL_INPUTS> Config::getDigitalInputNames()  { return digital_input_names; }
std::array<std::string, MAX_DIGITAL_OUTPUTS> Config::getDigitalOutputNames()  { return digital_output_names; }

// Setters
void Config::setBrokerIP(const std::array<uint8_t, 4>& value) { broker_ip = value; }
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	6810      	ldr	r0, [r2, #0]
 80065fa:	6018      	str	r0, [r3, #0]
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <_ZN6Config13setBrokerPortEt>:
void Config::setBrokerPort(uint16_t value) { broker_port = value; }
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	807b      	strh	r3, [r7, #2]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	887a      	ldrh	r2, [r7, #2]
 8006618:	809a      	strh	r2, [r3, #4]
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <_ZN6Config5setIPERKSt5arrayIhLj4EE>:
void Config::setIP(const std::array<uint8_t, 4>& value) { ip = value; }
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	3306      	adds	r3, #6
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>:
void Config::setGateway(const std::array<uint8_t, 4>& value) { gateway = value; }
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	330a      	adds	r3, #10
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>:
void Config::setSubnet(const std::array<uint8_t, 4>& value) { subnet = value; }
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	330e      	adds	r3, #14
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <_ZN6Config6setDNSERKSt5arrayIhLj4EE>:
void Config::setDNS(const std::array<uint8_t, 4>& value) { dns = value; }
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	3312      	adds	r3, #18
 8006696:	6812      	ldr	r2, [r2, #0]
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <_ZN6Config20setKeepAliveIntervalEt>:
void Config::setKeepAliveInterval(uint16_t value) { keep_alive_interval = value; }
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	807b      	strh	r3, [r7, #2]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	887a      	ldrh	r2, [r7, #2]
 80066b6:	82da      	strh	r2, [r3, #22]
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <_ZN6Config14setDHCPEnabledEb>:
void Config::setDHCPEnabled(bool value) { dhcp_enabled = value; }
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	78fa      	ldrb	r2, [r7, #3]
 80066d4:	761a      	strb	r2, [r3, #24]
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <_ZN6Config15setIntervalTimeEm>:
void Config::setIntervalTime(uint32_t value) { interval_time = value; }
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	61da      	str	r2, [r3, #28]
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <_ZN6Config11setUsernameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Config::setUsername(const std::string& value) { username = value; }
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3320      	adds	r3, #32
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f004 f8d9 	bl	800a8c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setClientId(const std::string& value) { clientId = value; }
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3338      	adds	r3, #56	; 0x38
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f004 f8ca 	bl	800a8c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8006732:	bf00      	nop
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <_ZN6Config11setPasswordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setPassword(const std::string& value) { password = value; }
 800673a:	b580      	push	{r7, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3350      	adds	r3, #80	; 0x50
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	f004 f8bb 	bl	800a8c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <_ZN6Config15setTopicPublishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void Config::setTopicSubscribe(const std::string& value) { topic_subscribe = value; }
void Config::setTopicPublish(const std::string& value) { topic_publish = value; }
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3380      	adds	r3, #128	; 0x80
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f004 f8ac 	bl	800a8c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <_ZN6Config6setQoSEi>:
void Config::setQoS(int value) { qos = value; }
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>:
 8006794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2509      	movs	r5, #9
 80067a2:	683c      	ldr	r4, [r7, #0]
 80067a4:	461e      	mov	r6, r3
 80067a6:	e006      	b.n	80067b6 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_+0x22>
 80067a8:	4621      	mov	r1, r4
 80067aa:	4630      	mov	r0, r6
 80067ac:	f004 f88b 	bl	800a8c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80067b0:	3618      	adds	r6, #24
 80067b2:	3418      	adds	r4, #24
 80067b4:	3d01      	subs	r5, #1
 80067b6:	2d00      	cmp	r5, #0
 80067b8:	daf6      	bge.n	80067a8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_+0x14>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067c4 <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>:
void Config::setAnalogInputNames(const std::array<std::string, MAX_ANALOG_INPUTS>& value) { analog_input_names = value; }
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	339c      	adds	r3, #156	; 0x9c
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ffdd 	bl	8006794 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>:
void Config::setDigitalInputNames(const std::array<std::string, MAX_DIGITAL_INPUTS>& value) { digital_input_names = value; }
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff ffcd 	bl	8006794 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EE>:
void Config::setDigitalOutputNames(const std::array<std::string, MAX_DIGITAL_OUTPUTS>& value) { digital_output_names = value; }
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff ffbd 	bl	8006794 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEaSERKS6_>
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <_ZN6ConfigC1ERKS_>:
}
constexpr size_t MAX_ANALOG_INPUTS = 10;
constexpr size_t MAX_DIGITAL_INPUTS = 10;
constexpr size_t MAX_DIGITAL_OUTPUTS = 10;

class Config {
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	889a      	ldrh	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	809a      	strh	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	3306      	adds	r3, #6
 8006842:	3206      	adds	r2, #6
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	330a      	adds	r3, #10
 800684e:	320a      	adds	r2, #10
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	330e      	adds	r3, #14
 800685a:	320e      	adds	r2, #14
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	3312      	adds	r3, #18
 8006866:	3212      	adds	r2, #18
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	8ada      	ldrh	r2, [r3, #22]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	82da      	strh	r2, [r3, #22]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	7e1a      	ldrb	r2, [r3, #24]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	761a      	strb	r2, [r3, #24]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	61da      	str	r2, [r3, #28]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f103 0220 	add.w	r2, r3, #32
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	3320      	adds	r3, #32
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f004 f845 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	3338      	adds	r3, #56	; 0x38
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f004 f83c 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	3350      	adds	r3, #80	; 0x50
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f004 f833 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	3368      	adds	r3, #104	; 0x68
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f004 f82a 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	3380      	adds	r3, #128	; 0x80
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f004 f821 	bl	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	339c      	adds	r3, #156	; 0x9c
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7ff fe5f 	bl	80065ba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1ERKS6_>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006908:	4619      	mov	r1, r3
 800690a:	4610      	mov	r0, r2
 800690c:	f7ff fe55 	bl	80065ba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1ERKS6_>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800691c:	4619      	mov	r1, r3
 800691e:	4610      	mov	r0, r2
 8006920:	f7ff fe4b 	bl	80065ba <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EEC1ERKS6_>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <_ZN6ConfigD1Ev>:
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff f937 	bl	8005bb0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff f931 	bl	8005bb0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	339c      	adds	r3, #156	; 0x9c
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff f92c 	bl	8005bb0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj10EED1Ev>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3380      	adds	r3, #128	; 0x80
 800695c:	4618      	mov	r0, r3
 800695e:	f003 ffac 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3368      	adds	r3, #104	; 0x68
 8006966:	4618      	mov	r0, r3
 8006968:	f003 ffa7 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3350      	adds	r3, #80	; 0x50
 8006970:	4618      	mov	r0, r3
 8006972:	f003 ffa2 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3338      	adds	r3, #56	; 0x38
 800697a:	4618      	mov	r0, r3
 800697c:	f003 ff9d 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3320      	adds	r3, #32
 8006984:	4618      	mov	r0, r3
 8006986:	f003 ff98 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	f5ad 6ddb 	sub.w	sp, sp, #1752	; 0x6d8
 800699a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800699c:	f001 f83a 	bl	8007a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80069a0:	f000 f846 	bl	8006a30 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80069a4:	f000 fa70 	bl	8006e88 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 80069a8:	f000 fa04 	bl	8006db4 <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 80069ac:	f000 fa3e 	bl	8006e2c <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 80069b0:	f000 f8b2 	bl	8006b18 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 80069b4:	f000 f96e 	bl	8006c94 <_ZL12MX_ADC2_Initv>
  /* USER CODE BEGIN 2 */

 config.init();
 80069b8:	4818      	ldr	r0, [pc, #96]	; (8006a1c <main+0x88>)
 80069ba:	f7ff f943 	bl	8005c44 <_ZN6Config4initEv>

 ethManager.initialize(&config);
 80069be:	4917      	ldr	r1, [pc, #92]	; (8006a1c <main+0x88>)
 80069c0:	4817      	ldr	r0, [pc, #92]	; (8006a20 <main+0x8c>)
 80069c2:	f7fe fe59 	bl	8005678 <_ZN15EthernetManager10initializeEPK6Config>

 Print("Welcome to the New World");
 80069c6:	4817      	ldr	r0, [pc, #92]	; (8006a24 <main+0x90>)
 80069c8:	f000 ffca 	bl	8007960 <_Z5PrintPKcz>

 mqttClient.init(config);
 80069cc:	463b      	mov	r3, r7
 80069ce:	4913      	ldr	r1, [pc, #76]	; (8006a1c <main+0x88>)
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff ff26 	bl	8006822 <_ZN6ConfigC1ERKS_>
 80069d6:	463b      	mov	r3, r7
 80069d8:	4619      	mov	r1, r3
 80069da:	4813      	ldr	r0, [pc, #76]	; (8006a28 <main+0x94>)
 80069dc:	f000 fbc6 	bl	800716c <_ZN14MQTTConnection4initE6Config>
 80069e0:	463b      	mov	r3, r7
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff ffa3 	bl	800692e <_ZN6ConfigD1Ev>
  /* USER CODE BEGIN WHILE */

  while (true)
  {

	mqttClient.mqttYield();
 80069e8:	480f      	ldr	r0, [pc, #60]	; (8006a28 <main+0x94>)
 80069ea:	f000 fda1 	bl	8007530 <_ZN14MQTTConnection9mqttYieldEv>

   // Print("Data has been published!!! \r\n");

    mqttClient.publish("HelloMQTT", config);
 80069ee:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80069f2:	490a      	ldr	r1, [pc, #40]	; (8006a1c <main+0x88>)
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff ff14 	bl	8006822 <_ZN6ConfigC1ERKS_>
 80069fa:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80069fe:	461a      	mov	r2, r3
 8006a00:	490a      	ldr	r1, [pc, #40]	; (8006a2c <main+0x98>)
 8006a02:	4809      	ldr	r0, [pc, #36]	; (8006a28 <main+0x94>)
 8006a04:	f000 fce6 	bl	80073d4 <_ZN14MQTTConnection7publishEPc6Config>
 8006a08:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff ff8e 	bl	800692e <_ZN6ConfigD1Ev>
    HAL_Delay(3000);
 8006a12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006a16:	f001 f86f 	bl	8007af8 <HAL_Delay>
	mqttClient.mqttYield();
 8006a1a:	e7e5      	b.n	80069e8 <main+0x54>
 8006a1c:	2000125c 	.word	0x2000125c
 8006a20:	200015c8 	.word	0x200015c8
 8006a24:	0800b76c 	.word	0x0800b76c
 8006a28:	200015cc 	.word	0x200015cc
 8006a2c:	0800b788 	.word	0x0800b788

08006a30 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b094      	sub	sp, #80	; 0x50
 8006a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a36:	f107 0320 	add.w	r3, r7, #32
 8006a3a:	2230      	movs	r2, #48	; 0x30
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f004 f922 	bl	800ac88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a44:	f107 030c 	add.w	r3, r7, #12
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	605a      	str	r2, [r3, #4]
 8006a4e:	609a      	str	r2, [r3, #8]
 8006a50:	60da      	str	r2, [r3, #12]
 8006a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a54:	2300      	movs	r3, #0
 8006a56:	60bb      	str	r3, [r7, #8]
 8006a58:	4b2d      	ldr	r3, [pc, #180]	; (8006b10 <_Z18SystemClock_Configv+0xe0>)
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	4a2c      	ldr	r2, [pc, #176]	; (8006b10 <_Z18SystemClock_Configv+0xe0>)
 8006a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a62:	6413      	str	r3, [r2, #64]	; 0x40
 8006a64:	4b2a      	ldr	r3, [pc, #168]	; (8006b10 <_Z18SystemClock_Configv+0xe0>)
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a70:	2300      	movs	r3, #0
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	4b27      	ldr	r3, [pc, #156]	; (8006b14 <_Z18SystemClock_Configv+0xe4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a26      	ldr	r2, [pc, #152]	; (8006b14 <_Z18SystemClock_Configv+0xe4>)
 8006a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	4b24      	ldr	r3, [pc, #144]	; (8006b14 <_Z18SystemClock_Configv+0xe4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a88:	607b      	str	r3, [r7, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a96:	2302      	movs	r3, #2
 8006a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006aa0:	2319      	movs	r3, #25
 8006aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006aa4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006aa8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006aaa:	2302      	movs	r3, #2
 8006aac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006aae:	2304      	movs	r3, #4
 8006ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ab2:	f107 0320 	add.w	r3, r7, #32
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f002 f852 	bl	8008b60 <HAL_RCC_OscConfig>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	bf14      	ite	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	2300      	moveq	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8006acc:	f000 fae3 	bl	8007096 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006ad0:	230f      	movs	r3, #15
 8006ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006adc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006ae8:	f107 030c 	add.w	r3, r7, #12
 8006aec:	2105      	movs	r1, #5
 8006aee:	4618      	mov	r0, r3
 8006af0:	f002 faae 	bl	8009050 <HAL_RCC_ClockConfig>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bf14      	ite	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	2300      	moveq	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8006b04:	f000 fac7 	bl	8007096 <Error_Handler>
  }
}
 8006b08:	bf00      	nop
 8006b0a:	3750      	adds	r7, #80	; 0x50
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40023800 	.word	0x40023800
 8006b14:	40007000 	.word	0x40007000

08006b18 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08c      	sub	sp, #48	; 0x30
 8006b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006b1e:	f107 0320 	add.w	r3, r7, #32
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	609a      	str	r2, [r3, #8]
 8006b2a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	2220      	movs	r2, #32
 8006b30:	2100      	movs	r1, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	f004 f8a8 	bl	800ac88 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006b38:	4b52      	ldr	r3, [pc, #328]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b3a:	4a53      	ldr	r2, [pc, #332]	; (8006c88 <_ZL12MX_ADC1_Initv+0x170>)
 8006b3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006b3e:	4b51      	ldr	r3, [pc, #324]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006b46:	4b4f      	ldr	r3, [pc, #316]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006b4c:	4b4d      	ldr	r3, [pc, #308]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006b52:	4b4c      	ldr	r3, [pc, #304]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006b58:	4b4a      	ldr	r3, [pc, #296]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006b60:	4b48      	ldr	r3, [pc, #288]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006b66:	4b47      	ldr	r3, [pc, #284]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b68:	4a48      	ldr	r2, [pc, #288]	; (8006c8c <_ZL12MX_ADC1_Initv+0x174>)
 8006b6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006b6c:	4b45      	ldr	r3, [pc, #276]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8006b72:	4b44      	ldr	r3, [pc, #272]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b74:	2204      	movs	r2, #4
 8006b76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006b78:	4b42      	ldr	r3, [pc, #264]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006b80:	4b40      	ldr	r3, [pc, #256]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006b86:	483f      	ldr	r0, [pc, #252]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006b88:	f000 ffda 	bl	8007b40 <HAL_ADC_Init>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf14      	ite	ne
 8006b92:	2301      	movne	r3, #1
 8006b94:	2300      	moveq	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <_ZL12MX_ADC1_Initv+0x88>
  {
    Error_Handler();
 8006b9c:	f000 fa7b 	bl	8007096 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006bac:	f107 0320 	add.w	r3, r7, #32
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4834      	ldr	r0, [pc, #208]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006bb4:	f001 f936 	bl	8007e24 <HAL_ADC_ConfigChannel>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bf14      	ite	ne
 8006bbe:	2301      	movne	r3, #1
 8006bc0:	2300      	moveq	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <_ZL12MX_ADC1_Initv+0xb4>
  {
    Error_Handler();
 8006bc8:	f000 fa65 	bl	8007096 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006bd0:	f107 0320 	add.w	r3, r7, #32
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	482b      	ldr	r0, [pc, #172]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006bd8:	f001 f924 	bl	8007e24 <HAL_ADC_ConfigChannel>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bf14      	ite	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	2300      	moveq	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <_ZL12MX_ADC1_Initv+0xd8>
  {
    Error_Handler();
 8006bec:	f000 fa53 	bl	8007096 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006bf4:	f107 0320 	add.w	r3, r7, #32
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4822      	ldr	r0, [pc, #136]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006bfc:	f001 f912 	bl	8007e24 <HAL_ADC_ConfigChannel>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bf14      	ite	ne
 8006c06:	2301      	movne	r3, #1
 8006c08:	2300      	moveq	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8006c10:	f000 fa41 	bl	8007096 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8006c14:	2304      	movs	r3, #4
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006c18:	f107 0320 	add.w	r3, r7, #32
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4819      	ldr	r0, [pc, #100]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006c20:	f001 f900 	bl	8007e24 <HAL_ADC_ConfigChannel>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bf14      	ite	ne
 8006c2a:	2301      	movne	r3, #1
 8006c2c:	2300      	moveq	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <_ZL12MX_ADC1_Initv+0x120>
  {
    Error_Handler();
 8006c34:	f000 fa2f 	bl	8007096 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8006c40:	2301      	movs	r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8006c4c:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <_ZL12MX_ADC1_Initv+0x178>)
 8006c4e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8006c50:	2300      	movs	r3, #0
 8006c52:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8006c54:	2300      	movs	r3, #0
 8006c56:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4808      	ldr	r0, [pc, #32]	; (8006c84 <_ZL12MX_ADC1_Initv+0x16c>)
 8006c62:	f001 fb07 	bl	8008274 <HAL_ADCEx_InjectedConfigChannel>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bf14      	ite	ne
 8006c6c:	2301      	movne	r3, #1
 8006c6e:	2300      	moveq	r3, #0
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <_ZL12MX_ADC1_Initv+0x162>
  {
    Error_Handler();
 8006c76:	f000 fa0e 	bl	8007096 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006c7a:	bf00      	nop
 8006c7c:	3730      	adds	r7, #48	; 0x30
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	2000112c 	.word	0x2000112c
 8006c88:	40012000 	.word	0x40012000
 8006c8c:	0f000001 	.word	0x0f000001
 8006c90:	000f0001 	.word	0x000f0001

08006c94 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006ca6:	4b40      	ldr	r3, [pc, #256]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006ca8:	4a40      	ldr	r2, [pc, #256]	; (8006dac <_ZL12MX_ADC2_Initv+0x118>)
 8006caa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006cac:	4b3e      	ldr	r3, [pc, #248]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006cb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006cb4:	4b3c      	ldr	r3, [pc, #240]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006cba:	4b3b      	ldr	r3, [pc, #236]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006cc0:	4b39      	ldr	r3, [pc, #228]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006cc6:	4b38      	ldr	r3, [pc, #224]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006cce:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006cd4:	4b34      	ldr	r3, [pc, #208]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006cd6:	4a36      	ldr	r2, [pc, #216]	; (8006db0 <_ZL12MX_ADC2_Initv+0x11c>)
 8006cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006cda:	4b33      	ldr	r3, [pc, #204]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8006ce0:	4b31      	ldr	r3, [pc, #196]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006ce6:	4b30      	ldr	r3, [pc, #192]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006cee:	4b2e      	ldr	r3, [pc, #184]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006cf4:	482c      	ldr	r0, [pc, #176]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006cf6:	f000 ff23 	bl	8007b40 <HAL_ADC_Init>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf14      	ite	ne
 8006d00:	2301      	movne	r3, #1
 8006d02:	2300      	moveq	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 8006d0a:	f000 f9c4 	bl	8007096 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006d12:	2301      	movs	r3, #1
 8006d14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4822      	ldr	r0, [pc, #136]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006d20:	f001 f880 	bl	8007e24 <HAL_ADC_ConfigChannel>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	bf14      	ite	ne
 8006d2a:	2301      	movne	r3, #1
 8006d2c:	2300      	moveq	r3, #0
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 8006d34:	f000 f9af 	bl	8007096 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4819      	ldr	r0, [pc, #100]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006d42:	f001 f86f 	bl	8007e24 <HAL_ADC_ConfigChannel>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bf14      	ite	ne
 8006d4c:	2301      	movne	r3, #1
 8006d4e:	2300      	moveq	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <_ZL12MX_ADC2_Initv+0xc6>
  {
    Error_Handler();
 8006d56:	f000 f99e 	bl	8007096 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d5e:	463b      	mov	r3, r7
 8006d60:	4619      	mov	r1, r3
 8006d62:	4811      	ldr	r0, [pc, #68]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006d64:	f001 f85e 	bl	8007e24 <HAL_ADC_ConfigChannel>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bf14      	ite	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	2300      	moveq	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <_ZL12MX_ADC2_Initv+0xe8>
  {
    Error_Handler();
 8006d78:	f000 f98d 	bl	8007096 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d80:	463b      	mov	r3, r7
 8006d82:	4619      	mov	r1, r3
 8006d84:	4808      	ldr	r0, [pc, #32]	; (8006da8 <_ZL12MX_ADC2_Initv+0x114>)
 8006d86:	f001 f84d 	bl	8007e24 <HAL_ADC_ConfigChannel>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bf14      	ite	ne
 8006d90:	2301      	movne	r3, #1
 8006d92:	2300      	moveq	r3, #0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <_ZL12MX_ADC2_Initv+0x10a>
  {
    Error_Handler();
 8006d9a:	f000 f97c 	bl	8007096 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20001174 	.word	0x20001174
 8006dac:	40012100 	.word	0x40012100
 8006db0:	0f000001 	.word	0x0f000001

08006db4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006db8:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006dba:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <_ZL12MX_SPI2_Initv+0x74>)
 8006dbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006dbe:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006dc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006dc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006dc6:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006dcc:	4b15      	ldr	r3, [pc, #84]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dd2:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006dd8:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006dde:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006de6:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006dec:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006df2:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006df8:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006dfe:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006e00:	220a      	movs	r2, #10
 8006e02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006e04:	4807      	ldr	r0, [pc, #28]	; (8006e24 <_ZL12MX_SPI2_Initv+0x70>)
 8006e06:	f002 fb03 	bl	8009410 <HAL_SPI_Init>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	bf14      	ite	ne
 8006e10:	2301      	movne	r3, #1
 8006e12:	2300      	moveq	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8006e1a:	f000 f93c 	bl	8007096 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006e1e:	bf00      	nop
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	200011bc 	.word	0x200011bc
 8006e28:	40003800 	.word	0x40003800

08006e2c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006e30:	4b13      	ldr	r3, [pc, #76]	; (8006e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e32:	4a14      	ldr	r2, [pc, #80]	; (8006e84 <_ZL19MX_USART1_UART_Initv+0x58>)
 8006e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006e36:	4b12      	ldr	r3, [pc, #72]	; (8006e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006e3e:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006e50:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e52:	220c      	movs	r2, #12
 8006e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e56:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e5c:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006e62:	4807      	ldr	r0, [pc, #28]	; (8006e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e64:	f003 f8aa 	bl	8009fbc <HAL_UART_Init>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	bf14      	ite	ne
 8006e6e:	2301      	movne	r3, #1
 8006e70:	2300      	moveq	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8006e78:	f000 f90d 	bl	8007096 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006e7c:	bf00      	nop
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20001214 	.word	0x20001214
 8006e84:	40011000 	.word	0x40011000

08006e88 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08c      	sub	sp, #48	; 0x30
 8006e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e8e:	f107 031c 	add.w	r3, r7, #28
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	605a      	str	r2, [r3, #4]
 8006e98:	609a      	str	r2, [r3, #8]
 8006e9a:	60da      	str	r2, [r3, #12]
 8006e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	4b71      	ldr	r3, [pc, #452]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	4a70      	ldr	r2, [pc, #448]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006ea8:	f043 0304 	orr.w	r3, r3, #4
 8006eac:	6313      	str	r3, [r2, #48]	; 0x30
 8006eae:	4b6e      	ldr	r3, [pc, #440]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	61bb      	str	r3, [r7, #24]
 8006eb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	4b6a      	ldr	r3, [pc, #424]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	4a69      	ldr	r2, [pc, #420]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eca:	4b67      	ldr	r3, [pc, #412]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	4b63      	ldr	r3, [pc, #396]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	4a62      	ldr	r2, [pc, #392]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ee6:	4b60      	ldr	r3, [pc, #384]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	4b5c      	ldr	r3, [pc, #368]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	4a5b      	ldr	r2, [pc, #364]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006efc:	f043 0310 	orr.w	r3, r3, #16
 8006f00:	6313      	str	r3, [r2, #48]	; 0x30
 8006f02:	4b59      	ldr	r3, [pc, #356]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	4b55      	ldr	r3, [pc, #340]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	4a54      	ldr	r2, [pc, #336]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006f18:	f043 0302 	orr.w	r3, r3, #2
 8006f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1e:	4b52      	ldr	r3, [pc, #328]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	60bb      	str	r3, [r7, #8]
 8006f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	607b      	str	r3, [r7, #4]
 8006f2e:	4b4e      	ldr	r3, [pc, #312]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	4a4d      	ldr	r2, [pc, #308]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006f34:	f043 0308 	orr.w	r3, r3, #8
 8006f38:	6313      	str	r3, [r2, #48]	; 0x30
 8006f3a:	4b4b      	ldr	r3, [pc, #300]	; (8007068 <_ZL12MX_GPIO_Initv+0x1e0>)
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	607b      	str	r3, [r7, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, switch5_Pin|switch6_Pin|switch7_Pin|switch8_Pin, GPIO_PIN_RESET);
 8006f46:	2200      	movs	r2, #0
 8006f48:	21f0      	movs	r1, #240	; 0xf0
 8006f4a:	4848      	ldr	r0, [pc, #288]	; (800706c <_ZL12MX_GPIO_Initv+0x1e4>)
 8006f4c:	f001 fdd6 	bl	8008afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RESET_GPIO_Port, W5500_RESET_Pin, GPIO_PIN_RESET);
 8006f50:	2200      	movs	r2, #0
 8006f52:	2120      	movs	r1, #32
 8006f54:	4846      	ldr	r0, [pc, #280]	; (8007070 <_ZL12MX_GPIO_Initv+0x1e8>)
 8006f56:	f001 fdd1 	bl	8008afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, switch1_Pin|switch2_Pin|switch3_Pin|switch4_Pin
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f24f 0102 	movw	r1, #61442	; 0xf002
 8006f60:	4844      	ldr	r0, [pc, #272]	; (8007074 <_ZL12MX_GPIO_Initv+0x1ec>)
 8006f62:	f001 fdcb 	bl	8008afc <HAL_GPIO_WritePin>
                          |sound_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8006f66:	2200      	movs	r2, #0
 8006f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f6c:	4842      	ldr	r0, [pc, #264]	; (8007078 <_ZL12MX_GPIO_Initv+0x1f0>)
 8006f6e:	f001 fdc5 	bl	8008afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8006f72:	f240 33cf 	movw	r3, #975	; 0x3cf
 8006f76:	61fb      	str	r3, [r7, #28]
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f80:	f107 031c 	add.w	r3, r7, #28
 8006f84:	4619      	mov	r1, r3
 8006f86:	483a      	ldr	r0, [pc, #232]	; (8007070 <_ZL12MX_GPIO_Initv+0x1e8>)
 8006f88:	f001 fc1c 	bl	80087c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch5_Pin switch6_Pin switch7_Pin switch8_Pin */
  GPIO_InitStruct.Pin = switch5_Pin|switch6_Pin|switch7_Pin|switch8_Pin;
 8006f8c:	23f0      	movs	r3, #240	; 0xf0
 8006f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f90:	2301      	movs	r3, #1
 8006f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f9c:	f107 031c 	add.w	r3, r7, #28
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4832      	ldr	r0, [pc, #200]	; (800706c <_ZL12MX_GPIO_Initv+0x1e4>)
 8006fa4:	f001 fc0e 	bl	80087c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RESET_Pin */
  GPIO_InitStruct.Pin = W5500_RESET_Pin;
 8006fa8:	2320      	movs	r3, #32
 8006faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fac:	2301      	movs	r3, #1
 8006fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_RESET_GPIO_Port, &GPIO_InitStruct);
 8006fb8:	f107 031c 	add.w	r3, r7, #28
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	482c      	ldr	r0, [pc, #176]	; (8007070 <_ZL12MX_GPIO_Initv+0x1e8>)
 8006fc0:	f001 fc00 	bl	80087c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NetworkStatus_Pin */
  GPIO_InitStruct.Pin = NetworkStatus_Pin;
 8006fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006fca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NetworkStatus_GPIO_Port, &GPIO_InitStruct);
 8006fd4:	f107 031c 	add.w	r3, r7, #28
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4826      	ldr	r0, [pc, #152]	; (8007074 <_ZL12MX_GPIO_Initv+0x1ec>)
 8006fdc:	f001 fbf2 	bl	80087c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch1_Pin switch2_Pin switch3_Pin switch4_Pin
                           sound_Pin */
  GPIO_InitStruct.Pin = switch1_Pin|switch2_Pin|switch3_Pin|switch4_Pin
 8006fe0:	f24f 0302 	movw	r3, #61442	; 0xf002
 8006fe4:	61fb      	str	r3, [r7, #28]
                          |sound_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ff2:	f107 031c 	add.w	r3, r7, #28
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	481e      	ldr	r0, [pc, #120]	; (8007074 <_ZL12MX_GPIO_Initv+0x1ec>)
 8006ffa:	f001 fbe3 	bl	80087c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8006ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007004:	2301      	movs	r3, #1
 8007006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007008:	2300      	movs	r3, #0
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800700c:	2300      	movs	r3, #0
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8007010:	f107 031c 	add.w	r3, r7, #28
 8007014:	4619      	mov	r1, r3
 8007016:	4818      	ldr	r0, [pc, #96]	; (8007078 <_ZL12MX_GPIO_Initv+0x1f0>)
 8007018:	f001 fbd4 	bl	80087c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI5_Pin DI6_Pin DI7_Pin DI8_Pin */
  GPIO_InitStruct.Pin = DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin;
 800701c:	f44f 531c 	mov.w	r3, #9984	; 0x2700
 8007020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007022:	2300      	movs	r3, #0
 8007024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007026:	2302      	movs	r3, #2
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800702a:	f107 031c 	add.w	r3, r7, #28
 800702e:	4619      	mov	r1, r3
 8007030:	4812      	ldr	r0, [pc, #72]	; (800707c <_ZL12MX_GPIO_Initv+0x1f4>)
 8007032:	f001 fbc7 	bl	80087c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI13_Pin DI14_Pin DI15_Pin DI16_Pin */
  GPIO_InitStruct.Pin = DI13_Pin|DI14_Pin|DI15_Pin|DI16_Pin;
 8007036:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800703a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800703c:	2300      	movs	r3, #0
 800703e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007040:	2302      	movs	r3, #2
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007044:	f107 031c 	add.w	r3, r7, #28
 8007048:	4619      	mov	r1, r3
 800704a:	4808      	ldr	r0, [pc, #32]	; (800706c <_ZL12MX_GPIO_Initv+0x1e4>)
 800704c:	f001 fbba 	bl	80087c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007050:	2200      	movs	r2, #0
 8007052:	2100      	movs	r1, #0
 8007054:	2028      	movs	r0, #40	; 0x28
 8007056:	f001 fb7e 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800705a:	2028      	movs	r0, #40	; 0x28
 800705c:	f001 fb97 	bl	800878e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007060:	bf00      	nop
 8007062:	3730      	adds	r7, #48	; 0x30
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40023800 	.word	0x40023800
 800706c:	40020000 	.word	0x40020000
 8007070:	40020800 	.word	0x40020800
 8007074:	40021000 	.word	0x40021000
 8007078:	40020400 	.word	0x40020400
 800707c:	40020c00 	.word	0x40020c00

08007080 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11) {
    //  UART_Printf("Internet connection lost \r\n");
    }
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007096:	b480      	push	{r7}
 8007098:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800709a:	b672      	cpsid	i
}
 800709c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800709e:	e7fe      	b.n	800709e <Error_Handler+0x8>

080070a0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80070a0:	b5b0      	push	{r4, r5, r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d119      	bne.n	80070e4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d114      	bne.n	80070e4 <_Z41__static_initialization_and_destruction_0ii+0x44>
Config config;
 80070ba:	4819      	ldr	r0, [pc, #100]	; (8007120 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80070bc:	f7fe fd8f 	bl	8005bde <_ZN6ConfigC1Ev>
EthernetManager ethManager;
 80070c0:	4818      	ldr	r0, [pc, #96]	; (8007124 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80070c2:	f7fe faae 	bl	8005622 <_ZN15EthernetManagerC1Ev>
MQTTConnection mqttClient;
 80070c6:	4818      	ldr	r0, [pc, #96]	; (8007128 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80070c8:	f000 f844 	bl	8007154 <_ZN14MQTTConnectionC1Ev>
static std::string statusJsonBuffer[MAX_JSON_SIZE];
 80070cc:	4b17      	ldr	r3, [pc, #92]	; (800712c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80070ce:	f240 14ff 	movw	r4, #511	; 0x1ff
 80070d2:	461d      	mov	r5, r3
 80070d4:	e004      	b.n	80070e0 <_Z41__static_initialization_and_destruction_0ii+0x40>
 80070d6:	4628      	mov	r0, r5
 80070d8:	f003 fbe8 	bl	800a8ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80070dc:	3518      	adds	r5, #24
 80070de:	3c01      	subs	r4, #1
 80070e0:	2c00      	cmp	r4, #0
 80070e2:	daf8      	bge.n	80070d6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d116      	bne.n	8007118 <_Z41__static_initialization_and_destruction_0ii+0x78>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d111      	bne.n	8007118 <_Z41__static_initialization_and_destruction_0ii+0x78>
 80070f4:	4c0e      	ldr	r4, [pc, #56]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80070f6:	4b0d      	ldr	r3, [pc, #52]	; (800712c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80070f8:	429c      	cmp	r4, r3
 80070fa:	d004      	beq.n	8007106 <_Z41__static_initialization_and_destruction_0ii+0x66>
 80070fc:	3c18      	subs	r4, #24
 80070fe:	4620      	mov	r0, r4
 8007100:	f003 fbdb 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007104:	e7f7      	b.n	80070f6 <_Z41__static_initialization_and_destruction_0ii+0x56>
MQTTConnection mqttClient;
 8007106:	4808      	ldr	r0, [pc, #32]	; (8007128 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007108:	f000 f9f4 	bl	80074f4 <_ZN14MQTTConnectionD1Ev>
EthernetManager ethManager;
 800710c:	4805      	ldr	r0, [pc, #20]	; (8007124 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800710e:	f7fe fa7d 	bl	800560c <_ZN15EthernetManagerD1Ev>
Config config;
 8007112:	4803      	ldr	r0, [pc, #12]	; (8007120 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007114:	f7ff fc0b 	bl	800692e <_ZN6ConfigD1Ev>
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bdb0      	pop	{r4, r5, r7, pc}
 8007120:	2000125c 	.word	0x2000125c
 8007124:	200015c8 	.word	0x200015c8
 8007128:	200015cc 	.word	0x200015cc
 800712c:	20001638 	.word	0x20001638
 8007130:	20004638 	.word	0x20004638

08007134 <_GLOBAL__sub_I_hadc1>:
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
 8007138:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800713c:	2001      	movs	r0, #1
 800713e:	f7ff ffaf 	bl	80070a0 <_Z41__static_initialization_and_destruction_0ii>
 8007142:	bd80      	pop	{r7, pc}

08007144 <_GLOBAL__sub_D_hadc1>:
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
 8007148:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800714c:	2000      	movs	r0, #0
 800714e:	f7ff ffa7 	bl	80070a0 <_Z41__static_initialization_and_destruction_0ii>
 8007152:	bd80      	pop	{r7, pc}

08007154 <_ZN14MQTTConnectionC1Ev>:

uint8_t MQTTConnection::send_buffer[2048];
uint8_t MQTTConnection::recieve_buff[2048];


MQTTConnection::MQTTConnection() {
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]


    */


}
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
	...

0800716c <_ZN14MQTTConnection4initE6Config>:

void MQTTConnection::init(Config config) {
 800716c:	b5b0      	push	{r4, r5, r7, lr}
 800716e:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 8007172:	af04      	add	r7, sp, #16
 8007174:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007178:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800717c:	6018      	str	r0, [r3, #0]
 800717e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007182:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8007186:	6019      	str	r1, [r3, #0]

	    NewNetwork(&network, 1);
 8007188:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800718c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	335c      	adds	r3, #92	; 0x5c
 8007194:	2101      	movs	r1, #1
 8007196:	4618      	mov	r0, r3
 8007198:	f7fd fae0 	bl	800475c <NewNetwork>
	    ConnectNetwork(&network, config.getBrokerIP().data(), config.getBrokerPort());
 800719c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80071a0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80071aa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80071ae:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	f7ff f904 	bl	80063c0 <_ZNK6Config11getBrokerIPEv>
 80071b8:	4602      	mov	r2, r0
 80071ba:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80071be:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	f107 030c 	add.w	r3, r7, #12
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe fcc5 	bl	8005b58 <_ZNSt5arrayIhLj4EE4dataEv>
 80071ce:	4605      	mov	r5, r0
 80071d0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80071d4:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	f7ff f90b 	bl	80063f4 <_ZNK6Config13getBrokerPortEv>
 80071de:	4603      	mov	r3, r0
 80071e0:	461a      	mov	r2, r3
 80071e2:	4629      	mov	r1, r5
 80071e4:	4620      	mov	r0, r4
 80071e6:	f7fd fb36 	bl	8004856 <ConnectNetwork>


	    MQTTClientInit(&mqttClient, &network, 1000,send_buffer , sizeof(send_buffer), recieve_buff, sizeof(recieve_buff));
 80071ea:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80071ee:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80071f2:	6818      	ldr	r0, [r3, #0]
 80071f4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80071f8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8007202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007206:	9302      	str	r3, [sp, #8]
 8007208:	4b33      	ldr	r3, [pc, #204]	; (80072d8 <_ZN14MQTTConnection4initE6Config+0x16c>)
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	4b32      	ldr	r3, [pc, #200]	; (80072dc <_ZN14MQTTConnection4initE6Config+0x170>)
 8007214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007218:	f7fc fce2 	bl	8003be0 <MQTTClientInit>

	    if (!connect(config)) {
 800721c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007220:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8007224:	f107 0210 	add.w	r2, r7, #16
 8007228:	6819      	ldr	r1, [r3, #0]
 800722a:	4610      	mov	r0, r2
 800722c:	f7ff faf9 	bl	8006822 <_ZN6ConfigC1ERKS_>
 8007230:	f107 0210 	add.w	r2, r7, #16
 8007234:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007238:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800723c:	4611      	mov	r1, r2
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	f000 f850 	bl	80072e4 <_ZN14MQTTConnection7connectE6Config>
 8007244:	4603      	mov	r3, r0
 8007246:	f083 0301 	eor.w	r3, r3, #1
 800724a:	b2dc      	uxtb	r4, r3
 800724c:	f107 0310 	add.w	r3, r7, #16
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fb6c 	bl	800692e <_ZN6ConfigD1Ev>
 8007256:	2c00      	cmp	r4, #0
 8007258:	d002      	beq.n	8007260 <_ZN14MQTTConnection4initE6Config+0xf4>
	      	Print("MQTT Connection has been failed\r\n");
 800725a:	4821      	ldr	r0, [pc, #132]	; (80072e0 <_ZN14MQTTConnection4initE6Config+0x174>)
 800725c:	f000 fb80 	bl	8007960 <_Z5PrintPKcz>
	      }

	     subscribe(config.getTopicSubscribe().c_str());
 8007260:	f507 7265 	add.w	r2, r7, #916	; 0x394
 8007264:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007268:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800726c:	6819      	ldr	r1, [r3, #0]
 800726e:	4610      	mov	r0, r2
 8007270:	f7ff f985 	bl	800657e <_ZNK6Config17getTopicSubscribeB5cxx11Ev>
 8007274:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8007278:	4618      	mov	r0, r3
 800727a:	f003 fb2a 	bl	800a8d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800727e:	4604      	mov	r4, r0
 8007280:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8007284:	4618      	mov	r0, r3
 8007286:	f003 faa5 	bl	800a7d4 <_ZNSaIcEC1Ev>
 800728a:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 800728e:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8007292:	4621      	mov	r1, r4
 8007294:	4618      	mov	r0, r3
 8007296:	f003 fb77 	bl	800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800729a:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 800729e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80072a2:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80072a6:	4611      	mov	r1, r2
 80072a8:	6818      	ldr	r0, [r3, #0]
 80072aa:	f000 f8d7 	bl	800745c <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80072ae:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80072b2:	4618      	mov	r0, r3
 80072b4:	f003 fb01 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80072b8:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 80072bc:	4618      	mov	r0, r3
 80072be:	f003 fa8a 	bl	800a7d6 <_ZNSaIcED1Ev>
 80072c2:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80072c6:	4618      	mov	r0, r3
 80072c8:	f003 faf7 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80072cc:	bf00      	nop
 80072ce:	f507 776c 	add.w	r7, r7, #944	; 0x3b0
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bdb0      	pop	{r4, r5, r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20004e3c 	.word	0x20004e3c
 80072dc:	2000463c 	.word	0x2000463c
 80072e0:	0800b794 	.word	0x0800b794

080072e4 <_ZN14MQTTConnection7connectE6Config>:

bool MQTTConnection::connect(Config config) {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b0aa      	sub	sp, #168	; 0xa8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
    // Set MQTT connection parameters
    MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 80072ee:	4a34      	ldr	r2, [pc, #208]	; (80073c0 <_ZN14MQTTConnection7connectE6Config+0xdc>)
 80072f0:	f107 0308 	add.w	r3, r7, #8
 80072f4:	4611      	mov	r1, r2
 80072f6:	2258      	movs	r2, #88	; 0x58
 80072f8:	4618      	mov	r0, r3
 80072fa:	f003 fd5f 	bl	800adbc <memcpy>
    connectData.MQTTVersion = 3;
 80072fe:	2303      	movs	r3, #3
 8007300:	743b      	strb	r3, [r7, #16]
    connectData.clientID.cstring = "iot";
 8007302:	4b30      	ldr	r3, [pc, #192]	; (80073c4 <_ZN14MQTTConnection7connectE6Config+0xe0>)
 8007304:	617b      	str	r3, [r7, #20]

    Print("%s \r\n", config.getClientId().c_str());
 8007306:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff f918 	bl	8006542 <_ZNK6Config11getClientIdB5cxx11Ev>
 8007312:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007316:	4618      	mov	r0, r3
 8007318:	f003 fadb 	bl	800a8d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800731c:	4603      	mov	r3, r0
 800731e:	4619      	mov	r1, r3
 8007320:	4829      	ldr	r0, [pc, #164]	; (80073c8 <_ZN14MQTTConnection7connectE6Config+0xe4>)
 8007322:	f000 fb1d 	bl	8007960 <_Z5PrintPKcz>
 8007326:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800732a:	4618      	mov	r0, r3
 800732c:	f003 fac5 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 //   connectData.clientID.cstring = const_cast<char*>(config.getClientId().c_str());
    connectData.username.cstring = const_cast<char*>(config.getUsername().c_str());
 8007330:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff f8f4 	bl	8006524 <_ZNK6Config11getUsernameB5cxx11Ev>
 800733c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007340:	4618      	mov	r0, r3
 8007342:	f003 fac6 	bl	800a8d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007346:	4603      	mov	r3, r0
 8007348:	64bb      	str	r3, [r7, #72]	; 0x48
 800734a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800734e:	4618      	mov	r0, r3
 8007350:	f003 fab3 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    connectData.password.cstring = const_cast<char*>(config.getPassword().c_str());
 8007354:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff f900 	bl	8006560 <_ZNK6Config11getPasswordB5cxx11Ev>
 8007360:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007364:	4618      	mov	r0, r3
 8007366:	f003 fab4 	bl	800a8d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800736a:	4603      	mov	r3, r0
 800736c:	657b      	str	r3, [r7, #84]	; 0x54
 800736e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007372:	4618      	mov	r0, r3
 8007374:	f003 faa1 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    connectData.keepAliveInterval = config.getKeepAliveInterval();
 8007378:	6838      	ldr	r0, [r7, #0]
 800737a:	f7ff f8bb 	bl	80064f4 <_ZNK6Config20getKeepAliveIntervalEv>
 800737e:	4603      	mov	r3, r0
 8007380:	843b      	strh	r3, [r7, #32]
    connectData.cleansession = 1;
 8007382:	2301      	movs	r3, #1
 8007384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    // Attempt to connect to the MQTT broker
    if (MQTTConnect(&mqttClient, &connectData) != SUCCESS) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f107 0208 	add.w	r2, r7, #8
 800738e:	4611      	mov	r1, r2
 8007390:	4618      	mov	r0, r3
 8007392:	f7fc ff4f 	bl	8004234 <MQTTConnect>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	bf14      	ite	ne
 800739c:	2301      	movne	r3, #1
 800739e:	2300      	moveq	r3, #0
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d004      	beq.n	80073b0 <_ZN14MQTTConnection7connectE6Config+0xcc>
        Print("Connection failed!\n");
 80073a6:	4809      	ldr	r0, [pc, #36]	; (80073cc <_ZN14MQTTConnection7connectE6Config+0xe8>)
 80073a8:	f000 fada 	bl	8007960 <_Z5PrintPKcz>
        return false;
 80073ac:	2300      	movs	r3, #0
 80073ae:	e003      	b.n	80073b8 <_ZN14MQTTConnection7connectE6Config+0xd4>
    }

    Print("Successfully connected to MQTT broker.\n");
 80073b0:	4807      	ldr	r0, [pc, #28]	; (80073d0 <_ZN14MQTTConnection7connectE6Config+0xec>)
 80073b2:	f000 fad5 	bl	8007960 <_Z5PrintPKcz>
    return true;
 80073b6:	2301      	movs	r3, #1
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	37a8      	adds	r7, #168	; 0xa8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	0800b800 	.word	0x0800b800
 80073c4:	0800b7b8 	.word	0x0800b7b8
 80073c8:	0800b7bc 	.word	0x0800b7bc
 80073cc:	0800b7c4 	.word	0x0800b7c4
 80073d0:	0800b7d8 	.word	0x0800b7d8

080073d4 <_ZN14MQTTConnection7publishEPc6Config>:

bool MQTTConnection::publish(  char* message, Config config) {
 80073d4:	b590      	push	{r4, r7, lr}
 80073d6:	b08f      	sub	sp, #60	; 0x3c
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
    MQTTMessage mqttMessage;
    mqttMessage.qos = QOS0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	743b      	strb	r3, [r7, #16]
    mqttMessage.retained = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	747b      	strb	r3, [r7, #17]
    mqttMessage.dup = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	74bb      	strb	r3, [r7, #18]
    mqttMessage.payload = (void*)message;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	61bb      	str	r3, [r7, #24]
    mqttMessage.payloadlen = std::strlen(message);
 80073f0:	68b8      	ldr	r0, [r7, #8]
 80073f2:	f7f8 ff3d 	bl	8000270 <strlen>
 80073f6:	4603      	mov	r3, r0
 80073f8:	61fb      	str	r3, [r7, #28]

    // Publish message
    if (MQTTPublish(&mqttClient, config.getTopicPublish().c_str(), &mqttMessage) != SUCCESS) {
 80073fa:	68fc      	ldr	r4, [r7, #12]
 80073fc:	f107 0320 	add.w	r3, r7, #32
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff f8ca 	bl	800659c <_ZNK6Config15getTopicPublishB5cxx11Ev>
 8007408:	f107 0320 	add.w	r3, r7, #32
 800740c:	4618      	mov	r0, r3
 800740e:	f003 fa60 	bl	800a8d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007412:	4601      	mov	r1, r0
 8007414:	f107 0310 	add.w	r3, r7, #16
 8007418:	461a      	mov	r2, r3
 800741a:	4620      	mov	r0, r4
 800741c:	f7fd f839 	bl	8004492 <MQTTPublish>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	bf14      	ite	ne
 8007426:	2301      	movne	r3, #1
 8007428:	2300      	moveq	r3, #0
 800742a:	b2dc      	uxtb	r4, r3
 800742c:	f107 0320 	add.w	r3, r7, #32
 8007430:	4618      	mov	r0, r3
 8007432:	f003 fa42 	bl	800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007436:	2c00      	cmp	r4, #0
 8007438:	d004      	beq.n	8007444 <_ZN14MQTTConnection7publishEPc6Config+0x70>
        Print("Publish failed!\n");
 800743a:	4806      	ldr	r0, [pc, #24]	; (8007454 <_ZN14MQTTConnection7publishEPc6Config+0x80>)
 800743c:	f000 fa90 	bl	8007960 <_Z5PrintPKcz>
        return false;
 8007440:	2300      	movs	r3, #0
 8007442:	e003      	b.n	800744c <_ZN14MQTTConnection7publishEPc6Config+0x78>
    }

    Print("Message published successfully.\n");
 8007444:	4804      	ldr	r0, [pc, #16]	; (8007458 <_ZN14MQTTConnection7publishEPc6Config+0x84>)
 8007446:	f000 fa8b 	bl	8007960 <_Z5PrintPKcz>
    return true;
 800744a:	2301      	movs	r3, #1
}
 800744c:	4618      	mov	r0, r3
 800744e:	373c      	adds	r7, #60	; 0x3c
 8007450:	46bd      	mov	sp, r7
 8007452:	bd90      	pop	{r4, r7, pc}
 8007454:	0800b858 	.word	0x0800b858
 8007458:	0800b86c 	.word	0x0800b86c

0800745c <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void MQTTConnection::subscribe(std::string topic) {
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
    // Subscribe to a topic
 char*	subTopic =  const_cast<char*>(topic.c_str());
 8007466:	6838      	ldr	r0, [r7, #0]
 8007468:	f003 fa33 	bl	800a8d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800746c:	60f8      	str	r0, [r7, #12]
    if (MQTTSubscribe(&mqttClient, "sub", QOS0, handleMessage) != SUCCESS) {
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>)
 8007472:	2200      	movs	r2, #0
 8007474:	490b      	ldr	r1, [pc, #44]	; (80074a4 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>)
 8007476:	f7fc ff63 	bl	8004340 <MQTTSubscribe>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	bf14      	ite	ne
 8007480:	2301      	movne	r3, #1
 8007482:	2300      	moveq	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
        Print("Subscribe failed!\n");
 800748a:	4807      	ldr	r0, [pc, #28]	; (80074a8 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800748c:	f000 fa68 	bl	8007960 <_Z5PrintPKcz>
    } else {
        Print("Subscribed to topic successfully.\n");
    }
}
 8007490:	e002      	b.n	8007498 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
        Print("Subscribed to topic successfully.\n");
 8007492:	4806      	ldr	r0, [pc, #24]	; (80074ac <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 8007494:	f000 fa64 	bl	8007960 <_Z5PrintPKcz>
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	080074b1 	.word	0x080074b1
 80074a4:	0800b890 	.word	0x0800b890
 80074a8:	0800b894 	.word	0x0800b894
 80074ac:	0800b8a8 	.word	0x0800b8a8

080074b0 <_ZN14MQTTConnection13handleMessageEP11MessageData>:

void MQTTConnection::handleMessage(MessageData* data) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
    if (instance) {
 80074b8:	4b06      	ldr	r3, [pc, #24]	; (80074d4 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x24>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <_ZN14MQTTConnection13handleMessageEP11MessageData+0x1c>
        instance->handleIncomingMessage(data);
 80074c0:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x24>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 f806 	bl	80074d8 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData>
    }
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	20004638 	.word	0x20004638

080074d8 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData>:

void MQTTConnection::handleIncomingMessage(MessageData* data) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
    // Handle incoming messages here
    // This method would contain logic similar to your HanldeIncomingMessages function
    Print("Message received on topic.\n");
 80074e2:	4803      	ldr	r0, [pc, #12]	; (80074f0 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x18>)
 80074e4:	f000 fa3c 	bl	8007960 <_Z5PrintPKcz>
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	0800b8cc 	.word	0x0800b8cc

080074f4 <_ZN14MQTTConnectionD1Ev>:

MQTTConnection::~MQTTConnection() {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
    // Clean up resources, if necessary
    disconnect();
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f805 	bl	800750c <_ZN14MQTTConnection10disconnectEv>
}
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <_ZN14MQTTConnection10disconnectEv>:

void MQTTConnection::disconnect() {
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
    // Disconnect from the MQTT broker
    MQTTDisconnect(&mqttClient);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4618      	mov	r0, r3
 8007518:	f7fd f87a 	bl	8004610 <MQTTDisconnect>
    Print("Disconnected from MQTT broker.\n");
 800751c:	4803      	ldr	r0, [pc, #12]	; (800752c <_ZN14MQTTConnection10disconnectEv+0x20>)
 800751e:	f000 fa1f 	bl	8007960 <_Z5PrintPKcz>
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	0800b8e8 	.word	0x0800b8e8

08007530 <_ZN14MQTTConnection9mqttYieldEv>:

void MQTTConnection::mqttYield() {
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
	  MQTTYield(&mqttClient, 60);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	213c      	movs	r1, #60	; 0x3c
 800753c:	4618      	mov	r0, r3
 800753e:	f7fc fe35 	bl	80041ac <MQTTYield>
}
 8007542:	bf00      	nop
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007552:	2300      	movs	r3, #0
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	4b10      	ldr	r3, [pc, #64]	; (8007598 <HAL_MspInit+0x4c>)
 8007558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755a:	4a0f      	ldr	r2, [pc, #60]	; (8007598 <HAL_MspInit+0x4c>)
 800755c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007560:	6453      	str	r3, [r2, #68]	; 0x44
 8007562:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <HAL_MspInit+0x4c>)
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800756a:	607b      	str	r3, [r7, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800756e:	2300      	movs	r3, #0
 8007570:	603b      	str	r3, [r7, #0]
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <HAL_MspInit+0x4c>)
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	4a08      	ldr	r2, [pc, #32]	; (8007598 <HAL_MspInit+0x4c>)
 8007578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800757c:	6413      	str	r3, [r2, #64]	; 0x40
 800757e:	4b06      	ldr	r3, [pc, #24]	; (8007598 <HAL_MspInit+0x4c>)
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40023800 	.word	0x40023800

0800759c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08c      	sub	sp, #48	; 0x30
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075a4:	f107 031c 	add.w	r3, r7, #28
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	605a      	str	r2, [r3, #4]
 80075ae:	609a      	str	r2, [r3, #8]
 80075b0:	60da      	str	r2, [r3, #12]
 80075b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a36      	ldr	r2, [pc, #216]	; (8007694 <HAL_ADC_MspInit+0xf8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d130      	bne.n	8007620 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80075be:	2300      	movs	r3, #0
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	4b35      	ldr	r3, [pc, #212]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 80075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c6:	4a34      	ldr	r2, [pc, #208]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 80075c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075cc:	6453      	str	r3, [r2, #68]	; 0x44
 80075ce:	4b32      	ldr	r3, [pc, #200]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 80075d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d6:	61bb      	str	r3, [r7, #24]
 80075d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	4b2e      	ldr	r3, [pc, #184]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	4a2d      	ldr	r2, [pc, #180]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 80075e4:	f043 0301 	orr.w	r3, r3, #1
 80075e8:	6313      	str	r3, [r2, #48]	; 0x30
 80075ea:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80075f6:	2301      	movs	r3, #1
 80075f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075fa:	2303      	movs	r3, #3
 80075fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007602:	f107 031c 	add.w	r3, r7, #28
 8007606:	4619      	mov	r1, r3
 8007608:	4824      	ldr	r0, [pc, #144]	; (800769c <HAL_ADC_MspInit+0x100>)
 800760a:	f001 f8db 	bl	80087c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800760e:	2200      	movs	r2, #0
 8007610:	2100      	movs	r1, #0
 8007612:	2012      	movs	r0, #18
 8007614:	f001 f89f 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007618:	2012      	movs	r0, #18
 800761a:	f001 f8b8 	bl	800878e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800761e:	e034      	b.n	800768a <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <HAL_ADC_MspInit+0x104>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d12f      	bne.n	800768a <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	4b1a      	ldr	r3, [pc, #104]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 8007630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007632:	4a19      	ldr	r2, [pc, #100]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 8007634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007638:	6453      	str	r3, [r2, #68]	; 0x44
 800763a:	4b17      	ldr	r3, [pc, #92]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 800763c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	4b13      	ldr	r3, [pc, #76]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	4a12      	ldr	r2, [pc, #72]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 8007650:	f043 0301 	orr.w	r3, r3, #1
 8007654:	6313      	str	r3, [r2, #48]	; 0x30
 8007656:	4b10      	ldr	r3, [pc, #64]	; (8007698 <HAL_ADC_MspInit+0xfc>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007662:	2302      	movs	r3, #2
 8007664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007666:	2303      	movs	r3, #3
 8007668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766a:	2300      	movs	r3, #0
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800766e:	f107 031c 	add.w	r3, r7, #28
 8007672:	4619      	mov	r1, r3
 8007674:	4809      	ldr	r0, [pc, #36]	; (800769c <HAL_ADC_MspInit+0x100>)
 8007676:	f001 f8a5 	bl	80087c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800767a:	2200      	movs	r2, #0
 800767c:	2100      	movs	r1, #0
 800767e:	2012      	movs	r0, #18
 8007680:	f001 f869 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007684:	2012      	movs	r0, #18
 8007686:	f001 f882 	bl	800878e <HAL_NVIC_EnableIRQ>
}
 800768a:	bf00      	nop
 800768c:	3730      	adds	r7, #48	; 0x30
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40012000 	.word	0x40012000
 8007698:	40023800 	.word	0x40023800
 800769c:	40020000 	.word	0x40020000
 80076a0:	40012100 	.word	0x40012100

080076a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08a      	sub	sp, #40	; 0x28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	609a      	str	r2, [r3, #8]
 80076b8:	60da      	str	r2, [r3, #12]
 80076ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a19      	ldr	r2, [pc, #100]	; (8007728 <HAL_SPI_MspInit+0x84>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d12c      	bne.n	8007720 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80076c6:	2300      	movs	r3, #0
 80076c8:	613b      	str	r3, [r7, #16]
 80076ca:	4b18      	ldr	r3, [pc, #96]	; (800772c <HAL_SPI_MspInit+0x88>)
 80076cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ce:	4a17      	ldr	r2, [pc, #92]	; (800772c <HAL_SPI_MspInit+0x88>)
 80076d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076d4:	6413      	str	r3, [r2, #64]	; 0x40
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <HAL_SPI_MspInit+0x88>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
 80076e6:	4b11      	ldr	r3, [pc, #68]	; (800772c <HAL_SPI_MspInit+0x88>)
 80076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ea:	4a10      	ldr	r2, [pc, #64]	; (800772c <HAL_SPI_MspInit+0x88>)
 80076ec:	f043 0302 	orr.w	r3, r3, #2
 80076f0:	6313      	str	r3, [r2, #48]	; 0x30
 80076f2:	4b0e      	ldr	r3, [pc, #56]	; (800772c <HAL_SPI_MspInit+0x88>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80076fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007704:	2302      	movs	r3, #2
 8007706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007708:	2300      	movs	r3, #0
 800770a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800770c:	2303      	movs	r3, #3
 800770e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007710:	2305      	movs	r3, #5
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	4619      	mov	r1, r3
 800771a:	4805      	ldr	r0, [pc, #20]	; (8007730 <HAL_SPI_MspInit+0x8c>)
 800771c:	f001 f852 	bl	80087c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007720:	bf00      	nop
 8007722:	3728      	adds	r7, #40	; 0x28
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	40003800 	.word	0x40003800
 800772c:	40023800 	.word	0x40023800
 8007730:	40020400 	.word	0x40020400

08007734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	; 0x28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800773c:	f107 0314 	add.w	r3, r7, #20
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	605a      	str	r2, [r3, #4]
 8007746:	609a      	str	r2, [r3, #8]
 8007748:	60da      	str	r2, [r3, #12]
 800774a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1d      	ldr	r2, [pc, #116]	; (80077c8 <HAL_UART_MspInit+0x94>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d133      	bne.n	80077be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007756:	2300      	movs	r3, #0
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	4b1c      	ldr	r3, [pc, #112]	; (80077cc <HAL_UART_MspInit+0x98>)
 800775c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775e:	4a1b      	ldr	r2, [pc, #108]	; (80077cc <HAL_UART_MspInit+0x98>)
 8007760:	f043 0310 	orr.w	r3, r3, #16
 8007764:	6453      	str	r3, [r2, #68]	; 0x44
 8007766:	4b19      	ldr	r3, [pc, #100]	; (80077cc <HAL_UART_MspInit+0x98>)
 8007768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776a:	f003 0310 	and.w	r3, r3, #16
 800776e:	613b      	str	r3, [r7, #16]
 8007770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007772:	2300      	movs	r3, #0
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	4b15      	ldr	r3, [pc, #84]	; (80077cc <HAL_UART_MspInit+0x98>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	4a14      	ldr	r2, [pc, #80]	; (80077cc <HAL_UART_MspInit+0x98>)
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	6313      	str	r3, [r2, #48]	; 0x30
 8007782:	4b12      	ldr	r3, [pc, #72]	; (80077cc <HAL_UART_MspInit+0x98>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800778e:	23c0      	movs	r3, #192	; 0xc0
 8007790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007792:	2302      	movs	r3, #2
 8007794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007796:	2300      	movs	r3, #0
 8007798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800779a:	2303      	movs	r3, #3
 800779c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800779e:	2307      	movs	r3, #7
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077a2:	f107 0314 	add.w	r3, r7, #20
 80077a6:	4619      	mov	r1, r3
 80077a8:	4809      	ldr	r0, [pc, #36]	; (80077d0 <HAL_UART_MspInit+0x9c>)
 80077aa:	f001 f80b 	bl	80087c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80077ae:	2200      	movs	r2, #0
 80077b0:	2100      	movs	r1, #0
 80077b2:	2025      	movs	r0, #37	; 0x25
 80077b4:	f000 ffcf 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80077b8:	2025      	movs	r0, #37	; 0x25
 80077ba:	f000 ffe8 	bl	800878e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80077be:	bf00      	nop
 80077c0:	3728      	adds	r7, #40	; 0x28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40011000 	.word	0x40011000
 80077cc:	40023800 	.word	0x40023800
 80077d0:	40020400 	.word	0x40020400

080077d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80077d8:	e7fe      	b.n	80077d8 <NMI_Handler+0x4>

080077da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077da:	b480      	push	{r7}
 80077dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077de:	e7fe      	b.n	80077de <HardFault_Handler+0x4>

080077e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077e4:	e7fe      	b.n	80077e4 <MemManage_Handler+0x4>

080077e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077e6:	b480      	push	{r7}
 80077e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077ea:	e7fe      	b.n	80077ea <BusFault_Handler+0x4>

080077ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077f0:	e7fe      	b.n	80077f0 <UsageFault_Handler+0x4>

080077f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077f2:	b480      	push	{r7}
 80077f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077f6:	bf00      	nop
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007804:	bf00      	nop
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800780e:	b480      	push	{r7}
 8007810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007812:	bf00      	nop
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007820:	f000 f94a 	bl	8007ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  MilliTimer_Handler();
 8007824:	f7fc ff26 	bl	8004674 <MilliTimer_Handler>

  static uint16_t milli_count;
   milli_count++;
 8007828:	4b08      	ldr	r3, [pc, #32]	; (800784c <SysTick_Handler+0x30>)
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	4b06      	ldr	r3, [pc, #24]	; (800784c <SysTick_Handler+0x30>)
 8007832:	801a      	strh	r2, [r3, #0]
   if(milli_count==1000)
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <SysTick_Handler+0x30>)
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800783c:	d104      	bne.n	8007848 <SysTick_Handler+0x2c>
   {
   milli_count=0;
 800783e:	4b03      	ldr	r3, [pc, #12]	; (800784c <SysTick_Handler+0x30>)
 8007840:	2200      	movs	r2, #0
 8007842:	801a      	strh	r2, [r3, #0]
   DHCP_time_handler();
 8007844:	f7fa f956 	bl	8001af4 <DHCP_time_handler>
   }

  /* USER CODE END SysTick_IRQn 1 */
}
 8007848:	bf00      	nop
 800784a:	bd80      	pop	{r7, pc}
 800784c:	2000563c 	.word	0x2000563c

08007850 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007854:	4803      	ldr	r0, [pc, #12]	; (8007864 <ADC_IRQHandler+0x14>)
 8007856:	f000 f9b6 	bl	8007bc6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800785a:	4803      	ldr	r0, [pc, #12]	; (8007868 <ADC_IRQHandler+0x18>)
 800785c:	f000 f9b3 	bl	8007bc6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007860:	bf00      	nop
 8007862:	bd80      	pop	{r7, pc}
 8007864:	2000112c 	.word	0x2000112c
 8007868:	20001174 	.word	0x20001174

0800786c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007870:	bf00      	nop
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NetworkStatus_Pin);
 800787e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007882:	f001 f955 	bl	8008b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}

0800788a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800788a:	b480      	push	{r7}
 800788c:	af00      	add	r7, sp, #0
  return 1;
 800788e:	2301      	movs	r3, #1
}
 8007890:	4618      	mov	r0, r3
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <_kill>:

int _kill(int pid, int sig)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80078a4:	f003 fa5e 	bl	800ad64 <__errno>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2216      	movs	r2, #22
 80078ac:	601a      	str	r2, [r3, #0]
  return -1;
 80078ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <_exit>:

void _exit (int status)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80078c2:	f04f 31ff 	mov.w	r1, #4294967295
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff ffe7 	bl	800789a <_kill>
  while (1) {}    /* Make sure we hang here */
 80078cc:	e7fe      	b.n	80078cc <_exit+0x12>
	...

080078d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80078d8:	4a14      	ldr	r2, [pc, #80]	; (800792c <_sbrk+0x5c>)
 80078da:	4b15      	ldr	r3, [pc, #84]	; (8007930 <_sbrk+0x60>)
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078e4:	4b13      	ldr	r3, [pc, #76]	; (8007934 <_sbrk+0x64>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078ec:	4b11      	ldr	r3, [pc, #68]	; (8007934 <_sbrk+0x64>)
 80078ee:	4a12      	ldr	r2, [pc, #72]	; (8007938 <_sbrk+0x68>)
 80078f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078f2:	4b10      	ldr	r3, [pc, #64]	; (8007934 <_sbrk+0x64>)
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4413      	add	r3, r2
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d207      	bcs.n	8007910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007900:	f003 fa30 	bl	800ad64 <__errno>
 8007904:	4603      	mov	r3, r0
 8007906:	220c      	movs	r2, #12
 8007908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800790a:	f04f 33ff 	mov.w	r3, #4294967295
 800790e:	e009      	b.n	8007924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007910:	4b08      	ldr	r3, [pc, #32]	; (8007934 <_sbrk+0x64>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007916:	4b07      	ldr	r3, [pc, #28]	; (8007934 <_sbrk+0x64>)
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4413      	add	r3, r2
 800791e:	4a05      	ldr	r2, [pc, #20]	; (8007934 <_sbrk+0x64>)
 8007920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007922:	68fb      	ldr	r3, [r7, #12]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20020000 	.word	0x20020000
 8007930:	00000400 	.word	0x00000400
 8007934:	20005640 	.word	0x20005640
 8007938:	20005798 	.word	0x20005798

0800793c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007940:	4b06      	ldr	r3, [pc, #24]	; (800795c <SystemInit+0x20>)
 8007942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007946:	4a05      	ldr	r2, [pc, #20]	; (800795c <SystemInit+0x20>)
 8007948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800794c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007950:	bf00      	nop
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	e000ed00 	.word	0xe000ed00

08007960 <_Z5PrintPKcz>:

#include "utils.h"


void Print(const char* fmt, ...) {
 8007960:	b40f      	push	{r0, r1, r2, r3}
 8007962:	b580      	push	{r7, lr}
 8007964:	b0c2      	sub	sp, #264	; 0x108
 8007966:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8007968:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007974:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8007976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800797e:	f107 0008 	add.w	r0, r7, #8
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800798c:	f003 f954 	bl	800ac38 <vsniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 8007990:	f107 0308 	add.w	r3, r7, #8
 8007994:	4618      	mov	r0, r3
 8007996:	f7f8 fc6b 	bl	8000270 <strlen>
 800799a:	4603      	mov	r3, r0
 800799c:	b29a      	uxth	r2, r3
 800799e:	f107 0108 	add.w	r1, r7, #8
 80079a2:	f04f 33ff 	mov.w	r3, #4294967295
 80079a6:	4805      	ldr	r0, [pc, #20]	; (80079bc <_Z5PrintPKcz+0x5c>)
 80079a8:	f002 fb58 	bl	800a05c <HAL_UART_Transmit>
                      HAL_MAX_DELAY);
    va_end(args);
}
 80079ac:	bf00      	nop
 80079ae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80079b2:	46bd      	mov	sp, r7
 80079b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079b8:	b004      	add	sp, #16
 80079ba:	4770      	bx	lr
 80079bc:	20001214 	.word	0x20001214

080079c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80079c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80079f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80079c4:	f7ff ffba 	bl	800793c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80079c8:	480c      	ldr	r0, [pc, #48]	; (80079fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80079ca:	490d      	ldr	r1, [pc, #52]	; (8007a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80079cc:	4a0d      	ldr	r2, [pc, #52]	; (8007a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80079ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80079d0:	e002      	b.n	80079d8 <LoopCopyDataInit>

080079d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80079d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80079d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80079d6:	3304      	adds	r3, #4

080079d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80079d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80079da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80079dc:	d3f9      	bcc.n	80079d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80079de:	4a0a      	ldr	r2, [pc, #40]	; (8007a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80079e0:	4c0a      	ldr	r4, [pc, #40]	; (8007a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80079e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80079e4:	e001      	b.n	80079ea <LoopFillZerobss>

080079e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80079e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079e8:	3204      	adds	r2, #4

080079ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80079ec:	d3fb      	bcc.n	80079e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80079ee:	f003 f9bf 	bl	800ad70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80079f2:	f7fe ffcf 	bl	8006994 <main>
  bx  lr    
 80079f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80079f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80079fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a00:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8007a04:	0800b9b0 	.word	0x0800b9b0
  ldr r2, =_sbss
 8007a08:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8007a0c:	20005794 	.word	0x20005794

08007a10 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a10:	e7fe      	b.n	8007a10 <CAN1_RX0_IRQHandler>
	...

08007a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007a18:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <HAL_Init+0x40>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a0d      	ldr	r2, [pc, #52]	; (8007a54 <HAL_Init+0x40>)
 8007a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a24:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <HAL_Init+0x40>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a0a      	ldr	r2, [pc, #40]	; (8007a54 <HAL_Init+0x40>)
 8007a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a30:	4b08      	ldr	r3, [pc, #32]	; (8007a54 <HAL_Init+0x40>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a07      	ldr	r2, [pc, #28]	; (8007a54 <HAL_Init+0x40>)
 8007a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a3c:	2003      	movs	r0, #3
 8007a3e:	f000 fe7f 	bl	8008740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007a42:	200f      	movs	r0, #15
 8007a44:	f000 f808 	bl	8007a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007a48:	f7ff fd80 	bl	800754c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	40023c00 	.word	0x40023c00

08007a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a60:	4b12      	ldr	r3, [pc, #72]	; (8007aac <HAL_InitTick+0x54>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b12      	ldr	r3, [pc, #72]	; (8007ab0 <HAL_InitTick+0x58>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fe97 	bl	80087aa <HAL_SYSTICK_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e00e      	b.n	8007aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b0f      	cmp	r3, #15
 8007a8a:	d80a      	bhi.n	8007aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
 8007a94:	f000 fe5f 	bl	8008756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a98:	4a06      	ldr	r2, [pc, #24]	; (8007ab4 <HAL_InitTick+0x5c>)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e000      	b.n	8007aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20000048 	.word	0x20000048
 8007ab0:	20000050 	.word	0x20000050
 8007ab4:	2000004c 	.word	0x2000004c

08007ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <HAL_IncTick+0x20>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4b06      	ldr	r3, [pc, #24]	; (8007adc <HAL_IncTick+0x24>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	4a04      	ldr	r2, [pc, #16]	; (8007adc <HAL_IncTick+0x24>)
 8007aca:	6013      	str	r3, [r2, #0]
}
 8007acc:	bf00      	nop
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20000050 	.word	0x20000050
 8007adc:	20005644 	.word	0x20005644

08007ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8007ae4:	4b03      	ldr	r3, [pc, #12]	; (8007af4 <HAL_GetTick+0x14>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20005644 	.word	0x20005644

08007af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b00:	f7ff ffee 	bl	8007ae0 <HAL_GetTick>
 8007b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d005      	beq.n	8007b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b12:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <HAL_Delay+0x44>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007b1e:	bf00      	nop
 8007b20:	f7ff ffde 	bl	8007ae0 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d8f7      	bhi.n	8007b20 <HAL_Delay+0x28>
  {
  }
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000050 	.word	0x20000050

08007b40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e033      	b.n	8007bbe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fd1c 	bl	800759c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	f003 0310 	and.w	r3, r3, #16
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d118      	bne.n	8007bb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007b86:	f023 0302 	bic.w	r3, r3, #2
 8007b8a:	f043 0202 	orr.w	r2, r3, #2
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa68 	bl	8008068 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	f043 0201 	orr.w	r2, r3, #1
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	641a      	str	r2, [r3, #64]	; 0x40
 8007bae:	e001      	b.n	8007bb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b086      	sub	sp, #24
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d049      	beq.n	8007c90 <HAL_ADC_IRQHandler+0xca>
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d046      	beq.n	8007c90 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f003 0310 	and.w	r3, r3, #16
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d105      	bne.n	8007c1a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d12b      	bne.n	8007c80 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d127      	bne.n	8007c80 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d006      	beq.n	8007c4c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d119      	bne.n	8007c80 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0220 	bic.w	r2, r2, #32
 8007c5a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d105      	bne.n	8007c80 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c78:	f043 0201 	orr.w	r2, r3, #1
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f8b0 	bl	8007de6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f06f 0212 	mvn.w	r2, #18
 8007c8e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d057      	beq.n	8007d56 <HAL_ADC_IRQHandler+0x190>
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d054      	beq.n	8007d56 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d105      	bne.n	8007cc4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d139      	bne.n	8007d46 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d006      	beq.n	8007cee <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d12b      	bne.n	8007d46 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d124      	bne.n	8007d46 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d11d      	bne.n	8007d46 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d119      	bne.n	8007d46 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d20:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d105      	bne.n	8007d46 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	f043 0201 	orr.w	r2, r3, #1
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa8a 	bl	8008260 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 020c 	mvn.w	r2, #12
 8007d54:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d64:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d017      	beq.n	8007d9c <HAL_ADC_IRQHandler+0x1d6>
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d014      	beq.n	8007d9c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d10d      	bne.n	8007d9c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f834 	bl	8007dfa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f06f 0201 	mvn.w	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007daa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d015      	beq.n	8007dde <HAL_ADC_IRQHandler+0x218>
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d012      	beq.n	8007dde <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbc:	f043 0202 	orr.w	r2, r3, #2
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f06f 0220 	mvn.w	r2, #32
 8007dcc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f81d 	bl	8007e0e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f06f 0220 	mvn.w	r2, #32
 8007ddc:	601a      	str	r2, [r3, #0]
  }
}
 8007dde:	bf00      	nop
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
	...

08007e24 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_ADC_ConfigChannel+0x1c>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e105      	b.n	800804c <HAL_ADC_ConfigChannel+0x228>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d925      	bls.n	8007e9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68d9      	ldr	r1, [r3, #12]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4613      	mov	r3, r2
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	4413      	add	r3, r2
 8007e64:	3b1e      	subs	r3, #30
 8007e66:	2207      	movs	r2, #7
 8007e68:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6c:	43da      	mvns	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	400a      	ands	r2, r1
 8007e74:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68d9      	ldr	r1, [r3, #12]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	4618      	mov	r0, r3
 8007e88:	4603      	mov	r3, r0
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	4403      	add	r3, r0
 8007e8e:	3b1e      	subs	r3, #30
 8007e90:	409a      	lsls	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	60da      	str	r2, [r3, #12]
 8007e9a:	e022      	b.n	8007ee2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6919      	ldr	r1, [r3, #16]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4613      	mov	r3, r2
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	4413      	add	r3, r2
 8007eb0:	2207      	movs	r2, #7
 8007eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb6:	43da      	mvns	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	400a      	ands	r2, r1
 8007ebe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6919      	ldr	r1, [r3, #16]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	4403      	add	r3, r0
 8007ed8:	409a      	lsls	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b06      	cmp	r3, #6
 8007ee8:	d824      	bhi.n	8007f34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	3b05      	subs	r3, #5
 8007efc:	221f      	movs	r2, #31
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	43da      	mvns	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	400a      	ands	r2, r1
 8007f0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	4618      	mov	r0, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	3b05      	subs	r3, #5
 8007f26:	fa00 f203 	lsl.w	r2, r0, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	635a      	str	r2, [r3, #52]	; 0x34
 8007f32:	e04c      	b.n	8007fce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b0c      	cmp	r3, #12
 8007f3a:	d824      	bhi.n	8007f86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	3b23      	subs	r3, #35	; 0x23
 8007f4e:	221f      	movs	r2, #31
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	43da      	mvns	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	400a      	ands	r2, r1
 8007f5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	3b23      	subs	r3, #35	; 0x23
 8007f78:	fa00 f203 	lsl.w	r2, r0, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30
 8007f84:	e023      	b.n	8007fce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	3b41      	subs	r3, #65	; 0x41
 8007f98:	221f      	movs	r2, #31
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	43da      	mvns	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	400a      	ands	r2, r1
 8007fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3b41      	subs	r3, #65	; 0x41
 8007fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007fce:	4b22      	ldr	r3, [pc, #136]	; (8008058 <HAL_ADC_ConfigChannel+0x234>)
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a21      	ldr	r2, [pc, #132]	; (800805c <HAL_ADC_ConfigChannel+0x238>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d109      	bne.n	8007ff0 <HAL_ADC_ConfigChannel+0x1cc>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b12      	cmp	r3, #18
 8007fe2:	d105      	bne.n	8007ff0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a19      	ldr	r2, [pc, #100]	; (800805c <HAL_ADC_ConfigChannel+0x238>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d123      	bne.n	8008042 <HAL_ADC_ConfigChannel+0x21e>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b10      	cmp	r3, #16
 8008000:	d003      	beq.n	800800a <HAL_ADC_ConfigChannel+0x1e6>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b11      	cmp	r3, #17
 8008008:	d11b      	bne.n	8008042 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b10      	cmp	r3, #16
 800801c:	d111      	bne.n	8008042 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800801e:	4b10      	ldr	r3, [pc, #64]	; (8008060 <HAL_ADC_ConfigChannel+0x23c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a10      	ldr	r2, [pc, #64]	; (8008064 <HAL_ADC_ConfigChannel+0x240>)
 8008024:	fba2 2303 	umull	r2, r3, r2, r3
 8008028:	0c9a      	lsrs	r2, r3, #18
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008034:	e002      	b.n	800803c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3b01      	subs	r3, #1
 800803a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f9      	bne.n	8008036 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	40012300 	.word	0x40012300
 800805c:	40012000 	.word	0x40012000
 8008060:	20000048 	.word	0x20000048
 8008064:	431bde83 	.word	0x431bde83

08008068 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008070:	4b79      	ldr	r3, [pc, #484]	; (8008258 <ADC_Init+0x1f0>)
 8008072:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	431a      	orrs	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800809c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6859      	ldr	r1, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	021a      	lsls	r2, r3, #8
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80080c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6859      	ldr	r1, [r3, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689a      	ldr	r2, [r3, #8]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6899      	ldr	r1, [r3, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fa:	4a58      	ldr	r2, [pc, #352]	; (800825c <ADC_Init+0x1f4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d022      	beq.n	8008146 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689a      	ldr	r2, [r3, #8]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800810e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6899      	ldr	r1, [r3, #8]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6899      	ldr	r1, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	609a      	str	r2, [r3, #8]
 8008144:	e00f      	b.n	8008166 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008164:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0202 	bic.w	r2, r2, #2
 8008174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6899      	ldr	r1, [r3, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7e1b      	ldrb	r3, [r3, #24]
 8008180:	005a      	lsls	r2, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d01b      	beq.n	80081cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80081b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6859      	ldr	r1, [r3, #4]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	3b01      	subs	r3, #1
 80081c0:	035a      	lsls	r2, r3, #13
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	605a      	str	r2, [r3, #4]
 80081ca:	e007      	b.n	80081dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80081ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	051a      	lsls	r2, r3, #20
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6899      	ldr	r1, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800821e:	025a      	lsls	r2, r3, #9
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6899      	ldr	r1, [r3, #8]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	029a      	lsls	r2, r3, #10
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	609a      	str	r2, [r3, #8]
}
 800824c:	bf00      	nop
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40012300 	.word	0x40012300
 800825c:	0f000001 	.word	0x0f000001

08008260 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008284:	2b01      	cmp	r3, #1
 8008286:	d101      	bne.n	800828c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8008288:	2302      	movs	r3, #2
 800828a:	e17d      	b.n	8008588 <HAL_ADCEx_InjectedConfigChannel+0x314>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b09      	cmp	r3, #9
 800829a:	d925      	bls.n	80082e8 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68d9      	ldr	r1, [r3, #12]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	4613      	mov	r3, r2
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	4413      	add	r3, r2
 80082b0:	3b1e      	subs	r3, #30
 80082b2:	2207      	movs	r2, #7
 80082b4:	fa02 f303 	lsl.w	r3, r2, r3
 80082b8:	43da      	mvns	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	400a      	ands	r2, r1
 80082c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68d9      	ldr	r1, [r3, #12]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	4618      	mov	r0, r3
 80082d4:	4603      	mov	r3, r0
 80082d6:	005b      	lsls	r3, r3, #1
 80082d8:	4403      	add	r3, r0
 80082da:	3b1e      	subs	r3, #30
 80082dc:	409a      	lsls	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	e022      	b.n	800832e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6919      	ldr	r1, [r3, #16]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	4613      	mov	r3, r2
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	4413      	add	r3, r2
 80082fc:	2207      	movs	r2, #7
 80082fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008302:	43da      	mvns	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	400a      	ands	r2, r1
 800830a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6919      	ldr	r1, [r3, #16]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	689a      	ldr	r2, [r3, #8]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	4618      	mov	r0, r3
 800831e:	4603      	mov	r3, r0
 8008320:	005b      	lsls	r3, r3, #1
 8008322:	4403      	add	r3, r0
 8008324:	409a      	lsls	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800833c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	3b01      	subs	r3, #1
 800834a:	051a      	lsls	r2, r3, #20
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	b2da      	uxtb	r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	b2db      	uxtb	r3, r3
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	b2db      	uxtb	r3, r3
 800836a:	3303      	adds	r3, #3
 800836c:	b2db      	uxtb	r3, r3
 800836e:	461a      	mov	r2, r3
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	221f      	movs	r2, #31
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	43da      	mvns	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	400a      	ands	r2, r1
 8008384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	4618      	mov	r0, r3
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	b2da      	uxtb	r2, r3
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	3303      	adds	r3, #3
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	461a      	mov	r2, r3
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	fa00 f203 	lsl.w	r2, r0, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	4a74      	ldr	r2, [pc, #464]	; (8008594 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d022      	beq.n	800840c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80083d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6899      	ldr	r1, [r3, #8]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	699a      	ldr	r2, [r3, #24]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80083f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6899      	ldr	r1, [r3, #8]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	69da      	ldr	r2, [r3, #28]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	609a      	str	r2, [r3, #8]
 800840a:	e00f      	b.n	800842c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689a      	ldr	r2, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800841a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800842a:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	7d5b      	ldrb	r3, [r3, #21]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d008      	beq.n	8008446 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008442:	605a      	str	r2, [r3, #4]
 8008444:	e007      	b.n	8008456 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008454:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	7d1b      	ldrb	r3, [r3, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d008      	beq.n	8008470 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	e007      	b.n	8008480 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800847e:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2b03      	cmp	r3, #3
 8008486:	d02e      	beq.n	80084e6 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8008488:	2b03      	cmp	r3, #3
 800848a:	d840      	bhi.n	800850e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800848c:	2b01      	cmp	r3, #1
 800848e:	d002      	beq.n	8008496 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8008490:	2b02      	cmp	r3, #2
 8008492:	d014      	beq.n	80084be <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8008494:	e03b      	b.n	800850e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80084a4:	f023 030f 	bic.w	r3, r3, #15
 80084a8:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6959      	ldr	r1, [r3, #20]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	615a      	str	r2, [r3, #20]
      break;
 80084bc:	e03b      	b.n	8008536 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6812      	ldr	r2, [r2, #0]
 80084c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80084cc:	f023 030f 	bic.w	r3, r3, #15
 80084d0:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6999      	ldr	r1, [r3, #24]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	619a      	str	r2, [r3, #24]
      break;
 80084e4:	e027      	b.n	8008536 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6812      	ldr	r2, [r2, #0]
 80084f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80084f4:	f023 030f 	bic.w	r3, r3, #15
 80084f8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69d9      	ldr	r1, [r3, #28]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	61da      	str	r2, [r3, #28]
      break;
 800850c:	e013      	b.n	8008536 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800851c:	f023 030f 	bic.w	r3, r3, #15
 8008520:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6a19      	ldr	r1, [r3, #32]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	621a      	str	r2, [r3, #32]
      break;
 8008534:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008536:	4b18      	ldr	r3, [pc, #96]	; (8008598 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8008538:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a17      	ldr	r2, [pc, #92]	; (800859c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d109      	bne.n	8008558 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b12      	cmp	r3, #18
 800854a:	d105      	bne.n	8008558 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a0f      	ldr	r2, [pc, #60]	; (800859c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d10d      	bne.n	800857e <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b10      	cmp	r3, #16
 8008568:	d003      	beq.n	8008572 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b11      	cmp	r3, #17
 8008570:	d105      	bne.n	800857e <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	000f0001 	.word	0x000f0001
 8008598:	40012300 	.word	0x40012300
 800859c:	40012000 	.word	0x40012000

080085a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085b0:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <__NVIC_SetPriorityGrouping+0x44>)
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085bc:	4013      	ands	r3, r2
 80085be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085d2:	4a04      	ldr	r2, [pc, #16]	; (80085e4 <__NVIC_SetPriorityGrouping+0x44>)
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	60d3      	str	r3, [r2, #12]
}
 80085d8:	bf00      	nop
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	e000ed00 	.word	0xe000ed00

080085e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085ec:	4b04      	ldr	r3, [pc, #16]	; (8008600 <__NVIC_GetPriorityGrouping+0x18>)
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	0a1b      	lsrs	r3, r3, #8
 80085f2:	f003 0307 	and.w	r3, r3, #7
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	e000ed00 	.word	0xe000ed00

08008604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800860e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008612:	2b00      	cmp	r3, #0
 8008614:	db0b      	blt.n	800862e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	f003 021f 	and.w	r2, r3, #31
 800861c:	4907      	ldr	r1, [pc, #28]	; (800863c <__NVIC_EnableIRQ+0x38>)
 800861e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008622:	095b      	lsrs	r3, r3, #5
 8008624:	2001      	movs	r0, #1
 8008626:	fa00 f202 	lsl.w	r2, r0, r2
 800862a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800862e:	bf00      	nop
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	e000e100 	.word	0xe000e100

08008640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800864c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008650:	2b00      	cmp	r3, #0
 8008652:	db0a      	blt.n	800866a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	b2da      	uxtb	r2, r3
 8008658:	490c      	ldr	r1, [pc, #48]	; (800868c <__NVIC_SetPriority+0x4c>)
 800865a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865e:	0112      	lsls	r2, r2, #4
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	440b      	add	r3, r1
 8008664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008668:	e00a      	b.n	8008680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	4908      	ldr	r1, [pc, #32]	; (8008690 <__NVIC_SetPriority+0x50>)
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	3b04      	subs	r3, #4
 8008678:	0112      	lsls	r2, r2, #4
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	440b      	add	r3, r1
 800867e:	761a      	strb	r2, [r3, #24]
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	e000e100 	.word	0xe000e100
 8008690:	e000ed00 	.word	0xe000ed00

08008694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008694:	b480      	push	{r7}
 8008696:	b089      	sub	sp, #36	; 0x24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	f1c3 0307 	rsb	r3, r3, #7
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	bf28      	it	cs
 80086b2:	2304      	movcs	r3, #4
 80086b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	3304      	adds	r3, #4
 80086ba:	2b06      	cmp	r3, #6
 80086bc:	d902      	bls.n	80086c4 <NVIC_EncodePriority+0x30>
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	3b03      	subs	r3, #3
 80086c2:	e000      	b.n	80086c6 <NVIC_EncodePriority+0x32>
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086c8:	f04f 32ff 	mov.w	r2, #4294967295
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	fa02 f303 	lsl.w	r3, r2, r3
 80086d2:	43da      	mvns	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	401a      	ands	r2, r3
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086dc:	f04f 31ff 	mov.w	r1, #4294967295
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	fa01 f303 	lsl.w	r3, r1, r3
 80086e6:	43d9      	mvns	r1, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086ec:	4313      	orrs	r3, r2
         );
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3724      	adds	r7, #36	; 0x24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
	...

080086fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3b01      	subs	r3, #1
 8008708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800870c:	d301      	bcc.n	8008712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800870e:	2301      	movs	r3, #1
 8008710:	e00f      	b.n	8008732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008712:	4a0a      	ldr	r2, [pc, #40]	; (800873c <SysTick_Config+0x40>)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3b01      	subs	r3, #1
 8008718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800871a:	210f      	movs	r1, #15
 800871c:	f04f 30ff 	mov.w	r0, #4294967295
 8008720:	f7ff ff8e 	bl	8008640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <SysTick_Config+0x40>)
 8008726:	2200      	movs	r2, #0
 8008728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800872a:	4b04      	ldr	r3, [pc, #16]	; (800873c <SysTick_Config+0x40>)
 800872c:	2207      	movs	r2, #7
 800872e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	e000e010 	.word	0xe000e010

08008740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff ff29 	bl	80085a0 <__NVIC_SetPriorityGrouping>
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008756:	b580      	push	{r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	4603      	mov	r3, r0
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	607a      	str	r2, [r7, #4]
 8008762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008764:	2300      	movs	r3, #0
 8008766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008768:	f7ff ff3e 	bl	80085e8 <__NVIC_GetPriorityGrouping>
 800876c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	6978      	ldr	r0, [r7, #20]
 8008774:	f7ff ff8e 	bl	8008694 <NVIC_EncodePriority>
 8008778:	4602      	mov	r2, r0
 800877a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800877e:	4611      	mov	r1, r2
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff ff5d 	bl	8008640 <__NVIC_SetPriority>
}
 8008786:	bf00      	nop
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	4603      	mov	r3, r0
 8008796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800879c:	4618      	mov	r0, r3
 800879e:	f7ff ff31 	bl	8008604 <__NVIC_EnableIRQ>
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff ffa2 	bl	80086fc <SysTick_Config>
 80087b8:	4603      	mov	r3, r0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b089      	sub	sp, #36	; 0x24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087da:	2300      	movs	r3, #0
 80087dc:	61fb      	str	r3, [r7, #28]
 80087de:	e16b      	b.n	8008ab8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80087e0:	2201      	movs	r2, #1
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	fa02 f303 	lsl.w	r3, r2, r3
 80087e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	4013      	ands	r3, r2
 80087f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	f040 815a 	bne.w	8008ab2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	2b01      	cmp	r3, #1
 8008808:	d005      	beq.n	8008816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008812:	2b02      	cmp	r3, #2
 8008814:	d130      	bne.n	8008878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	2203      	movs	r2, #3
 8008822:	fa02 f303 	lsl.w	r3, r2, r3
 8008826:	43db      	mvns	r3, r3
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	4013      	ands	r3, r2
 800882c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	fa02 f303 	lsl.w	r3, r2, r3
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	4313      	orrs	r3, r2
 800883e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800884c:	2201      	movs	r2, #1
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	fa02 f303 	lsl.w	r3, r2, r3
 8008854:	43db      	mvns	r3, r3
 8008856:	69ba      	ldr	r2, [r7, #24]
 8008858:	4013      	ands	r3, r2
 800885a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	091b      	lsrs	r3, r3, #4
 8008862:	f003 0201 	and.w	r2, r3, #1
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	fa02 f303 	lsl.w	r3, r2, r3
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	4313      	orrs	r3, r2
 8008870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	2b03      	cmp	r3, #3
 8008882:	d017      	beq.n	80088b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	2203      	movs	r2, #3
 8008890:	fa02 f303 	lsl.w	r3, r2, r3
 8008894:	43db      	mvns	r3, r3
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	4013      	ands	r3, r2
 800889a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	fa02 f303 	lsl.w	r3, r2, r3
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f003 0303 	and.w	r3, r3, #3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d123      	bne.n	8008908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	08da      	lsrs	r2, r3, #3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3208      	adds	r2, #8
 80088c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	f003 0307 	and.w	r3, r3, #7
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	220f      	movs	r2, #15
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	43db      	mvns	r3, r3
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	4013      	ands	r3, r2
 80088e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	fa02 f303 	lsl.w	r3, r2, r3
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	08da      	lsrs	r2, r3, #3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3208      	adds	r2, #8
 8008902:	69b9      	ldr	r1, [r7, #24]
 8008904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	2203      	movs	r2, #3
 8008914:	fa02 f303 	lsl.w	r3, r2, r3
 8008918:	43db      	mvns	r3, r3
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	4013      	ands	r3, r2
 800891e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f003 0203 	and.w	r2, r3, #3
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	005b      	lsls	r3, r3, #1
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	69ba      	ldr	r2, [r7, #24]
 8008932:	4313      	orrs	r3, r2
 8008934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 80b4 	beq.w	8008ab2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	4b60      	ldr	r3, [pc, #384]	; (8008ad0 <HAL_GPIO_Init+0x30c>)
 8008950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008952:	4a5f      	ldr	r2, [pc, #380]	; (8008ad0 <HAL_GPIO_Init+0x30c>)
 8008954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008958:	6453      	str	r3, [r2, #68]	; 0x44
 800895a:	4b5d      	ldr	r3, [pc, #372]	; (8008ad0 <HAL_GPIO_Init+0x30c>)
 800895c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008966:	4a5b      	ldr	r2, [pc, #364]	; (8008ad4 <HAL_GPIO_Init+0x310>)
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	089b      	lsrs	r3, r3, #2
 800896c:	3302      	adds	r3, #2
 800896e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	220f      	movs	r2, #15
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	43db      	mvns	r3, r3
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	4013      	ands	r3, r2
 8008988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a52      	ldr	r2, [pc, #328]	; (8008ad8 <HAL_GPIO_Init+0x314>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d02b      	beq.n	80089ea <HAL_GPIO_Init+0x226>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a51      	ldr	r2, [pc, #324]	; (8008adc <HAL_GPIO_Init+0x318>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d025      	beq.n	80089e6 <HAL_GPIO_Init+0x222>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a50      	ldr	r2, [pc, #320]	; (8008ae0 <HAL_GPIO_Init+0x31c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d01f      	beq.n	80089e2 <HAL_GPIO_Init+0x21e>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a4f      	ldr	r2, [pc, #316]	; (8008ae4 <HAL_GPIO_Init+0x320>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d019      	beq.n	80089de <HAL_GPIO_Init+0x21a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a4e      	ldr	r2, [pc, #312]	; (8008ae8 <HAL_GPIO_Init+0x324>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d013      	beq.n	80089da <HAL_GPIO_Init+0x216>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a4d      	ldr	r2, [pc, #308]	; (8008aec <HAL_GPIO_Init+0x328>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d00d      	beq.n	80089d6 <HAL_GPIO_Init+0x212>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a4c      	ldr	r2, [pc, #304]	; (8008af0 <HAL_GPIO_Init+0x32c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d007      	beq.n	80089d2 <HAL_GPIO_Init+0x20e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a4b      	ldr	r2, [pc, #300]	; (8008af4 <HAL_GPIO_Init+0x330>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d101      	bne.n	80089ce <HAL_GPIO_Init+0x20a>
 80089ca:	2307      	movs	r3, #7
 80089cc:	e00e      	b.n	80089ec <HAL_GPIO_Init+0x228>
 80089ce:	2308      	movs	r3, #8
 80089d0:	e00c      	b.n	80089ec <HAL_GPIO_Init+0x228>
 80089d2:	2306      	movs	r3, #6
 80089d4:	e00a      	b.n	80089ec <HAL_GPIO_Init+0x228>
 80089d6:	2305      	movs	r3, #5
 80089d8:	e008      	b.n	80089ec <HAL_GPIO_Init+0x228>
 80089da:	2304      	movs	r3, #4
 80089dc:	e006      	b.n	80089ec <HAL_GPIO_Init+0x228>
 80089de:	2303      	movs	r3, #3
 80089e0:	e004      	b.n	80089ec <HAL_GPIO_Init+0x228>
 80089e2:	2302      	movs	r3, #2
 80089e4:	e002      	b.n	80089ec <HAL_GPIO_Init+0x228>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <HAL_GPIO_Init+0x228>
 80089ea:	2300      	movs	r3, #0
 80089ec:	69fa      	ldr	r2, [r7, #28]
 80089ee:	f002 0203 	and.w	r2, r2, #3
 80089f2:	0092      	lsls	r2, r2, #2
 80089f4:	4093      	lsls	r3, r2
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089fc:	4935      	ldr	r1, [pc, #212]	; (8008ad4 <HAL_GPIO_Init+0x310>)
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	089b      	lsrs	r3, r3, #2
 8008a02:	3302      	adds	r3, #2
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a0a:	4b3b      	ldr	r3, [pc, #236]	; (8008af8 <HAL_GPIO_Init+0x334>)
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	43db      	mvns	r3, r3
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	4013      	ands	r3, r2
 8008a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008a2e:	4a32      	ldr	r2, [pc, #200]	; (8008af8 <HAL_GPIO_Init+0x334>)
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a34:	4b30      	ldr	r3, [pc, #192]	; (8008af8 <HAL_GPIO_Init+0x334>)
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	4013      	ands	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008a58:	4a27      	ldr	r2, [pc, #156]	; (8008af8 <HAL_GPIO_Init+0x334>)
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008a5e:	4b26      	ldr	r3, [pc, #152]	; (8008af8 <HAL_GPIO_Init+0x334>)
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	43db      	mvns	r3, r3
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008a82:	4a1d      	ldr	r2, [pc, #116]	; (8008af8 <HAL_GPIO_Init+0x334>)
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a88:	4b1b      	ldr	r3, [pc, #108]	; (8008af8 <HAL_GPIO_Init+0x334>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	43db      	mvns	r3, r3
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	4013      	ands	r3, r2
 8008a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008aac:	4a12      	ldr	r2, [pc, #72]	; (8008af8 <HAL_GPIO_Init+0x334>)
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	61fb      	str	r3, [r7, #28]
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	f67f ae90 	bls.w	80087e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	3724      	adds	r7, #36	; 0x24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40023800 	.word	0x40023800
 8008ad4:	40013800 	.word	0x40013800
 8008ad8:	40020000 	.word	0x40020000
 8008adc:	40020400 	.word	0x40020400
 8008ae0:	40020800 	.word	0x40020800
 8008ae4:	40020c00 	.word	0x40020c00
 8008ae8:	40021000 	.word	0x40021000
 8008aec:	40021400 	.word	0x40021400
 8008af0:	40021800 	.word	0x40021800
 8008af4:	40021c00 	.word	0x40021c00
 8008af8:	40013c00 	.word	0x40013c00

08008afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	807b      	strh	r3, [r7, #2]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b0c:	787b      	ldrb	r3, [r7, #1]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b12:	887a      	ldrh	r2, [r7, #2]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008b18:	e003      	b.n	8008b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008b1a:	887b      	ldrh	r3, [r7, #2]
 8008b1c:	041a      	lsls	r2, r3, #16
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	619a      	str	r2, [r3, #24]
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
	...

08008b30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008b3a:	4b08      	ldr	r3, [pc, #32]	; (8008b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b3c:	695a      	ldr	r2, [r3, #20]
 8008b3e:	88fb      	ldrh	r3, [r7, #6]
 8008b40:	4013      	ands	r3, r2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d006      	beq.n	8008b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b46:	4a05      	ldr	r2, [pc, #20]	; (8008b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b48:	88fb      	ldrh	r3, [r7, #6]
 8008b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b4c:	88fb      	ldrh	r3, [r7, #6]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fa96 	bl	8007080 <HAL_GPIO_EXTI_Callback>
  }
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	40013c00 	.word	0x40013c00

08008b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e267      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d075      	beq.n	8008c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b7e:	4b88      	ldr	r3, [pc, #544]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 030c 	and.w	r3, r3, #12
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	d00c      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b8a:	4b85      	ldr	r3, [pc, #532]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d112      	bne.n	8008bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b96:	4b82      	ldr	r3, [pc, #520]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ba2:	d10b      	bne.n	8008bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ba4:	4b7e      	ldr	r3, [pc, #504]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d05b      	beq.n	8008c68 <HAL_RCC_OscConfig+0x108>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d157      	bne.n	8008c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e242      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc4:	d106      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x74>
 8008bc6:	4b76      	ldr	r3, [pc, #472]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a75      	ldr	r2, [pc, #468]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	e01d      	b.n	8008c10 <HAL_RCC_OscConfig+0xb0>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bdc:	d10c      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x98>
 8008bde:	4b70      	ldr	r3, [pc, #448]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a6f      	ldr	r2, [pc, #444]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	4b6d      	ldr	r3, [pc, #436]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a6c      	ldr	r2, [pc, #432]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	e00b      	b.n	8008c10 <HAL_RCC_OscConfig+0xb0>
 8008bf8:	4b69      	ldr	r3, [pc, #420]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a68      	ldr	r2, [pc, #416]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	4b66      	ldr	r3, [pc, #408]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a65      	ldr	r2, [pc, #404]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d013      	beq.n	8008c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c18:	f7fe ff62 	bl	8007ae0 <HAL_GetTick>
 8008c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c1e:	e008      	b.n	8008c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c20:	f7fe ff5e 	bl	8007ae0 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	2b64      	cmp	r3, #100	; 0x64
 8008c2c:	d901      	bls.n	8008c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e207      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c32:	4b5b      	ldr	r3, [pc, #364]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d0f0      	beq.n	8008c20 <HAL_RCC_OscConfig+0xc0>
 8008c3e:	e014      	b.n	8008c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c40:	f7fe ff4e 	bl	8007ae0 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c48:	f7fe ff4a 	bl	8007ae0 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b64      	cmp	r3, #100	; 0x64
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e1f3      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c5a:	4b51      	ldr	r3, [pc, #324]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1f0      	bne.n	8008c48 <HAL_RCC_OscConfig+0xe8>
 8008c66:	e000      	b.n	8008c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d063      	beq.n	8008d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c76:	4b4a      	ldr	r3, [pc, #296]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 030c 	and.w	r3, r3, #12
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c82:	4b47      	ldr	r3, [pc, #284]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c8a:	2b08      	cmp	r3, #8
 8008c8c:	d11c      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c8e:	4b44      	ldr	r3, [pc, #272]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d116      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c9a:	4b41      	ldr	r3, [pc, #260]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x152>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d001      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e1c7      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cb2:	4b3b      	ldr	r3, [pc, #236]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	4937      	ldr	r1, [pc, #220]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cc6:	e03a      	b.n	8008d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d020      	beq.n	8008d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cd0:	4b34      	ldr	r3, [pc, #208]	; (8008da4 <HAL_RCC_OscConfig+0x244>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd6:	f7fe ff03 	bl	8007ae0 <HAL_GetTick>
 8008cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cdc:	e008      	b.n	8008cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cde:	f7fe feff 	bl	8007ae0 <HAL_GetTick>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d901      	bls.n	8008cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e1a8      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cf0:	4b2b      	ldr	r3, [pc, #172]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0f0      	beq.n	8008cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cfc:	4b28      	ldr	r3, [pc, #160]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	4925      	ldr	r1, [pc, #148]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	600b      	str	r3, [r1, #0]
 8008d10:	e015      	b.n	8008d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d12:	4b24      	ldr	r3, [pc, #144]	; (8008da4 <HAL_RCC_OscConfig+0x244>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d18:	f7fe fee2 	bl	8007ae0 <HAL_GetTick>
 8008d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d1e:	e008      	b.n	8008d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d20:	f7fe fede 	bl	8007ae0 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d901      	bls.n	8008d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e187      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d32:	4b1b      	ldr	r3, [pc, #108]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1f0      	bne.n	8008d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0308 	and.w	r3, r3, #8
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d036      	beq.n	8008db8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d016      	beq.n	8008d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d52:	4b15      	ldr	r3, [pc, #84]	; (8008da8 <HAL_RCC_OscConfig+0x248>)
 8008d54:	2201      	movs	r2, #1
 8008d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d58:	f7fe fec2 	bl	8007ae0 <HAL_GetTick>
 8008d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d5e:	e008      	b.n	8008d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d60:	f7fe febe 	bl	8007ae0 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d901      	bls.n	8008d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e167      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d72:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0f0      	beq.n	8008d60 <HAL_RCC_OscConfig+0x200>
 8008d7e:	e01b      	b.n	8008db8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d80:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <HAL_RCC_OscConfig+0x248>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d86:	f7fe feab 	bl	8007ae0 <HAL_GetTick>
 8008d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d8c:	e00e      	b.n	8008dac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d8e:	f7fe fea7 	bl	8007ae0 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d907      	bls.n	8008dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e150      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
 8008da0:	40023800 	.word	0x40023800
 8008da4:	42470000 	.word	0x42470000
 8008da8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dac:	4b88      	ldr	r3, [pc, #544]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1ea      	bne.n	8008d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0304 	and.w	r3, r3, #4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 8097 	beq.w	8008ef4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dca:	4b81      	ldr	r3, [pc, #516]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10f      	bne.n	8008df6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	4b7d      	ldr	r3, [pc, #500]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	4a7c      	ldr	r2, [pc, #496]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de4:	6413      	str	r3, [r2, #64]	; 0x40
 8008de6:	4b7a      	ldr	r3, [pc, #488]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dee:	60bb      	str	r3, [r7, #8]
 8008df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008df2:	2301      	movs	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df6:	4b77      	ldr	r3, [pc, #476]	; (8008fd4 <HAL_RCC_OscConfig+0x474>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d118      	bne.n	8008e34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e02:	4b74      	ldr	r3, [pc, #464]	; (8008fd4 <HAL_RCC_OscConfig+0x474>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a73      	ldr	r2, [pc, #460]	; (8008fd4 <HAL_RCC_OscConfig+0x474>)
 8008e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e0e:	f7fe fe67 	bl	8007ae0 <HAL_GetTick>
 8008e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e14:	e008      	b.n	8008e28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e16:	f7fe fe63 	bl	8007ae0 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d901      	bls.n	8008e28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e10c      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e28:	4b6a      	ldr	r3, [pc, #424]	; (8008fd4 <HAL_RCC_OscConfig+0x474>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0f0      	beq.n	8008e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d106      	bne.n	8008e4a <HAL_RCC_OscConfig+0x2ea>
 8008e3c:	4b64      	ldr	r3, [pc, #400]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e40:	4a63      	ldr	r2, [pc, #396]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e42:	f043 0301 	orr.w	r3, r3, #1
 8008e46:	6713      	str	r3, [r2, #112]	; 0x70
 8008e48:	e01c      	b.n	8008e84 <HAL_RCC_OscConfig+0x324>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	d10c      	bne.n	8008e6c <HAL_RCC_OscConfig+0x30c>
 8008e52:	4b5f      	ldr	r3, [pc, #380]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e56:	4a5e      	ldr	r2, [pc, #376]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e58:	f043 0304 	orr.w	r3, r3, #4
 8008e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e5e:	4b5c      	ldr	r3, [pc, #368]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e62:	4a5b      	ldr	r2, [pc, #364]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e64:	f043 0301 	orr.w	r3, r3, #1
 8008e68:	6713      	str	r3, [r2, #112]	; 0x70
 8008e6a:	e00b      	b.n	8008e84 <HAL_RCC_OscConfig+0x324>
 8008e6c:	4b58      	ldr	r3, [pc, #352]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e70:	4a57      	ldr	r2, [pc, #348]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e72:	f023 0301 	bic.w	r3, r3, #1
 8008e76:	6713      	str	r3, [r2, #112]	; 0x70
 8008e78:	4b55      	ldr	r3, [pc, #340]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e7c:	4a54      	ldr	r2, [pc, #336]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e7e:	f023 0304 	bic.w	r3, r3, #4
 8008e82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d015      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e8c:	f7fe fe28 	bl	8007ae0 <HAL_GetTick>
 8008e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e92:	e00a      	b.n	8008eaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e94:	f7fe fe24 	bl	8007ae0 <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e0cb      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eaa:	4b49      	ldr	r3, [pc, #292]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0ee      	beq.n	8008e94 <HAL_RCC_OscConfig+0x334>
 8008eb6:	e014      	b.n	8008ee2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008eb8:	f7fe fe12 	bl	8007ae0 <HAL_GetTick>
 8008ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ebe:	e00a      	b.n	8008ed6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ec0:	f7fe fe0e 	bl	8007ae0 <HAL_GetTick>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e0b5      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ed6:	4b3e      	ldr	r3, [pc, #248]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1ee      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d105      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ee8:	4b39      	ldr	r3, [pc, #228]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eec:	4a38      	ldr	r2, [pc, #224]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ef2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 80a1 	beq.w	8009040 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008efe:	4b34      	ldr	r3, [pc, #208]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f003 030c 	and.w	r3, r3, #12
 8008f06:	2b08      	cmp	r3, #8
 8008f08:	d05c      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d141      	bne.n	8008f96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f12:	4b31      	ldr	r3, [pc, #196]	; (8008fd8 <HAL_RCC_OscConfig+0x478>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f18:	f7fe fde2 	bl	8007ae0 <HAL_GetTick>
 8008f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f20:	f7fe fdde 	bl	8007ae0 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e087      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f32:	4b27      	ldr	r3, [pc, #156]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f0      	bne.n	8008f20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	69da      	ldr	r2, [r3, #28]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	019b      	lsls	r3, r3, #6
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f54:	085b      	lsrs	r3, r3, #1
 8008f56:	3b01      	subs	r3, #1
 8008f58:	041b      	lsls	r3, r3, #16
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	061b      	lsls	r3, r3, #24
 8008f62:	491b      	ldr	r1, [pc, #108]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f68:	4b1b      	ldr	r3, [pc, #108]	; (8008fd8 <HAL_RCC_OscConfig+0x478>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f6e:	f7fe fdb7 	bl	8007ae0 <HAL_GetTick>
 8008f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f74:	e008      	b.n	8008f88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f76:	f7fe fdb3 	bl	8007ae0 <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d901      	bls.n	8008f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e05c      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f88:	4b11      	ldr	r3, [pc, #68]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0f0      	beq.n	8008f76 <HAL_RCC_OscConfig+0x416>
 8008f94:	e054      	b.n	8009040 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f96:	4b10      	ldr	r3, [pc, #64]	; (8008fd8 <HAL_RCC_OscConfig+0x478>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f9c:	f7fe fda0 	bl	8007ae0 <HAL_GetTick>
 8008fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fa2:	e008      	b.n	8008fb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fa4:	f7fe fd9c 	bl	8007ae0 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e045      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb6:	4b06      	ldr	r3, [pc, #24]	; (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1f0      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x444>
 8008fc2:	e03d      	b.n	8009040 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d107      	bne.n	8008fdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e038      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
 8008fd0:	40023800 	.word	0x40023800
 8008fd4:	40007000 	.word	0x40007000
 8008fd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fdc:	4b1b      	ldr	r3, [pc, #108]	; (800904c <HAL_RCC_OscConfig+0x4ec>)
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d028      	beq.n	800903c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d121      	bne.n	800903c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009002:	429a      	cmp	r2, r3
 8009004:	d11a      	bne.n	800903c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800900c:	4013      	ands	r3, r2
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009012:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009014:	4293      	cmp	r3, r2
 8009016:	d111      	bne.n	800903c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	085b      	lsrs	r3, r3, #1
 8009024:	3b01      	subs	r3, #1
 8009026:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009028:	429a      	cmp	r2, r3
 800902a:	d107      	bne.n	800903c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009038:	429a      	cmp	r2, r3
 800903a:	d001      	beq.n	8009040 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e000      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3718      	adds	r7, #24
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	40023800 	.word	0x40023800

08009050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e0cc      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009064:	4b68      	ldr	r3, [pc, #416]	; (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0307 	and.w	r3, r3, #7
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d90c      	bls.n	800908c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009072:	4b65      	ldr	r3, [pc, #404]	; (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800907a:	4b63      	ldr	r3, [pc, #396]	; (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d001      	beq.n	800908c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e0b8      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b00      	cmp	r3, #0
 8009096:	d020      	beq.n	80090da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0304 	and.w	r3, r3, #4
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090a4:	4b59      	ldr	r3, [pc, #356]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	4a58      	ldr	r2, [pc, #352]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0308 	and.w	r3, r3, #8
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090bc:	4b53      	ldr	r3, [pc, #332]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	4a52      	ldr	r2, [pc, #328]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090c8:	4b50      	ldr	r3, [pc, #320]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	494d      	ldr	r1, [pc, #308]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d044      	beq.n	8009170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d107      	bne.n	80090fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ee:	4b47      	ldr	r3, [pc, #284]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d119      	bne.n	800912e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e07f      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	2b02      	cmp	r3, #2
 8009104:	d003      	beq.n	800910e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800910a:	2b03      	cmp	r3, #3
 800910c:	d107      	bne.n	800911e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800910e:	4b3f      	ldr	r3, [pc, #252]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d109      	bne.n	800912e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e06f      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800911e:	4b3b      	ldr	r3, [pc, #236]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e067      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800912e:	4b37      	ldr	r3, [pc, #220]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f023 0203 	bic.w	r2, r3, #3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	4934      	ldr	r1, [pc, #208]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 800913c:	4313      	orrs	r3, r2
 800913e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009140:	f7fe fcce 	bl	8007ae0 <HAL_GetTick>
 8009144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009146:	e00a      	b.n	800915e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009148:	f7fe fcca 	bl	8007ae0 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	f241 3288 	movw	r2, #5000	; 0x1388
 8009156:	4293      	cmp	r3, r2
 8009158:	d901      	bls.n	800915e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e04f      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800915e:	4b2b      	ldr	r3, [pc, #172]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f003 020c 	and.w	r2, r3, #12
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	429a      	cmp	r2, r3
 800916e:	d1eb      	bne.n	8009148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009170:	4b25      	ldr	r3, [pc, #148]	; (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0307 	and.w	r3, r3, #7
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d20c      	bcs.n	8009198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800917e:	4b22      	ldr	r3, [pc, #136]	; (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	b2d2      	uxtb	r2, r2
 8009184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009186:	4b20      	ldr	r3, [pc, #128]	; (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	429a      	cmp	r2, r3
 8009192:	d001      	beq.n	8009198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e032      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d008      	beq.n	80091b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091a4:	4b19      	ldr	r3, [pc, #100]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	4916      	ldr	r1, [pc, #88]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0308 	and.w	r3, r3, #8
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d009      	beq.n	80091d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091c2:	4b12      	ldr	r3, [pc, #72]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	490e      	ldr	r1, [pc, #56]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091d6:	f000 f821 	bl	800921c <HAL_RCC_GetSysClockFreq>
 80091da:	4602      	mov	r2, r0
 80091dc:	4b0b      	ldr	r3, [pc, #44]	; (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	091b      	lsrs	r3, r3, #4
 80091e2:	f003 030f 	and.w	r3, r3, #15
 80091e6:	490a      	ldr	r1, [pc, #40]	; (8009210 <HAL_RCC_ClockConfig+0x1c0>)
 80091e8:	5ccb      	ldrb	r3, [r1, r3]
 80091ea:	fa22 f303 	lsr.w	r3, r2, r3
 80091ee:	4a09      	ldr	r2, [pc, #36]	; (8009214 <HAL_RCC_ClockConfig+0x1c4>)
 80091f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091f2:	4b09      	ldr	r3, [pc, #36]	; (8009218 <HAL_RCC_ClockConfig+0x1c8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fc2e 	bl	8007a58 <HAL_InitTick>

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	40023c00 	.word	0x40023c00
 800920c:	40023800 	.word	0x40023800
 8009210:	0800b908 	.word	0x0800b908
 8009214:	20000048 	.word	0x20000048
 8009218:	2000004c 	.word	0x2000004c

0800921c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800921c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009220:	b090      	sub	sp, #64	; 0x40
 8009222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	637b      	str	r3, [r7, #52]	; 0x34
 8009228:	2300      	movs	r3, #0
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800922c:	2300      	movs	r3, #0
 800922e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009234:	4b59      	ldr	r3, [pc, #356]	; (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f003 030c 	and.w	r3, r3, #12
 800923c:	2b08      	cmp	r3, #8
 800923e:	d00d      	beq.n	800925c <HAL_RCC_GetSysClockFreq+0x40>
 8009240:	2b08      	cmp	r3, #8
 8009242:	f200 80a1 	bhi.w	8009388 <HAL_RCC_GetSysClockFreq+0x16c>
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <HAL_RCC_GetSysClockFreq+0x34>
 800924a:	2b04      	cmp	r3, #4
 800924c:	d003      	beq.n	8009256 <HAL_RCC_GetSysClockFreq+0x3a>
 800924e:	e09b      	b.n	8009388 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009250:	4b53      	ldr	r3, [pc, #332]	; (80093a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8009252:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009254:	e09b      	b.n	800938e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009256:	4b53      	ldr	r3, [pc, #332]	; (80093a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009258:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800925a:	e098      	b.n	800938e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800925c:	4b4f      	ldr	r3, [pc, #316]	; (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009264:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009266:	4b4d      	ldr	r3, [pc, #308]	; (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d028      	beq.n	80092c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009272:	4b4a      	ldr	r3, [pc, #296]	; (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	099b      	lsrs	r3, r3, #6
 8009278:	2200      	movs	r2, #0
 800927a:	623b      	str	r3, [r7, #32]
 800927c:	627a      	str	r2, [r7, #36]	; 0x24
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009284:	2100      	movs	r1, #0
 8009286:	4b47      	ldr	r3, [pc, #284]	; (80093a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009288:	fb03 f201 	mul.w	r2, r3, r1
 800928c:	2300      	movs	r3, #0
 800928e:	fb00 f303 	mul.w	r3, r0, r3
 8009292:	4413      	add	r3, r2
 8009294:	4a43      	ldr	r2, [pc, #268]	; (80093a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009296:	fba0 1202 	umull	r1, r2, r0, r2
 800929a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800929c:	460a      	mov	r2, r1
 800929e:	62ba      	str	r2, [r7, #40]	; 0x28
 80092a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092a2:	4413      	add	r3, r2
 80092a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a8:	2200      	movs	r2, #0
 80092aa:	61bb      	str	r3, [r7, #24]
 80092ac:	61fa      	str	r2, [r7, #28]
 80092ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80092b6:	f7f6 ffe3 	bl	8000280 <__aeabi_uldivmod>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4613      	mov	r3, r2
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092c2:	e053      	b.n	800936c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092c4:	4b35      	ldr	r3, [pc, #212]	; (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	099b      	lsrs	r3, r3, #6
 80092ca:	2200      	movs	r2, #0
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	617a      	str	r2, [r7, #20]
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80092d6:	f04f 0b00 	mov.w	fp, #0
 80092da:	4652      	mov	r2, sl
 80092dc:	465b      	mov	r3, fp
 80092de:	f04f 0000 	mov.w	r0, #0
 80092e2:	f04f 0100 	mov.w	r1, #0
 80092e6:	0159      	lsls	r1, r3, #5
 80092e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092ec:	0150      	lsls	r0, r2, #5
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	ebb2 080a 	subs.w	r8, r2, sl
 80092f6:	eb63 090b 	sbc.w	r9, r3, fp
 80092fa:	f04f 0200 	mov.w	r2, #0
 80092fe:	f04f 0300 	mov.w	r3, #0
 8009302:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009306:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800930a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800930e:	ebb2 0408 	subs.w	r4, r2, r8
 8009312:	eb63 0509 	sbc.w	r5, r3, r9
 8009316:	f04f 0200 	mov.w	r2, #0
 800931a:	f04f 0300 	mov.w	r3, #0
 800931e:	00eb      	lsls	r3, r5, #3
 8009320:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009324:	00e2      	lsls	r2, r4, #3
 8009326:	4614      	mov	r4, r2
 8009328:	461d      	mov	r5, r3
 800932a:	eb14 030a 	adds.w	r3, r4, sl
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	eb45 030b 	adc.w	r3, r5, fp
 8009334:	607b      	str	r3, [r7, #4]
 8009336:	f04f 0200 	mov.w	r2, #0
 800933a:	f04f 0300 	mov.w	r3, #0
 800933e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009342:	4629      	mov	r1, r5
 8009344:	028b      	lsls	r3, r1, #10
 8009346:	4621      	mov	r1, r4
 8009348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800934c:	4621      	mov	r1, r4
 800934e:	028a      	lsls	r2, r1, #10
 8009350:	4610      	mov	r0, r2
 8009352:	4619      	mov	r1, r3
 8009354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009356:	2200      	movs	r2, #0
 8009358:	60bb      	str	r3, [r7, #8]
 800935a:	60fa      	str	r2, [r7, #12]
 800935c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009360:	f7f6 ff8e 	bl	8000280 <__aeabi_uldivmod>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4613      	mov	r3, r2
 800936a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800936c:	4b0b      	ldr	r3, [pc, #44]	; (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	0c1b      	lsrs	r3, r3, #16
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	3301      	adds	r3, #1
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800937c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	fbb2 f3f3 	udiv	r3, r2, r3
 8009384:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009386:	e002      	b.n	800938e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009388:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800938a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800938c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009390:	4618      	mov	r0, r3
 8009392:	3740      	adds	r7, #64	; 0x40
 8009394:	46bd      	mov	sp, r7
 8009396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800939a:	bf00      	nop
 800939c:	40023800 	.word	0x40023800
 80093a0:	00f42400 	.word	0x00f42400
 80093a4:	017d7840 	.word	0x017d7840

080093a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093a8:	b480      	push	{r7}
 80093aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093ac:	4b03      	ldr	r3, [pc, #12]	; (80093bc <HAL_RCC_GetHCLKFreq+0x14>)
 80093ae:	681b      	ldr	r3, [r3, #0]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20000048 	.word	0x20000048

080093c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093c4:	f7ff fff0 	bl	80093a8 <HAL_RCC_GetHCLKFreq>
 80093c8:	4602      	mov	r2, r0
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	0a9b      	lsrs	r3, r3, #10
 80093d0:	f003 0307 	and.w	r3, r3, #7
 80093d4:	4903      	ldr	r1, [pc, #12]	; (80093e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093d6:	5ccb      	ldrb	r3, [r1, r3]
 80093d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093dc:	4618      	mov	r0, r3
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40023800 	.word	0x40023800
 80093e4:	0800b918 	.word	0x0800b918

080093e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093ec:	f7ff ffdc 	bl	80093a8 <HAL_RCC_GetHCLKFreq>
 80093f0:	4602      	mov	r2, r0
 80093f2:	4b05      	ldr	r3, [pc, #20]	; (8009408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	0b5b      	lsrs	r3, r3, #13
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	4903      	ldr	r1, [pc, #12]	; (800940c <HAL_RCC_GetPCLK2Freq+0x24>)
 80093fe:	5ccb      	ldrb	r3, [r1, r3]
 8009400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009404:	4618      	mov	r0, r3
 8009406:	bd80      	pop	{r7, pc}
 8009408:	40023800 	.word	0x40023800
 800940c:	0800b918 	.word	0x0800b918

08009410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e07b      	b.n	800951a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	2b00      	cmp	r3, #0
 8009428:	d108      	bne.n	800943c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009432:	d009      	beq.n	8009448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	61da      	str	r2, [r3, #28]
 800943a:	e005      	b.n	8009448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7fe f91e 	bl	80076a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800947e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009490:	431a      	orrs	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094b8:	431a      	orrs	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094c2:	431a      	orrs	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094cc:	ea42 0103 	orr.w	r1, r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	0c1b      	lsrs	r3, r3, #16
 80094e6:	f003 0104 	and.w	r1, r3, #4
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	f003 0210 	and.w	r2, r3, #16
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69da      	ldr	r2, [r3, #28]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b088      	sub	sp, #32
 8009526:	af00      	add	r7, sp, #0
 8009528:	60f8      	str	r0, [r7, #12]
 800952a:	60b9      	str	r1, [r7, #8]
 800952c:	603b      	str	r3, [r7, #0]
 800952e:	4613      	mov	r3, r2
 8009530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800953c:	2b01      	cmp	r3, #1
 800953e:	d101      	bne.n	8009544 <HAL_SPI_Transmit+0x22>
 8009540:	2302      	movs	r3, #2
 8009542:	e12d      	b.n	80097a0 <HAL_SPI_Transmit+0x27e>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800954c:	f7fe fac8 	bl	8007ae0 <HAL_GetTick>
 8009550:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b01      	cmp	r3, #1
 8009560:	d002      	beq.n	8009568 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009562:	2302      	movs	r3, #2
 8009564:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009566:	e116      	b.n	8009796 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <HAL_SPI_Transmit+0x52>
 800956e:	88fb      	ldrh	r3, [r7, #6]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d102      	bne.n	800957a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009578:	e10d      	b.n	8009796 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2203      	movs	r2, #3
 800957e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	88fa      	ldrh	r2, [r7, #6]
 8009592:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	88fa      	ldrh	r2, [r7, #6]
 8009598:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c0:	d10f      	bne.n	80095e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ec:	2b40      	cmp	r3, #64	; 0x40
 80095ee:	d007      	beq.n	8009600 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009608:	d14f      	bne.n	80096aa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <HAL_SPI_Transmit+0xf6>
 8009612:	8afb      	ldrh	r3, [r7, #22]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d142      	bne.n	800969e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961c:	881a      	ldrh	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	1c9a      	adds	r2, r3, #2
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009632:	b29b      	uxth	r3, r3
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800963c:	e02f      	b.n	800969e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f003 0302 	and.w	r3, r3, #2
 8009648:	2b02      	cmp	r3, #2
 800964a:	d112      	bne.n	8009672 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009650:	881a      	ldrh	r2, [r3, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965c:	1c9a      	adds	r2, r3, #2
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009666:	b29b      	uxth	r3, r3
 8009668:	3b01      	subs	r3, #1
 800966a:	b29a      	uxth	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009670:	e015      	b.n	800969e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009672:	f7fe fa35 	bl	8007ae0 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d803      	bhi.n	800968a <HAL_SPI_Transmit+0x168>
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009688:	d102      	bne.n	8009690 <HAL_SPI_Transmit+0x16e>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d106      	bne.n	800969e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800969c:	e07b      	b.n	8009796 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1ca      	bne.n	800963e <HAL_SPI_Transmit+0x11c>
 80096a8:	e050      	b.n	800974c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <HAL_SPI_Transmit+0x196>
 80096b2:	8afb      	ldrh	r3, [r7, #22]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d144      	bne.n	8009742 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	330c      	adds	r3, #12
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80096de:	e030      	b.n	8009742 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f003 0302 	and.w	r3, r3, #2
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d113      	bne.n	8009716 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	330c      	adds	r3, #12
 80096f8:	7812      	ldrb	r2, [r2, #0]
 80096fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800970a:	b29b      	uxth	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	86da      	strh	r2, [r3, #54]	; 0x36
 8009714:	e015      	b.n	8009742 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009716:	f7fe f9e3 	bl	8007ae0 <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	429a      	cmp	r2, r3
 8009724:	d803      	bhi.n	800972e <HAL_SPI_Transmit+0x20c>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972c:	d102      	bne.n	8009734 <HAL_SPI_Transmit+0x212>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d106      	bne.n	8009742 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009740:	e029      	b.n	8009796 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009746:	b29b      	uxth	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1c9      	bne.n	80096e0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 fbdf 	bl	8009f14 <SPI_EndRxTxTransaction>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2220      	movs	r2, #32
 8009760:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800976a:	2300      	movs	r3, #0
 800976c:	613b      	str	r3, [r7, #16]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	613b      	str	r3, [r7, #16]
 800977e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	77fb      	strb	r3, [r7, #31]
 800978c:	e003      	b.n	8009796 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800979e:	7ffb      	ldrb	r3, [r7, #31]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3720      	adds	r7, #32
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	4613      	mov	r3, r2
 80097b6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d002      	beq.n	80097ce <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80097c8:	2302      	movs	r3, #2
 80097ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80097cc:	e0fb      	b.n	80099c6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097d6:	d112      	bne.n	80097fe <HAL_SPI_Receive+0x56>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10e      	bne.n	80097fe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2204      	movs	r2, #4
 80097e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80097e8:	88fa      	ldrh	r2, [r7, #6]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	4613      	mov	r3, r2
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f8ef 	bl	80099d8 <HAL_SPI_TransmitReceive>
 80097fa:	4603      	mov	r3, r0
 80097fc:	e0e8      	b.n	80099d0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009804:	2b01      	cmp	r3, #1
 8009806:	d101      	bne.n	800980c <HAL_SPI_Receive+0x64>
 8009808:	2302      	movs	r3, #2
 800980a:	e0e1      	b.n	80099d0 <HAL_SPI_Receive+0x228>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009814:	f7fe f964 	bl	8007ae0 <HAL_GetTick>
 8009818:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <HAL_SPI_Receive+0x7e>
 8009820:	88fb      	ldrh	r3, [r7, #6]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	75fb      	strb	r3, [r7, #23]
    goto error;
 800982a:	e0cc      	b.n	80099c6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2204      	movs	r2, #4
 8009830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	88fa      	ldrh	r2, [r7, #6]
 8009844:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	88fa      	ldrh	r2, [r7, #6]
 800984a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009872:	d10f      	bne.n	8009894 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009882:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009892:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989e:	2b40      	cmp	r3, #64	; 0x40
 80098a0:	d007      	beq.n	80098b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d16a      	bne.n	8009990 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80098ba:	e032      	b.n	8009922 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d115      	bne.n	80098f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f103 020c 	add.w	r2, r3, #12
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d6:	7812      	ldrb	r2, [r2, #0]
 80098d8:	b2d2      	uxtb	r2, r2
 80098da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098f4:	e015      	b.n	8009922 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098f6:	f7fe f8f3 	bl	8007ae0 <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	429a      	cmp	r2, r3
 8009904:	d803      	bhi.n	800990e <HAL_SPI_Receive+0x166>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d102      	bne.n	8009914 <HAL_SPI_Receive+0x16c>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d106      	bne.n	8009922 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8009914:	2303      	movs	r3, #3
 8009916:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009920:	e051      	b.n	80099c6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009926:	b29b      	uxth	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1c7      	bne.n	80098bc <HAL_SPI_Receive+0x114>
 800992c:	e035      	b.n	800999a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b01      	cmp	r3, #1
 800993a:	d113      	bne.n	8009964 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	b292      	uxth	r2, r2
 8009948:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994e:	1c9a      	adds	r2, r3, #2
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009958:	b29b      	uxth	r3, r3
 800995a:	3b01      	subs	r3, #1
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009962:	e015      	b.n	8009990 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009964:	f7fe f8bc 	bl	8007ae0 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	429a      	cmp	r2, r3
 8009972:	d803      	bhi.n	800997c <HAL_SPI_Receive+0x1d4>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997a:	d102      	bne.n	8009982 <HAL_SPI_Receive+0x1da>
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d106      	bne.n	8009990 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800998e:	e01a      	b.n	80099c6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009994:	b29b      	uxth	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1c9      	bne.n	800992e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 fa52 	bl	8009e48 <SPI_EndRxTransaction>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2220      	movs	r2, #32
 80099ae:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	75fb      	strb	r3, [r7, #23]
 80099bc:	e003      	b.n	80099c6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3718      	adds	r7, #24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08c      	sub	sp, #48	; 0x30
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099e6:	2301      	movs	r3, #1
 80099e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_SPI_TransmitReceive+0x26>
 80099fa:	2302      	movs	r3, #2
 80099fc:	e198      	b.n	8009d30 <HAL_SPI_TransmitReceive+0x358>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a06:	f7fe f86b 	bl	8007ae0 <HAL_GetTick>
 8009a0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009a1c:	887b      	ldrh	r3, [r7, #2]
 8009a1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d00f      	beq.n	8009a48 <HAL_SPI_TransmitReceive+0x70>
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a2e:	d107      	bne.n	8009a40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d103      	bne.n	8009a40 <HAL_SPI_TransmitReceive+0x68>
 8009a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	d003      	beq.n	8009a48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009a40:	2302      	movs	r3, #2
 8009a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a46:	e16d      	b.n	8009d24 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <HAL_SPI_TransmitReceive+0x82>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <HAL_SPI_TransmitReceive+0x82>
 8009a54:	887b      	ldrh	r3, [r7, #2]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d103      	bne.n	8009a62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a60:	e160      	b.n	8009d24 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d003      	beq.n	8009a76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2205      	movs	r2, #5
 8009a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	887a      	ldrh	r2, [r7, #2]
 8009a86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	887a      	ldrh	r2, [r7, #2]
 8009a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	887a      	ldrh	r2, [r7, #2]
 8009a98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	887a      	ldrh	r2, [r7, #2]
 8009a9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab6:	2b40      	cmp	r3, #64	; 0x40
 8009ab8:	d007      	beq.n	8009aca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ac8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ad2:	d17c      	bne.n	8009bce <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <HAL_SPI_TransmitReceive+0x10a>
 8009adc:	8b7b      	ldrh	r3, [r7, #26]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d16a      	bne.n	8009bb8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae6:	881a      	ldrh	r2, [r3, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af2:	1c9a      	adds	r2, r3, #2
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b06:	e057      	b.n	8009bb8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d11b      	bne.n	8009b4e <HAL_SPI_TransmitReceive+0x176>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d016      	beq.n	8009b4e <HAL_SPI_TransmitReceive+0x176>
 8009b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d113      	bne.n	8009b4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2a:	881a      	ldrh	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b36:	1c9a      	adds	r2, r3, #2
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d119      	bne.n	8009b90 <HAL_SPI_TransmitReceive+0x1b8>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d014      	beq.n	8009b90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	b292      	uxth	r2, r2
 8009b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	1c9a      	adds	r2, r3, #2
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3b01      	subs	r3, #1
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b90:	f7fd ffa6 	bl	8007ae0 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d80b      	bhi.n	8009bb8 <HAL_SPI_TransmitReceive+0x1e0>
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba6:	d007      	beq.n	8009bb8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8009bb6:	e0b5      	b.n	8009d24 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1a2      	bne.n	8009b08 <HAL_SPI_TransmitReceive+0x130>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d19d      	bne.n	8009b08 <HAL_SPI_TransmitReceive+0x130>
 8009bcc:	e080      	b.n	8009cd0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <HAL_SPI_TransmitReceive+0x204>
 8009bd6:	8b7b      	ldrh	r3, [r7, #26]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d16f      	bne.n	8009cbc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	330c      	adds	r3, #12
 8009be6:	7812      	ldrb	r2, [r2, #0]
 8009be8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c02:	e05b      	b.n	8009cbc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d11c      	bne.n	8009c4c <HAL_SPI_TransmitReceive+0x274>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d017      	beq.n	8009c4c <HAL_SPI_TransmitReceive+0x274>
 8009c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d114      	bne.n	8009c4c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	330c      	adds	r3, #12
 8009c2c:	7812      	ldrb	r2, [r2, #0]
 8009c2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	3b01      	subs	r3, #1
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d119      	bne.n	8009c8e <HAL_SPI_TransmitReceive+0x2b6>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d014      	beq.n	8009c8e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6e:	b2d2      	uxtb	r2, r2
 8009c70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	3b01      	subs	r3, #1
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c8e:	f7fd ff27 	bl	8007ae0 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d803      	bhi.n	8009ca6 <HAL_SPI_TransmitReceive+0x2ce>
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca4:	d102      	bne.n	8009cac <HAL_SPI_TransmitReceive+0x2d4>
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d107      	bne.n	8009cbc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8009cba:	e033      	b.n	8009d24 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d19e      	bne.n	8009c04 <HAL_SPI_TransmitReceive+0x22c>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d199      	bne.n	8009c04 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 f91d 	bl	8009f14 <SPI_EndRxTxTransaction>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d006      	beq.n	8009cee <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009cec:	e01a      	b.n	8009d24 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10a      	bne.n	8009d0c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d1a:	e003      	b.n	8009d24 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3730      	adds	r7, #48	; 0x30
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	603b      	str	r3, [r7, #0]
 8009d44:	4613      	mov	r3, r2
 8009d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d48:	f7fd feca 	bl	8007ae0 <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d50:	1a9b      	subs	r3, r3, r2
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	4413      	add	r3, r2
 8009d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d58:	f7fd fec2 	bl	8007ae0 <HAL_GetTick>
 8009d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d5e:	4b39      	ldr	r3, [pc, #228]	; (8009e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	015b      	lsls	r3, r3, #5
 8009d64:	0d1b      	lsrs	r3, r3, #20
 8009d66:	69fa      	ldr	r2, [r7, #28]
 8009d68:	fb02 f303 	mul.w	r3, r2, r3
 8009d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d6e:	e054      	b.n	8009e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d76:	d050      	beq.n	8009e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d78:	f7fd feb2 	bl	8007ae0 <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	69fa      	ldr	r2, [r7, #28]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d902      	bls.n	8009d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d13d      	bne.n	8009e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685a      	ldr	r2, [r3, #4]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009da6:	d111      	bne.n	8009dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db0:	d004      	beq.n	8009dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dba:	d107      	bne.n	8009dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dd4:	d10f      	bne.n	8009df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e017      	b.n	8009e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689a      	ldr	r2, [r3, #8]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	4013      	ands	r3, r2
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	bf0c      	ite	eq
 8009e2a:	2301      	moveq	r3, #1
 8009e2c:	2300      	movne	r3, #0
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	461a      	mov	r2, r3
 8009e32:	79fb      	ldrb	r3, [r7, #7]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d19b      	bne.n	8009d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3720      	adds	r7, #32
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20000048 	.word	0x20000048

08009e48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af02      	add	r7, sp, #8
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e5c:	d111      	bne.n	8009e82 <SPI_EndRxTransaction+0x3a>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e66:	d004      	beq.n	8009e72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e70:	d107      	bne.n	8009e82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e8a:	d12a      	bne.n	8009ee2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e94:	d012      	beq.n	8009ebc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2180      	movs	r1, #128	; 0x80
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f7ff ff49 	bl	8009d38 <SPI_WaitFlagStateUntilTimeout>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d02d      	beq.n	8009f08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb0:	f043 0220 	orr.w	r2, r3, #32
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e026      	b.n	8009f0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f7ff ff36 	bl	8009d38 <SPI_WaitFlagStateUntilTimeout>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d01a      	beq.n	8009f08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed6:	f043 0220 	orr.w	r2, r3, #32
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e013      	b.n	8009f0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2101      	movs	r1, #1
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f7ff ff23 	bl	8009d38 <SPI_WaitFlagStateUntilTimeout>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d007      	beq.n	8009f08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009efc:	f043 0220 	orr.w	r2, r3, #32
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e000      	b.n	8009f0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af02      	add	r7, sp, #8
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2201      	movs	r2, #1
 8009f28:	2102      	movs	r1, #2
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7ff ff04 	bl	8009d38 <SPI_WaitFlagStateUntilTimeout>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3a:	f043 0220 	orr.w	r2, r3, #32
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e032      	b.n	8009fac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009f46:	4b1b      	ldr	r3, [pc, #108]	; (8009fb4 <SPI_EndRxTxTransaction+0xa0>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a1b      	ldr	r2, [pc, #108]	; (8009fb8 <SPI_EndRxTxTransaction+0xa4>)
 8009f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f50:	0d5b      	lsrs	r3, r3, #21
 8009f52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f56:	fb02 f303 	mul.w	r3, r2, r3
 8009f5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f64:	d112      	bne.n	8009f8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2180      	movs	r1, #128	; 0x80
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7ff fee1 	bl	8009d38 <SPI_WaitFlagStateUntilTimeout>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d016      	beq.n	8009faa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f80:	f043 0220 	orr.w	r2, r3, #32
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e00f      	b.n	8009fac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa2:	2b80      	cmp	r3, #128	; 0x80
 8009fa4:	d0f2      	beq.n	8009f8c <SPI_EndRxTxTransaction+0x78>
 8009fa6:	e000      	b.n	8009faa <SPI_EndRxTxTransaction+0x96>
        break;
 8009fa8:	bf00      	nop
  }

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20000048 	.word	0x20000048
 8009fb8:	165e9f81 	.word	0x165e9f81

08009fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e042      	b.n	800a054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d106      	bne.n	8009fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7fd fba6 	bl	8007734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2224      	movs	r2, #36	; 0x24
 8009fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68da      	ldr	r2, [r3, #12]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f973 	bl	800a2ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	691a      	ldr	r2, [r3, #16]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	695a      	ldr	r2, [r3, #20]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2220      	movs	r2, #32
 800a040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2220      	movs	r2, #32
 800a048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08a      	sub	sp, #40	; 0x28
 800a060:	af02      	add	r7, sp, #8
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	4613      	mov	r3, r2
 800a06a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b20      	cmp	r3, #32
 800a07a:	d175      	bne.n	800a168 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <HAL_UART_Transmit+0x2c>
 800a082:	88fb      	ldrh	r3, [r7, #6]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e06e      	b.n	800a16a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2221      	movs	r2, #33	; 0x21
 800a096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a09a:	f7fd fd21 	bl	8007ae0 <HAL_GetTick>
 800a09e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	88fa      	ldrh	r2, [r7, #6]
 800a0a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	88fa      	ldrh	r2, [r7, #6]
 800a0aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b4:	d108      	bne.n	800a0c8 <HAL_UART_Transmit+0x6c>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d104      	bne.n	800a0c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	61bb      	str	r3, [r7, #24]
 800a0c6:	e003      	b.n	800a0d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a0d0:	e02e      	b.n	800a130 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	2180      	movs	r1, #128	; 0x80
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 f848 	bl	800a172 <UART_WaitOnFlagUntilTimeout>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d005      	beq.n	800a0f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e03a      	b.n	800a16a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10b      	bne.n	800a112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	3302      	adds	r3, #2
 800a10e:	61bb      	str	r3, [r7, #24]
 800a110:	e007      	b.n	800a122 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	781a      	ldrb	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	3301      	adds	r3, #1
 800a120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a126:	b29b      	uxth	r3, r3
 800a128:	3b01      	subs	r3, #1
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a134:	b29b      	uxth	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1cb      	bne.n	800a0d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2200      	movs	r2, #0
 800a142:	2140      	movs	r1, #64	; 0x40
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f814 	bl	800a172 <UART_WaitOnFlagUntilTimeout>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d005      	beq.n	800a15c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2220      	movs	r2, #32
 800a154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e006      	b.n	800a16a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2220      	movs	r2, #32
 800a160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	e000      	b.n	800a16a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a168:	2302      	movs	r3, #2
  }
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3720      	adds	r7, #32
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	603b      	str	r3, [r7, #0]
 800a17e:	4613      	mov	r3, r2
 800a180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a182:	e03b      	b.n	800a1fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18a:	d037      	beq.n	800a1fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a18c:	f7fd fca8 	bl	8007ae0 <HAL_GetTick>
 800a190:	4602      	mov	r2, r0
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	6a3a      	ldr	r2, [r7, #32]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d302      	bcc.n	800a1a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a19c:	6a3b      	ldr	r3, [r7, #32]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e03a      	b.n	800a21c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d023      	beq.n	800a1fc <UART_WaitOnFlagUntilTimeout+0x8a>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b80      	cmp	r3, #128	; 0x80
 800a1b8:	d020      	beq.n	800a1fc <UART_WaitOnFlagUntilTimeout+0x8a>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	2b40      	cmp	r3, #64	; 0x40
 800a1be:	d01d      	beq.n	800a1fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0308 	and.w	r3, r3, #8
 800a1ca:	2b08      	cmp	r3, #8
 800a1cc:	d116      	bne.n	800a1fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	617b      	str	r3, [r7, #20]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	617b      	str	r3, [r7, #20]
 800a1e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f000 f81d 	bl	800a224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2208      	movs	r2, #8
 800a1ee:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e00f      	b.n	800a21c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4013      	ands	r3, r2
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	429a      	cmp	r2, r3
 800a20a:	bf0c      	ite	eq
 800a20c:	2301      	moveq	r3, #1
 800a20e:	2300      	movne	r3, #0
 800a210:	b2db      	uxtb	r3, r3
 800a212:	461a      	mov	r2, r3
 800a214:	79fb      	ldrb	r3, [r7, #7]
 800a216:	429a      	cmp	r2, r3
 800a218:	d0b4      	beq.n	800a184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a224:	b480      	push	{r7}
 800a226:	b095      	sub	sp, #84	; 0x54
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	330c      	adds	r3, #12
 800a232:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a236:	e853 3f00 	ldrex	r3, [r3]
 800a23a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a242:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	330c      	adds	r3, #12
 800a24a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a24c:	643a      	str	r2, [r7, #64]	; 0x40
 800a24e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a254:	e841 2300 	strex	r3, r2, [r1]
 800a258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1e5      	bne.n	800a22c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3314      	adds	r3, #20
 800a266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	e853 3f00 	ldrex	r3, [r3]
 800a26e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	f023 0301 	bic.w	r3, r3, #1
 800a276:	64bb      	str	r3, [r7, #72]	; 0x48
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3314      	adds	r3, #20
 800a27e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a280:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a288:	e841 2300 	strex	r3, r2, [r1]
 800a28c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1e5      	bne.n	800a260 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d119      	bne.n	800a2d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	e853 3f00 	ldrex	r3, [r3]
 800a2aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f023 0310 	bic.w	r3, r3, #16
 800a2b2:	647b      	str	r3, [r7, #68]	; 0x44
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	330c      	adds	r3, #12
 800a2ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2bc:	61ba      	str	r2, [r7, #24]
 800a2be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c0:	6979      	ldr	r1, [r7, #20]
 800a2c2:	69ba      	ldr	r2, [r7, #24]
 800a2c4:	e841 2300 	strex	r3, r2, [r1]
 800a2c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e5      	bne.n	800a29c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a2de:	bf00      	nop
 800a2e0:	3754      	adds	r7, #84	; 0x54
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
	...

0800a2ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2f0:	b0c0      	sub	sp, #256	; 0x100
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a308:	68d9      	ldr	r1, [r3, #12]
 800a30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	ea40 0301 	orr.w	r3, r0, r1
 800a314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a31a:	689a      	ldr	r2, [r3, #8]
 800a31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	431a      	orrs	r2, r3
 800a324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	431a      	orrs	r2, r3
 800a32c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	4313      	orrs	r3, r2
 800a334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a344:	f021 010c 	bic.w	r1, r1, #12
 800a348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a352:	430b      	orrs	r3, r1
 800a354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a366:	6999      	ldr	r1, [r3, #24]
 800a368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	ea40 0301 	orr.w	r3, r0, r1
 800a372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	4b8f      	ldr	r3, [pc, #572]	; (800a5b8 <UART_SetConfig+0x2cc>)
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d005      	beq.n	800a38c <UART_SetConfig+0xa0>
 800a380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	4b8d      	ldr	r3, [pc, #564]	; (800a5bc <UART_SetConfig+0x2d0>)
 800a388:	429a      	cmp	r2, r3
 800a38a:	d104      	bne.n	800a396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a38c:	f7ff f82c 	bl	80093e8 <HAL_RCC_GetPCLK2Freq>
 800a390:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a394:	e003      	b.n	800a39e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a396:	f7ff f813 	bl	80093c0 <HAL_RCC_GetPCLK1Freq>
 800a39a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a39e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3a8:	f040 810c 	bne.w	800a5c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a3ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a3be:	4622      	mov	r2, r4
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	1891      	adds	r1, r2, r2
 800a3c4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3c6:	415b      	adcs	r3, r3
 800a3c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	eb12 0801 	adds.w	r8, r2, r1
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	eb43 0901 	adc.w	r9, r3, r1
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	f04f 0300 	mov.w	r3, #0
 800a3e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a3e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a3ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a3ee:	4690      	mov	r8, r2
 800a3f0:	4699      	mov	r9, r3
 800a3f2:	4623      	mov	r3, r4
 800a3f4:	eb18 0303 	adds.w	r3, r8, r3
 800a3f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	eb49 0303 	adc.w	r3, r9, r3
 800a402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a412:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a41a:	460b      	mov	r3, r1
 800a41c:	18db      	adds	r3, r3, r3
 800a41e:	653b      	str	r3, [r7, #80]	; 0x50
 800a420:	4613      	mov	r3, r2
 800a422:	eb42 0303 	adc.w	r3, r2, r3
 800a426:	657b      	str	r3, [r7, #84]	; 0x54
 800a428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a42c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a430:	f7f5 ff26 	bl	8000280 <__aeabi_uldivmod>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4b61      	ldr	r3, [pc, #388]	; (800a5c0 <UART_SetConfig+0x2d4>)
 800a43a:	fba3 2302 	umull	r2, r3, r3, r2
 800a43e:	095b      	lsrs	r3, r3, #5
 800a440:	011c      	lsls	r4, r3, #4
 800a442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a446:	2200      	movs	r2, #0
 800a448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a44c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a454:	4642      	mov	r2, r8
 800a456:	464b      	mov	r3, r9
 800a458:	1891      	adds	r1, r2, r2
 800a45a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a45c:	415b      	adcs	r3, r3
 800a45e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a464:	4641      	mov	r1, r8
 800a466:	eb12 0a01 	adds.w	sl, r2, r1
 800a46a:	4649      	mov	r1, r9
 800a46c:	eb43 0b01 	adc.w	fp, r3, r1
 800a470:	f04f 0200 	mov.w	r2, #0
 800a474:	f04f 0300 	mov.w	r3, #0
 800a478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a47c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a484:	4692      	mov	sl, r2
 800a486:	469b      	mov	fp, r3
 800a488:	4643      	mov	r3, r8
 800a48a:	eb1a 0303 	adds.w	r3, sl, r3
 800a48e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a492:	464b      	mov	r3, r9
 800a494:	eb4b 0303 	adc.w	r3, fp, r3
 800a498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a49c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a4ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	18db      	adds	r3, r3, r3
 800a4b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	eb42 0303 	adc.w	r3, r2, r3
 800a4bc:	647b      	str	r3, [r7, #68]	; 0x44
 800a4be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a4c6:	f7f5 fedb 	bl	8000280 <__aeabi_uldivmod>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	4b3b      	ldr	r3, [pc, #236]	; (800a5c0 <UART_SetConfig+0x2d4>)
 800a4d2:	fba3 2301 	umull	r2, r3, r3, r1
 800a4d6:	095b      	lsrs	r3, r3, #5
 800a4d8:	2264      	movs	r2, #100	; 0x64
 800a4da:	fb02 f303 	mul.w	r3, r2, r3
 800a4de:	1acb      	subs	r3, r1, r3
 800a4e0:	00db      	lsls	r3, r3, #3
 800a4e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a4e6:	4b36      	ldr	r3, [pc, #216]	; (800a5c0 <UART_SetConfig+0x2d4>)
 800a4e8:	fba3 2302 	umull	r2, r3, r3, r2
 800a4ec:	095b      	lsrs	r3, r3, #5
 800a4ee:	005b      	lsls	r3, r3, #1
 800a4f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a4f4:	441c      	add	r4, r3
 800a4f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a500:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a508:	4642      	mov	r2, r8
 800a50a:	464b      	mov	r3, r9
 800a50c:	1891      	adds	r1, r2, r2
 800a50e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a510:	415b      	adcs	r3, r3
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a518:	4641      	mov	r1, r8
 800a51a:	1851      	adds	r1, r2, r1
 800a51c:	6339      	str	r1, [r7, #48]	; 0x30
 800a51e:	4649      	mov	r1, r9
 800a520:	414b      	adcs	r3, r1
 800a522:	637b      	str	r3, [r7, #52]	; 0x34
 800a524:	f04f 0200 	mov.w	r2, #0
 800a528:	f04f 0300 	mov.w	r3, #0
 800a52c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a530:	4659      	mov	r1, fp
 800a532:	00cb      	lsls	r3, r1, #3
 800a534:	4651      	mov	r1, sl
 800a536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a53a:	4651      	mov	r1, sl
 800a53c:	00ca      	lsls	r2, r1, #3
 800a53e:	4610      	mov	r0, r2
 800a540:	4619      	mov	r1, r3
 800a542:	4603      	mov	r3, r0
 800a544:	4642      	mov	r2, r8
 800a546:	189b      	adds	r3, r3, r2
 800a548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a54c:	464b      	mov	r3, r9
 800a54e:	460a      	mov	r2, r1
 800a550:	eb42 0303 	adc.w	r3, r2, r3
 800a554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a564:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a56c:	460b      	mov	r3, r1
 800a56e:	18db      	adds	r3, r3, r3
 800a570:	62bb      	str	r3, [r7, #40]	; 0x28
 800a572:	4613      	mov	r3, r2
 800a574:	eb42 0303 	adc.w	r3, r2, r3
 800a578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a57a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a57e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a582:	f7f5 fe7d 	bl	8000280 <__aeabi_uldivmod>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <UART_SetConfig+0x2d4>)
 800a58c:	fba3 1302 	umull	r1, r3, r3, r2
 800a590:	095b      	lsrs	r3, r3, #5
 800a592:	2164      	movs	r1, #100	; 0x64
 800a594:	fb01 f303 	mul.w	r3, r1, r3
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	00db      	lsls	r3, r3, #3
 800a59c:	3332      	adds	r3, #50	; 0x32
 800a59e:	4a08      	ldr	r2, [pc, #32]	; (800a5c0 <UART_SetConfig+0x2d4>)
 800a5a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a4:	095b      	lsrs	r3, r3, #5
 800a5a6:	f003 0207 	and.w	r2, r3, #7
 800a5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4422      	add	r2, r4
 800a5b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a5b4:	e106      	b.n	800a7c4 <UART_SetConfig+0x4d8>
 800a5b6:	bf00      	nop
 800a5b8:	40011000 	.word	0x40011000
 800a5bc:	40011400 	.word	0x40011400
 800a5c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a5c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a5ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a5d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a5d6:	4642      	mov	r2, r8
 800a5d8:	464b      	mov	r3, r9
 800a5da:	1891      	adds	r1, r2, r2
 800a5dc:	6239      	str	r1, [r7, #32]
 800a5de:	415b      	adcs	r3, r3
 800a5e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5e6:	4641      	mov	r1, r8
 800a5e8:	1854      	adds	r4, r2, r1
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	eb43 0501 	adc.w	r5, r3, r1
 800a5f0:	f04f 0200 	mov.w	r2, #0
 800a5f4:	f04f 0300 	mov.w	r3, #0
 800a5f8:	00eb      	lsls	r3, r5, #3
 800a5fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5fe:	00e2      	lsls	r2, r4, #3
 800a600:	4614      	mov	r4, r2
 800a602:	461d      	mov	r5, r3
 800a604:	4643      	mov	r3, r8
 800a606:	18e3      	adds	r3, r4, r3
 800a608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a60c:	464b      	mov	r3, r9
 800a60e:	eb45 0303 	adc.w	r3, r5, r3
 800a612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a626:	f04f 0200 	mov.w	r2, #0
 800a62a:	f04f 0300 	mov.w	r3, #0
 800a62e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a632:	4629      	mov	r1, r5
 800a634:	008b      	lsls	r3, r1, #2
 800a636:	4621      	mov	r1, r4
 800a638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a63c:	4621      	mov	r1, r4
 800a63e:	008a      	lsls	r2, r1, #2
 800a640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a644:	f7f5 fe1c 	bl	8000280 <__aeabi_uldivmod>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4b60      	ldr	r3, [pc, #384]	; (800a7d0 <UART_SetConfig+0x4e4>)
 800a64e:	fba3 2302 	umull	r2, r3, r3, r2
 800a652:	095b      	lsrs	r3, r3, #5
 800a654:	011c      	lsls	r4, r3, #4
 800a656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a668:	4642      	mov	r2, r8
 800a66a:	464b      	mov	r3, r9
 800a66c:	1891      	adds	r1, r2, r2
 800a66e:	61b9      	str	r1, [r7, #24]
 800a670:	415b      	adcs	r3, r3
 800a672:	61fb      	str	r3, [r7, #28]
 800a674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a678:	4641      	mov	r1, r8
 800a67a:	1851      	adds	r1, r2, r1
 800a67c:	6139      	str	r1, [r7, #16]
 800a67e:	4649      	mov	r1, r9
 800a680:	414b      	adcs	r3, r1
 800a682:	617b      	str	r3, [r7, #20]
 800a684:	f04f 0200 	mov.w	r2, #0
 800a688:	f04f 0300 	mov.w	r3, #0
 800a68c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a690:	4659      	mov	r1, fp
 800a692:	00cb      	lsls	r3, r1, #3
 800a694:	4651      	mov	r1, sl
 800a696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a69a:	4651      	mov	r1, sl
 800a69c:	00ca      	lsls	r2, r1, #3
 800a69e:	4610      	mov	r0, r2
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	189b      	adds	r3, r3, r2
 800a6a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6ac:	464b      	mov	r3, r9
 800a6ae:	460a      	mov	r2, r1
 800a6b0:	eb42 0303 	adc.w	r3, r2, r3
 800a6b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a6b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a6c4:	f04f 0200 	mov.w	r2, #0
 800a6c8:	f04f 0300 	mov.w	r3, #0
 800a6cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	008b      	lsls	r3, r1, #2
 800a6d4:	4641      	mov	r1, r8
 800a6d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6da:	4641      	mov	r1, r8
 800a6dc:	008a      	lsls	r2, r1, #2
 800a6de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a6e2:	f7f5 fdcd 	bl	8000280 <__aeabi_uldivmod>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	4b38      	ldr	r3, [pc, #224]	; (800a7d0 <UART_SetConfig+0x4e4>)
 800a6ee:	fba3 2301 	umull	r2, r3, r3, r1
 800a6f2:	095b      	lsrs	r3, r3, #5
 800a6f4:	2264      	movs	r2, #100	; 0x64
 800a6f6:	fb02 f303 	mul.w	r3, r2, r3
 800a6fa:	1acb      	subs	r3, r1, r3
 800a6fc:	011b      	lsls	r3, r3, #4
 800a6fe:	3332      	adds	r3, #50	; 0x32
 800a700:	4a33      	ldr	r2, [pc, #204]	; (800a7d0 <UART_SetConfig+0x4e4>)
 800a702:	fba2 2303 	umull	r2, r3, r2, r3
 800a706:	095b      	lsrs	r3, r3, #5
 800a708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a70c:	441c      	add	r4, r3
 800a70e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a712:	2200      	movs	r2, #0
 800a714:	673b      	str	r3, [r7, #112]	; 0x70
 800a716:	677a      	str	r2, [r7, #116]	; 0x74
 800a718:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a71c:	4642      	mov	r2, r8
 800a71e:	464b      	mov	r3, r9
 800a720:	1891      	adds	r1, r2, r2
 800a722:	60b9      	str	r1, [r7, #8]
 800a724:	415b      	adcs	r3, r3
 800a726:	60fb      	str	r3, [r7, #12]
 800a728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a72c:	4641      	mov	r1, r8
 800a72e:	1851      	adds	r1, r2, r1
 800a730:	6039      	str	r1, [r7, #0]
 800a732:	4649      	mov	r1, r9
 800a734:	414b      	adcs	r3, r1
 800a736:	607b      	str	r3, [r7, #4]
 800a738:	f04f 0200 	mov.w	r2, #0
 800a73c:	f04f 0300 	mov.w	r3, #0
 800a740:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a744:	4659      	mov	r1, fp
 800a746:	00cb      	lsls	r3, r1, #3
 800a748:	4651      	mov	r1, sl
 800a74a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a74e:	4651      	mov	r1, sl
 800a750:	00ca      	lsls	r2, r1, #3
 800a752:	4610      	mov	r0, r2
 800a754:	4619      	mov	r1, r3
 800a756:	4603      	mov	r3, r0
 800a758:	4642      	mov	r2, r8
 800a75a:	189b      	adds	r3, r3, r2
 800a75c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a75e:	464b      	mov	r3, r9
 800a760:	460a      	mov	r2, r1
 800a762:	eb42 0303 	adc.w	r3, r2, r3
 800a766:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	663b      	str	r3, [r7, #96]	; 0x60
 800a772:	667a      	str	r2, [r7, #100]	; 0x64
 800a774:	f04f 0200 	mov.w	r2, #0
 800a778:	f04f 0300 	mov.w	r3, #0
 800a77c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a780:	4649      	mov	r1, r9
 800a782:	008b      	lsls	r3, r1, #2
 800a784:	4641      	mov	r1, r8
 800a786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a78a:	4641      	mov	r1, r8
 800a78c:	008a      	lsls	r2, r1, #2
 800a78e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a792:	f7f5 fd75 	bl	8000280 <__aeabi_uldivmod>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	4b0d      	ldr	r3, [pc, #52]	; (800a7d0 <UART_SetConfig+0x4e4>)
 800a79c:	fba3 1302 	umull	r1, r3, r3, r2
 800a7a0:	095b      	lsrs	r3, r3, #5
 800a7a2:	2164      	movs	r1, #100	; 0x64
 800a7a4:	fb01 f303 	mul.w	r3, r1, r3
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	011b      	lsls	r3, r3, #4
 800a7ac:	3332      	adds	r3, #50	; 0x32
 800a7ae:	4a08      	ldr	r2, [pc, #32]	; (800a7d0 <UART_SetConfig+0x4e4>)
 800a7b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b4:	095b      	lsrs	r3, r3, #5
 800a7b6:	f003 020f 	and.w	r2, r3, #15
 800a7ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4422      	add	r2, r4
 800a7c2:	609a      	str	r2, [r3, #8]
}
 800a7c4:	bf00      	nop
 800a7c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7d0:	51eb851f 	.word	0x51eb851f

0800a7d4 <_ZNSaIcEC1Ev>:
 800a7d4:	4770      	bx	lr

0800a7d6 <_ZNSaIcED1Ev>:
 800a7d6:	4770      	bx	lr

0800a7d8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800a7d8:	b10a      	cbz	r2, 800a7de <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800a7da:	f000 baef 	b.w	800adbc <memcpy>
 800a7de:	4770      	bx	lr

0800a7e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800a7e0:	b508      	push	{r3, lr}
 800a7e2:	680b      	ldr	r3, [r1, #0]
 800a7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e8:	d302      	bcc.n	800a7f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800a7ea:	480d      	ldr	r0, [pc, #52]	; (800a820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800a7ec:	f000 f8fa 	bl	800a9e4 <_ZSt20__throw_length_errorPKc>
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d90b      	bls.n	800a80c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a7f4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800a7f8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800a7fc:	d206      	bcs.n	800a80c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a7fe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a802:	bf2a      	itet	cs
 800a804:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800a808:	6008      	strcc	r0, [r1, #0]
 800a80a:	600b      	strcs	r3, [r1, #0]
 800a80c:	6808      	ldr	r0, [r1, #0]
 800a80e:	3001      	adds	r0, #1
 800a810:	d501      	bpl.n	800a816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800a812:	f000 f8e1 	bl	800a9d8 <_ZSt17__throw_bad_allocv>
 800a816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a81a:	f000 b8cc 	b.w	800a9b6 <_Znwj>
 800a81e:	bf00      	nop
 800a820:	0800b920 	.word	0x0800b920

0800a824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800a824:	f850 3b08 	ldr.w	r3, [r0], #8
 800a828:	4283      	cmp	r3, r0
 800a82a:	d002      	beq.n	800a832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 b8c0 	b.w	800a9b2 <_ZdlPv>
 800a832:	4770      	bx	lr

0800a834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800a834:	2a01      	cmp	r2, #1
 800a836:	b410      	push	{r4}
 800a838:	d104      	bne.n	800a844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800a83a:	780a      	ldrb	r2, [r1, #0]
 800a83c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a840:	7002      	strb	r2, [r0, #0]
 800a842:	4770      	bx	lr
 800a844:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a848:	f7ff bfc6 	b.w	800a7d8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800a84c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800a84c:	b508      	push	{r3, lr}
 800a84e:	1a52      	subs	r2, r2, r1
 800a850:	f7ff fff0 	bl	800a834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a854:	bd08      	pop	{r3, pc}

0800a856 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800a856:	b508      	push	{r3, lr}
 800a858:	1a52      	subs	r2, r2, r1
 800a85a:	f7ff ffeb 	bl	800a834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a85e:	bd08      	pop	{r3, pc}

0800a860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800a860:	4288      	cmp	r0, r1
 800a862:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a864:	4604      	mov	r4, r0
 800a866:	460e      	mov	r6, r1
 800a868:	d01e      	beq.n	800a8a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 800a86a:	4603      	mov	r3, r0
 800a86c:	684d      	ldr	r5, [r1, #4]
 800a86e:	f853 2b08 	ldr.w	r2, [r3], #8
 800a872:	429a      	cmp	r2, r3
 800a874:	bf14      	ite	ne
 800a876:	6882      	ldrne	r2, [r0, #8]
 800a878:	220f      	moveq	r2, #15
 800a87a:	42aa      	cmp	r2, r5
 800a87c:	d20a      	bcs.n	800a894 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 800a87e:	a901      	add	r1, sp, #4
 800a880:	9501      	str	r5, [sp, #4]
 800a882:	f7ff ffad 	bl	800a7e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a886:	4607      	mov	r7, r0
 800a888:	4620      	mov	r0, r4
 800a88a:	f7ff ffcb 	bl	800a824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a88e:	9b01      	ldr	r3, [sp, #4]
 800a890:	6027      	str	r7, [r4, #0]
 800a892:	60a3      	str	r3, [r4, #8]
 800a894:	b125      	cbz	r5, 800a8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 800a896:	6831      	ldr	r1, [r6, #0]
 800a898:	6820      	ldr	r0, [r4, #0]
 800a89a:	462a      	mov	r2, r5
 800a89c:	f7ff ffca 	bl	800a834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	6065      	str	r5, [r4, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	555a      	strb	r2, [r3, r5]
 800a8a8:	b003      	add	sp, #12
 800a8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800a8ac:	f100 0208 	add.w	r2, r0, #8
 800a8b0:	6002      	str	r2, [r0, #0]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	6042      	str	r2, [r0, #4]
 800a8b6:	7202      	strb	r2, [r0, #8]
 800a8b8:	4770      	bx	lr

0800a8ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800a8ba:	b510      	push	{r4, lr}
 800a8bc:	4604      	mov	r4, r0
 800a8be:	f7ff ffb1 	bl	800a824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	bd10      	pop	{r4, pc}

0800a8c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	f7ff ffc9 	bl	800a860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	bd10      	pop	{r4, pc}

0800a8d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800a8d2:	6800      	ldr	r0, [r0, #0]
 800a8d4:	4770      	bx	lr
	...

0800a8d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800a8d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8da:	4604      	mov	r4, r0
 800a8dc:	4616      	mov	r6, r2
 800a8de:	460d      	mov	r5, r1
 800a8e0:	b919      	cbnz	r1, 800a8ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800a8e2:	b112      	cbz	r2, 800a8ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800a8e4:	480d      	ldr	r0, [pc, #52]	; (800a91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800a8e6:	f000 f87a 	bl	800a9de <_ZSt19__throw_logic_errorPKc>
 800a8ea:	1b73      	subs	r3, r6, r5
 800a8ec:	2b0f      	cmp	r3, #15
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	d907      	bls.n	800a902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	a901      	add	r1, sp, #4
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f7ff ff72 	bl	800a7e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a8fc:	9b01      	ldr	r3, [sp, #4]
 800a8fe:	6020      	str	r0, [r4, #0]
 800a900:	60a3      	str	r3, [r4, #8]
 800a902:	4632      	mov	r2, r6
 800a904:	4629      	mov	r1, r5
 800a906:	6820      	ldr	r0, [r4, #0]
 800a908:	f7ff ffa0 	bl	800a84c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800a90c:	9b01      	ldr	r3, [sp, #4]
 800a90e:	6822      	ldr	r2, [r4, #0]
 800a910:	6063      	str	r3, [r4, #4]
 800a912:	2100      	movs	r1, #0
 800a914:	54d1      	strb	r1, [r2, r3]
 800a916:	b002      	add	sp, #8
 800a918:	bd70      	pop	{r4, r5, r6, pc}
 800a91a:	bf00      	nop
 800a91c:	0800b938 	.word	0x0800b938

0800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	f100 0308 	add.w	r3, r0, #8
 800a926:	6003      	str	r3, [r0, #0]
 800a928:	e9d1 5200 	ldrd	r5, r2, [r1]
 800a92c:	4604      	mov	r4, r0
 800a92e:	f04f 0300 	mov.w	r3, #0
 800a932:	442a      	add	r2, r5
 800a934:	4629      	mov	r1, r5
 800a936:	f7ff ffcf 	bl	800a8d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800a93a:	4620      	mov	r0, r4
 800a93c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800a940:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a942:	4604      	mov	r4, r0
 800a944:	4616      	mov	r6, r2
 800a946:	460d      	mov	r5, r1
 800a948:	b919      	cbnz	r1, 800a952 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a94a:	b112      	cbz	r2, 800a952 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a94c:	480d      	ldr	r0, [pc, #52]	; (800a984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800a94e:	f000 f846 	bl	800a9de <_ZSt19__throw_logic_errorPKc>
 800a952:	1b73      	subs	r3, r6, r5
 800a954:	2b0f      	cmp	r3, #15
 800a956:	9301      	str	r3, [sp, #4]
 800a958:	d907      	bls.n	800a96a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800a95a:	2200      	movs	r2, #0
 800a95c:	a901      	add	r1, sp, #4
 800a95e:	4620      	mov	r0, r4
 800a960:	f7ff ff3e 	bl	800a7e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a964:	9b01      	ldr	r3, [sp, #4]
 800a966:	6020      	str	r0, [r4, #0]
 800a968:	60a3      	str	r3, [r4, #8]
 800a96a:	4632      	mov	r2, r6
 800a96c:	4629      	mov	r1, r5
 800a96e:	6820      	ldr	r0, [r4, #0]
 800a970:	f7ff ff71 	bl	800a856 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800a974:	9b01      	ldr	r3, [sp, #4]
 800a976:	6822      	ldr	r2, [r4, #0]
 800a978:	6063      	str	r3, [r4, #4]
 800a97a:	2100      	movs	r1, #0
 800a97c:	54d1      	strb	r1, [r2, r3]
 800a97e:	b002      	add	sp, #8
 800a980:	bd70      	pop	{r4, r5, r6, pc}
 800a982:	bf00      	nop
 800a984:	0800b938 	.word	0x0800b938

0800a988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	f100 0308 	add.w	r3, r0, #8
 800a98e:	4604      	mov	r4, r0
 800a990:	6003      	str	r3, [r0, #0]
 800a992:	460d      	mov	r5, r1
 800a994:	b159      	cbz	r1, 800a9ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800a996:	4608      	mov	r0, r1
 800a998:	f7f5 fc6a 	bl	8000270 <strlen>
 800a99c:	182a      	adds	r2, r5, r0
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f04f 0300 	mov.w	r3, #0
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	f7ff ffcb 	bl	800a940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	bd38      	pop	{r3, r4, r5, pc}
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	e7f5      	b.n	800a99e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800a9b2 <_ZdlPv>:
 800a9b2:	f000 b833 	b.w	800aa1c <free>

0800a9b6 <_Znwj>:
 800a9b6:	2801      	cmp	r0, #1
 800a9b8:	bf38      	it	cc
 800a9ba:	2001      	movcc	r0, #1
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 f823 	bl	800aa0c <malloc>
 800a9c6:	b100      	cbz	r0, 800a9ca <_Znwj+0x14>
 800a9c8:	bd10      	pop	{r4, pc}
 800a9ca:	f000 f80f 	bl	800a9ec <_ZSt15get_new_handlerv>
 800a9ce:	b908      	cbnz	r0, 800a9d4 <_Znwj+0x1e>
 800a9d0:	f000 f814 	bl	800a9fc <abort>
 800a9d4:	4780      	blx	r0
 800a9d6:	e7f3      	b.n	800a9c0 <_Znwj+0xa>

0800a9d8 <_ZSt17__throw_bad_allocv>:
 800a9d8:	b508      	push	{r3, lr}
 800a9da:	f000 f80f 	bl	800a9fc <abort>

0800a9de <_ZSt19__throw_logic_errorPKc>:
 800a9de:	b508      	push	{r3, lr}
 800a9e0:	f000 f80c 	bl	800a9fc <abort>

0800a9e4 <_ZSt20__throw_length_errorPKc>:
 800a9e4:	b508      	push	{r3, lr}
 800a9e6:	f000 f809 	bl	800a9fc <abort>
	...

0800a9ec <_ZSt15get_new_handlerv>:
 800a9ec:	4b02      	ldr	r3, [pc, #8]	; (800a9f8 <_ZSt15get_new_handlerv+0xc>)
 800a9ee:	6818      	ldr	r0, [r3, #0]
 800a9f0:	f3bf 8f5b 	dmb	ish
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	20005648 	.word	0x20005648

0800a9fc <abort>:
 800a9fc:	b508      	push	{r3, lr}
 800a9fe:	2006      	movs	r0, #6
 800aa00:	f000 f984 	bl	800ad0c <raise>
 800aa04:	2001      	movs	r0, #1
 800aa06:	f7fc ff58 	bl	80078ba <_exit>
	...

0800aa0c <malloc>:
 800aa0c:	4b02      	ldr	r3, [pc, #8]	; (800aa18 <malloc+0xc>)
 800aa0e:	4601      	mov	r1, r0
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	f000 b82b 	b.w	800aa6c <_malloc_r>
 800aa16:	bf00      	nop
 800aa18:	200000a0 	.word	0x200000a0

0800aa1c <free>:
 800aa1c:	4b02      	ldr	r3, [pc, #8]	; (800aa28 <free+0xc>)
 800aa1e:	4601      	mov	r1, r0
 800aa20:	6818      	ldr	r0, [r3, #0]
 800aa22:	f000 b9d9 	b.w	800add8 <_free_r>
 800aa26:	bf00      	nop
 800aa28:	200000a0 	.word	0x200000a0

0800aa2c <sbrk_aligned>:
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	4e0e      	ldr	r6, [pc, #56]	; (800aa68 <sbrk_aligned+0x3c>)
 800aa30:	460c      	mov	r4, r1
 800aa32:	6831      	ldr	r1, [r6, #0]
 800aa34:	4605      	mov	r5, r0
 800aa36:	b911      	cbnz	r1, 800aa3e <sbrk_aligned+0x12>
 800aa38:	f000 f984 	bl	800ad44 <_sbrk_r>
 800aa3c:	6030      	str	r0, [r6, #0]
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4628      	mov	r0, r5
 800aa42:	f000 f97f 	bl	800ad44 <_sbrk_r>
 800aa46:	1c43      	adds	r3, r0, #1
 800aa48:	d00a      	beq.n	800aa60 <sbrk_aligned+0x34>
 800aa4a:	1cc4      	adds	r4, r0, #3
 800aa4c:	f024 0403 	bic.w	r4, r4, #3
 800aa50:	42a0      	cmp	r0, r4
 800aa52:	d007      	beq.n	800aa64 <sbrk_aligned+0x38>
 800aa54:	1a21      	subs	r1, r4, r0
 800aa56:	4628      	mov	r0, r5
 800aa58:	f000 f974 	bl	800ad44 <_sbrk_r>
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d101      	bne.n	800aa64 <sbrk_aligned+0x38>
 800aa60:	f04f 34ff 	mov.w	r4, #4294967295
 800aa64:	4620      	mov	r0, r4
 800aa66:	bd70      	pop	{r4, r5, r6, pc}
 800aa68:	20005650 	.word	0x20005650

0800aa6c <_malloc_r>:
 800aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	1ccd      	adds	r5, r1, #3
 800aa72:	f025 0503 	bic.w	r5, r5, #3
 800aa76:	3508      	adds	r5, #8
 800aa78:	2d0c      	cmp	r5, #12
 800aa7a:	bf38      	it	cc
 800aa7c:	250c      	movcc	r5, #12
 800aa7e:	2d00      	cmp	r5, #0
 800aa80:	4607      	mov	r7, r0
 800aa82:	db01      	blt.n	800aa88 <_malloc_r+0x1c>
 800aa84:	42a9      	cmp	r1, r5
 800aa86:	d905      	bls.n	800aa94 <_malloc_r+0x28>
 800aa88:	230c      	movs	r3, #12
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	2600      	movs	r6, #0
 800aa8e:	4630      	mov	r0, r6
 800aa90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ab68 <_malloc_r+0xfc>
 800aa98:	f000 f868 	bl	800ab6c <__malloc_lock>
 800aa9c:	f8d8 3000 	ldr.w	r3, [r8]
 800aaa0:	461c      	mov	r4, r3
 800aaa2:	bb5c      	cbnz	r4, 800aafc <_malloc_r+0x90>
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	f7ff ffc0 	bl	800aa2c <sbrk_aligned>
 800aaac:	1c43      	adds	r3, r0, #1
 800aaae:	4604      	mov	r4, r0
 800aab0:	d155      	bne.n	800ab5e <_malloc_r+0xf2>
 800aab2:	f8d8 4000 	ldr.w	r4, [r8]
 800aab6:	4626      	mov	r6, r4
 800aab8:	2e00      	cmp	r6, #0
 800aaba:	d145      	bne.n	800ab48 <_malloc_r+0xdc>
 800aabc:	2c00      	cmp	r4, #0
 800aabe:	d048      	beq.n	800ab52 <_malloc_r+0xe6>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	4631      	mov	r1, r6
 800aac4:	4638      	mov	r0, r7
 800aac6:	eb04 0903 	add.w	r9, r4, r3
 800aaca:	f000 f93b 	bl	800ad44 <_sbrk_r>
 800aace:	4581      	cmp	r9, r0
 800aad0:	d13f      	bne.n	800ab52 <_malloc_r+0xe6>
 800aad2:	6821      	ldr	r1, [r4, #0]
 800aad4:	1a6d      	subs	r5, r5, r1
 800aad6:	4629      	mov	r1, r5
 800aad8:	4638      	mov	r0, r7
 800aada:	f7ff ffa7 	bl	800aa2c <sbrk_aligned>
 800aade:	3001      	adds	r0, #1
 800aae0:	d037      	beq.n	800ab52 <_malloc_r+0xe6>
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	442b      	add	r3, r5
 800aae6:	6023      	str	r3, [r4, #0]
 800aae8:	f8d8 3000 	ldr.w	r3, [r8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d038      	beq.n	800ab62 <_malloc_r+0xf6>
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	42a2      	cmp	r2, r4
 800aaf4:	d12b      	bne.n	800ab4e <_malloc_r+0xe2>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	605a      	str	r2, [r3, #4]
 800aafa:	e00f      	b.n	800ab1c <_malloc_r+0xb0>
 800aafc:	6822      	ldr	r2, [r4, #0]
 800aafe:	1b52      	subs	r2, r2, r5
 800ab00:	d41f      	bmi.n	800ab42 <_malloc_r+0xd6>
 800ab02:	2a0b      	cmp	r2, #11
 800ab04:	d917      	bls.n	800ab36 <_malloc_r+0xca>
 800ab06:	1961      	adds	r1, r4, r5
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	6025      	str	r5, [r4, #0]
 800ab0c:	bf18      	it	ne
 800ab0e:	6059      	strne	r1, [r3, #4]
 800ab10:	6863      	ldr	r3, [r4, #4]
 800ab12:	bf08      	it	eq
 800ab14:	f8c8 1000 	streq.w	r1, [r8]
 800ab18:	5162      	str	r2, [r4, r5]
 800ab1a:	604b      	str	r3, [r1, #4]
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f104 060b 	add.w	r6, r4, #11
 800ab22:	f000 f829 	bl	800ab78 <__malloc_unlock>
 800ab26:	f026 0607 	bic.w	r6, r6, #7
 800ab2a:	1d23      	adds	r3, r4, #4
 800ab2c:	1af2      	subs	r2, r6, r3
 800ab2e:	d0ae      	beq.n	800aa8e <_malloc_r+0x22>
 800ab30:	1b9b      	subs	r3, r3, r6
 800ab32:	50a3      	str	r3, [r4, r2]
 800ab34:	e7ab      	b.n	800aa8e <_malloc_r+0x22>
 800ab36:	42a3      	cmp	r3, r4
 800ab38:	6862      	ldr	r2, [r4, #4]
 800ab3a:	d1dd      	bne.n	800aaf8 <_malloc_r+0x8c>
 800ab3c:	f8c8 2000 	str.w	r2, [r8]
 800ab40:	e7ec      	b.n	800ab1c <_malloc_r+0xb0>
 800ab42:	4623      	mov	r3, r4
 800ab44:	6864      	ldr	r4, [r4, #4]
 800ab46:	e7ac      	b.n	800aaa2 <_malloc_r+0x36>
 800ab48:	4634      	mov	r4, r6
 800ab4a:	6876      	ldr	r6, [r6, #4]
 800ab4c:	e7b4      	b.n	800aab8 <_malloc_r+0x4c>
 800ab4e:	4613      	mov	r3, r2
 800ab50:	e7cc      	b.n	800aaec <_malloc_r+0x80>
 800ab52:	230c      	movs	r3, #12
 800ab54:	603b      	str	r3, [r7, #0]
 800ab56:	4638      	mov	r0, r7
 800ab58:	f000 f80e 	bl	800ab78 <__malloc_unlock>
 800ab5c:	e797      	b.n	800aa8e <_malloc_r+0x22>
 800ab5e:	6025      	str	r5, [r4, #0]
 800ab60:	e7dc      	b.n	800ab1c <_malloc_r+0xb0>
 800ab62:	605b      	str	r3, [r3, #4]
 800ab64:	deff      	udf	#255	; 0xff
 800ab66:	bf00      	nop
 800ab68:	2000564c 	.word	0x2000564c

0800ab6c <__malloc_lock>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	; (800ab74 <__malloc_lock+0x8>)
 800ab6e:	f000 b923 	b.w	800adb8 <__retarget_lock_acquire_recursive>
 800ab72:	bf00      	nop
 800ab74:	20005790 	.word	0x20005790

0800ab78 <__malloc_unlock>:
 800ab78:	4801      	ldr	r0, [pc, #4]	; (800ab80 <__malloc_unlock+0x8>)
 800ab7a:	f000 b91e 	b.w	800adba <__retarget_lock_release_recursive>
 800ab7e:	bf00      	nop
 800ab80:	20005790 	.word	0x20005790

0800ab84 <_realloc_r>:
 800ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	4680      	mov	r8, r0
 800ab8a:	4614      	mov	r4, r2
 800ab8c:	460e      	mov	r6, r1
 800ab8e:	b921      	cbnz	r1, 800ab9a <_realloc_r+0x16>
 800ab90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab94:	4611      	mov	r1, r2
 800ab96:	f7ff bf69 	b.w	800aa6c <_malloc_r>
 800ab9a:	b92a      	cbnz	r2, 800aba8 <_realloc_r+0x24>
 800ab9c:	f000 f91c 	bl	800add8 <_free_r>
 800aba0:	4625      	mov	r5, r4
 800aba2:	4628      	mov	r0, r5
 800aba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba8:	f000 f962 	bl	800ae70 <_malloc_usable_size_r>
 800abac:	4284      	cmp	r4, r0
 800abae:	4607      	mov	r7, r0
 800abb0:	d802      	bhi.n	800abb8 <_realloc_r+0x34>
 800abb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abb6:	d812      	bhi.n	800abde <_realloc_r+0x5a>
 800abb8:	4621      	mov	r1, r4
 800abba:	4640      	mov	r0, r8
 800abbc:	f7ff ff56 	bl	800aa6c <_malloc_r>
 800abc0:	4605      	mov	r5, r0
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d0ed      	beq.n	800aba2 <_realloc_r+0x1e>
 800abc6:	42bc      	cmp	r4, r7
 800abc8:	4622      	mov	r2, r4
 800abca:	4631      	mov	r1, r6
 800abcc:	bf28      	it	cs
 800abce:	463a      	movcs	r2, r7
 800abd0:	f000 f8f4 	bl	800adbc <memcpy>
 800abd4:	4631      	mov	r1, r6
 800abd6:	4640      	mov	r0, r8
 800abd8:	f000 f8fe 	bl	800add8 <_free_r>
 800abdc:	e7e1      	b.n	800aba2 <_realloc_r+0x1e>
 800abde:	4635      	mov	r5, r6
 800abe0:	e7df      	b.n	800aba2 <_realloc_r+0x1e>

0800abe2 <_vsniprintf_r>:
 800abe2:	b530      	push	{r4, r5, lr}
 800abe4:	4614      	mov	r4, r2
 800abe6:	2c00      	cmp	r4, #0
 800abe8:	b09b      	sub	sp, #108	; 0x6c
 800abea:	4605      	mov	r5, r0
 800abec:	461a      	mov	r2, r3
 800abee:	da05      	bge.n	800abfc <_vsniprintf_r+0x1a>
 800abf0:	238b      	movs	r3, #139	; 0x8b
 800abf2:	6003      	str	r3, [r0, #0]
 800abf4:	f04f 30ff 	mov.w	r0, #4294967295
 800abf8:	b01b      	add	sp, #108	; 0x6c
 800abfa:	bd30      	pop	{r4, r5, pc}
 800abfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ac00:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ac04:	bf14      	ite	ne
 800ac06:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac0a:	4623      	moveq	r3, r4
 800ac0c:	9302      	str	r3, [sp, #8]
 800ac0e:	9305      	str	r3, [sp, #20]
 800ac10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac14:	9100      	str	r1, [sp, #0]
 800ac16:	9104      	str	r1, [sp, #16]
 800ac18:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ac1c:	4669      	mov	r1, sp
 800ac1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ac20:	f000 f988 	bl	800af34 <_svfiprintf_r>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	bfbc      	itt	lt
 800ac28:	238b      	movlt	r3, #139	; 0x8b
 800ac2a:	602b      	strlt	r3, [r5, #0]
 800ac2c:	2c00      	cmp	r4, #0
 800ac2e:	d0e3      	beq.n	800abf8 <_vsniprintf_r+0x16>
 800ac30:	9b00      	ldr	r3, [sp, #0]
 800ac32:	2200      	movs	r2, #0
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e7df      	b.n	800abf8 <_vsniprintf_r+0x16>

0800ac38 <vsniprintf>:
 800ac38:	b507      	push	{r0, r1, r2, lr}
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	460a      	mov	r2, r1
 800ac40:	4601      	mov	r1, r0
 800ac42:	4803      	ldr	r0, [pc, #12]	; (800ac50 <vsniprintf+0x18>)
 800ac44:	6800      	ldr	r0, [r0, #0]
 800ac46:	f7ff ffcc 	bl	800abe2 <_vsniprintf_r>
 800ac4a:	b003      	add	sp, #12
 800ac4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac50:	200000a0 	.word	0x200000a0

0800ac54 <memmove>:
 800ac54:	4288      	cmp	r0, r1
 800ac56:	b510      	push	{r4, lr}
 800ac58:	eb01 0402 	add.w	r4, r1, r2
 800ac5c:	d902      	bls.n	800ac64 <memmove+0x10>
 800ac5e:	4284      	cmp	r4, r0
 800ac60:	4623      	mov	r3, r4
 800ac62:	d807      	bhi.n	800ac74 <memmove+0x20>
 800ac64:	1e43      	subs	r3, r0, #1
 800ac66:	42a1      	cmp	r1, r4
 800ac68:	d008      	beq.n	800ac7c <memmove+0x28>
 800ac6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac72:	e7f8      	b.n	800ac66 <memmove+0x12>
 800ac74:	4402      	add	r2, r0
 800ac76:	4601      	mov	r1, r0
 800ac78:	428a      	cmp	r2, r1
 800ac7a:	d100      	bne.n	800ac7e <memmove+0x2a>
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac86:	e7f7      	b.n	800ac78 <memmove+0x24>

0800ac88 <memset>:
 800ac88:	4402      	add	r2, r0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d100      	bne.n	800ac92 <memset+0xa>
 800ac90:	4770      	bx	lr
 800ac92:	f803 1b01 	strb.w	r1, [r3], #1
 800ac96:	e7f9      	b.n	800ac8c <memset+0x4>

0800ac98 <strncmp>:
 800ac98:	b510      	push	{r4, lr}
 800ac9a:	b16a      	cbz	r2, 800acb8 <strncmp+0x20>
 800ac9c:	3901      	subs	r1, #1
 800ac9e:	1884      	adds	r4, r0, r2
 800aca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d103      	bne.n	800acb4 <strncmp+0x1c>
 800acac:	42a0      	cmp	r0, r4
 800acae:	d001      	beq.n	800acb4 <strncmp+0x1c>
 800acb0:	2a00      	cmp	r2, #0
 800acb2:	d1f5      	bne.n	800aca0 <strncmp+0x8>
 800acb4:	1ad0      	subs	r0, r2, r3
 800acb6:	bd10      	pop	{r4, pc}
 800acb8:	4610      	mov	r0, r2
 800acba:	e7fc      	b.n	800acb6 <strncmp+0x1e>

0800acbc <_raise_r>:
 800acbc:	291f      	cmp	r1, #31
 800acbe:	b538      	push	{r3, r4, r5, lr}
 800acc0:	4604      	mov	r4, r0
 800acc2:	460d      	mov	r5, r1
 800acc4:	d904      	bls.n	800acd0 <_raise_r+0x14>
 800acc6:	2316      	movs	r3, #22
 800acc8:	6003      	str	r3, [r0, #0]
 800acca:	f04f 30ff 	mov.w	r0, #4294967295
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800acd2:	b112      	cbz	r2, 800acda <_raise_r+0x1e>
 800acd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acd8:	b94b      	cbnz	r3, 800acee <_raise_r+0x32>
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 f830 	bl	800ad40 <_getpid_r>
 800ace0:	462a      	mov	r2, r5
 800ace2:	4601      	mov	r1, r0
 800ace4:	4620      	mov	r0, r4
 800ace6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acea:	f000 b817 	b.w	800ad1c <_kill_r>
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d00a      	beq.n	800ad08 <_raise_r+0x4c>
 800acf2:	1c59      	adds	r1, r3, #1
 800acf4:	d103      	bne.n	800acfe <_raise_r+0x42>
 800acf6:	2316      	movs	r3, #22
 800acf8:	6003      	str	r3, [r0, #0]
 800acfa:	2001      	movs	r0, #1
 800acfc:	e7e7      	b.n	800acce <_raise_r+0x12>
 800acfe:	2400      	movs	r4, #0
 800ad00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad04:	4628      	mov	r0, r5
 800ad06:	4798      	blx	r3
 800ad08:	2000      	movs	r0, #0
 800ad0a:	e7e0      	b.n	800acce <_raise_r+0x12>

0800ad0c <raise>:
 800ad0c:	4b02      	ldr	r3, [pc, #8]	; (800ad18 <raise+0xc>)
 800ad0e:	4601      	mov	r1, r0
 800ad10:	6818      	ldr	r0, [r3, #0]
 800ad12:	f7ff bfd3 	b.w	800acbc <_raise_r>
 800ad16:	bf00      	nop
 800ad18:	200000a0 	.word	0x200000a0

0800ad1c <_kill_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d07      	ldr	r5, [pc, #28]	; (800ad3c <_kill_r+0x20>)
 800ad20:	2300      	movs	r3, #0
 800ad22:	4604      	mov	r4, r0
 800ad24:	4608      	mov	r0, r1
 800ad26:	4611      	mov	r1, r2
 800ad28:	602b      	str	r3, [r5, #0]
 800ad2a:	f7fc fdb6 	bl	800789a <_kill>
 800ad2e:	1c43      	adds	r3, r0, #1
 800ad30:	d102      	bne.n	800ad38 <_kill_r+0x1c>
 800ad32:	682b      	ldr	r3, [r5, #0]
 800ad34:	b103      	cbz	r3, 800ad38 <_kill_r+0x1c>
 800ad36:	6023      	str	r3, [r4, #0]
 800ad38:	bd38      	pop	{r3, r4, r5, pc}
 800ad3a:	bf00      	nop
 800ad3c:	2000578c 	.word	0x2000578c

0800ad40 <_getpid_r>:
 800ad40:	f7fc bda3 	b.w	800788a <_getpid>

0800ad44 <_sbrk_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d06      	ldr	r5, [pc, #24]	; (800ad60 <_sbrk_r+0x1c>)
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	602b      	str	r3, [r5, #0]
 800ad50:	f7fc fdbe 	bl	80078d0 <_sbrk>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_sbrk_r+0x1a>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_sbrk_r+0x1a>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	2000578c 	.word	0x2000578c

0800ad64 <__errno>:
 800ad64:	4b01      	ldr	r3, [pc, #4]	; (800ad6c <__errno+0x8>)
 800ad66:	6818      	ldr	r0, [r3, #0]
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	200000a0 	.word	0x200000a0

0800ad70 <__libc_init_array>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	4d0d      	ldr	r5, [pc, #52]	; (800ada8 <__libc_init_array+0x38>)
 800ad74:	4c0d      	ldr	r4, [pc, #52]	; (800adac <__libc_init_array+0x3c>)
 800ad76:	1b64      	subs	r4, r4, r5
 800ad78:	10a4      	asrs	r4, r4, #2
 800ad7a:	2600      	movs	r6, #0
 800ad7c:	42a6      	cmp	r6, r4
 800ad7e:	d109      	bne.n	800ad94 <__libc_init_array+0x24>
 800ad80:	4d0b      	ldr	r5, [pc, #44]	; (800adb0 <__libc_init_array+0x40>)
 800ad82:	4c0c      	ldr	r4, [pc, #48]	; (800adb4 <__libc_init_array+0x44>)
 800ad84:	f000 fb64 	bl	800b450 <_init>
 800ad88:	1b64      	subs	r4, r4, r5
 800ad8a:	10a4      	asrs	r4, r4, #2
 800ad8c:	2600      	movs	r6, #0
 800ad8e:	42a6      	cmp	r6, r4
 800ad90:	d105      	bne.n	800ad9e <__libc_init_array+0x2e>
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad98:	4798      	blx	r3
 800ad9a:	3601      	adds	r6, #1
 800ad9c:	e7ee      	b.n	800ad7c <__libc_init_array+0xc>
 800ad9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada2:	4798      	blx	r3
 800ada4:	3601      	adds	r6, #1
 800ada6:	e7f2      	b.n	800ad8e <__libc_init_array+0x1e>
 800ada8:	0800b9a0 	.word	0x0800b9a0
 800adac:	0800b9a0 	.word	0x0800b9a0
 800adb0:	0800b9a0 	.word	0x0800b9a0
 800adb4:	0800b9a8 	.word	0x0800b9a8

0800adb8 <__retarget_lock_acquire_recursive>:
 800adb8:	4770      	bx	lr

0800adba <__retarget_lock_release_recursive>:
 800adba:	4770      	bx	lr

0800adbc <memcpy>:
 800adbc:	440a      	add	r2, r1
 800adbe:	4291      	cmp	r1, r2
 800adc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800adc4:	d100      	bne.n	800adc8 <memcpy+0xc>
 800adc6:	4770      	bx	lr
 800adc8:	b510      	push	{r4, lr}
 800adca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800add2:	4291      	cmp	r1, r2
 800add4:	d1f9      	bne.n	800adca <memcpy+0xe>
 800add6:	bd10      	pop	{r4, pc}

0800add8 <_free_r>:
 800add8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adda:	2900      	cmp	r1, #0
 800addc:	d044      	beq.n	800ae68 <_free_r+0x90>
 800adde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ade2:	9001      	str	r0, [sp, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f1a1 0404 	sub.w	r4, r1, #4
 800adea:	bfb8      	it	lt
 800adec:	18e4      	addlt	r4, r4, r3
 800adee:	f7ff febd 	bl	800ab6c <__malloc_lock>
 800adf2:	4a1e      	ldr	r2, [pc, #120]	; (800ae6c <_free_r+0x94>)
 800adf4:	9801      	ldr	r0, [sp, #4]
 800adf6:	6813      	ldr	r3, [r2, #0]
 800adf8:	b933      	cbnz	r3, 800ae08 <_free_r+0x30>
 800adfa:	6063      	str	r3, [r4, #4]
 800adfc:	6014      	str	r4, [r2, #0]
 800adfe:	b003      	add	sp, #12
 800ae00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae04:	f7ff beb8 	b.w	800ab78 <__malloc_unlock>
 800ae08:	42a3      	cmp	r3, r4
 800ae0a:	d908      	bls.n	800ae1e <_free_r+0x46>
 800ae0c:	6825      	ldr	r5, [r4, #0]
 800ae0e:	1961      	adds	r1, r4, r5
 800ae10:	428b      	cmp	r3, r1
 800ae12:	bf01      	itttt	eq
 800ae14:	6819      	ldreq	r1, [r3, #0]
 800ae16:	685b      	ldreq	r3, [r3, #4]
 800ae18:	1949      	addeq	r1, r1, r5
 800ae1a:	6021      	streq	r1, [r4, #0]
 800ae1c:	e7ed      	b.n	800adfa <_free_r+0x22>
 800ae1e:	461a      	mov	r2, r3
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	b10b      	cbz	r3, 800ae28 <_free_r+0x50>
 800ae24:	42a3      	cmp	r3, r4
 800ae26:	d9fa      	bls.n	800ae1e <_free_r+0x46>
 800ae28:	6811      	ldr	r1, [r2, #0]
 800ae2a:	1855      	adds	r5, r2, r1
 800ae2c:	42a5      	cmp	r5, r4
 800ae2e:	d10b      	bne.n	800ae48 <_free_r+0x70>
 800ae30:	6824      	ldr	r4, [r4, #0]
 800ae32:	4421      	add	r1, r4
 800ae34:	1854      	adds	r4, r2, r1
 800ae36:	42a3      	cmp	r3, r4
 800ae38:	6011      	str	r1, [r2, #0]
 800ae3a:	d1e0      	bne.n	800adfe <_free_r+0x26>
 800ae3c:	681c      	ldr	r4, [r3, #0]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	6053      	str	r3, [r2, #4]
 800ae42:	440c      	add	r4, r1
 800ae44:	6014      	str	r4, [r2, #0]
 800ae46:	e7da      	b.n	800adfe <_free_r+0x26>
 800ae48:	d902      	bls.n	800ae50 <_free_r+0x78>
 800ae4a:	230c      	movs	r3, #12
 800ae4c:	6003      	str	r3, [r0, #0]
 800ae4e:	e7d6      	b.n	800adfe <_free_r+0x26>
 800ae50:	6825      	ldr	r5, [r4, #0]
 800ae52:	1961      	adds	r1, r4, r5
 800ae54:	428b      	cmp	r3, r1
 800ae56:	bf04      	itt	eq
 800ae58:	6819      	ldreq	r1, [r3, #0]
 800ae5a:	685b      	ldreq	r3, [r3, #4]
 800ae5c:	6063      	str	r3, [r4, #4]
 800ae5e:	bf04      	itt	eq
 800ae60:	1949      	addeq	r1, r1, r5
 800ae62:	6021      	streq	r1, [r4, #0]
 800ae64:	6054      	str	r4, [r2, #4]
 800ae66:	e7ca      	b.n	800adfe <_free_r+0x26>
 800ae68:	b003      	add	sp, #12
 800ae6a:	bd30      	pop	{r4, r5, pc}
 800ae6c:	2000564c 	.word	0x2000564c

0800ae70 <_malloc_usable_size_r>:
 800ae70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae74:	1f18      	subs	r0, r3, #4
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bfbc      	itt	lt
 800ae7a:	580b      	ldrlt	r3, [r1, r0]
 800ae7c:	18c0      	addlt	r0, r0, r3
 800ae7e:	4770      	bx	lr

0800ae80 <__ssputs_r>:
 800ae80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae84:	688e      	ldr	r6, [r1, #8]
 800ae86:	461f      	mov	r7, r3
 800ae88:	42be      	cmp	r6, r7
 800ae8a:	680b      	ldr	r3, [r1, #0]
 800ae8c:	4682      	mov	sl, r0
 800ae8e:	460c      	mov	r4, r1
 800ae90:	4690      	mov	r8, r2
 800ae92:	d82c      	bhi.n	800aeee <__ssputs_r+0x6e>
 800ae94:	898a      	ldrh	r2, [r1, #12]
 800ae96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae9a:	d026      	beq.n	800aeea <__ssputs_r+0x6a>
 800ae9c:	6965      	ldr	r5, [r4, #20]
 800ae9e:	6909      	ldr	r1, [r1, #16]
 800aea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aea4:	eba3 0901 	sub.w	r9, r3, r1
 800aea8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeac:	1c7b      	adds	r3, r7, #1
 800aeae:	444b      	add	r3, r9
 800aeb0:	106d      	asrs	r5, r5, #1
 800aeb2:	429d      	cmp	r5, r3
 800aeb4:	bf38      	it	cc
 800aeb6:	461d      	movcc	r5, r3
 800aeb8:	0553      	lsls	r3, r2, #21
 800aeba:	d527      	bpl.n	800af0c <__ssputs_r+0x8c>
 800aebc:	4629      	mov	r1, r5
 800aebe:	f7ff fdd5 	bl	800aa6c <_malloc_r>
 800aec2:	4606      	mov	r6, r0
 800aec4:	b360      	cbz	r0, 800af20 <__ssputs_r+0xa0>
 800aec6:	6921      	ldr	r1, [r4, #16]
 800aec8:	464a      	mov	r2, r9
 800aeca:	f7ff ff77 	bl	800adbc <memcpy>
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aed8:	81a3      	strh	r3, [r4, #12]
 800aeda:	6126      	str	r6, [r4, #16]
 800aedc:	6165      	str	r5, [r4, #20]
 800aede:	444e      	add	r6, r9
 800aee0:	eba5 0509 	sub.w	r5, r5, r9
 800aee4:	6026      	str	r6, [r4, #0]
 800aee6:	60a5      	str	r5, [r4, #8]
 800aee8:	463e      	mov	r6, r7
 800aeea:	42be      	cmp	r6, r7
 800aeec:	d900      	bls.n	800aef0 <__ssputs_r+0x70>
 800aeee:	463e      	mov	r6, r7
 800aef0:	6820      	ldr	r0, [r4, #0]
 800aef2:	4632      	mov	r2, r6
 800aef4:	4641      	mov	r1, r8
 800aef6:	f7ff fead 	bl	800ac54 <memmove>
 800aefa:	68a3      	ldr	r3, [r4, #8]
 800aefc:	1b9b      	subs	r3, r3, r6
 800aefe:	60a3      	str	r3, [r4, #8]
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	4433      	add	r3, r6
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	2000      	movs	r0, #0
 800af08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0c:	462a      	mov	r2, r5
 800af0e:	f7ff fe39 	bl	800ab84 <_realloc_r>
 800af12:	4606      	mov	r6, r0
 800af14:	2800      	cmp	r0, #0
 800af16:	d1e0      	bne.n	800aeda <__ssputs_r+0x5a>
 800af18:	6921      	ldr	r1, [r4, #16]
 800af1a:	4650      	mov	r0, sl
 800af1c:	f7ff ff5c 	bl	800add8 <_free_r>
 800af20:	230c      	movs	r3, #12
 800af22:	f8ca 3000 	str.w	r3, [sl]
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	f04f 30ff 	mov.w	r0, #4294967295
 800af32:	e7e9      	b.n	800af08 <__ssputs_r+0x88>

0800af34 <_svfiprintf_r>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	4698      	mov	r8, r3
 800af3a:	898b      	ldrh	r3, [r1, #12]
 800af3c:	061b      	lsls	r3, r3, #24
 800af3e:	b09d      	sub	sp, #116	; 0x74
 800af40:	4607      	mov	r7, r0
 800af42:	460d      	mov	r5, r1
 800af44:	4614      	mov	r4, r2
 800af46:	d50e      	bpl.n	800af66 <_svfiprintf_r+0x32>
 800af48:	690b      	ldr	r3, [r1, #16]
 800af4a:	b963      	cbnz	r3, 800af66 <_svfiprintf_r+0x32>
 800af4c:	2140      	movs	r1, #64	; 0x40
 800af4e:	f7ff fd8d 	bl	800aa6c <_malloc_r>
 800af52:	6028      	str	r0, [r5, #0]
 800af54:	6128      	str	r0, [r5, #16]
 800af56:	b920      	cbnz	r0, 800af62 <_svfiprintf_r+0x2e>
 800af58:	230c      	movs	r3, #12
 800af5a:	603b      	str	r3, [r7, #0]
 800af5c:	f04f 30ff 	mov.w	r0, #4294967295
 800af60:	e0d0      	b.n	800b104 <_svfiprintf_r+0x1d0>
 800af62:	2340      	movs	r3, #64	; 0x40
 800af64:	616b      	str	r3, [r5, #20]
 800af66:	2300      	movs	r3, #0
 800af68:	9309      	str	r3, [sp, #36]	; 0x24
 800af6a:	2320      	movs	r3, #32
 800af6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af70:	f8cd 800c 	str.w	r8, [sp, #12]
 800af74:	2330      	movs	r3, #48	; 0x30
 800af76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b11c <_svfiprintf_r+0x1e8>
 800af7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af7e:	f04f 0901 	mov.w	r9, #1
 800af82:	4623      	mov	r3, r4
 800af84:	469a      	mov	sl, r3
 800af86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af8a:	b10a      	cbz	r2, 800af90 <_svfiprintf_r+0x5c>
 800af8c:	2a25      	cmp	r2, #37	; 0x25
 800af8e:	d1f9      	bne.n	800af84 <_svfiprintf_r+0x50>
 800af90:	ebba 0b04 	subs.w	fp, sl, r4
 800af94:	d00b      	beq.n	800afae <_svfiprintf_r+0x7a>
 800af96:	465b      	mov	r3, fp
 800af98:	4622      	mov	r2, r4
 800af9a:	4629      	mov	r1, r5
 800af9c:	4638      	mov	r0, r7
 800af9e:	f7ff ff6f 	bl	800ae80 <__ssputs_r>
 800afa2:	3001      	adds	r0, #1
 800afa4:	f000 80a9 	beq.w	800b0fa <_svfiprintf_r+0x1c6>
 800afa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afaa:	445a      	add	r2, fp
 800afac:	9209      	str	r2, [sp, #36]	; 0x24
 800afae:	f89a 3000 	ldrb.w	r3, [sl]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f000 80a1 	beq.w	800b0fa <_svfiprintf_r+0x1c6>
 800afb8:	2300      	movs	r3, #0
 800afba:	f04f 32ff 	mov.w	r2, #4294967295
 800afbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afc2:	f10a 0a01 	add.w	sl, sl, #1
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	9307      	str	r3, [sp, #28]
 800afca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afce:	931a      	str	r3, [sp, #104]	; 0x68
 800afd0:	4654      	mov	r4, sl
 800afd2:	2205      	movs	r2, #5
 800afd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd8:	4850      	ldr	r0, [pc, #320]	; (800b11c <_svfiprintf_r+0x1e8>)
 800afda:	f7f5 f8f9 	bl	80001d0 <memchr>
 800afde:	9a04      	ldr	r2, [sp, #16]
 800afe0:	b9d8      	cbnz	r0, 800b01a <_svfiprintf_r+0xe6>
 800afe2:	06d0      	lsls	r0, r2, #27
 800afe4:	bf44      	itt	mi
 800afe6:	2320      	movmi	r3, #32
 800afe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afec:	0711      	lsls	r1, r2, #28
 800afee:	bf44      	itt	mi
 800aff0:	232b      	movmi	r3, #43	; 0x2b
 800aff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff6:	f89a 3000 	ldrb.w	r3, [sl]
 800affa:	2b2a      	cmp	r3, #42	; 0x2a
 800affc:	d015      	beq.n	800b02a <_svfiprintf_r+0xf6>
 800affe:	9a07      	ldr	r2, [sp, #28]
 800b000:	4654      	mov	r4, sl
 800b002:	2000      	movs	r0, #0
 800b004:	f04f 0c0a 	mov.w	ip, #10
 800b008:	4621      	mov	r1, r4
 800b00a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b00e:	3b30      	subs	r3, #48	; 0x30
 800b010:	2b09      	cmp	r3, #9
 800b012:	d94d      	bls.n	800b0b0 <_svfiprintf_r+0x17c>
 800b014:	b1b0      	cbz	r0, 800b044 <_svfiprintf_r+0x110>
 800b016:	9207      	str	r2, [sp, #28]
 800b018:	e014      	b.n	800b044 <_svfiprintf_r+0x110>
 800b01a:	eba0 0308 	sub.w	r3, r0, r8
 800b01e:	fa09 f303 	lsl.w	r3, r9, r3
 800b022:	4313      	orrs	r3, r2
 800b024:	9304      	str	r3, [sp, #16]
 800b026:	46a2      	mov	sl, r4
 800b028:	e7d2      	b.n	800afd0 <_svfiprintf_r+0x9c>
 800b02a:	9b03      	ldr	r3, [sp, #12]
 800b02c:	1d19      	adds	r1, r3, #4
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	9103      	str	r1, [sp, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	bfbb      	ittet	lt
 800b036:	425b      	neglt	r3, r3
 800b038:	f042 0202 	orrlt.w	r2, r2, #2
 800b03c:	9307      	strge	r3, [sp, #28]
 800b03e:	9307      	strlt	r3, [sp, #28]
 800b040:	bfb8      	it	lt
 800b042:	9204      	strlt	r2, [sp, #16]
 800b044:	7823      	ldrb	r3, [r4, #0]
 800b046:	2b2e      	cmp	r3, #46	; 0x2e
 800b048:	d10c      	bne.n	800b064 <_svfiprintf_r+0x130>
 800b04a:	7863      	ldrb	r3, [r4, #1]
 800b04c:	2b2a      	cmp	r3, #42	; 0x2a
 800b04e:	d134      	bne.n	800b0ba <_svfiprintf_r+0x186>
 800b050:	9b03      	ldr	r3, [sp, #12]
 800b052:	1d1a      	adds	r2, r3, #4
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	9203      	str	r2, [sp, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	bfb8      	it	lt
 800b05c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b060:	3402      	adds	r4, #2
 800b062:	9305      	str	r3, [sp, #20]
 800b064:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b12c <_svfiprintf_r+0x1f8>
 800b068:	7821      	ldrb	r1, [r4, #0]
 800b06a:	2203      	movs	r2, #3
 800b06c:	4650      	mov	r0, sl
 800b06e:	f7f5 f8af 	bl	80001d0 <memchr>
 800b072:	b138      	cbz	r0, 800b084 <_svfiprintf_r+0x150>
 800b074:	9b04      	ldr	r3, [sp, #16]
 800b076:	eba0 000a 	sub.w	r0, r0, sl
 800b07a:	2240      	movs	r2, #64	; 0x40
 800b07c:	4082      	lsls	r2, r0
 800b07e:	4313      	orrs	r3, r2
 800b080:	3401      	adds	r4, #1
 800b082:	9304      	str	r3, [sp, #16]
 800b084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b088:	4825      	ldr	r0, [pc, #148]	; (800b120 <_svfiprintf_r+0x1ec>)
 800b08a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b08e:	2206      	movs	r2, #6
 800b090:	f7f5 f89e 	bl	80001d0 <memchr>
 800b094:	2800      	cmp	r0, #0
 800b096:	d038      	beq.n	800b10a <_svfiprintf_r+0x1d6>
 800b098:	4b22      	ldr	r3, [pc, #136]	; (800b124 <_svfiprintf_r+0x1f0>)
 800b09a:	bb1b      	cbnz	r3, 800b0e4 <_svfiprintf_r+0x1b0>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	3307      	adds	r3, #7
 800b0a0:	f023 0307 	bic.w	r3, r3, #7
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	9303      	str	r3, [sp, #12]
 800b0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0aa:	4433      	add	r3, r6
 800b0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ae:	e768      	b.n	800af82 <_svfiprintf_r+0x4e>
 800b0b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	e7a6      	b.n	800b008 <_svfiprintf_r+0xd4>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	3401      	adds	r4, #1
 800b0be:	9305      	str	r3, [sp, #20]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f04f 0c0a 	mov.w	ip, #10
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0cc:	3a30      	subs	r2, #48	; 0x30
 800b0ce:	2a09      	cmp	r2, #9
 800b0d0:	d903      	bls.n	800b0da <_svfiprintf_r+0x1a6>
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0c6      	beq.n	800b064 <_svfiprintf_r+0x130>
 800b0d6:	9105      	str	r1, [sp, #20]
 800b0d8:	e7c4      	b.n	800b064 <_svfiprintf_r+0x130>
 800b0da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0de:	4604      	mov	r4, r0
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e7f0      	b.n	800b0c6 <_svfiprintf_r+0x192>
 800b0e4:	ab03      	add	r3, sp, #12
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	4b0f      	ldr	r3, [pc, #60]	; (800b128 <_svfiprintf_r+0x1f4>)
 800b0ec:	a904      	add	r1, sp, #16
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	f3af 8000 	nop.w
 800b0f4:	1c42      	adds	r2, r0, #1
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	d1d6      	bne.n	800b0a8 <_svfiprintf_r+0x174>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	065b      	lsls	r3, r3, #25
 800b0fe:	f53f af2d 	bmi.w	800af5c <_svfiprintf_r+0x28>
 800b102:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b104:	b01d      	add	sp, #116	; 0x74
 800b106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10a:	ab03      	add	r3, sp, #12
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	462a      	mov	r2, r5
 800b110:	4b05      	ldr	r3, [pc, #20]	; (800b128 <_svfiprintf_r+0x1f4>)
 800b112:	a904      	add	r1, sp, #16
 800b114:	4638      	mov	r0, r7
 800b116:	f000 f879 	bl	800b20c <_printf_i>
 800b11a:	e7eb      	b.n	800b0f4 <_svfiprintf_r+0x1c0>
 800b11c:	0800b962 	.word	0x0800b962
 800b120:	0800b96c 	.word	0x0800b96c
 800b124:	00000000 	.word	0x00000000
 800b128:	0800ae81 	.word	0x0800ae81
 800b12c:	0800b968 	.word	0x0800b968

0800b130 <_printf_common>:
 800b130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b134:	4616      	mov	r6, r2
 800b136:	4699      	mov	r9, r3
 800b138:	688a      	ldr	r2, [r1, #8]
 800b13a:	690b      	ldr	r3, [r1, #16]
 800b13c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b140:	4293      	cmp	r3, r2
 800b142:	bfb8      	it	lt
 800b144:	4613      	movlt	r3, r2
 800b146:	6033      	str	r3, [r6, #0]
 800b148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b14c:	4607      	mov	r7, r0
 800b14e:	460c      	mov	r4, r1
 800b150:	b10a      	cbz	r2, 800b156 <_printf_common+0x26>
 800b152:	3301      	adds	r3, #1
 800b154:	6033      	str	r3, [r6, #0]
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	0699      	lsls	r1, r3, #26
 800b15a:	bf42      	ittt	mi
 800b15c:	6833      	ldrmi	r3, [r6, #0]
 800b15e:	3302      	addmi	r3, #2
 800b160:	6033      	strmi	r3, [r6, #0]
 800b162:	6825      	ldr	r5, [r4, #0]
 800b164:	f015 0506 	ands.w	r5, r5, #6
 800b168:	d106      	bne.n	800b178 <_printf_common+0x48>
 800b16a:	f104 0a19 	add.w	sl, r4, #25
 800b16e:	68e3      	ldr	r3, [r4, #12]
 800b170:	6832      	ldr	r2, [r6, #0]
 800b172:	1a9b      	subs	r3, r3, r2
 800b174:	42ab      	cmp	r3, r5
 800b176:	dc26      	bgt.n	800b1c6 <_printf_common+0x96>
 800b178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b17c:	1e13      	subs	r3, r2, #0
 800b17e:	6822      	ldr	r2, [r4, #0]
 800b180:	bf18      	it	ne
 800b182:	2301      	movne	r3, #1
 800b184:	0692      	lsls	r2, r2, #26
 800b186:	d42b      	bmi.n	800b1e0 <_printf_common+0xb0>
 800b188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b18c:	4649      	mov	r1, r9
 800b18e:	4638      	mov	r0, r7
 800b190:	47c0      	blx	r8
 800b192:	3001      	adds	r0, #1
 800b194:	d01e      	beq.n	800b1d4 <_printf_common+0xa4>
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	6922      	ldr	r2, [r4, #16]
 800b19a:	f003 0306 	and.w	r3, r3, #6
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	bf02      	ittt	eq
 800b1a2:	68e5      	ldreq	r5, [r4, #12]
 800b1a4:	6833      	ldreq	r3, [r6, #0]
 800b1a6:	1aed      	subeq	r5, r5, r3
 800b1a8:	68a3      	ldr	r3, [r4, #8]
 800b1aa:	bf0c      	ite	eq
 800b1ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1b0:	2500      	movne	r5, #0
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	bfc4      	itt	gt
 800b1b6:	1a9b      	subgt	r3, r3, r2
 800b1b8:	18ed      	addgt	r5, r5, r3
 800b1ba:	2600      	movs	r6, #0
 800b1bc:	341a      	adds	r4, #26
 800b1be:	42b5      	cmp	r5, r6
 800b1c0:	d11a      	bne.n	800b1f8 <_printf_common+0xc8>
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	e008      	b.n	800b1d8 <_printf_common+0xa8>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4652      	mov	r2, sl
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	47c0      	blx	r8
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d103      	bne.n	800b1dc <_printf_common+0xac>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1dc:	3501      	adds	r5, #1
 800b1de:	e7c6      	b.n	800b16e <_printf_common+0x3e>
 800b1e0:	18e1      	adds	r1, r4, r3
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	2030      	movs	r0, #48	; 0x30
 800b1e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1ea:	4422      	add	r2, r4
 800b1ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1f4:	3302      	adds	r3, #2
 800b1f6:	e7c7      	b.n	800b188 <_printf_common+0x58>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	4622      	mov	r2, r4
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	4638      	mov	r0, r7
 800b200:	47c0      	blx	r8
 800b202:	3001      	adds	r0, #1
 800b204:	d0e6      	beq.n	800b1d4 <_printf_common+0xa4>
 800b206:	3601      	adds	r6, #1
 800b208:	e7d9      	b.n	800b1be <_printf_common+0x8e>
	...

0800b20c <_printf_i>:
 800b20c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b210:	7e0f      	ldrb	r7, [r1, #24]
 800b212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b214:	2f78      	cmp	r7, #120	; 0x78
 800b216:	4691      	mov	r9, r2
 800b218:	4680      	mov	r8, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	469a      	mov	sl, r3
 800b21e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b222:	d807      	bhi.n	800b234 <_printf_i+0x28>
 800b224:	2f62      	cmp	r7, #98	; 0x62
 800b226:	d80a      	bhi.n	800b23e <_printf_i+0x32>
 800b228:	2f00      	cmp	r7, #0
 800b22a:	f000 80d4 	beq.w	800b3d6 <_printf_i+0x1ca>
 800b22e:	2f58      	cmp	r7, #88	; 0x58
 800b230:	f000 80c0 	beq.w	800b3b4 <_printf_i+0x1a8>
 800b234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b23c:	e03a      	b.n	800b2b4 <_printf_i+0xa8>
 800b23e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b242:	2b15      	cmp	r3, #21
 800b244:	d8f6      	bhi.n	800b234 <_printf_i+0x28>
 800b246:	a101      	add	r1, pc, #4	; (adr r1, 800b24c <_printf_i+0x40>)
 800b248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b24c:	0800b2a5 	.word	0x0800b2a5
 800b250:	0800b2b9 	.word	0x0800b2b9
 800b254:	0800b235 	.word	0x0800b235
 800b258:	0800b235 	.word	0x0800b235
 800b25c:	0800b235 	.word	0x0800b235
 800b260:	0800b235 	.word	0x0800b235
 800b264:	0800b2b9 	.word	0x0800b2b9
 800b268:	0800b235 	.word	0x0800b235
 800b26c:	0800b235 	.word	0x0800b235
 800b270:	0800b235 	.word	0x0800b235
 800b274:	0800b235 	.word	0x0800b235
 800b278:	0800b3bd 	.word	0x0800b3bd
 800b27c:	0800b2e5 	.word	0x0800b2e5
 800b280:	0800b377 	.word	0x0800b377
 800b284:	0800b235 	.word	0x0800b235
 800b288:	0800b235 	.word	0x0800b235
 800b28c:	0800b3df 	.word	0x0800b3df
 800b290:	0800b235 	.word	0x0800b235
 800b294:	0800b2e5 	.word	0x0800b2e5
 800b298:	0800b235 	.word	0x0800b235
 800b29c:	0800b235 	.word	0x0800b235
 800b2a0:	0800b37f 	.word	0x0800b37f
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	1d1a      	adds	r2, r3, #4
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	602a      	str	r2, [r5, #0]
 800b2ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e09f      	b.n	800b3f8 <_printf_i+0x1ec>
 800b2b8:	6820      	ldr	r0, [r4, #0]
 800b2ba:	682b      	ldr	r3, [r5, #0]
 800b2bc:	0607      	lsls	r7, r0, #24
 800b2be:	f103 0104 	add.w	r1, r3, #4
 800b2c2:	6029      	str	r1, [r5, #0]
 800b2c4:	d501      	bpl.n	800b2ca <_printf_i+0xbe>
 800b2c6:	681e      	ldr	r6, [r3, #0]
 800b2c8:	e003      	b.n	800b2d2 <_printf_i+0xc6>
 800b2ca:	0646      	lsls	r6, r0, #25
 800b2cc:	d5fb      	bpl.n	800b2c6 <_printf_i+0xba>
 800b2ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b2d2:	2e00      	cmp	r6, #0
 800b2d4:	da03      	bge.n	800b2de <_printf_i+0xd2>
 800b2d6:	232d      	movs	r3, #45	; 0x2d
 800b2d8:	4276      	negs	r6, r6
 800b2da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2de:	485a      	ldr	r0, [pc, #360]	; (800b448 <_printf_i+0x23c>)
 800b2e0:	230a      	movs	r3, #10
 800b2e2:	e012      	b.n	800b30a <_printf_i+0xfe>
 800b2e4:	682b      	ldr	r3, [r5, #0]
 800b2e6:	6820      	ldr	r0, [r4, #0]
 800b2e8:	1d19      	adds	r1, r3, #4
 800b2ea:	6029      	str	r1, [r5, #0]
 800b2ec:	0605      	lsls	r5, r0, #24
 800b2ee:	d501      	bpl.n	800b2f4 <_printf_i+0xe8>
 800b2f0:	681e      	ldr	r6, [r3, #0]
 800b2f2:	e002      	b.n	800b2fa <_printf_i+0xee>
 800b2f4:	0641      	lsls	r1, r0, #25
 800b2f6:	d5fb      	bpl.n	800b2f0 <_printf_i+0xe4>
 800b2f8:	881e      	ldrh	r6, [r3, #0]
 800b2fa:	4853      	ldr	r0, [pc, #332]	; (800b448 <_printf_i+0x23c>)
 800b2fc:	2f6f      	cmp	r7, #111	; 0x6f
 800b2fe:	bf0c      	ite	eq
 800b300:	2308      	moveq	r3, #8
 800b302:	230a      	movne	r3, #10
 800b304:	2100      	movs	r1, #0
 800b306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b30a:	6865      	ldr	r5, [r4, #4]
 800b30c:	60a5      	str	r5, [r4, #8]
 800b30e:	2d00      	cmp	r5, #0
 800b310:	bfa2      	ittt	ge
 800b312:	6821      	ldrge	r1, [r4, #0]
 800b314:	f021 0104 	bicge.w	r1, r1, #4
 800b318:	6021      	strge	r1, [r4, #0]
 800b31a:	b90e      	cbnz	r6, 800b320 <_printf_i+0x114>
 800b31c:	2d00      	cmp	r5, #0
 800b31e:	d04b      	beq.n	800b3b8 <_printf_i+0x1ac>
 800b320:	4615      	mov	r5, r2
 800b322:	fbb6 f1f3 	udiv	r1, r6, r3
 800b326:	fb03 6711 	mls	r7, r3, r1, r6
 800b32a:	5dc7      	ldrb	r7, [r0, r7]
 800b32c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b330:	4637      	mov	r7, r6
 800b332:	42bb      	cmp	r3, r7
 800b334:	460e      	mov	r6, r1
 800b336:	d9f4      	bls.n	800b322 <_printf_i+0x116>
 800b338:	2b08      	cmp	r3, #8
 800b33a:	d10b      	bne.n	800b354 <_printf_i+0x148>
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	07de      	lsls	r6, r3, #31
 800b340:	d508      	bpl.n	800b354 <_printf_i+0x148>
 800b342:	6923      	ldr	r3, [r4, #16]
 800b344:	6861      	ldr	r1, [r4, #4]
 800b346:	4299      	cmp	r1, r3
 800b348:	bfde      	ittt	le
 800b34a:	2330      	movle	r3, #48	; 0x30
 800b34c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b350:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b354:	1b52      	subs	r2, r2, r5
 800b356:	6122      	str	r2, [r4, #16]
 800b358:	f8cd a000 	str.w	sl, [sp]
 800b35c:	464b      	mov	r3, r9
 800b35e:	aa03      	add	r2, sp, #12
 800b360:	4621      	mov	r1, r4
 800b362:	4640      	mov	r0, r8
 800b364:	f7ff fee4 	bl	800b130 <_printf_common>
 800b368:	3001      	adds	r0, #1
 800b36a:	d14a      	bne.n	800b402 <_printf_i+0x1f6>
 800b36c:	f04f 30ff 	mov.w	r0, #4294967295
 800b370:	b004      	add	sp, #16
 800b372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	f043 0320 	orr.w	r3, r3, #32
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	4833      	ldr	r0, [pc, #204]	; (800b44c <_printf_i+0x240>)
 800b380:	2778      	movs	r7, #120	; 0x78
 800b382:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	6829      	ldr	r1, [r5, #0]
 800b38a:	061f      	lsls	r7, r3, #24
 800b38c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b390:	d402      	bmi.n	800b398 <_printf_i+0x18c>
 800b392:	065f      	lsls	r7, r3, #25
 800b394:	bf48      	it	mi
 800b396:	b2b6      	uxthmi	r6, r6
 800b398:	07df      	lsls	r7, r3, #31
 800b39a:	bf48      	it	mi
 800b39c:	f043 0320 	orrmi.w	r3, r3, #32
 800b3a0:	6029      	str	r1, [r5, #0]
 800b3a2:	bf48      	it	mi
 800b3a4:	6023      	strmi	r3, [r4, #0]
 800b3a6:	b91e      	cbnz	r6, 800b3b0 <_printf_i+0x1a4>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	f023 0320 	bic.w	r3, r3, #32
 800b3ae:	6023      	str	r3, [r4, #0]
 800b3b0:	2310      	movs	r3, #16
 800b3b2:	e7a7      	b.n	800b304 <_printf_i+0xf8>
 800b3b4:	4824      	ldr	r0, [pc, #144]	; (800b448 <_printf_i+0x23c>)
 800b3b6:	e7e4      	b.n	800b382 <_printf_i+0x176>
 800b3b8:	4615      	mov	r5, r2
 800b3ba:	e7bd      	b.n	800b338 <_printf_i+0x12c>
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	6826      	ldr	r6, [r4, #0]
 800b3c0:	6961      	ldr	r1, [r4, #20]
 800b3c2:	1d18      	adds	r0, r3, #4
 800b3c4:	6028      	str	r0, [r5, #0]
 800b3c6:	0635      	lsls	r5, r6, #24
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	d501      	bpl.n	800b3d0 <_printf_i+0x1c4>
 800b3cc:	6019      	str	r1, [r3, #0]
 800b3ce:	e002      	b.n	800b3d6 <_printf_i+0x1ca>
 800b3d0:	0670      	lsls	r0, r6, #25
 800b3d2:	d5fb      	bpl.n	800b3cc <_printf_i+0x1c0>
 800b3d4:	8019      	strh	r1, [r3, #0]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	6123      	str	r3, [r4, #16]
 800b3da:	4615      	mov	r5, r2
 800b3dc:	e7bc      	b.n	800b358 <_printf_i+0x14c>
 800b3de:	682b      	ldr	r3, [r5, #0]
 800b3e0:	1d1a      	adds	r2, r3, #4
 800b3e2:	602a      	str	r2, [r5, #0]
 800b3e4:	681d      	ldr	r5, [r3, #0]
 800b3e6:	6862      	ldr	r2, [r4, #4]
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f7f4 fef0 	bl	80001d0 <memchr>
 800b3f0:	b108      	cbz	r0, 800b3f6 <_printf_i+0x1ea>
 800b3f2:	1b40      	subs	r0, r0, r5
 800b3f4:	6060      	str	r0, [r4, #4]
 800b3f6:	6863      	ldr	r3, [r4, #4]
 800b3f8:	6123      	str	r3, [r4, #16]
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b400:	e7aa      	b.n	800b358 <_printf_i+0x14c>
 800b402:	6923      	ldr	r3, [r4, #16]
 800b404:	462a      	mov	r2, r5
 800b406:	4649      	mov	r1, r9
 800b408:	4640      	mov	r0, r8
 800b40a:	47d0      	blx	sl
 800b40c:	3001      	adds	r0, #1
 800b40e:	d0ad      	beq.n	800b36c <_printf_i+0x160>
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	079b      	lsls	r3, r3, #30
 800b414:	d413      	bmi.n	800b43e <_printf_i+0x232>
 800b416:	68e0      	ldr	r0, [r4, #12]
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	4298      	cmp	r0, r3
 800b41c:	bfb8      	it	lt
 800b41e:	4618      	movlt	r0, r3
 800b420:	e7a6      	b.n	800b370 <_printf_i+0x164>
 800b422:	2301      	movs	r3, #1
 800b424:	4632      	mov	r2, r6
 800b426:	4649      	mov	r1, r9
 800b428:	4640      	mov	r0, r8
 800b42a:	47d0      	blx	sl
 800b42c:	3001      	adds	r0, #1
 800b42e:	d09d      	beq.n	800b36c <_printf_i+0x160>
 800b430:	3501      	adds	r5, #1
 800b432:	68e3      	ldr	r3, [r4, #12]
 800b434:	9903      	ldr	r1, [sp, #12]
 800b436:	1a5b      	subs	r3, r3, r1
 800b438:	42ab      	cmp	r3, r5
 800b43a:	dcf2      	bgt.n	800b422 <_printf_i+0x216>
 800b43c:	e7eb      	b.n	800b416 <_printf_i+0x20a>
 800b43e:	2500      	movs	r5, #0
 800b440:	f104 0619 	add.w	r6, r4, #25
 800b444:	e7f5      	b.n	800b432 <_printf_i+0x226>
 800b446:	bf00      	nop
 800b448:	0800b973 	.word	0x0800b973
 800b44c:	0800b984 	.word	0x0800b984

0800b450 <_init>:
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	bf00      	nop
 800b454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b456:	bc08      	pop	{r3}
 800b458:	469e      	mov	lr, r3
 800b45a:	4770      	bx	lr

0800b45c <_fini>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	bf00      	nop
 800b460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b462:	bc08      	pop	{r3}
 800b464:	469e      	mov	lr, r3
 800b466:	4770      	bx	lr

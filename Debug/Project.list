
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012fa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c40  08013138  08013138  00023138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d78  08013d78  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  08013d78  08013d78  00023d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d80  08013d80  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013d80  08013d80  00023d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013d88  08013d88  00023d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08013d90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003022c  2**0
                  CONTENTS
 10 .bss          00003204  2000022c  2000022c  0003022c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003430  20003430  0003022c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004ce44  00000000  00000000  0003029f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000742f  00000000  00000000  0007d0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019f8  00000000  00000000  00084518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001456  00000000  00000000  00085f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b282  00000000  00000000  00087366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023884  00000000  00000000  000b25e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ece38  00000000  00000000  000d5e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000967c  00000000  00000000  001c2ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001cc320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000022c 	.word	0x2000022c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801311c 	.word	0x0801311c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000230 	.word	0x20000230
 80001cc:	0801311c 	.word	0x0801311c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a6 	b.w	8000f6c <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9e08      	ldr	r6, [sp, #32]
 8000caa:	460d      	mov	r5, r1
 8000cac:	4604      	mov	r4, r0
 8000cae:	460f      	mov	r7, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14a      	bne.n	8000d4a <__udivmoddi4+0xa6>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4694      	mov	ip, r2
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0xe2>
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	b143      	cbz	r3, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	f1c3 0220 	rsb	r2, r3, #32
 8000cc8:	409f      	lsls	r7, r3
 8000cca:	fa20 f202 	lsr.w	r2, r0, r2
 8000cce:	4317      	orrs	r7, r2
 8000cd0:	409c      	lsls	r4, r3
 8000cd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd6:	fa1f f58c 	uxth.w	r5, ip
 8000cda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cde:	0c22      	lsrs	r2, r4, #16
 8000ce0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce8:	fb01 f005 	mul.w	r0, r1, r5
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d90a      	bls.n	8000d06 <__udivmoddi4+0x62>
 8000cf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf8:	f080 811c 	bcs.w	8000f34 <__udivmoddi4+0x290>
 8000cfc:	4290      	cmp	r0, r2
 8000cfe:	f240 8119 	bls.w	8000f34 <__udivmoddi4+0x290>
 8000d02:	3902      	subs	r1, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	b2a4      	uxth	r4, r4
 8000d0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d16:	fb00 f505 	mul.w	r5, r0, r5
 8000d1a:	42a5      	cmp	r5, r4
 8000d1c:	d90a      	bls.n	8000d34 <__udivmoddi4+0x90>
 8000d1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x294>
 8000d2a:	42a5      	cmp	r5, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x294>
 8000d30:	4464      	add	r4, ip
 8000d32:	3802      	subs	r0, #2
 8000d34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d38:	1b64      	subs	r4, r4, r5
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	b11e      	cbz	r6, 8000d46 <__udivmoddi4+0xa2>
 8000d3e:	40dc      	lsrs	r4, r3
 8000d40:	2300      	movs	r3, #0
 8000d42:	e9c6 4300 	strd	r4, r3, [r6]
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0xbc>
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f000 80ed 	beq.w	8000f2e <__udivmoddi4+0x28a>
 8000d54:	2100      	movs	r1, #0
 8000d56:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	fab3 f183 	clz	r1, r3
 8000d64:	2900      	cmp	r1, #0
 8000d66:	d149      	bne.n	8000dfc <__udivmoddi4+0x158>
 8000d68:	42ab      	cmp	r3, r5
 8000d6a:	d302      	bcc.n	8000d72 <__udivmoddi4+0xce>
 8000d6c:	4282      	cmp	r2, r0
 8000d6e:	f200 80f8 	bhi.w	8000f62 <__udivmoddi4+0x2be>
 8000d72:	1a84      	subs	r4, r0, r2
 8000d74:	eb65 0203 	sbc.w	r2, r5, r3
 8000d78:	2001      	movs	r0, #1
 8000d7a:	4617      	mov	r7, r2
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d0e2      	beq.n	8000d46 <__udivmoddi4+0xa2>
 8000d80:	e9c6 4700 	strd	r4, r7, [r6]
 8000d84:	e7df      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000d86:	b902      	cbnz	r2, 8000d8a <__udivmoddi4+0xe6>
 8000d88:	deff      	udf	#255	; 0xff
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8090 	bne.w	8000eb4 <__udivmoddi4+0x210>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fa1f fe8c 	uxth.w	lr, ip
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da4:	fb07 2015 	mls	r0, r7, r5, r2
 8000da8:	0c22      	lsrs	r2, r4, #16
 8000daa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dae:	fb0e f005 	mul.w	r0, lr, r5
 8000db2:	4290      	cmp	r0, r2
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x124>
 8000db6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x122>
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	f200 80cb 	bhi.w	8000f5c <__udivmoddi4+0x2b8>
 8000dc6:	4645      	mov	r5, r8
 8000dc8:	1a12      	subs	r2, r2, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x14e>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x14c>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	f200 80bb 	bhi.w	8000f66 <__udivmoddi4+0x2c2>
 8000df0:	4610      	mov	r0, r2
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfa:	e79f      	b.n	8000d3c <__udivmoddi4+0x98>
 8000dfc:	f1c1 0720 	rsb	r7, r1, #32
 8000e00:	408b      	lsls	r3, r1
 8000e02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e12:	40fd      	lsrs	r5, r7
 8000e14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e18:	4323      	orrs	r3, r4
 8000e1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	fb09 5518 	mls	r5, r9, r8, r5
 8000e26:	0c1c      	lsrs	r4, r3, #16
 8000e28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3a:	d90b      	bls.n	8000e54 <__udivmoddi4+0x1b0>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e44:	f080 8088 	bcs.w	8000f58 <__udivmoddi4+0x2b4>
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	f240 8085 	bls.w	8000f58 <__udivmoddi4+0x2b4>
 8000e4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e52:	4464      	add	r4, ip
 8000e54:	1b64      	subs	r4, r4, r5
 8000e56:	b29d      	uxth	r5, r3
 8000e58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x1da>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e74:	d26c      	bcs.n	8000f50 <__udivmoddi4+0x2ac>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	d96a      	bls.n	8000f50 <__udivmoddi4+0x2ac>
 8000e7a:	3b02      	subs	r3, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e82:	fba3 9502 	umull	r9, r5, r3, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	42ac      	cmp	r4, r5
 8000e8c:	46c8      	mov	r8, r9
 8000e8e:	46ae      	mov	lr, r5
 8000e90:	d356      	bcc.n	8000f40 <__udivmoddi4+0x29c>
 8000e92:	d053      	beq.n	8000f3c <__udivmoddi4+0x298>
 8000e94:	b156      	cbz	r6, 8000eac <__udivmoddi4+0x208>
 8000e96:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	40ca      	lsrs	r2, r1
 8000ea4:	40cc      	lsrs	r4, r1
 8000ea6:	4317      	orrs	r7, r2
 8000ea8:	e9c6 7400 	strd	r7, r4, [r6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb4:	f1c3 0120 	rsb	r1, r3, #32
 8000eb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ebc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec4:	409d      	lsls	r5, r3
 8000ec6:	432a      	orrs	r2, r5
 8000ec8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ed8:	0c11      	lsrs	r1, r2, #16
 8000eda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ede:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee2:	428d      	cmp	r5, r1
 8000ee4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ee8:	d908      	bls.n	8000efc <__udivmoddi4+0x258>
 8000eea:	eb1c 0101 	adds.w	r1, ip, r1
 8000eee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef2:	d22f      	bcs.n	8000f54 <__udivmoddi4+0x2b0>
 8000ef4:	428d      	cmp	r5, r1
 8000ef6:	d92d      	bls.n	8000f54 <__udivmoddi4+0x2b0>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1b49      	subs	r1, r1, r5
 8000efe:	b292      	uxth	r2, r2
 8000f00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f04:	fb07 1115 	mls	r1, r7, r5, r1
 8000f08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f10:	4291      	cmp	r1, r2
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x282>
 8000f14:	eb1c 0202 	adds.w	r2, ip, r2
 8000f18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1c:	d216      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000f1e:	4291      	cmp	r1, r2
 8000f20:	d914      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000f22:	3d02      	subs	r5, #2
 8000f24:	4462      	add	r2, ip
 8000f26:	1a52      	subs	r2, r2, r1
 8000f28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f2c:	e738      	b.n	8000da0 <__udivmoddi4+0xfc>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e708      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000f34:	4639      	mov	r1, r7
 8000f36:	e6e6      	b.n	8000d06 <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x90>
 8000f3c:	4548      	cmp	r0, r9
 8000f3e:	d2a9      	bcs.n	8000e94 <__udivmoddi4+0x1f0>
 8000f40:	ebb9 0802 	subs.w	r8, r9, r2
 8000f44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	e7a3      	b.n	8000e94 <__udivmoddi4+0x1f0>
 8000f4c:	4645      	mov	r5, r8
 8000f4e:	e7ea      	b.n	8000f26 <__udivmoddi4+0x282>
 8000f50:	462b      	mov	r3, r5
 8000f52:	e794      	b.n	8000e7e <__udivmoddi4+0x1da>
 8000f54:	4640      	mov	r0, r8
 8000f56:	e7d1      	b.n	8000efc <__udivmoddi4+0x258>
 8000f58:	46d0      	mov	r8, sl
 8000f5a:	e77b      	b.n	8000e54 <__udivmoddi4+0x1b0>
 8000f5c:	3d02      	subs	r5, #2
 8000f5e:	4462      	add	r2, ip
 8000f60:	e732      	b.n	8000dc8 <__udivmoddi4+0x124>
 8000f62:	4608      	mov	r0, r1
 8000f64:	e70a      	b.n	8000d7c <__udivmoddi4+0xd8>
 8000f66:	4464      	add	r4, ip
 8000f68:	3802      	subs	r0, #2
 8000f6a:	e742      	b.n	8000df2 <__udivmoddi4+0x14e>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000f74:	2204      	movs	r2, #4
 8000f76:	4909      	ldr	r1, [pc, #36]	; (8000f9c <default_ip_assign+0x2c>)
 8000f78:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000f7c:	f001 fc72 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000f80:	2204      	movs	r2, #4
 8000f82:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <default_ip_assign+0x30>)
 8000f84:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000f88:	f001 fc6c 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	4905      	ldr	r1, [pc, #20]	; (8000fa4 <default_ip_assign+0x34>)
 8000f90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f94:	f001 fc66 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000254 	.word	0x20000254
 8000fa0:	2000025c 	.word	0x2000025c
 8000fa4:	20000258 	.word	0x20000258

08000fa8 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f001 fbaa 	bl	8002708 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f001 fb5b 	bl	8002670 <WIZCHIP_READ>
   default_ip_assign();
 8000fba:	f7ff ffd9 	bl	8000f70 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8000fbe:	2206      	movs	r2, #6
 8000fc0:	4903      	ldr	r1, [pc, #12]	; (8000fd0 <default_ip_update+0x28>)
 8000fc2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000fc6:	f001 fc4d 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000274 	.word	0x20000274

08000fd4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f001 fb94 	bl	8002708 <WIZCHIP_WRITE>
	getMR(); // for delay
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f001 fb45 	bl	8002670 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8000fe6:	2206      	movs	r2, #6
 8000fe8:	4903      	ldr	r1, [pc, #12]	; (8000ff8 <default_ip_conflict+0x24>)
 8000fea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000fee:	f001 fc39 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000274 	.word	0x20000274

08000ffc <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <reg_dhcp_cbfunc+0x50>)
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <reg_dhcp_cbfunc+0x54>)
 800100c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <reg_dhcp_cbfunc+0x58>)
 8001010:	4a11      	ldr	r2, [pc, #68]	; (8001058 <reg_dhcp_cbfunc+0x5c>)
 8001012:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <reg_dhcp_cbfunc+0x60>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <reg_dhcp_cbfunc+0x64>)
 8001018:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <reg_dhcp_cbfunc+0x2a>
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <reg_dhcp_cbfunc+0x50>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <reg_dhcp_cbfunc+0x36>
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <reg_dhcp_cbfunc+0x58>)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <reg_dhcp_cbfunc+0x42>
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <reg_dhcp_cbfunc+0x60>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000010 	.word	0x20000010
 8001050:	08000f71 	.word	0x08000f71
 8001054:	20000014 	.word	0x20000014
 8001058:	08000fa9 	.word	0x08000fa9
 800105c:	20000018 	.word	0x20000018
 8001060:	08000fd5 	.word	0x08000fd5

08001064 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800106a:	463b      	mov	r3, r7
 800106c:	2206      	movs	r2, #6
 800106e:	4619      	mov	r1, r3
 8001070:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001074:	f001 fb96 	bl	80027a4 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001078:	4b72      	ldr	r3, [pc, #456]	; (8001244 <makeDHCPMSG+0x1e0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001080:	4b70      	ldr	r3, [pc, #448]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001088:	4b6e      	ldr	r3, [pc, #440]	; (8001244 <makeDHCPMSG+0x1e0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2206      	movs	r2, #6
 800108e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001098:	4b6a      	ldr	r3, [pc, #424]	; (8001244 <makeDHCPMSG+0x1e0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3304      	adds	r3, #4
 800109e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80010a0:	4b69      	ldr	r3, [pc, #420]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0e1b      	lsrs	r3, r3, #24
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0c1a      	lsrs	r2, r3, #16
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0a1a      	lsrs	r2, r3, #8
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3302      	adds	r3, #2
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80010c8:	4b5f      	ldr	r3, [pc, #380]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3303      	adds	r3, #3
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80010d4:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80010dc:	4b59      	ldr	r3, [pc, #356]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	330a      	adds	r3, #10
 80010e2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3301      	adds	r3, #1
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80010f2:	4b54      	ldr	r3, [pc, #336]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80010fa:	4b52      	ldr	r3, [pc, #328]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001102:	4b50      	ldr	r3, [pc, #320]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2200      	movs	r2, #0
 8001108:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800110a:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <makeDHCPMSG+0x1e0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001112:	4b4c      	ldr	r3, [pc, #304]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800111a:	4b4a      	ldr	r3, [pc, #296]	; (8001244 <makeDHCPMSG+0x1e0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800112a:	4b46      	ldr	r3, [pc, #280]	; (8001244 <makeDHCPMSG+0x1e0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8001132:	4b44      	ldr	r3, [pc, #272]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800113a:	4b42      	ldr	r3, [pc, #264]	; (8001244 <makeDHCPMSG+0x1e0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8001142:	4b40      	ldr	r3, [pc, #256]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800114a:	4b3e      	ldr	r3, [pc, #248]	; (8001244 <makeDHCPMSG+0x1e0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8001152:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <makeDHCPMSG+0x1e0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <makeDHCPMSG+0x1e0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a35      	ldr	r2, [pc, #212]	; (800124c <makeDHCPMSG+0x1e8>)
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <makeDHCPMSG+0x1e0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a32      	ldr	r2, [pc, #200]	; (800124c <makeDHCPMSG+0x1e8>)
 8001182:	7852      	ldrb	r2, [r2, #1]
 8001184:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a30      	ldr	r2, [pc, #192]	; (800124c <makeDHCPMSG+0x1e8>)
 800118c:	7892      	ldrb	r2, [r2, #2]
 800118e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a2d      	ldr	r2, [pc, #180]	; (800124c <makeDHCPMSG+0x1e8>)
 8001196:	78d2      	ldrb	r2, [r2, #3]
 8001198:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <makeDHCPMSG+0x1e0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a2b      	ldr	r2, [pc, #172]	; (800124c <makeDHCPMSG+0x1e8>)
 80011a0:	7912      	ldrb	r2, [r2, #4]
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <makeDHCPMSG+0x1e8>)
 80011ac:	7952      	ldrb	r2, [r2, #5]
 80011ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80011b2:	2306      	movs	r3, #6
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e008      	b.n	80011ca <makeDHCPMSG+0x166>
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4413      	add	r3, r2
 80011c0:	2200      	movs	r2, #0
 80011c2:	771a      	strb	r2, [r3, #28]
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	3301      	adds	r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d9f3      	bls.n	80011b8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e009      	b.n	80011ea <makeDHCPMSG+0x186>
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	4413      	add	r3, r2
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	3301      	adds	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b3f      	cmp	r3, #63	; 0x3f
 80011ee:	d9f2      	bls.n	80011d6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e009      	b.n	800120a <makeDHCPMSG+0x1a6>
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	4413      	add	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	3301      	adds	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	daf1      	bge.n	80011f6 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2263      	movs	r2, #99	; 0x63
 8001218:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <makeDHCPMSG+0x1e0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2282      	movs	r2, #130	; 0x82
 8001222:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2253      	movs	r2, #83	; 0x53
 800122c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2263      	movs	r2, #99	; 0x63
 8001236:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000270 	.word	0x20000270
 8001248:	2000026c 	.word	0x2000026c
 800124c:	20000274 	.word	0x20000274

08001250 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800125a:	f7ff ff03 	bl	8001064 <makeDHCPMSG>

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800125e:	2304      	movs	r3, #4
 8001260:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001262:	4ba9      	ldr	r3, [pc, #676]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	1c59      	adds	r1, r3, #1
 800126a:	80b9      	strh	r1, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	2235      	movs	r2, #53	; 0x35
 8001270:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001274:	4ba4      	ldr	r3, [pc, #656]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	80b9      	strh	r1, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	2201      	movs	r2, #1
 8001282:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8001286:	4ba0      	ldr	r3, [pc, #640]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	1c59      	adds	r1, r3, #1
 800128e:	80b9      	strh	r1, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	2201      	movs	r2, #1
 8001294:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001298:	4b9b      	ldr	r3, [pc, #620]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	1c59      	adds	r1, r3, #1
 80012a0:	80b9      	strh	r1, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	223d      	movs	r2, #61	; 0x3d
 80012a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80012aa:	4b97      	ldr	r3, [pc, #604]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	80b9      	strh	r1, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	2207      	movs	r2, #7
 80012b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80012bc:	4b92      	ldr	r3, [pc, #584]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	1c59      	adds	r1, r3, #1
 80012c4:	80b9      	strh	r1, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80012ce:	4b8e      	ldr	r3, [pc, #568]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	1c59      	adds	r1, r3, #1
 80012d6:	80b9      	strh	r1, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	4b8c      	ldr	r3, [pc, #560]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80012dc:	7819      	ldrb	r1, [r3, #0]
 80012de:	1813      	adds	r3, r2, r0
 80012e0:	460a      	mov	r2, r1
 80012e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	1c59      	adds	r1, r3, #1
 80012ee:	80b9      	strh	r1, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	4b86      	ldr	r3, [pc, #536]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80012f4:	7859      	ldrb	r1, [r3, #1]
 80012f6:	1813      	adds	r3, r2, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	1c59      	adds	r1, r3, #1
 8001306:	80b9      	strh	r1, [r7, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	4b80      	ldr	r3, [pc, #512]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 800130c:	7899      	ldrb	r1, [r3, #2]
 800130e:	1813      	adds	r3, r2, r0
 8001310:	460a      	mov	r2, r1
 8001312:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001316:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	1c59      	adds	r1, r3, #1
 800131e:	80b9      	strh	r1, [r7, #4]
 8001320:	4618      	mov	r0, r3
 8001322:	4b7a      	ldr	r3, [pc, #488]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 8001324:	78d9      	ldrb	r1, [r3, #3]
 8001326:	1813      	adds	r3, r2, r0
 8001328:	460a      	mov	r2, r1
 800132a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	1c59      	adds	r1, r3, #1
 8001336:	80b9      	strh	r1, [r7, #4]
 8001338:	4618      	mov	r0, r3
 800133a:	4b74      	ldr	r3, [pc, #464]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 800133c:	7919      	ldrb	r1, [r3, #4]
 800133e:	1813      	adds	r3, r2, r0
 8001340:	460a      	mov	r2, r1
 8001342:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	1c59      	adds	r1, r3, #1
 800134e:	80b9      	strh	r1, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	4b6e      	ldr	r3, [pc, #440]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 8001354:	7959      	ldrb	r1, [r3, #5]
 8001356:	1813      	adds	r3, r2, r0
 8001358:	460a      	mov	r2, r1
 800135a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800135e:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	1c59      	adds	r1, r3, #1
 8001366:	80b9      	strh	r1, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	220c      	movs	r2, #12
 800136c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001370:	4b65      	ldr	r3, [pc, #404]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	1c59      	adds	r1, r3, #1
 8001378:	80b9      	strh	r1, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	2200      	movs	r2, #0
 800137e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	80fb      	strh	r3, [r7, #6]
 8001386:	e00f      	b.n	80013a8 <send_DHCP_DISCOVER+0x158>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001388:	88f9      	ldrh	r1, [r7, #6]
 800138a:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	1c58      	adds	r0, r3, #1
 8001392:	80b8      	strh	r0, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	4b5e      	ldr	r3, [pc, #376]	; (8001510 <send_DHCP_DISCOVER+0x2c0>)
 8001398:	5c59      	ldrb	r1, [r3, r1]
 800139a:	1813      	adds	r3, r2, r0
 800139c:	460a      	mov	r2, r1
 800139e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	3301      	adds	r3, #1
 80013a6:	80fb      	strh	r3, [r7, #6]
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	4a59      	ldr	r2, [pc, #356]	; (8001510 <send_DHCP_DISCOVER+0x2c0>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ea      	bne.n	8001388 <send_DHCP_DISCOVER+0x138>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80013b2:	4b55      	ldr	r3, [pc, #340]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	88bb      	ldrh	r3, [r7, #4]
 80013b8:	1c59      	adds	r1, r3, #1
 80013ba:	80b9      	strh	r1, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	4b53      	ldr	r3, [pc, #332]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80013c0:	78d9      	ldrb	r1, [r3, #3]
 80013c2:	1813      	adds	r3, r2, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80013ca:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	1c59      	adds	r1, r3, #1
 80013d2:	80b9      	strh	r1, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	4b4d      	ldr	r3, [pc, #308]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80013d8:	7919      	ldrb	r1, [r3, #4]
 80013da:	1813      	adds	r3, r2, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80013e2:	4b49      	ldr	r3, [pc, #292]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	88bb      	ldrh	r3, [r7, #4]
 80013e8:	1c59      	adds	r1, r3, #1
 80013ea:	80b9      	strh	r1, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80013f0:	7959      	ldrb	r1, [r3, #5]
 80013f2:	1813      	adds	r3, r2, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2d9      	uxtb	r1, r3
 80013fe:	4b42      	ldr	r3, [pc, #264]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	88b8      	ldrh	r0, [r7, #4]
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	3304      	adds	r3, #4
 8001408:	1ac3      	subs	r3, r0, r3
 800140a:	3103      	adds	r1, #3
 800140c:	b2c9      	uxtb	r1, r1
 800140e:	4413      	add	r3, r2
 8001410:	460a      	mov	r2, r1
 8001412:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001416:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	1c59      	adds	r1, r3, #1
 800141e:	80b9      	strh	r1, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	2237      	movs	r2, #55	; 0x37
 8001424:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	88bb      	ldrh	r3, [r7, #4]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	80b9      	strh	r1, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	2206      	movs	r2, #6
 8001436:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	80b9      	strh	r1, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	2201      	movs	r2, #1
 8001448:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	80b9      	strh	r1, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	2203      	movs	r2, #3
 800145a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	1c59      	adds	r1, r3, #1
 8001466:	80b9      	strh	r1, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	2206      	movs	r2, #6
 800146c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001470:	4b25      	ldr	r3, [pc, #148]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	1c59      	adds	r1, r3, #1
 8001478:	80b9      	strh	r1, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	220f      	movs	r2, #15
 800147e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	80b9      	strh	r1, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	223a      	movs	r2, #58	; 0x3a
 8001490:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	1c59      	adds	r1, r3, #1
 800149c:	80b9      	strh	r1, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	223b      	movs	r2, #59	; 0x3b
 80014a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	1c59      	adds	r1, r3, #1
 80014ae:	80b9      	strh	r1, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	22ff      	movs	r2, #255	; 0xff
 80014b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	80fb      	strh	r3, [r7, #6]
 80014bc:	e009      	b.n	80014d2 <send_DHCP_DISCOVER+0x282>
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	4413      	add	r3, r2
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	3301      	adds	r3, #1
 80014d0:	80fb      	strh	r3, [r7, #6]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80014d8:	d3f1      	bcc.n	80014be <send_DHCP_DISCOVER+0x26e>

	// send broadcasting packet
	ip[0] = 255;
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80014de:	23ff      	movs	r3, #255	; 0xff
 80014e0:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80014e2:	23ff      	movs	r3, #255	; 0xff
 80014e4:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80014e6:	23ff      	movs	r3, #255	; 0xff
 80014e8:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <send_DHCP_DISCOVER+0x2c4>)
 80014ec:	7818      	ldrb	r0, [r3, #0]
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	463b      	mov	r3, r7
 80014f4:	2243      	movs	r2, #67	; 0x43
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80014fc:	f002 f82c 	bl	8003558 <sendto>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000270 	.word	0x20000270
 800150c:	20000274 	.word	0x20000274
 8001510:	20000008 	.word	0x20000008
 8001514:	20000248 	.word	0x20000248

08001518 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001522:	f7ff fd9f 	bl	8001064 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <send_DHCP_REQUEST+0x7c>)
 8001528:	f993 3000 	ldrsb.w	r3, [r3]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d004      	beq.n	800153a <send_DHCP_REQUEST+0x22>
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <send_DHCP_REQUEST+0x7c>)
 8001532:	f993 3000 	ldrsb.w	r3, [r3]
 8001536:	2b04      	cmp	r3, #4
 8001538:	d134      	bne.n	80015a4 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <send_DHCP_REQUEST+0x80>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	330a      	adds	r3, #10
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	330a      	adds	r3, #10
 800154a:	3301      	adds	r3, #1
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a11      	ldr	r2, [pc, #68]	; (800159c <send_DHCP_REQUEST+0x84>)
 8001556:	7812      	ldrb	r2, [r2, #0]
 8001558:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <send_DHCP_REQUEST+0x80>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <send_DHCP_REQUEST+0x84>)
 8001560:	7852      	ldrb	r2, [r2, #1]
 8001562:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <send_DHCP_REQUEST+0x84>)
 800156a:	7892      	ldrb	r2, [r2, #2]
 800156c:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <send_DHCP_REQUEST+0x84>)
 8001574:	78d2      	ldrb	r2, [r2, #3]
 8001576:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	e010      	b.n	80015b4 <send_DHCP_REQUEST+0x9c>
 8001592:	bf00      	nop
 8001594:	20000264 	.word	0x20000264
 8001598:	20000270 	.word	0x20000270
 800159c:	20000254 	.word	0x20000254
 80015a0:	2000024c 	.word	0x2000024c
   }
   else
   {
   	ip[0] = 255;
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80015a8:	23ff      	movs	r3, #255	; 0xff
 80015aa:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80015ac:	23ff      	movs	r3, #255	; 0xff
 80015ae:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80015b0:	23ff      	movs	r3, #255	; 0xff
 80015b2:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80015b4:	2304      	movs	r3, #4
 80015b6:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80015b8:	4b8d      	ldr	r3, [pc, #564]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	897b      	ldrh	r3, [r7, #10]
 80015be:	1c59      	adds	r1, r3, #1
 80015c0:	8179      	strh	r1, [r7, #10]
 80015c2:	4413      	add	r3, r2
 80015c4:	2235      	movs	r2, #53	; 0x35
 80015c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	897b      	ldrh	r3, [r7, #10]
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	8179      	strh	r1, [r7, #10]
 80015d4:	4413      	add	r3, r2
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80015dc:	4b84      	ldr	r3, [pc, #528]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	897b      	ldrh	r3, [r7, #10]
 80015e2:	1c59      	adds	r1, r3, #1
 80015e4:	8179      	strh	r1, [r7, #10]
 80015e6:	4413      	add	r3, r2
 80015e8:	2203      	movs	r2, #3
 80015ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80015ee:	4b80      	ldr	r3, [pc, #512]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	1c59      	adds	r1, r3, #1
 80015f6:	8179      	strh	r1, [r7, #10]
 80015f8:	4413      	add	r3, r2
 80015fa:	223d      	movs	r2, #61	; 0x3d
 80015fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001600:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	897b      	ldrh	r3, [r7, #10]
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	8179      	strh	r1, [r7, #10]
 800160a:	4413      	add	r3, r2
 800160c:	2207      	movs	r2, #7
 800160e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001612:	4b77      	ldr	r3, [pc, #476]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	897b      	ldrh	r3, [r7, #10]
 8001618:	1c59      	adds	r1, r3, #1
 800161a:	8179      	strh	r1, [r7, #10]
 800161c:	4413      	add	r3, r2
 800161e:	2201      	movs	r2, #1
 8001620:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001624:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	897b      	ldrh	r3, [r7, #10]
 800162a:	1c59      	adds	r1, r3, #1
 800162c:	8179      	strh	r1, [r7, #10]
 800162e:	4618      	mov	r0, r3
 8001630:	4b70      	ldr	r3, [pc, #448]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 8001632:	7819      	ldrb	r1, [r3, #0]
 8001634:	1813      	adds	r3, r2, r0
 8001636:	460a      	mov	r2, r1
 8001638:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800163c:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	897b      	ldrh	r3, [r7, #10]
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	8179      	strh	r1, [r7, #10]
 8001646:	4618      	mov	r0, r3
 8001648:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 800164a:	7859      	ldrb	r1, [r3, #1]
 800164c:	1813      	adds	r3, r2, r0
 800164e:	460a      	mov	r2, r1
 8001650:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001654:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	897b      	ldrh	r3, [r7, #10]
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	8179      	strh	r1, [r7, #10]
 800165e:	4618      	mov	r0, r3
 8001660:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 8001662:	7899      	ldrb	r1, [r3, #2]
 8001664:	1813      	adds	r3, r2, r0
 8001666:	460a      	mov	r2, r1
 8001668:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800166c:	4b60      	ldr	r3, [pc, #384]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	897b      	ldrh	r3, [r7, #10]
 8001672:	1c59      	adds	r1, r3, #1
 8001674:	8179      	strh	r1, [r7, #10]
 8001676:	4618      	mov	r0, r3
 8001678:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 800167a:	78d9      	ldrb	r1, [r3, #3]
 800167c:	1813      	adds	r3, r2, r0
 800167e:	460a      	mov	r2, r1
 8001680:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001684:	4b5a      	ldr	r3, [pc, #360]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	897b      	ldrh	r3, [r7, #10]
 800168a:	1c59      	adds	r1, r3, #1
 800168c:	8179      	strh	r1, [r7, #10]
 800168e:	4618      	mov	r0, r3
 8001690:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 8001692:	7919      	ldrb	r1, [r3, #4]
 8001694:	1813      	adds	r3, r2, r0
 8001696:	460a      	mov	r2, r1
 8001698:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800169c:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	1c59      	adds	r1, r3, #1
 80016a4:	8179      	strh	r1, [r7, #10]
 80016a6:	4618      	mov	r0, r3
 80016a8:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 80016aa:	7959      	ldrb	r1, [r3, #5]
 80016ac:	1813      	adds	r3, r2, r0
 80016ae:	460a      	mov	r2, r1
 80016b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2bff      	cmp	r3, #255	; 0xff
 80016b8:	f040 8084 	bne.w	80017c4 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80016bc:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	897b      	ldrh	r3, [r7, #10]
 80016c2:	1c59      	adds	r1, r3, #1
 80016c4:	8179      	strh	r1, [r7, #10]
 80016c6:	4413      	add	r3, r2
 80016c8:	2232      	movs	r2, #50	; 0x32
 80016ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80016ce:	4b48      	ldr	r3, [pc, #288]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	897b      	ldrh	r3, [r7, #10]
 80016d4:	1c59      	adds	r1, r3, #1
 80016d6:	8179      	strh	r1, [r7, #10]
 80016d8:	4413      	add	r3, r2
 80016da:	2204      	movs	r2, #4
 80016dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80016e0:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	897b      	ldrh	r3, [r7, #10]
 80016e6:	1c59      	adds	r1, r3, #1
 80016e8:	8179      	strh	r1, [r7, #10]
 80016ea:	4618      	mov	r0, r3
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 80016ee:	7819      	ldrb	r1, [r3, #0]
 80016f0:	1813      	adds	r3, r2, r0
 80016f2:	460a      	mov	r2, r1
 80016f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80016f8:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	897b      	ldrh	r3, [r7, #10]
 80016fe:	1c59      	adds	r1, r3, #1
 8001700:	8179      	strh	r1, [r7, #10]
 8001702:	4618      	mov	r0, r3
 8001704:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 8001706:	7859      	ldrb	r1, [r3, #1]
 8001708:	1813      	adds	r3, r2, r0
 800170a:	460a      	mov	r2, r1
 800170c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001710:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	897b      	ldrh	r3, [r7, #10]
 8001716:	1c59      	adds	r1, r3, #1
 8001718:	8179      	strh	r1, [r7, #10]
 800171a:	4618      	mov	r0, r3
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 800171e:	7899      	ldrb	r1, [r3, #2]
 8001720:	1813      	adds	r3, r2, r0
 8001722:	460a      	mov	r2, r1
 8001724:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	897b      	ldrh	r3, [r7, #10]
 800172e:	1c59      	adds	r1, r3, #1
 8001730:	8179      	strh	r1, [r7, #10]
 8001732:	4618      	mov	r0, r3
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 8001736:	78d9      	ldrb	r1, [r3, #3]
 8001738:	1813      	adds	r3, r2, r0
 800173a:	460a      	mov	r2, r1
 800173c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	897b      	ldrh	r3, [r7, #10]
 8001746:	1c59      	adds	r1, r3, #1
 8001748:	8179      	strh	r1, [r7, #10]
 800174a:	4413      	add	r3, r2
 800174c:	2236      	movs	r2, #54	; 0x36
 800174e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	897b      	ldrh	r3, [r7, #10]
 8001758:	1c59      	adds	r1, r3, #1
 800175a:	8179      	strh	r1, [r7, #10]
 800175c:	4413      	add	r3, r2
 800175e:	2204      	movs	r2, #4
 8001760:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	897b      	ldrh	r3, [r7, #10]
 800176a:	1c59      	adds	r1, r3, #1
 800176c:	8179      	strh	r1, [r7, #10]
 800176e:	4618      	mov	r0, r3
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 8001772:	7819      	ldrb	r1, [r3, #0]
 8001774:	1813      	adds	r3, r2, r0
 8001776:	460a      	mov	r2, r1
 8001778:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	897b      	ldrh	r3, [r7, #10]
 8001782:	1c59      	adds	r1, r3, #1
 8001784:	8179      	strh	r1, [r7, #10]
 8001786:	4618      	mov	r0, r3
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 800178a:	7859      	ldrb	r1, [r3, #1]
 800178c:	1813      	adds	r3, r2, r0
 800178e:	460a      	mov	r2, r1
 8001790:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	897b      	ldrh	r3, [r7, #10]
 800179a:	1c59      	adds	r1, r3, #1
 800179c:	8179      	strh	r1, [r7, #10]
 800179e:	4618      	mov	r0, r3
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 80017a2:	7899      	ldrb	r1, [r3, #2]
 80017a4:	1813      	adds	r3, r2, r0
 80017a6:	460a      	mov	r2, r1
 80017a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	897b      	ldrh	r3, [r7, #10]
 80017b2:	1c59      	adds	r1, r3, #1
 80017b4:	8179      	strh	r1, [r7, #10]
 80017b6:	4618      	mov	r0, r3
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 80017ba:	78d9      	ldrb	r1, [r3, #3]
 80017bc:	1813      	adds	r3, r2, r0
 80017be:	460a      	mov	r2, r1
 80017c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	897b      	ldrh	r3, [r7, #10]
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	8179      	strh	r1, [r7, #10]
 80017ce:	4413      	add	r3, r2
 80017d0:	220c      	movs	r2, #12
 80017d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	1c59      	adds	r1, r3, #1
 80017de:	8179      	strh	r1, [r7, #10]
 80017e0:	4413      	add	r3, r2
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e019      	b.n	8001822 <send_DHCP_REQUEST+0x30a>
 80017ee:	bf00      	nop
 80017f0:	20000270 	.word	0x20000270
 80017f4:	20000274 	.word	0x20000274
 80017f8:	20000254 	.word	0x20000254
 80017fc:	2000024c 	.word	0x2000024c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001800:	4b86      	ldr	r3, [pc, #536]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	897b      	ldrh	r3, [r7, #10]
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	8179      	strh	r1, [r7, #10]
 800180a:	4618      	mov	r0, r3
 800180c:	4984      	ldr	r1, [pc, #528]	; (8001a20 <send_DHCP_REQUEST+0x508>)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	440b      	add	r3, r1
 8001812:	7819      	ldrb	r1, [r3, #0]
 8001814:	1813      	adds	r3, r2, r0
 8001816:	460a      	mov	r2, r1
 8001818:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4a7f      	ldr	r2, [pc, #508]	; (8001a20 <send_DHCP_REQUEST+0x508>)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1e8      	bne.n	8001800 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800182e:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001830:	78db      	ldrb	r3, [r3, #3]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	897b      	ldrh	r3, [r7, #10]
 800183c:	1c59      	adds	r1, r3, #1
 800183e:	8179      	strh	r1, [r7, #10]
 8001840:	461d      	mov	r5, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 fede 	bl	8002604 <NibbleToHex>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	1963      	adds	r3, r4, r5
 800184e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001852:	4b74      	ldr	r3, [pc, #464]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001854:	78da      	ldrb	r2, [r3, #3]
 8001856:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	1c59      	adds	r1, r3, #1
 800185e:	8179      	strh	r1, [r7, #10]
 8001860:	461d      	mov	r5, r3
 8001862:	4610      	mov	r0, r2
 8001864:	f000 fece 	bl	8002604 <NibbleToHex>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	1963      	adds	r3, r4, r5
 800186e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001872:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001874:	791b      	ldrb	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800187c:	681c      	ldr	r4, [r3, #0]
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	1c59      	adds	r1, r3, #1
 8001882:	8179      	strh	r1, [r7, #10]
 8001884:	461d      	mov	r5, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f000 febc 	bl	8002604 <NibbleToHex>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	1963      	adds	r3, r4, r5
 8001892:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001898:	791a      	ldrb	r2, [r3, #4]
 800189a:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800189c:	681c      	ldr	r4, [r3, #0]
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	1c59      	adds	r1, r3, #1
 80018a2:	8179      	strh	r1, [r7, #10]
 80018a4:	461d      	mov	r5, r3
 80018a6:	4610      	mov	r0, r2
 80018a8:	f000 feac 	bl	8002604 <NibbleToHex>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	1963      	adds	r3, r4, r5
 80018b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80018b6:	4b5b      	ldr	r3, [pc, #364]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 80018b8:	795b      	ldrb	r3, [r3, #5]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80018c0:	681c      	ldr	r4, [r3, #0]
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	1c59      	adds	r1, r3, #1
 80018c6:	8179      	strh	r1, [r7, #10]
 80018c8:	461d      	mov	r5, r3
 80018ca:	4610      	mov	r0, r2
 80018cc:	f000 fe9a 	bl	8002604 <NibbleToHex>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	1963      	adds	r3, r4, r5
 80018d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80018da:	4b52      	ldr	r3, [pc, #328]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 80018dc:	795a      	ldrb	r2, [r3, #5]
 80018de:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80018e0:	681c      	ldr	r4, [r3, #0]
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	1c59      	adds	r1, r3, #1
 80018e6:	8179      	strh	r1, [r7, #10]
 80018e8:	461d      	mov	r5, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	f000 fe8a 	bl	8002604 <NibbleToHex>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	1963      	adds	r3, r4, r5
 80018f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	b2d9      	uxtb	r1, r3
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	8978      	ldrh	r0, [r7, #10]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3307      	adds	r3, #7
 8001908:	1ac3      	subs	r3, r0, r3
 800190a:	3106      	adds	r1, #6
 800190c:	b2c9      	uxtb	r1, r1
 800190e:	4413      	add	r3, r2
 8001910:	460a      	mov	r2, r1
 8001912:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	897b      	ldrh	r3, [r7, #10]
 800191c:	1c59      	adds	r1, r3, #1
 800191e:	8179      	strh	r1, [r7, #10]
 8001920:	4413      	add	r3, r2
 8001922:	2237      	movs	r2, #55	; 0x37
 8001924:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001928:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	897b      	ldrh	r3, [r7, #10]
 800192e:	1c59      	adds	r1, r3, #1
 8001930:	8179      	strh	r1, [r7, #10]
 8001932:	4413      	add	r3, r2
 8001934:	2208      	movs	r2, #8
 8001936:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	1c59      	adds	r1, r3, #1
 8001942:	8179      	strh	r1, [r7, #10]
 8001944:	4413      	add	r3, r2
 8001946:	2201      	movs	r2, #1
 8001948:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	897b      	ldrh	r3, [r7, #10]
 8001952:	1c59      	adds	r1, r3, #1
 8001954:	8179      	strh	r1, [r7, #10]
 8001956:	4413      	add	r3, r2
 8001958:	2203      	movs	r2, #3
 800195a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	8179      	strh	r1, [r7, #10]
 8001968:	4413      	add	r3, r2
 800196a:	2206      	movs	r2, #6
 800196c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	897b      	ldrh	r3, [r7, #10]
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	8179      	strh	r1, [r7, #10]
 800197a:	4413      	add	r3, r2
 800197c:	220f      	movs	r2, #15
 800197e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	1c59      	adds	r1, r3, #1
 800198a:	8179      	strh	r1, [r7, #10]
 800198c:	4413      	add	r3, r2
 800198e:	223a      	movs	r2, #58	; 0x3a
 8001990:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	897b      	ldrh	r3, [r7, #10]
 800199a:	1c59      	adds	r1, r3, #1
 800199c:	8179      	strh	r1, [r7, #10]
 800199e:	4413      	add	r3, r2
 80019a0:	223b      	movs	r2, #59	; 0x3b
 80019a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	897b      	ldrh	r3, [r7, #10]
 80019ac:	1c59      	adds	r1, r3, #1
 80019ae:	8179      	strh	r1, [r7, #10]
 80019b0:	4413      	add	r3, r2
 80019b2:	221f      	movs	r2, #31
 80019b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	897b      	ldrh	r3, [r7, #10]
 80019be:	1c59      	adds	r1, r3, #1
 80019c0:	8179      	strh	r1, [r7, #10]
 80019c2:	4413      	add	r3, r2
 80019c4:	2221      	movs	r2, #33	; 0x21
 80019c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	1c59      	adds	r1, r3, #1
 80019d2:	8179      	strh	r1, [r7, #10]
 80019d4:	4413      	add	r3, r2
 80019d6:	22ff      	movs	r2, #255	; 0xff
 80019d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e009      	b.n	80019f6 <send_DHCP_REQUEST+0x4de>
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	33ec      	adds	r3, #236	; 0xec
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80019fc:	dbf1      	blt.n	80019e2 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <send_DHCP_REQUEST+0x510>)
 8001a00:	7818      	ldrb	r0, [r3, #0]
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2243      	movs	r2, #67	; 0x43
 8001a0a:	9200      	str	r2, [sp, #0]
 8001a0c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001a10:	f001 fda2 	bl	8003558 <sendto>

}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1c:	20000270 	.word	0x20000270
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000274 	.word	0x20000274
 8001a28:	20000248 	.word	0x20000248

08001a2c <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001a36:	f7ff fb15 	bl	8001064 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001a3e:	4b9f      	ldr	r3, [pc, #636]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	330a      	adds	r3, #10
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001a48:	4b9c      	ldr	r3, [pc, #624]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	330a      	adds	r3, #10
 8001a4e:	3301      	adds	r3, #1
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001a54:	4b99      	ldr	r3, [pc, #612]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	897b      	ldrh	r3, [r7, #10]
 8001a5a:	1c59      	adds	r1, r3, #1
 8001a5c:	8179      	strh	r1, [r7, #10]
 8001a5e:	4413      	add	r3, r2
 8001a60:	2235      	movs	r2, #53	; 0x35
 8001a62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001a66:	4b95      	ldr	r3, [pc, #596]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	897b      	ldrh	r3, [r7, #10]
 8001a6c:	1c59      	adds	r1, r3, #1
 8001a6e:	8179      	strh	r1, [r7, #10]
 8001a70:	4413      	add	r3, r2
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001a78:	4b90      	ldr	r3, [pc, #576]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	897b      	ldrh	r3, [r7, #10]
 8001a7e:	1c59      	adds	r1, r3, #1
 8001a80:	8179      	strh	r1, [r7, #10]
 8001a82:	4413      	add	r3, r2
 8001a84:	2204      	movs	r2, #4
 8001a86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	897b      	ldrh	r3, [r7, #10]
 8001a90:	1c59      	adds	r1, r3, #1
 8001a92:	8179      	strh	r1, [r7, #10]
 8001a94:	4413      	add	r3, r2
 8001a96:	223d      	movs	r2, #61	; 0x3d
 8001a98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001a9c:	4b87      	ldr	r3, [pc, #540]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	897b      	ldrh	r3, [r7, #10]
 8001aa2:	1c59      	adds	r1, r3, #1
 8001aa4:	8179      	strh	r1, [r7, #10]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001aae:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	897b      	ldrh	r3, [r7, #10]
 8001ab4:	1c59      	adds	r1, r3, #1
 8001ab6:	8179      	strh	r1, [r7, #10]
 8001ab8:	4413      	add	r3, r2
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001ac0:	4b7e      	ldr	r3, [pc, #504]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	897b      	ldrh	r3, [r7, #10]
 8001ac6:	1c59      	adds	r1, r3, #1
 8001ac8:	8179      	strh	r1, [r7, #10]
 8001aca:	4618      	mov	r0, r3
 8001acc:	4b7c      	ldr	r3, [pc, #496]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001ace:	7819      	ldrb	r1, [r3, #0]
 8001ad0:	1813      	adds	r3, r2, r0
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001ad8:	4b78      	ldr	r3, [pc, #480]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	897b      	ldrh	r3, [r7, #10]
 8001ade:	1c59      	adds	r1, r3, #1
 8001ae0:	8179      	strh	r1, [r7, #10]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001ae6:	7859      	ldrb	r1, [r3, #1]
 8001ae8:	1813      	adds	r3, r2, r0
 8001aea:	460a      	mov	r2, r1
 8001aec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001af0:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	1c59      	adds	r1, r3, #1
 8001af8:	8179      	strh	r1, [r7, #10]
 8001afa:	4618      	mov	r0, r3
 8001afc:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001afe:	7899      	ldrb	r1, [r3, #2]
 8001b00:	1813      	adds	r3, r2, r0
 8001b02:	460a      	mov	r2, r1
 8001b04:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001b08:	4b6c      	ldr	r3, [pc, #432]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	897b      	ldrh	r3, [r7, #10]
 8001b0e:	1c59      	adds	r1, r3, #1
 8001b10:	8179      	strh	r1, [r7, #10]
 8001b12:	4618      	mov	r0, r3
 8001b14:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001b16:	78d9      	ldrb	r1, [r3, #3]
 8001b18:	1813      	adds	r3, r2, r0
 8001b1a:	460a      	mov	r2, r1
 8001b1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001b20:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	1c59      	adds	r1, r3, #1
 8001b28:	8179      	strh	r1, [r7, #10]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001b2e:	7919      	ldrb	r1, [r3, #4]
 8001b30:	1813      	adds	r3, r2, r0
 8001b32:	460a      	mov	r2, r1
 8001b34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001b38:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	8179      	strh	r1, [r7, #10]
 8001b42:	4618      	mov	r0, r3
 8001b44:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001b46:	7959      	ldrb	r1, [r3, #5]
 8001b48:	1813      	adds	r3, r2, r0
 8001b4a:	460a      	mov	r2, r1
 8001b4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001b50:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	1c59      	adds	r1, r3, #1
 8001b58:	8179      	strh	r1, [r7, #10]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	2232      	movs	r2, #50	; 0x32
 8001b5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001b62:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	1c59      	adds	r1, r3, #1
 8001b6a:	8179      	strh	r1, [r7, #10]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2204      	movs	r2, #4
 8001b70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001b74:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	8179      	strh	r1, [r7, #10]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001b82:	7819      	ldrb	r1, [r3, #0]
 8001b84:	1813      	adds	r3, r2, r0
 8001b86:	460a      	mov	r2, r1
 8001b88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	1c59      	adds	r1, r3, #1
 8001b94:	8179      	strh	r1, [r7, #10]
 8001b96:	4618      	mov	r0, r3
 8001b98:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001b9a:	7859      	ldrb	r1, [r3, #1]
 8001b9c:	1813      	adds	r3, r2, r0
 8001b9e:	460a      	mov	r2, r1
 8001ba0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001ba4:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	897b      	ldrh	r3, [r7, #10]
 8001baa:	1c59      	adds	r1, r3, #1
 8001bac:	8179      	strh	r1, [r7, #10]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001bb2:	7899      	ldrb	r1, [r3, #2]
 8001bb4:	1813      	adds	r3, r2, r0
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	1c59      	adds	r1, r3, #1
 8001bc4:	8179      	strh	r1, [r7, #10]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001bca:	78d9      	ldrb	r1, [r3, #3]
 8001bcc:	1813      	adds	r3, r2, r0
 8001bce:	460a      	mov	r2, r1
 8001bd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001bd4:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	897b      	ldrh	r3, [r7, #10]
 8001bda:	1c59      	adds	r1, r3, #1
 8001bdc:	8179      	strh	r1, [r7, #10]
 8001bde:	4413      	add	r3, r2
 8001be0:	2236      	movs	r2, #54	; 0x36
 8001be2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001be6:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	897b      	ldrh	r3, [r7, #10]
 8001bec:	1c59      	adds	r1, r3, #1
 8001bee:	8179      	strh	r1, [r7, #10]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	897b      	ldrh	r3, [r7, #10]
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	8179      	strh	r1, [r7, #10]
 8001c02:	4618      	mov	r0, r3
 8001c04:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c06:	7819      	ldrb	r1, [r3, #0]
 8001c08:	1813      	adds	r3, r2, r0
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	8179      	strh	r1, [r7, #10]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c1e:	7859      	ldrb	r1, [r3, #1]
 8001c20:	1813      	adds	r3, r2, r0
 8001c22:	460a      	mov	r2, r1
 8001c24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	8179      	strh	r1, [r7, #10]
 8001c32:	4618      	mov	r0, r3
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c36:	7899      	ldrb	r1, [r3, #2]
 8001c38:	1813      	adds	r3, r2, r0
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	1c59      	adds	r1, r3, #1
 8001c48:	8179      	strh	r1, [r7, #10]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c4e:	78d9      	ldrb	r1, [r3, #3]
 8001c50:	1813      	adds	r3, r2, r0
 8001c52:	460a      	mov	r2, r1
 8001c54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	897b      	ldrh	r3, [r7, #10]
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	8179      	strh	r1, [r7, #10]
 8001c62:	4413      	add	r3, r2
 8001c64:	22ff      	movs	r2, #255	; 0xff
 8001c66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e009      	b.n	8001c84 <send_DHCP_DECLINE+0x258>
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	33ec      	adds	r3, #236	; 0xec
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001c8a:	dbf1      	blt.n	8001c70 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001c8c:	23ff      	movs	r3, #255	; 0xff
 8001c8e:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001c90:	23ff      	movs	r3, #255	; 0xff
 8001c92:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001c94:	23ff      	movs	r3, #255	; 0xff
 8001c96:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001c98:	23ff      	movs	r3, #255	; 0xff
 8001c9a:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <send_DHCP_DECLINE+0x2a0>)
 8001c9e:	7818      	ldrb	r0, [r3, #0]
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2243      	movs	r2, #67	; 0x43
 8001ca8:	9200      	str	r2, [sp, #0]
 8001caa:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001cae:	f001 fc53 	bl	8003558 <sendto>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000270 	.word	0x20000270
 8001cc0:	20000274 	.word	0x20000274
 8001cc4:	20000254 	.word	0x20000254
 8001cc8:	2000024c 	.word	0x2000024c
 8001ccc:	20000248 	.word	0x20000248

08001cd0 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001cda:	4baa      	ldr	r3, [pc, #680]	; (8001f84 <parseDHCPMSG+0x2b4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fe6b 	bl	80029ba <getSn_RX_RSR>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	823b      	strh	r3, [r7, #16]
 8001ce8:	8a3b      	ldrh	r3, [r7, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d011      	beq.n	8001d12 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001cee:	4ba5      	ldr	r3, [pc, #660]	; (8001f84 <parseDHCPMSG+0x2b4>)
 8001cf0:	7818      	ldrb	r0, [r3, #0]
 8001cf2:	4ba5      	ldr	r3, [pc, #660]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001cf4:	6819      	ldr	r1, [r3, #0]
 8001cf6:	1d3c      	adds	r4, r7, #4
 8001cf8:	8a3a      	ldrh	r2, [r7, #16]
 8001cfa:	1cbb      	adds	r3, r7, #2
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4623      	mov	r3, r4
 8001d00:	f001 fd60 	bl	80037c4 <recvfrom>
 8001d04:	4603      	mov	r3, r0
 8001d06:	823b      	strh	r3, [r7, #16]
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;

   if (svr_port == DHCP_SERVER_PORT) {
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	2b43      	cmp	r3, #67	; 0x43
 8001d0c:	f040 81a7 	bne.w	800205e <parseDHCPMSG+0x38e>
 8001d10:	e001      	b.n	8001d16 <parseDHCPMSG+0x46>
   else return 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e1a5      	b.n	8002062 <parseDHCPMSG+0x392>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001d16:	4b9c      	ldr	r3, [pc, #624]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	7f1a      	ldrb	r2, [r3, #28]
 8001d1c:	4b9b      	ldr	r3, [pc, #620]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d124      	bne.n	8001d6e <parseDHCPMSG+0x9e>
 8001d24:	4b98      	ldr	r3, [pc, #608]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	7f5a      	ldrb	r2, [r3, #29]
 8001d2a:	4b98      	ldr	r3, [pc, #608]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d11d      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d32:	4b95      	ldr	r3, [pc, #596]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	7f9a      	ldrb	r2, [r3, #30]
 8001d38:	4b94      	ldr	r3, [pc, #592]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d3a:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d116      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d40:	4b91      	ldr	r3, [pc, #580]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	7fda      	ldrb	r2, [r3, #31]
 8001d46:	4b91      	ldr	r3, [pc, #580]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d48:	78db      	ldrb	r3, [r3, #3]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d10f      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001d4e:	4b8e      	ldr	r3, [pc, #568]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001d56:	4b8d      	ldr	r3, [pc, #564]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d58:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d107      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001d5e:	4b8a      	ldr	r3, [pc, #552]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001d66:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <parseDHCPMSG+0xa2>
         return 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e177      	b.n	8002062 <parseDHCPMSG+0x392>
		p = (uint8_t *)(&pDHCPMSG->op);
 8001d72:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	33f0      	adds	r3, #240	; 0xf0
 8001d7c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001d7e:	8a3b      	ldrh	r3, [r7, #16]
 8001d80:	3bf0      	subs	r3, #240	; 0xf0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4413      	add	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001d88:	e164      	b.n	8002054 <parseDHCPMSG+0x384>

			switch ( *p ) {
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b36      	cmp	r3, #54	; 0x36
 8001d90:	dc76      	bgt.n	8001e80 <parseDHCPMSG+0x1b0>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f2c0 8151 	blt.w	800203a <parseDHCPMSG+0x36a>
 8001d98:	2b36      	cmp	r3, #54	; 0x36
 8001d9a:	f200 814e 	bhi.w	800203a <parseDHCPMSG+0x36a>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <parseDHCPMSG+0xd4>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001e8d 	.word	0x08001e8d
 8001da8:	08001ead 	.word	0x08001ead
 8001dac:	0800203b 	.word	0x0800203b
 8001db0:	08001eeb 	.word	0x08001eeb
 8001db4:	0800203b 	.word	0x0800203b
 8001db8:	0800203b 	.word	0x0800203b
 8001dbc:	08001f37 	.word	0x08001f37
 8001dc0:	0800203b 	.word	0x0800203b
 8001dc4:	0800203b 	.word	0x0800203b
 8001dc8:	0800203b 	.word	0x0800203b
 8001dcc:	0800203b 	.word	0x0800203b
 8001dd0:	0800203b 	.word	0x0800203b
 8001dd4:	0800203b 	.word	0x0800203b
 8001dd8:	0800203b 	.word	0x0800203b
 8001ddc:	0800203b 	.word	0x0800203b
 8001de0:	0800203b 	.word	0x0800203b
 8001de4:	0800203b 	.word	0x0800203b
 8001de8:	0800203b 	.word	0x0800203b
 8001dec:	0800203b 	.word	0x0800203b
 8001df0:	0800203b 	.word	0x0800203b
 8001df4:	0800203b 	.word	0x0800203b
 8001df8:	0800203b 	.word	0x0800203b
 8001dfc:	0800203b 	.word	0x0800203b
 8001e00:	0800203b 	.word	0x0800203b
 8001e04:	0800203b 	.word	0x0800203b
 8001e08:	0800203b 	.word	0x0800203b
 8001e0c:	0800203b 	.word	0x0800203b
 8001e10:	0800203b 	.word	0x0800203b
 8001e14:	0800203b 	.word	0x0800203b
 8001e18:	0800203b 	.word	0x0800203b
 8001e1c:	0800203b 	.word	0x0800203b
 8001e20:	0800203b 	.word	0x0800203b
 8001e24:	0800203b 	.word	0x0800203b
 8001e28:	0800203b 	.word	0x0800203b
 8001e2c:	0800203b 	.word	0x0800203b
 8001e30:	0800203b 	.word	0x0800203b
 8001e34:	0800203b 	.word	0x0800203b
 8001e38:	0800203b 	.word	0x0800203b
 8001e3c:	0800203b 	.word	0x0800203b
 8001e40:	0800203b 	.word	0x0800203b
 8001e44:	0800203b 	.word	0x0800203b
 8001e48:	0800203b 	.word	0x0800203b
 8001e4c:	0800203b 	.word	0x0800203b
 8001e50:	0800203b 	.word	0x0800203b
 8001e54:	0800203b 	.word	0x0800203b
 8001e58:	0800203b 	.word	0x0800203b
 8001e5c:	0800203b 	.word	0x0800203b
 8001e60:	0800203b 	.word	0x0800203b
 8001e64:	0800203b 	.word	0x0800203b
 8001e68:	0800203b 	.word	0x0800203b
 8001e6c:	0800203b 	.word	0x0800203b
 8001e70:	08001f9d 	.word	0x08001f9d
 8001e74:	0800203b 	.word	0x0800203b
 8001e78:	08001e95 	.word	0x08001e95
 8001e7c:	08001ff9 	.word	0x08001ff9
 8001e80:	2bff      	cmp	r3, #255	; 0xff
 8001e82:	f040 80da 	bne.w	800203a <parseDHCPMSG+0x36a>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	617b      	str	r3, [r7, #20]
   				break;
 8001e8a:	e0e3      	b.n	8002054 <parseDHCPMSG+0x384>
            case padOption :
   				p++;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
   				break;
 8001e92:	e0df      	b.n	8002054 <parseDHCPMSG+0x384>
   			case dhcpMessageType :
   				p++;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
   				p++;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	617a      	str	r2, [r7, #20]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	74fb      	strb	r3, [r7, #19]
   				break;
 8001eaa:	e0d3      	b.n	8002054 <parseDHCPMSG+0x384>
   			case subnetMask :
   				p++;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
   				p++;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	617a      	str	r2, [r7, #20]
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001ec2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	617a      	str	r2, [r7, #20]
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001ece:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	617a      	str	r2, [r7, #20]
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001eda:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	617a      	str	r2, [r7, #20]
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001ee6:	70da      	strb	r2, [r3, #3]
   				break;
 8001ee8:	e0b4      	b.n	8002054 <parseDHCPMSG+0x384>
   			case routersOnSubnet :
   				p++;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	617a      	str	r2, [r7, #20]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	617a      	str	r2, [r7, #20]
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f04:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	617a      	str	r2, [r7, #20]
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f10:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	617a      	str	r2, [r7, #20]
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f1c:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	617a      	str	r2, [r7, #20]
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f28:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001f2a:	7afb      	ldrb	r3, [r7, #11]
 8001f2c:	3b04      	subs	r3, #4
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
   				break;
 8001f34:	e08e      	b.n	8002054 <parseDHCPMSG+0x384>
   			case dns :
   				p++;                  
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	617a      	str	r2, [r7, #20]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	617a      	str	r2, [r7, #20]
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f50:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	617a      	str	r2, [r7, #20]
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f5c:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	617a      	str	r2, [r7, #20]
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f68:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	617a      	str	r2, [r7, #20]
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f74:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	3b04      	subs	r3, #4
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
   				break;
 8001f80:	e068      	b.n	8002054 <parseDHCPMSG+0x384>
 8001f82:	bf00      	nop
 8001f84:	20000248 	.word	0x20000248
 8001f88:	20000270 	.word	0x20000270
 8001f8c:	20000274 	.word	0x20000274
 8001f90:	2000025c 	.word	0x2000025c
 8001f94:	20000258 	.word	0x20000258
 8001f98:	20000260 	.word	0x20000260
   			case dhcpIPaddrLeaseTime :
   				p++;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	617a      	str	r2, [r7, #20]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	617a      	str	r2, [r7, #20]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <parseDHCPMSG+0x39c>)
 8001fb8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <parseDHCPMSG+0x39c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	021a      	lsls	r2, r3, #8
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1c59      	adds	r1, r3, #1
 8001fc4:	6179      	str	r1, [r7, #20]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a28      	ldr	r2, [pc, #160]	; (800206c <parseDHCPMSG+0x39c>)
 8001fcc:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <parseDHCPMSG+0x39c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	021a      	lsls	r2, r3, #8
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	1c59      	adds	r1, r3, #1
 8001fd8:	6179      	str	r1, [r7, #20]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <parseDHCPMSG+0x39c>)
 8001fe0:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <parseDHCPMSG+0x39c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	021a      	lsls	r2, r3, #8
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	1c59      	adds	r1, r3, #1
 8001fec:	6179      	str	r1, [r7, #20]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <parseDHCPMSG+0x39c>)
 8001ff4:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8001ff6:	e02d      	b.n	8002054 <parseDHCPMSG+0x384>
   			case dhcpServerIdentifier :
   				p++;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	617a      	str	r2, [r7, #20]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	617a      	str	r2, [r7, #20]
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <parseDHCPMSG+0x3a0>)
 8002012:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	617a      	str	r2, [r7, #20]
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <parseDHCPMSG+0x3a0>)
 800201e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	617a      	str	r2, [r7, #20]
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <parseDHCPMSG+0x3a0>)
 800202a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	617a      	str	r2, [r7, #20]
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <parseDHCPMSG+0x3a0>)
 8002036:	70da      	strb	r2, [r3, #3]
   				break;
 8002038:	e00c      	b.n	8002054 <parseDHCPMSG+0x384>
   			default :
   				p++;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	617a      	str	r2, [r7, #20]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800204a:	7afb      	ldrb	r3, [r7, #11]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	4413      	add	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
   				break;
 8002052:	bf00      	nop
		while ( p < e ) {
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	f4ff ae96 	bcc.w	8001d8a <parseDHCPMSG+0xba>
			} // switch
		} // while
	} // if
	return	type;
 800205e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002062:	4618      	mov	r0, r3
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	20000000 	.word	0x20000000
 8002070:	2000024c 	.word	0x2000024c

08002074 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800207a:	4b7f      	ldr	r3, [pc, #508]	; (8002278 <DHCP_run+0x204>)
 800207c:	f993 3000 	ldrsb.w	r3, [r3]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d101      	bne.n	8002088 <DHCP_run+0x14>
 8002084:	2305      	movs	r3, #5
 8002086:	e0f3      	b.n	8002270 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8002088:	4b7c      	ldr	r3, [pc, #496]	; (800227c <DHCP_run+0x208>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3301      	adds	r3, #1
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002096:	4618      	mov	r0, r3
 8002098:	f000 faea 	bl	8002670 <WIZCHIP_READ>
 800209c:	4603      	mov	r3, r0
 800209e:	2b22      	cmp	r3, #34	; 0x22
 80020a0:	d006      	beq.n	80020b0 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80020a2:	4b76      	ldr	r3, [pc, #472]	; (800227c <DHCP_run+0x208>)
 80020a4:	7818      	ldrb	r0, [r3, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	2244      	movs	r2, #68	; 0x44
 80020aa:	2102      	movs	r1, #2
 80020ac:	f000 fdd0 	bl	8002c50 <socket>

	ret = DHCP_RUNNING;
 80020b0:	2301      	movs	r3, #1
 80020b2:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80020b4:	f7ff fe0c 	bl	8001cd0 <parseDHCPMSG>
 80020b8:	4603      	mov	r3, r0
 80020ba:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80020bc:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <DHCP_run+0x204>)
 80020be:	f993 3000 	ldrsb.w	r3, [r3]
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	f200 80d0 	bhi.w	8002268 <DHCP_run+0x1f4>
 80020c8:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <DHCP_run+0x5c>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020e5 	.word	0x080020e5
 80020d4:	08002109 	.word	0x08002109
 80020d8:	0800214d 	.word	0x0800214d
 80020dc:	0800219d 	.word	0x0800219d
 80020e0:	080021f7 	.word	0x080021f7
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80020e4:	4b66      	ldr	r3, [pc, #408]	; (8002280 <DHCP_run+0x20c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <DHCP_run+0x20c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80020f0:	4b63      	ldr	r3, [pc, #396]	; (8002280 <DHCP_run+0x20c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80020f6:	4b62      	ldr	r3, [pc, #392]	; (8002280 <DHCP_run+0x20c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80020fc:	f7ff f8a8 	bl	8001250 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8002100:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <DHCP_run+0x204>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
   		break;
 8002106:	e0b2      	b.n	800226e <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d119      	bne.n	8002142 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800210e:	4b5d      	ldr	r3, [pc, #372]	; (8002284 <DHCP_run+0x210>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	7c1a      	ldrb	r2, [r3, #16]
 8002114:	4b5a      	ldr	r3, [pc, #360]	; (8002280 <DHCP_run+0x20c>)
 8002116:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002118:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <DHCP_run+0x210>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	7c5a      	ldrb	r2, [r3, #17]
 800211e:	4b58      	ldr	r3, [pc, #352]	; (8002280 <DHCP_run+0x20c>)
 8002120:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8002122:	4b58      	ldr	r3, [pc, #352]	; (8002284 <DHCP_run+0x210>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	7c9a      	ldrb	r2, [r3, #18]
 8002128:	4b55      	ldr	r3, [pc, #340]	; (8002280 <DHCP_run+0x20c>)
 800212a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 800212c:	4b55      	ldr	r3, [pc, #340]	; (8002284 <DHCP_run+0x210>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	7cda      	ldrb	r2, [r3, #19]
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <DHCP_run+0x20c>)
 8002134:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002136:	f7ff f9ef 	bl	8001518 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800213a:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <DHCP_run+0x204>)
 800213c:	2202      	movs	r2, #2
 800213e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002140:	e095      	b.n	800226e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002142:	f000 f8b1 	bl	80022a8 <check_DHCP_timeout>
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
         break;
 800214a:	e090      	b.n	800226e <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	2b05      	cmp	r3, #5
 8002150:	d116      	bne.n	8002180 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8002152:	f000 f909 	bl	8002368 <check_DHCP_leasedIP>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800215c:	4b4a      	ldr	r3, [pc, #296]	; (8002288 <DHCP_run+0x214>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4798      	blx	r3
					reset_DHCP_timeout();
 8002162:	f000 f9ab 	bl	80024bc <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <DHCP_run+0x204>)
 8002168:	2203      	movs	r2, #3
 800216a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800216c:	e07f      	b.n	800226e <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800216e:	f000 f9a5 	bl	80024bc <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8002172:	4b46      	ldr	r3, [pc, #280]	; (800228c <DHCP_run+0x218>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <DHCP_run+0x204>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
		break;
 800217e:	e076      	b.n	800226e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	2b06      	cmp	r3, #6
 8002184:	d105      	bne.n	8002192 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8002186:	f000 f999 	bl	80024bc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <DHCP_run+0x204>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
		break;
 8002190:	e06d      	b.n	800226e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002192:	f000 f889 	bl	80022a8 <check_DHCP_timeout>
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
		break;
 800219a:	e068      	b.n	800226e <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800219c:	2304      	movs	r3, #4
 800219e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <DHCP_run+0x21c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d060      	beq.n	800226c <DHCP_run+0x1f8>
 80021aa:	4b39      	ldr	r3, [pc, #228]	; (8002290 <DHCP_run+0x21c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	085a      	lsrs	r2, r3, #1
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <DHCP_run+0x220>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d259      	bcs.n	800226c <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80021bc:	4b30      	ldr	r3, [pc, #192]	; (8002280 <DHCP_run+0x20c>)
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <DHCP_run+0x224>)
 80021c2:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <DHCP_run+0x20c>)
 80021c6:	785a      	ldrb	r2, [r3, #1]
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <DHCP_run+0x224>)
 80021ca:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80021cc:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <DHCP_run+0x20c>)
 80021ce:	789a      	ldrb	r2, [r3, #2]
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <DHCP_run+0x224>)
 80021d2:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80021d4:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <DHCP_run+0x20c>)
 80021d6:	78da      	ldrb	r2, [r3, #3]
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <DHCP_run+0x224>)
 80021da:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <DHCP_run+0x228>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	4a2e      	ldr	r2, [pc, #184]	; (800229c <DHCP_run+0x228>)
 80021e4:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80021e6:	f7ff f997 	bl	8001518 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80021ea:	f000 f967 	bl	80024bc <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <DHCP_run+0x204>)
 80021f0:	2204      	movs	r2, #4
 80021f2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80021f4:	e03a      	b.n	800226c <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80021f6:	2304      	movs	r3, #4
 80021f8:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d125      	bne.n	800224c <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <DHCP_run+0x22c>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <DHCP_run+0x224>)
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <DHCP_run+0x20c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d111      	bne.n	8002236 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <DHCP_run+0x224>)
 8002214:	785a      	ldrb	r2, [r3, #1]
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <DHCP_run+0x20c>)
 8002218:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800221a:	429a      	cmp	r2, r3
 800221c:	d10b      	bne.n	8002236 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <DHCP_run+0x224>)
 8002220:	789a      	ldrb	r2, [r3, #2]
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <DHCP_run+0x20c>)
 8002224:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d105      	bne.n	8002236 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <DHCP_run+0x224>)
 800222c:	78da      	ldrb	r2, [r3, #3]
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <DHCP_run+0x20c>)
 8002230:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d004      	beq.n	8002240 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8002236:	2303      	movs	r3, #3
 8002238:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <DHCP_run+0x230>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002240:	f000 f93c 	bl	80024bc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <DHCP_run+0x204>)
 8002246:	2203      	movs	r2, #3
 8002248:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800224a:	e010      	b.n	800226e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800224c:	79bb      	ldrb	r3, [r7, #6]
 800224e:	2b06      	cmp	r3, #6
 8002250:	d105      	bne.n	800225e <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8002252:	f000 f933 	bl	80024bc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <DHCP_run+0x204>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
	   	break;
 800225c:	e007      	b.n	800226e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800225e:	f000 f823 	bl	80022a8 <check_DHCP_timeout>
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
	   	break;
 8002266:	e002      	b.n	800226e <DHCP_run+0x1fa>
		default :
   		break;
 8002268:	bf00      	nop
 800226a:	e000      	b.n	800226e <DHCP_run+0x1fa>
		break;
 800226c:	bf00      	nop
	}

	return ret;
 800226e:	79fb      	ldrb	r3, [r7, #7]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000264 	.word	0x20000264
 800227c:	20000248 	.word	0x20000248
 8002280:	20000254 	.word	0x20000254
 8002284:	20000270 	.word	0x20000270
 8002288:	20000010 	.word	0x20000010
 800228c:	20000018 	.word	0x20000018
 8002290:	20000000 	.word	0x20000000
 8002294:	20000268 	.word	0x20000268
 8002298:	20000250 	.word	0x20000250
 800229c:	2000026c 	.word	0x2000026c
 80022a0:	20000265 	.word	0x20000265
 80022a4:	20000014 	.word	0x20000014

080022a8 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80022ae:	2301      	movs	r3, #1
 80022b0:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <check_DHCP_timeout+0xb0>)
 80022b4:	f993 3000 	ldrsb.w	r3, [r3]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	dc2d      	bgt.n	8002318 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <check_DHCP_timeout+0xb4>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <check_DHCP_timeout+0xb8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d242      	bcs.n	800234e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80022c8:	4b26      	ldr	r3, [pc, #152]	; (8002364 <check_DHCP_timeout+0xbc>)
 80022ca:	f993 3000 	ldrsb.w	r3, [r3]
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d00c      	beq.n	80022ec <check_DHCP_timeout+0x44>
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	dc0d      	bgt.n	80022f2 <check_DHCP_timeout+0x4a>
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d002      	beq.n	80022e0 <check_DHCP_timeout+0x38>
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d003      	beq.n	80022e6 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80022de:	e008      	b.n	80022f2 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80022e0:	f7fe ffb6 	bl	8001250 <send_DHCP_DISCOVER>
				break;
 80022e4:	e006      	b.n	80022f4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80022e6:	f7ff f917 	bl	8001518 <send_DHCP_REQUEST>
				break;
 80022ea:	e003      	b.n	80022f4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80022ec:	f7ff f914 	bl	8001518 <send_DHCP_REQUEST>
				break;
 80022f0:	e000      	b.n	80022f4 <check_DHCP_timeout+0x4c>
				break;
 80022f2:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <check_DHCP_timeout+0xb8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <check_DHCP_timeout+0xb8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	330a      	adds	r3, #10
 8002300:	4a16      	ldr	r2, [pc, #88]	; (800235c <check_DHCP_timeout+0xb4>)
 8002302:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <check_DHCP_timeout+0xb0>)
 8002306:	f993 3000 	ldrsb.w	r3, [r3]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	3301      	adds	r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	b25a      	sxtb	r2, r3
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <check_DHCP_timeout+0xb0>)
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	e01a      	b.n	800234e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <check_DHCP_timeout+0xbc>)
 800231a:	f993 3000 	ldrsb.w	r3, [r3]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d00c      	beq.n	800233c <check_DHCP_timeout+0x94>
 8002322:	2b04      	cmp	r3, #4
 8002324:	dc10      	bgt.n	8002348 <check_DHCP_timeout+0xa0>
 8002326:	2b01      	cmp	r3, #1
 8002328:	d002      	beq.n	8002330 <check_DHCP_timeout+0x88>
 800232a:	2b02      	cmp	r3, #2
 800232c:	d006      	beq.n	800233c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800232e:	e00b      	b.n	8002348 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <check_DHCP_timeout+0xbc>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002336:	2300      	movs	r3, #0
 8002338:	71fb      	strb	r3, [r7, #7]
				break;
 800233a:	e006      	b.n	800234a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800233c:	f7fe ff88 	bl	8001250 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <check_DHCP_timeout+0xbc>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
				break;
 8002346:	e000      	b.n	800234a <check_DHCP_timeout+0xa2>
				break;
 8002348:	bf00      	nop
		}
		reset_DHCP_timeout();
 800234a:	f000 f8b7 	bl	80024bc <reset_DHCP_timeout>
	}
	return ret;
 800234e:	79fb      	ldrb	r3, [r7, #7]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000265 	.word	0x20000265
 800235c:	20000004 	.word	0x20000004
 8002360:	20000268 	.word	0x20000268
 8002364:	20000264 	.word	0x20000264

08002368 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800236e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002372:	f000 f97d 	bl	8002670 <WIZCHIP_READ>
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800237a:	2103      	movs	r1, #3
 800237c:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002380:	f000 f9c2 	bl	8002708 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <check_DHCP_leasedIP+0x6c>)
 8002386:	7818      	ldrb	r0, [r3, #0]
 8002388:	f241 3388 	movw	r3, #5000	; 0x1388
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <check_DHCP_leasedIP+0x70>)
 8002390:	2211      	movs	r2, #17
 8002392:	4912      	ldr	r1, [pc, #72]	; (80023dc <check_DHCP_leasedIP+0x74>)
 8002394:	f001 f8e0 	bl	8003558 <sendto>
 8002398:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80023a2:	f000 f9b1 	bl	8002708 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f113 0f0d 	cmn.w	r3, #13
 80023ac:	d101      	bne.n	80023b2 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00c      	b.n	80023cc <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80023b2:	f7ff fb3b 	bl	8001a2c <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <check_DHCP_leasedIP+0x78>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80023bc:	bf00      	nop
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <check_DHCP_leasedIP+0x78>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d9f9      	bls.n	80023be <check_DHCP_leasedIP+0x56>

		return 0;
 80023ca:	2300      	movs	r3, #0
	}
}	
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000248 	.word	0x20000248
 80023d8:	20000254 	.word	0x20000254
 80023dc:	08013138 	.word	0x08013138
 80023e0:	20000268 	.word	0x20000268

080023e4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80023f4:	2206      	movs	r2, #6
 80023f6:	492b      	ldr	r1, [pc, #172]	; (80024a4 <DHCP_init+0xc0>)
 80023f8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80023fc:	f000 f9d2 	bl	80027a4 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002400:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <DHCP_init+0xc0>)
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <DHCP_init+0xc0>)
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	4313      	orrs	r3, r2
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <DHCP_init+0xc0>)
 800240e:	789b      	ldrb	r3, [r3, #2]
 8002410:	4313      	orrs	r3, r2
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <DHCP_init+0xc0>)
 8002416:	78db      	ldrb	r3, [r3, #3]
 8002418:	4313      	orrs	r3, r2
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <DHCP_init+0xc0>)
 800241e:	791b      	ldrb	r3, [r3, #4]
 8002420:	4313      	orrs	r3, r2
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <DHCP_init+0xc0>)
 8002426:	795b      	ldrb	r3, [r3, #5]
 8002428:	4313      	orrs	r3, r2
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d117      	bne.n	8002460 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <DHCP_init+0xc0>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <DHCP_init+0xc0>)
 8002438:	2208      	movs	r2, #8
 800243a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <DHCP_init+0xc0>)
 800243e:	22dc      	movs	r2, #220	; 0xdc
 8002440:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <DHCP_init+0xc0>)
 8002444:	2200      	movs	r2, #0
 8002446:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <DHCP_init+0xc0>)
 800244a:	2200      	movs	r2, #0
 800244c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <DHCP_init+0xc0>)
 8002450:	2200      	movs	r2, #0
 8002452:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002454:	2206      	movs	r2, #6
 8002456:	4913      	ldr	r1, [pc, #76]	; (80024a4 <DHCP_init+0xc0>)
 8002458:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800245c:	f000 fa02 	bl	8002864 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <DHCP_init+0xc4>)
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002466:	4a11      	ldr	r2, [pc, #68]	; (80024ac <DHCP_init+0xc8>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <DHCP_init+0xcc>)
 800246e:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <DHCP_init+0xd0>)
 8002470:	601a      	str	r2, [r3, #0]

	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	2204      	movs	r2, #4
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800247e:	f000 f9f1 	bl	8002864 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	2204      	movs	r2, #4
 8002488:	4619      	mov	r1, r3
 800248a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800248e:	f000 f9e9 	bl	8002864 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002492:	f000 f813 	bl	80024bc <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <DHCP_init+0xd4>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000274 	.word	0x20000274
 80024a8:	20000248 	.word	0x20000248
 80024ac:	20000270 	.word	0x20000270
 80024b0:	2000026c 	.word	0x2000026c
 80024b4:	12345678 	.word	0x12345678
 80024b8:	20000264 	.word	0x20000264

080024bc <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <reset_DHCP_timeout+0x20>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <reset_DHCP_timeout+0x24>)
 80024c8:	220a      	movs	r2, #10
 80024ca:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <reset_DHCP_timeout+0x28>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	20000268 	.word	0x20000268
 80024e0:	20000004 	.word	0x20000004
 80024e4:	20000265 	.word	0x20000265

080024e8 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <DHCP_time_handler+0x18>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	4a03      	ldr	r2, [pc, #12]	; (8002500 <DHCP_time_handler+0x18>)
 80024f4:	6013      	str	r3, [r2, #0]
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	20000268 	.word	0x20000268

08002504 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <getIPfromDHCP+0x3c>)
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3301      	adds	r3, #1
 8002518:	4a09      	ldr	r2, [pc, #36]	; (8002540 <getIPfromDHCP+0x3c>)
 800251a:	7852      	ldrb	r2, [r2, #1]
 800251c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3302      	adds	r3, #2
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <getIPfromDHCP+0x3c>)
 8002524:	7892      	ldrb	r2, [r2, #2]
 8002526:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3303      	adds	r3, #3
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <getIPfromDHCP+0x3c>)
 800252e:	78d2      	ldrb	r2, [r2, #3]
 8002530:	701a      	strb	r2, [r3, #0]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000254 	.word	0x20000254

08002544 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <getGWfromDHCP+0x3c>)
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3301      	adds	r3, #1
 8002558:	4a09      	ldr	r2, [pc, #36]	; (8002580 <getGWfromDHCP+0x3c>)
 800255a:	7852      	ldrb	r2, [r2, #1]
 800255c:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3302      	adds	r3, #2
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <getGWfromDHCP+0x3c>)
 8002564:	7892      	ldrb	r2, [r2, #2]
 8002566:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3303      	adds	r3, #3
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <getGWfromDHCP+0x3c>)
 800256e:	78d2      	ldrb	r2, [r2, #3]
 8002570:	701a      	strb	r2, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000258 	.word	0x20000258

08002584 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <getSNfromDHCP+0x3c>)
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3301      	adds	r3, #1
 8002598:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <getSNfromDHCP+0x3c>)
 800259a:	7852      	ldrb	r2, [r2, #1]
 800259c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3302      	adds	r3, #2
 80025a2:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <getSNfromDHCP+0x3c>)
 80025a4:	7892      	ldrb	r2, [r2, #2]
 80025a6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3303      	adds	r3, #3
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <getSNfromDHCP+0x3c>)
 80025ae:	78d2      	ldrb	r2, [r2, #3]
 80025b0:	701a      	strb	r2, [r3, #0]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	2000025c 	.word	0x2000025c

080025c4 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a09      	ldr	r2, [pc, #36]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025da:	7852      	ldrb	r2, [r2, #1]
 80025dc:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3302      	adds	r3, #2
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025e4:	7892      	ldrb	r2, [r2, #2]
 80025e6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3303      	adds	r3, #3
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025ee:	78d2      	ldrb	r2, [r2, #3]
 80025f0:	701a      	strb	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000260 	.word	0x20000260

08002604 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	2b09      	cmp	r3, #9
 800261a:	d803      	bhi.n	8002624 <NibbleToHex+0x20>
    return nibble + '0';
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	3330      	adds	r3, #48	; 0x30
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e002      	b.n	800262a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	3337      	adds	r3, #55	; 0x37
 8002628:	b2db      	uxtb	r3, r3
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <DNS_init+0x2c>)
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <DNS_init+0x30>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <DNS_init+0x34>)
 8002652:	f241 1222 	movw	r2, #4386	; 0x1122
 8002656:	801a      	strh	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	20000280 	.word	0x20000280
 8002668:	2000027c 	.word	0x2000027c
 800266c:	20000282 	.word	0x20000282

08002670 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <WIZCHIP_READ+0x94>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800267e:	4b21      	ldr	r3, [pc, #132]	; (8002704 <WIZCHIP_READ+0x94>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <WIZCHIP_READ+0x94>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <WIZCHIP_READ+0x24>
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <WIZCHIP_READ+0x94>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d114      	bne.n	80026be <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <WIZCHIP_READ+0x94>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	0c12      	lsrs	r2, r2, #16
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	4610      	mov	r0, r2
 80026a0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <WIZCHIP_READ+0x94>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	0a12      	lsrs	r2, r2, #8
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	4610      	mov	r0, r2
 80026ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <WIZCHIP_READ+0x94>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4610      	mov	r0, r2
 80026ba:	4798      	blx	r3
 80026bc:	e011      	b.n	80026e2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <WIZCHIP_READ+0x94>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	f107 020c 	add.w	r2, r7, #12
 80026dc:	2103      	movs	r1, #3
 80026de:	4610      	mov	r0, r2
 80026e0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <WIZCHIP_READ+0x94>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	4798      	blx	r3
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <WIZCHIP_READ+0x94>)
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <WIZCHIP_READ+0x94>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4798      	blx	r3
   return ret;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000020 	.word	0x20000020

08002708 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4798      	blx	r3
   WIZCHIP.CS._select();
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b00      	cmp	r3, #0
 800272e:	d119      	bne.n	8002764 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	0c12      	lsrs	r2, r2, #16
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	4610      	mov	r0, r2
 800273c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	0a12      	lsrs	r2, r2, #8
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	4610      	mov	r0, r2
 800274a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4610      	mov	r0, r2
 8002756:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	4610      	mov	r0, r2
 8002760:	4798      	blx	r3
 8002762:	e013      	b.n	800278c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	b2db      	uxtb	r3, r3
 800276a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	b2db      	uxtb	r3, r3
 8002772:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	2104      	movs	r1, #4
 8002788:	4610      	mov	r0, r2
 800278a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002792:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	4798      	blx	r3
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000020 	.word	0x20000020

080027a4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80027b2:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80027b8:	4b29      	ldr	r3, [pc, #164]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <WIZCHIP_READ_BUF+0x2a>
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d126      	bne.n	800281c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	0c12      	lsrs	r2, r2, #16
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	4610      	mov	r0, r2
 80027da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	0a12      	lsrs	r2, r2, #8
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	4610      	mov	r0, r2
 80027e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	4610      	mov	r0, r2
 80027f4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	82fb      	strh	r3, [r7, #22]
 80027fa:	e00a      	b.n	8002812 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	8afa      	ldrh	r2, [r7, #22]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	188c      	adds	r4, r1, r2
 8002806:	4798      	blx	r3
 8002808:	4603      	mov	r3, r0
 800280a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800280c:	8afb      	ldrh	r3, [r7, #22]
 800280e:	3301      	adds	r3, #1
 8002810:	82fb      	strh	r3, [r7, #22]
 8002812:	8afa      	ldrh	r2, [r7, #22]
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	429a      	cmp	r2, r3
 8002818:	d3f0      	bcc.n	80027fc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800281a:	e017      	b.n	800284c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	b2db      	uxtb	r3, r3
 8002822:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b2db      	uxtb	r3, r3
 800282a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f107 0210 	add.w	r2, r7, #16
 800283a:	2103      	movs	r1, #3
 800283c:	4610      	mov	r0, r2
 800283e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	4611      	mov	r1, r2
 8002848:	68b8      	ldr	r0, [r7, #8]
 800284a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002852:	4b03      	ldr	r3, [pc, #12]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	4798      	blx	r3
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}
 8002860:	20000020 	.word	0x20000020

08002864 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002878:	4b29      	ldr	r3, [pc, #164]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002886:	4b26      	ldr	r3, [pc, #152]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d126      	bne.n	80028dc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	0c12      	lsrs	r2, r2, #16
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	4610      	mov	r0, r2
 800289a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800289c:	4b20      	ldr	r3, [pc, #128]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	0a12      	lsrs	r2, r2, #8
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	4610      	mov	r0, r2
 80028a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4610      	mov	r0, r2
 80028b4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	82fb      	strh	r3, [r7, #22]
 80028ba:	e00a      	b.n	80028d2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	8afa      	ldrh	r2, [r7, #22]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	440a      	add	r2, r1
 80028c6:	7812      	ldrb	r2, [r2, #0]
 80028c8:	4610      	mov	r0, r2
 80028ca:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028cc:	8afb      	ldrh	r3, [r7, #22]
 80028ce:	3301      	adds	r3, #1
 80028d0:	82fb      	strh	r3, [r7, #22]
 80028d2:	8afa      	ldrh	r2, [r7, #22]
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3f0      	bcc.n	80028bc <WIZCHIP_WRITE_BUF+0x58>
 80028da:	e017      	b.n	800290c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f107 0210 	add.w	r2, r7, #16
 80028fa:	2103      	movs	r1, #3
 80028fc:	4610      	mov	r0, r2
 80028fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	88fa      	ldrh	r2, [r7, #6]
 8002906:	4611      	mov	r1, r2
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002912:	4b03      	ldr	r3, [pc, #12]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4798      	blx	r3
}
 8002918:	bf00      	nop
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000020 	.word	0x20000020

08002924 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800292e:	2300      	movs	r3, #0
 8002930:	81fb      	strh	r3, [r7, #14]
 8002932:	2300      	movs	r3, #0
 8002934:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3301      	adds	r3, #1
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fe94 	bl	8002670 <WIZCHIP_READ>
 8002948:	4603      	mov	r3, r0
 800294a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800294c:	89bb      	ldrh	r3, [r7, #12]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	b29c      	uxth	r4, r3
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	3301      	adds	r3, #1
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fe86 	bl	8002670 <WIZCHIP_READ>
 8002964:	4603      	mov	r3, r0
 8002966:	b29b      	uxth	r3, r3
 8002968:	4423      	add	r3, r4
 800296a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800296c:	89bb      	ldrh	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01a      	beq.n	80029a8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	3301      	adds	r3, #1
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fe76 	bl	8002670 <WIZCHIP_READ>
 8002984:	4603      	mov	r3, r0
 8002986:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002988:	89fb      	ldrh	r3, [r7, #14]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	b29c      	uxth	r4, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	3301      	adds	r3, #1
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fe68 	bl	8002670 <WIZCHIP_READ>
 80029a0:	4603      	mov	r3, r0
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4423      	add	r3, r4
 80029a6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80029a8:	89fa      	ldrh	r2, [r7, #14]
 80029aa:	89bb      	ldrh	r3, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1c2      	bne.n	8002936 <getSn_TX_FSR+0x12>
   return val;
 80029b0:	89fb      	ldrh	r3, [r7, #14]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd90      	pop	{r4, r7, pc}

080029ba <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80029ba:	b590      	push	{r4, r7, lr}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	81fb      	strh	r3, [r7, #14]
 80029c8:	2300      	movs	r3, #0
 80029ca:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3301      	adds	r3, #1
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fe49 	bl	8002670 <WIZCHIP_READ>
 80029de:	4603      	mov	r3, r0
 80029e0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80029e2:	89bb      	ldrh	r3, [r7, #12]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	b29c      	uxth	r4, r3
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	3301      	adds	r3, #1
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fe3b 	bl	8002670 <WIZCHIP_READ>
 80029fa:	4603      	mov	r3, r0
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4423      	add	r3, r4
 8002a00:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002a02:	89bb      	ldrh	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01a      	beq.n	8002a3e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fe2b 	bl	8002670 <WIZCHIP_READ>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a1e:	89fb      	ldrh	r3, [r7, #14]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	b29c      	uxth	r4, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	3301      	adds	r3, #1
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fe1d 	bl	8002670 <WIZCHIP_READ>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4423      	add	r3, r4
 8002a3c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002a3e:	89fa      	ldrh	r2, [r7, #14]
 8002a40:	89bb      	ldrh	r3, [r7, #12]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d1c2      	bne.n	80029cc <getSn_RX_RSR+0x12>
   return val;
 8002a46:	89fb      	ldrh	r3, [r7, #14]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}

08002a50 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d048      	beq.n	8002b00 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3301      	adds	r3, #1
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fdf8 	bl	8002670 <WIZCHIP_READ>
 8002a80:	4603      	mov	r3, r0
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b29c      	uxth	r4, r3
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fdeb 	bl	8002670 <WIZCHIP_READ>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	4423      	add	r3, r4
 8002aa0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002aa2:	89fb      	ldrh	r3, [r7, #14]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	79fa      	ldrb	r2, [r7, #7]
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	3202      	adds	r2, #2
 8002aac:	00d2      	lsls	r2, r2, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002ab2:	88bb      	ldrh	r3, [r7, #4]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6839      	ldr	r1, [r7, #0]
 8002ab8:	68b8      	ldr	r0, [r7, #8]
 8002aba:	f7ff fed3 	bl	8002864 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002abe:	89fa      	ldrh	r2, [r7, #14]
 8002ac0:	88bb      	ldrh	r3, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	3301      	adds	r3, #1
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7ff fe12 	bl	8002708 <WIZCHIP_WRITE>
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	3301      	adds	r3, #1
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002af0:	461a      	mov	r2, r3
 8002af2:	89fb      	ldrh	r3, [r7, #14]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff fe05 	bl	8002708 <WIZCHIP_WRITE>
 8002afe:	e000      	b.n	8002b02 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002b00:	bf00      	nop
}
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd90      	pop	{r4, r7, pc}

08002b08 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002b20:	88bb      	ldrh	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d048      	beq.n	8002bb8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fd9c 	bl	8002670 <WIZCHIP_READ>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	b29c      	uxth	r4, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	3301      	adds	r3, #1
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fd8f 	bl	8002670 <WIZCHIP_READ>
 8002b52:	4603      	mov	r3, r0
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	4423      	add	r3, r4
 8002b58:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	79fa      	ldrb	r2, [r7, #7]
 8002b60:	0092      	lsls	r2, r2, #2
 8002b62:	3203      	adds	r2, #3
 8002b64:	00d2      	lsls	r2, r2, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002b6a:	88bb      	ldrh	r3, [r7, #4]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	68b8      	ldr	r0, [r7, #8]
 8002b72:	f7ff fe17 	bl	80027a4 <WIZCHIP_READ_BUF>
   ptr += len;
 8002b76:	89fa      	ldrh	r2, [r7, #14]
 8002b78:	88bb      	ldrh	r3, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	3301      	adds	r3, #1
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	89fb      	ldrh	r3, [r7, #14]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f7ff fdb6 	bl	8002708 <WIZCHIP_WRITE>
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002ba8:	461a      	mov	r2, r3
 8002baa:	89fb      	ldrh	r3, [r7, #14]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f7ff fda9 	bl	8002708 <WIZCHIP_WRITE>
 8002bb6:	e000      	b.n	8002bba <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002bb8:	bf00      	nop
}
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd90      	pop	{r4, r7, pc}

08002bc0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	460a      	mov	r2, r1
 8002bca:	71fb      	strb	r3, [r7, #7]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	3301      	adds	r3, #1
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fd45 	bl	8002670 <WIZCHIP_READ>
 8002be6:	4603      	mov	r3, r0
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	b29c      	uxth	r4, r3
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fd38 	bl	8002670 <WIZCHIP_READ>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4423      	add	r3, r4
 8002c06:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8002c08:	89fa      	ldrh	r2, [r7, #14]
 8002c0a:	88bb      	ldrh	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	3301      	adds	r3, #1
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	89fb      	ldrh	r3, [r7, #14]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f7ff fd6d 	bl	8002708 <WIZCHIP_WRITE>
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	3301      	adds	r3, #1
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	89fb      	ldrh	r3, [r7, #14]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f7ff fd60 	bl	8002708 <WIZCHIP_WRITE>
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}

08002c50 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4604      	mov	r4, r0
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4623      	mov	r3, r4
 8002c60:	71fb      	strb	r3, [r7, #7]
 8002c62:	4603      	mov	r3, r0
 8002c64:	71bb      	strb	r3, [r7, #6]
 8002c66:	460b      	mov	r3, r1
 8002c68:	80bb      	strh	r3, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d902      	bls.n	8002c7a <socket+0x2a>
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295
 8002c78:	e0f0      	b.n	8002e5c <socket+0x20c>
	switch(protocol)
 8002c7a:	79bb      	ldrb	r3, [r7, #6]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d005      	beq.n	8002c8c <socket+0x3c>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	dd11      	ble.n	8002ca8 <socket+0x58>
 8002c84:	3b02      	subs	r3, #2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d80e      	bhi.n	8002ca8 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002c8a:	e010      	b.n	8002cae <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	2204      	movs	r2, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002c98:	f7ff fd84 	bl	80027a4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <socket+0x5e>
 8002ca2:	f06f 0302 	mvn.w	r3, #2
 8002ca6:	e0d9      	b.n	8002e5c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002ca8:	f06f 0304 	mvn.w	r3, #4
 8002cac:	e0d6      	b.n	8002e5c <socket+0x20c>
         break;
 8002cae:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <socket+0x70>
 8002cba:	f06f 0305 	mvn.w	r3, #5
 8002cbe:	e0cd      	b.n	8002e5c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d028      	beq.n	8002d18 <socket+0xc8>
	{
   	switch(protocol)
 8002cc6:	79bb      	ldrb	r3, [r7, #6]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d002      	beq.n	8002cd2 <socket+0x82>
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d008      	beq.n	8002ce2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002cd0:	e022      	b.n	8002d18 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11a      	bne.n	8002d12 <socket+0xc2>
 8002cdc:	f06f 0305 	mvn.w	r3, #5
 8002ce0:	e0bc      	b.n	8002e5c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db02      	blt.n	8002cfa <socket+0xaa>
 8002cf4:	f06f 0305 	mvn.w	r3, #5
 8002cf8:	e0b0      	b.n	8002e5c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db04      	blt.n	8002d16 <socket+0xc6>
 8002d0c:	f06f 0305 	mvn.w	r3, #5
 8002d10:	e0a4      	b.n	8002e5c <socket+0x20c>
   	      break;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <socket+0xc8>
   	      break;
 8002d16:	bf00      	nop
   	}
   }
	close(sn);
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f8ac 	bl	8002e78 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	3301      	adds	r3, #1
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2e:	f023 030f 	bic.w	r3, r3, #15
 8002d32:	b25a      	sxtb	r2, r3
 8002d34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7ff fce2 	bl	8002708 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002d44:	88bb      	ldrh	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d110      	bne.n	8002d6c <socket+0x11c>
	{
	   port = sock_any_port++;
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <socket+0x214>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	b291      	uxth	r1, r2
 8002d52:	4a44      	ldr	r2, [pc, #272]	; (8002e64 <socket+0x214>)
 8002d54:	8011      	strh	r1, [r2, #0]
 8002d56:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002d58:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <socket+0x214>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d103      	bne.n	8002d6c <socket+0x11c>
 8002d64:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <socket+0x214>)
 8002d66:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002d6a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	3301      	adds	r3, #1
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d78:	461a      	mov	r2, r3
 8002d7a:	88bb      	ldrh	r3, [r7, #4]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f7ff fcbf 	bl	8002708 <WIZCHIP_WRITE>
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	3301      	adds	r3, #1
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d96:	461a      	mov	r2, r3
 8002d98:	88bb      	ldrh	r3, [r7, #4]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f7ff fcb2 	bl	8002708 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	3301      	adds	r3, #1
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fca8 	bl	8002708 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002db8:	bf00      	nop
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fc52 	bl	8002670 <WIZCHIP_READ>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f3      	bne.n	8002dba <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <socket+0x218>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	4013      	ands	r3, r2
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <socket+0x218>)
 8002dee:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	f003 0201 	and.w	r2, r3, #1
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	b21a      	sxth	r2, r3
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <socket+0x218>)
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b21b      	sxth	r3, r3
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <socket+0x218>)
 8002e0c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	2201      	movs	r2, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <socket+0x21c>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	4013      	ands	r3, r2
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <socket+0x21c>)
 8002e2a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <socket+0x220>)
 8002e30:	2100      	movs	r1, #0
 8002e32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <socket+0x224>)
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002e3e:	bf00      	nop
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	3301      	adds	r3, #1
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fc0f 	bl	8002670 <WIZCHIP_READ>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f3      	beq.n	8002e40 <socket+0x1f0>
   return (int8_t)sn;
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd90      	pop	{r4, r7, pc}
 8002e64:	2000001c 	.word	0x2000001c
 8002e68:	20000284 	.word	0x20000284
 8002e6c:	20000286 	.word	0x20000286
 8002e70:	20000288 	.word	0x20000288
 8002e74:	20000298 	.word	0x20000298

08002e78 <close>:

int8_t close(uint8_t sn)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d902      	bls.n	8002e8e <close+0x16>
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8c:	e055      	b.n	8002f3a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	3301      	adds	r3, #1
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e9a:	2110      	movs	r1, #16
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fc33 	bl	8002708 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002ea2:	bf00      	nop
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fbdd 	bl	8002670 <WIZCHIP_READ>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f3      	bne.n	8002ea4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ec8:	211f      	movs	r1, #31
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fc1c 	bl	8002708 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <close+0xcc>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <close+0xcc>)
 8002eec:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	b21a      	sxth	r2, r3
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <close+0xd0>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	4013      	ands	r3, r2
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <close+0xd0>)
 8002f0a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <close+0xd4>)
 8002f10:	2100      	movs	r1, #0
 8002f12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <close+0xd8>)
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002f1e:	bf00      	nop
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3301      	adds	r3, #1
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fb9f 	bl	8002670 <WIZCHIP_READ>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f3      	bne.n	8002f20 <close+0xa8>
	return SOCK_OK;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000284 	.word	0x20000284
 8002f48:	20000286 	.word	0x20000286
 8002f4c:	20000288 	.word	0x20000288
 8002f50:	20000298 	.word	0x20000298

08002f54 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
 8002f60:	4613      	mov	r3, r2
 8002f62:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d902      	bls.n	8002f70 <connect+0x1c>
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	e0c6      	b.n	80030fe <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	3301      	adds	r3, #1
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fb79 	bl	8002670 <WIZCHIP_READ>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d002      	beq.n	8002f8e <connect+0x3a>
 8002f88:	f06f 0304 	mvn.w	r3, #4
 8002f8c:	e0b7      	b.n	80030fe <connect+0x1aa>
   CHECK_SOCKINIT();
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	3301      	adds	r3, #1
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fb68 	bl	8002670 <WIZCHIP_READ>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b13      	cmp	r3, #19
 8002fa4:	d002      	beq.n	8002fac <connect+0x58>
 8002fa6:	f06f 0302 	mvn.w	r3, #2
 8002faa:	e0a8      	b.n	80030fe <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	3201      	adds	r2, #1
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	3202      	adds	r2, #2
 8002fc8:	7812      	ldrb	r2, [r2, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	3203      	adds	r2, #3
 8002fd6:	7812      	ldrb	r2, [r2, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d002      	beq.n	8002fea <connect+0x96>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <connect+0x9c>
 8002fea:	f06f 030b 	mvn.w	r3, #11
 8002fee:	e086      	b.n	80030fe <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <connect+0xa8>
 8002ff6:	f06f 030a 	mvn.w	r3, #10
 8002ffa:	e080      	b.n	80030fe <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	3301      	adds	r3, #1
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003008:	2204      	movs	r2, #4
 800300a:	6839      	ldr	r1, [r7, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fc29 	bl	8002864 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	3301      	adds	r3, #1
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301e:	461a      	mov	r2, r3
 8003020:	88bb      	ldrh	r3, [r7, #4]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	b29b      	uxth	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f7ff fb6c 	bl	8002708 <WIZCHIP_WRITE>
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	3301      	adds	r3, #1
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800303c:	461a      	mov	r2, r3
 800303e:	88bb      	ldrh	r3, [r7, #4]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7ff fb5f 	bl	8002708 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3301      	adds	r3, #1
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003056:	2104      	movs	r1, #4
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fb55 	bl	8002708 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800305e:	bf00      	nop
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3301      	adds	r3, #1
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff faff 	bl	8002670 <WIZCHIP_READ>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f3      	bne.n	8003060 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <connect+0x1b4>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	fa42 f303 	asr.w	r3, r2, r3
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d02b      	beq.n	80030e4 <connect+0x190>
 800308c:	2300      	movs	r3, #0
 800308e:	e036      	b.n	80030fe <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3301      	adds	r3, #1
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fae7 	bl	8002670 <WIZCHIP_READ>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00c      	beq.n	80030c6 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3301      	adds	r3, #1
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80030b8:	2108      	movs	r1, #8
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fb24 	bl	8002708 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80030c0:	f06f 030c 	mvn.w	r3, #12
 80030c4:	e01b      	b.n	80030fe <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	3301      	adds	r3, #1
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff facc 	bl	8002670 <WIZCHIP_READ>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80030de:	f06f 0303 	mvn.w	r3, #3
 80030e2:	e00c      	b.n	80030fe <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	3301      	adds	r3, #1
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fabd 	bl	8002670 <WIZCHIP_READ>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b17      	cmp	r3, #23
 80030fa:	d1c9      	bne.n	8003090 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80030fc:	2301      	movs	r3, #1
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000284 	.word	0x20000284

0800310c <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d902      	bls.n	8003122 <disconnect+0x16>
 800311c:	f04f 33ff 	mov.w	r3, #4294967295
 8003120:	e062      	b.n	80031e8 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	3301      	adds	r3, #1
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff faa0 	bl	8002670 <WIZCHIP_READ>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	2b01      	cmp	r3, #1
 8003138:	d002      	beq.n	8003140 <disconnect+0x34>
 800313a:	f06f 0304 	mvn.w	r3, #4
 800313e:	e053      	b.n	80031e8 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	3301      	adds	r3, #1
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800314c:	2108      	movs	r1, #8
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fada 	bl	8002708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003154:	bf00      	nop
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	3301      	adds	r3, #1
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fa84 	bl	8002670 <WIZCHIP_READ>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f3      	bne.n	8003156 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2201      	movs	r2, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	b21b      	sxth	r3, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	b21a      	sxth	r2, r3
 800317c:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <disconnect+0xe4>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b21b      	sxth	r3, r3
 8003182:	4013      	ands	r3, r2
 8003184:	b21b      	sxth	r3, r3
 8003186:	b29a      	uxth	r2, r3
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <disconnect+0xe4>)
 800318a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <disconnect+0xe8>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	fa42 f303 	asr.w	r3, r2, r3
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <disconnect+0xc2>
 80031a0:	2300      	movs	r3, #0
 80031a2:	e021      	b.n	80031e8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	3301      	adds	r3, #1
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fa5d 	bl	8002670 <WIZCHIP_READ>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <disconnect+0xc2>
	   {
	      close(sn);
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fe58 	bl	8002e78 <close>
	      return SOCKERR_TIMEOUT;
 80031c8:	f06f 030c 	mvn.w	r3, #12
 80031cc:	e00c      	b.n	80031e8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	3301      	adds	r3, #1
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fa48 	bl	8002670 <WIZCHIP_READ>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1de      	bne.n	80031a4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000286 	.word	0x20000286
 80031f4:	20000284 	.word	0x20000284

080031f8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	6039      	str	r1, [r7, #0]
 8003202:	71fb      	strb	r3, [r7, #7]
 8003204:	4613      	mov	r3, r2
 8003206:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800320c:	2300      	movs	r3, #0
 800320e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	2b08      	cmp	r3, #8
 8003214:	d902      	bls.n	800321c <send+0x24>
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e0de      	b.n	80033da <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	3301      	adds	r3, #1
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fa23 	bl	8002670 <WIZCHIP_READ>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	2b01      	cmp	r3, #1
 8003232:	d002      	beq.n	800323a <send+0x42>
 8003234:	f06f 0304 	mvn.w	r3, #4
 8003238:	e0cf      	b.n	80033da <send+0x1e2>
   CHECK_SOCKDATA();
 800323a:	88bb      	ldrh	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <send+0x4e>
 8003240:	f06f 030d 	mvn.w	r3, #13
 8003244:	e0c9      	b.n	80033da <send+0x1e2>
   tmp = getSn_SR(sn);
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	3301      	adds	r3, #1
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fa0c 	bl	8002670 <WIZCHIP_READ>
 8003258:	4603      	mov	r3, r0
 800325a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b17      	cmp	r3, #23
 8003260:	d005      	beq.n	800326e <send+0x76>
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b1c      	cmp	r3, #28
 8003266:	d002      	beq.n	800326e <send+0x76>
 8003268:	f06f 0306 	mvn.w	r3, #6
 800326c:	e0b5      	b.n	80033da <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800326e:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <send+0x1ec>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	fa42 f303 	asr.w	r3, r2, r3
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d039      	beq.n	80032f6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3301      	adds	r3, #1
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f9ee 	bl	8002670 <WIZCHIP_READ>
 8003294:	4603      	mov	r3, r0
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d019      	beq.n	80032da <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	3301      	adds	r3, #1
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80032b2:	2110      	movs	r1, #16
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fa27 	bl	8002708 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2201      	movs	r2, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	b21b      	sxth	r3, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <send+0x1ec>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b21b      	sxth	r3, r3
 80032ce:	4013      	ands	r3, r2
 80032d0:	b21b      	sxth	r3, r3
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <send+0x1ec>)
 80032d6:	801a      	strh	r2, [r3, #0]
 80032d8:	e00d      	b.n	80032f6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <send+0xfa>
      {
         close(sn);
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fdc6 	bl	8002e78 <close>
         return SOCKERR_TIMEOUT;
 80032ec:	f06f 030c 	mvn.w	r3, #12
 80032f0:	e073      	b.n	80033da <send+0x1e2>
      }
      else return SOCK_BUSY;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e071      	b.n	80033da <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3301      	adds	r3, #1
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff f9b4 	bl	8002670 <WIZCHIP_READ>
 8003308:	4603      	mov	r3, r0
 800330a:	b29b      	uxth	r3, r3
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003310:	88ba      	ldrh	r2, [r7, #4]
 8003312:	89bb      	ldrh	r3, [r7, #12]
 8003314:	429a      	cmp	r2, r3
 8003316:	d901      	bls.n	800331c <send+0x124>
 8003318:	89bb      	ldrh	r3, [r7, #12]
 800331a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fb00 	bl	8002924 <getSn_TX_FSR>
 8003324:	4603      	mov	r3, r0
 8003326:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	3301      	adds	r3, #1
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff f99b 	bl	8002670 <WIZCHIP_READ>
 800333a:	4603      	mov	r3, r0
 800333c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b17      	cmp	r3, #23
 8003342:	d009      	beq.n	8003358 <send+0x160>
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b1c      	cmp	r3, #28
 8003348:	d006      	beq.n	8003358 <send+0x160>
      {
         close(sn);
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fd93 	bl	8002e78 <close>
         return SOCKERR_SOCKSTATUS;
 8003352:	f06f 0306 	mvn.w	r3, #6
 8003356:	e040      	b.n	80033da <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <send+0x1f0>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	fa42 f303 	asr.w	r3, r2, r3
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <send+0x180>
 800336c:	88ba      	ldrh	r2, [r7, #4]
 800336e:	89bb      	ldrh	r3, [r7, #12]
 8003370:	429a      	cmp	r2, r3
 8003372:	d901      	bls.n	8003378 <send+0x180>
 8003374:	2300      	movs	r3, #0
 8003376:	e030      	b.n	80033da <send+0x1e2>
      if(len <= freesize) break;
 8003378:	88ba      	ldrh	r2, [r7, #4]
 800337a:	89bb      	ldrh	r3, [r7, #12]
 800337c:	429a      	cmp	r2, r3
 800337e:	d900      	bls.n	8003382 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8003380:	e7cc      	b.n	800331c <send+0x124>
      if(len <= freesize) break;
 8003382:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003384:	88ba      	ldrh	r2, [r7, #4]
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fb60 	bl	8002a50 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	3301      	adds	r3, #1
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800339c:	2120      	movs	r1, #32
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff f9b2 	bl	8002708 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80033a4:	bf00      	nop
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	3301      	adds	r3, #1
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f95c 	bl	8002670 <WIZCHIP_READ>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f3      	bne.n	80033a6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	2201      	movs	r2, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	b21a      	sxth	r2, r3
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <send+0x1ec>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <send+0x1ec>)
 80033d6:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80033d8:	88bb      	ldrh	r3, [r7, #4]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000286 	.word	0x20000286
 80033e8:	20000284 	.word	0x20000284

080033ec <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	71fb      	strb	r3, [r7, #7]
 80033f8:	4613      	mov	r3, r2
 80033fa:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b08      	cmp	r3, #8
 8003408:	d902      	bls.n	8003410 <recv+0x24>
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	e09c      	b.n	800354a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	3301      	adds	r3, #1
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f929 	bl	8002670 <WIZCHIP_READ>
 800341e:	4603      	mov	r3, r0
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	2b01      	cmp	r3, #1
 8003426:	d002      	beq.n	800342e <recv+0x42>
 8003428:	f06f 0304 	mvn.w	r3, #4
 800342c:	e08d      	b.n	800354a <recv+0x15e>
   CHECK_SOCKDATA();
 800342e:	88bb      	ldrh	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <recv+0x4e>
 8003434:	f06f 030d 	mvn.w	r3, #13
 8003438:	e087      	b.n	800354a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	3301      	adds	r3, #1
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff f912 	bl	8002670 <WIZCHIP_READ>
 800344c:	4603      	mov	r3, r0
 800344e:	b29b      	uxth	r3, r3
 8003450:	029b      	lsls	r3, r3, #10
 8003452:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003454:	89ba      	ldrh	r2, [r7, #12]
 8003456:	88bb      	ldrh	r3, [r7, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	d201      	bcs.n	8003460 <recv+0x74>
 800345c:	89bb      	ldrh	r3, [r7, #12]
 800345e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff faa9 	bl	80029ba <getSn_RX_RSR>
 8003468:	4603      	mov	r3, r0
 800346a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	3301      	adds	r3, #1
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff f8f9 	bl	8002670 <WIZCHIP_READ>
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b17      	cmp	r3, #23
 8003486:	d026      	beq.n	80034d6 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b1c      	cmp	r3, #28
 800348c:	d11c      	bne.n	80034c8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800348e:	89bb      	ldrh	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d133      	bne.n	80034fc <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fa44 	bl	8002924 <getSn_TX_FSR>
 800349c:	4603      	mov	r3, r0
 800349e:	461c      	mov	r4, r3
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	3301      	adds	r3, #1
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff f8df 	bl	8002670 <WIZCHIP_READ>
 80034b2:	4603      	mov	r3, r0
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	429c      	cmp	r4, r3
 80034b8:	d10d      	bne.n	80034d6 <recv+0xea>
               {
                  close(sn);
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fcdb 	bl	8002e78 <close>
                  return SOCKERR_SOCKSTATUS;
 80034c2:	f06f 0306 	mvn.w	r3, #6
 80034c6:	e040      	b.n	800354a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fcd4 	bl	8002e78 <close>
               return SOCKERR_SOCKSTATUS;
 80034d0:	f06f 0306 	mvn.w	r3, #6
 80034d4:	e039      	b.n	800354a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80034d6:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <recv+0x168>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	fa42 f303 	asr.w	r3, r2, r3
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <recv+0x108>
 80034ea:	89bb      	ldrh	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <recv+0x108>
 80034f0:	2300      	movs	r3, #0
 80034f2:	e02a      	b.n	800354a <recv+0x15e>
         if(recvsize != 0) break;
 80034f4:	89bb      	ldrh	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80034fa:	e7b1      	b.n	8003460 <recv+0x74>
               if(recvsize != 0) break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <recv+0x116>
         if(recvsize != 0) break;
 8003500:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003502:	89ba      	ldrh	r2, [r7, #12]
 8003504:	88bb      	ldrh	r3, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d201      	bcs.n	800350e <recv+0x122>
 800350a:	89bb      	ldrh	r3, [r7, #12]
 800350c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800350e:	88ba      	ldrh	r2, [r7, #4]
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	6839      	ldr	r1, [r7, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff faf7 	bl	8002b08 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	3301      	adds	r3, #1
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003526:	2140      	movs	r1, #64	; 0x40
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f8ed 	bl	8002708 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800352e:	bf00      	nop
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3301      	adds	r3, #1
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff f897 	bl	8002670 <WIZCHIP_READ>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f3      	bne.n	8003530 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003548:	88bb      	ldrh	r3, [r7, #4]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bd90      	pop	{r4, r7, pc}
 8003552:	bf00      	nop
 8003554:	20000284 	.word	0x20000284

08003558 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	4603      	mov	r3, r0
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	4613      	mov	r3, r2
 8003568:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d902      	bls.n	800357e <sendto+0x26>
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	e11b      	b.n	80037b6 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	3301      	adds	r3, #1
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f872 	bl	8002670 <WIZCHIP_READ>
 800358c:	4603      	mov	r3, r0
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3b02      	subs	r3, #2
 8003594:	2b02      	cmp	r3, #2
 8003596:	d902      	bls.n	800359e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003598:	f06f 0304 	mvn.w	r3, #4
 800359c:	e10b      	b.n	80037b6 <sendto+0x25e>
         break;
 800359e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80035a0:	89bb      	ldrh	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <sendto+0x54>
 80035a6:	f06f 030d 	mvn.w	r3, #13
 80035aa:	e104      	b.n	80037b6 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	3201      	adds	r2, #1
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	3202      	adds	r2, #2
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	3203      	adds	r2, #3
 80035d6:	7812      	ldrb	r2, [r2, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10e      	bne.n	8003600 <sendto+0xa8>
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3301      	adds	r3, #1
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff f840 	bl	8002670 <WIZCHIP_READ>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d002      	beq.n	8003600 <sendto+0xa8>
 80035fa:	f06f 030b 	mvn.w	r3, #11
 80035fe:	e0da      	b.n	80037b6 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8003600:	8c3b      	ldrh	r3, [r7, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <sendto+0xcc>
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	3301      	adds	r3, #1
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f82e 	bl	8002670 <WIZCHIP_READ>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d002      	beq.n	8003624 <sendto+0xcc>
 800361e:	f06f 030a 	mvn.w	r3, #10
 8003622:	e0c8      	b.n	80037b6 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3301      	adds	r3, #1
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f81d 	bl	8002670 <WIZCHIP_READ>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	2b42      	cmp	r3, #66	; 0x42
 800363e:	d008      	beq.n	8003652 <sendto+0xfa>
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b22      	cmp	r3, #34	; 0x22
 8003644:	d005      	beq.n	8003652 <sendto+0xfa>
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b32      	cmp	r3, #50	; 0x32
 800364a:	d002      	beq.n	8003652 <sendto+0xfa>
 800364c:	f06f 0306 	mvn.w	r3, #6
 8003650:	e0b1      	b.n	80037b6 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	3301      	adds	r3, #1
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800365e:	2204      	movs	r2, #4
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f8fe 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3301      	adds	r3, #1
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003674:	461a      	mov	r2, r3
 8003676:	8c3b      	ldrh	r3, [r7, #32]
 8003678:	0a1b      	lsrs	r3, r3, #8
 800367a:	b29b      	uxth	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7ff f841 	bl	8002708 <WIZCHIP_WRITE>
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	3301      	adds	r3, #1
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003692:	461a      	mov	r2, r3
 8003694:	8c3b      	ldrh	r3, [r7, #32]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f7ff f834 	bl	8002708 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	3301      	adds	r3, #1
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe ffdf 	bl	8002670 <WIZCHIP_READ>
 80036b2:	4603      	mov	r3, r0
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	029b      	lsls	r3, r3, #10
 80036b8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80036ba:	89ba      	ldrh	r2, [r7, #12]
 80036bc:	8abb      	ldrh	r3, [r7, #20]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d901      	bls.n	80036c6 <sendto+0x16e>
 80036c2:	8abb      	ldrh	r3, [r7, #20]
 80036c4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff f92b 	bl	8002924 <getSn_TX_FSR>
 80036ce:	4603      	mov	r3, r0
 80036d0:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	3301      	adds	r3, #1
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe ffc6 	bl	8002670 <WIZCHIP_READ>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <sendto+0x198>
 80036ea:	f06f 0303 	mvn.w	r3, #3
 80036ee:	e062      	b.n	80037b6 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80036f0:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <sendto+0x268>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	fa42 f303 	asr.w	r3, r2, r3
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <sendto+0x1b8>
 8003704:	89ba      	ldrh	r2, [r7, #12]
 8003706:	8abb      	ldrh	r3, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d901      	bls.n	8003710 <sendto+0x1b8>
 800370c:	2300      	movs	r3, #0
 800370e:	e052      	b.n	80037b6 <sendto+0x25e>
      if(len <= freesize) break;
 8003710:	89ba      	ldrh	r2, [r7, #12]
 8003712:	8abb      	ldrh	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	d900      	bls.n	800371a <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8003718:	e7d5      	b.n	80036c6 <sendto+0x16e>
      if(len <= freesize) break;
 800371a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800371c:	89ba      	ldrh	r2, [r7, #12]
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff f994 	bl	8002a50 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3301      	adds	r3, #1
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003734:	2120      	movs	r1, #32
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe ffe6 	bl	8002708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800373c:	bf00      	nop
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	3301      	adds	r3, #1
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe ff90 	bl	8002670 <WIZCHIP_READ>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f3      	bne.n	800373e <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	3301      	adds	r3, #1
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe ff84 	bl	8002670 <WIZCHIP_READ>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	3301      	adds	r3, #1
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003786:	2110      	movs	r1, #16
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe ffbd 	bl	8002708 <WIZCHIP_WRITE>
         break;
 800378e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003790:	89bb      	ldrh	r3, [r7, #12]
 8003792:	e010      	b.n	80037b6 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0db      	beq.n	8003756 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	3301      	adds	r3, #1
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037aa:	2108      	movs	r1, #8
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe ffab 	bl	8002708 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80037b2:	f06f 030c 	mvn.w	r3, #12
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000284 	.word	0x20000284

080037c4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	4603      	mov	r3, r0
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	4613      	mov	r3, r2
 80037d4:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d902      	bls.n	80037e6 <recvfrom+0x22>
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	e1d4      	b.n	8003b90 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	3301      	adds	r3, #1
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe ff3e 	bl	8002670 <WIZCHIP_READ>
 80037f4:	4603      	mov	r3, r0
 80037f6:	777b      	strb	r3, [r7, #29]
 80037f8:	7f7b      	ldrb	r3, [r7, #29]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3b02      	subs	r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d902      	bls.n	800380a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003804:	f06f 0304 	mvn.w	r3, #4
 8003808:	e1c2      	b.n	8003b90 <recvfrom+0x3cc>
         break;
 800380a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800380c:	89bb      	ldrh	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <recvfrom+0x54>
 8003812:	f06f 030d 	mvn.w	r3, #13
 8003816:	e1bb      	b.n	8003b90 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	4a88      	ldr	r2, [pc, #544]	; (8003a3c <recvfrom+0x278>)
 800381c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d128      	bne.n	8003876 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff f8c7 	bl	80029ba <getSn_RX_RSR>
 800382c:	4603      	mov	r3, r0
 800382e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	3301      	adds	r3, #1
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe ff17 	bl	8002670 <WIZCHIP_READ>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <recvfrom+0x8a>
 8003848:	f06f 0303 	mvn.w	r3, #3
 800384c:	e1a0      	b.n	8003b90 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800384e:	4b7c      	ldr	r3, [pc, #496]	; (8003a40 <recvfrom+0x27c>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	fa42 f303 	asr.w	r3, r2, r3
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <recvfrom+0xa8>
 8003862:	8bfb      	ldrh	r3, [r7, #30]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <recvfrom+0xa8>
 8003868:	2300      	movs	r3, #0
 800386a:	e191      	b.n	8003b90 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800386c:	8bfb      	ldrh	r3, [r7, #30]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d100      	bne.n	8003874 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8003872:	e7d7      	b.n	8003824 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003874:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8003876:	7f7b      	ldrb	r3, [r7, #29]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	2b04      	cmp	r3, #4
 800387e:	d079      	beq.n	8003974 <recvfrom+0x1b0>
 8003880:	2b04      	cmp	r3, #4
 8003882:	f300 8142 	bgt.w	8003b0a <recvfrom+0x346>
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <recvfrom+0xce>
 800388a:	2b03      	cmp	r3, #3
 800388c:	f000 80dc 	beq.w	8003a48 <recvfrom+0x284>
 8003890:	e13b      	b.n	8003b0a <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	4a69      	ldr	r2, [pc, #420]	; (8003a3c <recvfrom+0x278>)
 8003896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d152      	bne.n	8003944 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800389e:	f107 0114 	add.w	r1, r7, #20
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2208      	movs	r2, #8
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff f92e 	bl	8002b08 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	3301      	adds	r3, #1
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038b8:	2140      	movs	r1, #64	; 0x40
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe ff24 	bl	8002708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80038c0:	bf00      	nop
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	3301      	adds	r3, #1
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fece 	bl	8002670 <WIZCHIP_READ>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f3      	bne.n	80038c2 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80038da:	7d3a      	ldrb	r2, [r7, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3301      	adds	r3, #1
 80038e4:	7d7a      	ldrb	r2, [r7, #21]
 80038e6:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3302      	adds	r3, #2
 80038ec:	7dba      	ldrb	r2, [r7, #22]
 80038ee:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3303      	adds	r3, #3
 80038f4:	7dfa      	ldrb	r2, [r7, #23]
 80038f6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80038f8:	7e3b      	ldrb	r3, [r7, #24]
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	b29a      	uxth	r2, r3
 8003908:	7e7b      	ldrb	r3, [r7, #25]
 800390a:	b29b      	uxth	r3, r3
 800390c:	4413      	add	r3, r2
 800390e:	b29a      	uxth	r2, r3
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8003914:	7eba      	ldrb	r2, [r7, #26]
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	b291      	uxth	r1, r2
 800391a:	4a48      	ldr	r2, [pc, #288]	; (8003a3c <recvfrom+0x278>)
 800391c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	4a46      	ldr	r2, [pc, #280]	; (8003a3c <recvfrom+0x278>)
 8003924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	b299      	uxth	r1, r3
 800392c:	7efb      	ldrb	r3, [r7, #27]
 800392e:	b29a      	uxth	r2, r3
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	440a      	add	r2, r1
 8003934:	b291      	uxth	r1, r2
 8003936:	4a41      	ldr	r2, [pc, #260]	; (8003a3c <recvfrom+0x278>)
 8003938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	4a41      	ldr	r2, [pc, #260]	; (8003a44 <recvfrom+0x280>)
 8003940:	2180      	movs	r1, #128	; 0x80
 8003942:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	4a3d      	ldr	r2, [pc, #244]	; (8003a3c <recvfrom+0x278>)
 8003948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800394c:	89ba      	ldrh	r2, [r7, #12]
 800394e:	429a      	cmp	r2, r3
 8003950:	d202      	bcs.n	8003958 <recvfrom+0x194>
 8003952:	89bb      	ldrh	r3, [r7, #12]
 8003954:	83fb      	strh	r3, [r7, #30]
 8003956:	e004      	b.n	8003962 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	4a38      	ldr	r2, [pc, #224]	; (8003a3c <recvfrom+0x278>)
 800395c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003960:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8003962:	8bfb      	ldrh	r3, [r7, #30]
 8003964:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003966:	8bfa      	ldrh	r2, [r7, #30]
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f8cb 	bl	8002b08 <wiz_recv_data>
			break;
 8003972:	e0d6      	b.n	8003b22 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	4a31      	ldr	r2, [pc, #196]	; (8003a3c <recvfrom+0x278>)
 8003978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d146      	bne.n	8003a0e <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8003980:	f107 0114 	add.w	r1, r7, #20
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2202      	movs	r2, #2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f8bd 	bl	8002b08 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	3301      	adds	r3, #1
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe feb3 	bl	8002708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80039a2:	bf00      	nop
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	3301      	adds	r3, #1
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fe5d 	bl	8002670 <WIZCHIP_READ>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f3      	bne.n	80039a4 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80039bc:	7d3a      	ldrb	r2, [r7, #20]
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	b291      	uxth	r1, r2
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <recvfrom+0x278>)
 80039c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <recvfrom+0x278>)
 80039cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	7d7b      	ldrb	r3, [r7, #21]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4413      	add	r3, r2
 80039da:	b29a      	uxth	r2, r3
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	3a02      	subs	r2, #2
 80039e0:	b291      	uxth	r1, r2
 80039e2:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <recvfrom+0x278>)
 80039e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <recvfrom+0x278>)
 80039ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d906      	bls.n	8003a06 <recvfrom+0x242>
   			{
   			   close(sn);
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fa3c 	bl	8002e78 <close>
   			   return SOCKFATAL_PACKLEN;
 8003a00:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8003a04:	e0c4      	b.n	8003b90 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <recvfrom+0x280>)
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <recvfrom+0x278>)
 8003a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a16:	89ba      	ldrh	r2, [r7, #12]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d202      	bcs.n	8003a22 <recvfrom+0x25e>
 8003a1c:	89bb      	ldrh	r3, [r7, #12]
 8003a1e:	83fb      	strh	r3, [r7, #30]
 8003a20:	e004      	b.n	8003a2c <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <recvfrom+0x278>)
 8003a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a2a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003a2c:	8bfa      	ldrh	r2, [r7, #30]
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f868 	bl	8002b08 <wiz_recv_data>
		   break;
 8003a38:	e073      	b.n	8003b22 <recvfrom+0x35e>
 8003a3a:	bf00      	nop
 8003a3c:	20000288 	.word	0x20000288
 8003a40:	20000284 	.word	0x20000284
 8003a44:	20000298 	.word	0x20000298
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	4a53      	ldr	r2, [pc, #332]	; (8003b98 <recvfrom+0x3d4>)
 8003a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d144      	bne.n	8003ade <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8003a54:	f107 0114 	add.w	r1, r7, #20
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2206      	movs	r2, #6
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff f853 	bl	8002b08 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	3301      	adds	r3, #1
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a6e:	2140      	movs	r1, #64	; 0x40
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fe49 	bl	8002708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003a76:	bf00      	nop
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fdf3 	bl	8002670 <WIZCHIP_READ>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f3      	bne.n	8003a78 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8003a90:	7d3a      	ldrb	r2, [r7, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	7d7a      	ldrb	r2, [r7, #21]
 8003a9c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	7dba      	ldrb	r2, [r7, #22]
 8003aa4:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3303      	adds	r3, #3
 8003aaa:	7dfa      	ldrb	r2, [r7, #23]
 8003aac:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8003aae:	7e3a      	ldrb	r2, [r7, #24]
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	b291      	uxth	r1, r2
 8003ab4:	4a38      	ldr	r2, [pc, #224]	; (8003b98 <recvfrom+0x3d4>)
 8003ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	4a36      	ldr	r2, [pc, #216]	; (8003b98 <recvfrom+0x3d4>)
 8003abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	b299      	uxth	r1, r3
 8003ac6:	7e7b      	ldrb	r3, [r7, #25]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	440a      	add	r2, r1
 8003ace:	b291      	uxth	r1, r2
 8003ad0:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <recvfrom+0x3d4>)
 8003ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <recvfrom+0x3d8>)
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	; (8003b98 <recvfrom+0x3d4>)
 8003ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ae6:	89ba      	ldrh	r2, [r7, #12]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d202      	bcs.n	8003af2 <recvfrom+0x32e>
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	83fb      	strh	r3, [r7, #30]
 8003af0:	e004      	b.n	8003afc <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <recvfrom+0x3d4>)
 8003af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003afa:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003afc:	8bfa      	ldrh	r2, [r7, #30]
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff f800 	bl	8002b08 <wiz_recv_data>
			break;
 8003b08:	e00b      	b.n	8003b22 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8003b0a:	8bfa      	ldrh	r2, [r7, #30]
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f855 	bl	8002bc0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	491f      	ldr	r1, [pc, #124]	; (8003b98 <recvfrom+0x3d4>)
 8003b1a:	8bfa      	ldrh	r2, [r7, #30]
 8003b1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8003b20:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	3301      	adds	r3, #1
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b2e:	2140      	movs	r1, #64	; 0x40
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fde9 	bl	8002708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8003b36:	bf00      	nop
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fd93 	bl	8002670 <WIZCHIP_READ>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f3      	bne.n	8003b38 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <recvfrom+0x3d4>)
 8003b54:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	8bfa      	ldrh	r2, [r7, #30]
 8003b5c:	1a8a      	subs	r2, r1, r2
 8003b5e:	b291      	uxth	r1, r2
 8003b60:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <recvfrom+0x3d4>)
 8003b62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <recvfrom+0x3d4>)
 8003b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <recvfrom+0x3d8>)
 8003b76:	5cd2      	ldrb	r2, [r2, r3]
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	b2d1      	uxtb	r1, r2
 8003b80:	4a06      	ldr	r2, [pc, #24]	; (8003b9c <recvfrom+0x3d8>)
 8003b82:	54d1      	strb	r1, [r2, r3]
 8003b84:	e003      	b.n	8003b8e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <recvfrom+0x3d8>)
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8003b8e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000288 	.word	0x20000288
 8003b9c:	20000298 	.word	0x20000298

08003ba0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	bf00      	nop
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	70fb      	strb	r3, [r7, #3]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	2300      	movs	r3, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	807b      	strh	r3, [r7, #2]
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	807b      	strh	r3, [r7, #2]
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <reg_wizchip_cs_cbfunc+0x16>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <reg_wizchip_cs_cbfunc+0x44>)
 8003c82:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <reg_wizchip_cs_cbfunc+0x48>)
 8003c88:	615a      	str	r2, [r3, #20]
 8003c8a:	e006      	b.n	8003c9a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6153      	str	r3, [r2, #20]
   }
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000020 	.word	0x20000020
 8003cac:	08003bbd 	.word	0x08003bbd
 8003cb0:	08003bcb 	.word	0x08003bcb

08003cb4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003cbe:	bf00      	nop
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f9      	beq.n	8003cc0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <reg_wizchip_spi_cbfunc+0x24>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cda:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <reg_wizchip_spi_cbfunc+0x50>)
 8003cdc:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <reg_wizchip_spi_cbfunc+0x54>)
 8003ce2:	61da      	str	r2, [r3, #28]
 8003ce4:	e006      	b.n	8003cf4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003ce6:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	61d3      	str	r3, [r2, #28]
   }
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	20000020 	.word	0x20000020
 8003d04:	08003c11 	.word	0x08003c11
 8003d08:	08003c21 	.word	0x08003c21

08003d0c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003d16:	bf00      	nop
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f9      	beq.n	8003d18 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <reg_wizchip_spiburst_cbfunc+0x24>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d106      	bne.n	8003d3e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <reg_wizchip_spiburst_cbfunc+0x50>)
 8003d34:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d38:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d3c:	e006      	b.n	8003d4c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003d3e:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	20000020 	.word	0x20000020
 8003d5c:	08003c37 	.word	0x08003c37
 8003d60:	08003c4f 	.word	0x08003c4f

08003d64 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	71fb      	strb	r3, [r7, #7]
#if    _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	f200 80c2 	bhi.w	8003f08 <ctlwizchip+0x1a4>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <ctlwizchip+0x28>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dd3 	.word	0x08003dd3
 8003d94:	08003dff 	.word	0x08003dff
 8003d98:	08003df3 	.word	0x08003df3
 8003d9c:	08003e0d 	.word	0x08003e0d
 8003da0:	08003e19 	.word	0x08003e19
 8003da4:	08003e27 	.word	0x08003e27
 8003da8:	08003e4d 	.word	0x08003e4d
 8003dac:	08003e73 	.word	0x08003e73
 8003db0:	08003ead 	.word	0x08003ead
 8003db4:	08003eb3 	.word	0x08003eb3
 8003db8:	08003ebb 	.word	0x08003ebb
 8003dbc:	08003f0f 	.word	0x08003f0f
 8003dc0:	08003ec3 	.word	0x08003ec3
 8003dc4:	08003ed1 	.word	0x08003ed1
 8003dc8:	08003eed 	.word	0x08003eed
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003dcc:	f000 f8a8 	bl	8003f20 <wizchip_sw_reset>
         break;
 8003dd0:	e09e      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3308      	adds	r3, #8
 8003de0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f8e5 	bl	8003fb8 <wizchip_init>
 8003dee:	4603      	mov	r3, r0
 8003df0:	e08f      	b.n	8003f12 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f96a 	bl	80040d0 <wizchip_clrinterrupt>
         break;
 8003dfc:	e088      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003dfe:	f000 f985 	bl	800410c <wizchip_getinterrupt>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	801a      	strh	r2, [r3, #0]
         break;
 8003e0a:	e081      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f9a0 	bl	8004156 <wizchip_setinterruptmask>
         break;         
 8003e16:	e07b      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003e18:	f000 f9b8 	bl	800418c <wizchip_getinterruptmask>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	801a      	strh	r2, [r3, #0]
         break;
 8003e24:	e074      	b.n	8003f10 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003e36:	f7fe fc67 	bl	8002708 <WIZCHIP_WRITE>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4619      	mov	r1, r3
 8003e42:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003e46:	f7fe fc5f 	bl	8002708 <WIZCHIP_WRITE>
         break;
 8003e4a:	e061      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003e4c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003e50:	f7fe fc0e 	bl	8002670 <WIZCHIP_READ>
 8003e54:	4603      	mov	r3, r0
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	b29c      	uxth	r4, r3
 8003e5c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003e60:	f7fe fc06 	bl	8002670 <WIZCHIP_READ>
 8003e64:	4603      	mov	r3, r0
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4423      	add	r3, r4
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	801a      	strh	r2, [r3, #0]
         break;
 8003e70:	e04e      	b.n	8003f10 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003e72:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e74:	789a      	ldrb	r2, [r3, #2]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	4a27      	ldr	r2, [pc, #156]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e80:	78d2      	ldrb	r2, [r2, #3]
 8003e82:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	3302      	adds	r3, #2
 8003e88:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e8a:	7912      	ldrb	r2, [r2, #4]
 8003e8c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	3303      	adds	r3, #3
 8003e92:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e94:	7952      	ldrb	r2, [r2, #5]
 8003e96:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e9e:	7992      	ldrb	r2, [r2, #6]
 8003ea0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	3305      	adds	r3, #5
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
         break;
 8003eaa:	e031      	b.n	8003f10 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003eac:	f000 f9c0 	bl	8004230 <wizphy_reset>
         break;
 8003eb0:	e02e      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003eb2:	6838      	ldr	r0, [r7, #0]
 8003eb4:	f000 f9e3 	bl	800427e <wizphy_setphyconf>
         break;
 8003eb8:	e02a      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003eba:	6838      	ldr	r0, [r7, #0]
 8003ebc:	f000 fa22 	bl	8004304 <wizphy_getphyconf>
         break;
 8003ec0:	e026      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fa86 	bl	80043d8 <wizphy_setphypmode>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	e020      	b.n	8003f12 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003ed0:	f000 f995 	bl	80041fe <wizphy_getphypmode>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2bff      	cmp	r3, #255	; 0xff
 8003edc:	d102      	bne.n	8003ee4 <ctlwizchip+0x180>
 8003ede:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee2:	e016      	b.n	8003f12 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	7dfa      	ldrb	r2, [r7, #23]
 8003ee8:	701a      	strb	r2, [r3, #0]
         break;
 8003eea:	e011      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003eec:	f000 f971 	bl	80041d2 <wizphy_getphylink>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	2bff      	cmp	r3, #255	; 0xff
 8003ef8:	d102      	bne.n	8003f00 <ctlwizchip+0x19c>
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	e008      	b.n	8003f12 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	7dfa      	ldrb	r2, [r7, #23]
 8003f04:	701a      	strb	r2, [r3, #0]
         break;
 8003f06:	e003      	b.n	8003f10 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0c:	e001      	b.n	8003f12 <ctlwizchip+0x1ae>
         break;
 8003f0e:	bf00      	nop
   }
   return 0;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd90      	pop	{r4, r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000020 	.word	0x20000020

08003f20 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	2206      	movs	r2, #6
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003f30:	f7fe fc38 	bl	80027a4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	2204      	movs	r2, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f40:	f7fe fc30 	bl	80027a4 <WIZCHIP_READ_BUF>
 8003f44:	f107 0310 	add.w	r3, r7, #16
 8003f48:	2204      	movs	r2, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003f50:	f7fe fc28 	bl	80027a4 <WIZCHIP_READ_BUF>
 8003f54:	f107 030c 	add.w	r3, r7, #12
 8003f58:	2204      	movs	r2, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003f60:	f7fe fc20 	bl	80027a4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003f64:	2180      	movs	r1, #128	; 0x80
 8003f66:	2000      	movs	r0, #0
 8003f68:	f7fe fbce 	bl	8002708 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7fe fb7f 	bl	8002670 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003f72:	1d3b      	adds	r3, r7, #4
 8003f74:	2206      	movs	r2, #6
 8003f76:	4619      	mov	r1, r3
 8003f78:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003f7c:	f7fe fc72 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	2204      	movs	r2, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f8c:	f7fe fc6a 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003f90:	f107 0310 	add.w	r3, r7, #16
 8003f94:	2204      	movs	r2, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003f9c:	f7fe fc62 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003fac:	f7fe fc5a 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8003fb0:	bf00      	nop
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003fc6:	f7ff ffab 	bl	8003f20 <wizchip_sw_reset>
   if(txsize)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03b      	beq.n	8004048 <wizchip_init+0x90>
   {
      tmp = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e015      	b.n	8004006 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8003fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	7bbb      	ldrb	r3, [r7, #14]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8003fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	dd02      	ble.n	8003ffa <wizchip_init+0x42>
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff8:	e066      	b.n	80040c8 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3301      	adds	r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	73fb      	strb	r3, [r7, #15]
 8004006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400a:	2b07      	cmp	r3, #7
 800400c:	dde5      	ble.n	8003fda <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
 8004012:	e015      	b.n	8004040 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	3301      	adds	r3, #1
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004022:	4618      	mov	r0, r3
 8004024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	4619      	mov	r1, r3
 8004030:	f7fe fb6a 	bl	8002708 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	3301      	adds	r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004044:	2b07      	cmp	r3, #7
 8004046:	dde5      	ble.n	8004014 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d03b      	beq.n	80040c6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
 8004056:	e015      	b.n	8004084 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8004058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	4413      	add	r3, r2
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	7bbb      	ldrb	r3, [r7, #14]
 8004064:	4413      	add	r3, r2
 8004066:	b2db      	uxtb	r3, r3
 8004068:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800406a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800406e:	2b10      	cmp	r3, #16
 8004070:	dd02      	ble.n	8004078 <wizchip_init+0xc0>
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
 8004076:	e027      	b.n	80040c8 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	3301      	adds	r3, #1
 8004080:	b2db      	uxtb	r3, r3
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004088:	2b07      	cmp	r3, #7
 800408a:	dde5      	ble.n	8004058 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	e015      	b.n	80040be <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8004092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	3301      	adds	r3, #1
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80040a0:	4618      	mov	r0, r3
 80040a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	4619      	mov	r1, r3
 80040ae:	f7fe fb2b 	bl	8002708 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80040b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	3301      	adds	r3, #1
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	73fb      	strb	r3, [r7, #15]
 80040be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c2:	2b07      	cmp	r3, #7
 80040c4:	dde5      	ble.n	8004092 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	f023 030f 	bic.w	r3, r3, #15
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	4619      	mov	r1, r3
 80040f0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80040f4:	f7fe fb08 	bl	8002708 <WIZCHIP_WRITE>
   setSIR(sir);
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	4619      	mov	r1, r3
 80040fc:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8004100:	f7fe fb02 	bl	8002708 <WIZCHIP_WRITE>
#endif   
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800411e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8004122:	f7fe faa5 	bl	8002670 <WIZCHIP_READ>
 8004126:	4603      	mov	r3, r0
 8004128:	f023 030f 	bic.w	r3, r3, #15
 800412c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800412e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8004132:	f7fe fa9d 	bl	8002670 <WIZCHIP_READ>
 8004136:	4603      	mov	r3, r0
 8004138:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800413a:	79bb      	ldrb	r3, [r7, #6]
 800413c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800413e:	88bb      	ldrh	r3, [r7, #4]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	b29a      	uxth	r2, r3
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	b29b      	uxth	r3, r3
 8004148:	4413      	add	r3, r2
 800414a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800414c:	88bb      	ldrh	r3, [r7, #4]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	4603      	mov	r3, r0
 800415e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	b29b      	uxth	r3, r3
 800416a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	4619      	mov	r1, r3
 8004170:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8004174:	f7fe fac8 	bl	8002708 <WIZCHIP_WRITE>
   setSIMR(simr);
 8004178:	7bbb      	ldrb	r3, [r7, #14]
 800417a:	4619      	mov	r1, r3
 800417c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8004180:	f7fe fac2 	bl	8002708 <WIZCHIP_WRITE>
#endif   
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800419e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80041a2:	f7fe fa65 	bl	8002670 <WIZCHIP_READ>
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80041aa:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80041ae:	f7fe fa5f 	bl	8002670 <WIZCHIP_READ>
 80041b2:	4603      	mov	r3, r0
 80041b4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80041b6:	79bb      	ldrb	r3, [r7, #6]
 80041b8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80041ba:	88bb      	ldrh	r3, [r7, #4]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	b29a      	uxth	r2, r3
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80041c8:	88bb      	ldrh	r3, [r7, #4]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80041d8:	2300      	movs	r3, #0
 80041da:	71fb      	strb	r3, [r7, #7]
       tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80041dc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80041e0:	f7fe fa46 	bl	8002670 <WIZCHIP_READ>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80041ee:	2301      	movs	r3, #1
 80041f0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004208:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800420c:	f7fe fa30 	bl	8002670 <WIZCHIP_READ>
 8004210:	4603      	mov	r3, r0
 8004212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004216:	2b30      	cmp	r3, #48	; 0x30
 8004218:	d102      	bne.n	8004220 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800421a:	2301      	movs	r3, #1
 800421c:	71fb      	strb	r3, [r7, #7]
 800421e:	e001      	b.n	8004224 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004220:	2300      	movs	r3, #0
 8004222:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004224:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004236:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800423a:	f7fe fa19 	bl	8002670 <WIZCHIP_READ>
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004248:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	4619      	mov	r1, r3
 800424e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004252:	f7fe fa59 	bl	8002708 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004256:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800425a:	f7fe fa09 	bl	8002670 <WIZCHIP_READ>
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004268:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	4619      	mov	r1, r3
 800426e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004272:	f7fe fa49 	bl	8002708 <WIZCHIP_WRITE>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d104      	bne.n	800429c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	e003      	b.n	80042a4 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	785b      	ldrb	r3, [r3, #1]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d104      	bne.n	80042b6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e019      	b.n	80042ea <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	78db      	ldrb	r3, [r3, #3]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10d      	bne.n	80042da <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	789b      	ldrb	r3, [r3, #2]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d104      	bne.n	80042d0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	f043 0318 	orr.w	r3, r3, #24
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e00c      	b.n	80042ea <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	f043 0308 	orr.w	r3, r3, #8
 80042d6:	73fb      	strb	r3, [r7, #15]
 80042d8:	e007      	b.n	80042ea <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	789b      	ldrb	r3, [r3, #2]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d103      	bne.n	80042ea <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	f043 0310 	orr.w	r3, r3, #16
 80042e8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	4619      	mov	r1, r3
 80042ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80042f2:	f7fe fa09 	bl	8002708 <WIZCHIP_WRITE>
   wizphy_reset();
 80042f6:	f7ff ff9b 	bl	8004230 <wizphy_reset>
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004310:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004314:	f7fe f9ac 	bl	8002670 <WIZCHIP_READ>
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	119b      	asrs	r3, r3, #6
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004332:	2b20      	cmp	r3, #32
 8004334:	d001      	beq.n	800433a <wizphy_getphyconf+0x36>
 8004336:	2b38      	cmp	r3, #56	; 0x38
 8004338:	d103      	bne.n	8004342 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	705a      	strb	r2, [r3, #1]
         break;
 8004340:	e003      	b.n	800434a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	705a      	strb	r2, [r3, #1]
         break;
 8004348:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004350:	3b10      	subs	r3, #16
 8004352:	2b10      	cmp	r3, #16
 8004354:	bf8c      	ite	hi
 8004356:	2201      	movhi	r2, #1
 8004358:	2200      	movls	r2, #0
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	2a00      	cmp	r2, #0
 800435e:	d10f      	bne.n	8004380 <wizphy_getphyconf+0x7c>
 8004360:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <wizphy_getphyconf+0xcc>)
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	bf14      	ite	ne
 800436e:	2301      	movne	r3, #1
 8004370:	2300      	moveq	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	709a      	strb	r2, [r3, #2]
         break;
 800437e:	e003      	b.n	8004388 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	709a      	strb	r2, [r3, #2]
         break;
 8004386:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800438e:	3b08      	subs	r3, #8
 8004390:	2b18      	cmp	r3, #24
 8004392:	bf8c      	ite	hi
 8004394:	2201      	movhi	r2, #1
 8004396:	2200      	movls	r2, #0
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	2a00      	cmp	r2, #0
 800439c:	d10f      	bne.n	80043be <wizphy_getphyconf+0xba>
 800439e:	4a0d      	ldr	r2, [pc, #52]	; (80043d4 <wizphy_getphyconf+0xd0>)
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	70da      	strb	r2, [r3, #3]
         break;
 80043bc:	e003      	b.n	80043c6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	70da      	strb	r2, [r3, #3]
         break;
 80043c4:	bf00      	nop
   }
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	00010101 	.word	0x00010101
 80043d4:	01010001 	.word	0x01010001

080043d8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80043e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80043ea:	f7fe f941 	bl	8002670 <WIZCHIP_READ>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <wizphy_setphypmode+0x2a>
 80043fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004400:	e030      	b.n	8004464 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004408:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d104      	bne.n	800441a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e003      	b.n	8004422 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004420:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	4619      	mov	r1, r3
 8004426:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800442a:	f7fe f96d 	bl	8002708 <WIZCHIP_WRITE>
   wizphy_reset();
 800442e:	f7ff feff 	bl	8004230 <wizphy_reset>
   tmp = getPHYCFGR();
 8004432:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004436:	f7fe f91b 	bl	8002670 <WIZCHIP_READ>
 800443a:	4603      	mov	r3, r0
 800443c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <wizphy_setphypmode+0x88>
 800444e:	2300      	movs	r3, #0
 8004450:	e008      	b.n	8004464 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <wizphy_setphypmode+0x88>
 800445c:	2300      	movs	r3, #0
 800445e:	e001      	b.n	8004464 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2206      	movs	r2, #6
 8004478:	4619      	mov	r1, r3
 800447a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800447e:	f7fe f9f1 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	330e      	adds	r3, #14
 8004486:	2204      	movs	r2, #4
 8004488:	4619      	mov	r1, r3
 800448a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800448e:	f7fe f9e9 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	330a      	adds	r3, #10
 8004496:	2204      	movs	r2, #4
 8004498:	4619      	mov	r1, r3
 800449a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800449e:	f7fe f9e1 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3306      	adds	r3, #6
 80044a6:	2204      	movs	r2, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80044ae:	f7fe f9d9 	bl	8002864 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	7c9a      	ldrb	r2, [r3, #18]
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044b8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7cda      	ldrb	r2, [r3, #19]
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044c0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7d1a      	ldrb	r2, [r3, #20]
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044c8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7d5a      	ldrb	r2, [r3, #21]
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044d0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	7d9a      	ldrb	r2, [r3, #22]
 80044d6:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <wizchip_setnetinfo+0x7c>)
 80044d8:	701a      	strb	r2, [r3, #0]
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200002a0 	.word	0x200002a0
 80044e8:	200002a4 	.word	0x200002a4

080044ec <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <cJSON_GetErrorPtr+0x18>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <cJSON_GetErrorPtr+0x18>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4413      	add	r3, r2
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	200002a8 	.word	0x200002a8

08004508 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <case_insensitive_strcmp+0x16>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800451e:	2301      	movs	r3, #1
 8004520:	e056      	b.n	80045d0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d10d      	bne.n	8004546 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800452a:	2300      	movs	r3, #0
 800452c:	e050      	b.n	80045d0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8004536:	2300      	movs	r3, #0
 8004538:	e04a      	b.n	80045d0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3301      	adds	r3, #1
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	3301      	adds	r3, #1
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <case_insensitive_strcmp+0xd4>)
 8004552:	4413      	add	r3, r2
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d103      	bne.n	8004566 <case_insensitive_strcmp+0x5e>
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	f103 0220 	add.w	r2, r3, #32
 8004564:	e000      	b.n	8004568 <case_insensitive_strcmp+0x60>
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	73bb      	strb	r3, [r7, #14]
 800456e:	7bbb      	ldrb	r3, [r7, #14]
 8004570:	3301      	adds	r3, #1
 8004572:	491a      	ldr	r1, [pc, #104]	; (80045dc <case_insensitive_strcmp+0xd4>)
 8004574:	440b      	add	r3, r1
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d102      	bne.n	8004586 <case_insensitive_strcmp+0x7e>
 8004580:	7bbb      	ldrb	r3, [r7, #14]
 8004582:	3320      	adds	r3, #32
 8004584:	e000      	b.n	8004588 <case_insensitive_strcmp+0x80>
 8004586:	7bbb      	ldrb	r3, [r7, #14]
 8004588:	429a      	cmp	r2, r3
 800458a:	d0d0      	beq.n	800452e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	737b      	strb	r3, [r7, #13]
 8004592:	7b7b      	ldrb	r3, [r7, #13]
 8004594:	3301      	adds	r3, #1
 8004596:	4a11      	ldr	r2, [pc, #68]	; (80045dc <case_insensitive_strcmp+0xd4>)
 8004598:	4413      	add	r3, r2
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d103      	bne.n	80045ac <case_insensitive_strcmp+0xa4>
 80045a4:	7b7b      	ldrb	r3, [r7, #13]
 80045a6:	f103 0220 	add.w	r2, r3, #32
 80045aa:	e000      	b.n	80045ae <case_insensitive_strcmp+0xa6>
 80045ac:	7b7a      	ldrb	r2, [r7, #13]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	733b      	strb	r3, [r7, #12]
 80045b4:	7b3b      	ldrb	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	4908      	ldr	r1, [pc, #32]	; (80045dc <case_insensitive_strcmp+0xd4>)
 80045ba:	440b      	add	r3, r1
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d102      	bne.n	80045cc <case_insensitive_strcmp+0xc4>
 80045c6:	7b3b      	ldrb	r3, [r7, #12]
 80045c8:	3320      	adds	r3, #32
 80045ca:	e000      	b.n	80045ce <case_insensitive_strcmp+0xc6>
 80045cc:	7b3b      	ldrb	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	08013a00 	.word	0x08013a00

080045e0 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <cJSON_strdup+0x1c>
    {
        return NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e015      	b.n	8004628 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fb fe47 	bl	8000290 <strlen>
 8004602:	4603      	mov	r3, r0
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	4798      	blx	r3
 8004610:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <cJSON_strdup+0x3c>
    {
        return NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	e005      	b.n	8004628 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	68b8      	ldr	r0, [r7, #8]
 8004622:	f00c fa38 	bl	8010a96 <memcpy>

    return copy;
 8004626:	68bb      	ldr	r3, [r7, #8]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2028      	movs	r0, #40	; 0x28
 800463e:	4798      	blx	r3
 8004640:	60f8      	str	r0, [r7, #12]
    if (node)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8004648:	2228      	movs	r2, #40	; 0x28
 800464a:	2100      	movs	r1, #0
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f00c f923 	bl	8010898 <memset>
    }

    return node;
 8004652:	68fb      	ldr	r3, [r7, #12]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8004668:	e037      	b.n	80046da <cJSON_Delete+0x7e>
    {
        next = item->next;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d108      	bne.n	800468e <cJSON_Delete+0x32>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ffe7 	bl	800465c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <cJSON_Delete+0x52>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <cJSON_Delete+0x90>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6912      	ldr	r2, [r2, #16]
 80046aa:	4610      	mov	r0, r2
 80046ac:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <cJSON_Delete+0x72>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <cJSON_Delete+0x90>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6a12      	ldr	r2, [r2, #32]
 80046ca:	4610      	mov	r0, r2
 80046cc:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <cJSON_Delete+0x90>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
        item = next;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1c4      	bne.n	800466a <cJSON_Delete+0xe>
    }
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000048 	.word	0x20000048

080046f0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80046f4:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b098      	sub	sp, #96	; 0x60
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
    double number = 0;
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800471a:	f7ff ffe9 	bl	80046f0 <get_decimal_point>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <parse_number+0x36>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <parse_number+0x3a>
    {
        return false;
 8004736:	2300      	movs	r3, #0
 8004738:	e0a0      	b.n	800487c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800473a:	2300      	movs	r3, #0
 800473c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800473e:	e03d      	b.n	80047bc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800474a:	440b      	add	r3, r1
 800474c:	4413      	add	r3, r2
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b45      	cmp	r3, #69	; 0x45
 8004752:	dc17      	bgt.n	8004784 <parse_number+0x84>
 8004754:	2b2b      	cmp	r3, #43	; 0x2b
 8004756:	db40      	blt.n	80047da <parse_number+0xda>
 8004758:	3b2b      	subs	r3, #43	; 0x2b
 800475a:	2201      	movs	r2, #1
 800475c:	409a      	lsls	r2, r3
 800475e:	4b4c      	ldr	r3, [pc, #304]	; (8004890 <parse_number+0x190>)
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <parse_number+0x88>
 8004770:	f002 0308 	and.w	r3, r2, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d111      	bne.n	80047a6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8004782:	e02a      	b.n	80047da <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8004784:	2b65      	cmp	r3, #101	; 0x65
 8004786:	d128      	bne.n	80047da <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004792:	440b      	add	r3, r1
 8004794:	4413      	add	r3, r2
 8004796:	7819      	ldrb	r1, [r3, #0]
 8004798:	f107 0208 	add.w	r2, r7, #8
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479e:	4413      	add	r3, r2
 80047a0:	460a      	mov	r2, r1
 80047a2:	701a      	strb	r2, [r3, #0]
                break;
 80047a4:	e007      	b.n	80047b6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80047a6:	f107 0208 	add.w	r2, r7, #8
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	4413      	add	r3, r2
 80047ae:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80047b2:	701a      	strb	r2, [r3, #0]
                break;
 80047b4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80047b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b8:	3301      	adds	r3, #1
 80047ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047be:	2b3e      	cmp	r3, #62	; 0x3e
 80047c0:	d80d      	bhi.n	80047de <parse_number+0xde>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <parse_number+0xde>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ce:	441a      	add	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3b3      	bcc.n	8004740 <parse_number+0x40>
        }
    }
loop_end:
 80047d8:	e001      	b.n	80047de <parse_number+0xde>
                goto loop_end;
 80047da:	bf00      	nop
 80047dc:	e000      	b.n	80047e0 <parse_number+0xe0>
loop_end:
 80047de:	bf00      	nop
    number_c_string[i] = '\0';
 80047e0:	f107 0208 	add.w	r2, r7, #8
 80047e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e6:	4413      	add	r3, r2
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80047ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047f0:	f107 0308 	add.w	r3, r7, #8
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f00b fe8a 	bl	8010510 <strtod>
 80047fc:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8004800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	429a      	cmp	r2, r3
 8004808:	d101      	bne.n	800480e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800480a:	2300      	movs	r3, #0
 800480c:	e036      	b.n	800487c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004814:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8004818:	a31b      	add	r3, pc, #108	; (adr r3, 8004888 <parse_number+0x188>)
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004822:	f7fc f97f 	bl	8000b24 <__aeabi_dcmpge>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004832:	615a      	str	r2, [r3, #20]
 8004834:	e015      	b.n	8004862 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	4b16      	ldr	r3, [pc, #88]	; (8004894 <parse_number+0x194>)
 800483c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004840:	f7fc f966 	bl	8000b10 <__aeabi_dcmple>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004850:	615a      	str	r2, [r3, #20]
 8004852:	e006      	b.n	8004862 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8004854:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004858:	f7fc f98e 	bl	8000b78 <__aeabi_d2iz>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2208      	movs	r2, #8
 8004866:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800486e:	f107 0208 	add.w	r2, r7, #8
 8004872:	1a8a      	subs	r2, r1, r2
 8004874:	441a      	add	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	609a      	str	r2, [r3, #8]
    return true;
 800487a:	2301      	movs	r3, #1
}
 800487c:	4618      	mov	r0, r3
 800487e:	3760      	adds	r7, #96	; 0x60
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	f3af 8000 	nop.w
 8004888:	ffc00000 	.word	0xffc00000
 800488c:	41dfffff 	.word	0x41dfffff
 8004890:	04007fe5 	.word	0x04007fe5
 8004894:	c1e00000 	.word	0xc1e00000

08004898 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <ensure+0x20>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <ensure+0x24>
    {
        return NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e083      	b.n	80049c4 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <ensure+0x3c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d301      	bcc.n	80048d4 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e077      	b.n	80049c4 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	da01      	bge.n	80048de <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	e072      	b.n	80049c4 <ensure+0x12c>
    }

    needed += p->offset + 1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	3301      	adds	r3, #1
 80048e8:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d805      	bhi.n	8004900 <ensure+0x68>
    {
        return p->buffer + p->offset;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4413      	add	r3, r2
 80048fe:	e061      	b.n	80049c4 <ensure+0x12c>
    }

    if (p->noalloc) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <ensure+0x74>
        return NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	e05b      	b.n	80049c4 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d308      	bcc.n	8004926 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	db03      	blt.n	8004922 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800491a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	e004      	b.n	800492c <ensure+0x94>
        }
        else
        {
            return NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	e04e      	b.n	80049c4 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d018      	beq.n	8004966 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	4610      	mov	r0, r2
 8004940:	4798      	blx	r3
 8004942:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d132      	bne.n	80049b0 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	4610      	mov	r0, r2
 8004954:	4798      	blx	r3
            p->length = 0;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]

            return NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	e02e      	b.n	80049c4 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	68b8      	ldr	r0, [r7, #8]
 800496c:	4798      	blx	r3
 800496e:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	4610      	mov	r0, r2
 8004980:	4798      	blx	r3
            p->length = 0;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

            return NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	e018      	b.n	80049c4 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6819      	ldr	r1, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	3301      	adds	r3, #1
 800499c:	461a      	mov	r2, r3
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f00c f879 	bl	8010a96 <memcpy>
        p->hooks.deallocate(p->buffer);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	4610      	mov	r0, r2
 80049ae:	4798      	blx	r3
    }
    p->length = newsize;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4413      	add	r3, r2
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <update_offset+0x3a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00f      	beq.n	8004a06 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4413      	add	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689c      	ldr	r4, [r3, #8]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7fb fc4a 	bl	8000290 <strlen>
 80049fc:	4603      	mov	r3, r0
 80049fe:	18e2      	adds	r2, r4, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	e000      	b.n	8004a08 <update_offset+0x3c>
        return;
 8004a06:	bf00      	nop
}
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd90      	pop	{r4, r7, pc}
	...

08004a10 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8004a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	ed87 0b02 	vstr	d0, [r7, #8]
 8004a1c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	68fe      	ldr	r6, [r7, #12]
 8004a24:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	687e      	ldr	r6, [r7, #4]
 8004a2c:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004a30:	f7fc f882 	bl	8000b38 <__aeabi_dcmpgt>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <compare_double+0x34>
 8004a3a:	68bc      	ldr	r4, [r7, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004a42:	e003      	b.n	8004a4c <compare_double+0x3c>
 8004a44:	683c      	ldr	r4, [r7, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004a4c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8004a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a58:	f7fb fc26 	bl	80002a8 <__aeabi_dsub>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4690      	mov	r8, r2
 8004a62:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <compare_double+0x8c>)
 8004a6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a70:	f7fb fdd2 	bl	8000618 <__aeabi_dmul>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	2101      	movs	r1, #1
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4649      	mov	r1, r9
 8004a80:	f7fc f846 	bl	8000b10 <__aeabi_dcmple>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <compare_double+0x7e>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	461c      	mov	r4, r3
 8004a8e:	b2e3      	uxtb	r3, r4
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a9a:	bf00      	nop
 8004a9c:	3cb00000 	.word	0x3cb00000

08004aa0 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa2:	b093      	sub	sp, #76	; 0x4c
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004ab4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	f107 0318 	add.w	r3, r7, #24
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	611a      	str	r2, [r3, #16]
 8004ad4:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8004ad6:	f7ff fe0b 	bl	80046f0 <get_decimal_point>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <print_number+0x56>
    {
        return false;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e0b4      	b.n	8004c60 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8004af6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004afa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004afe:	f7fc f825 	bl	8000b4c <__aeabi_dcmpun>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d121      	bne.n	8004b4c <print_number+0xac>
 8004b08:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004b10:	2301      	movs	r3, #1
 8004b12:	461e      	mov	r6, r3
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295
 8004b18:	4b53      	ldr	r3, [pc, #332]	; (8004c68 <print_number+0x1c8>)
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f7fc f815 	bl	8000b4c <__aeabi_dcmpun>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <print_number+0xa0>
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	4b4e      	ldr	r3, [pc, #312]	; (8004c68 <print_number+0x1c8>)
 8004b2e:	4620      	mov	r0, r4
 8004b30:	4629      	mov	r1, r5
 8004b32:	f7fb ffed 	bl	8000b10 <__aeabi_dcmple>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <print_number+0xa0>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	461e      	mov	r6, r3
 8004b40:	b2f3      	uxtb	r3, r6
 8004b42:	f083 0301 	eor.w	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	4946      	ldr	r1, [pc, #280]	; (8004c6c <print_number+0x1cc>)
 8004b52:	4618      	mov	r0, r3
 8004b54:	f00b fdbc 	bl	80106d0 <siprintf>
 8004b58:	6478      	str	r0, [r7, #68]	; 0x44
 8004b5a:	e03f      	b.n	8004bdc <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fb fcef 	bl	8000544 <__aeabi_i2d>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b6e:	f7fb ffbb 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	493b      	ldr	r1, [pc, #236]	; (8004c70 <print_number+0x1d0>)
 8004b82:	4618      	mov	r0, r3
 8004b84:	f00b fda4 	bl	80106d0 <siprintf>
 8004b88:	6478      	str	r0, [r7, #68]	; 0x44
 8004b8a:	e027      	b.n	8004bdc <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8004b8c:	f107 0014 	add.w	r0, r7, #20
 8004b90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b94:	4937      	ldr	r1, [pc, #220]	; (8004c74 <print_number+0x1d4>)
 8004b96:	f00b fd9b 	bl	80106d0 <siprintf>
 8004b9a:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8004b9c:	f107 0208 	add.w	r2, r7, #8
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4934      	ldr	r1, [pc, #208]	; (8004c78 <print_number+0x1d8>)
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f00b fdb2 	bl	8010710 <siscanf>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d10c      	bne.n	8004bcc <print_number+0x12c>
 8004bb2:	ed97 7b02 	vldr	d7, [r7, #8]
 8004bb6:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8004bba:	eeb0 0a47 	vmov.f32	s0, s14
 8004bbe:	eef0 0a67 	vmov.f32	s1, s15
 8004bc2:	f7ff ff25 	bl	8004a10 <compare_double>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8004bcc:	f107 0014 	add.w	r0, r7, #20
 8004bd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bd4:	4929      	ldr	r1, [pc, #164]	; (8004c7c <print_number+0x1dc>)
 8004bd6:	f00b fd7b 	bl	80106d0 <siprintf>
 8004bda:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8004bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db02      	blt.n	8004be8 <print_number+0x148>
 8004be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be4:	2b19      	cmp	r3, #25
 8004be6:	dd01      	ble.n	8004bec <print_number+0x14c>
    {
        return false;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e039      	b.n	8004c60 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8004bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bee:	3301      	adds	r3, #1
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6838      	ldr	r0, [r7, #0]
 8004bf4:	f7ff fe50 	bl	8004898 <ensure>
 8004bf8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8004bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <print_number+0x164>
    {
        return false;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e02d      	b.n	8004c60 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	643b      	str	r3, [r7, #64]	; 0x40
 8004c08:	e01a      	b.n	8004c40 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8004c0a:	f107 0214 	add.w	r2, r7, #20
 8004c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c10:	4413      	add	r3, r2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d105      	bne.n	8004c28 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8004c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c20:	4413      	add	r3, r2
 8004c22:	222e      	movs	r2, #46	; 0x2e
 8004c24:	701a      	strb	r2, [r3, #0]
            continue;
 8004c26:	e008      	b.n	8004c3a <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8004c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f107 0114 	add.w	r1, r7, #20
 8004c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c34:	440a      	add	r2, r1
 8004c36:	7812      	ldrb	r2, [r2, #0]
 8004c38:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8004c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d3e0      	bcc.n	8004c0a <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8004c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4c:	4413      	add	r3, r2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c58:	441a      	add	r2, r3
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	609a      	str	r2, [r3, #8]

    return true;
 8004c5e:	2301      	movs	r3, #1
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	374c      	adds	r7, #76	; 0x4c
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c68:	7fefffff 	.word	0x7fefffff
 8004c6c:	08013158 	.word	0x08013158
 8004c70:	08013160 	.word	0x08013160
 8004c74:	08013164 	.word	0x08013164
 8004c78:	0801316c 	.word	0x0801316c
 8004c7c:	08013170 	.word	0x08013170

08004c80 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	e04c      	b.n	8004d30 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b2f      	cmp	r3, #47	; 0x2f
 8004ca0:	d90f      	bls.n	8004cc2 <parse_hex4+0x42>
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b39      	cmp	r3, #57	; 0x39
 8004cac:	d809      	bhi.n	8004cc2 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	3b30      	subs	r3, #48	; 0x30
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e02d      	b.n	8004d1e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	d90f      	bls.n	8004cee <parse_hex4+0x6e>
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b46      	cmp	r3, #70	; 0x46
 8004cd8:	d809      	bhi.n	8004cee <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4413      	add	r3, r2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3b37      	subs	r3, #55	; 0x37
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e017      	b.n	8004d1e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b60      	cmp	r3, #96	; 0x60
 8004cf8:	d90f      	bls.n	8004d1a <parse_hex4+0x9a>
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b66      	cmp	r3, #102	; 0x66
 8004d04:	d809      	bhi.n	8004d1a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	3b57      	subs	r3, #87	; 0x57
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e001      	b.n	8004d1e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e00c      	b.n	8004d38 <parse_hex4+0xb8>
        }

        if (i < 3)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d802      	bhi.n	8004d2a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d9af      	bls.n	8004c96 <parse_hex4+0x16>
        }
    }

    return h;
 8004d36:	68fb      	ldr	r3, [r7, #12]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	f340 80b7 	ble.w	8004eee <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	3302      	adds	r3, #2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff ff7b 	bl	8004c80 <parse_hex4>
 8004d8a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004d92:	d304      	bcc.n	8004d9e <utf16_literal_to_utf8+0x5a>
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8004d9a:	f0c0 80aa 	bcc.w	8004ef2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8004da4:	d337      	bcc.n	8004e16 <utf16_literal_to_utf8+0xd2>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004dac:	d233      	bcs.n	8004e16 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3306      	adds	r3, #6
 8004db2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8004db8:	230c      	movs	r3, #12
 8004dba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	f340 8096 	ble.w	8004ef6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b5c      	cmp	r3, #92	; 0x5c
 8004dd0:	f040 8093 	bne.w	8004efa <utf16_literal_to_utf8+0x1b6>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b75      	cmp	r3, #117	; 0x75
 8004ddc:	f040 808d 	bne.w	8004efa <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	3302      	adds	r3, #2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff4b 	bl	8004c80 <parse_hex4>
 8004dea:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004df2:	f0c0 8084 	bcc.w	8004efe <utf16_literal_to_utf8+0x1ba>
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8004dfc:	d27f      	bcs.n	8004efe <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	029a      	lsls	r2, r3, #10
 8004e02:	4b43      	ldr	r3, [pc, #268]	; (8004f10 <utf16_literal_to_utf8+0x1cc>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8004e14:	e004      	b.n	8004e20 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8004e16:	2306      	movs	r3, #6
 8004e18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	2b7f      	cmp	r3, #127	; 0x7f
 8004e24:	d803      	bhi.n	8004e2e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2c:	e01f      	b.n	8004e6e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e34:	d206      	bcs.n	8004e44 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8004e36:	2302      	movs	r3, #2
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8004e3c:	23c0      	movs	r3, #192	; 0xc0
 8004e3e:	f887 3020 	strb.w	r3, [r7, #32]
 8004e42:	e014      	b.n	8004e6e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4a:	d206      	bcs.n	8004e5a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8004e52:	23e0      	movs	r3, #224	; 0xe0
 8004e54:	f887 3020 	strb.w	r3, [r7, #32]
 8004e58:	e009      	b.n	8004e6e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004e60:	d24f      	bcs.n	8004f02 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8004e62:	2304      	movs	r3, #4
 8004e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8004e68:	23f0      	movs	r3, #240	; 0xf0
 8004e6a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8004e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e72:	3b01      	subs	r3, #1
 8004e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e78:	e015      	b.n	8004ea6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6819      	ldr	r1, [r3, #0]
 8004e88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004e8c:	440b      	add	r3, r1
 8004e8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8004e9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ea6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8004eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d909      	bls.n	8004eca <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	b2d9      	uxtb	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	e007      	b.n	8004eda <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee2:	441a      	add	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8004ee8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004eec:	e00b      	b.n	8004f06 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8004eee:	bf00      	nop
 8004ef0:	e008      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8004ef2:	bf00      	nop
 8004ef4:	e006      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004ef6:	bf00      	nop
 8004ef8:	e004      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8004f02:	bf00      	nop

fail:
    return 0;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3728      	adds	r7, #40	; 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	000ffc00 	.word	0x000ffc00

08004f14 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4413      	add	r3, r2
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	3301      	adds	r3, #1
 8004f36:	4413      	add	r3, r2
 8004f38:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b22      	cmp	r3, #34	; 0x22
 8004f50:	f040 8103 	bne.w	800515a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8004f5c:	e017      	b.n	8004f8e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b5c      	cmp	r3, #92	; 0x5c
 8004f64:	d110      	bne.n	8004f88 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	f080 80f1 	bcs.w	800515e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	61bb      	str	r3, [r7, #24]
                input_end++;
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	3301      	adds	r3, #1
 8004f86:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6a3a      	ldr	r2, [r7, #32]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d203      	bcs.n	8004fa8 <parse_string+0x94>
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b22      	cmp	r3, #34	; 0x22
 8004fa6:	d1da      	bne.n	8004f5e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	f080 80d3 	bcs.w	8005162 <parse_string+0x24e>
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b22      	cmp	r3, #34	; 0x22
 8004fc2:	f040 80ce 	bne.w	8005162 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	4413      	add	r3, r2
 8004fd0:	6a3a      	ldr	r2, [r7, #32]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	3201      	adds	r2, #1
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
 8004fe8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80ba 	beq.w	8005166 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8004ff6:	e094      	b.n	8005122 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b5c      	cmp	r3, #92	; 0x5c
 8004ffe:	d008      	beq.n	8005012 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	1c53      	adds	r3, r2, #1
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	60f9      	str	r1, [r7, #12]
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e087      	b.n	8005122 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8005012:	2302      	movs	r3, #2
 8005014:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8005016:	6a3a      	ldr	r2, [r7, #32]
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	f340 80a4 	ble.w	800516a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	3301      	adds	r3, #1
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b75      	cmp	r3, #117	; 0x75
 800502a:	f300 80a0 	bgt.w	800516e <parse_string+0x25a>
 800502e:	2b5c      	cmp	r3, #92	; 0x5c
 8005030:	da04      	bge.n	800503c <parse_string+0x128>
 8005032:	2b22      	cmp	r3, #34	; 0x22
 8005034:	d05c      	beq.n	80050f0 <parse_string+0x1dc>
 8005036:	2b2f      	cmp	r3, #47	; 0x2f
 8005038:	d05a      	beq.n	80050f0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800503a:	e098      	b.n	800516e <parse_string+0x25a>
            switch (input_pointer[1])
 800503c:	3b5c      	subs	r3, #92	; 0x5c
 800503e:	2b19      	cmp	r3, #25
 8005040:	f200 8095 	bhi.w	800516e <parse_string+0x25a>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <parse_string+0x138>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	080050f1 	.word	0x080050f1
 8005050:	0800516f 	.word	0x0800516f
 8005054:	0800516f 	.word	0x0800516f
 8005058:	0800516f 	.word	0x0800516f
 800505c:	0800516f 	.word	0x0800516f
 8005060:	0800516f 	.word	0x0800516f
 8005064:	080050b5 	.word	0x080050b5
 8005068:	0800516f 	.word	0x0800516f
 800506c:	0800516f 	.word	0x0800516f
 8005070:	0800516f 	.word	0x0800516f
 8005074:	080050c1 	.word	0x080050c1
 8005078:	0800516f 	.word	0x0800516f
 800507c:	0800516f 	.word	0x0800516f
 8005080:	0800516f 	.word	0x0800516f
 8005084:	0800516f 	.word	0x0800516f
 8005088:	0800516f 	.word	0x0800516f
 800508c:	0800516f 	.word	0x0800516f
 8005090:	0800516f 	.word	0x0800516f
 8005094:	080050cd 	.word	0x080050cd
 8005098:	0800516f 	.word	0x0800516f
 800509c:	0800516f 	.word	0x0800516f
 80050a0:	0800516f 	.word	0x0800516f
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	0800516f 	.word	0x0800516f
 80050ac:	080050e5 	.word	0x080050e5
 80050b0:	08005101 	.word	0x08005101
                    *output_pointer++ = '\b';
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	60fa      	str	r2, [r7, #12]
 80050ba:	2208      	movs	r2, #8
 80050bc:	701a      	strb	r2, [r3, #0]
                    break;
 80050be:	e02c      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\f';
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	60fa      	str	r2, [r7, #12]
 80050c6:	220c      	movs	r2, #12
 80050c8:	701a      	strb	r2, [r3, #0]
                    break;
 80050ca:	e026      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\n';
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	60fa      	str	r2, [r7, #12]
 80050d2:	220a      	movs	r2, #10
 80050d4:	701a      	strb	r2, [r3, #0]
                    break;
 80050d6:	e020      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\r';
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	60fa      	str	r2, [r7, #12]
 80050de:	220d      	movs	r2, #13
 80050e0:	701a      	strb	r2, [r3, #0]
                    break;
 80050e2:	e01a      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\t';
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	60fa      	str	r2, [r7, #12]
 80050ea:	2209      	movs	r2, #9
 80050ec:	701a      	strb	r2, [r3, #0]
                    break;
 80050ee:	e014      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	60f9      	str	r1, [r7, #12]
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	701a      	strb	r2, [r3, #0]
                    break;
 80050fe:	e00c      	b.n	800511a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8005100:	f107 030c 	add.w	r3, r7, #12
 8005104:	461a      	mov	r2, r3
 8005106:	6a39      	ldr	r1, [r7, #32]
 8005108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800510a:	f7ff fe1b 	bl	8004d44 <utf16_literal_to_utf8>
 800510e:	4603      	mov	r3, r0
 8005110:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d02c      	beq.n	8005172 <parse_string+0x25e>
                    break;
 8005118:	bf00      	nop
            }
            input_pointer += sequence_length;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	4413      	add	r3, r2
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8005122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	429a      	cmp	r2, r3
 8005128:	f4ff af66 	bcc.w	8004ff8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2210      	movs	r2, #16
 8005136:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	461a      	mov	r2, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	609a      	str	r2, [r3, #8]

    return true;
 8005156:	2301      	movs	r3, #1
 8005158:	e01e      	b.n	8005198 <parse_string+0x284>
        goto fail;
 800515a:	bf00      	nop
 800515c:	e00a      	b.n	8005174 <parse_string+0x260>
                    goto fail;
 800515e:	bf00      	nop
 8005160:	e008      	b.n	8005174 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8005162:	bf00      	nop
 8005164:	e006      	b.n	8005174 <parse_string+0x260>
            goto fail; /* allocation failure */
 8005166:	bf00      	nop
 8005168:	e004      	b.n	8005174 <parse_string+0x260>
                goto fail;
 800516a:	bf00      	nop
 800516c:	e002      	b.n	8005174 <parse_string+0x260>
                    goto fail;
 800516e:	bf00      	nop
 8005170:	e000      	b.n	8005174 <parse_string+0x260>
                        goto fail;
 8005172:	bf00      	nop

fail:
    if (output != NULL)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	69f8      	ldr	r0, [r7, #28]
 8005180:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	461a      	mov	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	609a      	str	r2, [r3, #8]
    }

    return false;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <print_string_ptr+0x28>
    {
        return false;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e110      	b.n	80053ea <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d111      	bne.n	80051f2 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80051ce:	2103      	movs	r1, #3
 80051d0:	6838      	ldr	r0, [r7, #0]
 80051d2:	f7ff fb61 	bl	8004898 <ensure>
 80051d6:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <print_string_ptr+0x42>
        {
            return false;
 80051de:	2300      	movs	r3, #0
 80051e0:	e103      	b.n	80053ea <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4a83      	ldr	r2, [pc, #524]	; (80053f4 <print_string_ptr+0x254>)
 80051e6:	8811      	ldrh	r1, [r2, #0]
 80051e8:	7892      	ldrb	r2, [r2, #2]
 80051ea:	8019      	strh	r1, [r3, #0]
 80051ec:	709a      	strb	r2, [r3, #2]

        return true;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0fb      	b.n	80053ea <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	e024      	b.n	8005242 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b22      	cmp	r3, #34	; 0x22
 80051fe:	dc0f      	bgt.n	8005220 <print_string_ptr+0x80>
 8005200:	2b08      	cmp	r3, #8
 8005202:	db13      	blt.n	800522c <print_string_ptr+0x8c>
 8005204:	3b08      	subs	r3, #8
 8005206:	4a7c      	ldr	r2, [pc, #496]	; (80053f8 <print_string_ptr+0x258>)
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <print_string_ptr+0x84>
 800521e:	e005      	b.n	800522c <print_string_ptr+0x8c>
 8005220:	2b5c      	cmp	r3, #92	; 0x5c
 8005222:	d103      	bne.n	800522c <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	3301      	adds	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
                break;
 800522a:	e007      	b.n	800523c <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b1f      	cmp	r3, #31
 8005232:	d802      	bhi.n	800523a <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	3305      	adds	r3, #5
 8005238:	617b      	str	r3, [r7, #20]
                }
                break;
 800523a:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1d6      	bne.n	80051f8 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	461a      	mov	r2, r3
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	4413      	add	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3303      	adds	r3, #3
 800525c:	4619      	mov	r1, r3
 800525e:	6838      	ldr	r0, [r7, #0]
 8005260:	f7ff fb1a 	bl	8004898 <ensure>
 8005264:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <print_string_ptr+0xd0>
    {
        return false;
 800526c:	2300      	movs	r3, #0
 800526e:	e0bc      	b.n	80053ea <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d117      	bne.n	80052a6 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2222      	movs	r2, #34	; 0x22
 800527a:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3301      	adds	r3, #1
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4618      	mov	r0, r3
 8005286:	f00b fc06 	bl	8010a96 <memcpy>
        output[output_length + 1] = '\"';
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	2222      	movs	r2, #34	; 0x22
 8005294:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3302      	adds	r3, #2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]

        return true;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e0a1      	b.n	80053ea <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2222      	movs	r2, #34	; 0x22
 80052aa:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3301      	adds	r3, #1
 80052b0:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e086      	b.n	80053c6 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b1f      	cmp	r3, #31
 80052be:	d90c      	bls.n	80052da <print_string_ptr+0x13a>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b22      	cmp	r3, #34	; 0x22
 80052c6:	d008      	beq.n	80052da <print_string_ptr+0x13a>
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b5c      	cmp	r3, #92	; 0x5c
 80052ce:	d004      	beq.n	80052da <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e06f      	b.n	80053ba <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	61ba      	str	r2, [r7, #24]
 80052e0:	225c      	movs	r2, #92	; 0x5c
 80052e2:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b22      	cmp	r3, #34	; 0x22
 80052ea:	dc3d      	bgt.n	8005368 <print_string_ptr+0x1c8>
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	db59      	blt.n	80053a4 <print_string_ptr+0x204>
 80052f0:	3b08      	subs	r3, #8
 80052f2:	2b1a      	cmp	r3, #26
 80052f4:	d856      	bhi.n	80053a4 <print_string_ptr+0x204>
 80052f6:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <print_string_ptr+0x15c>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	0800537d 	.word	0x0800537d
 8005300:	0800539d 	.word	0x0800539d
 8005304:	0800538d 	.word	0x0800538d
 8005308:	080053a5 	.word	0x080053a5
 800530c:	08005385 	.word	0x08005385
 8005310:	08005395 	.word	0x08005395
 8005314:	080053a5 	.word	0x080053a5
 8005318:	080053a5 	.word	0x080053a5
 800531c:	080053a5 	.word	0x080053a5
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053a5 	.word	0x080053a5
 8005328:	080053a5 	.word	0x080053a5
 800532c:	080053a5 	.word	0x080053a5
 8005330:	080053a5 	.word	0x080053a5
 8005334:	080053a5 	.word	0x080053a5
 8005338:	080053a5 	.word	0x080053a5
 800533c:	080053a5 	.word	0x080053a5
 8005340:	080053a5 	.word	0x080053a5
 8005344:	080053a5 	.word	0x080053a5
 8005348:	080053a5 	.word	0x080053a5
 800534c:	080053a5 	.word	0x080053a5
 8005350:	080053a5 	.word	0x080053a5
 8005354:	080053a5 	.word	0x080053a5
 8005358:	080053a5 	.word	0x080053a5
 800535c:	080053a5 	.word	0x080053a5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	08005375 	.word	0x08005375
 8005368:	2b5c      	cmp	r3, #92	; 0x5c
 800536a:	d11b      	bne.n	80053a4 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	225c      	movs	r2, #92	; 0x5c
 8005370:	701a      	strb	r2, [r3, #0]
                    break;
 8005372:	e022      	b.n	80053ba <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2222      	movs	r2, #34	; 0x22
 8005378:	701a      	strb	r2, [r3, #0]
                    break;
 800537a:	e01e      	b.n	80053ba <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2262      	movs	r2, #98	; 0x62
 8005380:	701a      	strb	r2, [r3, #0]
                    break;
 8005382:	e01a      	b.n	80053ba <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2266      	movs	r2, #102	; 0x66
 8005388:	701a      	strb	r2, [r3, #0]
                    break;
 800538a:	e016      	b.n	80053ba <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	226e      	movs	r2, #110	; 0x6e
 8005390:	701a      	strb	r2, [r3, #0]
                    break;
 8005392:	e012      	b.n	80053ba <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2272      	movs	r2, #114	; 0x72
 8005398:	701a      	strb	r2, [r3, #0]
                    break;
 800539a:	e00e      	b.n	80053ba <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2274      	movs	r2, #116	; 0x74
 80053a0:	701a      	strb	r2, [r3, #0]
                    break;
 80053a2:	e00a      	b.n	80053ba <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	4914      	ldr	r1, [pc, #80]	; (80053fc <print_string_ptr+0x25c>)
 80053ac:	69b8      	ldr	r0, [r7, #24]
 80053ae:	f00b f98f 	bl	80106d0 <siprintf>
                    output_pointer += 4;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	3304      	adds	r3, #4
 80053b6:	61bb      	str	r3, [r7, #24]
                    break;
 80053b8:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3301      	adds	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	3301      	adds	r3, #1
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f47f af74 	bne.w	80052b8 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	2222      	movs	r2, #34	; 0x22
 80053da:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3302      	adds	r3, #2
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]

    return true;
 80053e8:	2301      	movs	r3, #1
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	08013178 	.word	0x08013178
 80053f8:	04000037 	.word	0x04000037
 80053fc:	0801317c 	.word	0x0801317c

08005400 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fec5 	bl	80051a0 <print_string_ptr>
 8005416:	4603      	mov	r3, r0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <buffer_skip_whitespace+0x16>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	e02c      	b.n	8005494 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <buffer_skip_whitespace+0x2c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d306      	bcc.n	800545a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	e021      	b.n	8005494 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00d      	beq.n	800547c <buffer_skip_whitespace+0x5c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d207      	bcs.n	800547c <buffer_skip_whitespace+0x5c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4413      	add	r3, r2
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b20      	cmp	r3, #32
 800547a:	d9e9      	bls.n	8005450 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d104      	bne.n	8005492 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	1e5a      	subs	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8005492:	687b      	ldr	r3, [r7, #4]
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <skip_utf8_bom+0x1e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <skip_utf8_bom+0x1e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <skip_utf8_bom+0x22>
    {
        return NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	e01c      	b.n	80054fc <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d018      	beq.n	80054fa <skip_utf8_bom+0x5a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d211      	bcs.n	80054fa <skip_utf8_bom+0x5a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4413      	add	r3, r2
 80054e0:	2203      	movs	r2, #3
 80054e2:	4908      	ldr	r1, [pc, #32]	; (8005504 <skip_utf8_bom+0x64>)
 80054e4:	4618      	mov	r0, r3
 80054e6:	f00b f9fc 	bl	80108e2 <strncmp>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	1cda      	adds	r2, r3, #3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80054fa:	687b      	ldr	r3, [r7, #4]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	08013184 	.word	0x08013184

08005508 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	e00c      	b.n	8005538 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7fa feb6 	bl	8000290 <strlen>
 8005524:	4603      	mov	r3, r0
 8005526:	3301      	adds	r3, #1
 8005528:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	6979      	ldr	r1, [r7, #20]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f805 	bl	8005540 <cJSON_ParseWithLengthOpts>
 8005536:	4603      	mov	r3, r0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08e      	sub	sp, #56	; 0x38
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800554e:	f107 0318 	add.w	r3, r7, #24
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	605a      	str	r2, [r3, #4]
 8005558:	609a      	str	r2, [r3, #8]
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	611a      	str	r2, [r3, #16]
 800555e:	615a      	str	r2, [r3, #20]
 8005560:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8005566:	4b41      	ldr	r3, [pc, #260]	; (800566c <cJSON_ParseWithLengthOpts+0x12c>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800556c:	4b3f      	ldr	r3, [pc, #252]	; (800566c <cJSON_ParseWithLengthOpts+0x12c>)
 800556e:	2200      	movs	r2, #0
 8005570:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d042      	beq.n	80055fe <cJSON_ParseWithLengthOpts+0xbe>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03f      	beq.n	80055fe <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800558a:	4a39      	ldr	r2, [pc, #228]	; (8005670 <cJSON_ParseWithLengthOpts+0x130>)
 800558c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005590:	ca07      	ldmia	r2, {r0, r1, r2}
 8005592:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8005596:	4836      	ldr	r0, [pc, #216]	; (8005670 <cJSON_ParseWithLengthOpts+0x130>)
 8005598:	f7ff f84a 	bl	8004630 <cJSON_New_Item>
 800559c:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02e      	beq.n	8005602 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80055a4:	f107 0318 	add.w	r3, r7, #24
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff ff79 	bl	80054a0 <skip_utf8_bom>
 80055ae:	4603      	mov	r3, r0
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ff35 	bl	8005420 <buffer_skip_whitespace>
 80055b6:	4603      	mov	r3, r0
 80055b8:	4619      	mov	r1, r3
 80055ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80055bc:	f000 f8fc 	bl	80057b8 <parse_value>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01f      	beq.n	8005606 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00e      	beq.n	80055ea <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80055cc:	f107 0318 	add.w	r3, r7, #24
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff ff25 	bl	8005420 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80055d6:	6a3a      	ldr	r2, [r7, #32]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d215      	bcs.n	800560a <cJSON_ParseWithLengthOpts+0xca>
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	4413      	add	r3, r2
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10f      	bne.n	800560a <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d004      	beq.n	80055fa <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
    }

    return item;
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	e031      	b.n	8005662 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80055fe:	bf00      	nop
 8005600:	e004      	b.n	800560c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8005602:	bf00      	nop
 8005604:	e002      	b.n	800560c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800560a:	bf00      	nop

fail:
    if (item != NULL)
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8005612:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005614:	f7ff f822 	bl	800465c <cJSON_Delete>
    }

    if (value != NULL)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d020      	beq.n	8005660 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	429a      	cmp	r2, r3
 800562c:	d202      	bcs.n	8005634 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	e005      	b.n	8005640 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3b01      	subs	r3, #1
 800563e:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d004      	beq.n	8005650 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	441a      	add	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <cJSON_ParseWithLengthOpts+0x12c>)
 8005652:	461a      	mov	r2, r3
 8005654:	f107 0310 	add.w	r3, r7, #16
 8005658:	e893 0003 	ldmia.w	r3, {r0, r1}
 800565c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3738      	adds	r7, #56	; 0x38
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	200002a8 	.word	0x200002a8
 8005670:	20000048 	.word	0x20000048

08005674 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800567c:	2200      	movs	r2, #0
 800567e:	2100      	movs	r1, #0
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff41 	bl	8005508 <cJSON_ParseWithOpts>
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08e      	sub	sp, #56	; 0x38
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 80056a0:	f107 0310 	add.w	r3, r7, #16
 80056a4:	2224      	movs	r2, #36	; 0x24
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f00b f8f5 	bl	8010898 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a38      	ldr	r2, [pc, #224]	; (8005794 <print+0x104>)
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	4610      	mov	r0, r2
 80056b8:	4798      	blx	r3
 80056ba:	4603      	mov	r3, r0
 80056bc:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 80056be:	4b35      	ldr	r3, [pc, #212]	; (8005794 <print+0x104>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80056d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d040      	beq.n	800575c <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80056da:	f107 0310 	add.w	r3, r7, #16
 80056de:	4619      	mov	r1, r3
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f955 	bl	8005990 <print_value>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d039      	beq.n	8005760 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 80056ec:	f107 0310 	add.w	r3, r7, #16
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff f96b 	bl	80049cc <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	6938      	ldr	r0, [r7, #16]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	3201      	adds	r2, #1
 8005708:	4611      	mov	r1, r2
 800570a:	4798      	blx	r3
 800570c:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	2b00      	cmp	r3, #0
 8005712:	d027      	beq.n	8005764 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	e01e      	b.n	8005758 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	3201      	adds	r2, #1
 8005722:	4610      	mov	r0, r2
 8005724:	4798      	blx	r3
 8005726:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01c      	beq.n	8005768 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800572e:	6939      	ldr	r1, [r7, #16]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4293      	cmp	r3, r2
 8005738:	bf28      	it	cs
 800573a:	4613      	movcs	r3, r2
 800573c:	461a      	mov	r2, r3
 800573e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005740:	f00b f9a9 	bl	8010a96 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005748:	4413      	add	r3, r2
 800574a:	2200      	movs	r2, #0
 800574c:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
    }

    return printed;
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	e016      	b.n	800578a <print+0xfa>
        goto fail;
 800575c:	bf00      	nop
 800575e:	e004      	b.n	800576a <print+0xda>
        goto fail;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <print+0xda>
            goto fail;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <print+0xda>
            goto fail;
 8005768:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4610      	mov	r0, r2
 8005778:	4798      	blx	r3
    }

    if (printed != NULL)
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <print+0xf8>
    {
        hooks->deallocate(printed);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005786:	4798      	blx	r3
    }

    return NULL;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3738      	adds	r7, #56	; 0x38
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	08013914 	.word	0x08013914

08005798 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <cJSON_Print+0x1c>)
 80057a2:	2101      	movs	r1, #1
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ff73 	bl	8005690 <print>
 80057aa:	4603      	mov	r3, r0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000048 	.word	0x20000048

080057b8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <parse_value+0x18>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <parse_value+0x1c>
    {
        return false; /* no input */
 80057d0:	2300      	movs	r3, #0
 80057d2:	e0d2      	b.n	800597a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01d      	beq.n	8005816 <parse_value+0x5e>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	1d1a      	adds	r2, r3, #4
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d816      	bhi.n	8005816 <parse_value+0x5e>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	2204      	movs	r2, #4
 80057f4:	4963      	ldr	r1, [pc, #396]	; (8005984 <parse_value+0x1cc>)
 80057f6:	4618      	mov	r0, r3
 80057f8:	f00b f873 	bl	80108e2 <strncmp>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2204      	movs	r2, #4
 8005806:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	1d1a      	adds	r2, r3, #4
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	609a      	str	r2, [r3, #8]
        return true;
 8005812:	2301      	movs	r3, #1
 8005814:	e0b1      	b.n	800597a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01d      	beq.n	8005858 <parse_value+0xa0>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	1d5a      	adds	r2, r3, #5
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d816      	bhi.n	8005858 <parse_value+0xa0>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	4413      	add	r3, r2
 8005834:	2205      	movs	r2, #5
 8005836:	4954      	ldr	r1, [pc, #336]	; (8005988 <parse_value+0x1d0>)
 8005838:	4618      	mov	r0, r3
 800583a:	f00b f852 	bl	80108e2 <strncmp>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	1d5a      	adds	r2, r3, #5
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	609a      	str	r2, [r3, #8]
        return true;
 8005854:	2301      	movs	r3, #1
 8005856:	e090      	b.n	800597a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d020      	beq.n	80058a0 <parse_value+0xe8>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d819      	bhi.n	80058a0 <parse_value+0xe8>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4413      	add	r3, r2
 8005876:	2204      	movs	r2, #4
 8005878:	4944      	ldr	r1, [pc, #272]	; (800598c <parse_value+0x1d4>)
 800587a:	4618      	mov	r0, r3
 800587c:	f00b f831 	bl	80108e2 <strncmp>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	1d1a      	adds	r2, r3, #4
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	609a      	str	r2, [r3, #8]
        return true;
 800589c:	2301      	movs	r3, #1
 800589e:	e06c      	b.n	800597a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d013      	beq.n	80058ce <parse_value+0x116>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d20d      	bcs.n	80058ce <parse_value+0x116>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	4413      	add	r3, r2
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b22      	cmp	r3, #34	; 0x22
 80058c0:	d105      	bne.n	80058ce <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fb25 	bl	8004f14 <parse_string>
 80058ca:	4603      	mov	r3, r0
 80058cc:	e055      	b.n	800597a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d023      	beq.n	800591c <parse_value+0x164>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d21d      	bcs.n	800591c <parse_value+0x164>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4413      	add	r3, r2
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b2d      	cmp	r3, #45	; 0x2d
 80058ee:	d00f      	beq.n	8005910 <parse_value+0x158>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4413      	add	r3, r2
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b2f      	cmp	r3, #47	; 0x2f
 80058fe:	d90d      	bls.n	800591c <parse_value+0x164>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4413      	add	r3, r2
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b39      	cmp	r3, #57	; 0x39
 800590e:	d805      	bhi.n	800591c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fe fef4 	bl	8004700 <parse_number>
 8005918:	4603      	mov	r3, r0
 800591a:	e02e      	b.n	800597a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d013      	beq.n	800594a <parse_value+0x192>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d20d      	bcs.n	800594a <parse_value+0x192>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	4413      	add	r3, r2
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b5b      	cmp	r3, #91	; 0x5b
 800593c:	d105      	bne.n	800594a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f909 	bl	8005b58 <parse_array>
 8005946:	4603      	mov	r3, r0
 8005948:	e017      	b.n	800597a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d013      	beq.n	8005978 <parse_value+0x1c0>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d20d      	bcs.n	8005978 <parse_value+0x1c0>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4413      	add	r3, r2
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b7b      	cmp	r3, #123	; 0x7b
 800596a:	d105      	bne.n	8005978 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa3c 	bl	8005dec <parse_object>
 8005974:	4603      	mov	r3, r0
 8005976:	e000      	b.n	800597a <parse_value+0x1c2>
    }

    return false;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	08013158 	.word	0x08013158
 8005988:	08013188 	.word	0x08013188
 800598c:	08013190 	.word	0x08013190

08005990 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <print_value+0x1a>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <print_value+0x1e>
    {
        return false;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e0c9      	b.n	8005b42 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b80      	cmp	r3, #128	; 0x80
 80059b6:	f000 808e 	beq.w	8005ad6 <print_value+0x146>
 80059ba:	2b80      	cmp	r3, #128	; 0x80
 80059bc:	f300 80c0 	bgt.w	8005b40 <print_value+0x1b0>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	dc49      	bgt.n	8005a58 <print_value+0xc8>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f340 80bb 	ble.w	8005b40 <print_value+0x1b0>
 80059ca:	3b01      	subs	r3, #1
 80059cc:	2b1f      	cmp	r3, #31
 80059ce:	f200 80b7 	bhi.w	8005b40 <print_value+0x1b0>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <print_value+0x48>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	08005a83 	.word	0x08005a83
 80059dc:	08005aa7 	.word	0x08005aa7
 80059e0:	08005b41 	.word	0x08005b41
 80059e4:	08005a5f 	.word	0x08005a5f
 80059e8:	08005b41 	.word	0x08005b41
 80059ec:	08005b41 	.word	0x08005b41
 80059f0:	08005b41 	.word	0x08005b41
 80059f4:	08005acb 	.word	0x08005acb
 80059f8:	08005b41 	.word	0x08005b41
 80059fc:	08005b41 	.word	0x08005b41
 8005a00:	08005b41 	.word	0x08005b41
 8005a04:	08005b41 	.word	0x08005b41
 8005a08:	08005b41 	.word	0x08005b41
 8005a0c:	08005b41 	.word	0x08005b41
 8005a10:	08005b41 	.word	0x08005b41
 8005a14:	08005b1d 	.word	0x08005b1d
 8005a18:	08005b41 	.word	0x08005b41
 8005a1c:	08005b41 	.word	0x08005b41
 8005a20:	08005b41 	.word	0x08005b41
 8005a24:	08005b41 	.word	0x08005b41
 8005a28:	08005b41 	.word	0x08005b41
 8005a2c:	08005b41 	.word	0x08005b41
 8005a30:	08005b41 	.word	0x08005b41
 8005a34:	08005b41 	.word	0x08005b41
 8005a38:	08005b41 	.word	0x08005b41
 8005a3c:	08005b41 	.word	0x08005b41
 8005a40:	08005b41 	.word	0x08005b41
 8005a44:	08005b41 	.word	0x08005b41
 8005a48:	08005b41 	.word	0x08005b41
 8005a4c:	08005b41 	.word	0x08005b41
 8005a50:	08005b41 	.word	0x08005b41
 8005a54:	08005b29 	.word	0x08005b29
 8005a58:	2b40      	cmp	r3, #64	; 0x40
 8005a5a:	d06b      	beq.n	8005b34 <print_value+0x1a4>
 8005a5c:	e070      	b.n	8005b40 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8005a5e:	2105      	movs	r1, #5
 8005a60:	6838      	ldr	r0, [r7, #0]
 8005a62:	f7fe ff19 	bl	8004898 <ensure>
 8005a66:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <print_value+0xe2>
            {
                return false;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e067      	b.n	8005b42 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a35      	ldr	r2, [pc, #212]	; (8005b4c <print_value+0x1bc>)
 8005a76:	6810      	ldr	r0, [r2, #0]
 8005a78:	6018      	str	r0, [r3, #0]
 8005a7a:	7912      	ldrb	r2, [r2, #4]
 8005a7c:	711a      	strb	r2, [r3, #4]
            return true;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e05f      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8005a82:	2106      	movs	r1, #6
 8005a84:	6838      	ldr	r0, [r7, #0]
 8005a86:	f7fe ff07 	bl	8004898 <ensure>
 8005a8a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <print_value+0x106>
            {
                return false;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e055      	b.n	8005b42 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a2d      	ldr	r2, [pc, #180]	; (8005b50 <print_value+0x1c0>)
 8005a9a:	6810      	ldr	r0, [r2, #0]
 8005a9c:	6018      	str	r0, [r3, #0]
 8005a9e:	8892      	ldrh	r2, [r2, #4]
 8005aa0:	809a      	strh	r2, [r3, #4]
            return true;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e04d      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8005aa6:	2105      	movs	r1, #5
 8005aa8:	6838      	ldr	r0, [r7, #0]
 8005aaa:	f7fe fef5 	bl	8004898 <ensure>
 8005aae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <print_value+0x12a>
            {
                return false;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e043      	b.n	8005b42 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a25      	ldr	r2, [pc, #148]	; (8005b54 <print_value+0x1c4>)
 8005abe:	6810      	ldr	r0, [r2, #0]
 8005ac0:	6018      	str	r0, [r3, #0]
 8005ac2:	7912      	ldrb	r2, [r2, #4]
 8005ac4:	711a      	strb	r2, [r3, #4]
            return true;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e03b      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fe ffe7 	bl	8004aa0 <print_number>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	e035      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <print_value+0x156>
            {
                return false;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e02d      	b.n	8005b42 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fa fbd0 	bl	8000290 <strlen>
 8005af0:	4603      	mov	r3, r0
 8005af2:	3301      	adds	r3, #1
 8005af4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	6838      	ldr	r0, [r7, #0]
 8005afa:	f7fe fecd 	bl	8004898 <ensure>
 8005afe:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <print_value+0x17a>
            {
                return false;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e01b      	b.n	8005b42 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4619      	mov	r1, r3
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f00a ffbf 	bl	8010a96 <memcpy>
            return true;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e012      	b.n	8005b42 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff fc6e 	bl	8005400 <print_string>
 8005b24:	4603      	mov	r3, r0
 8005b26:	e00c      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f8d8 	bl	8005ce0 <print_array>
 8005b30:	4603      	mov	r3, r0
 8005b32:	e006      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa57 	bl	8005fea <print_object>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	e000      	b.n	8005b42 <print_value+0x1b2>

        default:
            return false;
 8005b40:	2300      	movs	r3, #0
    }
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	08013158 	.word	0x08013158
 8005b50:	08013188 	.word	0x08013188
 8005b54:	08013190 	.word	0x08013190

08005b58 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b72:	d301      	bcc.n	8005b78 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8005b74:	2300      	movs	r3, #0
 8005b76:	e0af      	b.n	8005cd8 <parse_array+0x180>
    }
    input_buffer->depth++;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b5b      	cmp	r3, #91	; 0x5b
 8005b90:	f040 8094 	bne.w	8005cbc <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8005b9e:	6838      	ldr	r0, [r7, #0]
 8005ba0:	f7ff fc3e 	bl	8005420 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00d      	beq.n	8005bc6 <parse_array+0x6e>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d207      	bcs.n	8005bc6 <parse_array+0x6e>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b5d      	cmp	r3, #93	; 0x5d
 8005bc4:	d061      	beq.n	8005c8a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <parse_array+0x80>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d305      	bcc.n	8005be4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	1e5a      	subs	r2, r3, #1
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	609a      	str	r2, [r3, #8]
        goto fail;
 8005be2:	e072      	b.n	8005cca <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	1e5a      	subs	r2, r3, #1
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	3310      	adds	r3, #16
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fd1c 	bl	8004630 <cJSON_New_Item>
 8005bf8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d05f      	beq.n	8005cc0 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	e007      	b.n	8005c20 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005c2a:	6838      	ldr	r0, [r7, #0]
 8005c2c:	f7ff fbf8 	bl	8005420 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6938      	ldr	r0, [r7, #16]
 8005c34:	f7ff fdc0 	bl	80057b8 <parse_value>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d042      	beq.n	8005cc4 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005c3e:	6838      	ldr	r0, [r7, #0]
 8005c40:	f7ff fbee 	bl	8005420 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00d      	beq.n	8005c66 <parse_array+0x10e>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d207      	bcs.n	8005c66 <parse_array+0x10e>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4413      	add	r3, r2
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b2c      	cmp	r3, #44	; 0x2c
 8005c64:	d0c3      	beq.n	8005bee <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d02d      	beq.n	8005cc8 <parse_array+0x170>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d227      	bcs.n	8005cc8 <parse_array+0x170>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4413      	add	r3, r2
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b5d      	cmp	r3, #93	; 0x5d
 8005c86:	d11f      	bne.n	8005cc8 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8005c88:	e000      	b.n	8005c8c <parse_array+0x134>
        goto success;
 8005c8a:	bf00      	nop
    input_buffer->depth--;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	1e5a      	subs	r2, r3, #1
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <parse_array+0x14a>
        head->prev = current_item;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	60da      	str	r2, [r3, #12]
    item->child = head;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	609a      	str	r2, [r3, #8]

    return true;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e00d      	b.n	8005cd8 <parse_array+0x180>
        goto fail;
 8005cbc:	bf00      	nop
 8005cbe:	e004      	b.n	8005cca <parse_array+0x172>
            goto fail; /* allocation failure */
 8005cc0:	bf00      	nop
 8005cc2:	e002      	b.n	8005cca <parse_array+0x172>
            goto fail; /* failed to parse value */
 8005cc4:	bf00      	nop
 8005cc6:	e000      	b.n	8005cca <parse_array+0x172>
        goto fail; /* expected end of array */
 8005cc8:	bf00      	nop

fail:
    if (head != NULL)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8005cd0:	6978      	ldr	r0, [r7, #20]
 8005cd2:	f7fe fcc3 	bl	800465c <cJSON_Delete>
    }

    return false;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <print_array+0x22>
    {
        return false;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e070      	b.n	8005de4 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8005d02:	2101      	movs	r1, #1
 8005d04:	6838      	ldr	r0, [r7, #0]
 8005d06:	f7fe fdc7 	bl	8004898 <ensure>
 8005d0a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <print_array+0x36>
    {
        return false;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e066      	b.n	8005de4 <print_array+0x104>
    }

    *output_pointer = '[';
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	225b      	movs	r2, #91	; 0x5b
 8005d1a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8005d30:	e03d      	b.n	8005dae <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6938      	ldr	r0, [r7, #16]
 8005d36:	f7ff fe2b 	bl	8005990 <print_value>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <print_array+0x64>
        {
            return false;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e04f      	b.n	8005de4 <print_array+0x104>
        }
        update_offset(output_buffer);
 8005d44:	6838      	ldr	r0, [r7, #0]
 8005d46:	f7fe fe41 	bl	80049cc <update_offset>
        if (current_element->next)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d02a      	beq.n	8005da8 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <print_array+0x7e>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e000      	b.n	8005d60 <print_array+0x80>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	4619      	mov	r1, r3
 8005d68:	6838      	ldr	r0, [r7, #0]
 8005d6a:	f7fe fd95 	bl	8004898 <ensure>
 8005d6e:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <print_array+0x9a>
            {
                return false;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e034      	b.n	8005de4 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	617a      	str	r2, [r7, #20]
 8005d80:	222c      	movs	r2, #44	; 0x2c
 8005d82:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	617a      	str	r2, [r7, #20]
 8005d92:	2220      	movs	r2, #32
 8005d94:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	441a      	add	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1be      	bne.n	8005d32 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8005db4:	2102      	movs	r1, #2
 8005db6:	6838      	ldr	r0, [r7, #0]
 8005db8:	f7fe fd6e 	bl	8004898 <ensure>
 8005dbc:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <print_array+0xe8>
    {
        return false;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e00d      	b.n	8005de4 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	617a      	str	r2, [r7, #20]
 8005dce:	225d      	movs	r2, #93	; 0x5d
 8005dd0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	1e5a      	subs	r2, r3, #1
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	60da      	str	r2, [r3, #12]

    return true;
 8005de2:	2301      	movs	r3, #1
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e06:	d301      	bcc.n	8005e0c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e0ea      	b.n	8005fe2 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80d0 	beq.w	8005fbe <parse_object+0x1d2>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	f080 80c9 	bcs.w	8005fbe <parse_object+0x1d2>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b7b      	cmp	r3, #123	; 0x7b
 8005e3a:	f040 80c0 	bne.w	8005fbe <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8005e48:	6838      	ldr	r0, [r7, #0]
 8005e4a:	f7ff fae9 	bl	8005420 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00e      	beq.n	8005e72 <parse_object+0x86>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d208      	bcs.n	8005e72 <parse_object+0x86>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4413      	add	r3, r2
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b7d      	cmp	r3, #125	; 0x7d
 8005e6e:	f000 808d 	beq.w	8005f8c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <parse_object+0x98>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d305      	bcc.n	8005e90 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	1e5a      	subs	r2, r3, #1
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	609a      	str	r2, [r3, #8]
        goto fail;
 8005e8e:	e0a1      	b.n	8005fd4 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	1e5a      	subs	r2, r3, #1
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	3310      	adds	r3, #16
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fbc6 	bl	8004630 <cJSON_New_Item>
 8005ea4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 808a 	beq.w	8005fc2 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	e007      	b.n	8005ece <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005ed8:	6838      	ldr	r0, [r7, #0]
 8005eda:	f7ff faa1 	bl	8005420 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6938      	ldr	r0, [r7, #16]
 8005ee2:	f7ff f817 	bl	8004f14 <parse_string>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d06c      	beq.n	8005fc6 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8005eec:	6838      	ldr	r0, [r7, #0]
 8005eee:	f7ff fa97 	bl	8005420 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2200      	movs	r2, #0
 8005efe:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d061      	beq.n	8005fca <parse_object+0x1de>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d25b      	bcs.n	8005fca <parse_object+0x1de>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b3a      	cmp	r3, #58	; 0x3a
 8005f20:	d153      	bne.n	8005fca <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005f2c:	6838      	ldr	r0, [r7, #0]
 8005f2e:	f7ff fa77 	bl	8005420 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6938      	ldr	r0, [r7, #16]
 8005f36:	f7ff fc3f 	bl	80057b8 <parse_value>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d046      	beq.n	8005fce <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005f40:	6838      	ldr	r0, [r7, #0]
 8005f42:	f7ff fa6d 	bl	8005420 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00d      	beq.n	8005f68 <parse_object+0x17c>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d207      	bcs.n	8005f68 <parse_object+0x17c>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4413      	add	r3, r2
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b2c      	cmp	r3, #44	; 0x2c
 8005f66:	d098      	beq.n	8005e9a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d031      	beq.n	8005fd2 <parse_object+0x1e6>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d22b      	bcs.n	8005fd2 <parse_object+0x1e6>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	4413      	add	r3, r2
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b7d      	cmp	r3, #125	; 0x7d
 8005f88:	d123      	bne.n	8005fd2 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8005f8a:	e000      	b.n	8005f8e <parse_object+0x1a2>
        goto success; /* empty object */
 8005f8c:	bf00      	nop
    input_buffer->depth--;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	1e5a      	subs	r2, r3, #1
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <parse_object+0x1b8>
        head->prev = current_item;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2240      	movs	r2, #64	; 0x40
 8005fa8:	60da      	str	r2, [r3, #12]
    item->child = head;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	609a      	str	r2, [r3, #8]
    return true;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e011      	b.n	8005fe2 <parse_object+0x1f6>
        goto fail; /* not an object */
 8005fbe:	bf00      	nop
 8005fc0:	e008      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8005fc2:	bf00      	nop
 8005fc4:	e006      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8005fc6:	bf00      	nop
 8005fc8:	e004      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8005fca:	bf00      	nop
 8005fcc:	e002      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8005fd2:	bf00      	nop

fail:
    if (head != NULL)
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8005fda:	6978      	ldr	r0, [r7, #20]
 8005fdc:	f7fe fb3e 	bl	800465c <cJSON_Delete>
    }

    return false;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b088      	sub	sp, #32
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <print_object+0x22>
    {
        return false;
 8006008:	2300      	movs	r3, #0
 800600a:	e108      	b.n	800621e <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <print_object+0x2e>
 8006014:	2302      	movs	r3, #2
 8006016:	e000      	b.n	800601a <print_object+0x30>
 8006018:	2301      	movs	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	4619      	mov	r1, r3
 8006022:	6838      	ldr	r0, [r7, #0]
 8006024:	f7fe fc38 	bl	8004898 <ensure>
 8006028:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <print_object+0x4a>
    {
        return false;
 8006030:	2300      	movs	r3, #0
 8006032:	e0f4      	b.n	800621e <print_object+0x234>
    }

    *output_pointer++ = '{';
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	61fa      	str	r2, [r7, #28]
 800603a:	227b      	movs	r2, #123	; 0x7b
 800603c:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	61fa      	str	r2, [r7, #28]
 8006056:	220a      	movs	r2, #10
 8006058:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	441a      	add	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	609a      	str	r2, [r3, #8]

    while (current_item)
 8006066:	e0a0      	b.n	80061aa <print_object+0x1c0>
    {
        if (output_buffer->format)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d022      	beq.n	80060b6 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4619      	mov	r1, r3
 8006076:	6838      	ldr	r0, [r7, #0]
 8006078:	f7fe fc0e 	bl	8004898 <ensure>
 800607c:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <print_object+0x9e>
            {
                return false;
 8006084:	2300      	movs	r3, #0
 8006086:	e0ca      	b.n	800621e <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e007      	b.n	800609e <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	61fa      	str	r2, [r7, #28]
 8006094:	2209      	movs	r2, #9
 8006096:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3301      	adds	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d3f2      	bcc.n	800608e <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	441a      	add	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff f86f 	bl	80051a0 <print_string_ptr>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <print_object+0xe2>
        {
            return false;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e0a8      	b.n	800621e <print_object+0x234>
        }
        update_offset(output_buffer);
 80060cc:	6838      	ldr	r0, [r7, #0]
 80060ce:	f7fe fc7d 	bl	80049cc <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <print_object+0xf4>
 80060da:	2302      	movs	r3, #2
 80060dc:	e000      	b.n	80060e0 <print_object+0xf6>
 80060de:	2301      	movs	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	6838      	ldr	r0, [r7, #0]
 80060e6:	f7fe fbd7 	bl	8004898 <ensure>
 80060ea:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <print_object+0x10c>
        {
            return false;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e093      	b.n	800621e <print_object+0x234>
        }
        *output_pointer++ = ':';
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	61fa      	str	r2, [r7, #28]
 80060fc:	223a      	movs	r2, #58	; 0x3a
 80060fe:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	61fa      	str	r2, [r7, #28]
 800610e:	2209      	movs	r2, #9
 8006110:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	441a      	add	r2, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	69b8      	ldr	r0, [r7, #24]
 8006122:	f7ff fc35 	bl	8005990 <print_value>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <print_object+0x146>
        {
            return false;
 800612c:	2300      	movs	r3, #0
 800612e:	e076      	b.n	800621e <print_object+0x234>
        }
        update_offset(output_buffer);
 8006130:	6838      	ldr	r0, [r7, #0]
 8006132:	f7fe fc4b 	bl	80049cc <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <print_object+0x158>
 800613e:	2201      	movs	r2, #1
 8006140:	e000      	b.n	8006144 <print_object+0x15a>
 8006142:	2200      	movs	r2, #0
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <print_object+0x166>
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <print_object+0x168>
 8006150:	2300      	movs	r3, #0
 8006152:	4413      	add	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3301      	adds	r3, #1
 800615a:	4619      	mov	r1, r3
 800615c:	6838      	ldr	r0, [r7, #0]
 800615e:	f7fe fb9b 	bl	8004898 <ensure>
 8006162:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <print_object+0x184>
        {
            return false;
 800616a:	2300      	movs	r3, #0
 800616c:	e057      	b.n	800621e <print_object+0x234>
        }
        if (current_item->next)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	61fa      	str	r2, [r7, #28]
 800617c:	222c      	movs	r2, #44	; 0x2c
 800617e:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	61fa      	str	r2, [r7, #28]
 800618e:	220a      	movs	r2, #10
 8006190:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	441a      	add	r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f af5b 	bne.w	8006068 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <print_object+0x1d8>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	e000      	b.n	80061c4 <print_object+0x1da>
 80061c2:	2302      	movs	r3, #2
 80061c4:	4619      	mov	r1, r3
 80061c6:	6838      	ldr	r0, [r7, #0]
 80061c8:	f7fe fb66 	bl	8004898 <ensure>
 80061cc:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <print_object+0x1ee>
    {
        return false;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e022      	b.n	800621e <print_object+0x234>
    }
    if (output_buffer->format)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d010      	beq.n	8006202 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80061e0:	2300      	movs	r3, #0
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	e007      	b.n	80061f6 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	61fa      	str	r2, [r7, #28]
 80061ec:	2209      	movs	r2, #9
 80061ee:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3301      	adds	r3, #1
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d3f1      	bcc.n	80061e6 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	61fa      	str	r2, [r7, #28]
 8006208:	227d      	movs	r2, #125	; 0x7d
 800620a:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2200      	movs	r2, #0
 8006210:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	1e5a      	subs	r2, r3, #1
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	60da      	str	r2, [r3, #12]

    return true;
 800621c:	2301      	movs	r3, #1
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b086      	sub	sp, #24
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <get_object_item+0x1c>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <get_object_item+0x20>
    {
        return NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	e033      	b.n	80062ae <get_object_item+0x88>
    }

    current_element = object->child;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d017      	beq.n	8006282 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8006252:	e002      	b.n	800625a <get_object_item+0x34>
        {
            current_element = current_element->next;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01c      	beq.n	800629a <get_object_item+0x74>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d018      	beq.n	800629a <get_object_item+0x74>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	4619      	mov	r1, r3
 800626e:	68b8      	ldr	r0, [r7, #8]
 8006270:	f7f9 ffae 	bl	80001d0 <strcmp>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1ec      	bne.n	8006254 <get_object_item+0x2e>
 800627a:	e00e      	b.n	800629a <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d008      	beq.n	800629a <get_object_item+0x74>
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	4619      	mov	r1, r3
 800628e:	68b8      	ldr	r0, [r7, #8]
 8006290:	f7fe f93a 	bl	8004508 <case_insensitive_strcmp>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1f0      	bne.n	800627c <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <get_object_item+0x82>
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <get_object_item+0x86>
        return NULL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e000      	b.n	80062ae <get_object_item+0x88>
    }

    return current_element;
 80062ac:	697b      	ldr	r3, [r7, #20]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80062c0:	2201      	movs	r2, #1
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff ffae 	bl	8006226 <get_object_item>
 80062ca:	4603      	mov	r3, r0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	605a      	str	r2, [r3, #4]
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d006      	beq.n	8006318 <add_item_to_array+0x22>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <add_item_to_array+0x22>
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d101      	bne.n	800631c <add_item_to_array+0x26>
    {
        return false;
 8006318:	2300      	movs	r3, #0
 800631a:	e01e      	b.n	800635a <add_item_to_array+0x64>
    }

    child = array->child;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e00d      	b.n	8006358 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff ffc2 	bl	80062d4 <suffix_object>
            array->child->prev = item;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8006358:	2301      	movs	r3, #1
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff ffc1 	bl	80062f6 <add_item_to_array>
 8006374:	4603      	mov	r3, r0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8006386:	687b      	ldr	r3, [r7, #4]
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d009      	beq.n	80063c4 <add_item_to_object+0x30>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d006      	beq.n	80063c4 <add_item_to_object+0x30>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <add_item_to_object+0x30>
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d101      	bne.n	80063c8 <add_item_to_object+0x34>
    {
        return false;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e036      	b.n	8006436 <add_item_to_object+0xa2>
    }

    if (constant_key)
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 80063ce:	68b8      	ldr	r0, [r7, #8]
 80063d0:	f7ff ffd5 	bl	800637e <cast_away_const>
 80063d4:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	e00e      	b.n	8006400 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	68b8      	ldr	r0, [r7, #8]
 80063e6:	f7fe f8fb 	bl	80045e0 <cJSON_strdup>
 80063ea:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <add_item_to_object+0x62>
        {
            return false;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e01f      	b.n	8006436 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063fe:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006408:	2b00      	cmp	r3, #0
 800640a:	d109      	bne.n	8006420 <add_item_to_object+0x8c>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d005      	beq.n	8006420 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6a12      	ldr	r2, [r2, #32]
 800641c:	4610      	mov	r0, r2
 800641e:	4798      	blx	r3
    }

    item->string = new_key;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f7ff ff61 	bl	80062f6 <add_item_to_array>
 8006434:	4603      	mov	r3, r0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 800644c:	2300      	movs	r3, #0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <cJSON_AddItemToObject+0x28>)
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff ff9c 	bl	8006394 <add_item_to_object>
 800645c:	4603      	mov	r3, r0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000048 	.word	0x20000048

0800646c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800647a:	ed97 0b00 	vldr	d0, [r7]
 800647e:	f000 f833 	bl	80064e8 <cJSON_CreateNumber>
 8006482:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8006484:	2300      	movs	r3, #0
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <cJSON_AddNumberToObject+0x44>)
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff ff80 	bl	8006394 <add_item_to_object>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	e003      	b.n	80064a6 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800649e:	6978      	ldr	r0, [r7, #20]
 80064a0:	f7fe f8dc 	bl	800465c <cJSON_Delete>
    return NULL;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000048 	.word	0x20000048

080064b4 <cJSON_CreateBool>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80064bc:	4809      	ldr	r0, [pc, #36]	; (80064e4 <cJSON_CreateBool+0x30>)
 80064be:	f7fe f8b7 	bl	8004630 <cJSON_New_Item>
 80064c2:	60f8      	str	r0, [r7, #12]
    if(item)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <cJSON_CreateBool+0x26>
    {
        item->type = boolean ? cJSON_True : cJSON_False;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <cJSON_CreateBool+0x20>
 80064d0:	2202      	movs	r2, #2
 80064d2:	e000      	b.n	80064d6 <cJSON_CreateBool+0x22>
 80064d4:	2201      	movs	r2, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	60da      	str	r2, [r3, #12]
    }

    return item;
 80064da:	68fb      	ldr	r3, [r7, #12]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000048 	.word	0x20000048

080064e8 <cJSON_CreateNumber>:

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80064f2:	481f      	ldr	r0, [pc, #124]	; (8006570 <cJSON_CreateNumber+0x88>)
 80064f4:	f7fe f89c 	bl	8004630 <cJSON_New_Item>
 80064f8:	60f8      	str	r0, [r7, #12]
    if(item)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d02c      	beq.n	800655a <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2208      	movs	r2, #8
 8006504:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8006506:	68f9      	ldr	r1, [r7, #12]
 8006508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8006510:	a315      	add	r3, pc, #84	; (adr r3, 8006568 <cJSON_CreateNumber+0x80>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800651a:	f7fa fb03 	bl	8000b24 <__aeabi_dcmpge>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d004      	beq.n	800652e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800652a:	615a      	str	r2, [r3, #20]
 800652c:	e015      	b.n	800655a <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	4b10      	ldr	r3, [pc, #64]	; (8006574 <cJSON_CreateNumber+0x8c>)
 8006534:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006538:	f7fa faea 	bl	8000b10 <__aeabi_dcmple>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d004      	beq.n	800654c <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006548:	615a      	str	r2, [r3, #20]
 800654a:	e006      	b.n	800655a <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800654c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006550:	f7fa fb12 	bl	8000b78 <__aeabi_d2iz>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800655a:	68fb      	ldr	r3, [r7, #12]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	f3af 8000 	nop.w
 8006568:	ffc00000 	.word	0xffc00000
 800656c:	41dfffff 	.word	0x41dfffff
 8006570:	20000048 	.word	0x20000048
 8006574:	c1e00000 	.word	0xc1e00000

08006578 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8006580:	480f      	ldr	r0, [pc, #60]	; (80065c0 <cJSON_CreateString+0x48>)
 8006582:	f7fe f855 	bl	8004630 <cJSON_New_Item>
 8006586:	60f8      	str	r0, [r7, #12]
    if(item)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d012      	beq.n	80065b4 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2210      	movs	r2, #16
 8006592:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8006594:	490a      	ldr	r1, [pc, #40]	; (80065c0 <cJSON_CreateString+0x48>)
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fe f822 	bl	80045e0 <cJSON_strdup>
 800659c:	4602      	mov	r2, r0
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7fe f856 	bl	800465c <cJSON_Delete>
            return NULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e000      	b.n	80065b6 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 80065b4:	68fb      	ldr	r3, [r7, #12]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000048 	.word	0x20000048

080065c4 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80065ca:	4807      	ldr	r0, [pc, #28]	; (80065e8 <cJSON_CreateArray+0x24>)
 80065cc:	f7fe f830 	bl	8004630 <cJSON_New_Item>
 80065d0:	6078      	str	r0, [r7, #4]
    if(item)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	60da      	str	r2, [r3, #12]
    }

    return item;
 80065de:	687b      	ldr	r3, [r7, #4]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20000048 	.word	0x20000048

080065ec <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80065f2:	4807      	ldr	r0, [pc, #28]	; (8006610 <cJSON_CreateObject+0x24>)
 80065f4:	f7fe f81c 	bl	8004630 <cJSON_New_Item>
 80065f8:	6078      	str	r0, [r7, #4]
    if (item)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2240      	movs	r2, #64	; 0x40
 8006604:	60da      	str	r2, [r3, #12]
    }

    return item;
 8006606:	687b      	ldr	r3, [r7, #4]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000048 	.word	0x20000048

08006614 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <cJSON_IsNumber+0x12>
    {
        return false;
 8006622:	2300      	movs	r3, #0
 8006624:	e007      	b.n	8006636 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b08      	cmp	r3, #8
 800662e:	bf0c      	ite	eq
 8006630:	2301      	moveq	r3, #1
 8006632:	2300      	movne	r3, #0
 8006634:	b2db      	uxtb	r3, r3
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "../../Lib/MQTT/MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	601a      	str	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <getNextPacketId+0x1c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3301      	adds	r3, #1
 8006680:	e000      	b.n	8006684 <getNextPacketId+0x1e>
 8006682:	2301      	movs	r3, #1
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8006698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80066a4:	f04f 33ff 	mov.w	r3, #4294967295
 80066a8:	617b      	str	r3, [r7, #20]
        sent = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80066ae:	e018      	b.n	80066e2 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b4:	689c      	ldr	r4, [r3, #8]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	18d6      	adds	r6, r2, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fdd8 	bl	8007278 <TimerLeftMS>
 80066c8:	4603      	mov	r3, r0
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4631      	mov	r1, r6
 80066ce:	4628      	mov	r0, r5
 80066d0:	47a0      	blx	r4
 80066d2:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	db0e      	blt.n	80066f8 <sendPacket+0x60>
            break;
        sent += rc;
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	4413      	add	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	da07      	bge.n	80066fa <sendPacket+0x62>
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fd82 	bl	80071f4 <TimerIsExpired>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0dc      	beq.n	80066b0 <sendPacket+0x18>
 80066f6:	e000      	b.n	80066fa <sendPacket+0x62>
            break;
 80066f8:	bf00      	nop
    }
    if (sent == length)
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d10b      	bne.n	800671a <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f000 fd9a 	bl	8007248 <TimerCountdown>
        rc = SUCCESSS;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e002      	b.n	8006720 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 800671a:	f04f 33ff 	mov.w	r3, #4294967295
 800671e:	617b      	str	r3, [r7, #20]
    return rc;
 8006720:	697b      	ldr	r3, [r7, #20]
}
 8006722:	4618      	mov	r0, r3
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800672a <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b086      	sub	sp, #24
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	e009      	b.n	8006758 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	3304      	adds	r3, #4
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	4413      	add	r3, r2
 800674e:	2200      	movs	r2, #0
 8006750:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	3301      	adds	r3, #1
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2b04      	cmp	r3, #4
 800675c:	ddf2      	ble.n	8006744 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a3a      	ldr	r2, [r7, #32]
 800676e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006774:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3354      	adds	r3, #84	; 0x54
 8006798:	4618      	mov	r0, r3
 800679a:	f000 fd1d 	bl	80071d8 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 800679e:	bf00      	nop
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 80067a6:	b590      	push	{r4, r7, lr}
 80067a8:	b08b      	sub	sp, #44	; 0x2c
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 80067b2:	2301      	movs	r3, #1
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 80067ba:	2304      	movs	r3, #4
 80067bc:	61fb      	str	r3, [r7, #28]

    *value = 0;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 80067c4:	f04f 33ff 	mov.w	r3, #4294967295
 80067c8:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	3301      	adds	r3, #1
 80067ce:	623b      	str	r3, [r7, #32]
 80067d0:	6a3a      	ldr	r2, [r7, #32]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	dd03      	ble.n	80067e0 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80067d8:	f04f 33ff 	mov.w	r3, #4294967295
 80067dc:	61bb      	str	r3, [r7, #24]
            goto exit;
 80067de:	e021      	b.n	8006824 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e4:	685c      	ldr	r4, [r3, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80067ea:	f107 0117 	add.w	r1, r7, #23
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	47a0      	blx	r4
 80067f4:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d112      	bne.n	8006822 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006808:	fb01 f303 	mul.w	r3, r1, r3
 800680c:	441a      	add	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	01db      	lsls	r3, r3, #7
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8006818:	7dfb      	ldrb	r3, [r7, #23]
 800681a:	b25b      	sxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	dbd1      	blt.n	80067c4 <decodePacket+0x1e>
exit:
 8006820:	e000      	b.n	8006824 <decodePacket+0x7e>
            goto exit;
 8006822:	bf00      	nop
    return len;
 8006824:	6a3b      	ldr	r3, [r7, #32]
}
 8006826:	4618      	mov	r0, r3
 8006828:	372c      	adds	r7, #44	; 0x2c
 800682a:	46bd      	mov	sp, r7
 800682c:	bd90      	pop	{r4, r7, pc}

0800682e <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800682e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006830:	b089      	sub	sp, #36	; 0x24
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8006838:	f04f 33ff 	mov.w	r3, #4294967295
 800683c:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]
    int len = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684e:	685c      	ldr	r4, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	695e      	ldr	r6, [r3, #20]
 8006858:	68b8      	ldr	r0, [r7, #8]
 800685a:	f000 fd0d 	bl	8007278 <TimerLeftMS>
 800685e:	4603      	mov	r3, r0
 8006860:	2201      	movs	r2, #1
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47a0      	blx	r4
 8006868:	4603      	mov	r3, r0
 800686a:	2b01      	cmp	r3, #1
 800686c:	d13b      	bne.n	80068e6 <readPacket+0xb8>
        goto exit;

    len = 1;
 800686e:	2301      	movs	r3, #1
 8006870:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8006872:	68b8      	ldr	r0, [r7, #8]
 8006874:	f000 fd00 	bl	8007278 <TimerLeftMS>
 8006878:	4602      	mov	r2, r0
 800687a:	f107 0310 	add.w	r3, r7, #16
 800687e:	4619      	mov	r1, r3
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f7ff ff90 	bl	80067a6 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	3301      	adds	r3, #1
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4611      	mov	r1, r2
 8006890:	4618      	mov	r0, r3
 8006892:	f001 f865 	bl	8007960 <MQTTPacket_encode>
 8006896:	4602      	mov	r2, r0
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	4413      	add	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dd16      	ble.n	80068d2 <readPacket+0xa4>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a8:	685c      	ldr	r4, [r3, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	695a      	ldr	r2, [r3, #20]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	18d6      	adds	r6, r2, r3
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	68b8      	ldr	r0, [r7, #8]
 80068bc:	f000 fcdc 	bl	8007278 <TimerLeftMS>
 80068c0:	4603      	mov	r3, r0
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47a0      	blx	r4
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d10b      	bne.n	80068ea <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80068da:	7d3b      	ldrb	r3, [r7, #20]
 80068dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	61fb      	str	r3, [r7, #28]
 80068e4:	e002      	b.n	80068ec <readPacket+0xbe>
        goto exit;
 80068e6:	bf00      	nop
 80068e8:	e000      	b.n	80068ec <readPacket+0xbe>
        goto exit;
 80068ea:	bf00      	nop
exit:
    return rc;
 80068ec:	69fb      	ldr	r3, [r7, #28]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3724      	adds	r7, #36	; 0x24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068f6 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b087      	sub	sp, #28
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	461a      	mov	r2, r3
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4413      	add	r3, r2
 8006914:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8006916:	e039      	b.n	800698c <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b2f      	cmp	r3, #47	; 0x2f
 800691e:	d103      	bne.n	8006928 <isTopicMatched+0x32>
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b2f      	cmp	r3, #47	; 0x2f
 8006926:	d13a      	bne.n	800699e <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b2b      	cmp	r3, #43	; 0x2b
 800692e:	d009      	beq.n	8006944 <isTopicMatched+0x4e>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b23      	cmp	r3, #35	; 0x23
 8006936:	d005      	beq.n	8006944 <isTopicMatched+0x4e>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	781a      	ldrb	r2, [r3, #0]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d12e      	bne.n	80069a2 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b2b      	cmp	r3, #43	; 0x2b
 800694a:	d112      	bne.n	8006972 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	3301      	adds	r3, #1
 8006950:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8006952:	e005      	b.n	8006960 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	3301      	adds	r3, #1
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	3301      	adds	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	429a      	cmp	r2, r3
 8006966:	d20b      	bcs.n	8006980 <isTopicMatched+0x8a>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b2f      	cmp	r3, #47	; 0x2f
 800696e:	d1f1      	bne.n	8006954 <isTopicMatched+0x5e>
 8006970:	e006      	b.n	8006980 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b23      	cmp	r3, #35	; 0x23
 8006978:	d102      	bne.n	8006980 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	3b01      	subs	r3, #1
 800697e:	613b      	str	r3, [r7, #16]
        curf++;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3301      	adds	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
        curn++;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	3301      	adds	r3, #1
 800698a:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <isTopicMatched+0xae>
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	429a      	cmp	r2, r3
 800699a:	d3bd      	bcc.n	8006918 <isTopicMatched+0x22>
 800699c:	e002      	b.n	80069a4 <isTopicMatched+0xae>
            break;
 800699e:	bf00      	nop
 80069a0:	e000      	b.n	80069a4 <isTopicMatched+0xae>
            break;
 80069a2:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d105      	bne.n	80069b8 <isTopicMatched+0xc2>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <isTopicMatched+0xc2>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <isTopicMatched+0xc4>
 80069b8:	2300      	movs	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
}
 80069bc:	4618      	mov	r0, r3
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 80069d4:	f04f 33ff 	mov.w	r3, #4294967295
 80069d8:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80069da:	2300      	movs	r3, #0
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
 80069de:	e03f      	b.n	8006a60 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	3304      	adds	r3, #4
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4413      	add	r3, r2
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d034      	beq.n	8006a5a <deliverMessage+0x92>
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	3304      	adds	r3, #4
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4413      	add	r3, r2
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	4619      	mov	r1, r3
 80069fe:	68b8      	ldr	r0, [r7, #8]
 8006a00:	f001 f97e 	bl	8007d00 <MQTTPacket_equals>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10c      	bne.n	8006a24 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	3304      	adds	r3, #4
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	4413      	add	r3, r2
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff ff6c 	bl	80068f6 <isTopicMatched>
 8006a1e:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01a      	beq.n	8006a5a <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	3304      	adds	r3, #4
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d012      	beq.n	8006a5a <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8006a34:	f107 0318 	add.w	r3, r7, #24
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff fe00 	bl	8006642 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	3304      	adds	r3, #4
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	4413      	add	r3, r2
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f107 0218 	add.w	r2, r7, #24
 8006a52:	4610      	mov	r0, r2
 8006a54:	4798      	blx	r3
                rc = SUCCESSS;
 8006a56:	2300      	movs	r3, #0
 8006a58:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	ddbc      	ble.n	80069e0 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d112      	bne.n	8006a94 <deliverMessage+0xcc>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00e      	beq.n	8006a94 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8006a76:	f107 0310 	add.w	r3, r7, #16
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fddf 	bl	8006642 <NewMessageData>
        c->defaultMessageHandler(&md);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a88:	f107 0210 	add.w	r2, r7, #16
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4798      	blx	r3
        rc = SUCCESSS;
 8006a90:	2300      	movs	r3, #0
 8006a92:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8006a94:	6a3b      	ldr	r3, [r7, #32]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3728      	adds	r7, #40	; 0x28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <keepalive>:


int keepalive(MQTTClient* c)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b086      	sub	sp, #24
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8006aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aaa:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]
        goto exit;
 8006ab8:	e033      	b.n	8006b22 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3354      	adds	r3, #84	; 0x54
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fb98 	bl	80071f4 <TimerIsExpired>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d02a      	beq.n	8006b20 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	7f1b      	ldrb	r3, [r3, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d126      	bne.n	8006b20 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8006ad2:	f107 0308 	add.w	r3, r7, #8
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fb7e 	bl	80071d8 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8006adc:	f107 0308 	add.w	r3, r7, #8
 8006ae0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fb9b 	bl	8007220 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691a      	ldr	r2, [r3, #16]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	4619      	mov	r1, r3
 8006af4:	4610      	mov	r0, r2
 8006af6:	f000 fe67 	bl	80077c8 <MQTTSerialize_pingreq>
 8006afa:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dd0f      	ble.n	8006b22 <keepalive+0x84>
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	461a      	mov	r2, r3
 8006b08:	6939      	ldr	r1, [r7, #16]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff fdc4 	bl	8006698 <sendPacket>
 8006b10:	6178      	str	r0, [r7, #20]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d104      	bne.n	8006b22 <keepalive+0x84>
                c->ping_outstanding = 1;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	771a      	strb	r2, [r3, #28]
 8006b1e:	e000      	b.n	8006b22 <keepalive+0x84>
        }
    }

exit:
 8006b20:	bf00      	nop
    return rc;
 8006b22:	697b      	ldr	r3, [r7, #20]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8006b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2e:	b095      	sub	sp, #84	; 0x54
 8006b30:	af06      	add	r7, sp, #24
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff fe78 	bl	800682e <readPacket>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8006b42:	2300      	movs	r3, #0
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8006b46:	2300      	movs	r3, #0
 8006b48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8006b4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b4c:	3b02      	subs	r3, #2
 8006b4e:	2b0b      	cmp	r3, #11
 8006b50:	f200 80c0 	bhi.w	8006cd4 <cycle+0x1a8>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <cycle+0x30>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006cd5 	.word	0x08006cd5
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	08006cd5 	.word	0x08006cd5
 8006b68:	08006c55 	.word	0x08006c55
 8006b6c:	08006cd5 	.word	0x08006cd5
 8006b70:	08006cd5 	.word	0x08006cd5
 8006b74:	08006cd5 	.word	0x08006cd5
 8006b78:	08006cd5 	.word	0x08006cd5
 8006b7c:	08006cd5 	.word	0x08006cd5
 8006b80:	08006cd5 	.word	0x08006cd5
 8006b84:	08006cd5 	.word	0x08006cd5
 8006b88:	08006cc7 	.word	0x08006cc7
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8006b94:	4616      	mov	r6, r2
 8006b96:	f107 0210 	add.w	r2, r7, #16
 8006b9a:	1d15      	adds	r5, r2, #4
 8006b9c:	f107 0210 	add.w	r2, r7, #16
 8006ba0:	1c54      	adds	r4, r2, #1
 8006ba2:	f107 010c 	add.w	r1, r7, #12
 8006ba6:	f107 0210 	add.w	r2, r7, #16
 8006baa:	1c90      	adds	r0, r2, #2
 8006bac:	9604      	str	r6, [sp, #16]
 8006bae:	9303      	str	r3, [sp, #12]
 8006bb0:	f107 0310 	add.w	r3, r7, #16
 8006bb4:	330c      	adds	r3, #12
 8006bb6:	9302      	str	r3, [sp, #8]
 8006bb8:	f107 0310 	add.w	r3, r7, #16
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	f107 0320 	add.w	r3, r7, #32
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	4622      	mov	r2, r4
 8006bca:	f000 fe0c 	bl	80077e6 <MQTTDeserialize_publish>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	f040 8083 	bne.w	8006cdc <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8006bdc:	f107 0210 	add.w	r2, r7, #16
 8006be0:	f107 0320 	add.w	r3, r7, #32
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff feee 	bl	80069c8 <deliverMessage>
            if (msg.qos != QOS0)
 8006bec:	7c3b      	ldrb	r3, [r7, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d06d      	beq.n	8006cce <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8006bf2:	7c3b      	ldrb	r3, [r7, #16]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d10c      	bne.n	8006c12 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6918      	ldr	r0, [r3, #16]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	4619      	mov	r1, r3
 8006c02:	8abb      	ldrh	r3, [r7, #20]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2300      	movs	r3, #0
 8006c08:	2204      	movs	r2, #4
 8006c0a:	f001 f946 	bl	8007e9a <MQTTSerialize_ack>
 8006c0e:	6378      	str	r0, [r7, #52]	; 0x34
 8006c10:	e00e      	b.n	8006c30 <cycle+0x104>
                else if (msg.qos == QOS2)
 8006c12:	7c3b      	ldrb	r3, [r7, #16]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d10b      	bne.n	8006c30 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6918      	ldr	r0, [r3, #16]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4619      	mov	r1, r3
 8006c22:	8abb      	ldrh	r3, [r7, #20]
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2300      	movs	r3, #0
 8006c28:	2205      	movs	r2, #5
 8006c2a:	f001 f936 	bl	8007e9a <MQTTSerialize_ack>
 8006c2e:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	dc03      	bgt.n	8006c3e <cycle+0x112>
                    rc = FAILURE;
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3c:	e005      	b.n	8006c4a <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fd28 	bl	8006698 <sendPacket>
 8006c48:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d13d      	bne.n	8006cce <cycle+0x1a2>
                    goto exit; // there was a problem
 8006c52:	e044      	b.n	8006cde <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695c      	ldr	r4, [r3, #20]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f107 020a 	add.w	r2, r7, #10
 8006c60:	f107 0109 	add.w	r1, r7, #9
 8006c64:	f107 0008 	add.w	r0, r7, #8
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4623      	mov	r3, r4
 8006c6c:	f000 fe2d 	bl	80078ca <MQTTDeserialize_ack>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d003      	beq.n	8006c7e <cycle+0x152>
                rc = FAILURE;
 8006c76:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c7c:	e01e      	b.n	8006cbc <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6918      	ldr	r0, [r3, #16]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	4619      	mov	r1, r3
 8006c88:	897b      	ldrh	r3, [r7, #10]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	2206      	movs	r2, #6
 8006c90:	f001 f903 	bl	8007e9a <MQTTSerialize_ack>
 8006c94:	6378      	str	r0, [r7, #52]	; 0x34
 8006c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	dc03      	bgt.n	8006ca4 <cycle+0x178>
                rc = FAILURE;
 8006c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ca2:	e00b      	b.n	8006cbc <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff fcf5 	bl	8006698 <sendPacket>
 8006cae:	6338      	str	r0, [r7, #48]	; 0x30
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <cycle+0x190>
                rc = FAILURE; // there was a problem
 8006cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cba:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d106      	bne.n	8006cd2 <cycle+0x1a6>
                goto exit; // there was a problem
 8006cc4:	e00b      	b.n	8006cde <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
            break;
 8006ccc:	e002      	b.n	8006cd4 <cycle+0x1a8>
            break;
 8006cce:	bf00      	nop
 8006cd0:	e000      	b.n	8006cd4 <cycle+0x1a8>
            break;
 8006cd2:	bf00      	nop
    }
    keepalive(c);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff fee2 	bl	8006a9e <keepalive>
 8006cda:	e000      	b.n	8006cde <cycle+0x1b2>
                goto exit;
 8006cdc:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <cycle+0x1bc>
        rc = packet_type;
 8006ce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ce6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	373c      	adds	r7, #60	; 0x3c
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf2:	bf00      	nop

08006cf4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8006d02:	f107 030c 	add.w	r3, r7, #12
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fa66 	bl	80071d8 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	f107 030c 	add.w	r3, r7, #12
 8006d12:	4611      	mov	r1, r2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 fa83 	bl	8007220 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 8006d1a:	f107 030c 	add.w	r3, r7, #12
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff ff03 	bl	8006b2c <cycle>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d102      	bne.n	8006d34 <MQTTYield+0x40>
    {
        rc = FAILURE;
 8006d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d32:	617b      	str	r3, [r7, #20]
    }

    return rc;
 8006d34:	697b      	ldr	r3, [r7, #20]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa4f 	bl	80071f4 <TimerIsExpired>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d109      	bne.n	8006d70 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f7ff fee4 	bl	8006b2c <cycle>
 8006d64:	6178      	str	r0, [r7, #20]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d1f0      	bne.n	8006d50 <waitfor+0x12>
 8006d6e:	e000      	b.n	8006d72 <waitfor+0x34>
            break; // we timed out
 8006d70:	bf00      	nop

    return rc;
 8006d72:	697b      	ldr	r3, [r7, #20]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b09e      	sub	sp, #120	; 0x78
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8006d86:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8006d8c:	4a3d      	ldr	r2, [pc, #244]	; (8006e84 <MQTTConnect+0x108>)
 8006d8e:	f107 0310 	add.w	r3, r7, #16
 8006d92:	4611      	mov	r1, r2
 8006d94:	2258      	movs	r2, #88	; 0x58
 8006d96:	4618      	mov	r0, r3
 8006d98:	f009 fe7d 	bl	8010a96 <memcpy>
    int len = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d15d      	bne.n	8006e64 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8006da8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fa13 	bl	80071d8 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006dba:	4611      	mov	r1, r2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fa2f 	bl	8007220 <TimerCountdownMS>

    if (options == 0)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8006dc8:	f107 0310 	add.w	r3, r7, #16
 8006dcc:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	8b1b      	ldrh	r3, [r3, #24]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	4619      	mov	r1, r3
 8006de4:	4610      	mov	r0, r2
 8006de6:	f000 fa2f 	bl	8007248 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6918      	ldr	r0, [r3, #16]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4619      	mov	r1, r3
 8006df6:	f000 fb5f 	bl	80074b8 <MQTTSerialize_connect>
 8006dfa:	6738      	str	r0, [r7, #112]	; 0x70
 8006dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	dd32      	ble.n	8006e68 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 8006e02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006e06:	461a      	mov	r2, r3
 8006e08:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff fc44 	bl	8006698 <sendPacket>
 8006e10:	6778      	str	r0, [r7, #116]	; 0x74
 8006e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d129      	bne.n	8006e6c <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8006e18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	2102      	movs	r1, #2
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff ff8c 	bl	8006d3e <waitfor>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d117      	bne.n	8006e5c <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 8006e2c:	23ff      	movs	r3, #255	; 0xff
 8006e2e:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695a      	ldr	r2, [r3, #20]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f107 010f 	add.w	r1, r7, #15
 8006e40:	f107 000e 	add.w	r0, r7, #14
 8006e44:	f000 fc24 	bl	8007690 <MQTTDeserialize_connack>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d102      	bne.n	8006e54 <MQTTConnect+0xd8>
            rc = connack_rc;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	677b      	str	r3, [r7, #116]	; 0x74
 8006e52:	e00c      	b.n	8006e6e <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8006e54:	f04f 33ff 	mov.w	r3, #4294967295
 8006e58:	677b      	str	r3, [r7, #116]	; 0x74
 8006e5a:	e008      	b.n	8006e6e <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e60:	677b      	str	r3, [r7, #116]	; 0x74
 8006e62:	e004      	b.n	8006e6e <MQTTConnect+0xf2>
		goto exit;
 8006e64:	bf00      	nop
 8006e66:	e002      	b.n	8006e6e <MQTTConnect+0xf2>
        goto exit;
 8006e68:	bf00      	nop
 8006e6a:	e000      	b.n	8006e6e <MQTTConnect+0xf2>
        goto exit; // there was a problem
 8006e6c:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 8006e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <MQTTConnect+0xfe>
        c->isconnected = 1;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 8006e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3778      	adds	r7, #120	; 0x78
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	08013198 	.word	0x08013198

08006e88 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8006e88:	b5b0      	push	{r4, r5, r7, lr}
 8006e8a:	b094      	sub	sp, #80	; 0x50
 8006e8c:	af04      	add	r7, sp, #16
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	4613      	mov	r3, r2
 8006e96:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8006e98:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	623b      	str	r3, [r7, #32]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eaa:	2300      	movs	r3, #0
 8006eac:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 8083 	beq.w	8006fc6 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 8006ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 f987 	bl	80071d8 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 f9a3 	bl	8007220 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	691c      	ldr	r4, [r3, #16]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	461d      	mov	r5, r3
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff fbbe 	bl	8006666 <getNextPacketId>
 8006eea:	4603      	mov	r3, r0
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	f107 031f 	add.w	r3, r7, #31
 8006ef2:	9302      	str	r3, [sp, #8]
 8006ef4:	f107 0320 	add.w	r3, r7, #32
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	2301      	movs	r3, #1
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	4613      	mov	r3, r2
 8006f00:	2200      	movs	r2, #0
 8006f02:	4629      	mov	r1, r5
 8006f04:	4620      	mov	r0, r4
 8006f06:	f001 f844 	bl	8007f92 <MQTTSerialize_subscribe>
 8006f0a:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	dd5b      	ble.n	8006fca <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8006f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f16:	461a      	mov	r2, r3
 8006f18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff fbbc 	bl	8006698 <sendPacket>
 8006f20:	63f8      	str	r0, [r7, #60]	; 0x3c
 8006f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d152      	bne.n	8006fce <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8006f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	2109      	movs	r1, #9
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff ff04 	bl	8006d3e <waitfor>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b09      	cmp	r3, #9
 8006f3a:	d140      	bne.n	8006fbe <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295
 8006f44:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	68d2      	ldr	r2, [r2, #12]
 8006f4e:	4614      	mov	r4, r2
 8006f50:	f107 0114 	add.w	r1, r7, #20
 8006f54:	f107 0218 	add.w	r2, r7, #24
 8006f58:	f107 0012 	add.w	r0, r7, #18
 8006f5c:	9401      	str	r4, [sp, #4]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	460b      	mov	r3, r1
 8006f62:	2101      	movs	r1, #1
 8006f64:	f001 f88f 	bl	8008086 <MQTTDeserialize_suback>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d101      	bne.n	8006f72 <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 8006f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f74:	2b80      	cmp	r3, #128	; 0x80
 8006f76:	d02b      	beq.n	8006fd0 <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f7c:	e01b      	b.n	8006fb6 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	3304      	adds	r3, #4
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	4413      	add	r3, r2
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d110      	bne.n	8006fb0 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	3304      	adds	r3, #4
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	4413      	add	r3, r2
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	4413      	add	r3, r2
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	609a      	str	r2, [r3, #8]
                    rc = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006fae:	e00f      	b.n	8006fd0 <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	dde0      	ble.n	8006f7e <MQTTSubscribe+0xf6>
 8006fbc:	e008      	b.n	8006fd0 <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fc4:	e004      	b.n	8006fd0 <MQTTSubscribe+0x148>
		goto exit;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <MQTTSubscribe+0x148>
        goto exit;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 8006fce:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8006fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3740      	adds	r7, #64	; 0x40
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bdb0      	pop	{r4, r5, r7, pc}

08006fda <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8006fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fdc:	b097      	sub	sp, #92	; 0x5c
 8006fde:	af08      	add	r7, sp, #32
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8006fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8006fec:	2300      	movs	r3, #0
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	623b      	str	r3, [r7, #32]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 809b 	beq.w	8007140 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 800700a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800700e:	4618      	mov	r0, r3
 8007010:	f000 f8e2 	bl	80071d8 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f8fe 	bl	8007220 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d003      	beq.n	8007034 <MQTTPublish+0x5a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d106      	bne.n	8007042 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff fb16 	bl	8006666 <getNextPacketId>
 800703a:	4603      	mov	r3, r0
 800703c:	b29a      	uxth	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	469c      	mov	ip, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	469e      	mov	lr, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	785d      	ldrb	r5, [r3, #1]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8007064:	9206      	str	r2, [sp, #24]
 8007066:	9305      	str	r3, [sp, #20]
 8007068:	ac02      	add	r4, sp, #8
 800706a:	f107 031c 	add.w	r3, r7, #28
 800706e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007072:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007076:	9601      	str	r6, [sp, #4]
 8007078:	9500      	str	r5, [sp, #0]
 800707a:	4673      	mov	r3, lr
 800707c:	2200      	movs	r2, #0
 800707e:	4661      	mov	r1, ip
 8007080:	6838      	ldr	r0, [r7, #0]
 8007082:	f000 fe94 	bl	8007dae <MQTTSerialize_publish>
 8007086:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	2b00      	cmp	r3, #0
 800708c:	dd5a      	ble.n	8007144 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800708e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007092:	461a      	mov	r2, r3
 8007094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f7ff fafe 	bl	8006698 <sendPacket>
 800709c:	6378      	str	r0, [r7, #52]	; 0x34
 800709e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d151      	bne.n	8007148 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d122      	bne.n	80070f2 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80070ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070b0:	461a      	mov	r2, r3
 80070b2:	2104      	movs	r1, #4
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7ff fe42 	bl	8006d3e <waitfor>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d114      	bne.n	80070ea <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	695c      	ldr	r4, [r3, #20]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f107 021a 	add.w	r2, r7, #26
 80070cc:	f107 0119 	add.w	r1, r7, #25
 80070d0:	f107 0018 	add.w	r0, r7, #24
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	4623      	mov	r3, r4
 80070d8:	f000 fbf7 	bl	80078ca <MQTTDeserialize_ack>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d035      	beq.n	800714e <MQTTPublish+0x174>
                rc = FAILURE;
 80070e2:	f04f 33ff 	mov.w	r3, #4294967295
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
 80070e8:	e031      	b.n	800714e <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80070ea:	f04f 33ff 	mov.w	r3, #4294967295
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
 80070f0:	e02d      	b.n	800714e <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d128      	bne.n	800714c <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 80070fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070fe:	461a      	mov	r2, r3
 8007100:	2107      	movs	r1, #7
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fe1b 	bl	8006d3e <waitfor>
 8007108:	4603      	mov	r3, r0
 800710a:	2b07      	cmp	r3, #7
 800710c:	d114      	bne.n	8007138 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	695c      	ldr	r4, [r3, #20]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f107 0216 	add.w	r2, r7, #22
 800711a:	f107 0115 	add.w	r1, r7, #21
 800711e:	f107 0014 	add.w	r0, r7, #20
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	4623      	mov	r3, r4
 8007126:	f000 fbd0 	bl	80078ca <MQTTDeserialize_ack>
 800712a:	4603      	mov	r3, r0
 800712c:	2b01      	cmp	r3, #1
 800712e:	d00e      	beq.n	800714e <MQTTPublish+0x174>
                rc = FAILURE;
 8007130:	f04f 33ff 	mov.w	r3, #4294967295
 8007134:	637b      	str	r3, [r7, #52]	; 0x34
 8007136:	e00a      	b.n	800714e <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8007138:	f04f 33ff 	mov.w	r3, #4294967295
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
 800713e:	e006      	b.n	800714e <MQTTPublish+0x174>
		goto exit;
 8007140:	bf00      	nop
 8007142:	e004      	b.n	800714e <MQTTPublish+0x174>
        goto exit;
 8007144:	bf00      	nop
 8007146:	e002      	b.n	800714e <MQTTPublish+0x174>
        goto exit; // there was a problem
 8007148:	bf00      	nop
 800714a:	e000      	b.n	800714e <MQTTPublish+0x174>
    }

exit:
 800714c:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007150:	4618      	mov	r0, r3
 8007152:	373c      	adds	r7, #60	; 0x3c
 8007154:	46bd      	mov	sp, r7
 8007156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007158 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8007160:	f04f 33ff 	mov.w	r3, #4294967295
 8007164:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 800716a:	f107 0308 	add.w	r3, r7, #8
 800716e:	4618      	mov	r0, r3
 8007170:	f000 f832 	bl	80071d8 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	f107 0308 	add.w	r3, r7, #8
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f000 f84e 	bl	8007220 <TimerCountdownMS>

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4619      	mov	r1, r3
 800718e:	4610      	mov	r0, r2
 8007190:	f000 fb0b 	bl	80077aa <MQTTSerialize_disconnect>
 8007194:	6138      	str	r0, [r7, #16]
    if (len > 0)
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	dd07      	ble.n	80071ac <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 800719c:	f107 0308 	add.w	r3, r7, #8
 80071a0:	461a      	mov	r2, r3
 80071a2:	6939      	ldr	r1, [r7, #16]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff fa77 	bl	8006698 <sendPacket>
 80071aa:	6178      	str	r0, [r7, #20]

    c->isconnected = 0;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80071b2:	697b      	ldr	r3, [r7, #20]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
	MilliTimer++;
 80071c0:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <MilliTimer_Handler+0x18>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	4a03      	ldr	r2, [pc, #12]	; (80071d4 <MilliTimer_Handler+0x18>)
 80071c8:	6013      	str	r3, [r2, #0]
}
 80071ca:	bf00      	nop
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	200002b0 	.word	0x200002b0

080071d8 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	605a      	str	r2, [r3, #4]
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
	...

080071f4 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <TimerIsExpired+0x28>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	0fdb      	lsrs	r3, r3, #31
 800720c:	b2db      	uxtb	r3, r3
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	200002b0 	.word	0x200002b0

08007220 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800722a:	4b06      	ldr	r3, [pc, #24]	; (8007244 <TimerCountdownMS+0x24>)
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	441a      	add	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	605a      	str	r2, [r3, #4]
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	200002b0 	.word	0x200002b0

08007248 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007258:	fb03 f202 	mul.w	r2, r3, r2
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <TimerCountdown+0x2c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	441a      	add	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	605a      	str	r2, [r3, #4]
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	200002b0 	.word	0x200002b0

08007278 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <TimerLeftMS+0x28>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	200002b0 	.word	0x200002b0

080072a4 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a07      	ldr	r2, [pc, #28]	; (80072d4 <NewNetwork+0x30>)
 80072b8:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a06      	ldr	r2, [pc, #24]	; (80072d8 <NewNetwork+0x34>)
 80072be:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a06      	ldr	r2, [pc, #24]	; (80072dc <NewNetwork+0x38>)
 80072c4:	60da      	str	r2, [r3, #12]
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	080072e1 	.word	0x080072e1
 80072d8:	0800733b 	.word	0x0800733b
 80072dc:	08007383 	.word	0x08007383

080072e0 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	3301      	adds	r3, #1
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fb f9b7 	bl	8002670 <WIZCHIP_READ>
 8007302:	4603      	mov	r3, r0
 8007304:	2b17      	cmp	r3, #23
 8007306:	d113      	bne.n	8007330 <w5x00_read+0x50>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	4618      	mov	r0, r3
 8007310:	f7fb fb53 	bl	80029ba <getSn_RX_RSR>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	b292      	uxth	r2, r2
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	4618      	mov	r0, r3
 8007328:	f7fc f860 	bl	80033ec <recv>
 800732c:	4603      	mov	r3, r0
 800732e:	e000      	b.n	8007332 <w5x00_read+0x52>

	return SOCK_ERROR;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	3301      	adds	r3, #1
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007356:	4618      	mov	r0, r3
 8007358:	f7fb f98a 	bl	8002670 <WIZCHIP_READ>
 800735c:	4603      	mov	r3, r0
 800735e:	2b17      	cmp	r3, #23
 8007360:	d10a      	bne.n	8007378 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	b292      	uxth	r2, r2
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	4618      	mov	r0, r3
 8007370:	f7fb ff42 	bl	80031f8 <send>
 8007374:	4603      	mov	r3, r0
 8007376:	e000      	b.n	800737a <w5x00_write+0x40>

	return SOCK_ERROR;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	4618      	mov	r0, r3
 8007392:	f7fb febb 	bl	800310c <disconnect>
}
 8007396:	bf00      	nop
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	4613      	mov	r3, r2
 80073aa:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 80073ac:	f243 0339 	movw	r3, #12345	; 0x3039
 80073b0:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	b2d8      	uxtb	r0, r3
 80073b8:	8afa      	ldrh	r2, [r7, #22]
 80073ba:	2300      	movs	r3, #0
 80073bc:	2101      	movs	r1, #1
 80073be:	f7fb fc47 	bl	8002c50 <socket>
 80073c2:	4603      	mov	r3, r0
 80073c4:	461a      	mov	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d001      	beq.n	80073d2 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e00d      	b.n	80073ee <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fb fdb9 	bl	8002f54 <connect>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d001      	beq.n	80073ec <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e000      	b.n	80073ee <ConnectNetwork+0x50>

	return SOCK_OK;
 80073ec:	2301      	movs	r3, #1
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80073f6:	b590      	push	{r4, r7, lr}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
	int len = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	7a1b      	ldrb	r3, [r3, #8]
 8007406:	2b03      	cmp	r3, #3
 8007408:	d102      	bne.n	8007410 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800740a:	230c      	movs	r3, #12
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	e005      	b.n	800741c <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	7a1b      	ldrb	r3, [r3, #8]
 8007414:	2b04      	cmp	r3, #4
 8007416:	d101      	bne.n	800741c <MQTTSerialize_connectLength+0x26>
		len = 10;
 8007418:	230a      	movs	r3, #10
 800741a:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	330c      	adds	r3, #12
 8007420:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007424:	f000 fc53 	bl	8007cce <MQTTstrlen>
 8007428:	4603      	mov	r3, r0
 800742a:	3302      	adds	r3, #2
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	7edb      	ldrb	r3, [r3, #27]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d013      	beq.n	8007462 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3324      	adds	r3, #36	; 0x24
 800743e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007442:	f000 fc44 	bl	8007cce <MQTTstrlen>
 8007446:	4603      	mov	r3, r0
 8007448:	1c9c      	adds	r4, r3, #2
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3330      	adds	r3, #48	; 0x30
 800744e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007452:	f000 fc3c 	bl	8007cce <MQTTstrlen>
 8007456:	4603      	mov	r3, r0
 8007458:	4423      	add	r3, r4
 800745a:	3302      	adds	r3, #2
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	d103      	bne.n	8007472 <MQTTSerialize_connectLength+0x7c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3340      	adds	r3, #64	; 0x40
 8007476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800747a:	f000 fc28 	bl	8007cce <MQTTstrlen>
 800747e:	4603      	mov	r3, r0
 8007480:	3302      	adds	r3, #2
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4413      	add	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d103      	bne.n	8007498 <MQTTSerialize_connectLength+0xa2>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00a      	beq.n	80074ae <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	334c      	adds	r3, #76	; 0x4c
 800749c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074a0:	f000 fc15 	bl	8007cce <MQTTstrlen>
 80074a4:	4603      	mov	r3, r0
 80074a6:	3302      	adds	r3, #2
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 80074ae:	68fb      	ldr	r3, [r7, #12]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd90      	pop	{r4, r7, pc}

080074b8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08a      	sub	sp, #40	; 0x28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80074c8:	2300      	movs	r3, #0
 80074ca:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]
	int len = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff ff8b 	bl	80073f6 <MQTTSerialize_connectLength>
 80074e0:	6238      	str	r0, [r7, #32]
 80074e2:	6a38      	ldr	r0, [r7, #32]
 80074e4:	f000 faa8 	bl	8007a38 <MQTTPacket_len>
 80074e8:	4602      	mov	r2, r0
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	4293      	cmp	r3, r2
 80074ee:	da03      	bge.n	80074f8 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80074f0:	f06f 0301 	mvn.w	r3, #1
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80074f6:	e0c2      	b.n	800767e <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80074fc:	7e3b      	ldrb	r3, [r7, #24]
 80074fe:	2201      	movs	r2, #1
 8007500:	f362 1307 	bfi	r3, r2, #4, #4
 8007504:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8007506:	7e3a      	ldrb	r2, [r7, #24]
 8007508:	f107 031c 	add.w	r3, r7, #28
 800750c:	4611      	mov	r1, r2
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fb21 	bl	8007b56 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	6a39      	ldr	r1, [r7, #32]
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fa21 	bl	8007960 <MQTTPacket_encode>
 800751e:	4602      	mov	r2, r0
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	7a1b      	ldrb	r3, [r3, #8]
 800752a:	2b04      	cmp	r3, #4
 800752c:	d10c      	bne.n	8007548 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800752e:	f107 031c 	add.w	r3, r7, #28
 8007532:	4955      	ldr	r1, [pc, #340]	; (8007688 <MQTTSerialize_connect+0x1d0>)
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fb4c 	bl	8007bd2 <writeCString>
		writeChar(&ptr, (char) 4);
 800753a:	f107 031c 	add.w	r3, r7, #28
 800753e:	2104      	movs	r1, #4
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fb08 	bl	8007b56 <writeChar>
 8007546:	e00b      	b.n	8007560 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8007548:	f107 031c 	add.w	r3, r7, #28
 800754c:	494f      	ldr	r1, [pc, #316]	; (800768c <MQTTSerialize_connect+0x1d4>)
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fb3f 	bl	8007bd2 <writeCString>
		writeChar(&ptr, (char) 3);
 8007554:	f107 031c 	add.w	r3, r7, #28
 8007558:	2103      	movs	r1, #3
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fafb 	bl	8007b56 <writeChar>
	}

	flags.all = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	7e9b      	ldrb	r3, [r3, #26]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	b2da      	uxtb	r2, r3
 800756e:	7d3b      	ldrb	r3, [r7, #20]
 8007570:	f362 0341 	bfi	r3, r2, #1, #1
 8007574:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	7edb      	ldrb	r3, [r3, #27]
 800757a:	2b00      	cmp	r3, #0
 800757c:	bf14      	ite	ne
 800757e:	2301      	movne	r3, #1
 8007580:	2300      	moveq	r3, #0
 8007582:	b2da      	uxtb	r2, r3
 8007584:	7d3b      	ldrb	r3, [r7, #20]
 8007586:	f362 0382 	bfi	r3, r2, #2, #1
 800758a:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800758c:	7d3b      	ldrb	r3, [r7, #20]
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d013      	beq.n	80075c0 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	7d3b      	ldrb	r3, [r7, #20]
 80075a6:	f362 03c4 	bfi	r3, r2, #3, #2
 80075aa:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	7d3b      	ldrb	r3, [r7, #20]
 80075ba:	f362 1345 	bfi	r3, r2, #5, #1
 80075be:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d103      	bne.n	80075d0 <MQTTSerialize_connect+0x118>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80075d0:	7d3b      	ldrb	r3, [r7, #20]
 80075d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d6:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <MQTTSerialize_connect+0x130>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80075e8:	7d3b      	ldrb	r3, [r7, #20]
 80075ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ee:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80075f0:	7d3a      	ldrb	r2, [r7, #20]
 80075f2:	f107 031c 	add.w	r3, r7, #28
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 faac 	bl	8007b56 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8b1b      	ldrh	r3, [r3, #24]
 8007602:	461a      	mov	r2, r3
 8007604:	f107 031c 	add.w	r3, r7, #28
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fab8 	bl	8007b80 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f107 001c 	add.w	r0, r7, #28
 8007616:	330c      	adds	r3, #12
 8007618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800761a:	f000 faf9 	bl	8007c10 <writeMQTTString>
	if (options->willFlag)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7edb      	ldrb	r3, [r3, #27]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00d      	beq.n	8007642 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f107 001c 	add.w	r0, r7, #28
 800762c:	3324      	adds	r3, #36	; 0x24
 800762e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007630:	f000 faee 	bl	8007c10 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f107 001c 	add.w	r0, r7, #28
 800763a:	3330      	adds	r3, #48	; 0x30
 800763c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800763e:	f000 fae7 	bl	8007c10 <writeMQTTString>
	}
	if (flags.bits.username)
 8007642:	7d3b      	ldrb	r3, [r7, #20]
 8007644:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d006      	beq.n	800765c <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f107 001c 	add.w	r0, r7, #28
 8007654:	3340      	adds	r3, #64	; 0x40
 8007656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007658:	f000 fada 	bl	8007c10 <writeMQTTString>
	if (flags.bits.password)
 800765c:	7d3b      	ldrb	r3, [r7, #20]
 800765e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d006      	beq.n	8007676 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f107 001c 	add.w	r0, r7, #28
 800766e:	334c      	adds	r3, #76	; 0x4c
 8007670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007672:	f000 facd 	bl	8007c10 <writeMQTTString>

	rc = ptr - buf;
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007680:	4618      	mov	r0, r3
 8007682:	3728      	adds	r7, #40	; 0x28
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	080131f0 	.word	0x080131f0
 800768c:	080131f8 	.word	0x080131f8

08007690 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08a      	sub	sp, #40	; 0x28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80076b2:	f107 0318 	add.w	r3, r7, #24
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fa39 	bl	8007b2e <readChar>
 80076bc:	4603      	mov	r3, r0
 80076be:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 80076c0:	7f3b      	ldrb	r3, [r7, #28]
 80076c2:	f023 030f 	bic.w	r3, r3, #15
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d12e      	bne.n	800772a <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	f107 0214 	add.w	r2, r7, #20
 80076d2:	4611      	mov	r1, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 f9f9 	bl	8007acc <MQTTPacket_decodeBuf>
 80076da:	6278      	str	r0, [r7, #36]	; 0x24
 80076dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	4413      	add	r3, r2
 80076e2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4413      	add	r3, r2
 80076ea:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	6a3a      	ldr	r2, [r7, #32]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	dd1b      	ble.n	800772e <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 80076f6:	f107 0318 	add.w	r3, r7, #24
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fa17 	bl	8007b2e <readChar>
 8007700:	4603      	mov	r3, r0
 8007702:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8007704:	7c3b      	ldrb	r3, [r7, #16]
 8007706:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800770a:	b2db      	uxtb	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8007712:	f107 0318 	add.w	r3, r7, #24
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fa09 	bl	8007b2e <readChar>
 800771c:	4603      	mov	r3, r0
 800771e:	461a      	mov	r2, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8007724:	2301      	movs	r3, #1
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
 8007728:	e002      	b.n	8007730 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800772a:	bf00      	nop
 800772c:	e000      	b.n	8007730 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800772e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007732:	4618      	mov	r0, r3
 8007734:	3728      	adds	r7, #40	; 0x28
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b088      	sub	sp, #32
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	4613      	mov	r3, r2
 8007746:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8007748:	2300      	movs	r3, #0
 800774a:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800774c:	f04f 33ff 	mov.w	r3, #4294967295
 8007750:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b01      	cmp	r3, #1
 800775a:	dc03      	bgt.n	8007764 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800775c:	f06f 0301 	mvn.w	r3, #1
 8007760:	61fb      	str	r3, [r7, #28]
		goto exit;
 8007762:	e01d      	b.n	80077a0 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	b2da      	uxtb	r2, r3
 8007770:	7e3b      	ldrb	r3, [r7, #24]
 8007772:	f362 1307 	bfi	r3, r2, #4, #4
 8007776:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8007778:	7e3a      	ldrb	r2, [r7, #24]
 800777a:	f107 0314 	add.w	r3, r7, #20
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f000 f9e8 	bl	8007b56 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f8e8 	bl	8007960 <MQTTPacket_encode>
 8007790:	4602      	mov	r2, r0
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	4413      	add	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80077a0:	69fb      	ldr	r3, [r7, #28]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3720      	adds	r7, #32
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 80077b4:	220e      	movs	r2, #14
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff ffbe 	bl	800773a <MQTTSerialize_zero>
 80077be:	4603      	mov	r3, r0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 80077d2:	220c      	movs	r2, #12
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff ffaf 	bl	800773a <MQTTSerialize_zero>
 80077dc:	4603      	mov	r3, r0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b08a      	sub	sp, #40	; 0x28
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
 80077f2:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80077f4:	2300      	movs	r3, #0
 80077f6:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80077f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fa:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8007808:	f107 0318 	add.w	r3, r7, #24
 800780c:	4618      	mov	r0, r3
 800780e:	f000 f98e 	bl	8007b2e <readChar>
 8007812:	4603      	mov	r3, r0
 8007814:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8007816:	7f3b      	ldrb	r3, [r7, #28]
 8007818:	f023 030f 	bic.w	r3, r3, #15
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b30      	cmp	r3, #48	; 0x30
 8007820:	d14b      	bne.n	80078ba <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8007822:	7f3b      	ldrb	r3, [r7, #28]
 8007824:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007828:	b2db      	uxtb	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8007830:	7f3b      	ldrb	r3, [r7, #28]
 8007832:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8007836:	b2db      	uxtb	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800783e:	7f3b      	ldrb	r3, [r7, #28]
 8007840:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007844:	b2db      	uxtb	r3, r3
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f107 0214 	add.w	r2, r7, #20
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f000 f939 	bl	8007acc <MQTTPacket_decodeBuf>
 800785a:	6278      	str	r0, [r7, #36]	; 0x24
 800785c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	4413      	add	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	4413      	add	r3, r2
 800786a:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800786c:	f107 0318 	add.w	r3, r7, #24
 8007870:	6a3a      	ldr	r2, [r7, #32]
 8007872:	4619      	mov	r1, r3
 8007874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007876:	f000 f9f9 	bl	8007c6c <readMQTTLenString>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01e      	beq.n	80078be <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	6a3a      	ldr	r2, [r7, #32]
 8007884:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8007886:	2b00      	cmp	r3, #0
 8007888:	db19      	blt.n	80078be <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	dd08      	ble.n	80078a4 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8007892:	f107 0318 	add.w	r3, r7, #24
 8007896:	4618      	mov	r0, r3
 8007898:	f000 f92e 	bl	8007af8 <readInt>
 800789c:	4603      	mov	r3, r0
 800789e:	b29a      	uxth	r2, r3
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	6a3a      	ldr	r2, [r7, #32]
 80078a8:	1ad2      	subs	r2, r2, r3
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	601a      	str	r2, [r3, #0]
	rc = 1;
 80078b4:	2301      	movs	r3, #1
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
 80078b8:	e002      	b.n	80078c0 <MQTTDeserialize_publish+0xda>
		goto exit;
 80078ba:	bf00      	nop
 80078bc:	e000      	b.n	80078c0 <MQTTDeserialize_publish+0xda>
		goto exit;
 80078be:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3728      	adds	r7, #40	; 0x28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b08a      	sub	sp, #40	; 0x28
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	60b9      	str	r1, [r7, #8]
 80078d4:	607a      	str	r2, [r7, #4]
 80078d6:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80078d8:	2300      	movs	r3, #0
 80078da:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80078e8:	f107 0318 	add.w	r3, r7, #24
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 f91e 	bl	8007b2e <readChar>
 80078f2:	4603      	mov	r3, r0
 80078f4:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 80078f6:	7f3b      	ldrb	r3, [r7, #28]
 80078f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8007904:	7f3b      	ldrb	r3, [r7, #28]
 8007906:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800790a:	b2db      	uxtb	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	f107 0214 	add.w	r2, r7, #20
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f000 f8d6 	bl	8007acc <MQTTPacket_decodeBuf>
 8007920:	6278      	str	r0, [r7, #36]	; 0x24
 8007922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	4413      	add	r3, r2
 8007928:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	4413      	add	r3, r2
 8007930:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	6a3a      	ldr	r2, [r7, #32]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	dd0b      	ble.n	8007954 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800793c:	f107 0318 	add.w	r3, r7, #24
 8007940:	4618      	mov	r0, r3
 8007942:	f000 f8d9 	bl	8007af8 <readInt>
 8007946:	4603      	mov	r3, r0
 8007948:	b29a      	uxth	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800794e:	2301      	movs	r3, #1
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
 8007952:	e000      	b.n	8007956 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8007954:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007958:	4618      	mov	r0, r3
 800795a:	3728      	adds	r7, #40	; 0x28
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	425a      	negs	r2, r3
 8007972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800797a:	bf58      	it	pl
 800797c:	4253      	negpl	r3, r2
 800797e:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	da00      	bge.n	8007988 <MQTTPacket_encode+0x28>
 8007986:	337f      	adds	r3, #127	; 0x7f
 8007988:	11db      	asrs	r3, r3, #7
 800798a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	dd03      	ble.n	800799a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007998:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	60fa      	str	r2, [r7, #12]
 80079a0:	461a      	mov	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4413      	add	r3, r2
 80079a6:	7afa      	ldrb	r2, [r7, #11]
 80079a8:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dcde      	bgt.n	800796e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80079b0:	68fb      	ldr	r3, [r7, #12]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b086      	sub	sp, #24
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 80079c8:	2301      	movs	r3, #1
 80079ca:	617b      	str	r3, [r7, #20]
	int len = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80079d6:	f04f 33ff 	mov.w	r3, #4294967295
 80079da:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	3301      	adds	r3, #1
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	dd03      	ble.n	80079f0 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ec:	60fb      	str	r3, [r7, #12]
			goto exit;
 80079ee:	e01d      	b.n	8007a2c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 80079f0:	f107 020b 	add.w	r2, r7, #11
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2101      	movs	r1, #1
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d112      	bne.n	8007a2a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0e:	6979      	ldr	r1, [r7, #20]
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	441a      	add	r2, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	01db      	lsls	r3, r3, #7
 8007a1e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8007a20:	7afb      	ldrb	r3, [r7, #11]
 8007a22:	b25b      	sxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dbd6      	blt.n	80079d6 <MQTTPacket_decode+0x18>
exit:
 8007a28:	e000      	b.n	8007a2c <MQTTPacket_decode+0x6e>
			goto exit;
 8007a2a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8007a2c:	693b      	ldr	r3, [r7, #16]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3301      	adds	r3, #1
 8007a44:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b7f      	cmp	r3, #127	; 0x7f
 8007a4a:	dc03      	bgt.n	8007a54 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	607b      	str	r3, [r7, #4]
 8007a52:	e012      	b.n	8007a7a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a5a:	da03      	bge.n	8007a64 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3302      	adds	r3, #2
 8007a60:	607b      	str	r3, [r7, #4]
 8007a62:	e00a      	b.n	8007a7a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a08      	ldr	r2, [pc, #32]	; (8007a88 <MQTTPacket_len+0x50>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	dc03      	bgt.n	8007a74 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3303      	adds	r3, #3
 8007a70:	607b      	str	r3, [r7, #4]
 8007a72:	e002      	b.n	8007a7a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3304      	adds	r3, #4
 8007a78:	607b      	str	r3, [r7, #4]
	return rem_len;
 8007a7a:	687b      	ldr	r3, [r7, #4]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	001ffffe 	.word	0x001ffffe

08007a8c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	e00a      	b.n	8007ab2 <bufchar+0x26>
		*c = *bufptr++;
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ac8 <bufchar+0x3c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	4909      	ldr	r1, [pc, #36]	; (8007ac8 <bufchar+0x3c>)
 8007aa4:	600a      	str	r2, [r1, #0]
 8007aa6:	781a      	ldrb	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	dbf0      	blt.n	8007a9c <bufchar+0x10>
	return count;
 8007aba:	683b      	ldr	r3, [r7, #0]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	200002b4 	.word	0x200002b4

08007acc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8007ad6:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <MQTTPacket_decodeBuf+0x24>)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	4805      	ldr	r0, [pc, #20]	; (8007af4 <MQTTPacket_decodeBuf+0x28>)
 8007ae0:	f7ff ff6d 	bl	80079be <MQTTPacket_decode>
 8007ae4:	4603      	mov	r3, r0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	200002b4 	.word	0x200002b4
 8007af4:	08007a8d 	.word	0x08007a8d

08007af8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	3201      	adds	r2, #1
 8007b10:	7812      	ldrb	r2, [r2, #0]
 8007b12:	4413      	add	r3, r2
 8007b14:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	1c9a      	adds	r2, r3, #2
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
	return len;
 8007b20:	68bb      	ldr	r3, [r7, #8]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	601a      	str	r2, [r3, #0]
	return c;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da00      	bge.n	8007b92 <writeInt+0x12>
 8007b90:	33ff      	adds	r3, #255	; 0xff
 8007b92:	121b      	asrs	r3, r3, #8
 8007b94:	461a      	mov	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	425a      	negs	r2, r3
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	bf58      	it	pl
 8007bb2:	4253      	negpl	r3, r2
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	6812      	ldr	r2, [r2, #0]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	601a      	str	r2, [r3, #0]
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8007bdc:	6838      	ldr	r0, [r7, #0]
 8007bde:	f7f8 fb57 	bl	8000290 <strlen>
 8007be2:	4603      	mov	r3, r0
 8007be4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff ffc9 	bl	8007b80 <writeInt>
	memcpy(*pptr, string, len);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f008 ff4d 	bl	8010a96 <memcpy>
	*pptr += len;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	441a      	add	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]
}
 8007c08:	bf00      	nop
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	4638      	mov	r0, r7
 8007c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dd12      	ble.n	8007c4a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4619      	mov	r1, r3
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff ffa9 	bl	8007b80 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f008 ff2d 	bl	8010a96 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	441a      	add	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8007c48:	e00c      	b.n	8007c64 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	4619      	mov	r1, r3
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff ffbc 	bl	8007bd2 <writeCString>
}
 8007c5a:	e003      	b.n	8007c64 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7ff ff8e 	bl	8007b80 <writeInt>
}
 8007c64:	bf00      	nop
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	dd1a      	ble.n	8007cbe <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8007c88:	68b8      	ldr	r0, [r7, #8]
 8007c8a:	f7ff ff35 	bl	8007af8 <readInt>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	6852      	ldr	r2, [r2, #4]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d30c      	bcc.n	8007cbe <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	6852      	ldr	r2, [r2, #4]
 8007cb4:	441a      	add	r2, r3
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	601a      	str	r2, [r3, #0]
			rc = 1;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8007cc4:	697b      	ldr	r3, [r7, #20]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b086      	sub	sp, #24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	1d3b      	adds	r3, r7, #4
 8007cd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d006      	beq.n	8007cf2 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7f8 fad2 	bl	8000290 <strlen>
 8007cec:	4603      	mov	r3, r0
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	e001      	b.n	8007cf6 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	617b      	str	r3, [r7, #20]
	return rc;
 8007cf6:	697b      	ldr	r3, [r7, #20]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
		blen = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7f8 fab3 	bl	8000290 <strlen>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	e005      	b.n	8007d3c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8007d3c:	6838      	ldr	r0, [r7, #0]
 8007d3e:	f7f8 faa7 	bl	8000290 <strlen>
 8007d42:	4603      	mov	r3, r0
 8007d44:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d10a      	bne.n	8007d64 <MQTTPacket_equals+0x64>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6938      	ldr	r0, [r7, #16]
 8007d56:	f008 fdc4 	bl	80108e2 <strncmp>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <MQTTPacket_equals+0x64>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <MQTTPacket_equals+0x66>
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b086      	sub	sp, #24
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	4638      	mov	r0, r7
 8007d78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8007d80:	463b      	mov	r3, r7
 8007d82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d86:	f7ff ffa2 	bl	8007cce <MQTTstrlen>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	1c9a      	adds	r2, r3, #2
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	4413      	add	r3, r2
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	4413      	add	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	dd02      	ble.n	8007da4 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	3302      	adds	r3, #2
 8007da2:	617b      	str	r3, [r7, #20]
	return len;
 8007da4:	697b      	ldr	r3, [r7, #20]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b08a      	sub	sp, #40	; 0x28
 8007db2:	af02      	add	r7, sp, #8
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	603b      	str	r3, [r7, #0]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8007dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dd8:	6838      	ldr	r0, [r7, #0]
 8007dda:	f7ff ffc8 	bl	8007d6e <MQTTSerialize_publishLength>
 8007dde:	61b8      	str	r0, [r7, #24]
 8007de0:	69b8      	ldr	r0, [r7, #24]
 8007de2:	f7ff fe29 	bl	8007a38 <MQTTPacket_len>
 8007de6:	4602      	mov	r2, r0
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4293      	cmp	r3, r2
 8007dec:	da03      	bge.n	8007df6 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007dee:	f06f 0301 	mvn.w	r3, #1
 8007df2:	61fb      	str	r3, [r7, #28]
		goto exit;
 8007df4:	e04c      	b.n	8007e90 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8007df6:	7c3b      	ldrb	r3, [r7, #16]
 8007df8:	2203      	movs	r2, #3
 8007dfa:	f362 1307 	bfi	r3, r2, #4, #4
 8007dfe:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	7c3b      	ldrb	r3, [r7, #16]
 8007e0a:	f362 03c3 	bfi	r3, r2, #3, #1
 8007e0e:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f003 0303 	and.w	r3, r3, #3
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	7c3b      	ldrb	r3, [r7, #16]
 8007e1a:	f362 0342 	bfi	r3, r2, #1, #2
 8007e1e:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8007e20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	7c3b      	ldrb	r3, [r7, #16]
 8007e2c:	f362 0300 	bfi	r3, r2, #0, #1
 8007e30:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8007e32:	7c3a      	ldrb	r2, [r7, #16]
 8007e34:	f107 0314 	add.w	r3, r7, #20
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7ff fe8b 	bl	8007b56 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	69b9      	ldr	r1, [r7, #24]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff fd8b 	bl	8007960 <MQTTPacket_encode>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	4413      	add	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8007e52:	f107 0014 	add.w	r0, r7, #20
 8007e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e5c:	f7ff fed8 	bl	8007c10 <writeMQTTString>

	if (qos > 0)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dd06      	ble.n	8007e74 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8007e66:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fe86 	bl	8007b80 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f008 fe0b 	bl	8010a96 <memcpy>
	ptr += payloadlen;
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e84:	4413      	add	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007e90:	69fb      	ldr	r3, [r7, #28]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b088      	sub	sp, #32
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	71fb      	strb	r3, [r7, #7]
 8007eac:	4613      	mov	r3, r2
 8007eae:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	dc03      	bgt.n	8007eca <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007ec2:	f06f 0301 	mvn.w	r3, #1
 8007ec6:	61fb      	str	r3, [r7, #28]
		goto exit;
 8007ec8:	e037      	b.n	8007f3a <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	f003 030f 	and.w	r3, r3, #15
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	7e3b      	ldrb	r3, [r7, #24]
 8007ed4:	f362 1307 	bfi	r3, r2, #4, #4
 8007ed8:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8007eda:	79bb      	ldrb	r3, [r7, #6]
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	7e3b      	ldrb	r3, [r7, #24]
 8007ee4:	f362 03c3 	bfi	r3, r2, #3, #1
 8007ee8:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	2b06      	cmp	r3, #6
 8007eee:	bf0c      	ite	eq
 8007ef0:	2301      	moveq	r3, #1
 8007ef2:	2300      	movne	r3, #0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	7e3b      	ldrb	r3, [r7, #24]
 8007efe:	f362 0342 	bfi	r3, r2, #1, #2
 8007f02:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8007f04:	7e3a      	ldrb	r2, [r7, #24]
 8007f06:	f107 0314 	add.w	r3, r7, #20
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fe22 	bl	8007b56 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2102      	movs	r1, #2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff fd22 	bl	8007960 <MQTTPacket_encode>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	4413      	add	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8007f24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007f26:	f107 0314 	add.w	r3, r7, #20
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fe27 	bl	8007b80 <writeInt>
	rc = ptr - buf;
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8007f4e:	2302      	movs	r3, #2
 8007f50:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	e013      	b.n	8007f80 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	461a      	mov	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	4413      	add	r3, r2
 8007f68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f6c:	f7ff feaf 	bl	8007cce <MQTTstrlen>
 8007f70:	4603      	mov	r3, r0
 8007f72:	3303      	adds	r3, #3
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	4413      	add	r3, r2
 8007f78:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	dbe7      	blt.n	8007f58 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8007f88:	68bb      	ldr	r3, [r7, #8]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b08a      	sub	sp, #40	; 0x28
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	60f8      	str	r0, [r7, #12]
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	71fb      	strb	r3, [r7, #7]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8007fbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fc0:	f7ff ffc0 	bl	8007f44 <MQTTSerialize_subscribeLength>
 8007fc4:	61f8      	str	r0, [r7, #28]
 8007fc6:	69f8      	ldr	r0, [r7, #28]
 8007fc8:	f7ff fd36 	bl	8007a38 <MQTTPacket_len>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	da03      	bge.n	8007fdc <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007fd4:	f06f 0301 	mvn.w	r3, #1
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8007fda:	e04f      	b.n	800807c <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8007fe0:	7d3b      	ldrb	r3, [r7, #20]
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	f362 1307 	bfi	r3, r2, #4, #4
 8007fe8:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	7d3b      	ldrb	r3, [r7, #20]
 8007ff4:	f362 03c3 	bfi	r3, r2, #3, #1
 8007ff8:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8007ffa:	7d3b      	ldrb	r3, [r7, #20]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f362 0342 	bfi	r3, r2, #1, #2
 8008002:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8008004:	7d3a      	ldrb	r2, [r7, #20]
 8008006:	f107 0318 	add.w	r3, r7, #24
 800800a:	4611      	mov	r1, r2
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff fda2 	bl	8007b56 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	69f9      	ldr	r1, [r7, #28]
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff fca2 	bl	8007960 <MQTTPacket_encode>
 800801c:	4602      	mov	r2, r0
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	4413      	add	r3, r2
 8008022:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8008024:	88ba      	ldrh	r2, [r7, #4]
 8008026:	f107 0318 	add.w	r3, r7, #24
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f7ff fda7 	bl	8007b80 <writeInt>

	for (i = 0; i < count; ++i)
 8008032:	2300      	movs	r3, #0
 8008034:	623b      	str	r3, [r7, #32]
 8008036:	e019      	b.n	800806c <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8008038:	6a3a      	ldr	r2, [r7, #32]
 800803a:	4613      	mov	r3, r2
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	461a      	mov	r2, r3
 8008044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008046:	4413      	add	r3, r2
 8008048:	f107 0018 	add.w	r0, r7, #24
 800804c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800804e:	f7ff fddf 	bl	8007c10 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008056:	4413      	add	r3, r2
 8008058:	781a      	ldrb	r2, [r3, #0]
 800805a:	f107 0318 	add.w	r3, r7, #24
 800805e:	4611      	mov	r1, r2
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff fd78 	bl	8007b56 <writeChar>
	for (i = 0; i < count; ++i)
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	3301      	adds	r3, #1
 800806a:	623b      	str	r3, [r7, #32]
 800806c:	6a3a      	ldr	r2, [r7, #32]
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	429a      	cmp	r2, r3
 8008072:	dbe1      	blt.n	8008038 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800807e:	4618      	mov	r0, r3
 8008080:	3728      	adds	r7, #40	; 0x28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b08a      	sub	sp, #40	; 0x28
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8008094:	2300      	movs	r3, #0
 8008096:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800809c:	2300      	movs	r3, #0
 800809e:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80080a4:	f107 0318 	add.w	r3, r7, #24
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fd40 	bl	8007b2e <readChar>
 80080ae:	4603      	mov	r3, r0
 80080b0:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 80080b2:	7f3b      	ldrb	r3, [r7, #28]
 80080b4:	f023 030f 	bic.w	r3, r3, #15
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b90      	cmp	r3, #144	; 0x90
 80080bc:	d142      	bne.n	8008144 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	f107 0214 	add.w	r2, r7, #20
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff fd00 	bl	8007acc <MQTTPacket_decodeBuf>
 80080cc:	6278      	str	r0, [r7, #36]	; 0x24
 80080ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	4413      	add	r3, r2
 80080d4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4413      	add	r3, r2
 80080dc:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	6a3a      	ldr	r2, [r7, #32]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	dd2f      	ble.n	8008148 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 80080e8:	f107 0318 	add.w	r3, r7, #24
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff fd03 	bl	8007af8 <readInt>
 80080f2:	4603      	mov	r3, r0
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	801a      	strh	r2, [r3, #0]

	*count = 0;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8008100:	e019      	b.n	8008136 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	429a      	cmp	r2, r3
 800810a:	da03      	bge.n	8008114 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 800810c:	f04f 33ff 	mov.w	r3, #4294967295
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 8008112:	e01a      	b.n	800814a <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8008114:	f107 0318 	add.w	r3, r7, #24
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff fd08 	bl	8007b2e <readChar>
 800811e:	4603      	mov	r3, r0
 8008120:	4618      	mov	r0, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	1c59      	adds	r1, r3, #1
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	6011      	str	r1, [r2, #0]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	4413      	add	r3, r2
 8008132:	4602      	mov	r2, r0
 8008134:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	6a3a      	ldr	r2, [r7, #32]
 800813a:	429a      	cmp	r2, r3
 800813c:	d8e1      	bhi.n	8008102 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800813e:	2301      	movs	r3, #1
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
 8008142:	e002      	b.n	800814a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8008144:	bf00      	nop
 8008146:	e000      	b.n	800814a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8008148:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800814c:	4618      	mov	r0, r3
 800814e:	3728      	adds	r7, #40	; 0x28
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <_ZN14CircularBufferC1Ev>:
// CircularBuffer.cpp
#include "CircularBuffer.h"

CircularBuffer::CircularBuffer() : head(0), tail(0) {}
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <_ZN5UtilsC1Ev>:


void printdata(const char* fmt, ...);


Utils::Utils(){}
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4618      	mov	r0, r3
 8008186:	f000 ff7b 	bl	8009080 <_ZN6ConfigC1Ev>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  Nm  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 8008194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2507      	movs	r5, #7
 80081a2:	683c      	ldr	r4, [r7, #0]
 80081a4:	461e      	mov	r6, r3
 80081a6:	e006      	b.n	80081b6 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_+0x22>
 80081a8:	4621      	mov	r1, r4
 80081aa:	4630      	mov	r0, r6
 80081ac:	f007 f91e 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80081b0:	3618      	adds	r6, #24
 80081b2:	3418      	adds	r4, #24
 80081b4:	3d01      	subs	r5, #1
 80081b6:	2d00      	cmp	r5, #0
 80081b8:	daf6      	bge.n	80081a8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_+0x14>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081c4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_>:
 80081c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	250f      	movs	r5, #15
 80081d2:	683c      	ldr	r4, [r7, #0]
 80081d4:	461e      	mov	r6, r3
 80081d6:	e006      	b.n	80081e6 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_+0x22>
 80081d8:	4621      	mov	r1, r4
 80081da:	4630      	mov	r0, r6
 80081dc:	f007 f906 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80081e0:	3618      	adds	r6, #24
 80081e2:	3418      	adds	r4, #24
 80081e4:	3d01      	subs	r5, #1
 80081e6:	2d00      	cmp	r5, #0
 80081e8:	daf6      	bge.n	80081d8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_+0x14>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081f4 <_ZN6ConfigaSERKS_>:
}
constexpr size_t MAX_ANALOG_INPUTS = 8;
constexpr size_t MAX_DIGITAL_INPUTS = 16;
constexpr size_t MAX_DIGITAL_OUTPUTS = 8;

class Config {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	6812      	ldr	r2, [r2, #0]
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	889a      	ldrh	r2, [r3, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	809a      	strh	r2, [r3, #4]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	3306      	adds	r3, #6
 8008214:	3206      	adds	r2, #6
 8008216:	6812      	ldr	r2, [r2, #0]
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	330a      	adds	r3, #10
 8008220:	320a      	adds	r2, #10
 8008222:	6812      	ldr	r2, [r2, #0]
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	330e      	adds	r3, #14
 800822c:	320e      	adds	r2, #14
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	3312      	adds	r3, #18
 8008238:	3212      	adds	r2, #18
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	8ada      	ldrh	r2, [r3, #22]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	82da      	strh	r2, [r3, #22]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	7e1a      	ldrb	r2, [r3, #24]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	761a      	strb	r2, [r3, #24]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	69da      	ldr	r2, [r3, #28]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	61da      	str	r2, [r3, #28]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f103 0220 	add.w	r2, r3, #32
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	3320      	adds	r3, #32
 8008260:	4619      	mov	r1, r3
 8008262:	4610      	mov	r0, r2
 8008264:	f007 f8c2 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	3338      	adds	r3, #56	; 0x38
 8008272:	4619      	mov	r1, r3
 8008274:	4610      	mov	r0, r2
 8008276:	f007 f8b9 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	3350      	adds	r3, #80	; 0x50
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f007 f8b0 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	3368      	adds	r3, #104	; 0x68
 8008296:	4619      	mov	r1, r3
 8008298:	4610      	mov	r0, r2
 800829a:	f007 f8a7 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	3380      	adds	r3, #128	; 0x80
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f007 f89e 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	339c      	adds	r3, #156	; 0x9c
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f7ff ff63 	bl	8008194 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f7ff ff71 	bl	80081c4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f503 7237 	add.w	r2, r3, #732	; 0x2dc
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80082ee:	4619      	mov	r1, r3
 80082f0:	4610      	mov	r0, r2
 80082f2:	f7ff ff4f 	bl	8008194 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <_ZN5Utils4initEP6Config>:

void Utils::init(Config* config){
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
	conf = *config;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff ff70 	bl	80081f4 <_ZN6ConfigaSERKS_>

	switches[0] = {GPIOE, GPIO_PIN_12}; // switch1
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a61      	ldr	r2, [pc, #388]	; (800849c <_ZN5Utils4initEP6Config+0x19c>)
 8008318:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800831c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008320:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[1] = {GPIOE, GPIO_PIN_13}; // switch2
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a5e      	ldr	r2, [pc, #376]	; (80084a0 <_ZN5Utils4initEP6Config+0x1a0>)
 8008328:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800832c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008330:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[2] = {GPIOE, GPIO_PIN_14}; // switch3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a5b      	ldr	r2, [pc, #364]	; (80084a4 <_ZN5Utils4initEP6Config+0x1a4>)
 8008338:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 800833c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008340:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[3] = {GPIOE, GPIO_PIN_15}; // switch4
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a58      	ldr	r2, [pc, #352]	; (80084a8 <_ZN5Utils4initEP6Config+0x1a8>)
 8008348:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 800834c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008350:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[4] = {GPIOA, GPIO_PIN_4};  // switch5
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a55      	ldr	r2, [pc, #340]	; (80084ac <_ZN5Utils4initEP6Config+0x1ac>)
 8008358:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800835c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008360:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[5] = {GPIOA, GPIO_PIN_5};  // switch6
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a52      	ldr	r2, [pc, #328]	; (80084b0 <_ZN5Utils4initEP6Config+0x1b0>)
 8008368:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800836c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008370:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[6] = {GPIOA, GPIO_PIN_6};  // switch7
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a4f      	ldr	r2, [pc, #316]	; (80084b4 <_ZN5Utils4initEP6Config+0x1b4>)
 8008378:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 800837c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008380:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[7] = {GPIOA, GPIO_PIN_7};  // switch8
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a4c      	ldr	r2, [pc, #304]	; (80084b8 <_ZN5Utils4initEP6Config+0x1b8>)
 8008388:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 800838c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008390:	e883 0003 	stmia.w	r3, {r0, r1}


    digitalInputs[0] = {GPIOC, GPIO_PIN_0};   // DI1
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a49      	ldr	r2, [pc, #292]	; (80084bc <_ZN5Utils4initEP6Config+0x1bc>)
 8008398:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 800839c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083a0:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[1] = {GPIOC, GPIO_PIN_1};   // DI2
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a46      	ldr	r2, [pc, #280]	; (80084c0 <_ZN5Utils4initEP6Config+0x1c0>)
 80083a8:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80083ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083b0:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[2] = {GPIOC, GPIO_PIN_2};   // DI3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a43      	ldr	r2, [pc, #268]	; (80084c4 <_ZN5Utils4initEP6Config+0x1c4>)
 80083b8:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80083bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083c0:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[3] = {GPIOC, GPIO_PIN_3};   // DI4
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a40      	ldr	r2, [pc, #256]	; (80084c8 <_ZN5Utils4initEP6Config+0x1c8>)
 80083c8:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80083cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083d0:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[4] = {GPIOD, GPIO_PIN_8};   // DI5
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a3d      	ldr	r2, [pc, #244]	; (80084cc <_ZN5Utils4initEP6Config+0x1cc>)
 80083d8:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80083dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083e0:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[5] = {GPIOD, GPIO_PIN_9};   // DI6
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a3a      	ldr	r2, [pc, #232]	; (80084d0 <_ZN5Utils4initEP6Config+0x1d0>)
 80083e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083f0:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[6] = {GPIOD, GPIO_PIN_10};  // DI7
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a37      	ldr	r2, [pc, #220]	; (80084d4 <_ZN5Utils4initEP6Config+0x1d4>)
 80083f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008400:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[7] = {GPIOD, GPIO_PIN_13};  // DI8
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a34      	ldr	r2, [pc, #208]	; (80084d8 <_ZN5Utils4initEP6Config+0x1d8>)
 8008408:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800840c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008410:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[8] = {GPIOC, GPIO_PIN_6};   // DI9
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a31      	ldr	r2, [pc, #196]	; (80084dc <_ZN5Utils4initEP6Config+0x1dc>)
 8008418:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800841c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008420:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[9] = {GPIOC, GPIO_PIN_7};   // DI10
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a2e      	ldr	r2, [pc, #184]	; (80084e0 <_ZN5Utils4initEP6Config+0x1e0>)
 8008428:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800842c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008430:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[10] = {GPIOC, GPIO_PIN_8};  // DI11
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a2b      	ldr	r2, [pc, #172]	; (80084e4 <_ZN5Utils4initEP6Config+0x1e4>)
 8008438:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800843c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008440:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[11] = {GPIOC, GPIO_PIN_9};  // DI12
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a28      	ldr	r2, [pc, #160]	; (80084e8 <_ZN5Utils4initEP6Config+0x1e8>)
 8008448:	f203 4334 	addw	r3, r3, #1076	; 0x434
 800844c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008450:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[12] = {GPIOA, GPIO_PIN_8};  // DI13
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a25      	ldr	r2, [pc, #148]	; (80084ec <_ZN5Utils4initEP6Config+0x1ec>)
 8008458:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800845c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008460:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[13] = {GPIOA, GPIO_PIN_9};  // DI14
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a22      	ldr	r2, [pc, #136]	; (80084f0 <_ZN5Utils4initEP6Config+0x1f0>)
 8008468:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800846c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008470:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[14] = {GPIOA, GPIO_PIN_10}; // DI15
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a1f      	ldr	r2, [pc, #124]	; (80084f4 <_ZN5Utils4initEP6Config+0x1f4>)
 8008478:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 800847c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008480:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[15] = {GPIOA, GPIO_PIN_11}; // DI16
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a1c      	ldr	r2, [pc, #112]	; (80084f8 <_ZN5Utils4initEP6Config+0x1f8>)
 8008488:	f203 4354 	addw	r3, r3, #1108	; 0x454
 800848c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008490:	e883 0003 	stmia.w	r3, {r0, r1}


}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	08013200 	.word	0x08013200
 80084a0:	08013208 	.word	0x08013208
 80084a4:	08013210 	.word	0x08013210
 80084a8:	08013218 	.word	0x08013218
 80084ac:	08013220 	.word	0x08013220
 80084b0:	08013228 	.word	0x08013228
 80084b4:	08013230 	.word	0x08013230
 80084b8:	08013238 	.word	0x08013238
 80084bc:	08013240 	.word	0x08013240
 80084c0:	08013248 	.word	0x08013248
 80084c4:	08013250 	.word	0x08013250
 80084c8:	08013258 	.word	0x08013258
 80084cc:	08013260 	.word	0x08013260
 80084d0:	08013268 	.word	0x08013268
 80084d4:	08013270 	.word	0x08013270
 80084d8:	08013278 	.word	0x08013278
 80084dc:	08013280 	.word	0x08013280
 80084e0:	08013288 	.word	0x08013288
 80084e4:	08013290 	.word	0x08013290
 80084e8:	08013298 	.word	0x08013298
 80084ec:	080132a0 	.word	0x080132a0
 80084f0:	080132a8 	.word	0x080132a8
 80084f4:	080132b0 	.word	0x080132b0
 80084f8:	080132b8 	.word	0x080132b8

080084fc <_ZN5Utils5printEPKcz>:
void Utils::print(const char* fmt, ...){
 80084fc:	b40f      	push	{r0, r1, r2, r3}
 80084fe:	b580      	push	{r7, lr}
 8008500:	b0c2      	sub	sp, #264	; 0x108
 8008502:	af00      	add	r7, sp, #0
	 char buff[256];
	 va_list args;
	 va_start(args, fmt);
 8008504:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8008508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008510:	601a      	str	r2, [r3, #0]
	 vsnprintf(buff, sizeof(buff), fmt, args);
 8008512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800851a:	f107 0008 	add.w	r0, r7, #8
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8008524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008528:	f008 f98e 	bl	8010848 <vsniprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 800852c:	f107 0308 	add.w	r3, r7, #8
 8008530:	4618      	mov	r0, r3
 8008532:	f7f7 fead 	bl	8000290 <strlen>
 8008536:	4603      	mov	r3, r0
 8008538:	b29a      	uxth	r2, r3
 800853a:	f107 0108 	add.w	r1, r7, #8
 800853e:	f04f 33ff 	mov.w	r3, #4294967295
 8008542:	4805      	ldr	r0, [pc, #20]	; (8008558 <_ZN5Utils5printEPKcz+0x5c>)
 8008544:	f005 fe50 	bl	800e1e8 <HAL_UART_Transmit>
	                      HAL_MAX_DELAY);
	 va_end(args);
}
 8008548:	bf00      	nop
 800854a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800854e:	46bd      	mov	sp, r7
 8008550:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008554:	b004      	add	sp, #16
 8008556:	4770      	bx	lr
 8008558:	200013a4 	.word	0x200013a4

0800855c <_ZN5Utils9playSoundEv>:

size_t Utils::getSwitchesCount() const {
    return sizeof(switches) / sizeof(switches[0]);
}

void Utils::playSound(){
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(sound_GPIO_Port, sound_Pin, GPIO_PIN_SET);
 8008560:	2201      	movs	r2, #1
 8008562:	2102      	movs	r1, #2
 8008564:	4807      	ldr	r0, [pc, #28]	; (8008584 <_ZN5Utils9playSoundEv+0x28>)
 8008566:	f004 fb8f 	bl	800cc88 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800856a:	2014      	movs	r0, #20
 800856c:	f003 fae0 	bl	800bb30 <HAL_Delay>
	HAL_GPIO_WritePin(sound_GPIO_Port, sound_Pin, GPIO_PIN_RESET);
 8008570:	2200      	movs	r2, #0
 8008572:	2102      	movs	r1, #2
 8008574:	4803      	ldr	r0, [pc, #12]	; (8008584 <_ZN5Utils9playSoundEv+0x28>)
 8008576:	f004 fb87 	bl	800cc88 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800857a:	2014      	movs	r0, #20
 800857c:	f003 fad8 	bl	800bb30 <HAL_Delay>
}
 8008580:	bf00      	nop
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40021000 	.word	0x40021000

08008588 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti>:

bool Utils::switchRelay(GPIO_TypeDef* port, uint16_t switchPin, int status){
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	4613      	mov	r3, r2
 8008596:	80fb      	strh	r3, [r7, #6]
    if (status > 1) {
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2b01      	cmp	r3, #1
 800859c:	dd05      	ble.n	80085aa <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x22>
    	print("Status is not valid %d \r\n", status);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	480c      	ldr	r0, [pc, #48]	; (80085d4 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x4c>)
 80085a2:	f7ff ffab 	bl	80084fc <_ZN5Utils5printEPKcz>
    	return false;
 80085a6:	2300      	movs	r3, #0
 80085a8:	e00f      	b.n	80085ca <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x42>
    }
	GPIO_PinState gpioStatus = status == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d101      	bne.n	80085b4 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x2c>
 80085b0:	2301      	movs	r3, #1
 80085b2:	e000      	b.n	80085b6 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x2e>
 80085b4:	2300      	movs	r3, #0
 80085b6:	75fb      	strb	r3, [r7, #23]
	playSound();
 80085b8:	f7ff ffd0 	bl	800855c <_ZN5Utils9playSoundEv>
	HAL_GPIO_WritePin(port, switchPin, gpioStatus);
 80085bc:	7dfa      	ldrb	r2, [r7, #23]
 80085be:	88fb      	ldrh	r3, [r7, #6]
 80085c0:	4619      	mov	r1, r3
 80085c2:	68b8      	ldr	r0, [r7, #8]
 80085c4:	f004 fb60 	bl	800cc88 <HAL_GPIO_WritePin>
	return true;
 80085c8:	2301      	movs	r3, #1
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	080132c0 	.word	0x080132c0

080085d8 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>:

int Utils::readGPIOPinState(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	80fb      	strh	r3, [r7, #6]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET ? 0 : 1;
 80085e6:	88fb      	ldrh	r3, [r7, #6]
 80085e8:	4619      	mov	r1, r3
 80085ea:	68b8      	ldr	r0, [r7, #8]
 80085ec:	f004 fb34 	bl	800cc58 <HAL_GPIO_ReadPin>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	bf14      	ite	ne
 80085f6:	2301      	movne	r3, #1
 80085f8:	2300      	moveq	r3, #0
 80085fa:	b2db      	uxtb	r3, r3
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Utils::createJSON(std::string *message) {
 8008604:	b590      	push	{r4, r7, lr}
 8008606:	b095      	sub	sp, #84	; 0x54
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
	   cJSON *statusJson = cJSON_CreateObject();
 800860e:	f7fd ffed 	bl	80065ec <cJSON_CreateObject>
 8008612:	6478      	str	r0, [r7, #68]	; 0x44
	    for (int i = 0; i < 8; i++) {
 8008614:	2300      	movs	r3, #0
 8008616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008618:	e030      	b.n	800867c <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
	        int status = readGPIOPinState(switches[i].port, switches[i].pin);
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861e:	3373      	adds	r3, #115	; 0x73
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	4413      	add	r3, r2
 8008624:	6859      	ldr	r1, [r3, #4]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862a:	3373      	adds	r3, #115	; 0x73
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	4413      	add	r3, r2
 8008630:	891b      	ldrh	r3, [r3, #8]
 8008632:	461a      	mov	r2, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff ffcf 	bl	80085d8 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>
 800863a:	63b8      	str	r0, [r7, #56]	; 0x38
	        cJSON_AddNumberToObject(statusJson, conf.getDigitalOutputName(i).c_str(), status);
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	f107 0308 	add.w	r3, r7, #8
 8008642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008644:	4618      	mov	r0, r3
 8008646:	f001 f952 	bl	80098ee <_ZN6Config20getDigitalOutputNameB5cxx11Ei>
 800864a:	f107 0308 	add.w	r3, r7, #8
 800864e:	4618      	mov	r0, r3
 8008650:	f006 ffc0 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008654:	4604      	mov	r4, r0
 8008656:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008658:	f7f7 ff74 	bl	8000544 <__aeabi_i2d>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	ec43 2b10 	vmov	d0, r2, r3
 8008664:	4621      	mov	r1, r4
 8008666:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008668:	f7fd ff00 	bl	800646c <cJSON_AddNumberToObject>
 800866c:	f107 0308 	add.w	r3, r7, #8
 8008670:	4618      	mov	r0, r3
 8008672:	f006 feb5 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    for (int i = 0; i < 8; i++) {
 8008676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008678:	3301      	adds	r3, #1
 800867a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800867c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800867e:	2b07      	cmp	r3, #7
 8008680:	ddcb      	ble.n	800861a <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
	    }
	    for (int i = 0; i < 16; i++) {
 8008682:	2300      	movs	r3, #0
 8008684:	64bb      	str	r3, [r7, #72]	; 0x48
 8008686:	e030      	b.n	80086ea <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe6>
	        int status = readGPIOPinState(digitalInputs[i].port, digitalInputs[i].pin);
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800868c:	337b      	adds	r3, #123	; 0x7b
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	4413      	add	r3, r2
 8008692:	6859      	ldr	r1, [r3, #4]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008698:	337b      	adds	r3, #123	; 0x7b
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	4413      	add	r3, r2
 800869e:	891b      	ldrh	r3, [r3, #8]
 80086a0:	461a      	mov	r2, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff ff98 	bl	80085d8 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>
 80086a8:	63f8      	str	r0, [r7, #60]	; 0x3c
	        cJSON_AddNumberToObject(statusJson, conf.getDigitalInputName(i).c_str(), status);
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	f107 0320 	add.w	r3, r7, #32
 80086b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b2:	4618      	mov	r0, r3
 80086b4:	f001 f904 	bl	80098c0 <_ZN6Config19getDigitalInputNameB5cxx11Ei>
 80086b8:	f107 0320 	add.w	r3, r7, #32
 80086bc:	4618      	mov	r0, r3
 80086be:	f006 ff89 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80086c2:	4604      	mov	r4, r0
 80086c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80086c6:	f7f7 ff3d 	bl	8000544 <__aeabi_i2d>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	ec43 2b10 	vmov	d0, r2, r3
 80086d2:	4621      	mov	r1, r4
 80086d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80086d6:	f7fd fec9 	bl	800646c <cJSON_AddNumberToObject>
 80086da:	f107 0320 	add.w	r3, r7, #32
 80086de:	4618      	mov	r0, r3
 80086e0:	f006 fe7e 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    for (int i = 0; i < 16; i++) {
 80086e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e6:	3301      	adds	r3, #1
 80086e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ec:	2b0f      	cmp	r3, #15
 80086ee:	ddcb      	ble.n	8008688 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>
	    }
	    char* json_string = cJSON_Print(statusJson);
 80086f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80086f2:	f7fd f851 	bl	8005798 <cJSON_Print>
 80086f6:	6438      	str	r0, [r7, #64]	; 0x40
	    if (json_string != nullptr) {
 80086f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d006      	beq.n	800870c <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x108>
	        *message = json_string;
 80086fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008700:	6838      	ldr	r0, [r7, #0]
 8008702:	f006 ff2a 	bl	800f55a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	        free(json_string); // Free the allocated memory
 8008706:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008708:	f007 f80a 	bl	800f720 <free>
	    }
	    cJSON_Delete(statusJson); // Clean up the cJSON object
 800870c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800870e:	f7fb ffa5 	bl	800465c <cJSON_Delete>
}
 8008712:	bf00      	nop
 8008714:	3754      	adds	r7, #84	; 0x54
 8008716:	46bd      	mov	sp, r7
 8008718:	bd90      	pop	{r4, r7, pc}
	...

0800871c <_Z5printPKcz>:


void print(const char* fmt, ...){
 800871c:	b40f      	push	{r0, r1, r2, r3}
 800871e:	b580      	push	{r7, lr}
 8008720:	b0c2      	sub	sp, #264	; 0x108
 8008722:	af00      	add	r7, sp, #0
	 char buff[256];
	 va_list args;
	 va_start(args, fmt);
 8008724:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8008728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008730:	601a      	str	r2, [r3, #0]
	 vsnprintf(buff, sizeof(buff), fmt, args);
 8008732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800873a:	f107 0008 	add.w	r0, r7, #8
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8008744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008748:	f008 f87e 	bl	8010848 <vsniprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 800874c:	f107 0308 	add.w	r3, r7, #8
 8008750:	4618      	mov	r0, r3
 8008752:	f7f7 fd9d 	bl	8000290 <strlen>
 8008756:	4603      	mov	r3, r0
 8008758:	b29a      	uxth	r2, r3
 800875a:	f107 0108 	add.w	r1, r7, #8
 800875e:	f04f 33ff 	mov.w	r3, #4294967295
 8008762:	4805      	ldr	r0, [pc, #20]	; (8008778 <_Z5printPKcz+0x5c>)
 8008764:	f005 fd40 	bl	800e1e8 <HAL_UART_Transmit>
	                      HAL_MAX_DELAY);
	 va_end(args);
}
 8008768:	bf00      	nop
 800876a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800876e:	46bd      	mov	sp, r7
 8008770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008774:	b004      	add	sp, #16
 8008776:	4770      	bx	lr
 8008778:	200013a4 	.word	0x200013a4

0800877c <_ZN15EthernetManagerD1Ev>:
uint8_t EthernetManager::dns_buffer[2048];
uint8_t EthernetManager::DHCP_SOCKET = 1;
uint8_t EthernetManager::DNS_SOCKET = 1;


EthernetManager::~EthernetManager() {
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]

}
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <_ZN15EthernetManagerC1Ev>:

EthernetManager::EthernetManager() {
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]

}
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <_ZN15EthernetManager12isIpAssignedEv>:

bool EthernetManager::ip_assigned = false;

bool EthernetManager::isIpAssigned() {
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
	return ip_assigned;
 80087b0:	4b03      	ldr	r3, [pc, #12]	; (80087c0 <_ZN15EthernetManager12isIpAssignedEv+0x18>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	200012b8 	.word	0x200012b8

080087c4 <_ZN15EthernetManager12setIPAssigedEb>:

void EthernetManager::setIPAssiged(bool val){
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
	ip_assigned = val;
 80087d0:	4a04      	ldr	r2, [pc, #16]	; (80087e4 <_ZN15EthernetManager12setIPAssigedEb+0x20>)
 80087d2:	78fb      	ldrb	r3, [r7, #3]
 80087d4:	7013      	strb	r3, [r2, #0]
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	200012b8 	.word	0x200012b8

080087e8 <_ZN15EthernetManager10initializeEPK6ConfigP5Utils>:

void EthernetManager::initialize(const Config *conf, Utils *utilClass) {
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
    utils = utilClass;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	601a      	str	r2, [r3, #0]
    utils->playSound();
 80087fa:	f7ff feaf 	bl	800855c <_ZN5Utils9playSoundEv>
	utils->print("Initializing Internet \r\n");
 80087fe:	480f      	ldr	r0, [pc, #60]	; (800883c <_ZN15EthernetManager10initializeEPK6ConfigP5Utils+0x54>)
 8008800:	f7ff fe7c 	bl	80084fc <_ZN5Utils5printEPKcz>

    resetAssert();
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f81b 	bl	8008840 <_ZN15EthernetManager11resetAssertEv>
    HAL_Delay(100); // Delay for the reset
 800880a:	2064      	movs	r0, #100	; 0x64
 800880c:	f003 f990 	bl	800bb30 <HAL_Delay>
    resetDeassert();
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 f829 	bl	8008868 <_ZN15EthernetManager13resetDeassertEv>
    HAL_Delay(300);
 8008816:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800881a:	f003 f989 	bl	800bb30 <HAL_Delay>
    initWIZCHIP();
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 f8a6 	bl	8008970 <_ZN15EthernetManager11initWIZCHIPEv>
    if (conf != nullptr) {
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <_ZN15EthernetManager10initializeEPK6ConfigP5Utils+0x4a>
        configureNetwork(conf);
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 f8f7 	bl	8008a20 <_ZN15EthernetManager16configureNetworkEPK6Config>
    }
}
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	080132dc 	.word	0x080132dc

08008840 <_ZN15EthernetManager11resetAssertEv>:

}



void EthernetManager::resetAssert() {
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
    utils->print("Resetting!!! \r\n");
 8008848:	4805      	ldr	r0, [pc, #20]	; (8008860 <_ZN15EthernetManager11resetAssertEv+0x20>)
 800884a:	f7ff fe57 	bl	80084fc <_ZN5Utils5printEPKcz>
    HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_RESET);
 800884e:	2200      	movs	r2, #0
 8008850:	2120      	movs	r1, #32
 8008852:	4804      	ldr	r0, [pc, #16]	; (8008864 <_ZN15EthernetManager11resetAssertEv+0x24>)
 8008854:	f004 fa18 	bl	800cc88 <HAL_GPIO_WritePin>
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	080132f8 	.word	0x080132f8
 8008864:	40020800 	.word	0x40020800

08008868 <_ZN15EthernetManager13resetDeassertEv>:

void EthernetManager::resetDeassert() {
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
	utils->print("Desserting!!! \r\n");
 8008870:	4805      	ldr	r0, [pc, #20]	; (8008888 <_ZN15EthernetManager13resetDeassertEv+0x20>)
 8008872:	f7ff fe43 	bl	80084fc <_ZN5Utils5printEPKcz>
    HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_SET);
 8008876:	2201      	movs	r2, #1
 8008878:	2120      	movs	r1, #32
 800887a:	4804      	ldr	r0, [pc, #16]	; (800888c <_ZN15EthernetManager13resetDeassertEv+0x24>)
 800887c:	f004 fa04 	bl	800cc88 <HAL_GPIO_WritePin>
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	08013308 	.word	0x08013308
 800888c:	40020800 	.word	0x40020800

08008890 <_ZN15EthernetManager12W5500_SelectEv>:


void EthernetManager::W5500_Select() {
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8008894:	2200      	movs	r2, #0
 8008896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800889a:	4802      	ldr	r0, [pc, #8]	; (80088a4 <_ZN15EthernetManager12W5500_SelectEv+0x14>)
 800889c:	f004 f9f4 	bl	800cc88 <HAL_GPIO_WritePin>
}
 80088a0:	bf00      	nop
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	40020400 	.word	0x40020400

080088a8 <_ZN15EthernetManager14W5500_UnselectEv>:


void EthernetManager::W5500_Unselect() {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 80088ac:	2201      	movs	r2, #1
 80088ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80088b2:	4802      	ldr	r0, [pc, #8]	; (80088bc <_ZN15EthernetManager14W5500_UnselectEv+0x14>)
 80088b4:	f004 f9e8 	bl	800cc88 <HAL_GPIO_WritePin>
}
 80088b8:	bf00      	nop
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40020400 	.word	0x40020400

080088c0 <_ZN15EthernetManager14W5500_ReadBuffEPht>:

void EthernetManager::unselectW5500() {
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
}

void EthernetManager::W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 80088cc:	887a      	ldrh	r2, [r7, #2]
 80088ce:	f04f 33ff 	mov.w	r3, #4294967295
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	4803      	ldr	r0, [pc, #12]	; (80088e4 <_ZN15EthernetManager14W5500_ReadBuffEPht+0x24>)
 80088d6:	f005 f82d 	bl	800d934 <HAL_SPI_Receive>
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	2000134c 	.word	0x2000134c

080088e8 <_ZN15EthernetManager15W5500_WriteBuffEPht>:

void EthernetManager::W5500_WriteBuff( uint8_t* buff, uint16_t len) {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 80088f4:	887a      	ldrh	r2, [r7, #2]
 80088f6:	f04f 33ff 	mov.w	r3, #4294967295
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	4803      	ldr	r0, [pc, #12]	; (800890c <_ZN15EthernetManager15W5500_WriteBuffEPht+0x24>)
 80088fe:	f004 fed6 	bl	800d6ae <HAL_SPI_Transmit>
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	2000134c 	.word	0x2000134c

08008910 <_ZN15EthernetManager14W5500_ReadByteEv>:

uint8_t EthernetManager::W5500_ReadByte() {
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, 1);
 8008916:	1dfb      	adds	r3, r7, #7
 8008918:	2101      	movs	r1, #1
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff ffd0 	bl	80088c0 <_ZN15EthernetManager14W5500_ReadBuffEPht>
    return byte;
 8008920:	79fb      	ldrb	r3, [r7, #7]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <_ZN15EthernetManager15W5500_WriteByteEh>:

void EthernetManager::W5500_WriteByte(uint8_t byte) {
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	4603      	mov	r3, r0
 8008932:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, 1);
 8008934:	1dfb      	adds	r3, r7, #7
 8008936:	2101      	movs	r1, #1
 8008938:	4618      	mov	r0, r3
 800893a:	f7ff ffd5 	bl	80088e8 <_ZN15EthernetManager15W5500_WriteBuffEPht>
}
 800893e:	bf00      	nop
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <_ZN15EthernetManager19Callback_IPAssignedEv>:

void EthernetManager::Callback_IPAssigned() {
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
    	ip_assigned = true;
 800894c:	4b03      	ldr	r3, [pc, #12]	; (800895c <_ZN15EthernetManager19Callback_IPAssignedEv+0x14>)
 800894e:	2201      	movs	r2, #1
 8008950:	701a      	strb	r2, [r3, #0]
}
 8008952:	bf00      	nop
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	200012b8 	.word	0x200012b8

08008960 <_ZN15EthernetManager19Callback_IPConflictEv>:

void EthernetManager::Callback_IPConflict() {
 8008960:	b480      	push	{r7}
 8008962:	af00      	add	r7, sp, #0
 // Print("Callback: IP conflict!\r\n");
}
 8008964:	bf00      	nop
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
	...

08008970 <_ZN15EthernetManager11initWIZCHIPEv>:


void EthernetManager::initWIZCHIP() {
 8008970:	b590      	push	{r4, r7, lr}
 8008972:	b089      	sub	sp, #36	; 0x24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
    utils->print("\r\nWIZCHIP Initialization called!\r\n");
 8008978:	4820      	ldr	r0, [pc, #128]	; (80089fc <_ZN15EthernetManager11initWIZCHIPEv+0x8c>)
 800897a:	f7ff fdbf 	bl	80084fc <_ZN5Utils5printEPKcz>
    W5500_Unselect();
 800897e:	f7ff ff93 	bl	80088a8 <_ZN15EthernetManager14W5500_UnselectEv>
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8008982:	491f      	ldr	r1, [pc, #124]	; (8008a00 <_ZN15EthernetManager11initWIZCHIPEv+0x90>)
 8008984:	481f      	ldr	r0, [pc, #124]	; (8008a04 <_ZN15EthernetManager11initWIZCHIPEv+0x94>)
 8008986:	f7fb f96f 	bl	8003c68 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800898a:	491f      	ldr	r1, [pc, #124]	; (8008a08 <_ZN15EthernetManager11initWIZCHIPEv+0x98>)
 800898c:	481f      	ldr	r0, [pc, #124]	; (8008a0c <_ZN15EthernetManager11initWIZCHIPEv+0x9c>)
 800898e:	f7fb f991 	bl	8003cb4 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8008992:	491f      	ldr	r1, [pc, #124]	; (8008a10 <_ZN15EthernetManager11initWIZCHIPEv+0xa0>)
 8008994:	481f      	ldr	r0, [pc, #124]	; (8008a14 <_ZN15EthernetManager11initWIZCHIPEv+0xa4>)
 8008996:	f7fb f9b9 	bl	8003d0c <reg_wizchip_spiburst_cbfunc>

    uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 800899a:	4b1f      	ldr	r3, [pc, #124]	; (8008a18 <_ZN15EthernetManager11initWIZCHIPEv+0xa8>)
 800899c:	f107 0410 	add.w	r4, r7, #16
 80089a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (ctlwizchip(CW_INIT_WIZCHIP, (void*)memsize) == -1) {
 80089a6:	f107 0310 	add.w	r3, r7, #16
 80089aa:	4619      	mov	r1, r3
 80089ac:	2001      	movs	r0, #1
 80089ae:	f7fb f9d9 	bl	8003d64 <ctlwizchip>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b8:	bf0c      	ite	eq
 80089ba:	2301      	moveq	r3, #1
 80089bc:	2300      	movne	r3, #0
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d115      	bne.n	80089f0 <_ZN15EthernetManager11initWIZCHIPEv+0x80>
    }

    // Check PHY link status
    uint8_t tmp;
    do {
        if (ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1) {
 80089c4:	f107 030f 	add.w	r3, r7, #15
 80089c8:	4619      	mov	r1, r3
 80089ca:	200f      	movs	r0, #15
 80089cc:	f7fb f9ca 	bl	8003d64 <ctlwizchip>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	bf0c      	ite	eq
 80089d8:	2301      	moveq	r3, #1
 80089da:	2300      	movne	r3, #0
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d108      	bne.n	80089f4 <_ZN15EthernetManager11initWIZCHIPEv+0x84>
         //  Print("UNKNOWN PHY LINK STATUS.\r\n");
            return;
        }
    } while (tmp == PHY_LINK_OFF);
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0ed      	beq.n	80089c4 <_ZN15EthernetManager11initWIZCHIPEv+0x54>
    utils->print("WIZCHIP Initialized successfully.\r\n");
 80089e8:	480c      	ldr	r0, [pc, #48]	; (8008a1c <_ZN15EthernetManager11initWIZCHIPEv+0xac>)
 80089ea:	f7ff fd87 	bl	80084fc <_ZN5Utils5printEPKcz>
 80089ee:	e002      	b.n	80089f6 <_ZN15EthernetManager11initWIZCHIPEv+0x86>
        return;
 80089f0:	bf00      	nop
 80089f2:	e000      	b.n	80089f6 <_ZN15EthernetManager11initWIZCHIPEv+0x86>
            return;
 80089f4:	bf00      	nop
}
 80089f6:	3724      	adds	r7, #36	; 0x24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd90      	pop	{r4, r7, pc}
 80089fc:	0801331c 	.word	0x0801331c
 8008a00:	080088a9 	.word	0x080088a9
 8008a04:	08008891 	.word	0x08008891
 8008a08:	0800892b 	.word	0x0800892b
 8008a0c:	08008911 	.word	0x08008911
 8008a10:	080088e9 	.word	0x080088e9
 8008a14:	080088c1 	.word	0x080088c1
 8008a18:	08013364 	.word	0x08013364
 8008a1c:	08013340 	.word	0x08013340

08008a20 <_ZN15EthernetManager16configureNetworkEPK6Config>:


void EthernetManager::configureNetwork(const Config* conf) {
 8008a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a24:	b0a2      	sub	sp, #136	; 0x88
 8008a26:	af0e      	add	r7, sp, #56	; 0x38
 8008a28:	61f8      	str	r0, [r7, #28]
 8008a2a:	61b9      	str	r1, [r7, #24]
	utils->print("Initializing Netwok Configuration!!! \r\n");
 8008a2c:	489d      	ldr	r0, [pc, #628]	; (8008ca4 <_ZN15EthernetManager16configureNetworkEPK6Config+0x284>)
 8008a2e:	f7ff fd65 	bl	80084fc <_ZN5Utils5printEPKcz>
    if (conf == nullptr) {
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 812f 	beq.w	8008c98 <_ZN15EthernetManager16configureNetworkEPK6Config+0x278>
           return;
       }
       uint8_t mac[6];
       getSHAR(mac); // Assuming you have a function getSHAR to get MAC address
 8008a3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a3e:	2206      	movs	r2, #6
 8008a40:	4619      	mov	r1, r3
 8008a42:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008a46:	f7f9 fead 	bl	80027a4 <WIZCHIP_READ_BUF>
       HAL_Delay(300);
 8008a4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a4e:	f003 f86f 	bl	800bb30 <HAL_Delay>

       wiz_NetInfo net_info = {
 8008a52:	f107 0320 	add.w	r3, r7, #32
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	605a      	str	r2, [r3, #4]
 8008a5c:	609a      	str	r2, [r3, #8]
 8008a5e:	60da      	str	r2, [r3, #12]
 8008a60:	611a      	str	r2, [r3, #16]
 8008a62:	f8c3 2013 	str.w	r2, [r3, #19]
 8008a66:	2302      	movs	r3, #2
 8008a68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008a6c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
           {0,}, // IP address (will be set by DHCP or static config)
           {0,}, // Gateway (will be set by DHCP or static config)
           {0,}, // Subnet Mask (will be set by DHCP or static config)
           {0,}, // DNS server (will be set by DHCP or static config)
           NETINFO_DHCP // Default to DHCP
       };
 8008a70:	f887 3020 	strb.w	r3, [r7, #32]
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008a74:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
       };
 8008a78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008a7c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
       };
 8008a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008a84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
       };
 8008a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008a8c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
       };
 8008a90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008a94:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
       };
 8008a98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

       setSHAR(net_info.mac); // Apply MAC address
 8008a9c:	f107 0320 	add.w	r3, r7, #32
 8008aa0:	2206      	movs	r2, #6
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008aa8:	f7f9 fedc 	bl	8002864 <WIZCHIP_WRITE_BUF>

       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8008aac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008ab0:	4618      	mov	r0, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8008ab2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008ab6:	461c      	mov	r4, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8008ab8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008abc:	461d      	mov	r5, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8008abe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008ac2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8008ac6:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008aca:	9102      	str	r1, [sp, #8]
 8008acc:	9201      	str	r2, [sp, #4]
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	462b      	mov	r3, r5
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	4874      	ldr	r0, [pc, #464]	; (8008ca8 <_ZN15EthernetManager16configureNetworkEPK6Config+0x288>)
 8008ad8:	f7ff fd10 	bl	80084fc <_ZN5Utils5printEPKcz>

       if (conf->getDHCPEnabled()) {
 8008adc:	69b8      	ldr	r0, [r7, #24]
 8008ade:	f001 faab 	bl	800a038 <_ZNK6Config14getDHCPEnabledEv>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d045      	beq.n	8008b74 <_ZN15EthernetManager16configureNetworkEPK6Config+0x154>
           // DHCP mode
    	   utils->print("DHCP mode has been enabled@ \r\n");
 8008ae8:	4870      	ldr	r0, [pc, #448]	; (8008cac <_ZN15EthernetManager16configureNetworkEPK6Config+0x28c>)
 8008aea:	f7ff fd07 	bl	80084fc <_ZN5Utils5printEPKcz>
           DHCP_init(DHCP_SOCKET, dhcp_buffer);
 8008aee:	4b70      	ldr	r3, [pc, #448]	; (8008cb0 <_ZN15EthernetManager16configureNetworkEPK6Config+0x290>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	4970      	ldr	r1, [pc, #448]	; (8008cb4 <_ZN15EthernetManager16configureNetworkEPK6Config+0x294>)
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7f9 fc75 	bl	80023e4 <DHCP_init>
           reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8008afa:	4a6f      	ldr	r2, [pc, #444]	; (8008cb8 <_ZN15EthernetManager16configureNetworkEPK6Config+0x298>)
 8008afc:	496f      	ldr	r1, [pc, #444]	; (8008cbc <_ZN15EthernetManager16configureNetworkEPK6Config+0x29c>)
 8008afe:	486f      	ldr	r0, [pc, #444]	; (8008cbc <_ZN15EthernetManager16configureNetworkEPK6Config+0x29c>)
 8008b00:	f7f8 fa7c 	bl	8000ffc <reg_dhcp_cbfunc>

   	    do {
   	        utils->print("Attempting DHCP lease...\r\n");
 8008b04:	486e      	ldr	r0, [pc, #440]	; (8008cc0 <_ZN15EthernetManager16configureNetworkEPK6Config+0x2a0>)
 8008b06:	f7ff fcf9 	bl	80084fc <_ZN5Utils5printEPKcz>
   	         setIPAssiged(false);
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	69f8      	ldr	r0, [r7, #28]
 8008b0e:	f7ff fe59 	bl	80087c4 <_ZN15EthernetManager12setIPAssigedEb>
   	        while (!isIpAssigned()) {
 8008b12:	e004      	b.n	8008b1e <_ZN15EthernetManager16configureNetworkEPK6Config+0xfe>
   	            DHCP_run();
 8008b14:	f7f9 faae 	bl	8002074 <DHCP_run>
   	            HAL_Delay(100); // Delay between DHCP runs
 8008b18:	2064      	movs	r0, #100	; 0x64
 8008b1a:	f003 f809 	bl	800bb30 <HAL_Delay>
   	        while (!isIpAssigned()) {
 8008b1e:	69f8      	ldr	r0, [r7, #28]
 8008b20:	f7ff fe42 	bl	80087a8 <_ZN15EthernetManager12isIpAssignedEv>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f083 0301 	eor.w	r3, r3, #1
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1f1      	bne.n	8008b14 <_ZN15EthernetManager16configureNetworkEPK6Config+0xf4>
   	        }
   	    } while (!isIpAssigned()); // Retry mechanism if not successful
 8008b30:	69f8      	ldr	r0, [r7, #28]
 8008b32:	f7ff fe39 	bl	80087a8 <_ZN15EthernetManager12isIpAssignedEv>
 8008b36:	4603      	mov	r3, r0
 8008b38:	f083 0301 	eor.w	r3, r3, #1
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e0      	bne.n	8008b04 <_ZN15EthernetManager16configureNetworkEPK6Config+0xe4>
           // Get network configuration from DHCP
           getIPfromDHCP(net_info.ip);
 8008b42:	f107 0320 	add.w	r3, r7, #32
 8008b46:	3306      	adds	r3, #6
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7f9 fcdb 	bl	8002504 <getIPfromDHCP>
           getGWfromDHCP(net_info.gw);
 8008b4e:	f107 0320 	add.w	r3, r7, #32
 8008b52:	330e      	adds	r3, #14
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7f9 fcf5 	bl	8002544 <getGWfromDHCP>
           getSNfromDHCP(net_info.sn);
 8008b5a:	f107 0320 	add.w	r3, r7, #32
 8008b5e:	330a      	adds	r3, #10
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7f9 fd0f 	bl	8002584 <getSNfromDHCP>
           getDNSfromDHCP(net_info.dns);
 8008b66:	f107 0320 	add.w	r3, r7, #32
 8008b6a:	3312      	adds	r3, #18
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7f9 fd29 	bl	80025c4 <getDNSfromDHCP>
 8008b72:	e03d      	b.n	8008bf0 <_ZN15EthernetManager16configureNetworkEPK6Config+0x1d0>
       } else {
    	   utils->print("STATIC mode has been enabled@ \r\n");
 8008b74:	4853      	ldr	r0, [pc, #332]	; (8008cc4 <_ZN15EthernetManager16configureNetworkEPK6Config+0x2a4>)
 8008b76:	f7ff fcc1 	bl	80084fc <_ZN5Utils5printEPKcz>
           // Static IP mode
    	   std::memcpy(net_info.ip, conf->getIP().data(), 4); // For std::array
 8008b7a:	69b8      	ldr	r0, [r7, #24]
 8008b7c:	f001 f9dc 	bl	8009f38 <_ZNK6Config5getIPEv>
 8008b80:	4603      	mov	r3, r0
 8008b82:	643b      	str	r3, [r7, #64]	; 0x40
 8008b84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 f8a3 	bl	8008cd4 <_ZNSt5arrayIhLj4EE4dataEv>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
    	   std::memcpy(net_info.gw, conf->getGateway().data(), 4); // For std::array
 8008b96:	69b8      	ldr	r0, [r7, #24]
 8008b98:	f001 f9eb 	bl	8009f72 <_ZNK6Config10getGatewayEv>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8008ba0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 f895 	bl	8008cd4 <_ZNSt5arrayIhLj4EE4dataEv>
 8008baa:	4603      	mov	r3, r0
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
    	   std::memcpy(net_info.sn, conf->getSubnet().data(), 4); // For std::array
 8008bb2:	69b8      	ldr	r0, [r7, #24]
 8008bb4:	f001 f9fa 	bl	8009fac <_ZNK6Config9getSubnetEv>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 f887 	bl	8008cd4 <_ZNSt5arrayIhLj4EE4dataEv>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f8c7 302a 	str.w	r3, [r7, #42]	; 0x2a
    	   std::memcpy(net_info.dns, conf->getDNS().data(), 4); // For std::array
 8008bce:	69b8      	ldr	r0, [r7, #24]
 8008bd0:	f001 fa09 	bl	8009fe6 <_ZNK6Config6getDNSEv>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 f879 	bl	8008cd4 <_ZNSt5arrayIhLj4EE4dataEv>
 8008be2:	4603      	mov	r3, r0
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
           net_info.dhcp = NETINFO_STATIC;
 8008bea:	2301      	movs	r3, #1
 8008bec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
       }
       // Apply network settings to WIZnet chip
       wizchip_setnetinfo(&net_info);
 8008bf0:	f107 0320 	add.w	r3, r7, #32
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fb fc39 	bl	800446c <wizchip_setnetinfo>

       // Print network information
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8008bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008bfe:	469c      	mov	ip, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8008c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c04:	469e      	mov	lr, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8008c06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c0a:	4698      	mov	r8, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8008c0c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c10:	4618      	mov	r0, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8008c12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c16:	461c      	mov	r4, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8008c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c1c:	461d      	mov	r5, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8008c1e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c22:	461e      	mov	r6, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8008c24:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c28:	617b      	str	r3, [r7, #20]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8008c2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c2e:	613b      	str	r3, [r7, #16]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8008c30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c34:	60fb      	str	r3, [r7, #12]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8008c36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c3a:	60bb      	str	r3, [r7, #8]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8008c3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c40:	607b      	str	r3, [r7, #4]
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8008c42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c46:	603b      	str	r3, [r7, #0]
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8008c48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c4c:	4619      	mov	r1, r3
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8008c4e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c52:	461a      	mov	r2, r3
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8008c54:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008c58:	930c      	str	r3, [sp, #48]	; 0x30
 8008c5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c5c:	910a      	str	r1, [sp, #40]	; 0x28
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	9209      	str	r2, [sp, #36]	; 0x24
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	9208      	str	r2, [sp, #32]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	9207      	str	r2, [sp, #28]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	9206      	str	r2, [sp, #24]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	9205      	str	r2, [sp, #20]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	9603      	str	r6, [sp, #12]
 8008c78:	9502      	str	r5, [sp, #8]
 8008c7a:	9401      	str	r4, [sp, #4]
 8008c7c:	9000      	str	r0, [sp, #0]
 8008c7e:	4643      	mov	r3, r8
 8008c80:	4672      	mov	r2, lr
 8008c82:	4661      	mov	r1, ip
 8008c84:	4810      	ldr	r0, [pc, #64]	; (8008cc8 <_ZN15EthernetManager16configureNetworkEPK6Config+0x2a8>)
 8008c86:	f7ff fc39 	bl	80084fc <_ZN5Utils5printEPKcz>

       // Initializing DNS if necessary
       DNS_init(DNS_SOCKET, dns_buffer);
 8008c8a:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <_ZN15EthernetManager16configureNetworkEPK6Config+0x2ac>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	4910      	ldr	r1, [pc, #64]	; (8008cd0 <_ZN15EthernetManager16configureNetworkEPK6Config+0x2b0>)
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7f9 fcd1 	bl	8002638 <DNS_init>
 8008c96:	e000      	b.n	8008c9a <_ZN15EthernetManager16configureNetworkEPK6Config+0x27a>
           return;
 8008c98:	bf00      	nop
}
 8008c9a:	3750      	adds	r7, #80	; 0x50
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08013374 	.word	0x08013374
 8008ca8:	0801339c 	.word	0x0801339c
 8008cac:	080133cc 	.word	0x080133cc
 8008cb0:	20000054 	.word	0x20000054
 8008cb4:	200002b8 	.word	0x200002b8
 8008cb8:	08008961 	.word	0x08008961
 8008cbc:	08008949 	.word	0x08008949
 8008cc0:	080133ec 	.word	0x080133ec
 8008cc4:	08013408 	.word	0x08013408
 8008cc8:	0801342c 	.word	0x0801342c
 8008ccc:	20000055 	.word	0x20000055
 8008cd0:	20000ab8 	.word	0x20000ab8

08008cd4 <_ZNSt5arrayIhLj4EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f805 	bl	8008cee <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8008cee:	b480      	push	{r7}
 8008cf0:	b083      	sub	sp, #12
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <_ZN11UARTHandlerC1Ev>:
#include "CplusUtils.h"
#include <cstring> // For memset and memcpy
#include <array>
#include <string>

UARTHandler::UARTHandler() : bufferIndex(0), newDataAvailable(false) {
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3310      	adds	r3, #16
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7ff fa1f 	bl	8008154 <_ZN14CircularBufferC1Ev>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 261c 	strb.w	r2, [r3, #1564]	; 0x61c
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 261d 	strb.w	r2, [r3, #1565]	; 0x61d
    memset(receiveBuffer, 0, sizeof(receiveBuffer));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8008d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d38:	2100      	movs	r1, #0
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f007 fdac 	bl	8010898 <memset>
}
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config>:

void UARTHandler::init(UART_HandleTypeDef* uartHandle, Utils* utilsInstance, Config* configInstance) {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
    huart = uartHandle;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	609a      	str	r2, [r3, #8]
    utils = utilsInstance;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	601a      	str	r2, [r3, #0]
    config = configInstance;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef result = HAL_UART_Receive_IT(huart, &rxByte, 1);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6898      	ldr	r0, [r3, #8]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	330c      	adds	r3, #12
 8008d74:	2201      	movs	r2, #1
 8008d76:	4619      	mov	r1, r3
 8008d78:	f005 fac1 	bl	800e2fe <HAL_UART_Receive_IT>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	75fb      	strb	r3, [r7, #23]

    if(result != HAL_OK) {
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d019      	beq.n	8008dba <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x6e>
        // Error handling
        if(result == HAL_ERROR) {
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d103      	bne.n	8008d94 <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x48>
            print("UART Receive_IT Error: HAL_ERROR\r\n");
 8008d8c:	480d      	ldr	r0, [pc, #52]	; (8008dc4 <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x78>)
 8008d8e:	f7ff fcc5 	bl	800871c <_Z5printPKcz>
            print("UART Receive_IT Error: HAL_TIMEOUT\r\n");
        } else {
            print("UART Receive_IT Error: Unknown Error Code %d\r\n", result);
        }
    }
}
 8008d92:	e012      	b.n	8008dba <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x6e>
        } else if(result == HAL_BUSY) {
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d103      	bne.n	8008da2 <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x56>
            print("UART Receive_IT Error: HAL_BUSY\r\n");
 8008d9a:	480b      	ldr	r0, [pc, #44]	; (8008dc8 <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x7c>)
 8008d9c:	f7ff fcbe 	bl	800871c <_Z5printPKcz>
}
 8008da0:	e00b      	b.n	8008dba <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x6e>
        } else if(result == HAL_TIMEOUT) {
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d103      	bne.n	8008db0 <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x64>
            print("UART Receive_IT Error: HAL_TIMEOUT\r\n");
 8008da8:	4808      	ldr	r0, [pc, #32]	; (8008dcc <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x80>)
 8008daa:	f7ff fcb7 	bl	800871c <_Z5printPKcz>
}
 8008dae:	e004      	b.n	8008dba <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x6e>
            print("UART Receive_IT Error: Unknown Error Code %d\r\n", result);
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	4619      	mov	r1, r3
 8008db4:	4806      	ldr	r0, [pc, #24]	; (8008dd0 <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config+0x84>)
 8008db6:	f7ff fcb1 	bl	800871c <_Z5printPKcz>
}
 8008dba:	bf00      	nop
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	08013474 	.word	0x08013474
 8008dc8:	08013498 	.word	0x08013498
 8008dcc:	080134bc 	.word	0x080134bc
 8008dd0:	080134e4 	.word	0x080134e4

08008dd4 <_ZN11UARTHandler19isNewMessageArrivedEv>:

void UARTHandler::setRealTimeData(bool requested){

}

bool UARTHandler::isNewMessageArrived() {
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
    return newDataAvailable;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 361c 	ldrb.w	r3, [r3, #1564]	; 0x61c
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <_ZN11UARTHandler19setNewDataAvailableEb>:

void UARTHandler::setNewDataAvailable(bool isArrived) {
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	460b      	mov	r3, r1
 8008df8:	70fb      	strb	r3, [r7, #3]
    newDataAvailable = isArrived;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	78fa      	ldrb	r2, [r7, #3]
 8008dfe:	f883 261c 	strb.w	r2, [r3, #1564]	; 0x61c
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
	...

08008e10 <_ZN11UARTHandler9onReceiveEv>:

void UARTHandler::onReceive() {
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]


    if (bufferIndex < sizeof(receiveBuffer) - 1) {
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 8008e1e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8008e22:	d822      	bhi.n	8008e6a <_ZN11UARTHandler9onReceiveEv+0x5a>
        receiveBuffer[bufferIndex++] = rxByte;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 8008e2a:	1c59      	adds	r1, r3, #1
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	f8c2 1618 	str.w	r1, [r2, #1560]	; 0x618
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	7b11      	ldrb	r1, [r2, #12]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	4413      	add	r3, r2
 8008e3a:	460a      	mov	r2, r1
 8008e3c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        // Check for message end (e.g., newline character)
      //  utils->print("Entered to this function \r\n");
        if (rxByte == '\n') {
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	7b1b      	ldrb	r3, [r3, #12]
 8008e44:	2b0a      	cmp	r3, #10
 8008e46:	d117      	bne.n	8008e78 <_ZN11UARTHandler9onReceiveEv+0x68>
            receiveBuffer[bufferIndex] = '\0';
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	4413      	add	r3, r2
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

            bufferIndex = 0; // Reset index for the next message
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            setNewDataAvailable(true);
 8008e60:	2101      	movs	r1, #1
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff ffc3 	bl	8008dee <_ZN11UARTHandler19setNewDataAvailableEb>
 8008e68:	e006      	b.n	8008e78 <_ZN11UARTHandler9onReceiveEv+0x68>
        }
    } else {
        // Handle buffer overflow
        print("Buffer overflow \r\n");
 8008e6a:	4809      	ldr	r0, [pc, #36]	; (8008e90 <_ZN11UARTHandler9onReceiveEv+0x80>)
 8008e6c:	f7ff fc56 	bl	800871c <_Z5printPKcz>
        bufferIndex = 0; // Reset buffer index
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    }


    HAL_UART_Receive_IT(huart, &rxByte, 1); // Prepare to receive the next byte
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6898      	ldr	r0, [r3, #8]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	330c      	adds	r3, #12
 8008e80:	2201      	movs	r2, #1
 8008e82:	4619      	mov	r1, r3
 8008e84:	f005 fa3b 	bl	800e2fe <HAL_UART_Receive_IT>

}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	08013514 	.word	0x08013514

08008e94 <_ZN11UARTHandler19processReceivedDataEv>:

void UARTHandler::processReceivedData() {
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08e      	sub	sp, #56	; 0x38
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
    if (!isNewMessageArrived()) return; // Early exit if no new data
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff ff99 	bl	8008dd4 <_ZN11UARTHandler19isNewMessageArrivedEv>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f083 0301 	eor.w	r3, r3, #1
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d177      	bne.n	8008f9e <_ZN11UARTHandler19processReceivedDataEv+0x10a>
    cJSON *json = cJSON_Parse(reinterpret_cast<const char*>(receiveBuffer));
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fc fbdd 	bl	8005674 <cJSON_Parse>
 8008eba:	6378      	str	r0, [r7, #52]	; 0x34
    if (json == NULL) {
 8008ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10e      	bne.n	8008ee0 <_ZN11UARTHandler19processReceivedDataEv+0x4c>
        const char *error_ptr = cJSON_GetErrorPtr();
 8008ec2:	f7fb fb13 	bl	80044ec <cJSON_GetErrorPtr>
 8008ec6:	6278      	str	r0, [r7, #36]	; 0x24
        if (error_ptr != NULL) {
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d054      	beq.n	8008f78 <_ZN11UARTHandler19processReceivedDataEv+0xe4>
            fprintf(stderr, "Error before: %s\n", error_ptr);
 8008ece:	4b36      	ldr	r3, [pc, #216]	; (8008fa8 <_ZN11UARTHandler19processReceivedDataEv+0x114>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed6:	4935      	ldr	r1, [pc, #212]	; (8008fac <_ZN11UARTHandler19processReceivedDataEv+0x118>)
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f007 fbc9 	bl	8010670 <fiprintf>
 8008ede:	e04b      	b.n	8008f78 <_ZN11UARTHandler19processReceivedDataEv+0xe4>
        }
    } else {
        cJSON *commandItem = cJSON_GetObjectItemCaseSensitive(json, "type");
 8008ee0:	4933      	ldr	r1, [pc, #204]	; (8008fb0 <_ZN11UARTHandler19processReceivedDataEv+0x11c>)
 8008ee2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008ee4:	f7fd f9e7 	bl	80062b6 <cJSON_GetObjectItemCaseSensitive>
 8008ee8:	6338      	str	r0, [r7, #48]	; 0x30
        if (cJSON_IsNumber(commandItem)) {
 8008eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eec:	f7fd fb92 	bl	8006614 <cJSON_IsNumber>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bf14      	ite	ne
 8008ef6:	2301      	movne	r3, #1
 8008ef8:	2300      	moveq	r3, #0
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d038      	beq.n	8008f72 <_ZN11UARTHandler19processReceivedDataEv+0xde>
            int type = commandItem->valueint;
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	62fb      	str	r3, [r7, #44]	; 0x2c

            switch(type) {
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d830      	bhi.n	8008f70 <_ZN11UARTHandler19processReceivedDataEv+0xdc>
 8008f0e:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <_ZN11UARTHandler19processReceivedDataEv+0x80>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f29 	.word	0x08008f29
 8008f18:	08008f71 	.word	0x08008f71
 8008f1c:	08008f71 	.word	0x08008f71
 8008f20:	08008f71 	.word	0x08008f71
 8008f24:	08008f71 	.word	0x08008f71
                case INFO_TYPE: {
                    utils->print("Message has been arrived: %d\r\n", type);
 8008f28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f2a:	4822      	ldr	r0, [pc, #136]	; (8008fb4 <_ZN11UARTHandler19processReceivedDataEv+0x120>)
 8008f2c:	f7ff fae6 	bl	80084fc <_ZN5Utils5printEPKcz>
                    // Scope introduced for INFO_TYPE case
                    std::string data = config->getInfoList();
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	f107 030c 	add.w	r3, r7, #12
 8008f38:	4611      	mov	r1, r2
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fd9c 	bl	8009a78 <_ZN6Config11getInfoListB5cxx11Ev>
                    const char* dataToSend = data.c_str();
 8008f40:	f107 030c 	add.w	r3, r7, #12
 8008f44:	4618      	mov	r0, r3
 8008f46:	f006 fb45 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008f4a:	62b8      	str	r0, [r7, #40]	; 0x28
                    HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(const_cast<char*>(dataToSend)), strlen(dataToSend), HAL_MAX_DELAY);
 8008f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f4e:	f7f7 f99f 	bl	8000290 <strlen>
 8008f52:	4603      	mov	r3, r0
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	f04f 33ff 	mov.w	r3, #4294967295
 8008f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f5c:	4816      	ldr	r0, [pc, #88]	; (8008fb8 <_ZN11UARTHandler19processReceivedDataEv+0x124>)
 8008f5e:	f005 f943 	bl	800e1e8 <HAL_UART_Transmit>
                    break;
 8008f62:	bf00      	nop
                }
 8008f64:	f107 030c 	add.w	r3, r7, #12
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f006 fa39 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008f6e:	e000      	b.n	8008f72 <_ZN11UARTHandler19processReceivedDataEv+0xde>
                    break;
                }
                // Continue for other cases, each in its own scope if needed
                default: {
                    // Handle unknown type
                    break;
 8008f70:	bf00      	nop
                }
            }
        }
        cJSON_Delete(json); // Ensure json is deleted here to avoid memory leak
 8008f72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008f74:	f7fb fb72 	bl	800465c <cJSON_Delete>
    }

    setNewDataAvailable(false); // Reset the flag after processing
 8008f78:	2100      	movs	r1, #0
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff ff37 	bl	8008dee <_ZN11UARTHandler19setNewDataAvailableEb>
    memset(receiveBuffer, 0, bufferIndex); // Clear the buffer
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f503 6083 	add.w	r0, r3, #1048	; 0x418
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	2100      	movs	r1, #0
 8008f90:	f007 fc82 	bl	8010898 <memset>
    bufferIndex = 0; // Ready for new data
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
 8008f9c:	e000      	b.n	8008fa0 <_ZN11UARTHandler19processReceivedDataEv+0x10c>
    if (!isNewMessageArrived()) return; // Early exit if no new data
 8008f9e:	bf00      	nop
}
 8008fa0:	3738      	adds	r7, #56	; 0x38
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000228 	.word	0x20000228
 8008fac:	08013528 	.word	0x08013528
 8008fb0:	0801353c 	.word	0x0801353c
 8008fb4:	08013544 	.word	0x08013544
 8008fb8:	200013a4 	.word	0x200013a4

08008fbc <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7f7 f963 	bl	8000290 <strlen>
 8008fca:	4603      	mov	r3, r0
      }
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>:
    struct array
 8008fd4:	b5b0      	push	{r4, r5, r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2407      	movs	r4, #7
 8008fe0:	461d      	mov	r5, r3
 8008fe2:	e004      	b.n	8008fee <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev+0x1a>
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f006 f9d3 	bl	800f390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8008fea:	3518      	adds	r5, #24
 8008fec:	3c01      	subs	r4, #1
 8008fee:	2c00      	cmp	r4, #0
 8008ff0:	daf8      	bge.n	8008fe4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev+0x10>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bdb0      	pop	{r4, r5, r7, pc}

08008ffc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>:
 8008ffc:	b590      	push	{r4, r7, lr}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev+0x24>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	429c      	cmp	r4, r3
 8009014:	d004      	beq.n	8009020 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev+0x24>
 8009016:	3c18      	subs	r4, #24
 8009018:	4620      	mov	r0, r4
 800901a:	f006 f9e1 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800901e:	e7f7      	b.n	8009010 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev+0x14>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4618      	mov	r0, r3
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	bd90      	pop	{r4, r7, pc}

0800902a <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev>:
 800902a:	b5b0      	push	{r4, r5, r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	240f      	movs	r4, #15
 8009036:	461d      	mov	r5, r3
 8009038:	e004      	b.n	8009044 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev+0x1a>
 800903a:	4628      	mov	r0, r5
 800903c:	f006 f9a8 	bl	800f390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8009040:	3518      	adds	r5, #24
 8009042:	3c01      	subs	r4, #1
 8009044:	2c00      	cmp	r4, #0
 8009046:	daf8      	bge.n	800903a <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev+0x10>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bdb0      	pop	{r4, r5, r7, pc}

08009052 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>:
 8009052:	b590      	push	{r4, r7, lr}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00a      	beq.n	8009076 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev+0x24>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	429c      	cmp	r4, r3
 800906a:	d004      	beq.n	8009076 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev+0x24>
 800906c:	3c18      	subs	r4, #24
 800906e:	4620      	mov	r0, r4
 8009070:	f006 f9b6 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009074:	e7f7      	b.n	8009066 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev+0x14>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	bd90      	pop	{r4, r7, pc}

08009080 <_ZN6ConfigC1Ev>:
#include "config.h"

uint8_t mac[6];

Config::Config(){
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	3320      	adds	r3, #32
 800908c:	4618      	mov	r0, r3
 800908e:	f006 f97f 	bl	800f390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3338      	adds	r3, #56	; 0x38
 8009096:	4618      	mov	r0, r3
 8009098:	f006 f97a 	bl	800f390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3350      	adds	r3, #80	; 0x50
 80090a0:	4618      	mov	r0, r3
 80090a2:	f006 f975 	bl	800f390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3368      	adds	r3, #104	; 0x68
 80090aa:	4618      	mov	r0, r3
 80090ac:	f006 f970 	bl	800f390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3380      	adds	r3, #128	; 0x80
 80090b4:	4618      	mov	r0, r3
 80090b6:	f006 f96b 	bl	800f390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	339c      	adds	r3, #156	; 0x9c
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff ff88 	bl	8008fd4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff ffad 	bl	800902a <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff ff7c 	bl	8008fd4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>

}
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <_ZN6Config4initEv>:

void Config::init() {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80090f4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80090f8:	6018      	str	r0, [r3, #0]

    setBrokerIP({172, 30,1,25});
 80090fa:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80090fe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009102:	4ae7      	ldr	r2, [pc, #924]	; (80094a0 <_ZN6Config4initEv+0x3b8>)
 8009104:	6812      	ldr	r2, [r2, #0]
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	f107 0208 	add.w	r2, r7, #8
 800910c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009110:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009114:	4611      	mov	r1, r2
 8009116:	6818      	ldr	r0, [r3, #0]
 8009118:	f001 f844 	bl	800a1a4 <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>
    setBrokerPort(1883);
 800911c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009120:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009124:	f240 715b 	movw	r1, #1883	; 0x75b
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	f001 f84a 	bl	800a1c2 <_ZN6Config13setBrokerPortEt>
    setIP({172, 30, 1, 123});
 800912e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009132:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8009136:	4adb      	ldr	r2, [pc, #876]	; (80094a4 <_ZN6Config4initEv+0x3bc>)
 8009138:	6812      	ldr	r2, [r2, #0]
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	f107 020c 	add.w	r2, r7, #12
 8009140:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009144:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009148:	4611      	mov	r1, r2
 800914a:	6818      	ldr	r0, [r3, #0]
 800914c:	f001 f848 	bl	800a1e0 <_ZN6Config5setIPERKSt5arrayIhLj4EE>
    setGateway({172, 30, 1, 254});
 8009150:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009154:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8009158:	4ad3      	ldr	r2, [pc, #844]	; (80094a8 <_ZN6Config4initEv+0x3c0>)
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	f107 0210 	add.w	r2, r7, #16
 8009162:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009166:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800916a:	4611      	mov	r1, r2
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	f001 f847 	bl	800a200 <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>
    setSubnet({255, 255, 255, 0});
 8009172:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009176:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800917a:	4acc      	ldr	r2, [pc, #816]	; (80094ac <_ZN6Config4initEv+0x3c4>)
 800917c:	6812      	ldr	r2, [r2, #0]
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	f107 0214 	add.w	r2, r7, #20
 8009184:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009188:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800918c:	4611      	mov	r1, r2
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	f001 f846 	bl	800a220 <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>
    setDNS({8, 8, 8, 8}); // Google's DNS for example
 8009194:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009198:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800919c:	4ac4      	ldr	r2, [pc, #784]	; (80094b0 <_ZN6Config4initEv+0x3c8>)
 800919e:	6812      	ldr	r2, [r2, #0]
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	f107 0218 	add.w	r2, r7, #24
 80091a6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80091aa:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80091ae:	4611      	mov	r1, r2
 80091b0:	6818      	ldr	r0, [r3, #0]
 80091b2:	f001 f845 	bl	800a240 <_ZN6Config6setDNSERKSt5arrayIhLj4EE>
    setKeepAliveInterval(60);
 80091b6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80091ba:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80091be:	213c      	movs	r1, #60	; 0x3c
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	f001 f84d 	bl	800a260 <_ZN6Config20setKeepAliveIntervalEt>
    setDHCPEnabled(true);
 80091c6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80091ca:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80091ce:	2101      	movs	r1, #1
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	f001 f854 	bl	800a27e <_ZN6Config14setDHCPEnabledEb>
    setIntervalTime(1000); // Example interval time
 80091d6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80091da:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80091de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80091e2:	6818      	ldr	r0, [r3, #0]
 80091e4:	f001 f85a 	bl	800a29c <_ZN6Config15setIntervalTimeEm>

    setUsername("user");
 80091e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091ec:	4618      	mov	r0, r3
 80091ee:	f006 f801 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80091f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80091f6:	f107 031c 	add.w	r3, r7, #28
 80091fa:	49ae      	ldr	r1, [pc, #696]	; (80094b4 <_ZN6Config4initEv+0x3cc>)
 80091fc:	4618      	mov	r0, r3
 80091fe:	f006 fa45 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009202:	f107 021c 	add.w	r2, r7, #28
 8009206:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800920a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800920e:	4611      	mov	r1, r2
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	f001 f851 	bl	800a2b8 <_ZN6Config11setUsernameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009216:	f107 031c 	add.w	r3, r7, #28
 800921a:	4618      	mov	r0, r3
 800921c:	f006 f8e0 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009220:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009224:	4618      	mov	r0, r3
 8009226:	f005 ffe7 	bl	800f1f8 <_ZNSaIcED1Ev>
    setClientId(std::string(clientId));
 800922a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800922e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009238:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f006 f9f0 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009244:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009248:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800924c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009250:	4611      	mov	r1, r2
 8009252:	6818      	ldr	r0, [r3, #0]
 8009254:	f001 f83f 	bl	800a2d6 <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009258:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800925c:	4618      	mov	r0, r3
 800925e:	f006 f8bf 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    setPassword("pass");
 8009262:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009266:	4618      	mov	r0, r3
 8009268:	f005 ffc4 	bl	800f1f4 <_ZNSaIcEC1Ev>
 800926c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009270:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009274:	4990      	ldr	r1, [pc, #576]	; (80094b8 <_ZN6Config4initEv+0x3d0>)
 8009276:	4618      	mov	r0, r3
 8009278:	f006 fa08 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800927c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009280:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009284:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009288:	4611      	mov	r1, r2
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	f001 f832 	bl	800a2f4 <_ZN6Config11setPasswordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009290:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009294:	4618      	mov	r0, r3
 8009296:	f006 f8a3 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800929a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800929e:	4618      	mov	r0, r3
 80092a0:	f005 ffaa 	bl	800f1f8 <_ZNSaIcED1Ev>
    setTopicPublish("topic/pub");
 80092a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80092a8:	4618      	mov	r0, r3
 80092aa:	f005 ffa3 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80092ae:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80092b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80092b6:	4981      	ldr	r1, [pc, #516]	; (80094bc <_ZN6Config4initEv+0x3d4>)
 80092b8:	4618      	mov	r0, r3
 80092ba:	f006 f9e7 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80092be:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80092c2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80092c6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80092ca:	4611      	mov	r1, r2
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	f001 f82f 	bl	800a330 <_ZN6Config15setTopicPublishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80092d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80092d6:	4618      	mov	r0, r3
 80092d8:	f006 f882 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80092dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80092e0:	4618      	mov	r0, r3
 80092e2:	f005 ff89 	bl	800f1f8 <_ZNSaIcED1Ev>
    setQoS(1); // Quality of Service level
 80092e6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80092ea:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80092ee:	2101      	movs	r1, #1
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	f001 f82c 	bl	800a34e <_ZN6Config6setQoSEi>

    setAnalogInputNames({"Analog1", "Analog2", "Analog3", "Analog4", "Analog5", "Analog6", "Analog7", "Analog8",});
 80092f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80092fa:	4618      	mov	r0, r3
 80092fc:	f005 ff7a 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009300:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009304:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009308:	496d      	ldr	r1, [pc, #436]	; (80094c0 <_ZN6Config4initEv+0x3d8>)
 800930a:	4618      	mov	r0, r3
 800930c:	f006 f9be 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009310:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009314:	4618      	mov	r0, r3
 8009316:	f005 ff6d 	bl	800f1f4 <_ZNSaIcEC1Ev>
 800931a:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 800931e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009322:	3318      	adds	r3, #24
 8009324:	4967      	ldr	r1, [pc, #412]	; (80094c4 <_ZN6Config4initEv+0x3dc>)
 8009326:	4618      	mov	r0, r3
 8009328:	f006 f9b0 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800932c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009330:	4618      	mov	r0, r3
 8009332:	f005 ff5f 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009336:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800933a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800933e:	3330      	adds	r3, #48	; 0x30
 8009340:	4961      	ldr	r1, [pc, #388]	; (80094c8 <_ZN6Config4initEv+0x3e0>)
 8009342:	4618      	mov	r0, r3
 8009344:	f006 f9a2 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009348:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800934c:	4618      	mov	r0, r3
 800934e:	f005 ff51 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009352:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8009356:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800935a:	3348      	adds	r3, #72	; 0x48
 800935c:	495b      	ldr	r1, [pc, #364]	; (80094cc <_ZN6Config4initEv+0x3e4>)
 800935e:	4618      	mov	r0, r3
 8009360:	f006 f994 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009364:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009368:	4618      	mov	r0, r3
 800936a:	f005 ff43 	bl	800f1f4 <_ZNSaIcEC1Ev>
 800936e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009372:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009376:	3360      	adds	r3, #96	; 0x60
 8009378:	4955      	ldr	r1, [pc, #340]	; (80094d0 <_ZN6Config4initEv+0x3e8>)
 800937a:	4618      	mov	r0, r3
 800937c:	f006 f986 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009380:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8009384:	4618      	mov	r0, r3
 8009386:	f005 ff35 	bl	800f1f4 <_ZNSaIcEC1Ev>
 800938a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 800938e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009392:	3378      	adds	r3, #120	; 0x78
 8009394:	494f      	ldr	r1, [pc, #316]	; (80094d4 <_ZN6Config4initEv+0x3ec>)
 8009396:	4618      	mov	r0, r3
 8009398:	f006 f978 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800939c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80093a0:	4618      	mov	r0, r3
 80093a2:	f005 ff27 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80093a6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80093aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80093ae:	3390      	adds	r3, #144	; 0x90
 80093b0:	4949      	ldr	r1, [pc, #292]	; (80094d8 <_ZN6Config4initEv+0x3f0>)
 80093b2:	4618      	mov	r0, r3
 80093b4:	f006 f96a 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80093b8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80093bc:	4618      	mov	r0, r3
 80093be:	f005 ff19 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80093c2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80093c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80093ca:	33a8      	adds	r3, #168	; 0xa8
 80093cc:	4943      	ldr	r1, [pc, #268]	; (80094dc <_ZN6Config4initEv+0x3f4>)
 80093ce:	4618      	mov	r0, r3
 80093d0:	f006 f95c 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80093d4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80093d8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80093dc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80093e0:	4611      	mov	r1, r2
 80093e2:	6818      	ldr	r0, [r3, #0]
 80093e4:	f000 ffc2 	bl	800a36c <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
 80093e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff fe05 	bl	8008ffc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 80093f2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80093f6:	4618      	mov	r0, r3
 80093f8:	f005 fefe 	bl	800f1f8 <_ZNSaIcED1Ev>
 80093fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009400:	4618      	mov	r0, r3
 8009402:	f005 fef9 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009406:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800940a:	4618      	mov	r0, r3
 800940c:	f005 fef4 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009410:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009414:	4618      	mov	r0, r3
 8009416:	f005 feef 	bl	800f1f8 <_ZNSaIcED1Ev>
 800941a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800941e:	4618      	mov	r0, r3
 8009420:	f005 feea 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009424:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009428:	4618      	mov	r0, r3
 800942a:	f005 fee5 	bl	800f1f8 <_ZNSaIcED1Ev>
 800942e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009432:	4618      	mov	r0, r3
 8009434:	f005 fee0 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009438:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800943c:	4618      	mov	r0, r3
 800943e:	f005 fedb 	bl	800f1f8 <_ZNSaIcED1Ev>
    setDigitalInputNames({"DI1", "DI2", "DI3", "DI4", "DI5", "DI6", "DI7", "DI8", "DI9", "DI10", "DI11", "DI12", "DI13", "DI14", "DI15", "DI16"});
 8009442:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8009446:	4618      	mov	r0, r3
 8009448:	f005 fed4 	bl	800f1f4 <_ZNSaIcEC1Ev>
 800944c:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8009450:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009454:	4922      	ldr	r1, [pc, #136]	; (80094e0 <_ZN6Config4initEv+0x3f8>)
 8009456:	4618      	mov	r0, r3
 8009458:	f006 f918 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800945c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8009460:	4618      	mov	r0, r3
 8009462:	f005 fec7 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009466:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 800946a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800946e:	3318      	adds	r3, #24
 8009470:	491c      	ldr	r1, [pc, #112]	; (80094e4 <_ZN6Config4initEv+0x3fc>)
 8009472:	4618      	mov	r0, r3
 8009474:	f006 f90a 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009478:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800947c:	4618      	mov	r0, r3
 800947e:	f005 feb9 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009482:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8009486:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800948a:	3330      	adds	r3, #48	; 0x30
 800948c:	4916      	ldr	r1, [pc, #88]	; (80094e8 <_ZN6Config4initEv+0x400>)
 800948e:	4618      	mov	r0, r3
 8009490:	f006 f8fc 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009494:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8009498:	4618      	mov	r0, r3
 800949a:	f005 feab 	bl	800f1f4 <_ZNSaIcEC1Ev>
 800949e:	e025      	b.n	80094ec <_ZN6Config4initEv+0x404>
 80094a0:	08013678 	.word	0x08013678
 80094a4:	0801367c 	.word	0x0801367c
 80094a8:	08013680 	.word	0x08013680
 80094ac:	08013684 	.word	0x08013684
 80094b0:	08013688 	.word	0x08013688
 80094b4:	08013580 	.word	0x08013580
 80094b8:	08013588 	.word	0x08013588
 80094bc:	08013590 	.word	0x08013590
 80094c0:	0801359c 	.word	0x0801359c
 80094c4:	080135a4 	.word	0x080135a4
 80094c8:	080135ac 	.word	0x080135ac
 80094cc:	080135b4 	.word	0x080135b4
 80094d0:	080135bc 	.word	0x080135bc
 80094d4:	080135c4 	.word	0x080135c4
 80094d8:	080135cc 	.word	0x080135cc
 80094dc:	080135d4 	.word	0x080135d4
 80094e0:	080135dc 	.word	0x080135dc
 80094e4:	080135e0 	.word	0x080135e0
 80094e8:	080135e4 	.word	0x080135e4
 80094ec:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 80094f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80094f4:	3348      	adds	r3, #72	; 0x48
 80094f6:	49dd      	ldr	r1, [pc, #884]	; (800986c <_ZN6Config4initEv+0x784>)
 80094f8:	4618      	mov	r0, r3
 80094fa:	f006 f8c7 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80094fe:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8009502:	4618      	mov	r0, r3
 8009504:	f005 fe76 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009508:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800950c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009510:	3360      	adds	r3, #96	; 0x60
 8009512:	49d7      	ldr	r1, [pc, #860]	; (8009870 <_ZN6Config4initEv+0x788>)
 8009514:	4618      	mov	r0, r3
 8009516:	f006 f8b9 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800951a:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800951e:	4618      	mov	r0, r3
 8009520:	f005 fe68 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009524:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8009528:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800952c:	3378      	adds	r3, #120	; 0x78
 800952e:	49d1      	ldr	r1, [pc, #836]	; (8009874 <_ZN6Config4initEv+0x78c>)
 8009530:	4618      	mov	r0, r3
 8009532:	f006 f8ab 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009536:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800953a:	4618      	mov	r0, r3
 800953c:	f005 fe5a 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009540:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8009544:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009548:	3390      	adds	r3, #144	; 0x90
 800954a:	49cb      	ldr	r1, [pc, #812]	; (8009878 <_ZN6Config4initEv+0x790>)
 800954c:	4618      	mov	r0, r3
 800954e:	f006 f89d 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009552:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8009556:	4618      	mov	r0, r3
 8009558:	f005 fe4c 	bl	800f1f4 <_ZNSaIcEC1Ev>
 800955c:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8009560:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009564:	33a8      	adds	r3, #168	; 0xa8
 8009566:	49c5      	ldr	r1, [pc, #788]	; (800987c <_ZN6Config4initEv+0x794>)
 8009568:	4618      	mov	r0, r3
 800956a:	f006 f88f 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800956e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8009572:	4618      	mov	r0, r3
 8009574:	f005 fe3e 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009578:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800957c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009580:	33c0      	adds	r3, #192	; 0xc0
 8009582:	49bf      	ldr	r1, [pc, #764]	; (8009880 <_ZN6Config4initEv+0x798>)
 8009584:	4618      	mov	r0, r3
 8009586:	f006 f881 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800958a:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800958e:	4618      	mov	r0, r3
 8009590:	f005 fe30 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009594:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8009598:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800959c:	33d8      	adds	r3, #216	; 0xd8
 800959e:	49b9      	ldr	r1, [pc, #740]	; (8009884 <_ZN6Config4initEv+0x79c>)
 80095a0:	4618      	mov	r0, r3
 80095a2:	f006 f873 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80095a6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80095aa:	4618      	mov	r0, r3
 80095ac:	f005 fe22 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80095b0:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80095b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80095b8:	33f0      	adds	r3, #240	; 0xf0
 80095ba:	49b3      	ldr	r1, [pc, #716]	; (8009888 <_ZN6Config4initEv+0x7a0>)
 80095bc:	4618      	mov	r0, r3
 80095be:	f006 f865 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80095c2:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80095c6:	4618      	mov	r0, r3
 80095c8:	f005 fe14 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80095cc:	f507 7245 	add.w	r2, r7, #788	; 0x314
 80095d0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80095d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80095d8:	49ac      	ldr	r1, [pc, #688]	; (800988c <_ZN6Config4initEv+0x7a4>)
 80095da:	4618      	mov	r0, r3
 80095dc:	f006 f856 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80095e0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80095e4:	4618      	mov	r0, r3
 80095e6:	f005 fe05 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80095ea:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80095ee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80095f2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80095f6:	49a6      	ldr	r1, [pc, #664]	; (8009890 <_ZN6Config4initEv+0x7a8>)
 80095f8:	4618      	mov	r0, r3
 80095fa:	f006 f847 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80095fe:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8009602:	4618      	mov	r0, r3
 8009604:	f005 fdf6 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009608:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 800960c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009610:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009614:	499f      	ldr	r1, [pc, #636]	; (8009894 <_ZN6Config4initEv+0x7ac>)
 8009616:	4618      	mov	r0, r3
 8009618:	f006 f838 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800961c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009620:	4618      	mov	r0, r3
 8009622:	f005 fde7 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009626:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800962a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800962e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009632:	4999      	ldr	r1, [pc, #612]	; (8009898 <_ZN6Config4initEv+0x7b0>)
 8009634:	4618      	mov	r0, r3
 8009636:	f006 f829 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800963a:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800963e:	4618      	mov	r0, r3
 8009640:	f005 fdd8 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009644:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8009648:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800964c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009650:	4992      	ldr	r1, [pc, #584]	; (800989c <_ZN6Config4initEv+0x7b4>)
 8009652:	4618      	mov	r0, r3
 8009654:	f006 f81a 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009658:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800965c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009660:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009664:	4611      	mov	r1, r2
 8009666:	6818      	ldr	r0, [r3, #0]
 8009668:	f000 fe8f 	bl	800a38a <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>
 800966c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff fcee 	bl	8009052 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
 8009676:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800967a:	4618      	mov	r0, r3
 800967c:	f005 fdbc 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009680:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009684:	4618      	mov	r0, r3
 8009686:	f005 fdb7 	bl	800f1f8 <_ZNSaIcED1Ev>
 800968a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800968e:	4618      	mov	r0, r3
 8009690:	f005 fdb2 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009694:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8009698:	4618      	mov	r0, r3
 800969a:	f005 fdad 	bl	800f1f8 <_ZNSaIcED1Ev>
 800969e:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80096a2:	4618      	mov	r0, r3
 80096a4:	f005 fda8 	bl	800f1f8 <_ZNSaIcED1Ev>
 80096a8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80096ac:	4618      	mov	r0, r3
 80096ae:	f005 fda3 	bl	800f1f8 <_ZNSaIcED1Ev>
 80096b2:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80096b6:	4618      	mov	r0, r3
 80096b8:	f005 fd9e 	bl	800f1f8 <_ZNSaIcED1Ev>
 80096bc:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80096c0:	4618      	mov	r0, r3
 80096c2:	f005 fd99 	bl	800f1f8 <_ZNSaIcED1Ev>
 80096c6:	f507 7341 	add.w	r3, r7, #772	; 0x304
 80096ca:	4618      	mov	r0, r3
 80096cc:	f005 fd94 	bl	800f1f8 <_ZNSaIcED1Ev>
 80096d0:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80096d4:	4618      	mov	r0, r3
 80096d6:	f005 fd8f 	bl	800f1f8 <_ZNSaIcED1Ev>
 80096da:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80096de:	4618      	mov	r0, r3
 80096e0:	f005 fd8a 	bl	800f1f8 <_ZNSaIcED1Ev>
 80096e4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80096e8:	4618      	mov	r0, r3
 80096ea:	f005 fd85 	bl	800f1f8 <_ZNSaIcED1Ev>
 80096ee:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80096f2:	4618      	mov	r0, r3
 80096f4:	f005 fd80 	bl	800f1f8 <_ZNSaIcED1Ev>
 80096f8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f005 fd7b 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009702:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8009706:	4618      	mov	r0, r3
 8009708:	f005 fd76 	bl	800f1f8 <_ZNSaIcED1Ev>
 800970c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8009710:	4618      	mov	r0, r3
 8009712:	f005 fd71 	bl	800f1f8 <_ZNSaIcED1Ev>
    setDigitalOutputNames({"Relay1", "Relay2", "Relay3", "Relay4", "Relay5", "Relay6", "Relay7", "Relay8",});
 8009716:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800971a:	4618      	mov	r0, r3
 800971c:	f005 fd6a 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009720:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8009724:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009728:	495d      	ldr	r1, [pc, #372]	; (80098a0 <_ZN6Config4initEv+0x7b8>)
 800972a:	4618      	mov	r0, r3
 800972c:	f005 ffae 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009730:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8009734:	4618      	mov	r0, r3
 8009736:	f005 fd5d 	bl	800f1f4 <_ZNSaIcEC1Ev>
 800973a:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 800973e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009742:	3318      	adds	r3, #24
 8009744:	4957      	ldr	r1, [pc, #348]	; (80098a4 <_ZN6Config4initEv+0x7bc>)
 8009746:	4618      	mov	r0, r3
 8009748:	f005 ffa0 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800974c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8009750:	4618      	mov	r0, r3
 8009752:	f005 fd4f 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009756:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800975a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800975e:	3330      	adds	r3, #48	; 0x30
 8009760:	4951      	ldr	r1, [pc, #324]	; (80098a8 <_ZN6Config4initEv+0x7c0>)
 8009762:	4618      	mov	r0, r3
 8009764:	f005 ff92 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009768:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 800976c:	4618      	mov	r0, r3
 800976e:	f005 fd41 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009772:	f507 727d 	add.w	r2, r7, #1012	; 0x3f4
 8009776:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800977a:	3348      	adds	r3, #72	; 0x48
 800977c:	494b      	ldr	r1, [pc, #300]	; (80098ac <_ZN6Config4initEv+0x7c4>)
 800977e:	4618      	mov	r0, r3
 8009780:	f005 ff84 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009784:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8009788:	4618      	mov	r0, r3
 800978a:	f005 fd33 	bl	800f1f4 <_ZNSaIcEC1Ev>
 800978e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8009792:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009796:	3360      	adds	r3, #96	; 0x60
 8009798:	4945      	ldr	r1, [pc, #276]	; (80098b0 <_ZN6Config4initEv+0x7c8>)
 800979a:	4618      	mov	r0, r3
 800979c:	f005 ff76 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80097a0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80097a4:	4618      	mov	r0, r3
 80097a6:	f005 fd25 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80097aa:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 80097ae:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80097b2:	3378      	adds	r3, #120	; 0x78
 80097b4:	493f      	ldr	r1, [pc, #252]	; (80098b4 <_ZN6Config4initEv+0x7cc>)
 80097b6:	4618      	mov	r0, r3
 80097b8:	f005 ff68 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80097bc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80097c0:	4618      	mov	r0, r3
 80097c2:	f005 fd17 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80097c6:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80097ca:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80097ce:	3390      	adds	r3, #144	; 0x90
 80097d0:	4939      	ldr	r1, [pc, #228]	; (80098b8 <_ZN6Config4initEv+0x7d0>)
 80097d2:	4618      	mov	r0, r3
 80097d4:	f005 ff5a 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80097d8:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80097dc:	4618      	mov	r0, r3
 80097de:	f005 fd09 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80097e2:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80097e6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80097ea:	33a8      	adds	r3, #168	; 0xa8
 80097ec:	4933      	ldr	r1, [pc, #204]	; (80098bc <_ZN6Config4initEv+0x7d4>)
 80097ee:	4618      	mov	r0, r3
 80097f0:	f005 ff4c 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80097f4:	f507 724a 	add.w	r2, r7, #808	; 0x328
 80097f8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80097fc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009800:	4611      	mov	r1, r2
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	f000 fdd1 	bl	800a3aa <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
 8009808:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff fbf5 	bl	8008ffc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 8009812:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8009816:	4618      	mov	r0, r3
 8009818:	f005 fcee 	bl	800f1f8 <_ZNSaIcED1Ev>
 800981c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8009820:	4618      	mov	r0, r3
 8009822:	f005 fce9 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009826:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800982a:	4618      	mov	r0, r3
 800982c:	f005 fce4 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009830:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8009834:	4618      	mov	r0, r3
 8009836:	f005 fcdf 	bl	800f1f8 <_ZNSaIcED1Ev>
 800983a:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 800983e:	4618      	mov	r0, r3
 8009840:	f005 fcda 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009844:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8009848:	4618      	mov	r0, r3
 800984a:	f005 fcd5 	bl	800f1f8 <_ZNSaIcED1Ev>
 800984e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8009852:	4618      	mov	r0, r3
 8009854:	f005 fcd0 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009858:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800985c:	4618      	mov	r0, r3
 800985e:	f005 fccb 	bl	800f1f8 <_ZNSaIcED1Ev>

}
 8009862:	bf00      	nop
 8009864:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	080135e8 	.word	0x080135e8
 8009870:	080135ec 	.word	0x080135ec
 8009874:	080135f0 	.word	0x080135f0
 8009878:	080135f4 	.word	0x080135f4
 800987c:	080135f8 	.word	0x080135f8
 8009880:	080135fc 	.word	0x080135fc
 8009884:	08013600 	.word	0x08013600
 8009888:	08013608 	.word	0x08013608
 800988c:	08013610 	.word	0x08013610
 8009890:	08013618 	.word	0x08013618
 8009894:	08013620 	.word	0x08013620
 8009898:	08013628 	.word	0x08013628
 800989c:	08013630 	.word	0x08013630
 80098a0:	08013638 	.word	0x08013638
 80098a4:	08013640 	.word	0x08013640
 80098a8:	08013648 	.word	0x08013648
 80098ac:	08013650 	.word	0x08013650
 80098b0:	08013658 	.word	0x08013658
 80098b4:	08013660 	.word	0x08013660
 80098b8:	08013668 	.word	0x08013668
 80098bc:	08013670 	.word	0x08013670

080098c0 <_ZN6Config19getDigitalInputNameB5cxx11Ei>:

std::string Config::getAnalogInputName(int index){
	return analog_input_names[index];
}

std::string Config::getDigitalInputName(int index){
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
	return digital_input_names[index];
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	4611      	mov	r1, r2
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 fd86 	bl	800a3e8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>
 80098dc:	4603      	mov	r3, r0
 80098de:	4619      	mov	r1, r3
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f005 fe9f 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <_ZN6Config20getDigitalOutputNameB5cxx11Ei>:

std::string Config::getDigitalOutputName(int index){
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
	return digital_output_names[index];
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	4611      	mov	r1, r2
 8009904:	4618      	mov	r0, r3
 8009906:	f000 fd60 	bl	800a3ca <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 800990a:	4603      	mov	r3, r0
 800990c:	4619      	mov	r1, r3
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f005 fe88 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <_ZN6Config14initmqttConfigEv>:

void Config::initmqttConfig() {
 800991c:	b580      	push	{r7, lr}
 800991e:	b098      	sub	sp, #96	; 0x60
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
    uint8_t mac[6];
    getSHAR(mac);
 8009924:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009928:	2206      	movs	r2, #6
 800992a:	4619      	mov	r1, r3
 800992c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009930:	f7f8 ff38 	bl	80027a4 <WIZCHIP_READ_BUF>
    char macString[18] = {0}; // Initialize macString with zeros
 8009934:	2300      	movs	r3, #0
 8009936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009938:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800993c:	2200      	movs	r2, #0
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	605a      	str	r2, [r3, #4]
 8009942:	609a      	str	r2, [r3, #8]
 8009944:	819a      	strh	r2, [r3, #12]
    for (int i = 0; i < 6; ++i) {
 8009946:	2300      	movs	r3, #0
 8009948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800994a:	e026      	b.n	800999a <_ZN6Config14initmqttConfigEv+0x7e>
        if (i > 0) {
 800994c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800994e:	2b00      	cmp	r3, #0
 8009950:	dd0e      	ble.n	8009970 <_ZN6Config14initmqttConfigEv+0x54>
            strcat(macString, ":"); // Add ':' between bytes except for the first one
 8009952:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009956:	4618      	mov	r0, r3
 8009958:	f7f6 fc9a 	bl	8000290 <strlen>
 800995c:	4603      	mov	r3, r0
 800995e:	461a      	mov	r2, r3
 8009960:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009964:	4413      	add	r3, r2
 8009966:	492c      	ldr	r1, [pc, #176]	; (8009a18 <_ZN6Config14initmqttConfigEv+0xfc>)
 8009968:	461a      	mov	r2, r3
 800996a:	460b      	mov	r3, r1
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	8013      	strh	r3, [r2, #0]
        }
        sprintf(macString + strlen(macString), "%02X", mac[i]); // Append two characters per byte
 8009970:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009974:	4618      	mov	r0, r3
 8009976:	f7f6 fc8b 	bl	8000290 <strlen>
 800997a:	4602      	mov	r2, r0
 800997c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009980:	1898      	adds	r0, r3, r2
 8009982:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009988:	4413      	add	r3, r2
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	461a      	mov	r2, r3
 800998e:	4923      	ldr	r1, [pc, #140]	; (8009a1c <_ZN6Config14initmqttConfigEv+0x100>)
 8009990:	f006 fe9e 	bl	80106d0 <siprintf>
    for (int i = 0; i < 6; ++i) {
 8009994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009996:	3301      	adds	r3, #1
 8009998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800999a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800999c:	2b05      	cmp	r3, #5
 800999e:	ddd5      	ble.n	800994c <_ZN6Config14initmqttConfigEv+0x30>
    }

     setSHAR(mac); // Commented out because it seems unnecessary here
 80099a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80099a4:	2206      	movs	r2, #6
 80099a6:	4619      	mov	r1, r3
 80099a8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80099ac:	f7f8 ff5a 	bl	8002864 <WIZCHIP_WRITE_BUF>
    std::string clientID = std::string(macString);
 80099b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80099b4:	4618      	mov	r0, r3
 80099b6:	f005 fc1d 	bl	800f1f4 <_ZNSaIcEC1Ev>
 80099ba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80099be:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80099c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099c6:	4618      	mov	r0, r3
 80099c8:	f005 fe60 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80099d0:	4618      	mov	r0, r3
 80099d2:	f005 fc11 	bl	800f1f8 <_ZNSaIcED1Ev>
    std::string data = "data/" + clientID;
 80099d6:	f107 030c 	add.w	r3, r7, #12
 80099da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80099de:	4910      	ldr	r1, [pc, #64]	; (8009a20 <_ZN6Config14initmqttConfigEv+0x104>)
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fd10 	bl	800a406 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>

    // Set MQTT client ID and topic to subscribe
    setClientId(clientID);
 80099e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fc72 	bl	800a2d6 <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    setTopicSubscribe(data);
 80099f2:	f107 030c 	add.w	r3, r7, #12
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fc8a 	bl	800a312 <_ZN6Config17setTopicSubscribeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
}
 80099fe:	f107 030c 	add.w	r3, r7, #12
 8009a02:	4618      	mov	r0, r3
 8009a04:	f005 fcec 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f005 fce7 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a12:	3760      	adds	r7, #96	; 0x60
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	0801368c 	.word	0x0801368c
 8009a1c:	08013690 	.word	0x08013690
 8009a20:	08013698 	.word	0x08013698

08009a24 <_Z15createJsonArrayPKhj>:


cJSON *createJsonArray(const uint8_t arr[], size_t len) {
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
       cJSON *jsonArray = cJSON_CreateArray();
 8009a2e:	f7fc fdc9 	bl	80065c4 <cJSON_CreateArray>
 8009a32:	60b8      	str	r0, [r7, #8]
       for (size_t i = 0; i < len; ++i) {
 8009a34:	2300      	movs	r3, #0
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	e014      	b.n	8009a64 <_Z15createJsonArrayPKhj+0x40>
           cJSON_AddItemToArray(jsonArray, cJSON_CreateNumber(arr[i]));
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7f6 fd6e 	bl	8000524 <__aeabi_ui2d>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	ec43 2b10 	vmov	d0, r2, r3
 8009a50:	f7fc fd4a 	bl	80064e8 <cJSON_CreateNumber>
 8009a54:	4603      	mov	r3, r0
 8009a56:	4619      	mov	r1, r3
 8009a58:	68b8      	ldr	r0, [r7, #8]
 8009a5a:	f7fc fc82 	bl	8006362 <cJSON_AddItemToArray>
       for (size_t i = 0; i < len; ++i) {
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3301      	adds	r3, #1
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d3e6      	bcc.n	8009a3a <_Z15createJsonArrayPKhj+0x16>
       }
       return jsonArray;
 8009a6c:	68bb      	ldr	r3, [r7, #8]
   }
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <_ZN6Config11getInfoListB5cxx11Ev>:


std::string Config::getInfoList() {
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	f5ad 7d61 	sub.w	sp, sp, #900	; 0x384
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009a84:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8009a88:	6018      	str	r0, [r3, #0]
 8009a8a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009a8e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009a92:	6019      	str	r1, [r3, #0]
    cJSON *root = cJSON_CreateObject();
 8009a94:	f7fc fdaa 	bl	80065ec <cJSON_CreateObject>
 8009a98:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
    std::string serializedDataStr;
 8009a9c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f005 fc75 	bl	800f390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

    if (root == NULL) {
 8009aa6:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d114      	bne.n	8009ad8 <_ZN6Config11getInfoListB5cxx11Ev+0x60>
        return "{}";
 8009aae:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f005 fb9e 	bl	800f1f4 <_ZNSaIcEC1Ev>
 8009ab8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009abc:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009ac0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8009ac4:	49a7      	ldr	r1, [pc, #668]	; (8009d64 <_ZN6Config11getInfoListB5cxx11Ev+0x2ec>)
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	f005 fde0 	bl	800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009acc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f005 fb91 	bl	800f1f8 <_ZNSaIcED1Ev>
 8009ad6:	e1e6      	b.n	8009ea6 <_ZN6Config11getInfoListB5cxx11Ev+0x42e>
    }

    // Existing configurations
    cJSON_AddItemToObject(root, "ip", createJsonArray(ip.data(), ip.size()));
 8009ad8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009adc:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3306      	adds	r3, #6
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff f8f5 	bl	8008cd4 <_ZNSt5arrayIhLj4EE4dataEv>
 8009aea:	4604      	mov	r4, r0
 8009aec:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009af0:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3306      	adds	r3, #6
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fcc4 	bl	800a486 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8009afe:	4603      	mov	r3, r0
 8009b00:	4619      	mov	r1, r3
 8009b02:	4620      	mov	r0, r4
 8009b04:	f7ff ff8e 	bl	8009a24 <_Z15createJsonArrayPKhj>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	4996      	ldr	r1, [pc, #600]	; (8009d68 <_ZN6Config11getInfoListB5cxx11Ev+0x2f0>)
 8009b0e:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009b12:	f7fc fc95 	bl	8006440 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "gateway", createJsonArray(gateway.data(), gateway.size()));
 8009b16:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009b1a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	330a      	adds	r3, #10
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff f8d6 	bl	8008cd4 <_ZNSt5arrayIhLj4EE4dataEv>
 8009b28:	4604      	mov	r4, r0
 8009b2a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009b2e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	330a      	adds	r3, #10
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fca5 	bl	800a486 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4620      	mov	r0, r4
 8009b42:	f7ff ff6f 	bl	8009a24 <_Z15createJsonArrayPKhj>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4988      	ldr	r1, [pc, #544]	; (8009d6c <_ZN6Config11getInfoListB5cxx11Ev+0x2f4>)
 8009b4c:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009b50:	f7fc fc76 	bl	8006440 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "subnet", createJsonArray(subnet.data(), subnet.size()));
 8009b54:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009b58:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	330e      	adds	r3, #14
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7ff f8b7 	bl	8008cd4 <_ZNSt5arrayIhLj4EE4dataEv>
 8009b66:	4604      	mov	r4, r0
 8009b68:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009b6c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	330e      	adds	r3, #14
 8009b74:	4618      	mov	r0, r3
 8009b76:	f000 fc86 	bl	800a486 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f7ff ff50 	bl	8009a24 <_Z15createJsonArrayPKhj>
 8009b84:	4603      	mov	r3, r0
 8009b86:	461a      	mov	r2, r3
 8009b88:	4979      	ldr	r1, [pc, #484]	; (8009d70 <_ZN6Config11getInfoListB5cxx11Ev+0x2f8>)
 8009b8a:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009b8e:	f7fc fc57 	bl	8006440 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "dns", createJsonArray(dns.data(), dns.size()));
 8009b92:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009b96:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3312      	adds	r3, #18
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff f898 	bl	8008cd4 <_ZNSt5arrayIhLj4EE4dataEv>
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009baa:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3312      	adds	r3, #18
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 fc67 	bl	800a486 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f7ff ff31 	bl	8009a24 <_Z15createJsonArrayPKhj>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	496b      	ldr	r1, [pc, #428]	; (8009d74 <_ZN6Config11getInfoListB5cxx11Ev+0x2fc>)
 8009bc8:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009bcc:	f7fc fc38 	bl	8006440 <cJSON_AddItemToObject>


    cJSON_AddItemToObject(root, "brokerIp", createJsonArray(broker_ip.data(), dns.size()));
 8009bd0:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009bd4:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7ff f87a 	bl	8008cd4 <_ZNSt5arrayIhLj4EE4dataEv>
 8009be0:	4604      	mov	r4, r0
 8009be2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009be6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3312      	adds	r3, #18
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 fc49 	bl	800a486 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff ff13 	bl	8009a24 <_Z15createJsonArrayPKhj>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	461a      	mov	r2, r3
 8009c02:	495d      	ldr	r1, [pc, #372]	; (8009d78 <_ZN6Config11getInfoListB5cxx11Ev+0x300>)
 8009c04:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009c08:	f7fc fc1a 	bl	8006440 <cJSON_AddItemToObject>

    // Serialize Analog Input Names
    auto analogInputNames = getAnalogInputNames();
 8009c0c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009c10:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8009c14:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009c18:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009c1c:	6819      	ldr	r1, [r3, #0]
 8009c1e:	4610      	mov	r0, r2
 8009c20:	f000 fa79 	bl	800a116 <_ZN6Config19getAnalogInputNamesB5cxx11Ev>
    cJSON *analogInputsArray = cJSON_CreateArray();
 8009c24:	f7fc fcce 	bl	80065c4 <cJSON_CreateArray>
 8009c28:	f8c7 036c 	str.w	r0, [r7, #876]	; 0x36c
    for (const auto& name : analogInputNames) {
 8009c2c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8009c30:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8009c34:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8009c38:	f000 fc30 	bl	800a49c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE5beginEv>
 8009c3c:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
 8009c40:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8009c44:	f000 fc36 	bl	800a4b4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE3endEv>
 8009c48:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364
 8009c4c:	e016      	b.n	8009c7c <_ZN6Config11getInfoListB5cxx11Ev+0x204>
 8009c4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8009c52:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
        cJSON_AddItemToArray(analogInputsArray, cJSON_CreateString(name.c_str()));
 8009c56:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 8009c5a:	f005 fcbb 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fc fc89 	bl	8006578 <cJSON_CreateString>
 8009c66:	4603      	mov	r3, r0
 8009c68:	4619      	mov	r1, r3
 8009c6a:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 8009c6e:	f7fc fb78 	bl	8006362 <cJSON_AddItemToArray>
    for (const auto& name : analogInputNames) {
 8009c72:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8009c76:	3318      	adds	r3, #24
 8009c78:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8009c7c:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 8009c80:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d1e2      	bne.n	8009c4e <_ZN6Config11getInfoListB5cxx11Ev+0x1d6>
    }
   cJSON_AddItemToObject(root, "ai", analogInputsArray);
 8009c88:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8009c8c:	493b      	ldr	r1, [pc, #236]	; (8009d7c <_ZN6Config11getInfoListB5cxx11Ev+0x304>)
 8009c8e:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009c92:	f7fc fbd5 	bl	8006440 <cJSON_AddItemToObject>

    // Serialize Digital Input Names
    auto digitalInputNames = getDigitalInputNames();
 8009c96:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009c9a:	f5a3 722e 	sub.w	r2, r3, #696	; 0x2b8
 8009c9e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009ca2:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009ca6:	6819      	ldr	r1, [r3, #0]
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f000 fa5b 	bl	800a164 <_ZN6Config20getDigitalInputNamesB5cxx11Ev>
    cJSON *digitalInputsArray = cJSON_CreateArray();
 8009cae:	f7fc fc89 	bl	80065c4 <cJSON_CreateArray>
 8009cb2:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
    for (const auto& name : digitalInputNames) {
 8009cb6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009cba:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8009cbe:	f8d7 035c 	ldr.w	r0, [r7, #860]	; 0x35c
 8009cc2:	f000 fc04 	bl	800a4ce <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE5beginEv>
 8009cc6:	f8c7 0378 	str.w	r0, [r7, #888]	; 0x378
 8009cca:	f8d7 035c 	ldr.w	r0, [r7, #860]	; 0x35c
 8009cce:	f000 fc0a 	bl	800a4e6 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE3endEv>
 8009cd2:	f8c7 0358 	str.w	r0, [r7, #856]	; 0x358
 8009cd6:	e016      	b.n	8009d06 <_ZN6Config11getInfoListB5cxx11Ev+0x28e>
 8009cd8:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8009cdc:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
        cJSON_AddItemToArray(digitalInputsArray, cJSON_CreateString(name.c_str()));
 8009ce0:	f8d7 0340 	ldr.w	r0, [r7, #832]	; 0x340
 8009ce4:	f005 fc76 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fc fc44 	bl	8006578 <cJSON_CreateString>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	f8d7 0360 	ldr.w	r0, [r7, #864]	; 0x360
 8009cf8:	f7fc fb33 	bl	8006362 <cJSON_AddItemToArray>
    for (const auto& name : digitalInputNames) {
 8009cfc:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8009d00:	3318      	adds	r3, #24
 8009d02:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8009d06:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8009d0a:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d1e2      	bne.n	8009cd8 <_ZN6Config11getInfoListB5cxx11Ev+0x260>
    }
    cJSON_AddItemToObject(root, "di", digitalInputsArray);
 8009d12:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8009d16:	491a      	ldr	r1, [pc, #104]	; (8009d80 <_ZN6Config11getInfoListB5cxx11Ev+0x308>)
 8009d18:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009d1c:	f7fc fb90 	bl	8006440 <cJSON_AddItemToObject>

    // Serialize Digital Output Names
    auto digitalOutputNames = getDigitalOutputNames();
 8009d20:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009d24:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8009d28:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009d2c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009d30:	6819      	ldr	r1, [r3, #0]
 8009d32:	4610      	mov	r0, r2
 8009d34:	f000 fa26 	bl	800a184 <_ZN6Config21getDigitalOutputNamesB5cxx11Ev>
    cJSON *digitalOutputsArray = cJSON_CreateArray();
 8009d38:	f7fc fc44 	bl	80065c4 <cJSON_CreateArray>
 8009d3c:	f8c7 0354 	str.w	r0, [r7, #852]	; 0x354
    for (const auto& name : digitalOutputNames) {
 8009d40:	f107 0308 	add.w	r3, r7, #8
 8009d44:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8009d48:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 8009d4c:	f000 fba6 	bl	800a49c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE5beginEv>
 8009d50:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
 8009d54:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 8009d58:	f000 fbac 	bl	800a4b4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE3endEv>
 8009d5c:	f8c7 034c 	str.w	r0, [r7, #844]	; 0x34c
 8009d60:	e027      	b.n	8009db2 <_ZN6Config11getInfoListB5cxx11Ev+0x33a>
 8009d62:	bf00      	nop
 8009d64:	080136a0 	.word	0x080136a0
 8009d68:	080136a4 	.word	0x080136a4
 8009d6c:	080136a8 	.word	0x080136a8
 8009d70:	080136b0 	.word	0x080136b0
 8009d74:	080136b8 	.word	0x080136b8
 8009d78:	080136bc 	.word	0x080136bc
 8009d7c:	080136c8 	.word	0x080136c8
 8009d80:	080136cc 	.word	0x080136cc
 8009d84:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8009d88:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
        cJSON_AddItemToArray(digitalOutputsArray, cJSON_CreateString(name.c_str()));
 8009d8c:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 8009d90:	f005 fc20 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8009d94:	4603      	mov	r3, r0
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fc fbee 	bl	8006578 <cJSON_CreateString>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	4619      	mov	r1, r3
 8009da0:	f8d7 0354 	ldr.w	r0, [r7, #852]	; 0x354
 8009da4:	f7fc fadd 	bl	8006362 <cJSON_AddItemToArray>
    for (const auto& name : digitalOutputNames) {
 8009da8:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8009dac:	3318      	adds	r3, #24
 8009dae:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8009db2:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8009db6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d1e2      	bne.n	8009d84 <_ZN6Config11getInfoListB5cxx11Ev+0x30c>
    }
    cJSON_AddItemToObject(root, "type", cJSON_CreateString("info"));
 8009dbe:	4846      	ldr	r0, [pc, #280]	; (8009ed8 <_ZN6Config11getInfoListB5cxx11Ev+0x460>)
 8009dc0:	f7fc fbda 	bl	8006578 <cJSON_CreateString>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	4944      	ldr	r1, [pc, #272]	; (8009edc <_ZN6Config11getInfoListB5cxx11Ev+0x464>)
 8009dca:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009dce:	f7fc fb37 	bl	8006440 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "relay", digitalOutputsArray);
 8009dd2:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8009dd6:	4942      	ldr	r1, [pc, #264]	; (8009ee0 <_ZN6Config11getInfoListB5cxx11Ev+0x468>)
 8009dd8:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009ddc:	f7fc fb30 	bl	8006440 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "mac", cJSON_CreateString(getClientId().c_str()));
 8009de0:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8009de4:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009de8:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009dec:	6819      	ldr	r1, [r3, #0]
 8009dee:	4610      	mov	r0, r2
 8009df0:	f000 f93d 	bl	800a06e <_ZNK6Config11getClientIdB5cxx11Ev>
 8009df4:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f005 fbeb 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fc fbb9 	bl	8006578 <cJSON_CreateString>
 8009e06:	4603      	mov	r3, r0
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4936      	ldr	r1, [pc, #216]	; (8009ee4 <_ZN6Config11getInfoListB5cxx11Ev+0x46c>)
 8009e0c:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009e10:	f7fc fb16 	bl	8006440 <cJSON_AddItemToObject>
 8009e14:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f005 fae1 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    cJSON_AddItemToObject(root, "net-status", cJSON_CreateBool(getDHCPEnabled()));
 8009e1e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009e22:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	f000 f906 	bl	800a038 <_ZNK6Config14getDHCPEnabledEv>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fc fb40 	bl	80064b4 <cJSON_CreateBool>
 8009e34:	4603      	mov	r3, r0
 8009e36:	461a      	mov	r2, r3
 8009e38:	492b      	ldr	r1, [pc, #172]	; (8009ee8 <_ZN6Config11getInfoListB5cxx11Ev+0x470>)
 8009e3a:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009e3e:	f7fc faff 	bl	8006440 <cJSON_AddItemToObject>

    // Serialize JSON to string
    char *serializedData = cJSON_Print(root);
 8009e42:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009e46:	f7fb fca7 	bl	8005798 <cJSON_Print>
 8009e4a:	f8c7 0348 	str.w	r0, [r7, #840]	; 0x348
    if (serializedData != NULL) {
 8009e4e:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <_ZN6Config11getInfoListB5cxx11Ev+0x3f4>
        serializedDataStr = serializedData;
 8009e56:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8009e5a:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f005 fb7b 	bl	800f55a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        free(serializedData);
 8009e64:	f8d7 0348 	ldr.w	r0, [r7, #840]	; 0x348
 8009e68:	f005 fc5a 	bl	800f720 <free>
    }

    cJSON_Delete(root);
 8009e6c:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8009e70:	f7fa fbf4 	bl	800465c <cJSON_Delete>
    return serializedDataStr;
 8009e74:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8009e78:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009e7c:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8009e80:	4611      	mov	r1, r2
 8009e82:	6818      	ldr	r0, [r3, #0]
 8009e84:	f005 fa92 	bl	800f3ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
}
 8009e88:	f107 0308 	add.w	r3, r7, #8
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7ff f8b5 	bl	8008ffc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 8009e92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff f8db 	bl	8009052 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
 8009e9c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff f8ab 	bl	8008ffc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 8009ea6:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f005 fa98 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009eb0:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009eb4:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8009eb8:	f507 7260 	add.w	r2, r7, #896	; 0x380
 8009ebc:	f5a2 725f 	sub.w	r2, r2, #892	; 0x37c
 8009ec0:	6812      	ldr	r2, [r2, #0]
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009ec8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8009ecc:	6818      	ldr	r0, [r3, #0]
 8009ece:	f507 7761 	add.w	r7, r7, #900	; 0x384
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd90      	pop	{r4, r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	080136d0 	.word	0x080136d0
 8009edc:	080136d8 	.word	0x080136d8
 8009ee0:	080136e0 	.word	0x080136e0
 8009ee4:	080136e8 	.word	0x080136e8
 8009ee8:	080136ec 	.word	0x080136ec

08009eec <_ZNK6Config11getBrokerIPEv>:



// Getters
std::array<uint8_t, 4> Config::getBrokerIP() const { return broker_ip; }
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	2300      	movs	r3, #0
 8009efc:	7b3a      	ldrb	r2, [r7, #12]
 8009efe:	f362 0307 	bfi	r3, r2, #0, #8
 8009f02:	7b7a      	ldrb	r2, [r7, #13]
 8009f04:	f362 230f 	bfi	r3, r2, #8, #8
 8009f08:	7bba      	ldrb	r2, [r7, #14]
 8009f0a:	f362 4317 	bfi	r3, r2, #16, #8
 8009f0e:	7bfa      	ldrb	r2, [r7, #15]
 8009f10:	f362 631f 	bfi	r3, r2, #24, #8
 8009f14:	4618      	mov	r0, r3
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <_ZNK6Config13getBrokerPortEv>:
uint16_t Config::getBrokerPort() const { return broker_port; }
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	889b      	ldrh	r3, [r3, #4]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <_ZNK6Config5getIPEv>:
std::array<uint8_t, 4> Config::getIP() const { return ip; }
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	f107 030c 	add.w	r3, r7, #12
 8009f46:	3206      	adds	r2, #6
 8009f48:	6810      	ldr	r0, [r2, #0]
 8009f4a:	6018      	str	r0, [r3, #0]
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	7b3a      	ldrb	r2, [r7, #12]
 8009f50:	f362 0307 	bfi	r3, r2, #0, #8
 8009f54:	7b7a      	ldrb	r2, [r7, #13]
 8009f56:	f362 230f 	bfi	r3, r2, #8, #8
 8009f5a:	7bba      	ldrb	r2, [r7, #14]
 8009f5c:	f362 4317 	bfi	r3, r2, #16, #8
 8009f60:	7bfa      	ldrb	r2, [r7, #15]
 8009f62:	f362 631f 	bfi	r3, r2, #24, #8
 8009f66:	4618      	mov	r0, r3
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <_ZNK6Config10getGatewayEv>:
std::array<uint8_t, 4> Config::getGateway() const { return gateway; }
 8009f72:	b480      	push	{r7}
 8009f74:	b085      	sub	sp, #20
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	f107 030c 	add.w	r3, r7, #12
 8009f80:	320a      	adds	r2, #10
 8009f82:	6810      	ldr	r0, [r2, #0]
 8009f84:	6018      	str	r0, [r3, #0]
 8009f86:	2300      	movs	r3, #0
 8009f88:	7b3a      	ldrb	r2, [r7, #12]
 8009f8a:	f362 0307 	bfi	r3, r2, #0, #8
 8009f8e:	7b7a      	ldrb	r2, [r7, #13]
 8009f90:	f362 230f 	bfi	r3, r2, #8, #8
 8009f94:	7bba      	ldrb	r2, [r7, #14]
 8009f96:	f362 4317 	bfi	r3, r2, #16, #8
 8009f9a:	7bfa      	ldrb	r2, [r7, #15]
 8009f9c:	f362 631f 	bfi	r3, r2, #24, #8
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <_ZNK6Config9getSubnetEv>:
std::array<uint8_t, 4> Config::getSubnet() const { return subnet; }
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	f107 030c 	add.w	r3, r7, #12
 8009fba:	320e      	adds	r2, #14
 8009fbc:	6810      	ldr	r0, [r2, #0]
 8009fbe:	6018      	str	r0, [r3, #0]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	7b3a      	ldrb	r2, [r7, #12]
 8009fc4:	f362 0307 	bfi	r3, r2, #0, #8
 8009fc8:	7b7a      	ldrb	r2, [r7, #13]
 8009fca:	f362 230f 	bfi	r3, r2, #8, #8
 8009fce:	7bba      	ldrb	r2, [r7, #14]
 8009fd0:	f362 4317 	bfi	r3, r2, #16, #8
 8009fd4:	7bfa      	ldrb	r2, [r7, #15]
 8009fd6:	f362 631f 	bfi	r3, r2, #24, #8
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <_ZNK6Config6getDNSEv>:
std::array<uint8_t, 4> Config::getDNS() const { return dns; }
 8009fe6:	b480      	push	{r7}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	f107 030c 	add.w	r3, r7, #12
 8009ff4:	3212      	adds	r2, #18
 8009ff6:	6810      	ldr	r0, [r2, #0]
 8009ff8:	6018      	str	r0, [r3, #0]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	7b3a      	ldrb	r2, [r7, #12]
 8009ffe:	f362 0307 	bfi	r3, r2, #0, #8
 800a002:	7b7a      	ldrb	r2, [r7, #13]
 800a004:	f362 230f 	bfi	r3, r2, #8, #8
 800a008:	7bba      	ldrb	r2, [r7, #14]
 800a00a:	f362 4317 	bfi	r3, r2, #16, #8
 800a00e:	7bfa      	ldrb	r2, [r7, #15]
 800a010:	f362 631f 	bfi	r3, r2, #24, #8
 800a014:	4618      	mov	r0, r3
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <_ZNK6Config20getKeepAliveIntervalEv>:
uint16_t Config::getKeepAliveInterval() const { return keep_alive_interval; }
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	8adb      	ldrh	r3, [r3, #22]
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <_ZNK6Config14getDHCPEnabledEv>:
bool Config::getDHCPEnabled() const { return dhcp_enabled; }
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	7e1b      	ldrb	r3, [r3, #24]
 800a044:	4618      	mov	r0, r3
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <_ZNK6Config11getUsernameB5cxx11Ev>:
uint32_t Config::getIntervalTime()  const { return interval_time;}
std::string Config::getUsername()const { return username; }
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	3320      	adds	r3, #32
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f005 fadf 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <_ZNK6Config11getClientIdB5cxx11Ev>:
std::string Config::getClientId()const  { return clientId; }
 800a06e:	b580      	push	{r7, lr}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	3338      	adds	r3, #56	; 0x38
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f005 fad0 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <_ZNK6Config11getPasswordB5cxx11Ev>:
std::string Config::getPassword()const { return password; }
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	3350      	adds	r3, #80	; 0x50
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f005 fac1 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <_ZNK6Config17getTopicSubscribeB5cxx11Ev>:
std::string Config::getTopicSubscribe()const { return topic_subscribe; }
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	6039      	str	r1, [r7, #0]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	3368      	adds	r3, #104	; 0x68
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f005 fab2 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <_ZNK6Config15getTopicPublishB5cxx11Ev>:
std::string Config::getTopicPublish()const {return topic_publish;}
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	3380      	adds	r3, #128	; 0x80
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f005 faa3 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>:
 800a0e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	6039      	str	r1, [r7, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2507      	movs	r5, #7
 800a0f4:	683c      	ldr	r4, [r7, #0]
 800a0f6:	461e      	mov	r6, r3
 800a0f8:	e006      	b.n	800a108 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_+0x22>
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f005 fa91 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a102:	3618      	adds	r6, #24
 800a104:	3418      	adds	r4, #24
 800a106:	3d01      	subs	r5, #1
 800a108:	2d00      	cmp	r5, #0
 800a10a:	daf6      	bge.n	800a0fa <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_+0x14>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4618      	mov	r0, r3
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a116 <_ZN6Config19getAnalogInputNamesB5cxx11Ev>:
int Config::getQoS() const { return qos; }
std::array<std::string, MAX_ANALOG_INPUTS> Config::getAnalogInputNames() { return analog_input_names; }
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	6039      	str	r1, [r7, #0]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	339c      	adds	r3, #156	; 0x9c
 800a124:	4619      	mov	r1, r3
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7ff ffdd 	bl	800a0e6 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_>:
 800a134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	250f      	movs	r5, #15
 800a142:	683c      	ldr	r4, [r7, #0]
 800a144:	461e      	mov	r6, r3
 800a146:	e006      	b.n	800a156 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_+0x22>
 800a148:	4621      	mov	r1, r4
 800a14a:	4630      	mov	r0, r6
 800a14c:	f005 fa6a 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a150:	3618      	adds	r6, #24
 800a152:	3418      	adds	r4, #24
 800a154:	3d01      	subs	r5, #1
 800a156:	2d00      	cmp	r5, #0
 800a158:	daf6      	bge.n	800a148 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_+0x14>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4618      	mov	r0, r3
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a164 <_ZN6Config20getDigitalInputNamesB5cxx11Ev>:
std::array<std::string, MAX_DIGITAL_INPUTS> Config::getDigitalInputNames()  { return digital_input_names; }
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff ffdc 	bl	800a134 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_>
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <_ZN6Config21getDigitalOutputNamesB5cxx11Ev>:
std::array<std::string, MAX_DIGITAL_OUTPUTS> Config::getDigitalOutputNames()  { return digital_output_names; }
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff ffa5 	bl	800a0e6 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>:

// Setters
void Config::setBrokerIP(const std::array<uint8_t, 4>& value) { broker_ip = value; }
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	6810      	ldr	r0, [r2, #0]
 800a1b4:	6018      	str	r0, [r3, #0]
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <_ZN6Config13setBrokerPortEt>:
void Config::setBrokerPort(uint16_t value) { broker_port = value; }
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	807b      	strh	r3, [r7, #2]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	887a      	ldrh	r2, [r7, #2]
 800a1d2:	809a      	strh	r2, [r3, #4]
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <_ZN6Config5setIPERKSt5arrayIhLj4EE>:
void Config::setIP(const std::array<uint8_t, 4>& value) { ip = value; }
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	3306      	adds	r3, #6
 800a1f0:	6812      	ldr	r2, [r2, #0]
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>:
void Config::setGateway(const std::array<uint8_t, 4>& value) { gateway = value; }
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	330a      	adds	r3, #10
 800a210:	6812      	ldr	r2, [r2, #0]
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>:
void Config::setSubnet(const std::array<uint8_t, 4>& value) { subnet = value; }
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	330e      	adds	r3, #14
 800a230:	6812      	ldr	r2, [r2, #0]
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <_ZN6Config6setDNSERKSt5arrayIhLj4EE>:
void Config::setDNS(const std::array<uint8_t, 4>& value) { dns = value; }
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	3312      	adds	r3, #18
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <_ZN6Config20setKeepAliveIntervalEt>:
void Config::setKeepAliveInterval(uint16_t value) { keep_alive_interval = value; }
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	460b      	mov	r3, r1
 800a26a:	807b      	strh	r3, [r7, #2]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	887a      	ldrh	r2, [r7, #2]
 800a270:	82da      	strh	r2, [r3, #22]
 800a272:	bf00      	nop
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <_ZN6Config14setDHCPEnabledEb>:
void Config::setDHCPEnabled(bool value) { dhcp_enabled = value; }
 800a27e:	b480      	push	{r7}
 800a280:	b083      	sub	sp, #12
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	460b      	mov	r3, r1
 800a288:	70fb      	strb	r3, [r7, #3]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	78fa      	ldrb	r2, [r7, #3]
 800a28e:	761a      	strb	r2, [r3, #24]
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <_ZN6Config15setIntervalTimeEm>:
void Config::setIntervalTime(uint32_t value) { interval_time = value; }
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	61da      	str	r2, [r3, #28]
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <_ZN6Config11setUsernameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Config::setUsername(const std::string& value) { username = value; }
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3320      	adds	r3, #32
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f005 f88f 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setClientId(const std::string& value) { clientId = value; }
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3338      	adds	r3, #56	; 0x38
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f005 f880 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800a2ec:	bf00      	nop
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <_ZN6Config11setPasswordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setPassword(const std::string& value) { password = value; }
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3350      	adds	r3, #80	; 0x50
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	4618      	mov	r0, r3
 800a306:	f005 f871 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <_ZN6Config17setTopicSubscribeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void Config::setTopicSubscribe(const std::string& value) { topic_subscribe = value; }
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	6039      	str	r1, [r7, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3368      	adds	r3, #104	; 0x68
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	4618      	mov	r0, r3
 800a324:	f005 f862 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <_ZN6Config15setTopicPublishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setTopicPublish(const std::string& value) { topic_publish = value; }
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	3380      	adds	r3, #128	; 0x80
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	4618      	mov	r0, r3
 800a342:	f005 f853 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <_ZN6Config6setQoSEi>:
void Config::setQoS(int value) { qos = value; }
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	6039      	str	r1, [r7, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>:
void Config::setAnalogInputNames(const std::array<std::string, MAX_ANALOG_INPUTS>& value) { analog_input_names = value; }
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	339c      	adds	r3, #156	; 0x9c
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fd ff09 	bl	8008194 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>
 800a382:	bf00      	nop
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>:
void Config::setDigitalInputNames(const std::array<std::string, MAX_DIGITAL_INPUTS>& value) { digital_input_names = value; }
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b082      	sub	sp, #8
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fd ff11 	bl	80081c4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_>
 800a3a2:	bf00      	nop
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>:
void Config::setDigitalOutputNames(const std::array<std::string, MAX_DIGITAL_OUTPUTS>& value) { digital_output_names = value; }
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fd fee9 	bl	8008194 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>
 800a3c2:	bf00      	nop
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>:
      operator[](size_type __n) noexcept
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 f8a0 	bl	800a51e <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_refERA8_KS5_j>
 800a3de:	4603      	mov	r3, r0
      }
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>:
      operator[](size_type __n) noexcept
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f8a3 	bl	800a542 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_refERA16_KS5_j>
 800a3fc:	4603      	mov	r3, r0
      }
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 800a406:	b580      	push	{r7, lr}
 800a408:	b088      	sub	sp, #32
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	60b9      	str	r1, [r7, #8]
 800a410:	607a      	str	r2, [r7, #4]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
 800a412:	68b8      	ldr	r0, [r7, #8]
 800a414:	f7fe fdd2 	bl	8008fbc <_ZNSt11char_traitsIcE6lengthEPKc>
 800a418:	61f8      	str	r0, [r7, #28]
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 800a41a:	f107 0318 	add.w	r3, r7, #24
 800a41e:	6879      	ldr	r1, [r7, #4]
 800a420:	4618      	mov	r0, r3
 800a422:	f005 f8d9 	bl	800f5d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 800a426:	f107 0314 	add.w	r3, r7, #20
 800a42a:	f107 0218 	add.w	r2, r7, #24
 800a42e:	4611      	mov	r1, r2
 800a430:	4618      	mov	r0, r3
 800a432:	f000 f866 	bl	800a502 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800a436:	f107 0314 	add.w	r3, r7, #20
 800a43a:	4619      	mov	r1, r3
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f004 ffae 	bl	800f39e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 800a442:	f107 0314 	add.w	r3, r7, #20
 800a446:	4618      	mov	r0, r3
 800a448:	f004 fed6 	bl	800f1f8 <_ZNSaIcED1Ev>
 800a44c:	f107 0318 	add.w	r3, r7, #24
 800a450:	4618      	mov	r0, r3
 800a452:	f004 fed1 	bl	800f1f8 <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f004 ffce 	bl	800f3f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800a45c:	4602      	mov	r2, r0
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	4413      	add	r3, r2
 800a462:	4619      	mov	r1, r3
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f004 ffcb 	bl	800f400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	68b9      	ldr	r1, [r7, #8]
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f005 f8a0 	bl	800f5b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 800a474:	6879      	ldr	r1, [r7, #4]
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f005 f895 	bl	800f5a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800a47c:	bf00      	nop
    }
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	3720      	adds	r7, #32
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <_ZNKSt5arrayIhLj4EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	2304      	movs	r3, #4
 800a490:	4618      	mov	r0, r3
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE5beginEv>:
      begin() noexcept
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f85e 	bl	800a566 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4dataEv>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE3endEv>:
      end() noexcept
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f852 	bl	800a566 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4dataEv>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	33c0      	adds	r3, #192	; 0xc0
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE5beginEv>:
      begin() noexcept
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f852 	bl	800a580 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4dataEv>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE3endEv>:
      end() noexcept
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f846 	bl	800a580 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4dataEv>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	4618      	mov	r0, r3
 800a512:	f000 f842 	bl	800a59a <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_refERA8_KS5_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a51e:	b480      	push	{r7}
 800a520:	b083      	sub	sp, #12
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	4613      	mov	r3, r2
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	4413      	add	r3, r2
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	4413      	add	r3, r2
 800a536:	4618      	mov	r0, r3
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_refERA16_KS5_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a542:	b480      	push	{r7}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	4613      	mov	r3, r2
 800a550:	005b      	lsls	r3, r3, #1
 800a552:	4413      	add	r3, r2
 800a554:	00db      	lsls	r3, r3, #3
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	4413      	add	r3, r2
 800a55a:	4618      	mov	r0, r3
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4dataEv>:
      data() noexcept
 800a566:	b580      	push	{r7, lr}
 800a568:	b082      	sub	sp, #8
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 f81f 	bl	800a5b4 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_ptrERA8_KS5_>
 800a576:	4603      	mov	r3, r0
 800a578:	4618      	mov	r0, r3
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4dataEv>:
      data() noexcept
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 f81d 	bl	800a5ca <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_ptrERA16_KS5_>
 800a590:	4603      	mov	r3, r0
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f004 fe25 	bl	800f1f6 <_ZNSaIcEC1ERKS_>
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_ptrERA8_KS5_>:
      _S_ptr(const _Type& __t) noexcept
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_ptrERA16_KS5_>:
      _S_ptr(const _Type& __t) noexcept
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <_ZN6ConfigC1ERKS_>:
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	6812      	ldr	r2, [r2, #0]
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	889a      	ldrh	r2, [r3, #4]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	809a      	strh	r2, [r3, #4]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	3306      	adds	r3, #6
 800a600:	3206      	adds	r2, #6
 800a602:	6812      	ldr	r2, [r2, #0]
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	330a      	adds	r3, #10
 800a60c:	320a      	adds	r2, #10
 800a60e:	6812      	ldr	r2, [r2, #0]
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	330e      	adds	r3, #14
 800a618:	320e      	adds	r2, #14
 800a61a:	6812      	ldr	r2, [r2, #0]
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	3312      	adds	r3, #18
 800a624:	3212      	adds	r2, #18
 800a626:	6812      	ldr	r2, [r2, #0]
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	8ada      	ldrh	r2, [r3, #22]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	82da      	strh	r2, [r3, #22]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	7e1a      	ldrb	r2, [r3, #24]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	761a      	strb	r2, [r3, #24]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	69da      	ldr	r2, [r3, #28]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	61da      	str	r2, [r3, #28]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f103 0220 	add.w	r2, r3, #32
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	3320      	adds	r3, #32
 800a64c:	4619      	mov	r1, r3
 800a64e:	4610      	mov	r0, r2
 800a650:	f004 ffe8 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	3338      	adds	r3, #56	; 0x38
 800a65e:	4619      	mov	r1, r3
 800a660:	4610      	mov	r0, r2
 800a662:	f004 ffdf 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	3350      	adds	r3, #80	; 0x50
 800a670:	4619      	mov	r1, r3
 800a672:	4610      	mov	r0, r2
 800a674:	f004 ffd6 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	3368      	adds	r3, #104	; 0x68
 800a682:	4619      	mov	r1, r3
 800a684:	4610      	mov	r0, r2
 800a686:	f004 ffcd 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	3380      	adds	r3, #128	; 0x80
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	f004 ffc4 	bl	800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	339c      	adds	r3, #156	; 0x9c
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	f7ff fd16 	bl	800a0e6 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f7ff fd33 	bl	800a134 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f503 7237 	add.w	r2, r3, #732	; 0x2dc
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4610      	mov	r0, r2
 800a6de:	f7ff fd02 	bl	800a0e6 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <_ZN6ConfigD1Ev>:
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fc7e 	bl	8008ffc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fca3 	bl	8009052 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	339c      	adds	r3, #156	; 0x9c
 800a710:	4618      	mov	r0, r3
 800a712:	f7fe fc73 	bl	8008ffc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	3380      	adds	r3, #128	; 0x80
 800a71a:	4618      	mov	r0, r3
 800a71c:	f004 fe60 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3368      	adds	r3, #104	; 0x68
 800a724:	4618      	mov	r0, r3
 800a726:	f004 fe5b 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3350      	adds	r3, #80	; 0x50
 800a72e:	4618      	mov	r0, r3
 800a730:	f004 fe56 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3338      	adds	r3, #56	; 0x38
 800a738:	4618      	mov	r0, r3
 800a73a:	f004 fe51 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	3320      	adds	r3, #32
 800a742:	4618      	mov	r0, r3
 800a744:	f004 fe4c 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	f5ad 6dea 	sub.w	sp, sp, #1872	; 0x750
 800a75a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a75c:	f001 f976 	bl	800ba4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a760:	f000 f870 	bl	800a844 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a764:	f000 fa9a 	bl	800ac9c <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 800a768:	f000 fa2e 	bl	800abc8 <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 800a76c:	f000 fa68 	bl	800ac40 <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 800a770:	f000 f8dc 	bl	800a92c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 800a774:	f000 f998 	bl	800aaa8 <_ZL12MX_ADC2_Initv>


//HAL_UART_Receive_IT(&huart1, RxBuffer, sizeof(RxBuffer));


 config.init();
 800a778:	482b      	ldr	r0, [pc, #172]	; (800a828 <main+0xd4>)
 800a77a:	f7fe fcb5 	bl	80090e8 <_ZN6Config4initEv>

 utils.init(&config);
 800a77e:	492a      	ldr	r1, [pc, #168]	; (800a828 <main+0xd4>)
 800a780:	482a      	ldr	r0, [pc, #168]	; (800a82c <main+0xd8>)
 800a782:	f7fd fdbd 	bl	8008300 <_ZN5Utils4initEP6Config>

 ethManager.initialize(&config, &utils);
 800a786:	4a29      	ldr	r2, [pc, #164]	; (800a82c <main+0xd8>)
 800a788:	4927      	ldr	r1, [pc, #156]	; (800a828 <main+0xd4>)
 800a78a:	4829      	ldr	r0, [pc, #164]	; (800a830 <main+0xdc>)
 800a78c:	f7fe f82c 	bl	80087e8 <_ZN15EthernetManager10initializeEPK6ConfigP5Utils>

 config.initmqttConfig();
 800a790:	4825      	ldr	r0, [pc, #148]	; (800a828 <main+0xd4>)
 800a792:	f7ff f8c3 	bl	800991c <_ZN6Config14initmqttConfigEv>

 mqttClient.init(config, &utils);
 800a796:	463b      	mov	r3, r7
 800a798:	4923      	ldr	r1, [pc, #140]	; (800a828 <main+0xd4>)
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7ff ff20 	bl	800a5e0 <_ZN6ConfigC1ERKS_>
 800a7a0:	463b      	mov	r3, r7
 800a7a2:	4a22      	ldr	r2, [pc, #136]	; (800a82c <main+0xd8>)
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4823      	ldr	r0, [pc, #140]	; (800a834 <main+0xe0>)
 800a7a8:	f000 fc0c 	bl	800afc4 <_ZN14MQTTConnection4initE6ConfigP5Utils>
 800a7ac:	463b      	mov	r3, r7
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7ff ff9c 	bl	800a6ec <_ZN6ConfigD1Ev>

 mqttClient.subscribe(config.getTopicSubscribe());
 800a7b4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800a7b8:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800a7bc:	491a      	ldr	r1, [pc, #104]	; (800a828 <main+0xd4>)
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7ff fc73 	bl	800a0aa <_ZNK6Config17getTopicSubscribeB5cxx11Ev>
 800a7c4:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	481a      	ldr	r0, [pc, #104]	; (800a834 <main+0xe0>)
 800a7cc:	f000 fd4e 	bl	800b26c <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a7d0:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f004 fe03 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

 uartHandler.init(&huart1, &utils, &config);
 800a7da:	4b13      	ldr	r3, [pc, #76]	; (800a828 <main+0xd4>)
 800a7dc:	4a13      	ldr	r2, [pc, #76]	; (800a82c <main+0xd8>)
 800a7de:	4916      	ldr	r1, [pc, #88]	; (800a838 <main+0xe4>)
 800a7e0:	4816      	ldr	r0, [pc, #88]	; (800a83c <main+0xe8>)
 800a7e2:	f7fe fab3 	bl	8008d4c <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (true)
  {

	mqttClient.mqttYield();
 800a7e6:	4813      	ldr	r0, [pc, #76]	; (800a834 <main+0xe0>)
 800a7e8:	f000 fdb0 	bl	800b34c <_ZN14MQTTConnection9mqttYieldEv>

	utils.createJSON(&statusJsonBuffer);
 800a7ec:	4914      	ldr	r1, [pc, #80]	; (800a840 <main+0xec>)
 800a7ee:	480f      	ldr	r0, [pc, #60]	; (800a82c <main+0xd8>)
 800a7f0:	f7fd ff08 	bl	8008604 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

    mqttClient.publish(statusJsonBuffer, config);
 800a7f4:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800a7f8:	490b      	ldr	r1, [pc, #44]	; (800a828 <main+0xd4>)
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7ff fef0 	bl	800a5e0 <_ZN6ConfigC1ERKS_>
 800a800:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800a804:	461a      	mov	r2, r3
 800a806:	490e      	ldr	r1, [pc, #56]	; (800a840 <main+0xec>)
 800a808:	480a      	ldr	r0, [pc, #40]	; (800a834 <main+0xe0>)
 800a80a:	f000 fce5 	bl	800b1d8 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config>
 800a80e:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff ff6a 	bl	800a6ec <_ZN6ConfigD1Ev>
	// utils.print("Hello!!! \r\n");
    uartHandler.processReceivedData();
 800a818:	4808      	ldr	r0, [pc, #32]	; (800a83c <main+0xe8>)
 800a81a:	f7fe fb3b 	bl	8008e94 <_ZN11UARTHandler19processReceivedDataEv>

    HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(const_cast<char*>(dataToSend)), strlen(dataToSend), HAL_MAX_DELAY);

    */

    HAL_Delay(3000);
 800a81e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a822:	f001 f985 	bl	800bb30 <HAL_Delay>
	mqttClient.mqttYield();
 800a826:	e7de      	b.n	800a7e6 <main+0x92>
 800a828:	200013ec 	.word	0x200013ec
 800a82c:	20001788 	.word	0x20001788
 800a830:	20001c24 	.word	0x20001c24
 800a834:	20001c28 	.word	0x20001c28
 800a838:	200013a4 	.word	0x200013a4
 800a83c:	20001c98 	.word	0x20001c98
 800a840:	200022b8 	.word	0x200022b8

0800a844 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b094      	sub	sp, #80	; 0x50
 800a848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a84a:	f107 0320 	add.w	r3, r7, #32
 800a84e:	2230      	movs	r2, #48	; 0x30
 800a850:	2100      	movs	r1, #0
 800a852:	4618      	mov	r0, r3
 800a854:	f006 f820 	bl	8010898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a858:	f107 030c 	add.w	r3, r7, #12
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]
 800a860:	605a      	str	r2, [r3, #4]
 800a862:	609a      	str	r2, [r3, #8]
 800a864:	60da      	str	r2, [r3, #12]
 800a866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a868:	2300      	movs	r3, #0
 800a86a:	60bb      	str	r3, [r7, #8]
 800a86c:	4b2d      	ldr	r3, [pc, #180]	; (800a924 <_Z18SystemClock_Configv+0xe0>)
 800a86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a870:	4a2c      	ldr	r2, [pc, #176]	; (800a924 <_Z18SystemClock_Configv+0xe0>)
 800a872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a876:	6413      	str	r3, [r2, #64]	; 0x40
 800a878:	4b2a      	ldr	r3, [pc, #168]	; (800a924 <_Z18SystemClock_Configv+0xe0>)
 800a87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a880:	60bb      	str	r3, [r7, #8]
 800a882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a884:	2300      	movs	r3, #0
 800a886:	607b      	str	r3, [r7, #4]
 800a888:	4b27      	ldr	r3, [pc, #156]	; (800a928 <_Z18SystemClock_Configv+0xe4>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a26      	ldr	r2, [pc, #152]	; (800a928 <_Z18SystemClock_Configv+0xe4>)
 800a88e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	4b24      	ldr	r3, [pc, #144]	; (800a928 <_Z18SystemClock_Configv+0xe4>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a89c:	607b      	str	r3, [r7, #4]
 800a89e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a8a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a8ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800a8b4:	2319      	movs	r3, #25
 800a8b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800a8b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800a8bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a8be:	2302      	movs	r3, #2
 800a8c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a8c2:	2304      	movs	r3, #4
 800a8c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a8c6:	f107 0320 	add.w	r3, r7, #32
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f002 fa0e 	bl	800ccec <HAL_RCC_OscConfig>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bf14      	ite	ne
 800a8d6:	2301      	movne	r3, #1
 800a8d8:	2300      	moveq	r3, #0
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 800a8e0:	f000 faf8 	bl	800aed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a8e4:	230f      	movs	r3, #15
 800a8e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a8f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a8f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a8f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a8fc:	f107 030c 	add.w	r3, r7, #12
 800a900:	2105      	movs	r1, #5
 800a902:	4618      	mov	r0, r3
 800a904:	f002 fc6a 	bl	800d1dc <HAL_RCC_ClockConfig>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	bf14      	ite	ne
 800a90e:	2301      	movne	r3, #1
 800a910:	2300      	moveq	r3, #0
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 800a918:	f000 fadc 	bl	800aed4 <Error_Handler>
  }
}
 800a91c:	bf00      	nop
 800a91e:	3750      	adds	r7, #80	; 0x50
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	40023800 	.word	0x40023800
 800a928:	40007000 	.word	0x40007000

0800a92c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08c      	sub	sp, #48	; 0x30
 800a930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a932:	f107 0320 	add.w	r3, r7, #32
 800a936:	2200      	movs	r2, #0
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	605a      	str	r2, [r3, #4]
 800a93c:	609a      	str	r2, [r3, #8]
 800a93e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a940:	463b      	mov	r3, r7
 800a942:	2220      	movs	r2, #32
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f005 ffa6 	bl	8010898 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800a94c:	4b52      	ldr	r3, [pc, #328]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a94e:	4a53      	ldr	r2, [pc, #332]	; (800aa9c <_ZL12MX_ADC1_Initv+0x170>)
 800a950:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800a952:	4b51      	ldr	r3, [pc, #324]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a954:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a958:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a95a:	4b4f      	ldr	r3, [pc, #316]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800a960:	4b4d      	ldr	r3, [pc, #308]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a962:	2201      	movs	r2, #1
 800a964:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800a966:	4b4c      	ldr	r3, [pc, #304]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a968:	2201      	movs	r2, #1
 800a96a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a96c:	4b4a      	ldr	r3, [pc, #296]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a974:	4b48      	ldr	r3, [pc, #288]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a976:	2200      	movs	r2, #0
 800a978:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a97a:	4b47      	ldr	r3, [pc, #284]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a97c:	4a48      	ldr	r2, [pc, #288]	; (800aaa0 <_ZL12MX_ADC1_Initv+0x174>)
 800a97e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a980:	4b45      	ldr	r3, [pc, #276]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a982:	2200      	movs	r2, #0
 800a984:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800a986:	4b44      	ldr	r3, [pc, #272]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a988:	2204      	movs	r2, #4
 800a98a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a98c:	4b42      	ldr	r3, [pc, #264]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a994:	4b40      	ldr	r3, [pc, #256]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a996:	2201      	movs	r2, #1
 800a998:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a99a:	483f      	ldr	r0, [pc, #252]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a99c:	f001 f8ec 	bl	800bb78 <HAL_ADC_Init>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	bf14      	ite	ne
 800a9a6:	2301      	movne	r3, #1
 800a9a8:	2300      	moveq	r3, #0
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <_ZL12MX_ADC1_Initv+0x88>
  {
    Error_Handler();
 800a9b0:	f000 fa90 	bl	800aed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a9c0:	f107 0320 	add.w	r3, r7, #32
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4834      	ldr	r0, [pc, #208]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a9c8:	f001 fa48 	bl	800be5c <HAL_ADC_ConfigChannel>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bf14      	ite	ne
 800a9d2:	2301      	movne	r3, #1
 800a9d4:	2300      	moveq	r3, #0
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <_ZL12MX_ADC1_Initv+0xb4>
  {
    Error_Handler();
 800a9dc:	f000 fa7a 	bl	800aed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a9e4:	f107 0320 	add.w	r3, r7, #32
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	482b      	ldr	r0, [pc, #172]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800a9ec:	f001 fa36 	bl	800be5c <HAL_ADC_ConfigChannel>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	bf14      	ite	ne
 800a9f6:	2301      	movne	r3, #1
 800a9f8:	2300      	moveq	r3, #0
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <_ZL12MX_ADC1_Initv+0xd8>
  {
    Error_Handler();
 800aa00:	f000 fa68 	bl	800aed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800aa04:	2303      	movs	r3, #3
 800aa06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800aa08:	f107 0320 	add.w	r3, r7, #32
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4822      	ldr	r0, [pc, #136]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800aa10:	f001 fa24 	bl	800be5c <HAL_ADC_ConfigChannel>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bf14      	ite	ne
 800aa1a:	2301      	movne	r3, #1
 800aa1c:	2300      	moveq	r3, #0
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800aa24:	f000 fa56 	bl	800aed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 800aa28:	2304      	movs	r3, #4
 800aa2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800aa2c:	f107 0320 	add.w	r3, r7, #32
 800aa30:	4619      	mov	r1, r3
 800aa32:	4819      	ldr	r0, [pc, #100]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800aa34:	f001 fa12 	bl	800be5c <HAL_ADC_ConfigChannel>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	bf14      	ite	ne
 800aa3e:	2301      	movne	r3, #1
 800aa40:	2300      	moveq	r3, #0
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <_ZL12MX_ADC1_Initv+0x120>
  {
    Error_Handler();
 800aa48:	f000 fa44 	bl	800aed4 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800aa50:	2301      	movs	r3, #1
 800aa52:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800aa54:	2301      	movs	r3, #1
 800aa56:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800aa60:	4b10      	ldr	r3, [pc, #64]	; (800aaa4 <_ZL12MX_ADC1_Initv+0x178>)
 800aa62:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800aa64:	2300      	movs	r3, #0
 800aa66:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800aa70:	463b      	mov	r3, r7
 800aa72:	4619      	mov	r1, r3
 800aa74:	4808      	ldr	r0, [pc, #32]	; (800aa98 <_ZL12MX_ADC1_Initv+0x16c>)
 800aa76:	f001 fc19 	bl	800c2ac <HAL_ADCEx_InjectedConfigChannel>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	bf14      	ite	ne
 800aa80:	2301      	movne	r3, #1
 800aa82:	2300      	moveq	r3, #0
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <_ZL12MX_ADC1_Initv+0x162>
  {
    Error_Handler();
 800aa8a:	f000 fa23 	bl	800aed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800aa8e:	bf00      	nop
 800aa90:	3730      	adds	r7, #48	; 0x30
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	200012bc 	.word	0x200012bc
 800aa9c:	40012000 	.word	0x40012000
 800aaa0:	0f000001 	.word	0x0f000001
 800aaa4:	000f0001 	.word	0x000f0001

0800aaa8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800aaae:	463b      	mov	r3, r7
 800aab0:	2200      	movs	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	605a      	str	r2, [r3, #4]
 800aab6:	609a      	str	r2, [r3, #8]
 800aab8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800aaba:	4b40      	ldr	r3, [pc, #256]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aabc:	4a40      	ldr	r2, [pc, #256]	; (800abc0 <_ZL12MX_ADC2_Initv+0x118>)
 800aabe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800aac0:	4b3e      	ldr	r3, [pc, #248]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aac2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aac6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800aac8:	4b3c      	ldr	r3, [pc, #240]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800aace:	4b3b      	ldr	r3, [pc, #236]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aad0:	2201      	movs	r2, #1
 800aad2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800aad4:	4b39      	ldr	r3, [pc, #228]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aad6:	2201      	movs	r2, #1
 800aad8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800aada:	4b38      	ldr	r3, [pc, #224]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800aae2:	4b36      	ldr	r3, [pc, #216]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800aae8:	4b34      	ldr	r3, [pc, #208]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aaea:	4a36      	ldr	r2, [pc, #216]	; (800abc4 <_ZL12MX_ADC2_Initv+0x11c>)
 800aaec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800aaee:	4b33      	ldr	r3, [pc, #204]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 800aaf4:	4b31      	ldr	r3, [pc, #196]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aaf6:	2204      	movs	r2, #4
 800aaf8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800aafa:	4b30      	ldr	r3, [pc, #192]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ab02:	4b2e      	ldr	r3, [pc, #184]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800ab04:	2201      	movs	r2, #1
 800ab06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800ab08:	482c      	ldr	r0, [pc, #176]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800ab0a:	f001 f835 	bl	800bb78 <HAL_ADC_Init>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	bf14      	ite	ne
 800ab14:	2301      	movne	r3, #1
 800ab16:	2300      	moveq	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 800ab1e:	f000 f9d9 	bl	800aed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800ab22:	2301      	movs	r3, #1
 800ab24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ab26:	2301      	movs	r3, #1
 800ab28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ab2e:	463b      	mov	r3, r7
 800ab30:	4619      	mov	r1, r3
 800ab32:	4822      	ldr	r0, [pc, #136]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800ab34:	f001 f992 	bl	800be5c <HAL_ADC_ConfigChannel>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bf14      	ite	ne
 800ab3e:	2301      	movne	r3, #1
 800ab40:	2300      	moveq	r3, #0
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 800ab48:	f000 f9c4 	bl	800aed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ab50:	463b      	mov	r3, r7
 800ab52:	4619      	mov	r1, r3
 800ab54:	4819      	ldr	r0, [pc, #100]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800ab56:	f001 f981 	bl	800be5c <HAL_ADC_ConfigChannel>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	bf14      	ite	ne
 800ab60:	2301      	movne	r3, #1
 800ab62:	2300      	moveq	r3, #0
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <_ZL12MX_ADC2_Initv+0xc6>
  {
    Error_Handler();
 800ab6a:	f000 f9b3 	bl	800aed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ab72:	463b      	mov	r3, r7
 800ab74:	4619      	mov	r1, r3
 800ab76:	4811      	ldr	r0, [pc, #68]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800ab78:	f001 f970 	bl	800be5c <HAL_ADC_ConfigChannel>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bf14      	ite	ne
 800ab82:	2301      	movne	r3, #1
 800ab84:	2300      	moveq	r3, #0
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <_ZL12MX_ADC2_Initv+0xe8>
  {
    Error_Handler();
 800ab8c:	f000 f9a2 	bl	800aed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 800ab90:	2304      	movs	r3, #4
 800ab92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ab94:	463b      	mov	r3, r7
 800ab96:	4619      	mov	r1, r3
 800ab98:	4808      	ldr	r0, [pc, #32]	; (800abbc <_ZL12MX_ADC2_Initv+0x114>)
 800ab9a:	f001 f95f 	bl	800be5c <HAL_ADC_ConfigChannel>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bf14      	ite	ne
 800aba4:	2301      	movne	r3, #1
 800aba6:	2300      	moveq	r3, #0
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <_ZL12MX_ADC2_Initv+0x10a>
  {
    Error_Handler();
 800abae:	f000 f991 	bl	800aed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800abb2:	bf00      	nop
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	20001304 	.word	0x20001304
 800abc0:	40012100 	.word	0x40012100
 800abc4:	0f000001 	.word	0x0f000001

0800abc8 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800abcc:	4b1a      	ldr	r3, [pc, #104]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800abce:	4a1b      	ldr	r2, [pc, #108]	; (800ac3c <_ZL12MX_SPI2_Initv+0x74>)
 800abd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800abd2:	4b19      	ldr	r3, [pc, #100]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800abd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800abd8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800abda:	4b17      	ldr	r3, [pc, #92]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800abdc:	2200      	movs	r2, #0
 800abde:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800abe0:	4b15      	ldr	r3, [pc, #84]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800abe6:	4b14      	ldr	r3, [pc, #80]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800abe8:	2200      	movs	r2, #0
 800abea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800abec:	4b12      	ldr	r3, [pc, #72]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800abee:	2200      	movs	r2, #0
 800abf0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800abf2:	4b11      	ldr	r3, [pc, #68]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800abf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abf8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800abfa:	4b0f      	ldr	r3, [pc, #60]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ac00:	4b0d      	ldr	r3, [pc, #52]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800ac06:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac0c:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800ac12:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800ac14:	220a      	movs	r2, #10
 800ac16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800ac18:	4807      	ldr	r0, [pc, #28]	; (800ac38 <_ZL12MX_SPI2_Initv+0x70>)
 800ac1a:	f002 fcbf 	bl	800d59c <HAL_SPI_Init>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	bf14      	ite	ne
 800ac24:	2301      	movne	r3, #1
 800ac26:	2300      	moveq	r3, #0
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800ac2e:	f000 f951 	bl	800aed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800ac32:	bf00      	nop
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	2000134c 	.word	0x2000134c
 800ac3c:	40003800 	.word	0x40003800

0800ac40 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ac44:	4b13      	ldr	r3, [pc, #76]	; (800ac94 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ac46:	4a14      	ldr	r2, [pc, #80]	; (800ac98 <_ZL19MX_USART1_UART_Initv+0x58>)
 800ac48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ac4a:	4b12      	ldr	r3, [pc, #72]	; (800ac94 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ac4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ac50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ac52:	4b10      	ldr	r3, [pc, #64]	; (800ac94 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ac58:	4b0e      	ldr	r3, [pc, #56]	; (800ac94 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ac5e:	4b0d      	ldr	r3, [pc, #52]	; (800ac94 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ac64:	4b0b      	ldr	r3, [pc, #44]	; (800ac94 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ac66:	220c      	movs	r2, #12
 800ac68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ac6a:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ac70:	4b08      	ldr	r3, [pc, #32]	; (800ac94 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ac76:	4807      	ldr	r0, [pc, #28]	; (800ac94 <_ZL19MX_USART1_UART_Initv+0x54>)
 800ac78:	f003 fa66 	bl	800e148 <HAL_UART_Init>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bf14      	ite	ne
 800ac82:	2301      	movne	r3, #1
 800ac84:	2300      	moveq	r3, #0
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800ac8c:	f000 f922 	bl	800aed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ac90:	bf00      	nop
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	200013a4 	.word	0x200013a4
 800ac98:	40011000 	.word	0x40011000

0800ac9c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08c      	sub	sp, #48	; 0x30
 800aca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aca2:	f107 031c 	add.w	r3, r7, #28
 800aca6:	2200      	movs	r2, #0
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	605a      	str	r2, [r3, #4]
 800acac:	609a      	str	r2, [r3, #8]
 800acae:	60da      	str	r2, [r3, #12]
 800acb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800acb2:	2300      	movs	r3, #0
 800acb4:	61bb      	str	r3, [r7, #24]
 800acb6:	4b71      	ldr	r3, [pc, #452]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800acb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acba:	4a70      	ldr	r2, [pc, #448]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800acbc:	f043 0304 	orr.w	r3, r3, #4
 800acc0:	6313      	str	r3, [r2, #48]	; 0x30
 800acc2:	4b6e      	ldr	r3, [pc, #440]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800acc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc6:	f003 0304 	and.w	r3, r3, #4
 800acca:	61bb      	str	r3, [r7, #24]
 800accc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800acce:	2300      	movs	r3, #0
 800acd0:	617b      	str	r3, [r7, #20]
 800acd2:	4b6a      	ldr	r3, [pc, #424]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800acd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd6:	4a69      	ldr	r2, [pc, #420]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800acd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acdc:	6313      	str	r3, [r2, #48]	; 0x30
 800acde:	4b67      	ldr	r3, [pc, #412]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800ace0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace6:	617b      	str	r3, [r7, #20]
 800ace8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800acea:	2300      	movs	r3, #0
 800acec:	613b      	str	r3, [r7, #16]
 800acee:	4b63      	ldr	r3, [pc, #396]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800acf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf2:	4a62      	ldr	r2, [pc, #392]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800acf4:	f043 0301 	orr.w	r3, r3, #1
 800acf8:	6313      	str	r3, [r2, #48]	; 0x30
 800acfa:	4b60      	ldr	r3, [pc, #384]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	613b      	str	r3, [r7, #16]
 800ad04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
 800ad0a:	4b5c      	ldr	r3, [pc, #368]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800ad0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0e:	4a5b      	ldr	r2, [pc, #364]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800ad10:	f043 0310 	orr.w	r3, r3, #16
 800ad14:	6313      	str	r3, [r2, #48]	; 0x30
 800ad16:	4b59      	ldr	r3, [pc, #356]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800ad18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1a:	f003 0310 	and.w	r3, r3, #16
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad22:	2300      	movs	r3, #0
 800ad24:	60bb      	str	r3, [r7, #8]
 800ad26:	4b55      	ldr	r3, [pc, #340]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800ad28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2a:	4a54      	ldr	r2, [pc, #336]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800ad2c:	f043 0302 	orr.w	r3, r3, #2
 800ad30:	6313      	str	r3, [r2, #48]	; 0x30
 800ad32:	4b52      	ldr	r3, [pc, #328]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800ad34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad36:	f003 0302 	and.w	r3, r3, #2
 800ad3a:	60bb      	str	r3, [r7, #8]
 800ad3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ad3e:	2300      	movs	r3, #0
 800ad40:	607b      	str	r3, [r7, #4]
 800ad42:	4b4e      	ldr	r3, [pc, #312]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800ad44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad46:	4a4d      	ldr	r2, [pc, #308]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800ad48:	f043 0308 	orr.w	r3, r3, #8
 800ad4c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad4e:	4b4b      	ldr	r3, [pc, #300]	; (800ae7c <_ZL12MX_GPIO_Initv+0x1e0>)
 800ad50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad52:	f003 0308 	and.w	r3, r3, #8
 800ad56:	607b      	str	r3, [r7, #4]
 800ad58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, switch5_Pin|switch6_Pin|switch7_Pin|switch8_Pin, GPIO_PIN_RESET);
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	21f0      	movs	r1, #240	; 0xf0
 800ad5e:	4848      	ldr	r0, [pc, #288]	; (800ae80 <_ZL12MX_GPIO_Initv+0x1e4>)
 800ad60:	f001 ff92 	bl	800cc88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RESET_GPIO_Port, W5500_RESET_Pin, GPIO_PIN_RESET);
 800ad64:	2200      	movs	r2, #0
 800ad66:	2120      	movs	r1, #32
 800ad68:	4846      	ldr	r0, [pc, #280]	; (800ae84 <_ZL12MX_GPIO_Initv+0x1e8>)
 800ad6a:	f001 ff8d 	bl	800cc88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, switch1_Pin|switch2_Pin|switch3_Pin|switch4_Pin
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f24f 0102 	movw	r1, #61442	; 0xf002
 800ad74:	4844      	ldr	r0, [pc, #272]	; (800ae88 <_ZL12MX_GPIO_Initv+0x1ec>)
 800ad76:	f001 ff87 	bl	800cc88 <HAL_GPIO_WritePin>
                          |sound_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ad80:	4842      	ldr	r0, [pc, #264]	; (800ae8c <_ZL12MX_GPIO_Initv+0x1f0>)
 800ad82:	f001 ff81 	bl	800cc88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 800ad86:	f240 33cf 	movw	r3, #975	; 0x3cf
 800ad8a:	61fb      	str	r3, [r7, #28]
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ad90:	2302      	movs	r3, #2
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad94:	f107 031c 	add.w	r3, r7, #28
 800ad98:	4619      	mov	r1, r3
 800ad9a:	483a      	ldr	r0, [pc, #232]	; (800ae84 <_ZL12MX_GPIO_Initv+0x1e8>)
 800ad9c:	f001 fdc0 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch5_Pin switch6_Pin switch7_Pin switch8_Pin */
  GPIO_InitStruct.Pin = switch5_Pin|switch6_Pin|switch7_Pin|switch8_Pin;
 800ada0:	23f0      	movs	r3, #240	; 0xf0
 800ada2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ada4:	2301      	movs	r3, #1
 800ada6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ada8:	2300      	movs	r3, #0
 800adaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adac:	2300      	movs	r3, #0
 800adae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adb0:	f107 031c 	add.w	r3, r7, #28
 800adb4:	4619      	mov	r1, r3
 800adb6:	4832      	ldr	r0, [pc, #200]	; (800ae80 <_ZL12MX_GPIO_Initv+0x1e4>)
 800adb8:	f001 fdb2 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RESET_Pin */
  GPIO_InitStruct.Pin = W5500_RESET_Pin;
 800adbc:	2320      	movs	r3, #32
 800adbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adc0:	2301      	movs	r3, #1
 800adc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc4:	2300      	movs	r3, #0
 800adc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adc8:	2300      	movs	r3, #0
 800adca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_RESET_GPIO_Port, &GPIO_InitStruct);
 800adcc:	f107 031c 	add.w	r3, r7, #28
 800add0:	4619      	mov	r1, r3
 800add2:	482c      	ldr	r0, [pc, #176]	; (800ae84 <_ZL12MX_GPIO_Initv+0x1e8>)
 800add4:	f001 fda4 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pin : NetworkStatus_Pin */
  GPIO_InitStruct.Pin = NetworkStatus_Pin;
 800add8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800addc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800adde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800ade2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade4:	2300      	movs	r3, #0
 800ade6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NetworkStatus_GPIO_Port, &GPIO_InitStruct);
 800ade8:	f107 031c 	add.w	r3, r7, #28
 800adec:	4619      	mov	r1, r3
 800adee:	4826      	ldr	r0, [pc, #152]	; (800ae88 <_ZL12MX_GPIO_Initv+0x1ec>)
 800adf0:	f001 fd96 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch1_Pin switch2_Pin switch3_Pin switch4_Pin
                           sound_Pin */
  GPIO_InitStruct.Pin = switch1_Pin|switch2_Pin|switch3_Pin|switch4_Pin
 800adf4:	f24f 0302 	movw	r3, #61442	; 0xf002
 800adf8:	61fb      	str	r3, [r7, #28]
                          |sound_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adfa:	2301      	movs	r3, #1
 800adfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adfe:	2300      	movs	r3, #0
 800ae00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae02:	2300      	movs	r3, #0
 800ae04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ae06:	f107 031c 	add.w	r3, r7, #28
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	481e      	ldr	r0, [pc, #120]	; (800ae88 <_ZL12MX_GPIO_Initv+0x1ec>)
 800ae0e:	f001 fd87 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 800ae12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae20:	2300      	movs	r3, #0
 800ae22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 800ae24:	f107 031c 	add.w	r3, r7, #28
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4818      	ldr	r0, [pc, #96]	; (800ae8c <_ZL12MX_GPIO_Initv+0x1f0>)
 800ae2c:	f001 fd78 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI5_Pin DI6_Pin DI7_Pin DI8_Pin */
  GPIO_InitStruct.Pin = DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin;
 800ae30:	f44f 531c 	mov.w	r3, #9984	; 0x2700
 800ae34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae36:	2300      	movs	r3, #0
 800ae38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae3e:	f107 031c 	add.w	r3, r7, #28
 800ae42:	4619      	mov	r1, r3
 800ae44:	4812      	ldr	r0, [pc, #72]	; (800ae90 <_ZL12MX_GPIO_Initv+0x1f4>)
 800ae46:	f001 fd6b 	bl	800c920 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI13_Pin DI14_Pin DI15_Pin DI16_Pin */
  GPIO_InitStruct.Pin = DI13_Pin|DI14_Pin|DI15_Pin|DI16_Pin;
 800ae4a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ae4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae50:	2300      	movs	r3, #0
 800ae52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ae54:	2302      	movs	r3, #2
 800ae56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae58:	f107 031c 	add.w	r3, r7, #28
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	4808      	ldr	r0, [pc, #32]	; (800ae80 <_ZL12MX_GPIO_Initv+0x1e4>)
 800ae60:	f001 fd5e 	bl	800c920 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800ae64:	2200      	movs	r2, #0
 800ae66:	2100      	movs	r1, #0
 800ae68:	2028      	movs	r0, #40	; 0x28
 800ae6a:	f001 fc90 	bl	800c78e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800ae6e:	2028      	movs	r0, #40	; 0x28
 800ae70:	f001 fca9 	bl	800c7c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800ae74:	bf00      	nop
 800ae76:	3730      	adds	r7, #48	; 0x30
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	40023800 	.word	0x40023800
 800ae80:	40020000 	.word	0x40020000
 800ae84:	40020800 	.word	0x40020800
 800ae88:	40021000 	.word	0x40021000
 800ae8c:	40020400 	.word	0x40020400
 800ae90:	40020c00 	.word	0x40020c00

0800ae94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11) {
    //  UART_Printf("Internet connection lost \r\n");
    }
}
 800ae9e:	bf00      	nop
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
	...

0800aeac <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a04      	ldr	r2, [pc, #16]	; (800aecc <HAL_UART_RxCpltCallback+0x20>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d102      	bne.n	800aec4 <HAL_UART_RxCpltCallback+0x18>
      //utils.print("Interrupt has been recieved! \r\n");
       uartHandler.onReceive();
 800aebe:	4804      	ldr	r0, [pc, #16]	; (800aed0 <HAL_UART_RxCpltCallback+0x24>)
 800aec0:	f7fd ffa6 	bl	8008e10 <_ZN11UARTHandler9onReceiveEv>
    }
}
 800aec4:	bf00      	nop
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	40011000 	.word	0x40011000
 800aed0:	20001c98 	.word	0x20001c98

0800aed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aed4:	b480      	push	{r7}
 800aed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800aed8:	b672      	cpsid	i
}
 800aeda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800aedc:	e7fe      	b.n	800aedc <Error_Handler+0x8>

0800aede <_ZN5UtilsD1Ev>:
public:
    std::string name;
    int status;
};

class Utils {
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff fbff 	bl	800a6ec <_ZN6ConfigD1Ev>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d116      	bne.n	800af36 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af0e:	4293      	cmp	r3, r2
 800af10:	d111      	bne.n	800af36 <_Z41__static_initialization_and_destruction_0ii+0x3e>
Config config;
 800af12:	4816      	ldr	r0, [pc, #88]	; (800af6c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800af14:	f7fe f8b4 	bl	8009080 <_ZN6ConfigC1Ev>
Utils utils;
 800af18:	4815      	ldr	r0, [pc, #84]	; (800af70 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800af1a:	f7fd f92e 	bl	800817a <_ZN5UtilsC1Ev>
EthernetManager ethManager;
 800af1e:	4815      	ldr	r0, [pc, #84]	; (800af74 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800af20:	f7fd fc37 	bl	8008792 <_ZN15EthernetManagerC1Ev>
MQTTConnection mqttClient;
 800af24:	4814      	ldr	r0, [pc, #80]	; (800af78 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800af26:	f000 f83d 	bl	800afa4 <_ZN14MQTTConnectionC1Ev>
UARTHandler uartHandler;
 800af2a:	4814      	ldr	r0, [pc, #80]	; (800af7c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800af2c:	f7fd feea 	bl	8008d04 <_ZN11UARTHandlerC1Ev>
static std::string statusJsonBuffer;
 800af30:	4813      	ldr	r0, [pc, #76]	; (800af80 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800af32:	f004 fa2d 	bl	800f390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d113      	bne.n	800af64 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af42:	4293      	cmp	r3, r2
 800af44:	d10e      	bne.n	800af64 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 800af46:	480e      	ldr	r0, [pc, #56]	; (800af80 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800af48:	f004 fa4a 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
MQTTConnection mqttClient;
 800af4c:	480a      	ldr	r0, [pc, #40]	; (800af78 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800af4e:	f000 f9d5 	bl	800b2fc <_ZN14MQTTConnectionD1Ev>
EthernetManager ethManager;
 800af52:	4808      	ldr	r0, [pc, #32]	; (800af74 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800af54:	f7fd fc12 	bl	800877c <_ZN15EthernetManagerD1Ev>
Utils utils;
 800af58:	4805      	ldr	r0, [pc, #20]	; (800af70 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800af5a:	f7ff ffc0 	bl	800aede <_ZN5UtilsD1Ev>
Config config;
 800af5e:	4803      	ldr	r0, [pc, #12]	; (800af6c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800af60:	f7ff fbc4 	bl	800a6ec <_ZN6ConfigD1Ev>
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	200013ec 	.word	0x200013ec
 800af70:	20001788 	.word	0x20001788
 800af74:	20001c24 	.word	0x20001c24
 800af78:	20001c28 	.word	0x20001c28
 800af7c:	20001c98 	.word	0x20001c98
 800af80:	200022b8 	.word	0x200022b8

0800af84 <_GLOBAL__sub_I_hadc1>:
 800af84:	b580      	push	{r7, lr}
 800af86:	af00      	add	r7, sp, #0
 800af88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800af8c:	2001      	movs	r0, #1
 800af8e:	f7ff ffb3 	bl	800aef8 <_Z41__static_initialization_and_destruction_0ii>
 800af92:	bd80      	pop	{r7, pc}

0800af94 <_GLOBAL__sub_D_hadc1>:
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0
 800af98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800af9c:	2000      	movs	r0, #0
 800af9e:	f7ff ffab 	bl	800aef8 <_Z41__static_initialization_and_destruction_0ii>
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <_ZN14MQTTConnectionC1Ev>:
uint8_t MQTTConnection::send_buffer[2048];
uint8_t MQTTConnection::recieve_buff[2048];
MQTTConnection* MQTTConnection::instance = nullptr;


MQTTConnection::MQTTConnection() {
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]

	MQTTConnection::instance = this;
 800afac:	4a04      	ldr	r2, [pc, #16]	; (800afc0 <_ZN14MQTTConnectionC1Ev+0x1c>)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6013      	str	r3, [r2, #0]

}
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4618      	mov	r0, r3
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	200032d0 	.word	0x200032d0

0800afc4 <_ZN14MQTTConnection4initE6ConfigP5Utils>:

void MQTTConnection::init(Config config, Utils * utilInstance) {
 800afc4:	b5b0      	push	{r4, r5, r7, lr}
 800afc6:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 800afca:	af04      	add	r7, sp, #16
 800afcc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800afd0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800afd4:	6018      	str	r0, [r3, #0]
 800afd6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800afda:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800afde:	6019      	str	r1, [r3, #0]
 800afe0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800afe4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800afe8:	601a      	str	r2, [r3, #0]
	    utils = utilInstance;
 800afea:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800afee:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800aff8:	f5a2 726b 	sub.w	r2, r2, #940	; 0x3ac
 800affc:	6812      	ldr	r2, [r2, #0]
 800affe:	601a      	str	r2, [r3, #0]
	    NewNetwork(&network, 1);
 800b000:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b004:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3360      	adds	r3, #96	; 0x60
 800b00c:	2101      	movs	r1, #1
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fc f948 	bl	80072a4 <NewNetwork>
	    ConnectNetwork(&network, config.getBrokerIP().data(), config.getBrokerPort());
 800b014:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b018:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800b022:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b026:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800b02a:	6818      	ldr	r0, [r3, #0]
 800b02c:	f7fe ff5e 	bl	8009eec <_ZNK6Config11getBrokerIPEv>
 800b030:	4602      	mov	r2, r0
 800b032:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b036:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	f107 0310 	add.w	r3, r7, #16
 800b040:	4618      	mov	r0, r3
 800b042:	f7fd fe47 	bl	8008cd4 <_ZNSt5arrayIhLj4EE4dataEv>
 800b046:	4605      	mov	r5, r0
 800b048:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b04c:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800b050:	6818      	ldr	r0, [r3, #0]
 800b052:	f7fe ff65 	bl	8009f20 <_ZNK6Config13getBrokerPortEv>
 800b056:	4603      	mov	r3, r0
 800b058:	461a      	mov	r2, r3
 800b05a:	4629      	mov	r1, r5
 800b05c:	4620      	mov	r0, r4
 800b05e:	f7fc f99e 	bl	800739e <ConnectNetwork>
	    MQTTClientInit(&mqttClient, &network, 1000,send_buffer , sizeof(send_buffer), recieve_buff, sizeof(recieve_buff));
 800b062:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b066:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	1d18      	adds	r0, r3, #4
 800b06e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b072:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800b07c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b080:	9302      	str	r3, [sp, #8]
 800b082:	4b18      	ldr	r3, [pc, #96]	; (800b0e4 <_ZN14MQTTConnection4initE6ConfigP5Utils+0x120>)
 800b084:	9301      	str	r3, [sp, #4]
 800b086:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	4b16      	ldr	r3, [pc, #88]	; (800b0e8 <_ZN14MQTTConnection4initE6ConfigP5Utils+0x124>)
 800b08e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b092:	f7fb fb4a 	bl	800672a <MQTTClientInit>
	    if (!connect(config)) {
 800b096:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b09a:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800b09e:	f107 0214 	add.w	r2, r7, #20
 800b0a2:	6819      	ldr	r1, [r3, #0]
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	f7ff fa9b 	bl	800a5e0 <_ZN6ConfigC1ERKS_>
 800b0aa:	f107 0214 	add.w	r2, r7, #20
 800b0ae:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b0b2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	6818      	ldr	r0, [r3, #0]
 800b0ba:	f000 f819 	bl	800b0f0 <_ZN14MQTTConnection7connectE6Config>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	f083 0301 	eor.w	r3, r3, #1
 800b0c4:	b2dc      	uxtb	r4, r3
 800b0c6:	f107 0314 	add.w	r3, r7, #20
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7ff fb0e 	bl	800a6ec <_ZN6ConfigD1Ev>
 800b0d0:	2c00      	cmp	r4, #0
 800b0d2:	d002      	beq.n	800b0da <_ZN14MQTTConnection4initE6ConfigP5Utils+0x116>
	     	utils->print("MQTT Connection has been failed\r\n");
 800b0d4:	4805      	ldr	r0, [pc, #20]	; (800b0ec <_ZN14MQTTConnection4initE6ConfigP5Utils+0x128>)
 800b0d6:	f7fd fa11 	bl	80084fc <_ZN5Utils5printEPKcz>
	      }
}
 800b0da:	bf00      	nop
 800b0dc:	f507 776c 	add.w	r7, r7, #944	; 0x3b0
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bdb0      	pop	{r4, r5, r7, pc}
 800b0e4:	20002ad0 	.word	0x20002ad0
 800b0e8:	200022d0 	.word	0x200022d0
 800b0ec:	080136f8 	.word	0x080136f8

0800b0f0 <_ZN14MQTTConnection7connectE6Config>:

bool MQTTConnection::connect(Config config) {
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b0aa      	sub	sp, #168	; 0xa8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
    // Set MQTT connection parameters
    MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 800b0fa:	4a34      	ldr	r2, [pc, #208]	; (800b1cc <_ZN14MQTTConnection7connectE6Config+0xdc>)
 800b0fc:	f107 0308 	add.w	r3, r7, #8
 800b100:	4611      	mov	r1, r2
 800b102:	2258      	movs	r2, #88	; 0x58
 800b104:	4618      	mov	r0, r3
 800b106:	f005 fcc6 	bl	8010a96 <memcpy>
    connectData.MQTTVersion = 3;
 800b10a:	2303      	movs	r3, #3
 800b10c:	743b      	strb	r3, [r7, #16]
    connectData.clientID.cstring = strdup(config.getClientId().c_str());
 800b10e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe ffaa 	bl	800a06e <_ZNK6Config11getClientIdB5cxx11Ev>
 800b11a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b11e:	4618      	mov	r0, r3
 800b120:	f004 fa58 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800b124:	4603      	mov	r3, r0
 800b126:	4618      	mov	r0, r3
 800b128:	f005 fbbe 	bl	80108a8 <strdup>
 800b12c:	4603      	mov	r3, r0
 800b12e:	617b      	str	r3, [r7, #20]
 800b130:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b134:	4618      	mov	r0, r3
 800b136:	f004 f953 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    connectData.username.cstring = const_cast<char*>(config.getUsername().c_str());
 800b13a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	4618      	mov	r0, r3
 800b142:	f7fe ff85 	bl	800a050 <_ZNK6Config11getUsernameB5cxx11Ev>
 800b146:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b14a:	4618      	mov	r0, r3
 800b14c:	f004 fa42 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800b150:	4603      	mov	r3, r0
 800b152:	64bb      	str	r3, [r7, #72]	; 0x48
 800b154:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b158:	4618      	mov	r0, r3
 800b15a:	f004 f941 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    connectData.password.cstring = const_cast<char*>(config.getPassword().c_str());
 800b15e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe ff91 	bl	800a08c <_ZNK6Config11getPasswordB5cxx11Ev>
 800b16a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b16e:	4618      	mov	r0, r3
 800b170:	f004 fa30 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800b174:	4603      	mov	r3, r0
 800b176:	657b      	str	r3, [r7, #84]	; 0x54
 800b178:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b17c:	4618      	mov	r0, r3
 800b17e:	f004 f92f 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    connectData.keepAliveInterval = config.getKeepAliveInterval();
 800b182:	6838      	ldr	r0, [r7, #0]
 800b184:	f7fe ff4c 	bl	800a020 <_ZNK6Config20getKeepAliveIntervalEv>
 800b188:	4603      	mov	r3, r0
 800b18a:	843b      	strh	r3, [r7, #32]
    connectData.cleansession = 1;
 800b18c:	2301      	movs	r3, #1
 800b18e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    // Attempt to connect to the MQTT broker
    if (MQTTConnect(&mqttClient, &connectData) != SUCCESS) {
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	3304      	adds	r3, #4
 800b196:	f107 0208 	add.w	r2, r7, #8
 800b19a:	4611      	mov	r1, r2
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fb fded 	bl	8006d7c <MQTTConnect>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	bf14      	ite	ne
 800b1a8:	2301      	movne	r3, #1
 800b1aa:	2300      	moveq	r3, #0
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d004      	beq.n	800b1bc <_ZN14MQTTConnection7connectE6Config+0xcc>
        utils->print("Connection failed!\n");
 800b1b2:	4807      	ldr	r0, [pc, #28]	; (800b1d0 <_ZN14MQTTConnection7connectE6Config+0xe0>)
 800b1b4:	f7fd f9a2 	bl	80084fc <_ZN5Utils5printEPKcz>
        return false;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e003      	b.n	800b1c4 <_ZN14MQTTConnection7connectE6Config+0xd4>
    }

   utils->print("Successfully connected to MQTT broker.\r\n");
 800b1bc:	4805      	ldr	r0, [pc, #20]	; (800b1d4 <_ZN14MQTTConnection7connectE6Config+0xe4>)
 800b1be:	f7fd f99d 	bl	80084fc <_ZN5Utils5printEPKcz>
    return true;
 800b1c2:	2301      	movs	r3, #1
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	37a8      	adds	r7, #168	; 0xa8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	0801375c 	.word	0x0801375c
 800b1d0:	0801371c 	.word	0x0801371c
 800b1d4:	08013730 	.word	0x08013730

0800b1d8 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config>:

bool MQTTConnection::publish(const std::string& message, Config config) {
 800b1d8:	b590      	push	{r4, r7, lr}
 800b1da:	b091      	sub	sp, #68	; 0x44
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
    MQTTMessage mqttMessage;
    mqttMessage.qos = QOS0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	753b      	strb	r3, [r7, #20]
    mqttMessage.retained = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	757b      	strb	r3, [r7, #21]
    mqttMessage.dup = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	75bb      	strb	r3, [r7, #22]
    const char* cMessage = message.c_str();
 800b1f0:	68b8      	ldr	r0, [r7, #8]
 800b1f2:	f004 f9ef 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800b1f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    mqttMessage.payload = (void*)cMessage;
 800b1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fa:	61fb      	str	r3, [r7, #28]
    mqttMessage.payloadlen = message.length();
 800b1fc:	68b8      	ldr	r0, [r7, #8]
 800b1fe:	f004 f8fd 	bl	800f3fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800b202:	4603      	mov	r3, r0
 800b204:	623b      	str	r3, [r7, #32]

    if (MQTTPublish(&mqttClient, config.getTopicPublish().c_str(), &mqttMessage) != SUCCESS) {
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	1d1c      	adds	r4, r3, #4
 800b20a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b20e:	6879      	ldr	r1, [r7, #4]
 800b210:	4618      	mov	r0, r3
 800b212:	f7fe ff59 	bl	800a0c8 <_ZNK6Config15getTopicPublishB5cxx11Ev>
 800b216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b21a:	4618      	mov	r0, r3
 800b21c:	f004 f9da 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800b220:	4601      	mov	r1, r0
 800b222:	f107 0314 	add.w	r3, r7, #20
 800b226:	461a      	mov	r2, r3
 800b228:	4620      	mov	r0, r4
 800b22a:	f7fb fed6 	bl	8006fda <MQTTPublish>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	bf14      	ite	ne
 800b234:	2301      	movne	r3, #1
 800b236:	2300      	moveq	r3, #0
 800b238:	b2dc      	uxtb	r4, r3
 800b23a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b23e:	4618      	mov	r0, r3
 800b240:	f004 f8ce 	bl	800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b244:	2c00      	cmp	r4, #0
 800b246:	d004      	beq.n	800b252 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config+0x7a>
      utils->print("Publish failed! \r\n");
 800b248:	4806      	ldr	r0, [pc, #24]	; (800b264 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config+0x8c>)
 800b24a:	f7fd f957 	bl	80084fc <_ZN5Utils5printEPKcz>
        return false;
 800b24e:	2300      	movs	r3, #0
 800b250:	e003      	b.n	800b25a <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config+0x82>
    }

     utils->print("Message published successfully.\r\n");
 800b252:	4805      	ldr	r0, [pc, #20]	; (800b268 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config+0x90>)
 800b254:	f7fd f952 	bl	80084fc <_ZN5Utils5printEPKcz>
    return true;
 800b258:	2301      	movs	r3, #1
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3744      	adds	r7, #68	; 0x44
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd90      	pop	{r4, r7, pc}
 800b262:	bf00      	nop
 800b264:	080137b4 	.word	0x080137b4
 800b268:	080137c8 	.word	0x080137c8

0800b26c <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void MQTTConnection::subscribe(std::string topic) {
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
	const char* subTopic = strdup(topic.c_str());
 800b276:	6838      	ldr	r0, [r7, #0]
 800b278:	f004 f9ac 	bl	800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800b27c:	4603      	mov	r3, r0
 800b27e:	4618      	mov	r0, r3
 800b280:	f005 fb12 	bl	80108a8 <strdup>
 800b284:	4603      	mov	r3, r0
 800b286:	60fb      	str	r3, [r7, #12]
    if (MQTTSubscribe(&mqttClient, subTopic, QOS0,  handleMessage) != SUCCESS) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	1d18      	adds	r0, r3, #4
 800b28c:	4b0b      	ldr	r3, [pc, #44]	; (800b2bc <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 800b28e:	2200      	movs	r2, #0
 800b290:	68f9      	ldr	r1, [r7, #12]
 800b292:	f7fb fdf9 	bl	8006e88 <MQTTSubscribe>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	bf14      	ite	ne
 800b29c:	2301      	movne	r3, #1
 800b29e:	2300      	moveq	r3, #0
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d003      	beq.n	800b2ae <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
       utils->print("Subscribe failed!\n");
 800b2a6:	4806      	ldr	r0, [pc, #24]	; (800b2c0 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>)
 800b2a8:	f7fd f928 	bl	80084fc <_ZN5Utils5printEPKcz>
    } else {
       utils->print("Subscribed to topic successfully.\r\n");
    }
}
 800b2ac:	e002      	b.n	800b2b4 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>
       utils->print("Subscribed to topic successfully.\r\n");
 800b2ae:	4805      	ldr	r0, [pc, #20]	; (800b2c4 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>)
 800b2b0:	f7fd f924 	bl	80084fc <_ZN5Utils5printEPKcz>
}
 800b2b4:	bf00      	nop
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	0800b2c9 	.word	0x0800b2c9
 800b2c0:	080137ec 	.word	0x080137ec
 800b2c4:	08013800 	.word	0x08013800

0800b2c8 <_ZN14MQTTConnection13handleMessageEP11MessageData>:

void MQTTConnection::handleMessage(MessageData* data) {
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
	print("Message has been arrived !!! \r\n");
 800b2d0:	4808      	ldr	r0, [pc, #32]	; (800b2f4 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x2c>)
 800b2d2:	f7fd fa23 	bl	800871c <_Z5printPKcz>
	 if (MQTTConnection::instance) {
 800b2d6:	4b08      	ldr	r3, [pc, #32]	; (800b2f8 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x30>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d005      	beq.n	800b2ea <_ZN14MQTTConnection13handleMessageEP11MessageData+0x22>
           MQTTConnection::instance->handleIncomingMessage(data);
 800b2de:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x30>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6879      	ldr	r1, [r7, #4]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f000 f841 	bl	800b36c <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData>
	  }
}
 800b2ea:	bf00      	nop
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	08013824 	.word	0x08013824
 800b2f8:	200032d0 	.word	0x200032d0

0800b2fc <_ZN14MQTTConnectionD1Ev>:



MQTTConnection::~MQTTConnection() {
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
    // Clean up resources, if necessary
    disconnect();
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f80f 	bl	800b328 <_ZN14MQTTConnection10disconnectEv>
    if (MQTTConnection::instance == this) {
 800b30a:	4b06      	ldr	r3, [pc, #24]	; (800b324 <_ZN14MQTTConnectionD1Ev+0x28>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	429a      	cmp	r2, r3
 800b312:	d102      	bne.n	800b31a <_ZN14MQTTConnectionD1Ev+0x1e>
    	MQTTConnection::instance = nullptr;
 800b314:	4b03      	ldr	r3, [pc, #12]	; (800b324 <_ZN14MQTTConnectionD1Ev+0x28>)
 800b316:	2200      	movs	r2, #0
 800b318:	601a      	str	r2, [r3, #0]
    }
}
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4618      	mov	r0, r3
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	200032d0 	.word	0x200032d0

0800b328 <_ZN14MQTTConnection10disconnectEv>:

void MQTTConnection::disconnect() {
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
    // Disconnect from the MQTT broker
    MQTTDisconnect(&mqttClient);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	3304      	adds	r3, #4
 800b334:	4618      	mov	r0, r3
 800b336:	f7fb ff0f 	bl	8007158 <MQTTDisconnect>
    utils->print("Disconnected from MQTT broker.\n");
 800b33a:	4803      	ldr	r0, [pc, #12]	; (800b348 <_ZN14MQTTConnection10disconnectEv+0x20>)
 800b33c:	f7fd f8de 	bl	80084fc <_ZN5Utils5printEPKcz>
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	08013844 	.word	0x08013844

0800b34c <_ZN14MQTTConnection9mqttYieldEv>:

void MQTTConnection::mqttYield() {
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	  MQTTYield(&mqttClient, 1000);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3304      	adds	r3, #4
 800b358:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fb fcc9 	bl	8006cf4 <MQTTYield>
}
 800b362:	bf00      	nop
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
	...

0800b36c <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData>:


void MQTTConnection::handleIncomingMessage(MessageData* data) {
 800b36c:	b580      	push	{r7, lr}
 800b36e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800b372:	af00      	add	r7, sp, #0
 800b374:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b378:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800b37c:	6018      	str	r0, [r3, #0]
 800b37e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b382:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800b386:	6019      	str	r1, [r3, #0]
	    if (data->message->payloadlen >= 1024) {
 800b388:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b38c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b39a:	d303      	bcc.n	800b3a4 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x38>
	        utils->print("Data size is bigger than expected \r\n");
 800b39c:	4853      	ldr	r0, [pc, #332]	; (800b4ec <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x180>)
 800b39e:	f7fd f8ad 	bl	80084fc <_ZN5Utils5printEPKcz>
	        return;
 800b3a2:	e09f      	b.n	800b4e4 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x178>
	    }
	    char payloadStr[1024]; // Static allocation
	    memcpy(payloadStr, data->message->payload, data->message->payloadlen);
 800b3a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b3a8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6899      	ldr	r1, [r3, #8]
 800b3b2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b3b6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68da      	ldr	r2, [r3, #12]
 800b3c0:	f107 0314 	add.w	r3, r7, #20
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f005 fb66 	bl	8010a96 <memcpy>
	    payloadStr[data->message->payloadlen] = '\0'; // Null-terminate
 800b3ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b3ce:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800b3dc:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	54d1      	strb	r1, [r2, r3]

	    cJSON *json = cJSON_Parse(payloadStr);
 800b3e4:	f107 0314 	add.w	r3, r7, #20
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fa f943 	bl	8005674 <cJSON_Parse>
 800b3ee:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
	    if (!json) {
 800b3f2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d103      	bne.n	800b402 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x96>
	    	utils->print("JSON format is not matching!!! \r\n");
 800b3fa:	483d      	ldr	r0, [pc, #244]	; (800b4f0 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x184>)
 800b3fc:	f7fd f87e 	bl	80084fc <_ZN5Utils5printEPKcz>
	        return;
 800b400:	e070      	b.n	800b4e4 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x178>
	    }
	    const cJSON *number = cJSON_GetObjectItemCaseSensitive(json, "number");
 800b402:	493c      	ldr	r1, [pc, #240]	; (800b4f4 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x188>)
 800b404:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 800b408:	f7fa ff55 	bl	80062b6 <cJSON_GetObjectItemCaseSensitive>
 800b40c:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
	    const cJSON *status = cJSON_GetObjectItemCaseSensitive(json, "status");
 800b410:	4939      	ldr	r1, [pc, #228]	; (800b4f8 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x18c>)
 800b412:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 800b416:	f7fa ff4e 	bl	80062b6 <cJSON_GetObjectItemCaseSensitive>
 800b41a:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

	    if (cJSON_IsNumber(number) && cJSON_IsNumber(status)) {
 800b41e:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 800b422:	f7fb f8f7 	bl	8006614 <cJSON_IsNumber>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d008      	beq.n	800b43e <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0xd2>
 800b42c:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 800b430:	f7fb f8f0 	bl	8006614 <cJSON_IsNumber>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0xd2>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0xd4>
 800b43e:	2300      	movs	r3, #0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d04b      	beq.n	800b4dc <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x170>

	    	if (number->valueint >= 1 && number->valueint <= 8) {
 800b444:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dd46      	ble.n	800b4dc <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x170>
 800b44e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800b452:	695b      	ldr	r3, [r3, #20]
 800b454:	2b08      	cmp	r3, #8
 800b456:	dc41      	bgt.n	800b4dc <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x170>
	    	    int arrayIndex = number->valueint - 1;
 800b458:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	3b01      	subs	r3, #1
 800b460:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	    	    PortAndPins targetSwitch = utils->switches[arrayIndex];
 800b464:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b468:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b474:	f2a3 411c 	subw	r1, r3, #1052	; 0x41c
 800b478:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800b47c:	3373      	adds	r3, #115	; 0x73
 800b47e:	00db      	lsls	r3, r3, #3
 800b480:	4413      	add	r3, r2
 800b482:	460a      	mov	r2, r1
 800b484:	3304      	adds	r3, #4
 800b486:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b48a:	e882 0003 	stmia.w	r2, {r0, r1}
	    	    bool success = utils->switchRelay(targetSwitch.port, targetSwitch.pin, status->valueint);
 800b48e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b492:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b49e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800b4a2:	6819      	ldr	r1, [r3, #0]
 800b4a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b4a8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800b4ac:	889a      	ldrh	r2, [r3, #4]
 800b4ae:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800b4b2:	695b      	ldr	r3, [r3, #20]
 800b4b4:	f7fd f868 	bl	8008588 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	    	    if (success) {
 800b4be:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d007      	beq.n	800b4d6 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x16a>
	    	        utils->print("The %d switch has been toggled.\r\n", number->valueint);
 800b4c6:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	480b      	ldr	r0, [pc, #44]	; (800b4fc <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x190>)
 800b4d0:	f7fd f814 	bl	80084fc <_ZN5Utils5printEPKcz>
 800b4d4:	e002      	b.n	800b4dc <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x170>
	    	    } else {
	    	        utils->print("There is an issue with switch \r\n");
 800b4d6:	480a      	ldr	r0, [pc, #40]	; (800b500 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x194>)
 800b4d8:	f7fd f810 	bl	80084fc <_ZN5Utils5printEPKcz>
	    	    }
	    	}
	    }
	    cJSON_Delete(json);
 800b4dc:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 800b4e0:	f7f9 f8bc 	bl	800465c <cJSON_Delete>
}
 800b4e4:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	08013864 	.word	0x08013864
 800b4f0:	0801388c 	.word	0x0801388c
 800b4f4:	080138b0 	.word	0x080138b0
 800b4f8:	080138b8 	.word	0x080138b8
 800b4fc:	080138c0 	.word	0x080138c0
 800b500:	080138e4 	.word	0x080138e4

0800b504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b50a:	2300      	movs	r3, #0
 800b50c:	607b      	str	r3, [r7, #4]
 800b50e:	4b10      	ldr	r3, [pc, #64]	; (800b550 <HAL_MspInit+0x4c>)
 800b510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b512:	4a0f      	ldr	r2, [pc, #60]	; (800b550 <HAL_MspInit+0x4c>)
 800b514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b518:	6453      	str	r3, [r2, #68]	; 0x44
 800b51a:	4b0d      	ldr	r3, [pc, #52]	; (800b550 <HAL_MspInit+0x4c>)
 800b51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b51e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b522:	607b      	str	r3, [r7, #4]
 800b524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b526:	2300      	movs	r3, #0
 800b528:	603b      	str	r3, [r7, #0]
 800b52a:	4b09      	ldr	r3, [pc, #36]	; (800b550 <HAL_MspInit+0x4c>)
 800b52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52e:	4a08      	ldr	r2, [pc, #32]	; (800b550 <HAL_MspInit+0x4c>)
 800b530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b534:	6413      	str	r3, [r2, #64]	; 0x40
 800b536:	4b06      	ldr	r3, [pc, #24]	; (800b550 <HAL_MspInit+0x4c>)
 800b538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b53e:	603b      	str	r3, [r7, #0]
 800b540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b542:	bf00      	nop
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	40023800 	.word	0x40023800

0800b554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b08c      	sub	sp, #48	; 0x30
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b55c:	f107 031c 	add.w	r3, r7, #28
 800b560:	2200      	movs	r2, #0
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	605a      	str	r2, [r3, #4]
 800b566:	609a      	str	r2, [r3, #8]
 800b568:	60da      	str	r2, [r3, #12]
 800b56a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a36      	ldr	r2, [pc, #216]	; (800b64c <HAL_ADC_MspInit+0xf8>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d130      	bne.n	800b5d8 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b576:	2300      	movs	r3, #0
 800b578:	61bb      	str	r3, [r7, #24]
 800b57a:	4b35      	ldr	r3, [pc, #212]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b57e:	4a34      	ldr	r2, [pc, #208]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b584:	6453      	str	r3, [r2, #68]	; 0x44
 800b586:	4b32      	ldr	r3, [pc, #200]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58e:	61bb      	str	r3, [r7, #24]
 800b590:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b592:	2300      	movs	r3, #0
 800b594:	617b      	str	r3, [r7, #20]
 800b596:	4b2e      	ldr	r3, [pc, #184]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59a:	4a2d      	ldr	r2, [pc, #180]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b59c:	f043 0301 	orr.w	r3, r3, #1
 800b5a0:	6313      	str	r3, [r2, #48]	; 0x30
 800b5a2:	4b2b      	ldr	r3, [pc, #172]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	617b      	str	r3, [r7, #20]
 800b5ac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5ba:	f107 031c 	add.w	r3, r7, #28
 800b5be:	4619      	mov	r1, r3
 800b5c0:	4824      	ldr	r0, [pc, #144]	; (800b654 <HAL_ADC_MspInit+0x100>)
 800b5c2:	f001 f9ad 	bl	800c920 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	2012      	movs	r0, #18
 800b5cc:	f001 f8df 	bl	800c78e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800b5d0:	2012      	movs	r0, #18
 800b5d2:	f001 f8f8 	bl	800c7c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800b5d6:	e034      	b.n	800b642 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a1e      	ldr	r2, [pc, #120]	; (800b658 <HAL_ADC_MspInit+0x104>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d12f      	bne.n	800b642 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	613b      	str	r3, [r7, #16]
 800b5e6:	4b1a      	ldr	r3, [pc, #104]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ea:	4a19      	ldr	r2, [pc, #100]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b5ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5f0:	6453      	str	r3, [r2, #68]	; 0x44
 800b5f2:	4b17      	ldr	r3, [pc, #92]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5fa:	613b      	str	r3, [r7, #16]
 800b5fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5fe:	2300      	movs	r3, #0
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	4b13      	ldr	r3, [pc, #76]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b606:	4a12      	ldr	r2, [pc, #72]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b608:	f043 0301 	orr.w	r3, r3, #1
 800b60c:	6313      	str	r3, [r2, #48]	; 0x30
 800b60e:	4b10      	ldr	r3, [pc, #64]	; (800b650 <HAL_ADC_MspInit+0xfc>)
 800b610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b61a:	2302      	movs	r3, #2
 800b61c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b61e:	2303      	movs	r3, #3
 800b620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b622:	2300      	movs	r3, #0
 800b624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b626:	f107 031c 	add.w	r3, r7, #28
 800b62a:	4619      	mov	r1, r3
 800b62c:	4809      	ldr	r0, [pc, #36]	; (800b654 <HAL_ADC_MspInit+0x100>)
 800b62e:	f001 f977 	bl	800c920 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800b632:	2200      	movs	r2, #0
 800b634:	2100      	movs	r1, #0
 800b636:	2012      	movs	r0, #18
 800b638:	f001 f8a9 	bl	800c78e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800b63c:	2012      	movs	r0, #18
 800b63e:	f001 f8c2 	bl	800c7c6 <HAL_NVIC_EnableIRQ>
}
 800b642:	bf00      	nop
 800b644:	3730      	adds	r7, #48	; 0x30
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	40012000 	.word	0x40012000
 800b650:	40023800 	.word	0x40023800
 800b654:	40020000 	.word	0x40020000
 800b658:	40012100 	.word	0x40012100

0800b65c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08a      	sub	sp, #40	; 0x28
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b664:	f107 0314 	add.w	r3, r7, #20
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]
 800b66c:	605a      	str	r2, [r3, #4]
 800b66e:	609a      	str	r2, [r3, #8]
 800b670:	60da      	str	r2, [r3, #12]
 800b672:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a19      	ldr	r2, [pc, #100]	; (800b6e0 <HAL_SPI_MspInit+0x84>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d12c      	bne.n	800b6d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b67e:	2300      	movs	r3, #0
 800b680:	613b      	str	r3, [r7, #16]
 800b682:	4b18      	ldr	r3, [pc, #96]	; (800b6e4 <HAL_SPI_MspInit+0x88>)
 800b684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b686:	4a17      	ldr	r2, [pc, #92]	; (800b6e4 <HAL_SPI_MspInit+0x88>)
 800b688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b68c:	6413      	str	r3, [r2, #64]	; 0x40
 800b68e:	4b15      	ldr	r3, [pc, #84]	; (800b6e4 <HAL_SPI_MspInit+0x88>)
 800b690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b696:	613b      	str	r3, [r7, #16]
 800b698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b69a:	2300      	movs	r3, #0
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <HAL_SPI_MspInit+0x88>)
 800b6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a2:	4a10      	ldr	r2, [pc, #64]	; (800b6e4 <HAL_SPI_MspInit+0x88>)
 800b6a4:	f043 0302 	orr.w	r3, r3, #2
 800b6a8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6aa:	4b0e      	ldr	r3, [pc, #56]	; (800b6e4 <HAL_SPI_MspInit+0x88>)
 800b6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ae:	f003 0302 	and.w	r3, r3, #2
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800b6b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800b6ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6bc:	2302      	movs	r3, #2
 800b6be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b6c8:	2305      	movs	r3, #5
 800b6ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6cc:	f107 0314 	add.w	r3, r7, #20
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	4805      	ldr	r0, [pc, #20]	; (800b6e8 <HAL_SPI_MspInit+0x8c>)
 800b6d4:	f001 f924 	bl	800c920 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b6d8:	bf00      	nop
 800b6da:	3728      	adds	r7, #40	; 0x28
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	40003800 	.word	0x40003800
 800b6e4:	40023800 	.word	0x40023800
 800b6e8:	40020400 	.word	0x40020400

0800b6ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08a      	sub	sp, #40	; 0x28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6f4:	f107 0314 	add.w	r3, r7, #20
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	605a      	str	r2, [r3, #4]
 800b6fe:	609a      	str	r2, [r3, #8]
 800b700:	60da      	str	r2, [r3, #12]
 800b702:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a1d      	ldr	r2, [pc, #116]	; (800b780 <HAL_UART_MspInit+0x94>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d133      	bne.n	800b776 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b70e:	2300      	movs	r3, #0
 800b710:	613b      	str	r3, [r7, #16]
 800b712:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <HAL_UART_MspInit+0x98>)
 800b714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b716:	4a1b      	ldr	r2, [pc, #108]	; (800b784 <HAL_UART_MspInit+0x98>)
 800b718:	f043 0310 	orr.w	r3, r3, #16
 800b71c:	6453      	str	r3, [r2, #68]	; 0x44
 800b71e:	4b19      	ldr	r3, [pc, #100]	; (800b784 <HAL_UART_MspInit+0x98>)
 800b720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b722:	f003 0310 	and.w	r3, r3, #16
 800b726:	613b      	str	r3, [r7, #16]
 800b728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	4b15      	ldr	r3, [pc, #84]	; (800b784 <HAL_UART_MspInit+0x98>)
 800b730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b732:	4a14      	ldr	r2, [pc, #80]	; (800b784 <HAL_UART_MspInit+0x98>)
 800b734:	f043 0302 	orr.w	r3, r3, #2
 800b738:	6313      	str	r3, [r2, #48]	; 0x30
 800b73a:	4b12      	ldr	r3, [pc, #72]	; (800b784 <HAL_UART_MspInit+0x98>)
 800b73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73e:	f003 0302 	and.w	r3, r3, #2
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b746:	23c0      	movs	r3, #192	; 0xc0
 800b748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b74a:	2302      	movs	r3, #2
 800b74c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b74e:	2300      	movs	r3, #0
 800b750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b752:	2303      	movs	r3, #3
 800b754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b756:	2307      	movs	r3, #7
 800b758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b75a:	f107 0314 	add.w	r3, r7, #20
 800b75e:	4619      	mov	r1, r3
 800b760:	4809      	ldr	r0, [pc, #36]	; (800b788 <HAL_UART_MspInit+0x9c>)
 800b762:	f001 f8dd 	bl	800c920 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b766:	2200      	movs	r2, #0
 800b768:	2100      	movs	r1, #0
 800b76a:	2025      	movs	r0, #37	; 0x25
 800b76c:	f001 f80f 	bl	800c78e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b770:	2025      	movs	r0, #37	; 0x25
 800b772:	f001 f828 	bl	800c7c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b776:	bf00      	nop
 800b778:	3728      	adds	r7, #40	; 0x28
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	40011000 	.word	0x40011000
 800b784:	40023800 	.word	0x40023800
 800b788:	40020400 	.word	0x40020400

0800b78c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b790:	e7fe      	b.n	800b790 <NMI_Handler+0x4>

0800b792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b792:	b480      	push	{r7}
 800b794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b796:	e7fe      	b.n	800b796 <HardFault_Handler+0x4>

0800b798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b79c:	e7fe      	b.n	800b79c <MemManage_Handler+0x4>

0800b79e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b7a2:	e7fe      	b.n	800b7a2 <BusFault_Handler+0x4>

0800b7a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b7a8:	e7fe      	b.n	800b7a8 <UsageFault_Handler+0x4>

0800b7aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b7ae:	bf00      	nop
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b7bc:	bf00      	nop
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b7ca:	bf00      	nop
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b7d8:	f000 f98a 	bl	800baf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  MilliTimer_Handler();
 800b7dc:	f7fb fcee 	bl	80071bc <MilliTimer_Handler>

  static uint16_t milli_count;
   milli_count++;
 800b7e0:	4b08      	ldr	r3, [pc, #32]	; (800b804 <SysTick_Handler+0x30>)
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	4b06      	ldr	r3, [pc, #24]	; (800b804 <SysTick_Handler+0x30>)
 800b7ea:	801a      	strh	r2, [r3, #0]
   if(milli_count==1000)
 800b7ec:	4b05      	ldr	r3, [pc, #20]	; (800b804 <SysTick_Handler+0x30>)
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7f4:	d104      	bne.n	800b800 <SysTick_Handler+0x2c>
   {
   milli_count=0;
 800b7f6:	4b03      	ldr	r3, [pc, #12]	; (800b804 <SysTick_Handler+0x30>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	801a      	strh	r2, [r3, #0]
   DHCP_time_handler();
 800b7fc:	f7f6 fe74 	bl	80024e8 <DHCP_time_handler>
   }

  /* USER CODE END SysTick_IRQn 1 */
}
 800b800:	bf00      	nop
 800b802:	bd80      	pop	{r7, pc}
 800b804:	200032d4 	.word	0x200032d4

0800b808 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800b80c:	4803      	ldr	r0, [pc, #12]	; (800b81c <ADC_IRQHandler+0x14>)
 800b80e:	f000 f9f6 	bl	800bbfe <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800b812:	4803      	ldr	r0, [pc, #12]	; (800b820 <ADC_IRQHandler+0x18>)
 800b814:	f000 f9f3 	bl	800bbfe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800b818:	bf00      	nop
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	200012bc 	.word	0x200012bc
 800b820:	20001304 	.word	0x20001304

0800b824 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	af00      	add	r7, sp, #0
	  }

*/

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b828:	4802      	ldr	r0, [pc, #8]	; (800b834 <USART1_IRQHandler+0x10>)
 800b82a:	f002 fd8d 	bl	800e348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b82e:	bf00      	nop
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	200013a4 	.word	0x200013a4

0800b838 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NetworkStatus_Pin);
 800b83c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b840:	f001 fa3c 	bl	800ccbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b844:	bf00      	nop
 800b846:	bd80      	pop	{r7, pc}

0800b848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
  return 1;
 800b84c:	2301      	movs	r3, #1
}
 800b84e:	4618      	mov	r0, r3
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <_kill>:

int _kill(int pid, int sig)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b862:	f005 f8eb 	bl	8010a3c <__errno>
 800b866:	4603      	mov	r3, r0
 800b868:	2216      	movs	r2, #22
 800b86a:	601a      	str	r2, [r3, #0]
  return -1;
 800b86c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b870:	4618      	mov	r0, r3
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <_exit>:

void _exit (int status)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b880:	f04f 31ff 	mov.w	r1, #4294967295
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff ffe7 	bl	800b858 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b88a:	e7fe      	b.n	800b88a <_exit+0x12>

0800b88c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b898:	2300      	movs	r3, #0
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	e00a      	b.n	800b8b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b89e:	f3af 8000 	nop.w
 800b8a2:	4601      	mov	r1, r0
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	1c5a      	adds	r2, r3, #1
 800b8a8:	60ba      	str	r2, [r7, #8]
 800b8aa:	b2ca      	uxtb	r2, r1
 800b8ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	617b      	str	r3, [r7, #20]
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	dbf0      	blt.n	800b89e <_read+0x12>
  }

  return len;
 800b8bc:	687b      	ldr	r3, [r7, #4]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b086      	sub	sp, #24
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	60f8      	str	r0, [r7, #12]
 800b8ce:	60b9      	str	r1, [r7, #8]
 800b8d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	e009      	b.n	800b8ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	1c5a      	adds	r2, r3, #1
 800b8dc:	60ba      	str	r2, [r7, #8]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	dbf1      	blt.n	800b8d8 <_write+0x12>
  }
  return len;
 800b8f4:	687b      	ldr	r3, [r7, #4]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <_close>:

int _close(int file)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b916:	b480      	push	{r7}
 800b918:	b083      	sub	sp, #12
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b926:	605a      	str	r2, [r3, #4]
  return 0;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	370c      	adds	r7, #12
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <_isatty>:

int _isatty(int file)
{
 800b936:	b480      	push	{r7}
 800b938:	b083      	sub	sp, #12
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b93e:	2301      	movs	r3, #1
}
 800b940:	4618      	mov	r0, r3
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
	...

0800b968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b970:	4a14      	ldr	r2, [pc, #80]	; (800b9c4 <_sbrk+0x5c>)
 800b972:	4b15      	ldr	r3, [pc, #84]	; (800b9c8 <_sbrk+0x60>)
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b97c:	4b13      	ldr	r3, [pc, #76]	; (800b9cc <_sbrk+0x64>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d102      	bne.n	800b98a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b984:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <_sbrk+0x64>)
 800b986:	4a12      	ldr	r2, [pc, #72]	; (800b9d0 <_sbrk+0x68>)
 800b988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b98a:	4b10      	ldr	r3, [pc, #64]	; (800b9cc <_sbrk+0x64>)
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4413      	add	r3, r2
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	429a      	cmp	r2, r3
 800b996:	d207      	bcs.n	800b9a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b998:	f005 f850 	bl	8010a3c <__errno>
 800b99c:	4603      	mov	r3, r0
 800b99e:	220c      	movs	r2, #12
 800b9a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a6:	e009      	b.n	800b9bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b9a8:	4b08      	ldr	r3, [pc, #32]	; (800b9cc <_sbrk+0x64>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b9ae:	4b07      	ldr	r3, [pc, #28]	; (800b9cc <_sbrk+0x64>)
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	4a05      	ldr	r2, [pc, #20]	; (800b9cc <_sbrk+0x64>)
 800b9b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	20020000 	.word	0x20020000
 800b9c8:	00000400 	.word	0x00000400
 800b9cc:	200032d8 	.word	0x200032d8
 800b9d0:	20003430 	.word	0x20003430

0800b9d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b9d8:	4b06      	ldr	r3, [pc, #24]	; (800b9f4 <SystemInit+0x20>)
 800b9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9de:	4a05      	ldr	r2, [pc, #20]	; (800b9f4 <SystemInit+0x20>)
 800b9e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b9e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b9e8:	bf00      	nop
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	e000ed00 	.word	0xe000ed00

0800b9f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b9f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ba30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800b9fc:	f7ff ffea 	bl	800b9d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ba00:	480c      	ldr	r0, [pc, #48]	; (800ba34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ba02:	490d      	ldr	r1, [pc, #52]	; (800ba38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ba04:	4a0d      	ldr	r2, [pc, #52]	; (800ba3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ba06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ba08:	e002      	b.n	800ba10 <LoopCopyDataInit>

0800ba0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ba0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ba0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ba0e:	3304      	adds	r3, #4

0800ba10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ba10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ba12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ba14:	d3f9      	bcc.n	800ba0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ba16:	4a0a      	ldr	r2, [pc, #40]	; (800ba40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ba18:	4c0a      	ldr	r4, [pc, #40]	; (800ba44 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ba1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ba1c:	e001      	b.n	800ba22 <LoopFillZerobss>

0800ba1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ba1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ba20:	3204      	adds	r2, #4

0800ba22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ba22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ba24:	d3fb      	bcc.n	800ba1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ba26:	f005 f80f 	bl	8010a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ba2a:	f7fe fe93 	bl	800a754 <main>
  bx  lr    
 800ba2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ba30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ba34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ba38:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 800ba3c:	08013d90 	.word	0x08013d90
  ldr r2, =_sbss
 800ba40:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 800ba44:	20003430 	.word	0x20003430

0800ba48 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ba48:	e7fe      	b.n	800ba48 <CAN1_RX0_IRQHandler>
	...

0800ba4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ba50:	4b0e      	ldr	r3, [pc, #56]	; (800ba8c <HAL_Init+0x40>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a0d      	ldr	r2, [pc, #52]	; (800ba8c <HAL_Init+0x40>)
 800ba56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ba5c:	4b0b      	ldr	r3, [pc, #44]	; (800ba8c <HAL_Init+0x40>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a0a      	ldr	r2, [pc, #40]	; (800ba8c <HAL_Init+0x40>)
 800ba62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ba66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ba68:	4b08      	ldr	r3, [pc, #32]	; (800ba8c <HAL_Init+0x40>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a07      	ldr	r2, [pc, #28]	; (800ba8c <HAL_Init+0x40>)
 800ba6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ba74:	2003      	movs	r0, #3
 800ba76:	f000 fe7f 	bl	800c778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ba7a:	200f      	movs	r0, #15
 800ba7c:	f000 f808 	bl	800ba90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ba80:	f7ff fd40 	bl	800b504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	40023c00 	.word	0x40023c00

0800ba90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ba98:	4b12      	ldr	r3, [pc, #72]	; (800bae4 <HAL_InitTick+0x54>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	4b12      	ldr	r3, [pc, #72]	; (800bae8 <HAL_InitTick+0x58>)
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	4619      	mov	r1, r3
 800baa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800baa6:	fbb3 f3f1 	udiv	r3, r3, r1
 800baaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 fe97 	bl	800c7e2 <HAL_SYSTICK_Config>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e00e      	b.n	800badc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b0f      	cmp	r3, #15
 800bac2:	d80a      	bhi.n	800bada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bac4:	2200      	movs	r2, #0
 800bac6:	6879      	ldr	r1, [r7, #4]
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	f000 fe5f 	bl	800c78e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bad0:	4a06      	ldr	r2, [pc, #24]	; (800baec <HAL_InitTick+0x5c>)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
 800bad8:	e000      	b.n	800badc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
}
 800badc:	4618      	mov	r0, r3
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20000058 	.word	0x20000058
 800bae8:	20000060 	.word	0x20000060
 800baec:	2000005c 	.word	0x2000005c

0800baf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800baf0:	b480      	push	{r7}
 800baf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800baf4:	4b06      	ldr	r3, [pc, #24]	; (800bb10 <HAL_IncTick+0x20>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	461a      	mov	r2, r3
 800bafa:	4b06      	ldr	r3, [pc, #24]	; (800bb14 <HAL_IncTick+0x24>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4413      	add	r3, r2
 800bb00:	4a04      	ldr	r2, [pc, #16]	; (800bb14 <HAL_IncTick+0x24>)
 800bb02:	6013      	str	r3, [r2, #0]
}
 800bb04:	bf00      	nop
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20000060 	.word	0x20000060
 800bb14:	200032dc 	.word	0x200032dc

0800bb18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	af00      	add	r7, sp, #0
  return uwTick;
 800bb1c:	4b03      	ldr	r3, [pc, #12]	; (800bb2c <HAL_GetTick+0x14>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	200032dc 	.word	0x200032dc

0800bb30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bb38:	f7ff ffee 	bl	800bb18 <HAL_GetTick>
 800bb3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb48:	d005      	beq.n	800bb56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bb4a:	4b0a      	ldr	r3, [pc, #40]	; (800bb74 <HAL_Delay+0x44>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bb56:	bf00      	nop
 800bb58:	f7ff ffde 	bl	800bb18 <HAL_GetTick>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d8f7      	bhi.n	800bb58 <HAL_Delay+0x28>
  {
  }
}
 800bb68:	bf00      	nop
 800bb6a:	bf00      	nop
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	20000060 	.word	0x20000060

0800bb78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d101      	bne.n	800bb8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e033      	b.n	800bbf6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d109      	bne.n	800bbaa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7ff fcdc 	bl	800b554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbae:	f003 0310 	and.w	r3, r3, #16
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d118      	bne.n	800bbe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bbbe:	f023 0302 	bic.w	r3, r3, #2
 800bbc2:	f043 0202 	orr.w	r2, r3, #2
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fa68 	bl	800c0a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbda:	f023 0303 	bic.w	r3, r3, #3
 800bbde:	f043 0201 	orr.w	r2, r3, #1
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	641a      	str	r2, [r3, #64]	; 0x40
 800bbe6:	e001      	b.n	800bbec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b086      	sub	sp, #24
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800bc06:	2300      	movs	r3, #0
 800bc08:	617b      	str	r3, [r7, #20]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f003 0302 	and.w	r3, r3, #2
 800bc24:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	f003 0320 	and.w	r3, r3, #32
 800bc2c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d049      	beq.n	800bcc8 <HAL_ADC_IRQHandler+0xca>
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d046      	beq.n	800bcc8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3e:	f003 0310 	and.w	r3, r3, #16
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d105      	bne.n	800bc52 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d12b      	bne.n	800bcb8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d127      	bne.n	800bcb8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d006      	beq.n	800bc84 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d119      	bne.n	800bcb8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	685a      	ldr	r2, [r3, #4]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f022 0220 	bic.w	r2, r2, #32
 800bc92:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d105      	bne.n	800bcb8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb0:	f043 0201 	orr.w	r2, r3, #1
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 f8b0 	bl	800be1e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f06f 0212 	mvn.w	r2, #18
 800bcc6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f003 0304 	and.w	r3, r3, #4
 800bcce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcd6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d057      	beq.n	800bd8e <HAL_ADC_IRQHandler+0x190>
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d054      	beq.n	800bd8e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce8:	f003 0310 	and.w	r3, r3, #16
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d105      	bne.n	800bcfc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d139      	bne.n	800bd7e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d006      	beq.n	800bd26 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d12b      	bne.n	800bd7e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d124      	bne.n	800bd7e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d11d      	bne.n	800bd7e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d119      	bne.n	800bd7e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	685a      	ldr	r2, [r3, #4]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd58:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d105      	bne.n	800bd7e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd76:	f043 0201 	orr.w	r2, r3, #1
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fa8a 	bl	800c298 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f06f 020c 	mvn.w	r2, #12
 800bd8c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f003 0301 	and.w	r3, r3, #1
 800bd94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd9c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d017      	beq.n	800bdd4 <HAL_ADC_IRQHandler+0x1d6>
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d014      	beq.n	800bdd4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d10d      	bne.n	800bdd4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 f834 	bl	800be32 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f06f 0201 	mvn.w	r2, #1
 800bdd2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f003 0320 	and.w	r3, r3, #32
 800bdda:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bde2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d015      	beq.n	800be16 <HAL_ADC_IRQHandler+0x218>
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d012      	beq.n	800be16 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdf4:	f043 0202 	orr.w	r2, r3, #2
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f06f 0220 	mvn.w	r2, #32
 800be04:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f81d 	bl	800be46 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f06f 0220 	mvn.w	r2, #32
 800be14:	601a      	str	r2, [r3, #0]
  }
}
 800be16:	bf00      	nop
 800be18:	3718      	adds	r7, #24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800be1e:	b480      	push	{r7}
 800be20:	b083      	sub	sp, #12
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800be26:	bf00      	nop
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr

0800be32 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800be32:	b480      	push	{r7}
 800be34:	b083      	sub	sp, #12
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800be3a:	bf00      	nop
 800be3c:	370c      	adds	r7, #12
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800be46:	b480      	push	{r7}
 800be48:	b083      	sub	sp, #12
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800be4e:	bf00      	nop
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
	...

0800be5c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800be66:	2300      	movs	r3, #0
 800be68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be70:	2b01      	cmp	r3, #1
 800be72:	d101      	bne.n	800be78 <HAL_ADC_ConfigChannel+0x1c>
 800be74:	2302      	movs	r3, #2
 800be76:	e105      	b.n	800c084 <HAL_ADC_ConfigChannel+0x228>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b09      	cmp	r3, #9
 800be86:	d925      	bls.n	800bed4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68d9      	ldr	r1, [r3, #12]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	b29b      	uxth	r3, r3
 800be94:	461a      	mov	r2, r3
 800be96:	4613      	mov	r3, r2
 800be98:	005b      	lsls	r3, r3, #1
 800be9a:	4413      	add	r3, r2
 800be9c:	3b1e      	subs	r3, #30
 800be9e:	2207      	movs	r2, #7
 800bea0:	fa02 f303 	lsl.w	r3, r2, r3
 800bea4:	43da      	mvns	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	400a      	ands	r2, r1
 800beac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68d9      	ldr	r1, [r3, #12]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	689a      	ldr	r2, [r3, #8]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	4618      	mov	r0, r3
 800bec0:	4603      	mov	r3, r0
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	4403      	add	r3, r0
 800bec6:	3b1e      	subs	r3, #30
 800bec8:	409a      	lsls	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	430a      	orrs	r2, r1
 800bed0:	60da      	str	r2, [r3, #12]
 800bed2:	e022      	b.n	800bf1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6919      	ldr	r1, [r3, #16]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	461a      	mov	r2, r3
 800bee2:	4613      	mov	r3, r2
 800bee4:	005b      	lsls	r3, r3, #1
 800bee6:	4413      	add	r3, r2
 800bee8:	2207      	movs	r2, #7
 800beea:	fa02 f303 	lsl.w	r3, r2, r3
 800beee:	43da      	mvns	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	400a      	ands	r2, r1
 800bef6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6919      	ldr	r1, [r3, #16]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	689a      	ldr	r2, [r3, #8]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	4618      	mov	r0, r3
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	4403      	add	r3, r0
 800bf10:	409a      	lsls	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	430a      	orrs	r2, r1
 800bf18:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	2b06      	cmp	r3, #6
 800bf20:	d824      	bhi.n	800bf6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	3b05      	subs	r3, #5
 800bf34:	221f      	movs	r2, #31
 800bf36:	fa02 f303 	lsl.w	r3, r2, r3
 800bf3a:	43da      	mvns	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	400a      	ands	r2, r1
 800bf42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	4618      	mov	r0, r3
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	4613      	mov	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4413      	add	r3, r2
 800bf5c:	3b05      	subs	r3, #5
 800bf5e:	fa00 f203 	lsl.w	r2, r0, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	430a      	orrs	r2, r1
 800bf68:	635a      	str	r2, [r3, #52]	; 0x34
 800bf6a:	e04c      	b.n	800c006 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	2b0c      	cmp	r3, #12
 800bf72:	d824      	bhi.n	800bfbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	685a      	ldr	r2, [r3, #4]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	3b23      	subs	r3, #35	; 0x23
 800bf86:	221f      	movs	r2, #31
 800bf88:	fa02 f303 	lsl.w	r3, r2, r3
 800bf8c:	43da      	mvns	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	400a      	ands	r2, r1
 800bf94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	685a      	ldr	r2, [r3, #4]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	4413      	add	r3, r2
 800bfae:	3b23      	subs	r3, #35	; 0x23
 800bfb0:	fa00 f203 	lsl.w	r2, r0, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	430a      	orrs	r2, r1
 800bfba:	631a      	str	r2, [r3, #48]	; 0x30
 800bfbc:	e023      	b.n	800c006 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	685a      	ldr	r2, [r3, #4]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	3b41      	subs	r3, #65	; 0x41
 800bfd0:	221f      	movs	r2, #31
 800bfd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd6:	43da      	mvns	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	400a      	ands	r2, r1
 800bfde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	4618      	mov	r0, r3
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	3b41      	subs	r3, #65	; 0x41
 800bffa:	fa00 f203 	lsl.w	r2, r0, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c006:	4b22      	ldr	r3, [pc, #136]	; (800c090 <HAL_ADC_ConfigChannel+0x234>)
 800c008:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a21      	ldr	r2, [pc, #132]	; (800c094 <HAL_ADC_ConfigChannel+0x238>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d109      	bne.n	800c028 <HAL_ADC_ConfigChannel+0x1cc>
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b12      	cmp	r3, #18
 800c01a:	d105      	bne.n	800c028 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a19      	ldr	r2, [pc, #100]	; (800c094 <HAL_ADC_ConfigChannel+0x238>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d123      	bne.n	800c07a <HAL_ADC_ConfigChannel+0x21e>
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b10      	cmp	r3, #16
 800c038:	d003      	beq.n	800c042 <HAL_ADC_ConfigChannel+0x1e6>
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b11      	cmp	r3, #17
 800c040:	d11b      	bne.n	800c07a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b10      	cmp	r3, #16
 800c054:	d111      	bne.n	800c07a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c056:	4b10      	ldr	r3, [pc, #64]	; (800c098 <HAL_ADC_ConfigChannel+0x23c>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a10      	ldr	r2, [pc, #64]	; (800c09c <HAL_ADC_ConfigChannel+0x240>)
 800c05c:	fba2 2303 	umull	r2, r3, r2, r3
 800c060:	0c9a      	lsrs	r2, r3, #18
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800c06c:	e002      	b.n	800c074 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	3b01      	subs	r3, #1
 800c072:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1f9      	bne.n	800c06e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr
 800c090:	40012300 	.word	0x40012300
 800c094:	40012000 	.word	0x40012000
 800c098:	20000058 	.word	0x20000058
 800c09c:	431bde83 	.word	0x431bde83

0800c0a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c0a8:	4b79      	ldr	r3, [pc, #484]	; (800c290 <ADC_Init+0x1f0>)
 800c0aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	431a      	orrs	r2, r3
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	6859      	ldr	r1, [r3, #4]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	691b      	ldr	r3, [r3, #16]
 800c0e0:	021a      	lsls	r2, r3, #8
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	430a      	orrs	r2, r1
 800c0e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c0f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	6859      	ldr	r1, [r3, #4]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	689a      	ldr	r2, [r3, #8]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	430a      	orrs	r2, r1
 800c10a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	689a      	ldr	r2, [r3, #8]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c11a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6899      	ldr	r1, [r3, #8]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	68da      	ldr	r2, [r3, #12]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	430a      	orrs	r2, r1
 800c12c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c132:	4a58      	ldr	r2, [pc, #352]	; (800c294 <ADC_Init+0x1f4>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d022      	beq.n	800c17e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	689a      	ldr	r2, [r3, #8]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6899      	ldr	r1, [r3, #8]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	430a      	orrs	r2, r1
 800c158:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	689a      	ldr	r2, [r3, #8]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	6899      	ldr	r1, [r3, #8]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	430a      	orrs	r2, r1
 800c17a:	609a      	str	r2, [r3, #8]
 800c17c:	e00f      	b.n	800c19e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	689a      	ldr	r2, [r3, #8]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c18c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c19c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	689a      	ldr	r2, [r3, #8]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f022 0202 	bic.w	r2, r2, #2
 800c1ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	6899      	ldr	r1, [r3, #8]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	7e1b      	ldrb	r3, [r3, #24]
 800c1b8:	005a      	lsls	r2, r3, #1
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d01b      	beq.n	800c204 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	685a      	ldr	r2, [r3, #4]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c1ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6859      	ldr	r1, [r3, #4]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	035a      	lsls	r2, r3, #13
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	430a      	orrs	r2, r1
 800c200:	605a      	str	r2, [r3, #4]
 800c202:	e007      	b.n	800c214 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	685a      	ldr	r2, [r3, #4]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c212:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	3b01      	subs	r3, #1
 800c230:	051a      	lsls	r2, r3, #20
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	430a      	orrs	r2, r1
 800c238:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	689a      	ldr	r2, [r3, #8]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6899      	ldr	r1, [r3, #8]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c256:	025a      	lsls	r2, r3, #9
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	430a      	orrs	r2, r1
 800c25e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	689a      	ldr	r2, [r3, #8]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c26e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6899      	ldr	r1, [r3, #8]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	695b      	ldr	r3, [r3, #20]
 800c27a:	029a      	lsls	r2, r3, #10
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	430a      	orrs	r2, r1
 800c282:	609a      	str	r2, [r3, #8]
}
 800c284:	bf00      	nop
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	40012300 	.word	0x40012300
 800c294:	0f000001 	.word	0x0f000001

0800c298 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d101      	bne.n	800c2c4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800c2c0:	2302      	movs	r3, #2
 800c2c2:	e17d      	b.n	800c5c0 <HAL_ADCEx_InjectedConfigChannel+0x314>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b09      	cmp	r3, #9
 800c2d2:	d925      	bls.n	800c320 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68d9      	ldr	r1, [r3, #12]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	005b      	lsls	r3, r3, #1
 800c2e6:	4413      	add	r3, r2
 800c2e8:	3b1e      	subs	r3, #30
 800c2ea:	2207      	movs	r2, #7
 800c2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f0:	43da      	mvns	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	400a      	ands	r2, r1
 800c2f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	68d9      	ldr	r1, [r3, #12]
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	689a      	ldr	r2, [r3, #8]
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	4618      	mov	r0, r3
 800c30c:	4603      	mov	r3, r0
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	4403      	add	r3, r0
 800c312:	3b1e      	subs	r3, #30
 800c314:	409a      	lsls	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	430a      	orrs	r2, r1
 800c31c:	60da      	str	r2, [r3, #12]
 800c31e:	e022      	b.n	800c366 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	6919      	ldr	r1, [r3, #16]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	461a      	mov	r2, r3
 800c32e:	4613      	mov	r3, r2
 800c330:	005b      	lsls	r3, r3, #1
 800c332:	4413      	add	r3, r2
 800c334:	2207      	movs	r2, #7
 800c336:	fa02 f303 	lsl.w	r3, r2, r3
 800c33a:	43da      	mvns	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	400a      	ands	r2, r1
 800c342:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6919      	ldr	r1, [r3, #16]
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	689a      	ldr	r2, [r3, #8]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	b29b      	uxth	r3, r3
 800c354:	4618      	mov	r0, r3
 800c356:	4603      	mov	r3, r0
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	4403      	add	r3, r0
 800c35c:	409a      	lsls	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	430a      	orrs	r2, r1
 800c364:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800c374:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	3b01      	subs	r3, #1
 800c382:	051a      	lsls	r2, r3, #20
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	430a      	orrs	r2, r1
 800c38a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	b2da      	uxtb	r2, r3
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	3303      	adds	r3, #3
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	221f      	movs	r2, #31
 800c3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b4:	43da      	mvns	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	400a      	ands	r2, r1
 800c3bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	b2da      	uxtb	r2, r3
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	3303      	adds	r3, #3
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	4413      	add	r3, r2
 800c3e8:	fa00 f203 	lsl.w	r2, r0, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	430a      	orrs	r2, r1
 800c3f2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	4a74      	ldr	r2, [pc, #464]	; (800c5cc <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d022      	beq.n	800c444 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	689a      	ldr	r2, [r3, #8]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800c40c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	6899      	ldr	r1, [r3, #8]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	699a      	ldr	r2, [r3, #24]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	430a      	orrs	r2, r1
 800c41e:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689a      	ldr	r2, [r3, #8]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800c42e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	6899      	ldr	r1, [r3, #8]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	69da      	ldr	r2, [r3, #28]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	430a      	orrs	r2, r1
 800c440:	609a      	str	r2, [r3, #8]
 800c442:	e00f      	b.n	800c464 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	689a      	ldr	r2, [r3, #8]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800c452:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	689a      	ldr	r2, [r3, #8]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800c462:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	7d5b      	ldrb	r3, [r3, #21]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d008      	beq.n	800c47e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	685a      	ldr	r2, [r3, #4]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c47a:	605a      	str	r2, [r3, #4]
 800c47c:	e007      	b.n	800c48e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	685a      	ldr	r2, [r3, #4]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c48c:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	7d1b      	ldrb	r3, [r3, #20]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d008      	beq.n	800c4a8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c4a4:	605a      	str	r2, [r3, #4]
 800c4a6:	e007      	b.n	800c4b8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	685a      	ldr	r2, [r3, #4]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c4b6:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d02e      	beq.n	800c51e <HAL_ADCEx_InjectedConfigChannel+0x272>
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	d840      	bhi.n	800c546 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d002      	beq.n	800c4ce <HAL_ADCEx_InjectedConfigChannel+0x222>
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	d014      	beq.n	800c4f6 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 800c4cc:	e03b      	b.n	800c546 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	695b      	ldr	r3, [r3, #20]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	6812      	ldr	r2, [r2, #0]
 800c4d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c4dc:	f023 030f 	bic.w	r3, r3, #15
 800c4e0:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6959      	ldr	r1, [r3, #20]
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	68da      	ldr	r2, [r3, #12]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	430a      	orrs	r2, r1
 800c4f2:	615a      	str	r2, [r3, #20]
      break;
 800c4f4:	e03b      	b.n	800c56e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	699b      	ldr	r3, [r3, #24]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	6812      	ldr	r2, [r2, #0]
 800c500:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c504:	f023 030f 	bic.w	r3, r3, #15
 800c508:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6999      	ldr	r1, [r3, #24]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	68da      	ldr	r2, [r3, #12]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	430a      	orrs	r2, r1
 800c51a:	619a      	str	r2, [r3, #24]
      break;
 800c51c:	e027      	b.n	800c56e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	6812      	ldr	r2, [r2, #0]
 800c528:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c52c:	f023 030f 	bic.w	r3, r3, #15
 800c530:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	69d9      	ldr	r1, [r3, #28]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	68da      	ldr	r2, [r3, #12]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	430a      	orrs	r2, r1
 800c542:	61da      	str	r2, [r3, #28]
      break;
 800c544:	e013      	b.n	800c56e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	6a1b      	ldr	r3, [r3, #32]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	6812      	ldr	r2, [r2, #0]
 800c550:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c554:	f023 030f 	bic.w	r3, r3, #15
 800c558:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	6a19      	ldr	r1, [r3, #32]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	68da      	ldr	r2, [r3, #12]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	430a      	orrs	r2, r1
 800c56a:	621a      	str	r2, [r3, #32]
      break;
 800c56c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c56e:	4b18      	ldr	r3, [pc, #96]	; (800c5d0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800c570:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a17      	ldr	r2, [pc, #92]	; (800c5d4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d109      	bne.n	800c590 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b12      	cmp	r3, #18
 800c582:	d105      	bne.n	800c590 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a0f      	ldr	r2, [pc, #60]	; (800c5d4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d10d      	bne.n	800c5b6 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b10      	cmp	r3, #16
 800c5a0:	d003      	beq.n	800c5aa <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b11      	cmp	r3, #17
 800c5a8:	d105      	bne.n	800c5b6 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	000f0001 	.word	0x000f0001
 800c5d0:	40012300 	.word	0x40012300
 800c5d4:	40012000 	.word	0x40012000

0800c5d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f003 0307 	and.w	r3, r3, #7
 800c5e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <__NVIC_SetPriorityGrouping+0x44>)
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c60a:	4a04      	ldr	r2, [pc, #16]	; (800c61c <__NVIC_SetPriorityGrouping+0x44>)
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	60d3      	str	r3, [r2, #12]
}
 800c610:	bf00      	nop
 800c612:	3714      	adds	r7, #20
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	e000ed00 	.word	0xe000ed00

0800c620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c620:	b480      	push	{r7}
 800c622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c624:	4b04      	ldr	r3, [pc, #16]	; (800c638 <__NVIC_GetPriorityGrouping+0x18>)
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	0a1b      	lsrs	r3, r3, #8
 800c62a:	f003 0307 	and.w	r3, r3, #7
}
 800c62e:	4618      	mov	r0, r3
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	e000ed00 	.word	0xe000ed00

0800c63c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	4603      	mov	r3, r0
 800c644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	db0b      	blt.n	800c666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c64e:	79fb      	ldrb	r3, [r7, #7]
 800c650:	f003 021f 	and.w	r2, r3, #31
 800c654:	4907      	ldr	r1, [pc, #28]	; (800c674 <__NVIC_EnableIRQ+0x38>)
 800c656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c65a:	095b      	lsrs	r3, r3, #5
 800c65c:	2001      	movs	r0, #1
 800c65e:	fa00 f202 	lsl.w	r2, r0, r2
 800c662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	e000e100 	.word	0xe000e100

0800c678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	6039      	str	r1, [r7, #0]
 800c682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	db0a      	blt.n	800c6a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	490c      	ldr	r1, [pc, #48]	; (800c6c4 <__NVIC_SetPriority+0x4c>)
 800c692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c696:	0112      	lsls	r2, r2, #4
 800c698:	b2d2      	uxtb	r2, r2
 800c69a:	440b      	add	r3, r1
 800c69c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c6a0:	e00a      	b.n	800c6b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	4908      	ldr	r1, [pc, #32]	; (800c6c8 <__NVIC_SetPriority+0x50>)
 800c6a8:	79fb      	ldrb	r3, [r7, #7]
 800c6aa:	f003 030f 	and.w	r3, r3, #15
 800c6ae:	3b04      	subs	r3, #4
 800c6b0:	0112      	lsls	r2, r2, #4
 800c6b2:	b2d2      	uxtb	r2, r2
 800c6b4:	440b      	add	r3, r1
 800c6b6:	761a      	strb	r2, [r3, #24]
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	e000e100 	.word	0xe000e100
 800c6c8:	e000ed00 	.word	0xe000ed00

0800c6cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b089      	sub	sp, #36	; 0x24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f003 0307 	and.w	r3, r3, #7
 800c6de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	f1c3 0307 	rsb	r3, r3, #7
 800c6e6:	2b04      	cmp	r3, #4
 800c6e8:	bf28      	it	cs
 800c6ea:	2304      	movcs	r3, #4
 800c6ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	2b06      	cmp	r3, #6
 800c6f4:	d902      	bls.n	800c6fc <NVIC_EncodePriority+0x30>
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	3b03      	subs	r3, #3
 800c6fa:	e000      	b.n	800c6fe <NVIC_EncodePriority+0x32>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c700:	f04f 32ff 	mov.w	r2, #4294967295
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	fa02 f303 	lsl.w	r3, r2, r3
 800c70a:	43da      	mvns	r2, r3
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	401a      	ands	r2, r3
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c714:	f04f 31ff 	mov.w	r1, #4294967295
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	fa01 f303 	lsl.w	r3, r1, r3
 800c71e:	43d9      	mvns	r1, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c724:	4313      	orrs	r3, r2
         );
}
 800c726:	4618      	mov	r0, r3
 800c728:	3724      	adds	r7, #36	; 0x24
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
	...

0800c734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3b01      	subs	r3, #1
 800c740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c744:	d301      	bcc.n	800c74a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c746:	2301      	movs	r3, #1
 800c748:	e00f      	b.n	800c76a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c74a:	4a0a      	ldr	r2, [pc, #40]	; (800c774 <SysTick_Config+0x40>)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	3b01      	subs	r3, #1
 800c750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c752:	210f      	movs	r1, #15
 800c754:	f04f 30ff 	mov.w	r0, #4294967295
 800c758:	f7ff ff8e 	bl	800c678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c75c:	4b05      	ldr	r3, [pc, #20]	; (800c774 <SysTick_Config+0x40>)
 800c75e:	2200      	movs	r2, #0
 800c760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c762:	4b04      	ldr	r3, [pc, #16]	; (800c774 <SysTick_Config+0x40>)
 800c764:	2207      	movs	r2, #7
 800c766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	e000e010 	.word	0xe000e010

0800c778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff ff29 	bl	800c5d8 <__NVIC_SetPriorityGrouping>
}
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c78e:	b580      	push	{r7, lr}
 800c790:	b086      	sub	sp, #24
 800c792:	af00      	add	r7, sp, #0
 800c794:	4603      	mov	r3, r0
 800c796:	60b9      	str	r1, [r7, #8]
 800c798:	607a      	str	r2, [r7, #4]
 800c79a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c79c:	2300      	movs	r3, #0
 800c79e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c7a0:	f7ff ff3e 	bl	800c620 <__NVIC_GetPriorityGrouping>
 800c7a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	68b9      	ldr	r1, [r7, #8]
 800c7aa:	6978      	ldr	r0, [r7, #20]
 800c7ac:	f7ff ff8e 	bl	800c6cc <NVIC_EncodePriority>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff ff5d 	bl	800c678 <__NVIC_SetPriority>
}
 800c7be:	bf00      	nop
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c7d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff ff31 	bl	800c63c <__NVIC_EnableIRQ>
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff ffa2 	bl	800c734 <SysTick_Config>
 800c7f0:	4603      	mov	r3, r0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c806:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c808:	f7ff f986 	bl	800bb18 <HAL_GetTick>
 800c80c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b02      	cmp	r3, #2
 800c818:	d008      	beq.n	800c82c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2280      	movs	r2, #128	; 0x80
 800c81e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c828:	2301      	movs	r3, #1
 800c82a:	e052      	b.n	800c8d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f022 0216 	bic.w	r2, r2, #22
 800c83a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	695a      	ldr	r2, [r3, #20]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c84a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c850:	2b00      	cmp	r3, #0
 800c852:	d103      	bne.n	800c85c <HAL_DMA_Abort+0x62>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d007      	beq.n	800c86c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f022 0208 	bic.w	r2, r2, #8
 800c86a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f022 0201 	bic.w	r2, r2, #1
 800c87a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c87c:	e013      	b.n	800c8a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c87e:	f7ff f94b 	bl	800bb18 <HAL_GetTick>
 800c882:	4602      	mov	r2, r0
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	2b05      	cmp	r3, #5
 800c88a:	d90c      	bls.n	800c8a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2220      	movs	r2, #32
 800c890:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2203      	movs	r2, #3
 800c896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	e015      	b.n	800c8d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0301 	and.w	r3, r3, #1
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1e4      	bne.n	800c87e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8b8:	223f      	movs	r2, #63	; 0x3f
 800c8ba:	409a      	lsls	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b083      	sub	sp, #12
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	d004      	beq.n	800c8f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2280      	movs	r2, #128	; 0x80
 800c8f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e00c      	b.n	800c912 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2205      	movs	r2, #5
 800c8fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f022 0201 	bic.w	r2, r2, #1
 800c90e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
	...

0800c920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c920:	b480      	push	{r7}
 800c922:	b089      	sub	sp, #36	; 0x24
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c92a:	2300      	movs	r3, #0
 800c92c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c92e:	2300      	movs	r3, #0
 800c930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c932:	2300      	movs	r3, #0
 800c934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c936:	2300      	movs	r3, #0
 800c938:	61fb      	str	r3, [r7, #28]
 800c93a:	e16b      	b.n	800cc14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c93c:	2201      	movs	r2, #1
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	fa02 f303 	lsl.w	r3, r2, r3
 800c944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	4013      	ands	r3, r2
 800c94e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	429a      	cmp	r2, r3
 800c956:	f040 815a 	bne.w	800cc0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	f003 0303 	and.w	r3, r3, #3
 800c962:	2b01      	cmp	r3, #1
 800c964:	d005      	beq.n	800c972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c96e:	2b02      	cmp	r3, #2
 800c970:	d130      	bne.n	800c9d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	005b      	lsls	r3, r3, #1
 800c97c:	2203      	movs	r2, #3
 800c97e:	fa02 f303 	lsl.w	r3, r2, r3
 800c982:	43db      	mvns	r3, r3
 800c984:	69ba      	ldr	r2, [r7, #24]
 800c986:	4013      	ands	r3, r2
 800c988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	68da      	ldr	r2, [r3, #12]
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	005b      	lsls	r3, r3, #1
 800c992:	fa02 f303 	lsl.w	r3, r2, r3
 800c996:	69ba      	ldr	r2, [r7, #24]
 800c998:	4313      	orrs	r3, r2
 800c99a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	69ba      	ldr	r2, [r7, #24]
 800c9a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c9b0:	43db      	mvns	r3, r3
 800c9b2:	69ba      	ldr	r2, [r7, #24]
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	091b      	lsrs	r3, r3, #4
 800c9be:	f003 0201 	and.w	r2, r3, #1
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c8:	69ba      	ldr	r2, [r7, #24]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	69ba      	ldr	r2, [r7, #24]
 800c9d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	f003 0303 	and.w	r3, r3, #3
 800c9dc:	2b03      	cmp	r3, #3
 800c9de:	d017      	beq.n	800ca10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	2203      	movs	r2, #3
 800c9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f0:	43db      	mvns	r3, r3
 800c9f2:	69ba      	ldr	r2, [r7, #24]
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	689a      	ldr	r2, [r3, #8]
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	fa02 f303 	lsl.w	r3, r2, r3
 800ca04:	69ba      	ldr	r2, [r7, #24]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	69ba      	ldr	r2, [r7, #24]
 800ca0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	f003 0303 	and.w	r3, r3, #3
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	d123      	bne.n	800ca64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	08da      	lsrs	r2, r3, #3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	3208      	adds	r2, #8
 800ca24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	f003 0307 	and.w	r3, r3, #7
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	220f      	movs	r2, #15
 800ca34:	fa02 f303 	lsl.w	r3, r2, r3
 800ca38:	43db      	mvns	r3, r3
 800ca3a:	69ba      	ldr	r2, [r7, #24]
 800ca3c:	4013      	ands	r3, r2
 800ca3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	691a      	ldr	r2, [r3, #16]
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	f003 0307 	and.w	r3, r3, #7
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca50:	69ba      	ldr	r2, [r7, #24]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	08da      	lsrs	r2, r3, #3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	3208      	adds	r2, #8
 800ca5e:	69b9      	ldr	r1, [r7, #24]
 800ca60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	005b      	lsls	r3, r3, #1
 800ca6e:	2203      	movs	r2, #3
 800ca70:	fa02 f303 	lsl.w	r3, r2, r3
 800ca74:	43db      	mvns	r3, r3
 800ca76:	69ba      	ldr	r2, [r7, #24]
 800ca78:	4013      	ands	r3, r2
 800ca7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	f003 0203 	and.w	r2, r3, #3
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	fa02 f303 	lsl.w	r3, r2, r3
 800ca8c:	69ba      	ldr	r2, [r7, #24]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	69ba      	ldr	r2, [r7, #24]
 800ca96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 80b4 	beq.w	800cc0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800caa6:	2300      	movs	r3, #0
 800caa8:	60fb      	str	r3, [r7, #12]
 800caaa:	4b60      	ldr	r3, [pc, #384]	; (800cc2c <HAL_GPIO_Init+0x30c>)
 800caac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caae:	4a5f      	ldr	r2, [pc, #380]	; (800cc2c <HAL_GPIO_Init+0x30c>)
 800cab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cab4:	6453      	str	r3, [r2, #68]	; 0x44
 800cab6:	4b5d      	ldr	r3, [pc, #372]	; (800cc2c <HAL_GPIO_Init+0x30c>)
 800cab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cac2:	4a5b      	ldr	r2, [pc, #364]	; (800cc30 <HAL_GPIO_Init+0x310>)
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	089b      	lsrs	r3, r3, #2
 800cac8:	3302      	adds	r3, #2
 800caca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	f003 0303 	and.w	r3, r3, #3
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	220f      	movs	r2, #15
 800cada:	fa02 f303 	lsl.w	r3, r2, r3
 800cade:	43db      	mvns	r3, r3
 800cae0:	69ba      	ldr	r2, [r7, #24]
 800cae2:	4013      	ands	r3, r2
 800cae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a52      	ldr	r2, [pc, #328]	; (800cc34 <HAL_GPIO_Init+0x314>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d02b      	beq.n	800cb46 <HAL_GPIO_Init+0x226>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a51      	ldr	r2, [pc, #324]	; (800cc38 <HAL_GPIO_Init+0x318>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d025      	beq.n	800cb42 <HAL_GPIO_Init+0x222>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4a50      	ldr	r2, [pc, #320]	; (800cc3c <HAL_GPIO_Init+0x31c>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d01f      	beq.n	800cb3e <HAL_GPIO_Init+0x21e>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4a4f      	ldr	r2, [pc, #316]	; (800cc40 <HAL_GPIO_Init+0x320>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d019      	beq.n	800cb3a <HAL_GPIO_Init+0x21a>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4a4e      	ldr	r2, [pc, #312]	; (800cc44 <HAL_GPIO_Init+0x324>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d013      	beq.n	800cb36 <HAL_GPIO_Init+0x216>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4a4d      	ldr	r2, [pc, #308]	; (800cc48 <HAL_GPIO_Init+0x328>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d00d      	beq.n	800cb32 <HAL_GPIO_Init+0x212>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a4c      	ldr	r2, [pc, #304]	; (800cc4c <HAL_GPIO_Init+0x32c>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d007      	beq.n	800cb2e <HAL_GPIO_Init+0x20e>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a4b      	ldr	r2, [pc, #300]	; (800cc50 <HAL_GPIO_Init+0x330>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d101      	bne.n	800cb2a <HAL_GPIO_Init+0x20a>
 800cb26:	2307      	movs	r3, #7
 800cb28:	e00e      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb2a:	2308      	movs	r3, #8
 800cb2c:	e00c      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb2e:	2306      	movs	r3, #6
 800cb30:	e00a      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb32:	2305      	movs	r3, #5
 800cb34:	e008      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb36:	2304      	movs	r3, #4
 800cb38:	e006      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e004      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb3e:	2302      	movs	r3, #2
 800cb40:	e002      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb42:	2301      	movs	r3, #1
 800cb44:	e000      	b.n	800cb48 <HAL_GPIO_Init+0x228>
 800cb46:	2300      	movs	r3, #0
 800cb48:	69fa      	ldr	r2, [r7, #28]
 800cb4a:	f002 0203 	and.w	r2, r2, #3
 800cb4e:	0092      	lsls	r2, r2, #2
 800cb50:	4093      	lsls	r3, r2
 800cb52:	69ba      	ldr	r2, [r7, #24]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cb58:	4935      	ldr	r1, [pc, #212]	; (800cc30 <HAL_GPIO_Init+0x310>)
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	089b      	lsrs	r3, r3, #2
 800cb5e:	3302      	adds	r3, #2
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cb66:	4b3b      	ldr	r3, [pc, #236]	; (800cc54 <HAL_GPIO_Init+0x334>)
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	43db      	mvns	r3, r3
 800cb70:	69ba      	ldr	r2, [r7, #24]
 800cb72:	4013      	ands	r3, r2
 800cb74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d003      	beq.n	800cb8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800cb82:	69ba      	ldr	r2, [r7, #24]
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cb8a:	4a32      	ldr	r2, [pc, #200]	; (800cc54 <HAL_GPIO_Init+0x334>)
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cb90:	4b30      	ldr	r3, [pc, #192]	; (800cc54 <HAL_GPIO_Init+0x334>)
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	43db      	mvns	r3, r3
 800cb9a:	69ba      	ldr	r2, [r7, #24]
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d003      	beq.n	800cbb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800cbac:	69ba      	ldr	r2, [r7, #24]
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cbb4:	4a27      	ldr	r2, [pc, #156]	; (800cc54 <HAL_GPIO_Init+0x334>)
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cbba:	4b26      	ldr	r3, [pc, #152]	; (800cc54 <HAL_GPIO_Init+0x334>)
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	43db      	mvns	r3, r3
 800cbc4:	69ba      	ldr	r2, [r7, #24]
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d003      	beq.n	800cbde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800cbd6:	69ba      	ldr	r2, [r7, #24]
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cbde:	4a1d      	ldr	r2, [pc, #116]	; (800cc54 <HAL_GPIO_Init+0x334>)
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cbe4:	4b1b      	ldr	r3, [pc, #108]	; (800cc54 <HAL_GPIO_Init+0x334>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	43db      	mvns	r3, r3
 800cbee:	69ba      	ldr	r2, [r7, #24]
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d003      	beq.n	800cc08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800cc00:	69ba      	ldr	r2, [r7, #24]
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cc08:	4a12      	ldr	r2, [pc, #72]	; (800cc54 <HAL_GPIO_Init+0x334>)
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	3301      	adds	r3, #1
 800cc12:	61fb      	str	r3, [r7, #28]
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	2b0f      	cmp	r3, #15
 800cc18:	f67f ae90 	bls.w	800c93c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cc1c:	bf00      	nop
 800cc1e:	bf00      	nop
 800cc20:	3724      	adds	r7, #36	; 0x24
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	40023800 	.word	0x40023800
 800cc30:	40013800 	.word	0x40013800
 800cc34:	40020000 	.word	0x40020000
 800cc38:	40020400 	.word	0x40020400
 800cc3c:	40020800 	.word	0x40020800
 800cc40:	40020c00 	.word	0x40020c00
 800cc44:	40021000 	.word	0x40021000
 800cc48:	40021400 	.word	0x40021400
 800cc4c:	40021800 	.word	0x40021800
 800cc50:	40021c00 	.word	0x40021c00
 800cc54:	40013c00 	.word	0x40013c00

0800cc58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	460b      	mov	r3, r1
 800cc62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	691a      	ldr	r2, [r3, #16]
 800cc68:	887b      	ldrh	r3, [r7, #2]
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cc70:	2301      	movs	r3, #1
 800cc72:	73fb      	strb	r3, [r7, #15]
 800cc74:	e001      	b.n	800cc7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	807b      	strh	r3, [r7, #2]
 800cc94:	4613      	mov	r3, r2
 800cc96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cc98:	787b      	ldrb	r3, [r7, #1]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d003      	beq.n	800cca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cc9e:	887a      	ldrh	r2, [r7, #2]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cca4:	e003      	b.n	800ccae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cca6:	887b      	ldrh	r3, [r7, #2]
 800cca8:	041a      	lsls	r2, r3, #16
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	619a      	str	r2, [r3, #24]
}
 800ccae:	bf00      	nop
 800ccb0:	370c      	adds	r7, #12
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
	...

0800ccbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ccc6:	4b08      	ldr	r3, [pc, #32]	; (800cce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ccc8:	695a      	ldr	r2, [r3, #20]
 800ccca:	88fb      	ldrh	r3, [r7, #6]
 800cccc:	4013      	ands	r3, r2
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d006      	beq.n	800cce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ccd2:	4a05      	ldr	r2, [pc, #20]	; (800cce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ccd4:	88fb      	ldrh	r3, [r7, #6]
 800ccd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ccd8:	88fb      	ldrh	r3, [r7, #6]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fe f8da 	bl	800ae94 <HAL_GPIO_EXTI_Callback>
  }
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	40013c00 	.word	0x40013c00

0800ccec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e267      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 0301 	and.w	r3, r3, #1
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d075      	beq.n	800cdf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cd0a:	4b88      	ldr	r3, [pc, #544]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	f003 030c 	and.w	r3, r3, #12
 800cd12:	2b04      	cmp	r3, #4
 800cd14:	d00c      	beq.n	800cd30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd16:	4b85      	ldr	r3, [pc, #532]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cd1e:	2b08      	cmp	r3, #8
 800cd20:	d112      	bne.n	800cd48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd22:	4b82      	ldr	r3, [pc, #520]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd2e:	d10b      	bne.n	800cd48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd30:	4b7e      	ldr	r3, [pc, #504]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d05b      	beq.n	800cdf4 <HAL_RCC_OscConfig+0x108>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d157      	bne.n	800cdf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	e242      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd50:	d106      	bne.n	800cd60 <HAL_RCC_OscConfig+0x74>
 800cd52:	4b76      	ldr	r3, [pc, #472]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a75      	ldr	r2, [pc, #468]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd5c:	6013      	str	r3, [r2, #0]
 800cd5e:	e01d      	b.n	800cd9c <HAL_RCC_OscConfig+0xb0>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd68:	d10c      	bne.n	800cd84 <HAL_RCC_OscConfig+0x98>
 800cd6a:	4b70      	ldr	r3, [pc, #448]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a6f      	ldr	r2, [pc, #444]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd74:	6013      	str	r3, [r2, #0]
 800cd76:	4b6d      	ldr	r3, [pc, #436]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a6c      	ldr	r2, [pc, #432]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd80:	6013      	str	r3, [r2, #0]
 800cd82:	e00b      	b.n	800cd9c <HAL_RCC_OscConfig+0xb0>
 800cd84:	4b69      	ldr	r3, [pc, #420]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a68      	ldr	r2, [pc, #416]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd8e:	6013      	str	r3, [r2, #0]
 800cd90:	4b66      	ldr	r3, [pc, #408]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a65      	ldr	r2, [pc, #404]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cd96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d013      	beq.n	800cdcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cda4:	f7fe feb8 	bl	800bb18 <HAL_GetTick>
 800cda8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cdaa:	e008      	b.n	800cdbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cdac:	f7fe feb4 	bl	800bb18 <HAL_GetTick>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	2b64      	cmp	r3, #100	; 0x64
 800cdb8:	d901      	bls.n	800cdbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	e207      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cdbe:	4b5b      	ldr	r3, [pc, #364]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d0f0      	beq.n	800cdac <HAL_RCC_OscConfig+0xc0>
 800cdca:	e014      	b.n	800cdf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cdcc:	f7fe fea4 	bl	800bb18 <HAL_GetTick>
 800cdd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cdd2:	e008      	b.n	800cde6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cdd4:	f7fe fea0 	bl	800bb18 <HAL_GetTick>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	2b64      	cmp	r3, #100	; 0x64
 800cde0:	d901      	bls.n	800cde6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cde2:	2303      	movs	r3, #3
 800cde4:	e1f3      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cde6:	4b51      	ldr	r3, [pc, #324]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1f0      	bne.n	800cdd4 <HAL_RCC_OscConfig+0xe8>
 800cdf2:	e000      	b.n	800cdf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cdf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f003 0302 	and.w	r3, r3, #2
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d063      	beq.n	800ceca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ce02:	4b4a      	ldr	r3, [pc, #296]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800ce04:	689b      	ldr	r3, [r3, #8]
 800ce06:	f003 030c 	and.w	r3, r3, #12
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00b      	beq.n	800ce26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce0e:	4b47      	ldr	r3, [pc, #284]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ce16:	2b08      	cmp	r3, #8
 800ce18:	d11c      	bne.n	800ce54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce1a:	4b44      	ldr	r3, [pc, #272]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d116      	bne.n	800ce54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce26:	4b41      	ldr	r3, [pc, #260]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f003 0302 	and.w	r3, r3, #2
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d005      	beq.n	800ce3e <HAL_RCC_OscConfig+0x152>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d001      	beq.n	800ce3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e1c7      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce3e:	4b3b      	ldr	r3, [pc, #236]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	00db      	lsls	r3, r3, #3
 800ce4c:	4937      	ldr	r1, [pc, #220]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce52:	e03a      	b.n	800ceca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d020      	beq.n	800ce9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ce5c:	4b34      	ldr	r3, [pc, #208]	; (800cf30 <HAL_RCC_OscConfig+0x244>)
 800ce5e:	2201      	movs	r2, #1
 800ce60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce62:	f7fe fe59 	bl	800bb18 <HAL_GetTick>
 800ce66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce68:	e008      	b.n	800ce7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce6a:	f7fe fe55 	bl	800bb18 <HAL_GetTick>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d901      	bls.n	800ce7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e1a8      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce7c:	4b2b      	ldr	r3, [pc, #172]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f003 0302 	and.w	r3, r3, #2
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d0f0      	beq.n	800ce6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce88:	4b28      	ldr	r3, [pc, #160]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	00db      	lsls	r3, r3, #3
 800ce96:	4925      	ldr	r1, [pc, #148]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	600b      	str	r3, [r1, #0]
 800ce9c:	e015      	b.n	800ceca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce9e:	4b24      	ldr	r3, [pc, #144]	; (800cf30 <HAL_RCC_OscConfig+0x244>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cea4:	f7fe fe38 	bl	800bb18 <HAL_GetTick>
 800cea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ceaa:	e008      	b.n	800cebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ceac:	f7fe fe34 	bl	800bb18 <HAL_GetTick>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	d901      	bls.n	800cebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ceba:	2303      	movs	r3, #3
 800cebc:	e187      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cebe:	4b1b      	ldr	r3, [pc, #108]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f003 0302 	and.w	r3, r3, #2
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1f0      	bne.n	800ceac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f003 0308 	and.w	r3, r3, #8
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d036      	beq.n	800cf44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	695b      	ldr	r3, [r3, #20]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d016      	beq.n	800cf0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cede:	4b15      	ldr	r3, [pc, #84]	; (800cf34 <HAL_RCC_OscConfig+0x248>)
 800cee0:	2201      	movs	r2, #1
 800cee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cee4:	f7fe fe18 	bl	800bb18 <HAL_GetTick>
 800cee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ceea:	e008      	b.n	800cefe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ceec:	f7fe fe14 	bl	800bb18 <HAL_GetTick>
 800cef0:	4602      	mov	r2, r0
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	d901      	bls.n	800cefe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cefa:	2303      	movs	r3, #3
 800cefc:	e167      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cefe:	4b0b      	ldr	r3, [pc, #44]	; (800cf2c <HAL_RCC_OscConfig+0x240>)
 800cf00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf02:	f003 0302 	and.w	r3, r3, #2
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d0f0      	beq.n	800ceec <HAL_RCC_OscConfig+0x200>
 800cf0a:	e01b      	b.n	800cf44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cf0c:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <HAL_RCC_OscConfig+0x248>)
 800cf0e:	2200      	movs	r2, #0
 800cf10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cf12:	f7fe fe01 	bl	800bb18 <HAL_GetTick>
 800cf16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf18:	e00e      	b.n	800cf38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cf1a:	f7fe fdfd 	bl	800bb18 <HAL_GetTick>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d907      	bls.n	800cf38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	e150      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
 800cf2c:	40023800 	.word	0x40023800
 800cf30:	42470000 	.word	0x42470000
 800cf34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf38:	4b88      	ldr	r3, [pc, #544]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cf3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf3c:	f003 0302 	and.w	r3, r3, #2
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1ea      	bne.n	800cf1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f003 0304 	and.w	r3, r3, #4
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 8097 	beq.w	800d080 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cf52:	2300      	movs	r3, #0
 800cf54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf56:	4b81      	ldr	r3, [pc, #516]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10f      	bne.n	800cf82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf62:	2300      	movs	r3, #0
 800cf64:	60bb      	str	r3, [r7, #8]
 800cf66:	4b7d      	ldr	r3, [pc, #500]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6a:	4a7c      	ldr	r2, [pc, #496]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cf6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf70:	6413      	str	r3, [r2, #64]	; 0x40
 800cf72:	4b7a      	ldr	r3, [pc, #488]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf7a:	60bb      	str	r3, [r7, #8]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf82:	4b77      	ldr	r3, [pc, #476]	; (800d160 <HAL_RCC_OscConfig+0x474>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d118      	bne.n	800cfc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf8e:	4b74      	ldr	r3, [pc, #464]	; (800d160 <HAL_RCC_OscConfig+0x474>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a73      	ldr	r2, [pc, #460]	; (800d160 <HAL_RCC_OscConfig+0x474>)
 800cf94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf9a:	f7fe fdbd 	bl	800bb18 <HAL_GetTick>
 800cf9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfa0:	e008      	b.n	800cfb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfa2:	f7fe fdb9 	bl	800bb18 <HAL_GetTick>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d901      	bls.n	800cfb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	e10c      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfb4:	4b6a      	ldr	r3, [pc, #424]	; (800d160 <HAL_RCC_OscConfig+0x474>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0f0      	beq.n	800cfa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d106      	bne.n	800cfd6 <HAL_RCC_OscConfig+0x2ea>
 800cfc8:	4b64      	ldr	r3, [pc, #400]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cfca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfcc:	4a63      	ldr	r2, [pc, #396]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cfce:	f043 0301 	orr.w	r3, r3, #1
 800cfd2:	6713      	str	r3, [r2, #112]	; 0x70
 800cfd4:	e01c      	b.n	800d010 <HAL_RCC_OscConfig+0x324>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	2b05      	cmp	r3, #5
 800cfdc:	d10c      	bne.n	800cff8 <HAL_RCC_OscConfig+0x30c>
 800cfde:	4b5f      	ldr	r3, [pc, #380]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cfe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe2:	4a5e      	ldr	r2, [pc, #376]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cfe4:	f043 0304 	orr.w	r3, r3, #4
 800cfe8:	6713      	str	r3, [r2, #112]	; 0x70
 800cfea:	4b5c      	ldr	r3, [pc, #368]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cfec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfee:	4a5b      	ldr	r2, [pc, #364]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cff0:	f043 0301 	orr.w	r3, r3, #1
 800cff4:	6713      	str	r3, [r2, #112]	; 0x70
 800cff6:	e00b      	b.n	800d010 <HAL_RCC_OscConfig+0x324>
 800cff8:	4b58      	ldr	r3, [pc, #352]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cffc:	4a57      	ldr	r2, [pc, #348]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800cffe:	f023 0301 	bic.w	r3, r3, #1
 800d002:	6713      	str	r3, [r2, #112]	; 0x70
 800d004:	4b55      	ldr	r3, [pc, #340]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d008:	4a54      	ldr	r2, [pc, #336]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d00a:	f023 0304 	bic.w	r3, r3, #4
 800d00e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d015      	beq.n	800d044 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d018:	f7fe fd7e 	bl	800bb18 <HAL_GetTick>
 800d01c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d01e:	e00a      	b.n	800d036 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d020:	f7fe fd7a 	bl	800bb18 <HAL_GetTick>
 800d024:	4602      	mov	r2, r0
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d02e:	4293      	cmp	r3, r2
 800d030:	d901      	bls.n	800d036 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800d032:	2303      	movs	r3, #3
 800d034:	e0cb      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d036:	4b49      	ldr	r3, [pc, #292]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d03a:	f003 0302 	and.w	r3, r3, #2
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0ee      	beq.n	800d020 <HAL_RCC_OscConfig+0x334>
 800d042:	e014      	b.n	800d06e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d044:	f7fe fd68 	bl	800bb18 <HAL_GetTick>
 800d048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d04a:	e00a      	b.n	800d062 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d04c:	f7fe fd64 	bl	800bb18 <HAL_GetTick>
 800d050:	4602      	mov	r2, r0
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	f241 3288 	movw	r2, #5000	; 0x1388
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d901      	bls.n	800d062 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800d05e:	2303      	movs	r3, #3
 800d060:	e0b5      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d062:	4b3e      	ldr	r3, [pc, #248]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d066:	f003 0302 	and.w	r3, r3, #2
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1ee      	bne.n	800d04c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d06e:	7dfb      	ldrb	r3, [r7, #23]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d105      	bne.n	800d080 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d074:	4b39      	ldr	r3, [pc, #228]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d078:	4a38      	ldr	r2, [pc, #224]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d07a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d07e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 80a1 	beq.w	800d1cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d08a:	4b34      	ldr	r3, [pc, #208]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	f003 030c 	and.w	r3, r3, #12
 800d092:	2b08      	cmp	r3, #8
 800d094:	d05c      	beq.n	800d150 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	699b      	ldr	r3, [r3, #24]
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d141      	bne.n	800d122 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d09e:	4b31      	ldr	r3, [pc, #196]	; (800d164 <HAL_RCC_OscConfig+0x478>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0a4:	f7fe fd38 	bl	800bb18 <HAL_GetTick>
 800d0a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0aa:	e008      	b.n	800d0be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0ac:	f7fe fd34 	bl	800bb18 <HAL_GetTick>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	d901      	bls.n	800d0be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	e087      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0be:	4b27      	ldr	r3, [pc, #156]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1f0      	bne.n	800d0ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	69da      	ldr	r2, [r3, #28]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a1b      	ldr	r3, [r3, #32]
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d8:	019b      	lsls	r3, r3, #6
 800d0da:	431a      	orrs	r2, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e0:	085b      	lsrs	r3, r3, #1
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	041b      	lsls	r3, r3, #16
 800d0e6:	431a      	orrs	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ec:	061b      	lsls	r3, r3, #24
 800d0ee:	491b      	ldr	r1, [pc, #108]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d0f4:	4b1b      	ldr	r3, [pc, #108]	; (800d164 <HAL_RCC_OscConfig+0x478>)
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0fa:	f7fe fd0d 	bl	800bb18 <HAL_GetTick>
 800d0fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d100:	e008      	b.n	800d114 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d102:	f7fe fd09 	bl	800bb18 <HAL_GetTick>
 800d106:	4602      	mov	r2, r0
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	2b02      	cmp	r3, #2
 800d10e:	d901      	bls.n	800d114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d110:	2303      	movs	r3, #3
 800d112:	e05c      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d114:	4b11      	ldr	r3, [pc, #68]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d0f0      	beq.n	800d102 <HAL_RCC_OscConfig+0x416>
 800d120:	e054      	b.n	800d1cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d122:	4b10      	ldr	r3, [pc, #64]	; (800d164 <HAL_RCC_OscConfig+0x478>)
 800d124:	2200      	movs	r2, #0
 800d126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d128:	f7fe fcf6 	bl	800bb18 <HAL_GetTick>
 800d12c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d12e:	e008      	b.n	800d142 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d130:	f7fe fcf2 	bl	800bb18 <HAL_GetTick>
 800d134:	4602      	mov	r2, r0
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	2b02      	cmp	r3, #2
 800d13c:	d901      	bls.n	800d142 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800d13e:	2303      	movs	r3, #3
 800d140:	e045      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d142:	4b06      	ldr	r3, [pc, #24]	; (800d15c <HAL_RCC_OscConfig+0x470>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d1f0      	bne.n	800d130 <HAL_RCC_OscConfig+0x444>
 800d14e:	e03d      	b.n	800d1cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	699b      	ldr	r3, [r3, #24]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d107      	bne.n	800d168 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	e038      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
 800d15c:	40023800 	.word	0x40023800
 800d160:	40007000 	.word	0x40007000
 800d164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d168:	4b1b      	ldr	r3, [pc, #108]	; (800d1d8 <HAL_RCC_OscConfig+0x4ec>)
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	699b      	ldr	r3, [r3, #24]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d028      	beq.n	800d1c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d180:	429a      	cmp	r2, r3
 800d182:	d121      	bne.n	800d1c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d18e:	429a      	cmp	r2, r3
 800d190:	d11a      	bne.n	800d1c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d198:	4013      	ands	r3, r2
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d19e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d111      	bne.n	800d1c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ae:	085b      	lsrs	r3, r3, #1
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d107      	bne.n	800d1c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d001      	beq.n	800d1cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e000      	b.n	800d1ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	40023800 	.word	0x40023800

0800d1dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d101      	bne.n	800d1f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e0cc      	b.n	800d38a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d1f0:	4b68      	ldr	r3, [pc, #416]	; (800d394 <HAL_RCC_ClockConfig+0x1b8>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f003 0307 	and.w	r3, r3, #7
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d90c      	bls.n	800d218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1fe:	4b65      	ldr	r3, [pc, #404]	; (800d394 <HAL_RCC_ClockConfig+0x1b8>)
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	b2d2      	uxtb	r2, r2
 800d204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d206:	4b63      	ldr	r3, [pc, #396]	; (800d394 <HAL_RCC_ClockConfig+0x1b8>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f003 0307 	and.w	r3, r3, #7
 800d20e:	683a      	ldr	r2, [r7, #0]
 800d210:	429a      	cmp	r2, r3
 800d212:	d001      	beq.n	800d218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d214:	2301      	movs	r3, #1
 800d216:	e0b8      	b.n	800d38a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f003 0302 	and.w	r3, r3, #2
 800d220:	2b00      	cmp	r3, #0
 800d222:	d020      	beq.n	800d266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0304 	and.w	r3, r3, #4
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d005      	beq.n	800d23c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d230:	4b59      	ldr	r3, [pc, #356]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	4a58      	ldr	r2, [pc, #352]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d23a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f003 0308 	and.w	r3, r3, #8
 800d244:	2b00      	cmp	r3, #0
 800d246:	d005      	beq.n	800d254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d248:	4b53      	ldr	r3, [pc, #332]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	4a52      	ldr	r2, [pc, #328]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d24e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d254:	4b50      	ldr	r3, [pc, #320]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	494d      	ldr	r1, [pc, #308]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d262:	4313      	orrs	r3, r2
 800d264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d044      	beq.n	800d2fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	2b01      	cmp	r3, #1
 800d278:	d107      	bne.n	800d28a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d27a:	4b47      	ldr	r3, [pc, #284]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d282:	2b00      	cmp	r3, #0
 800d284:	d119      	bne.n	800d2ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d286:	2301      	movs	r3, #1
 800d288:	e07f      	b.n	800d38a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d003      	beq.n	800d29a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d296:	2b03      	cmp	r3, #3
 800d298:	d107      	bne.n	800d2aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d29a:	4b3f      	ldr	r3, [pc, #252]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d109      	bne.n	800d2ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e06f      	b.n	800d38a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d2aa:	4b3b      	ldr	r3, [pc, #236]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f003 0302 	and.w	r3, r3, #2
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d101      	bne.n	800d2ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e067      	b.n	800d38a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d2ba:	4b37      	ldr	r3, [pc, #220]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	f023 0203 	bic.w	r2, r3, #3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	4934      	ldr	r1, [pc, #208]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d2cc:	f7fe fc24 	bl	800bb18 <HAL_GetTick>
 800d2d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2d2:	e00a      	b.n	800d2ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2d4:	f7fe fc20 	bl	800bb18 <HAL_GetTick>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d901      	bls.n	800d2ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	e04f      	b.n	800d38a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2ea:	4b2b      	ldr	r3, [pc, #172]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	f003 020c 	and.w	r2, r3, #12
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d1eb      	bne.n	800d2d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d2fc:	4b25      	ldr	r3, [pc, #148]	; (800d394 <HAL_RCC_ClockConfig+0x1b8>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f003 0307 	and.w	r3, r3, #7
 800d304:	683a      	ldr	r2, [r7, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	d20c      	bcs.n	800d324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d30a:	4b22      	ldr	r3, [pc, #136]	; (800d394 <HAL_RCC_ClockConfig+0x1b8>)
 800d30c:	683a      	ldr	r2, [r7, #0]
 800d30e:	b2d2      	uxtb	r2, r2
 800d310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d312:	4b20      	ldr	r3, [pc, #128]	; (800d394 <HAL_RCC_ClockConfig+0x1b8>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f003 0307 	and.w	r3, r3, #7
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d001      	beq.n	800d324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d320:	2301      	movs	r3, #1
 800d322:	e032      	b.n	800d38a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0304 	and.w	r3, r3, #4
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d008      	beq.n	800d342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d330:	4b19      	ldr	r3, [pc, #100]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	4916      	ldr	r1, [pc, #88]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d33e:	4313      	orrs	r3, r2
 800d340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f003 0308 	and.w	r3, r3, #8
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d009      	beq.n	800d362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d34e:	4b12      	ldr	r3, [pc, #72]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	691b      	ldr	r3, [r3, #16]
 800d35a:	00db      	lsls	r3, r3, #3
 800d35c:	490e      	ldr	r1, [pc, #56]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d35e:	4313      	orrs	r3, r2
 800d360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d362:	f000 f821 	bl	800d3a8 <HAL_RCC_GetSysClockFreq>
 800d366:	4602      	mov	r2, r0
 800d368:	4b0b      	ldr	r3, [pc, #44]	; (800d398 <HAL_RCC_ClockConfig+0x1bc>)
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	091b      	lsrs	r3, r3, #4
 800d36e:	f003 030f 	and.w	r3, r3, #15
 800d372:	490a      	ldr	r1, [pc, #40]	; (800d39c <HAL_RCC_ClockConfig+0x1c0>)
 800d374:	5ccb      	ldrb	r3, [r1, r3]
 800d376:	fa22 f303 	lsr.w	r3, r2, r3
 800d37a:	4a09      	ldr	r2, [pc, #36]	; (800d3a0 <HAL_RCC_ClockConfig+0x1c4>)
 800d37c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d37e:	4b09      	ldr	r3, [pc, #36]	; (800d3a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe fb84 	bl	800ba90 <HAL_InitTick>

  return HAL_OK;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	40023c00 	.word	0x40023c00
 800d398:	40023800 	.word	0x40023800
 800d39c:	08013918 	.word	0x08013918
 800d3a0:	20000058 	.word	0x20000058
 800d3a4:	2000005c 	.word	0x2000005c

0800d3a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d3a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d3ac:	b090      	sub	sp, #64	; 0x40
 800d3ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d3c0:	4b59      	ldr	r3, [pc, #356]	; (800d528 <HAL_RCC_GetSysClockFreq+0x180>)
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	f003 030c 	and.w	r3, r3, #12
 800d3c8:	2b08      	cmp	r3, #8
 800d3ca:	d00d      	beq.n	800d3e8 <HAL_RCC_GetSysClockFreq+0x40>
 800d3cc:	2b08      	cmp	r3, #8
 800d3ce:	f200 80a1 	bhi.w	800d514 <HAL_RCC_GetSysClockFreq+0x16c>
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d002      	beq.n	800d3dc <HAL_RCC_GetSysClockFreq+0x34>
 800d3d6:	2b04      	cmp	r3, #4
 800d3d8:	d003      	beq.n	800d3e2 <HAL_RCC_GetSysClockFreq+0x3a>
 800d3da:	e09b      	b.n	800d514 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d3dc:	4b53      	ldr	r3, [pc, #332]	; (800d52c <HAL_RCC_GetSysClockFreq+0x184>)
 800d3de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800d3e0:	e09b      	b.n	800d51a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d3e2:	4b53      	ldr	r3, [pc, #332]	; (800d530 <HAL_RCC_GetSysClockFreq+0x188>)
 800d3e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d3e6:	e098      	b.n	800d51a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d3e8:	4b4f      	ldr	r3, [pc, #316]	; (800d528 <HAL_RCC_GetSysClockFreq+0x180>)
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d3f2:	4b4d      	ldr	r3, [pc, #308]	; (800d528 <HAL_RCC_GetSysClockFreq+0x180>)
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d028      	beq.n	800d450 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d3fe:	4b4a      	ldr	r3, [pc, #296]	; (800d528 <HAL_RCC_GetSysClockFreq+0x180>)
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	099b      	lsrs	r3, r3, #6
 800d404:	2200      	movs	r2, #0
 800d406:	623b      	str	r3, [r7, #32]
 800d408:	627a      	str	r2, [r7, #36]	; 0x24
 800d40a:	6a3b      	ldr	r3, [r7, #32]
 800d40c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800d410:	2100      	movs	r1, #0
 800d412:	4b47      	ldr	r3, [pc, #284]	; (800d530 <HAL_RCC_GetSysClockFreq+0x188>)
 800d414:	fb03 f201 	mul.w	r2, r3, r1
 800d418:	2300      	movs	r3, #0
 800d41a:	fb00 f303 	mul.w	r3, r0, r3
 800d41e:	4413      	add	r3, r2
 800d420:	4a43      	ldr	r2, [pc, #268]	; (800d530 <HAL_RCC_GetSysClockFreq+0x188>)
 800d422:	fba0 1202 	umull	r1, r2, r0, r2
 800d426:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d428:	460a      	mov	r2, r1
 800d42a:	62ba      	str	r2, [r7, #40]	; 0x28
 800d42c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d42e:	4413      	add	r3, r2
 800d430:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d434:	2200      	movs	r2, #0
 800d436:	61bb      	str	r3, [r7, #24]
 800d438:	61fa      	str	r2, [r7, #28]
 800d43a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d43e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d442:	f7f3 fbe1 	bl	8000c08 <__aeabi_uldivmod>
 800d446:	4602      	mov	r2, r0
 800d448:	460b      	mov	r3, r1
 800d44a:	4613      	mov	r3, r2
 800d44c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d44e:	e053      	b.n	800d4f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d450:	4b35      	ldr	r3, [pc, #212]	; (800d528 <HAL_RCC_GetSysClockFreq+0x180>)
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	099b      	lsrs	r3, r3, #6
 800d456:	2200      	movs	r2, #0
 800d458:	613b      	str	r3, [r7, #16]
 800d45a:	617a      	str	r2, [r7, #20]
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800d462:	f04f 0b00 	mov.w	fp, #0
 800d466:	4652      	mov	r2, sl
 800d468:	465b      	mov	r3, fp
 800d46a:	f04f 0000 	mov.w	r0, #0
 800d46e:	f04f 0100 	mov.w	r1, #0
 800d472:	0159      	lsls	r1, r3, #5
 800d474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d478:	0150      	lsls	r0, r2, #5
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	ebb2 080a 	subs.w	r8, r2, sl
 800d482:	eb63 090b 	sbc.w	r9, r3, fp
 800d486:	f04f 0200 	mov.w	r2, #0
 800d48a:	f04f 0300 	mov.w	r3, #0
 800d48e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800d492:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800d496:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800d49a:	ebb2 0408 	subs.w	r4, r2, r8
 800d49e:	eb63 0509 	sbc.w	r5, r3, r9
 800d4a2:	f04f 0200 	mov.w	r2, #0
 800d4a6:	f04f 0300 	mov.w	r3, #0
 800d4aa:	00eb      	lsls	r3, r5, #3
 800d4ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d4b0:	00e2      	lsls	r2, r4, #3
 800d4b2:	4614      	mov	r4, r2
 800d4b4:	461d      	mov	r5, r3
 800d4b6:	eb14 030a 	adds.w	r3, r4, sl
 800d4ba:	603b      	str	r3, [r7, #0]
 800d4bc:	eb45 030b 	adc.w	r3, r5, fp
 800d4c0:	607b      	str	r3, [r7, #4]
 800d4c2:	f04f 0200 	mov.w	r2, #0
 800d4c6:	f04f 0300 	mov.w	r3, #0
 800d4ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	028b      	lsls	r3, r1, #10
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d4d8:	4621      	mov	r1, r4
 800d4da:	028a      	lsls	r2, r1, #10
 800d4dc:	4610      	mov	r0, r2
 800d4de:	4619      	mov	r1, r3
 800d4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	60bb      	str	r3, [r7, #8]
 800d4e6:	60fa      	str	r2, [r7, #12]
 800d4e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d4ec:	f7f3 fb8c 	bl	8000c08 <__aeabi_uldivmod>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d4f8:	4b0b      	ldr	r3, [pc, #44]	; (800d528 <HAL_RCC_GetSysClockFreq+0x180>)
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	0c1b      	lsrs	r3, r3, #16
 800d4fe:	f003 0303 	and.w	r3, r3, #3
 800d502:	3301      	adds	r3, #1
 800d504:	005b      	lsls	r3, r3, #1
 800d506:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800d508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d510:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d512:	e002      	b.n	800d51a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d514:	4b05      	ldr	r3, [pc, #20]	; (800d52c <HAL_RCC_GetSysClockFreq+0x184>)
 800d516:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3740      	adds	r7, #64	; 0x40
 800d520:	46bd      	mov	sp, r7
 800d522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d526:	bf00      	nop
 800d528:	40023800 	.word	0x40023800
 800d52c:	00f42400 	.word	0x00f42400
 800d530:	017d7840 	.word	0x017d7840

0800d534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d534:	b480      	push	{r7}
 800d536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d538:	4b03      	ldr	r3, [pc, #12]	; (800d548 <HAL_RCC_GetHCLKFreq+0x14>)
 800d53a:	681b      	ldr	r3, [r3, #0]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop
 800d548:	20000058 	.word	0x20000058

0800d54c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d550:	f7ff fff0 	bl	800d534 <HAL_RCC_GetHCLKFreq>
 800d554:	4602      	mov	r2, r0
 800d556:	4b05      	ldr	r3, [pc, #20]	; (800d56c <HAL_RCC_GetPCLK1Freq+0x20>)
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	0a9b      	lsrs	r3, r3, #10
 800d55c:	f003 0307 	and.w	r3, r3, #7
 800d560:	4903      	ldr	r1, [pc, #12]	; (800d570 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d562:	5ccb      	ldrb	r3, [r1, r3]
 800d564:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d568:	4618      	mov	r0, r3
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	40023800 	.word	0x40023800
 800d570:	08013928 	.word	0x08013928

0800d574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d578:	f7ff ffdc 	bl	800d534 <HAL_RCC_GetHCLKFreq>
 800d57c:	4602      	mov	r2, r0
 800d57e:	4b05      	ldr	r3, [pc, #20]	; (800d594 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	0b5b      	lsrs	r3, r3, #13
 800d584:	f003 0307 	and.w	r3, r3, #7
 800d588:	4903      	ldr	r1, [pc, #12]	; (800d598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d58a:	5ccb      	ldrb	r3, [r1, r3]
 800d58c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d590:	4618      	mov	r0, r3
 800d592:	bd80      	pop	{r7, pc}
 800d594:	40023800 	.word	0x40023800
 800d598:	08013928 	.word	0x08013928

0800d59c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e07b      	b.n	800d6a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d108      	bne.n	800d5c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d5be:	d009      	beq.n	800d5d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	61da      	str	r2, [r3, #28]
 800d5c6:	e005      	b.n	800d5d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d106      	bne.n	800d5f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f7fe f834 	bl	800b65c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d60a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d61c:	431a      	orrs	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d626:	431a      	orrs	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	f003 0302 	and.w	r3, r3, #2
 800d630:	431a      	orrs	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	695b      	ldr	r3, [r3, #20]
 800d636:	f003 0301 	and.w	r3, r3, #1
 800d63a:	431a      	orrs	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	699b      	ldr	r3, [r3, #24]
 800d640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d644:	431a      	orrs	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	69db      	ldr	r3, [r3, #28]
 800d64a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d64e:	431a      	orrs	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6a1b      	ldr	r3, [r3, #32]
 800d654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d658:	ea42 0103 	orr.w	r1, r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d660:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	430a      	orrs	r2, r1
 800d66a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	699b      	ldr	r3, [r3, #24]
 800d670:	0c1b      	lsrs	r3, r3, #16
 800d672:	f003 0104 	and.w	r1, r3, #4
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67a:	f003 0210 	and.w	r2, r3, #16
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	430a      	orrs	r2, r1
 800d684:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	69da      	ldr	r2, [r3, #28]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d694:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b088      	sub	sp, #32
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	60f8      	str	r0, [r7, #12]
 800d6b6:	60b9      	str	r1, [r7, #8]
 800d6b8:	603b      	str	r3, [r7, #0]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d101      	bne.n	800d6d0 <HAL_SPI_Transmit+0x22>
 800d6cc:	2302      	movs	r3, #2
 800d6ce:	e12d      	b.n	800d92c <HAL_SPI_Transmit+0x27e>
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d6d8:	f7fe fa1e 	bl	800bb18 <HAL_GetTick>
 800d6dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d6de:	88fb      	ldrh	r3, [r7, #6]
 800d6e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d002      	beq.n	800d6f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d6ee:	2302      	movs	r3, #2
 800d6f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d6f2:	e116      	b.n	800d922 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <HAL_SPI_Transmit+0x52>
 800d6fa:	88fb      	ldrh	r3, [r7, #6]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d102      	bne.n	800d706 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d700:	2301      	movs	r3, #1
 800d702:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d704:	e10d      	b.n	800d922 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2203      	movs	r2, #3
 800d70a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2200      	movs	r2, #0
 800d712:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	88fa      	ldrh	r2, [r7, #6]
 800d71e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	88fa      	ldrh	r2, [r7, #6]
 800d724:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2200      	movs	r2, #0
 800d72a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2200      	movs	r2, #0
 800d730:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2200      	movs	r2, #0
 800d736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2200      	movs	r2, #0
 800d73c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d74c:	d10f      	bne.n	800d76e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d75c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d76c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d778:	2b40      	cmp	r3, #64	; 0x40
 800d77a:	d007      	beq.n	800d78c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d78a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d794:	d14f      	bne.n	800d836 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d002      	beq.n	800d7a4 <HAL_SPI_Transmit+0xf6>
 800d79e:	8afb      	ldrh	r3, [r7, #22]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d142      	bne.n	800d82a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a8:	881a      	ldrh	r2, [r3, #0]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7b4:	1c9a      	adds	r2, r3, #2
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d7c8:	e02f      	b.n	800d82a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	f003 0302 	and.w	r3, r3, #2
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d112      	bne.n	800d7fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7dc:	881a      	ldrh	r2, [r3, #0]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e8:	1c9a      	adds	r2, r3, #2
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	86da      	strh	r2, [r3, #54]	; 0x36
 800d7fc:	e015      	b.n	800d82a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7fe:	f7fe f98b 	bl	800bb18 <HAL_GetTick>
 800d802:	4602      	mov	r2, r0
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	1ad3      	subs	r3, r2, r3
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d803      	bhi.n	800d816 <HAL_SPI_Transmit+0x168>
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d814:	d102      	bne.n	800d81c <HAL_SPI_Transmit+0x16e>
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d106      	bne.n	800d82a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800d81c:	2303      	movs	r3, #3
 800d81e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2201      	movs	r2, #1
 800d824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800d828:	e07b      	b.n	800d922 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d82e:	b29b      	uxth	r3, r3
 800d830:	2b00      	cmp	r3, #0
 800d832:	d1ca      	bne.n	800d7ca <HAL_SPI_Transmit+0x11c>
 800d834:	e050      	b.n	800d8d8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d002      	beq.n	800d844 <HAL_SPI_Transmit+0x196>
 800d83e:	8afb      	ldrh	r3, [r7, #22]
 800d840:	2b01      	cmp	r3, #1
 800d842:	d144      	bne.n	800d8ce <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	330c      	adds	r3, #12
 800d84e:	7812      	ldrb	r2, [r2, #0]
 800d850:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d856:	1c5a      	adds	r2, r3, #1
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d860:	b29b      	uxth	r3, r3
 800d862:	3b01      	subs	r3, #1
 800d864:	b29a      	uxth	r2, r3
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d86a:	e030      	b.n	800d8ce <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	f003 0302 	and.w	r3, r3, #2
 800d876:	2b02      	cmp	r3, #2
 800d878:	d113      	bne.n	800d8a2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	330c      	adds	r3, #12
 800d884:	7812      	ldrb	r2, [r2, #0]
 800d886:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88c:	1c5a      	adds	r2, r3, #1
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d896:	b29b      	uxth	r3, r3
 800d898:	3b01      	subs	r3, #1
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	86da      	strh	r2, [r3, #54]	; 0x36
 800d8a0:	e015      	b.n	800d8ce <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8a2:	f7fe f939 	bl	800bb18 <HAL_GetTick>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	1ad3      	subs	r3, r2, r3
 800d8ac:	683a      	ldr	r2, [r7, #0]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d803      	bhi.n	800d8ba <HAL_SPI_Transmit+0x20c>
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b8:	d102      	bne.n	800d8c0 <HAL_SPI_Transmit+0x212>
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d106      	bne.n	800d8ce <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800d8c0:	2303      	movs	r3, #3
 800d8c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800d8cc:	e029      	b.n	800d922 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1c9      	bne.n	800d86c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d8d8:	69ba      	ldr	r2, [r7, #24]
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f000 fbdf 	bl	800e0a0 <SPI_EndRxTxTransaction>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2220      	movs	r2, #32
 800d8ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10a      	bne.n	800d90c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	613b      	str	r3, [r7, #16]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	613b      	str	r3, [r7, #16]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	613b      	str	r3, [r7, #16]
 800d90a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800d914:	2301      	movs	r3, #1
 800d916:	77fb      	strb	r3, [r7, #31]
 800d918:	e003      	b.n	800d922 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2201      	movs	r2, #1
 800d91e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2200      	movs	r2, #0
 800d926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d92a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3720      	adds	r7, #32
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b088      	sub	sp, #32
 800d938:	af02      	add	r7, sp, #8
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	603b      	str	r3, [r7, #0]
 800d940:	4613      	mov	r3, r2
 800d942:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d944:	2300      	movs	r3, #0
 800d946:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	2b01      	cmp	r3, #1
 800d952:	d002      	beq.n	800d95a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800d954:	2302      	movs	r3, #2
 800d956:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d958:	e0fb      	b.n	800db52 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d962:	d112      	bne.n	800d98a <HAL_SPI_Receive+0x56>
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10e      	bne.n	800d98a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2204      	movs	r2, #4
 800d970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d974:	88fa      	ldrh	r2, [r7, #6]
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	4613      	mov	r3, r2
 800d97c:	68ba      	ldr	r2, [r7, #8]
 800d97e:	68b9      	ldr	r1, [r7, #8]
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 f8ef 	bl	800db64 <HAL_SPI_TransmitReceive>
 800d986:	4603      	mov	r3, r0
 800d988:	e0e8      	b.n	800db5c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d990:	2b01      	cmp	r3, #1
 800d992:	d101      	bne.n	800d998 <HAL_SPI_Receive+0x64>
 800d994:	2302      	movs	r3, #2
 800d996:	e0e1      	b.n	800db5c <HAL_SPI_Receive+0x228>
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d9a0:	f7fe f8ba 	bl	800bb18 <HAL_GetTick>
 800d9a4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d002      	beq.n	800d9b2 <HAL_SPI_Receive+0x7e>
 800d9ac:	88fb      	ldrh	r3, [r7, #6]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d102      	bne.n	800d9b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d9b6:	e0cc      	b.n	800db52 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2204      	movs	r2, #4
 800d9bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	88fa      	ldrh	r2, [r7, #6]
 800d9d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	88fa      	ldrh	r2, [r7, #6]
 800d9d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9fe:	d10f      	bne.n	800da20 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800da1e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da2a:	2b40      	cmp	r3, #64	; 0x40
 800da2c:	d007      	beq.n	800da3e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da3c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d16a      	bne.n	800db1c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800da46:	e032      	b.n	800daae <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	f003 0301 	and.w	r3, r3, #1
 800da52:	2b01      	cmp	r3, #1
 800da54:	d115      	bne.n	800da82 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f103 020c 	add.w	r2, r3, #12
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da62:	7812      	ldrb	r2, [r2, #0]
 800da64:	b2d2      	uxtb	r2, r2
 800da66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da6c:	1c5a      	adds	r2, r3, #1
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da76:	b29b      	uxth	r3, r3
 800da78:	3b01      	subs	r3, #1
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da80:	e015      	b.n	800daae <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da82:	f7fe f849 	bl	800bb18 <HAL_GetTick>
 800da86:	4602      	mov	r2, r0
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	1ad3      	subs	r3, r2, r3
 800da8c:	683a      	ldr	r2, [r7, #0]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d803      	bhi.n	800da9a <HAL_SPI_Receive+0x166>
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da98:	d102      	bne.n	800daa0 <HAL_SPI_Receive+0x16c>
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d106      	bne.n	800daae <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800daa0:	2303      	movs	r3, #3
 800daa2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800daac:	e051      	b.n	800db52 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1c7      	bne.n	800da48 <HAL_SPI_Receive+0x114>
 800dab8:	e035      	b.n	800db26 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	f003 0301 	and.w	r3, r3, #1
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d113      	bne.n	800daf0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68da      	ldr	r2, [r3, #12]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad2:	b292      	uxth	r2, r2
 800dad4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dada:	1c9a      	adds	r2, r3, #2
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	3b01      	subs	r3, #1
 800dae8:	b29a      	uxth	r2, r3
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800daee:	e015      	b.n	800db1c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800daf0:	f7fe f812 	bl	800bb18 <HAL_GetTick>
 800daf4:	4602      	mov	r2, r0
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d803      	bhi.n	800db08 <HAL_SPI_Receive+0x1d4>
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db06:	d102      	bne.n	800db0e <HAL_SPI_Receive+0x1da>
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d106      	bne.n	800db1c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800db0e:	2303      	movs	r3, #3
 800db10:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2201      	movs	r2, #1
 800db16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800db1a:	e01a      	b.n	800db52 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db20:	b29b      	uxth	r3, r3
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1c9      	bne.n	800daba <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db26:	693a      	ldr	r2, [r7, #16]
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	68f8      	ldr	r0, [r7, #12]
 800db2c:	f000 fa52 	bl	800dfd4 <SPI_EndRxTransaction>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d002      	beq.n	800db3c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2220      	movs	r2, #32
 800db3a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800db44:	2301      	movs	r3, #1
 800db46:	75fb      	strb	r3, [r7, #23]
 800db48:	e003      	b.n	800db52 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2200      	movs	r2, #0
 800db56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800db5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3718      	adds	r7, #24
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08c      	sub	sp, #48	; 0x30
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	607a      	str	r2, [r7, #4]
 800db70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db72:	2301      	movs	r3, #1
 800db74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db76:	2300      	movs	r3, #0
 800db78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db82:	2b01      	cmp	r3, #1
 800db84:	d101      	bne.n	800db8a <HAL_SPI_TransmitReceive+0x26>
 800db86:	2302      	movs	r3, #2
 800db88:	e198      	b.n	800debc <HAL_SPI_TransmitReceive+0x358>
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2201      	movs	r2, #1
 800db8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db92:	f7fd ffc1 	bl	800bb18 <HAL_GetTick>
 800db96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800dba8:	887b      	ldrh	r3, [r7, #2]
 800dbaa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dbac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d00f      	beq.n	800dbd4 <HAL_SPI_TransmitReceive+0x70>
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbba:	d107      	bne.n	800dbcc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d103      	bne.n	800dbcc <HAL_SPI_TransmitReceive+0x68>
 800dbc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbc8:	2b04      	cmp	r3, #4
 800dbca:	d003      	beq.n	800dbd4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800dbcc:	2302      	movs	r3, #2
 800dbce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dbd2:	e16d      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d005      	beq.n	800dbe6 <HAL_SPI_TransmitReceive+0x82>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <HAL_SPI_TransmitReceive+0x82>
 800dbe0:	887b      	ldrh	r3, [r7, #2]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d103      	bne.n	800dbee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dbec:	e160      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b04      	cmp	r3, #4
 800dbf8:	d003      	beq.n	800dc02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2205      	movs	r2, #5
 800dbfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2200      	movs	r2, #0
 800dc06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	887a      	ldrh	r2, [r7, #2]
 800dc12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	887a      	ldrh	r2, [r7, #2]
 800dc18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	887a      	ldrh	r2, [r7, #2]
 800dc24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	887a      	ldrh	r2, [r7, #2]
 800dc2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2200      	movs	r2, #0
 800dc36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc42:	2b40      	cmp	r3, #64	; 0x40
 800dc44:	d007      	beq.n	800dc56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc5e:	d17c      	bne.n	800dd5a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d002      	beq.n	800dc6e <HAL_SPI_TransmitReceive+0x10a>
 800dc68:	8b7b      	ldrh	r3, [r7, #26]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d16a      	bne.n	800dd44 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc72:	881a      	ldrh	r2, [r3, #0]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7e:	1c9a      	adds	r2, r3, #2
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc92:	e057      	b.n	800dd44 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	f003 0302 	and.w	r3, r3, #2
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d11b      	bne.n	800dcda <HAL_SPI_TransmitReceive+0x176>
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d016      	beq.n	800dcda <HAL_SPI_TransmitReceive+0x176>
 800dcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d113      	bne.n	800dcda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb6:	881a      	ldrh	r2, [r3, #0]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc2:	1c9a      	adds	r2, r3, #2
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d119      	bne.n	800dd1c <HAL_SPI_TransmitReceive+0x1b8>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d014      	beq.n	800dd1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	68da      	ldr	r2, [r3, #12]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfc:	b292      	uxth	r2, r2
 800dcfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd04:	1c9a      	adds	r2, r3, #2
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	3b01      	subs	r3, #1
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dd1c:	f7fd fefc 	bl	800bb18 <HAL_GetTick>
 800dd20:	4602      	mov	r2, r0
 800dd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd24:	1ad3      	subs	r3, r2, r3
 800dd26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d80b      	bhi.n	800dd44 <HAL_SPI_TransmitReceive+0x1e0>
 800dd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd32:	d007      	beq.n	800dd44 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800dd34:	2303      	movs	r3, #3
 800dd36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800dd42:	e0b5      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1a2      	bne.n	800dc94 <HAL_SPI_TransmitReceive+0x130>
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d19d      	bne.n	800dc94 <HAL_SPI_TransmitReceive+0x130>
 800dd58:	e080      	b.n	800de5c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d002      	beq.n	800dd68 <HAL_SPI_TransmitReceive+0x204>
 800dd62:	8b7b      	ldrh	r3, [r7, #26]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d16f      	bne.n	800de48 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	330c      	adds	r3, #12
 800dd72:	7812      	ldrb	r2, [r2, #0]
 800dd74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd7a:	1c5a      	adds	r2, r3, #1
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	3b01      	subs	r3, #1
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd8e:	e05b      	b.n	800de48 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	f003 0302 	and.w	r3, r3, #2
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d11c      	bne.n	800ddd8 <HAL_SPI_TransmitReceive+0x274>
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d017      	beq.n	800ddd8 <HAL_SPI_TransmitReceive+0x274>
 800dda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d114      	bne.n	800ddd8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	330c      	adds	r3, #12
 800ddb8:	7812      	ldrb	r2, [r2, #0]
 800ddba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc0:	1c5a      	adds	r2, r3, #1
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	f003 0301 	and.w	r3, r3, #1
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d119      	bne.n	800de1a <HAL_SPI_TransmitReceive+0x2b6>
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d014      	beq.n	800de1a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	68da      	ldr	r2, [r3, #12]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddfa:	b2d2      	uxtb	r2, r2
 800ddfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de02:	1c5a      	adds	r2, r3, #1
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	3b01      	subs	r3, #1
 800de10:	b29a      	uxth	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800de16:	2301      	movs	r3, #1
 800de18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800de1a:	f7fd fe7d 	bl	800bb18 <HAL_GetTick>
 800de1e:	4602      	mov	r2, r0
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	1ad3      	subs	r3, r2, r3
 800de24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de26:	429a      	cmp	r2, r3
 800de28:	d803      	bhi.n	800de32 <HAL_SPI_TransmitReceive+0x2ce>
 800de2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de30:	d102      	bne.n	800de38 <HAL_SPI_TransmitReceive+0x2d4>
 800de32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de34:	2b00      	cmp	r3, #0
 800de36:	d107      	bne.n	800de48 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800de38:	2303      	movs	r3, #3
 800de3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2201      	movs	r2, #1
 800de42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800de46:	e033      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d19e      	bne.n	800dd90 <HAL_SPI_TransmitReceive+0x22c>
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de56:	b29b      	uxth	r3, r3
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d199      	bne.n	800dd90 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800de5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f000 f91d 	bl	800e0a0 <SPI_EndRxTxTransaction>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d006      	beq.n	800de7a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2220      	movs	r2, #32
 800de76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800de78:	e01a      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d10a      	bne.n	800de98 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800de82:	2300      	movs	r3, #0
 800de84:	617b      	str	r3, [r7, #20]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	617b      	str	r3, [r7, #20]
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	617b      	str	r3, [r7, #20]
 800de96:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d003      	beq.n	800dea8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800dea0:	2301      	movs	r3, #1
 800dea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dea6:	e003      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800deb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800debc:	4618      	mov	r0, r3
 800debe:	3730      	adds	r7, #48	; 0x30
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b088      	sub	sp, #32
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	603b      	str	r3, [r7, #0]
 800ded0:	4613      	mov	r3, r2
 800ded2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ded4:	f7fd fe20 	bl	800bb18 <HAL_GetTick>
 800ded8:	4602      	mov	r2, r0
 800deda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dedc:	1a9b      	subs	r3, r3, r2
 800dede:	683a      	ldr	r2, [r7, #0]
 800dee0:	4413      	add	r3, r2
 800dee2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dee4:	f7fd fe18 	bl	800bb18 <HAL_GetTick>
 800dee8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800deea:	4b39      	ldr	r3, [pc, #228]	; (800dfd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	015b      	lsls	r3, r3, #5
 800def0:	0d1b      	lsrs	r3, r3, #20
 800def2:	69fa      	ldr	r2, [r7, #28]
 800def4:	fb02 f303 	mul.w	r3, r2, r3
 800def8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800defa:	e054      	b.n	800dfa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df02:	d050      	beq.n	800dfa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800df04:	f7fd fe08 	bl	800bb18 <HAL_GetTick>
 800df08:	4602      	mov	r2, r0
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	69fa      	ldr	r2, [r7, #28]
 800df10:	429a      	cmp	r2, r3
 800df12:	d902      	bls.n	800df1a <SPI_WaitFlagStateUntilTimeout+0x56>
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d13d      	bne.n	800df96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	685a      	ldr	r2, [r3, #4]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800df28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df32:	d111      	bne.n	800df58 <SPI_WaitFlagStateUntilTimeout+0x94>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df3c:	d004      	beq.n	800df48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df46:	d107      	bne.n	800df58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df60:	d10f      	bne.n	800df82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df70:	601a      	str	r2, [r3, #0]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2201      	movs	r2, #1
 800df86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800df92:	2303      	movs	r3, #3
 800df94:	e017      	b.n	800dfc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d101      	bne.n	800dfa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800df9c:	2300      	movs	r3, #0
 800df9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	3b01      	subs	r3, #1
 800dfa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	689a      	ldr	r2, [r3, #8]
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	4013      	ands	r3, r2
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	bf0c      	ite	eq
 800dfb6:	2301      	moveq	r3, #1
 800dfb8:	2300      	movne	r3, #0
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	79fb      	ldrb	r3, [r7, #7]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d19b      	bne.n	800defc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3720      	adds	r7, #32
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	20000058 	.word	0x20000058

0800dfd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b086      	sub	sp, #24
 800dfd8:	af02      	add	r7, sp, #8
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfe8:	d111      	bne.n	800e00e <SPI_EndRxTransaction+0x3a>
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dff2:	d004      	beq.n	800dffe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dffc:	d107      	bne.n	800e00e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e00c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e016:	d12a      	bne.n	800e06e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e020:	d012      	beq.n	800e048 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	2200      	movs	r2, #0
 800e02a:	2180      	movs	r1, #128	; 0x80
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f7ff ff49 	bl	800dec4 <SPI_WaitFlagStateUntilTimeout>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d02d      	beq.n	800e094 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e03c:	f043 0220 	orr.w	r2, r3, #32
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e044:	2303      	movs	r3, #3
 800e046:	e026      	b.n	800e096 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	9300      	str	r3, [sp, #0]
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	2200      	movs	r2, #0
 800e050:	2101      	movs	r1, #1
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7ff ff36 	bl	800dec4 <SPI_WaitFlagStateUntilTimeout>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d01a      	beq.n	800e094 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e062:	f043 0220 	orr.w	r2, r3, #32
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e06a:	2303      	movs	r3, #3
 800e06c:	e013      	b.n	800e096 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	2200      	movs	r2, #0
 800e076:	2101      	movs	r1, #1
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f7ff ff23 	bl	800dec4 <SPI_WaitFlagStateUntilTimeout>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d007      	beq.n	800e094 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e088:	f043 0220 	orr.w	r2, r3, #32
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e090:	2303      	movs	r3, #3
 800e092:	e000      	b.n	800e096 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e094:	2300      	movs	r3, #0
}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
	...

0800e0a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b088      	sub	sp, #32
 800e0a4:	af02      	add	r7, sp, #8
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	2102      	movs	r1, #2
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7ff ff04 	bl	800dec4 <SPI_WaitFlagStateUntilTimeout>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d007      	beq.n	800e0d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0c6:	f043 0220 	orr.w	r2, r3, #32
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	e032      	b.n	800e138 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e0d2:	4b1b      	ldr	r3, [pc, #108]	; (800e140 <SPI_EndRxTxTransaction+0xa0>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4a1b      	ldr	r2, [pc, #108]	; (800e144 <SPI_EndRxTxTransaction+0xa4>)
 800e0d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e0dc:	0d5b      	lsrs	r3, r3, #21
 800e0de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e0e2:	fb02 f303 	mul.w	r3, r2, r3
 800e0e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0f0:	d112      	bne.n	800e118 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	2180      	movs	r1, #128	; 0x80
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f7ff fee1 	bl	800dec4 <SPI_WaitFlagStateUntilTimeout>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d016      	beq.n	800e136 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e10c:	f043 0220 	orr.w	r2, r3, #32
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e114:	2303      	movs	r3, #3
 800e116:	e00f      	b.n	800e138 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d00a      	beq.n	800e134 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	3b01      	subs	r3, #1
 800e122:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e12e:	2b80      	cmp	r3, #128	; 0x80
 800e130:	d0f2      	beq.n	800e118 <SPI_EndRxTxTransaction+0x78>
 800e132:	e000      	b.n	800e136 <SPI_EndRxTxTransaction+0x96>
        break;
 800e134:	bf00      	nop
  }

  return HAL_OK;
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3718      	adds	r7, #24
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	20000058 	.word	0x20000058
 800e144:	165e9f81 	.word	0x165e9f81

0800e148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d101      	bne.n	800e15a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e156:	2301      	movs	r3, #1
 800e158:	e042      	b.n	800e1e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e160:	b2db      	uxtb	r3, r3
 800e162:	2b00      	cmp	r3, #0
 800e164:	d106      	bne.n	800e174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7fd fabc 	bl	800b6ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2224      	movs	r2, #36	; 0x24
 800e178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	68da      	ldr	r2, [r3, #12]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e18a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 fdbd 	bl	800ed0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	691a      	ldr	r2, [r3, #16]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e1a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	695a      	ldr	r2, [r3, #20]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e1b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	68da      	ldr	r2, [r3, #12]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e1c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2220      	movs	r2, #32
 800e1cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2220      	movs	r2, #32
 800e1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08a      	sub	sp, #40	; 0x28
 800e1ec:	af02      	add	r7, sp, #8
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	603b      	str	r3, [r7, #0]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b20      	cmp	r3, #32
 800e206:	d175      	bne.n	800e2f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d002      	beq.n	800e214 <HAL_UART_Transmit+0x2c>
 800e20e:	88fb      	ldrh	r3, [r7, #6]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d101      	bne.n	800e218 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e214:	2301      	movs	r3, #1
 800e216:	e06e      	b.n	800e2f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2200      	movs	r2, #0
 800e21c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2221      	movs	r2, #33	; 0x21
 800e222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e226:	f7fd fc77 	bl	800bb18 <HAL_GetTick>
 800e22a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	88fa      	ldrh	r2, [r7, #6]
 800e230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	88fa      	ldrh	r2, [r7, #6]
 800e236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	689b      	ldr	r3, [r3, #8]
 800e23c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e240:	d108      	bne.n	800e254 <HAL_UART_Transmit+0x6c>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	691b      	ldr	r3, [r3, #16]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d104      	bne.n	800e254 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e24a:	2300      	movs	r3, #0
 800e24c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	61bb      	str	r3, [r7, #24]
 800e252:	e003      	b.n	800e25c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e258:	2300      	movs	r3, #0
 800e25a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e25c:	e02e      	b.n	800e2bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2200      	movs	r2, #0
 800e266:	2180      	movs	r1, #128	; 0x80
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f000 fb1f 	bl	800e8ac <UART_WaitOnFlagUntilTimeout>
 800e26e:	4603      	mov	r3, r0
 800e270:	2b00      	cmp	r3, #0
 800e272:	d005      	beq.n	800e280 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2220      	movs	r2, #32
 800e278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800e27c:	2303      	movs	r3, #3
 800e27e:	e03a      	b.n	800e2f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d10b      	bne.n	800e29e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	461a      	mov	r2, r3
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	3302      	adds	r3, #2
 800e29a:	61bb      	str	r3, [r7, #24]
 800e29c:	e007      	b.n	800e2ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	781a      	ldrb	r2, [r3, #0]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1cb      	bne.n	800e25e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	2140      	movs	r1, #64	; 0x40
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f000 faeb 	bl	800e8ac <UART_WaitOnFlagUntilTimeout>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d005      	beq.n	800e2e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2220      	movs	r2, #32
 800e2e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800e2e4:	2303      	movs	r3, #3
 800e2e6:	e006      	b.n	800e2f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2220      	movs	r2, #32
 800e2ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	e000      	b.n	800e2f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800e2f4:	2302      	movs	r3, #2
  }
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3720      	adds	r7, #32
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b084      	sub	sp, #16
 800e302:	af00      	add	r7, sp, #0
 800e304:	60f8      	str	r0, [r7, #12]
 800e306:	60b9      	str	r1, [r7, #8]
 800e308:	4613      	mov	r3, r2
 800e30a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e312:	b2db      	uxtb	r3, r3
 800e314:	2b20      	cmp	r3, #32
 800e316:	d112      	bne.n	800e33e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <HAL_UART_Receive_IT+0x26>
 800e31e:	88fb      	ldrh	r3, [r7, #6]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d101      	bne.n	800e328 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800e324:	2301      	movs	r3, #1
 800e326:	e00b      	b.n	800e340 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2200      	movs	r2, #0
 800e32c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e32e:	88fb      	ldrh	r3, [r7, #6]
 800e330:	461a      	mov	r2, r3
 800e332:	68b9      	ldr	r1, [r7, #8]
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	f000 fb12 	bl	800e95e <UART_Start_Receive_IT>
 800e33a:	4603      	mov	r3, r0
 800e33c:	e000      	b.n	800e340 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800e33e:	2302      	movs	r3, #2
  }
}
 800e340:	4618      	mov	r0, r3
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b0ba      	sub	sp, #232	; 0xe8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	695b      	ldr	r3, [r3, #20]
 800e36a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e36e:	2300      	movs	r3, #0
 800e370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e374:	2300      	movs	r3, #0
 800e376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e37a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e37e:	f003 030f 	and.w	r3, r3, #15
 800e382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d10f      	bne.n	800e3ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e392:	f003 0320 	and.w	r3, r3, #32
 800e396:	2b00      	cmp	r3, #0
 800e398:	d009      	beq.n	800e3ae <HAL_UART_IRQHandler+0x66>
 800e39a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e39e:	f003 0320 	and.w	r3, r3, #32
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d003      	beq.n	800e3ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 fbf2 	bl	800eb90 <UART_Receive_IT>
      return;
 800e3ac:	e25b      	b.n	800e866 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e3ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f000 80de 	beq.w	800e574 <HAL_UART_IRQHandler+0x22c>
 800e3b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3bc:	f003 0301 	and.w	r3, r3, #1
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d106      	bne.n	800e3d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e3c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 80d1 	beq.w	800e574 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3d6:	f003 0301 	and.w	r3, r3, #1
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00b      	beq.n	800e3f6 <HAL_UART_IRQHandler+0xae>
 800e3de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d005      	beq.n	800e3f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ee:	f043 0201 	orr.w	r2, r3, #1
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3fa:	f003 0304 	and.w	r3, r3, #4
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00b      	beq.n	800e41a <HAL_UART_IRQHandler+0xd2>
 800e402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e406:	f003 0301 	and.w	r3, r3, #1
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d005      	beq.n	800e41a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e412:	f043 0202 	orr.w	r2, r3, #2
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e41e:	f003 0302 	and.w	r3, r3, #2
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00b      	beq.n	800e43e <HAL_UART_IRQHandler+0xf6>
 800e426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e42a:	f003 0301 	and.w	r3, r3, #1
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d005      	beq.n	800e43e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e436:	f043 0204 	orr.w	r2, r3, #4
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e442:	f003 0308 	and.w	r3, r3, #8
 800e446:	2b00      	cmp	r3, #0
 800e448:	d011      	beq.n	800e46e <HAL_UART_IRQHandler+0x126>
 800e44a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e44e:	f003 0320 	and.w	r3, r3, #32
 800e452:	2b00      	cmp	r3, #0
 800e454:	d105      	bne.n	800e462 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e45a:	f003 0301 	and.w	r3, r3, #1
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d005      	beq.n	800e46e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e466:	f043 0208 	orr.w	r2, r3, #8
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e472:	2b00      	cmp	r3, #0
 800e474:	f000 81f2 	beq.w	800e85c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e47c:	f003 0320 	and.w	r3, r3, #32
 800e480:	2b00      	cmp	r3, #0
 800e482:	d008      	beq.n	800e496 <HAL_UART_IRQHandler+0x14e>
 800e484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e488:	f003 0320 	and.w	r3, r3, #32
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fb7d 	bl	800eb90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	695b      	ldr	r3, [r3, #20]
 800e49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4a0:	2b40      	cmp	r3, #64	; 0x40
 800e4a2:	bf0c      	ite	eq
 800e4a4:	2301      	moveq	r3, #1
 800e4a6:	2300      	movne	r3, #0
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b2:	f003 0308 	and.w	r3, r3, #8
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d103      	bne.n	800e4c2 <HAL_UART_IRQHandler+0x17a>
 800e4ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d04f      	beq.n	800e562 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 fa85 	bl	800e9d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	695b      	ldr	r3, [r3, #20]
 800e4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4d2:	2b40      	cmp	r3, #64	; 0x40
 800e4d4:	d141      	bne.n	800e55a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	3314      	adds	r3, #20
 800e4dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e4e4:	e853 3f00 	ldrex	r3, [r3]
 800e4e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e4ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e4f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	3314      	adds	r3, #20
 800e4fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e502:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e50e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e512:	e841 2300 	strex	r3, r2, [r1]
 800e516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e51a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1d9      	bne.n	800e4d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e526:	2b00      	cmp	r3, #0
 800e528:	d013      	beq.n	800e552 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e52e:	4a7e      	ldr	r2, [pc, #504]	; (800e728 <HAL_UART_IRQHandler+0x3e0>)
 800e530:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e536:	4618      	mov	r0, r3
 800e538:	f7fe f9cf 	bl	800c8da <HAL_DMA_Abort_IT>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d016      	beq.n	800e570 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e54c:	4610      	mov	r0, r2
 800e54e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e550:	e00e      	b.n	800e570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 f994 	bl	800e880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e558:	e00a      	b.n	800e570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 f990 	bl	800e880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e560:	e006      	b.n	800e570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f000 f98c 	bl	800e880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800e56e:	e175      	b.n	800e85c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e570:	bf00      	nop
    return;
 800e572:	e173      	b.n	800e85c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e578:	2b01      	cmp	r3, #1
 800e57a:	f040 814f 	bne.w	800e81c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e582:	f003 0310 	and.w	r3, r3, #16
 800e586:	2b00      	cmp	r3, #0
 800e588:	f000 8148 	beq.w	800e81c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e58c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e590:	f003 0310 	and.w	r3, r3, #16
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 8141 	beq.w	800e81c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e59a:	2300      	movs	r3, #0
 800e59c:	60bb      	str	r3, [r7, #8]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	60bb      	str	r3, [r7, #8]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	60bb      	str	r3, [r7, #8]
 800e5ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	695b      	ldr	r3, [r3, #20]
 800e5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ba:	2b40      	cmp	r3, #64	; 0x40
 800e5bc:	f040 80b6 	bne.w	800e72c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e5cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f000 8145 	beq.w	800e860 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e5da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	f080 813e 	bcs.w	800e860 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e5ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5f0:	69db      	ldr	r3, [r3, #28]
 800e5f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5f6:	f000 8088 	beq.w	800e70a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	330c      	adds	r3, #12
 800e600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e608:	e853 3f00 	ldrex	r3, [r3]
 800e60c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e610:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	330c      	adds	r3, #12
 800e622:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e626:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e62a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e632:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e636:	e841 2300 	strex	r3, r2, [r1]
 800e63a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e63e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1d9      	bne.n	800e5fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	3314      	adds	r3, #20
 800e64c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e650:	e853 3f00 	ldrex	r3, [r3]
 800e654:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e658:	f023 0301 	bic.w	r3, r3, #1
 800e65c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	3314      	adds	r3, #20
 800e666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e66a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e66e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e670:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e672:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e676:	e841 2300 	strex	r3, r2, [r1]
 800e67a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e67c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1e1      	bne.n	800e646 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3314      	adds	r3, #20
 800e688:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e68a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e68c:	e853 3f00 	ldrex	r3, [r3]
 800e690:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	3314      	adds	r3, #20
 800e6a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e6a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e6a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e6ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e6ae:	e841 2300 	strex	r3, r2, [r1]
 800e6b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e6b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1e3      	bne.n	800e682 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2220      	movs	r2, #32
 800e6be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	330c      	adds	r3, #12
 800e6ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6d2:	e853 3f00 	ldrex	r3, [r3]
 800e6d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e6d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6da:	f023 0310 	bic.w	r3, r3, #16
 800e6de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	330c      	adds	r3, #12
 800e6e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e6ec:	65ba      	str	r2, [r7, #88]	; 0x58
 800e6ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e6f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6f4:	e841 2300 	strex	r3, r2, [r1]
 800e6f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d1e3      	bne.n	800e6c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe f878 	bl	800c7fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2202      	movs	r2, #2
 800e70e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e718:	b29b      	uxth	r3, r3
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	4619      	mov	r1, r3
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 f8b7 	bl	800e894 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e726:	e09b      	b.n	800e860 <HAL_UART_IRQHandler+0x518>
 800e728:	0800ea99 	.word	0x0800ea99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e734:	b29b      	uxth	r3, r3
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e740:	b29b      	uxth	r3, r3
 800e742:	2b00      	cmp	r3, #0
 800e744:	f000 808e 	beq.w	800e864 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800e748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f000 8089 	beq.w	800e864 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	330c      	adds	r3, #12
 800e758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75c:	e853 3f00 	ldrex	r3, [r3]
 800e760:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e768:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	330c      	adds	r3, #12
 800e772:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e776:	647a      	str	r2, [r7, #68]	; 0x44
 800e778:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e77a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e77c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e77e:	e841 2300 	strex	r3, r2, [r1]
 800e782:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1e3      	bne.n	800e752 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	3314      	adds	r3, #20
 800e790:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e794:	e853 3f00 	ldrex	r3, [r3]
 800e798:	623b      	str	r3, [r7, #32]
   return(result);
 800e79a:	6a3b      	ldr	r3, [r7, #32]
 800e79c:	f023 0301 	bic.w	r3, r3, #1
 800e7a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	3314      	adds	r3, #20
 800e7aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e7ae:	633a      	str	r2, [r7, #48]	; 0x30
 800e7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7b6:	e841 2300 	strex	r3, r2, [r1]
 800e7ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1e3      	bne.n	800e78a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2220      	movs	r2, #32
 800e7c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	330c      	adds	r3, #12
 800e7d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	e853 3f00 	ldrex	r3, [r3]
 800e7de:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f023 0310 	bic.w	r3, r3, #16
 800e7e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	330c      	adds	r3, #12
 800e7f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e7f4:	61fa      	str	r2, [r7, #28]
 800e7f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f8:	69b9      	ldr	r1, [r7, #24]
 800e7fa:	69fa      	ldr	r2, [r7, #28]
 800e7fc:	e841 2300 	strex	r3, r2, [r1]
 800e800:	617b      	str	r3, [r7, #20]
   return(result);
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d1e3      	bne.n	800e7d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2202      	movs	r2, #2
 800e80c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e80e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e812:	4619      	mov	r1, r3
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 f83d 	bl	800e894 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e81a:	e023      	b.n	800e864 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e824:	2b00      	cmp	r3, #0
 800e826:	d009      	beq.n	800e83c <HAL_UART_IRQHandler+0x4f4>
 800e828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e830:	2b00      	cmp	r3, #0
 800e832:	d003      	beq.n	800e83c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 f943 	bl	800eac0 <UART_Transmit_IT>
    return;
 800e83a:	e014      	b.n	800e866 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e83c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00e      	beq.n	800e866 <HAL_UART_IRQHandler+0x51e>
 800e848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e850:	2b00      	cmp	r3, #0
 800e852:	d008      	beq.n	800e866 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 f983 	bl	800eb60 <UART_EndTransmit_IT>
    return;
 800e85a:	e004      	b.n	800e866 <HAL_UART_IRQHandler+0x51e>
    return;
 800e85c:	bf00      	nop
 800e85e:	e002      	b.n	800e866 <HAL_UART_IRQHandler+0x51e>
      return;
 800e860:	bf00      	nop
 800e862:	e000      	b.n	800e866 <HAL_UART_IRQHandler+0x51e>
      return;
 800e864:	bf00      	nop
  }
}
 800e866:	37e8      	adds	r7, #232	; 0xe8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e874:	bf00      	nop
 800e876:	370c      	adds	r7, #12
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr

0800e880 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e880:	b480      	push	{r7}
 800e882:	b083      	sub	sp, #12
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e888:	bf00      	nop
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	460b      	mov	r3, r1
 800e89e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e8a0:	bf00      	nop
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b086      	sub	sp, #24
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	603b      	str	r3, [r7, #0]
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8bc:	e03b      	b.n	800e936 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8be:	6a3b      	ldr	r3, [r7, #32]
 800e8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c4:	d037      	beq.n	800e936 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8c6:	f7fd f927 	bl	800bb18 <HAL_GetTick>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	1ad3      	subs	r3, r2, r3
 800e8d0:	6a3a      	ldr	r2, [r7, #32]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d302      	bcc.n	800e8dc <UART_WaitOnFlagUntilTimeout+0x30>
 800e8d6:	6a3b      	ldr	r3, [r7, #32]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e8dc:	2303      	movs	r3, #3
 800e8de:	e03a      	b.n	800e956 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	f003 0304 	and.w	r3, r3, #4
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d023      	beq.n	800e936 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	2b80      	cmp	r3, #128	; 0x80
 800e8f2:	d020      	beq.n	800e936 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	2b40      	cmp	r3, #64	; 0x40
 800e8f8:	d01d      	beq.n	800e936 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f003 0308 	and.w	r3, r3, #8
 800e904:	2b08      	cmp	r3, #8
 800e906:	d116      	bne.n	800e936 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800e908:	2300      	movs	r3, #0
 800e90a:	617b      	str	r3, [r7, #20]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	617b      	str	r3, [r7, #20]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	617b      	str	r3, [r7, #20]
 800e91c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f000 f857 	bl	800e9d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2208      	movs	r2, #8
 800e928:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800e932:	2301      	movs	r3, #1
 800e934:	e00f      	b.n	800e956 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	4013      	ands	r3, r2
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	429a      	cmp	r2, r3
 800e944:	bf0c      	ite	eq
 800e946:	2301      	moveq	r3, #1
 800e948:	2300      	movne	r3, #0
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	461a      	mov	r2, r3
 800e94e:	79fb      	ldrb	r3, [r7, #7]
 800e950:	429a      	cmp	r2, r3
 800e952:	d0b4      	beq.n	800e8be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e954:	2300      	movs	r3, #0
}
 800e956:	4618      	mov	r0, r3
 800e958:	3718      	adds	r7, #24
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e95e:	b480      	push	{r7}
 800e960:	b085      	sub	sp, #20
 800e962:	af00      	add	r7, sp, #0
 800e964:	60f8      	str	r0, [r7, #12]
 800e966:	60b9      	str	r1, [r7, #8]
 800e968:	4613      	mov	r3, r2
 800e96a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	68ba      	ldr	r2, [r7, #8]
 800e970:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	88fa      	ldrh	r2, [r7, #6]
 800e976:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	88fa      	ldrh	r2, [r7, #6]
 800e97c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2200      	movs	r2, #0
 800e982:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2222      	movs	r2, #34	; 0x22
 800e988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	691b      	ldr	r3, [r3, #16]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d007      	beq.n	800e9a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	68da      	ldr	r2, [r3, #12]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e9a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	695a      	ldr	r2, [r3, #20]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f042 0201 	orr.w	r2, r2, #1
 800e9b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	68da      	ldr	r2, [r3, #12]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f042 0220 	orr.w	r2, r2, #32
 800e9c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr

0800e9d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e9d2:	b480      	push	{r7}
 800e9d4:	b095      	sub	sp, #84	; 0x54
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	330c      	adds	r3, #12
 800e9e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e4:	e853 3f00 	ldrex	r3, [r3]
 800e9e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e9f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	330c      	adds	r3, #12
 800e9f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e9fa:	643a      	str	r2, [r7, #64]	; 0x40
 800e9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea02:	e841 2300 	strex	r3, r2, [r1]
 800ea06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1e5      	bne.n	800e9da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	3314      	adds	r3, #20
 800ea14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea16:	6a3b      	ldr	r3, [r7, #32]
 800ea18:	e853 3f00 	ldrex	r3, [r3]
 800ea1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	f023 0301 	bic.w	r3, r3, #1
 800ea24:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	3314      	adds	r3, #20
 800ea2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea36:	e841 2300 	strex	r3, r2, [r1]
 800ea3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1e5      	bne.n	800ea0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d119      	bne.n	800ea7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	330c      	adds	r3, #12
 800ea50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	e853 3f00 	ldrex	r3, [r3]
 800ea58:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	f023 0310 	bic.w	r3, r3, #16
 800ea60:	647b      	str	r3, [r7, #68]	; 0x44
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	330c      	adds	r3, #12
 800ea68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea6a:	61ba      	str	r2, [r7, #24]
 800ea6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6e:	6979      	ldr	r1, [r7, #20]
 800ea70:	69ba      	ldr	r2, [r7, #24]
 800ea72:	e841 2300 	strex	r3, r2, [r1]
 800ea76:	613b      	str	r3, [r7, #16]
   return(result);
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1e5      	bne.n	800ea4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2220      	movs	r2, #32
 800ea82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ea8c:	bf00      	nop
 800ea8e:	3754      	adds	r7, #84	; 0x54
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2200      	movs	r2, #0
 800eab0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f7ff fee4 	bl	800e880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eab8:	bf00      	nop
 800eaba:	3710      	adds	r7, #16
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b085      	sub	sp, #20
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	2b21      	cmp	r3, #33	; 0x21
 800ead2:	d13e      	bne.n	800eb52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eadc:	d114      	bne.n	800eb08 <UART_Transmit_IT+0x48>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	691b      	ldr	r3, [r3, #16]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d110      	bne.n	800eb08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6a1b      	ldr	r3, [r3, #32]
 800eaea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	881b      	ldrh	r3, [r3, #0]
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eafa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6a1b      	ldr	r3, [r3, #32]
 800eb00:	1c9a      	adds	r2, r3, #2
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	621a      	str	r2, [r3, #32]
 800eb06:	e008      	b.n	800eb1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6a1b      	ldr	r3, [r3, #32]
 800eb0c:	1c59      	adds	r1, r3, #1
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	6211      	str	r1, [r2, #32]
 800eb12:	781a      	ldrb	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	3b01      	subs	r3, #1
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	4619      	mov	r1, r3
 800eb28:	84d1      	strh	r1, [r2, #38]	; 0x26
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d10f      	bne.n	800eb4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	68da      	ldr	r2, [r3, #12]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	68da      	ldr	r2, [r3, #12]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	e000      	b.n	800eb54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800eb52:	2302      	movs	r3, #2
  }
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3714      	adds	r7, #20
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	68da      	ldr	r2, [r3, #12]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2220      	movs	r2, #32
 800eb7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7ff fe73 	bl	800e86c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b08c      	sub	sp, #48	; 0x30
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b22      	cmp	r3, #34	; 0x22
 800eba2:	f040 80ae 	bne.w	800ed02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebae:	d117      	bne.n	800ebe0 <UART_Receive_IT+0x50>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d113      	bne.n	800ebe0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd8:	1c9a      	adds	r2, r3, #2
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	629a      	str	r2, [r3, #40]	; 0x28
 800ebde:	e026      	b.n	800ec2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	689b      	ldr	r3, [r3, #8]
 800ebee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebf2:	d007      	beq.n	800ec04 <UART_Receive_IT+0x74>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	689b      	ldr	r3, [r3, #8]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d10a      	bne.n	800ec12 <UART_Receive_IT+0x82>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0e:	701a      	strb	r2, [r3, #0]
 800ec10:	e008      	b.n	800ec24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec1e:	b2da      	uxtb	r2, r3
 800ec20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec28:	1c5a      	adds	r2, r3, #1
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	3b01      	subs	r3, #1
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d15d      	bne.n	800ecfe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	68da      	ldr	r2, [r3, #12]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f022 0220 	bic.w	r2, r2, #32
 800ec50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68da      	ldr	r2, [r3, #12]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ec60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	695a      	ldr	r2, [r3, #20]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f022 0201 	bic.w	r2, r2, #1
 800ec70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2220      	movs	r2, #32
 800ec76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d135      	bne.n	800ecf4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	330c      	adds	r3, #12
 800ec94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	e853 3f00 	ldrex	r3, [r3]
 800ec9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	f023 0310 	bic.w	r3, r3, #16
 800eca4:	627b      	str	r3, [r7, #36]	; 0x24
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	330c      	adds	r3, #12
 800ecac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecae:	623a      	str	r2, [r7, #32]
 800ecb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb2:	69f9      	ldr	r1, [r7, #28]
 800ecb4:	6a3a      	ldr	r2, [r7, #32]
 800ecb6:	e841 2300 	strex	r3, r2, [r1]
 800ecba:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d1e5      	bne.n	800ec8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f003 0310 	and.w	r3, r3, #16
 800eccc:	2b10      	cmp	r3, #16
 800ecce:	d10a      	bne.n	800ece6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	60fb      	str	r3, [r7, #12]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	60fb      	str	r3, [r7, #12]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	60fb      	str	r3, [r7, #12]
 800ece4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ecea:	4619      	mov	r1, r3
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7ff fdd1 	bl	800e894 <HAL_UARTEx_RxEventCallback>
 800ecf2:	e002      	b.n	800ecfa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7fc f8d9 	bl	800aeac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	e002      	b.n	800ed04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	e000      	b.n	800ed04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ed02:	2302      	movs	r3, #2
  }
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3730      	adds	r7, #48	; 0x30
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed10:	b0c0      	sub	sp, #256	; 0x100
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	691b      	ldr	r3, [r3, #16]
 800ed20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ed24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed28:	68d9      	ldr	r1, [r3, #12]
 800ed2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	ea40 0301 	orr.w	r3, r0, r1
 800ed34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ed36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed3a:	689a      	ldr	r2, [r3, #8]
 800ed3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed40:	691b      	ldr	r3, [r3, #16]
 800ed42:	431a      	orrs	r2, r3
 800ed44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed48:	695b      	ldr	r3, [r3, #20]
 800ed4a:	431a      	orrs	r2, r3
 800ed4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed50:	69db      	ldr	r3, [r3, #28]
 800ed52:	4313      	orrs	r3, r2
 800ed54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ed58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ed64:	f021 010c 	bic.w	r1, r1, #12
 800ed68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ed72:	430b      	orrs	r3, r1
 800ed74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ed76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ed82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed86:	6999      	ldr	r1, [r3, #24]
 800ed88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	ea40 0301 	orr.w	r3, r0, r1
 800ed92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ed94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	4b8f      	ldr	r3, [pc, #572]	; (800efd8 <UART_SetConfig+0x2cc>)
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d005      	beq.n	800edac <UART_SetConfig+0xa0>
 800eda0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	4b8d      	ldr	r3, [pc, #564]	; (800efdc <UART_SetConfig+0x2d0>)
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d104      	bne.n	800edb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800edac:	f7fe fbe2 	bl	800d574 <HAL_RCC_GetPCLK2Freq>
 800edb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800edb4:	e003      	b.n	800edbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800edb6:	f7fe fbc9 	bl	800d54c <HAL_RCC_GetPCLK1Freq>
 800edba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800edbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edc2:	69db      	ldr	r3, [r3, #28]
 800edc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edc8:	f040 810c 	bne.w	800efe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800edcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800edd0:	2200      	movs	r2, #0
 800edd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800edd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800edda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800edde:	4622      	mov	r2, r4
 800ede0:	462b      	mov	r3, r5
 800ede2:	1891      	adds	r1, r2, r2
 800ede4:	65b9      	str	r1, [r7, #88]	; 0x58
 800ede6:	415b      	adcs	r3, r3
 800ede8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800edee:	4621      	mov	r1, r4
 800edf0:	eb12 0801 	adds.w	r8, r2, r1
 800edf4:	4629      	mov	r1, r5
 800edf6:	eb43 0901 	adc.w	r9, r3, r1
 800edfa:	f04f 0200 	mov.w	r2, #0
 800edfe:	f04f 0300 	mov.w	r3, #0
 800ee02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ee06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ee0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ee0e:	4690      	mov	r8, r2
 800ee10:	4699      	mov	r9, r3
 800ee12:	4623      	mov	r3, r4
 800ee14:	eb18 0303 	adds.w	r3, r8, r3
 800ee18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ee1c:	462b      	mov	r3, r5
 800ee1e:	eb49 0303 	adc.w	r3, r9, r3
 800ee22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ee26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ee32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ee36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	18db      	adds	r3, r3, r3
 800ee3e:	653b      	str	r3, [r7, #80]	; 0x50
 800ee40:	4613      	mov	r3, r2
 800ee42:	eb42 0303 	adc.w	r3, r2, r3
 800ee46:	657b      	str	r3, [r7, #84]	; 0x54
 800ee48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ee4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ee50:	f7f1 feda 	bl	8000c08 <__aeabi_uldivmod>
 800ee54:	4602      	mov	r2, r0
 800ee56:	460b      	mov	r3, r1
 800ee58:	4b61      	ldr	r3, [pc, #388]	; (800efe0 <UART_SetConfig+0x2d4>)
 800ee5a:	fba3 2302 	umull	r2, r3, r3, r2
 800ee5e:	095b      	lsrs	r3, r3, #5
 800ee60:	011c      	lsls	r4, r3, #4
 800ee62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ee66:	2200      	movs	r2, #0
 800ee68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ee6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ee70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ee74:	4642      	mov	r2, r8
 800ee76:	464b      	mov	r3, r9
 800ee78:	1891      	adds	r1, r2, r2
 800ee7a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ee7c:	415b      	adcs	r3, r3
 800ee7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ee84:	4641      	mov	r1, r8
 800ee86:	eb12 0a01 	adds.w	sl, r2, r1
 800ee8a:	4649      	mov	r1, r9
 800ee8c:	eb43 0b01 	adc.w	fp, r3, r1
 800ee90:	f04f 0200 	mov.w	r2, #0
 800ee94:	f04f 0300 	mov.w	r3, #0
 800ee98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ee9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800eea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eea4:	4692      	mov	sl, r2
 800eea6:	469b      	mov	fp, r3
 800eea8:	4643      	mov	r3, r8
 800eeaa:	eb1a 0303 	adds.w	r3, sl, r3
 800eeae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eeb2:	464b      	mov	r3, r9
 800eeb4:	eb4b 0303 	adc.w	r3, fp, r3
 800eeb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800eebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eec8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800eecc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800eed0:	460b      	mov	r3, r1
 800eed2:	18db      	adds	r3, r3, r3
 800eed4:	643b      	str	r3, [r7, #64]	; 0x40
 800eed6:	4613      	mov	r3, r2
 800eed8:	eb42 0303 	adc.w	r3, r2, r3
 800eedc:	647b      	str	r3, [r7, #68]	; 0x44
 800eede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800eee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800eee6:	f7f1 fe8f 	bl	8000c08 <__aeabi_uldivmod>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	4611      	mov	r1, r2
 800eef0:	4b3b      	ldr	r3, [pc, #236]	; (800efe0 <UART_SetConfig+0x2d4>)
 800eef2:	fba3 2301 	umull	r2, r3, r3, r1
 800eef6:	095b      	lsrs	r3, r3, #5
 800eef8:	2264      	movs	r2, #100	; 0x64
 800eefa:	fb02 f303 	mul.w	r3, r2, r3
 800eefe:	1acb      	subs	r3, r1, r3
 800ef00:	00db      	lsls	r3, r3, #3
 800ef02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ef06:	4b36      	ldr	r3, [pc, #216]	; (800efe0 <UART_SetConfig+0x2d4>)
 800ef08:	fba3 2302 	umull	r2, r3, r3, r2
 800ef0c:	095b      	lsrs	r3, r3, #5
 800ef0e:	005b      	lsls	r3, r3, #1
 800ef10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ef14:	441c      	add	r4, r3
 800ef16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ef20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ef24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ef28:	4642      	mov	r2, r8
 800ef2a:	464b      	mov	r3, r9
 800ef2c:	1891      	adds	r1, r2, r2
 800ef2e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ef30:	415b      	adcs	r3, r3
 800ef32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ef38:	4641      	mov	r1, r8
 800ef3a:	1851      	adds	r1, r2, r1
 800ef3c:	6339      	str	r1, [r7, #48]	; 0x30
 800ef3e:	4649      	mov	r1, r9
 800ef40:	414b      	adcs	r3, r1
 800ef42:	637b      	str	r3, [r7, #52]	; 0x34
 800ef44:	f04f 0200 	mov.w	r2, #0
 800ef48:	f04f 0300 	mov.w	r3, #0
 800ef4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ef50:	4659      	mov	r1, fp
 800ef52:	00cb      	lsls	r3, r1, #3
 800ef54:	4651      	mov	r1, sl
 800ef56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ef5a:	4651      	mov	r1, sl
 800ef5c:	00ca      	lsls	r2, r1, #3
 800ef5e:	4610      	mov	r0, r2
 800ef60:	4619      	mov	r1, r3
 800ef62:	4603      	mov	r3, r0
 800ef64:	4642      	mov	r2, r8
 800ef66:	189b      	adds	r3, r3, r2
 800ef68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ef6c:	464b      	mov	r3, r9
 800ef6e:	460a      	mov	r2, r1
 800ef70:	eb42 0303 	adc.w	r3, r2, r3
 800ef74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ef78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ef84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ef88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	18db      	adds	r3, r3, r3
 800ef90:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef92:	4613      	mov	r3, r2
 800ef94:	eb42 0303 	adc.w	r3, r2, r3
 800ef98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ef9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800efa2:	f7f1 fe31 	bl	8000c08 <__aeabi_uldivmod>
 800efa6:	4602      	mov	r2, r0
 800efa8:	460b      	mov	r3, r1
 800efaa:	4b0d      	ldr	r3, [pc, #52]	; (800efe0 <UART_SetConfig+0x2d4>)
 800efac:	fba3 1302 	umull	r1, r3, r3, r2
 800efb0:	095b      	lsrs	r3, r3, #5
 800efb2:	2164      	movs	r1, #100	; 0x64
 800efb4:	fb01 f303 	mul.w	r3, r1, r3
 800efb8:	1ad3      	subs	r3, r2, r3
 800efba:	00db      	lsls	r3, r3, #3
 800efbc:	3332      	adds	r3, #50	; 0x32
 800efbe:	4a08      	ldr	r2, [pc, #32]	; (800efe0 <UART_SetConfig+0x2d4>)
 800efc0:	fba2 2303 	umull	r2, r3, r2, r3
 800efc4:	095b      	lsrs	r3, r3, #5
 800efc6:	f003 0207 	and.w	r2, r3, #7
 800efca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4422      	add	r2, r4
 800efd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800efd4:	e106      	b.n	800f1e4 <UART_SetConfig+0x4d8>
 800efd6:	bf00      	nop
 800efd8:	40011000 	.word	0x40011000
 800efdc:	40011400 	.word	0x40011400
 800efe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800efe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800efe8:	2200      	movs	r2, #0
 800efea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800efee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800eff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800eff6:	4642      	mov	r2, r8
 800eff8:	464b      	mov	r3, r9
 800effa:	1891      	adds	r1, r2, r2
 800effc:	6239      	str	r1, [r7, #32]
 800effe:	415b      	adcs	r3, r3
 800f000:	627b      	str	r3, [r7, #36]	; 0x24
 800f002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f006:	4641      	mov	r1, r8
 800f008:	1854      	adds	r4, r2, r1
 800f00a:	4649      	mov	r1, r9
 800f00c:	eb43 0501 	adc.w	r5, r3, r1
 800f010:	f04f 0200 	mov.w	r2, #0
 800f014:	f04f 0300 	mov.w	r3, #0
 800f018:	00eb      	lsls	r3, r5, #3
 800f01a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f01e:	00e2      	lsls	r2, r4, #3
 800f020:	4614      	mov	r4, r2
 800f022:	461d      	mov	r5, r3
 800f024:	4643      	mov	r3, r8
 800f026:	18e3      	adds	r3, r4, r3
 800f028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f02c:	464b      	mov	r3, r9
 800f02e:	eb45 0303 	adc.w	r3, r5, r3
 800f032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f046:	f04f 0200 	mov.w	r2, #0
 800f04a:	f04f 0300 	mov.w	r3, #0
 800f04e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f052:	4629      	mov	r1, r5
 800f054:	008b      	lsls	r3, r1, #2
 800f056:	4621      	mov	r1, r4
 800f058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f05c:	4621      	mov	r1, r4
 800f05e:	008a      	lsls	r2, r1, #2
 800f060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f064:	f7f1 fdd0 	bl	8000c08 <__aeabi_uldivmod>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4b60      	ldr	r3, [pc, #384]	; (800f1f0 <UART_SetConfig+0x4e4>)
 800f06e:	fba3 2302 	umull	r2, r3, r3, r2
 800f072:	095b      	lsrs	r3, r3, #5
 800f074:	011c      	lsls	r4, r3, #4
 800f076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f07a:	2200      	movs	r2, #0
 800f07c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f080:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800f088:	4642      	mov	r2, r8
 800f08a:	464b      	mov	r3, r9
 800f08c:	1891      	adds	r1, r2, r2
 800f08e:	61b9      	str	r1, [r7, #24]
 800f090:	415b      	adcs	r3, r3
 800f092:	61fb      	str	r3, [r7, #28]
 800f094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f098:	4641      	mov	r1, r8
 800f09a:	1851      	adds	r1, r2, r1
 800f09c:	6139      	str	r1, [r7, #16]
 800f09e:	4649      	mov	r1, r9
 800f0a0:	414b      	adcs	r3, r1
 800f0a2:	617b      	str	r3, [r7, #20]
 800f0a4:	f04f 0200 	mov.w	r2, #0
 800f0a8:	f04f 0300 	mov.w	r3, #0
 800f0ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f0b0:	4659      	mov	r1, fp
 800f0b2:	00cb      	lsls	r3, r1, #3
 800f0b4:	4651      	mov	r1, sl
 800f0b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f0ba:	4651      	mov	r1, sl
 800f0bc:	00ca      	lsls	r2, r1, #3
 800f0be:	4610      	mov	r0, r2
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	4642      	mov	r2, r8
 800f0c6:	189b      	adds	r3, r3, r2
 800f0c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f0cc:	464b      	mov	r3, r9
 800f0ce:	460a      	mov	r2, r1
 800f0d0:	eb42 0303 	adc.w	r3, r2, r3
 800f0d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800f0e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f0e4:	f04f 0200 	mov.w	r2, #0
 800f0e8:	f04f 0300 	mov.w	r3, #0
 800f0ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f0f0:	4649      	mov	r1, r9
 800f0f2:	008b      	lsls	r3, r1, #2
 800f0f4:	4641      	mov	r1, r8
 800f0f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f0fa:	4641      	mov	r1, r8
 800f0fc:	008a      	lsls	r2, r1, #2
 800f0fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f102:	f7f1 fd81 	bl	8000c08 <__aeabi_uldivmod>
 800f106:	4602      	mov	r2, r0
 800f108:	460b      	mov	r3, r1
 800f10a:	4611      	mov	r1, r2
 800f10c:	4b38      	ldr	r3, [pc, #224]	; (800f1f0 <UART_SetConfig+0x4e4>)
 800f10e:	fba3 2301 	umull	r2, r3, r3, r1
 800f112:	095b      	lsrs	r3, r3, #5
 800f114:	2264      	movs	r2, #100	; 0x64
 800f116:	fb02 f303 	mul.w	r3, r2, r3
 800f11a:	1acb      	subs	r3, r1, r3
 800f11c:	011b      	lsls	r3, r3, #4
 800f11e:	3332      	adds	r3, #50	; 0x32
 800f120:	4a33      	ldr	r2, [pc, #204]	; (800f1f0 <UART_SetConfig+0x4e4>)
 800f122:	fba2 2303 	umull	r2, r3, r2, r3
 800f126:	095b      	lsrs	r3, r3, #5
 800f128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f12c:	441c      	add	r4, r3
 800f12e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f132:	2200      	movs	r2, #0
 800f134:	673b      	str	r3, [r7, #112]	; 0x70
 800f136:	677a      	str	r2, [r7, #116]	; 0x74
 800f138:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f13c:	4642      	mov	r2, r8
 800f13e:	464b      	mov	r3, r9
 800f140:	1891      	adds	r1, r2, r2
 800f142:	60b9      	str	r1, [r7, #8]
 800f144:	415b      	adcs	r3, r3
 800f146:	60fb      	str	r3, [r7, #12]
 800f148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f14c:	4641      	mov	r1, r8
 800f14e:	1851      	adds	r1, r2, r1
 800f150:	6039      	str	r1, [r7, #0]
 800f152:	4649      	mov	r1, r9
 800f154:	414b      	adcs	r3, r1
 800f156:	607b      	str	r3, [r7, #4]
 800f158:	f04f 0200 	mov.w	r2, #0
 800f15c:	f04f 0300 	mov.w	r3, #0
 800f160:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f164:	4659      	mov	r1, fp
 800f166:	00cb      	lsls	r3, r1, #3
 800f168:	4651      	mov	r1, sl
 800f16a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f16e:	4651      	mov	r1, sl
 800f170:	00ca      	lsls	r2, r1, #3
 800f172:	4610      	mov	r0, r2
 800f174:	4619      	mov	r1, r3
 800f176:	4603      	mov	r3, r0
 800f178:	4642      	mov	r2, r8
 800f17a:	189b      	adds	r3, r3, r2
 800f17c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f17e:	464b      	mov	r3, r9
 800f180:	460a      	mov	r2, r1
 800f182:	eb42 0303 	adc.w	r3, r2, r3
 800f186:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	663b      	str	r3, [r7, #96]	; 0x60
 800f192:	667a      	str	r2, [r7, #100]	; 0x64
 800f194:	f04f 0200 	mov.w	r2, #0
 800f198:	f04f 0300 	mov.w	r3, #0
 800f19c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f1a0:	4649      	mov	r1, r9
 800f1a2:	008b      	lsls	r3, r1, #2
 800f1a4:	4641      	mov	r1, r8
 800f1a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f1aa:	4641      	mov	r1, r8
 800f1ac:	008a      	lsls	r2, r1, #2
 800f1ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f1b2:	f7f1 fd29 	bl	8000c08 <__aeabi_uldivmod>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	4b0d      	ldr	r3, [pc, #52]	; (800f1f0 <UART_SetConfig+0x4e4>)
 800f1bc:	fba3 1302 	umull	r1, r3, r3, r2
 800f1c0:	095b      	lsrs	r3, r3, #5
 800f1c2:	2164      	movs	r1, #100	; 0x64
 800f1c4:	fb01 f303 	mul.w	r3, r1, r3
 800f1c8:	1ad3      	subs	r3, r2, r3
 800f1ca:	011b      	lsls	r3, r3, #4
 800f1cc:	3332      	adds	r3, #50	; 0x32
 800f1ce:	4a08      	ldr	r2, [pc, #32]	; (800f1f0 <UART_SetConfig+0x4e4>)
 800f1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f1d4:	095b      	lsrs	r3, r3, #5
 800f1d6:	f003 020f 	and.w	r2, r3, #15
 800f1da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4422      	add	r2, r4
 800f1e2:	609a      	str	r2, [r3, #8]
}
 800f1e4:	bf00      	nop
 800f1e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1f0:	51eb851f 	.word	0x51eb851f

0800f1f4 <_ZNSaIcEC1Ev>:
 800f1f4:	4770      	bx	lr

0800f1f6 <_ZNSaIcEC1ERKS_>:
 800f1f6:	4770      	bx	lr

0800f1f8 <_ZNSaIcED1Ev>:
 800f1f8:	4770      	bx	lr

0800f1fa <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800f1fa:	b10a      	cbz	r2, 800f200 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800f1fc:	f001 bc4b 	b.w	8010a96 <memcpy>
 800f200:	4770      	bx	lr
	...

0800f204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800f204:	b508      	push	{r3, lr}
 800f206:	680b      	ldr	r3, [r1, #0]
 800f208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f20c:	d302      	bcc.n	800f214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800f20e:	480d      	ldr	r0, [pc, #52]	; (800f244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800f210:	f000 fa6a 	bl	800f6e8 <_ZSt20__throw_length_errorPKc>
 800f214:	4293      	cmp	r3, r2
 800f216:	d90b      	bls.n	800f230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800f218:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800f21c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800f220:	d206      	bcs.n	800f230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800f222:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800f226:	bf2a      	itet	cs
 800f228:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800f22c:	6008      	strcc	r0, [r1, #0]
 800f22e:	600b      	strcs	r3, [r1, #0]
 800f230:	6808      	ldr	r0, [r1, #0]
 800f232:	3001      	adds	r0, #1
 800f234:	d501      	bpl.n	800f23a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800f236:	f000 fa51 	bl	800f6dc <_ZSt17__throw_bad_allocv>
 800f23a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f23e:	f000 ba3c 	b.w	800f6ba <_Znwj>
 800f242:	bf00      	nop
 800f244:	08013930 	.word	0x08013930

0800f248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800f248:	f850 3b08 	ldr.w	r3, [r0], #8
 800f24c:	4283      	cmp	r3, r0
 800f24e:	d002      	beq.n	800f256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800f250:	4618      	mov	r0, r3
 800f252:	f000 ba30 	b.w	800f6b6 <_ZdlPv>
 800f256:	4770      	bx	lr

0800f258 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800f258:	6840      	ldr	r0, [r0, #4]
 800f25a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800f25e:	3901      	subs	r1, #1
 800f260:	1a09      	subs	r1, r1, r0
 800f262:	4291      	cmp	r1, r2
 800f264:	b508      	push	{r3, lr}
 800f266:	d202      	bcs.n	800f26e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800f268:	4618      	mov	r0, r3
 800f26a:	f000 fa3d 	bl	800f6e8 <_ZSt20__throw_length_errorPKc>
 800f26e:	bd08      	pop	{r3, pc}

0800f270 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800f270:	6803      	ldr	r3, [r0, #0]
 800f272:	428b      	cmp	r3, r1
 800f274:	d806      	bhi.n	800f284 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800f276:	6842      	ldr	r2, [r0, #4]
 800f278:	4413      	add	r3, r2
 800f27a:	4299      	cmp	r1, r3
 800f27c:	bf94      	ite	ls
 800f27e:	2000      	movls	r0, #0
 800f280:	2001      	movhi	r0, #1
 800f282:	4770      	bx	lr
 800f284:	2001      	movs	r0, #1
 800f286:	4770      	bx	lr

0800f288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800f288:	2a01      	cmp	r2, #1
 800f28a:	b410      	push	{r4}
 800f28c:	d104      	bne.n	800f298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800f28e:	780a      	ldrb	r2, [r1, #0]
 800f290:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f294:	7002      	strb	r2, [r0, #0]
 800f296:	4770      	bx	lr
 800f298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f29c:	f7ff bfad 	b.w	800f1fa <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800f2a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800f2a0:	2a01      	cmp	r2, #1
 800f2a2:	b430      	push	{r4, r5}
 800f2a4:	d103      	bne.n	800f2ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800f2a6:	780b      	ldrb	r3, [r1, #0]
 800f2a8:	7003      	strb	r3, [r0, #0]
 800f2aa:	bc30      	pop	{r4, r5}
 800f2ac:	4770      	bx	lr
 800f2ae:	2a00      	cmp	r2, #0
 800f2b0:	d0fb      	beq.n	800f2aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800f2b2:	bc30      	pop	{r4, r5}
 800f2b4:	f001 bad6 	b.w	8010864 <memmove>

0800f2b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800f2b8:	b508      	push	{r3, lr}
 800f2ba:	1a52      	subs	r2, r2, r1
 800f2bc:	f7ff ffe4 	bl	800f288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f2c0:	bd08      	pop	{r3, pc}

0800f2c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800f2c2:	b508      	push	{r3, lr}
 800f2c4:	1a52      	subs	r2, r2, r1
 800f2c6:	f7ff ffdf 	bl	800f288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f2ca:	bd08      	pop	{r3, pc}

0800f2cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800f2cc:	4288      	cmp	r0, r1
 800f2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	460e      	mov	r6, r1
 800f2d4:	d01e      	beq.n	800f314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	684d      	ldr	r5, [r1, #4]
 800f2da:	f853 2b08 	ldr.w	r2, [r3], #8
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	bf14      	ite	ne
 800f2e2:	6882      	ldrne	r2, [r0, #8]
 800f2e4:	220f      	moveq	r2, #15
 800f2e6:	42aa      	cmp	r2, r5
 800f2e8:	d20a      	bcs.n	800f300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 800f2ea:	a901      	add	r1, sp, #4
 800f2ec:	9501      	str	r5, [sp, #4]
 800f2ee:	f7ff ff89 	bl	800f204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800f2f2:	4607      	mov	r7, r0
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f7ff ffa7 	bl	800f248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800f2fa:	9b01      	ldr	r3, [sp, #4]
 800f2fc:	6027      	str	r7, [r4, #0]
 800f2fe:	60a3      	str	r3, [r4, #8]
 800f300:	b125      	cbz	r5, 800f30c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 800f302:	6831      	ldr	r1, [r6, #0]
 800f304:	6820      	ldr	r0, [r4, #0]
 800f306:	462a      	mov	r2, r5
 800f308:	f7ff ffbe 	bl	800f288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f30c:	6823      	ldr	r3, [r4, #0]
 800f30e:	6065      	str	r5, [r4, #4]
 800f310:	2200      	movs	r2, #0
 800f312:	555a      	strb	r2, [r3, r5]
 800f314:	b003      	add	sp, #12
 800f316:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800f318:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f31c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f31e:	461f      	mov	r7, r3
 800f320:	6843      	ldr	r3, [r0, #4]
 800f322:	eb01 0802 	add.w	r8, r1, r2
 800f326:	1ab2      	subs	r2, r6, r2
 800f328:	441a      	add	r2, r3
 800f32a:	eba3 0908 	sub.w	r9, r3, r8
 800f32e:	4603      	mov	r3, r0
 800f330:	9201      	str	r2, [sp, #4]
 800f332:	f853 2b08 	ldr.w	r2, [r3], #8
 800f336:	429a      	cmp	r2, r3
 800f338:	bf18      	it	ne
 800f33a:	6882      	ldrne	r2, [r0, #8]
 800f33c:	460d      	mov	r5, r1
 800f33e:	bf08      	it	eq
 800f340:	220f      	moveq	r2, #15
 800f342:	a901      	add	r1, sp, #4
 800f344:	4604      	mov	r4, r0
 800f346:	f7ff ff5d 	bl	800f204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800f34a:	4682      	mov	sl, r0
 800f34c:	b11d      	cbz	r5, 800f356 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800f34e:	6821      	ldr	r1, [r4, #0]
 800f350:	462a      	mov	r2, r5
 800f352:	f7ff ff99 	bl	800f288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f356:	b137      	cbz	r7, 800f366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800f358:	b12e      	cbz	r6, 800f366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800f35a:	4632      	mov	r2, r6
 800f35c:	4639      	mov	r1, r7
 800f35e:	eb0a 0005 	add.w	r0, sl, r5
 800f362:	f7ff ff91 	bl	800f288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f366:	f1b9 0f00 	cmp.w	r9, #0
 800f36a:	d007      	beq.n	800f37c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800f36c:	6821      	ldr	r1, [r4, #0]
 800f36e:	4435      	add	r5, r6
 800f370:	464a      	mov	r2, r9
 800f372:	4441      	add	r1, r8
 800f374:	eb0a 0005 	add.w	r0, sl, r5
 800f378:	f7ff ff86 	bl	800f288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f37c:	4620      	mov	r0, r4
 800f37e:	f7ff ff63 	bl	800f248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800f382:	9b01      	ldr	r3, [sp, #4]
 800f384:	f8c4 a000 	str.w	sl, [r4]
 800f388:	60a3      	str	r3, [r4, #8]
 800f38a:	b002      	add	sp, #8
 800f38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800f390:	f100 0208 	add.w	r2, r0, #8
 800f394:	6002      	str	r2, [r0, #0]
 800f396:	2200      	movs	r2, #0
 800f398:	6042      	str	r2, [r0, #4]
 800f39a:	7202      	strb	r2, [r0, #8]
 800f39c:	4770      	bx	lr

0800f39e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>:
 800f39e:	f100 0208 	add.w	r2, r0, #8
 800f3a2:	6002      	str	r2, [r0, #0]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	6042      	str	r2, [r0, #4]
 800f3a8:	7202      	strb	r2, [r0, #8]
 800f3aa:	4770      	bx	lr

0800f3ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800f3ac:	b570      	push	{r4, r5, r6, lr}
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	460e      	mov	r6, r1
 800f3b2:	3008      	adds	r0, #8
 800f3b4:	6020      	str	r0, [r4, #0]
 800f3b6:	f856 3b08 	ldr.w	r3, [r6], #8
 800f3ba:	429e      	cmp	r6, r3
 800f3bc:	460d      	mov	r5, r1
 800f3be:	d10b      	bne.n	800f3d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800f3c0:	2210      	movs	r2, #16
 800f3c2:	4631      	mov	r1, r6
 800f3c4:	f7ff ff19 	bl	800f1fa <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 800f3c8:	686b      	ldr	r3, [r5, #4]
 800f3ca:	6063      	str	r3, [r4, #4]
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	602e      	str	r6, [r5, #0]
 800f3d0:	606b      	str	r3, [r5, #4]
 800f3d2:	722b      	strb	r3, [r5, #8]
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	bd70      	pop	{r4, r5, r6, pc}
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	688b      	ldr	r3, [r1, #8]
 800f3dc:	60a3      	str	r3, [r4, #8]
 800f3de:	e7f3      	b.n	800f3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800f3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800f3e0:	b510      	push	{r4, lr}
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	f7ff ff30 	bl	800f248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	bd10      	pop	{r4, pc}

0800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800f3ec:	b510      	push	{r4, lr}
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	f7ff ff6c 	bl	800f2cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	bd10      	pop	{r4, pc}

0800f3f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800f3f8:	6840      	ldr	r0, [r0, #4]
 800f3fa:	4770      	bx	lr

0800f3fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800f3fc:	6840      	ldr	r0, [r0, #4]
 800f3fe:	4770      	bx	lr

0800f400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 800f400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f402:	4603      	mov	r3, r0
 800f404:	9101      	str	r1, [sp, #4]
 800f406:	f853 2b08 	ldr.w	r2, [r3], #8
 800f40a:	429a      	cmp	r2, r3
 800f40c:	bf18      	it	ne
 800f40e:	6882      	ldrne	r2, [r0, #8]
 800f410:	9b01      	ldr	r3, [sp, #4]
 800f412:	bf08      	it	eq
 800f414:	220f      	moveq	r2, #15
 800f416:	4293      	cmp	r3, r2
 800f418:	4604      	mov	r4, r0
 800f41a:	d90e      	bls.n	800f43a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x3a>
 800f41c:	a901      	add	r1, sp, #4
 800f41e:	f7ff fef1 	bl	800f204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800f422:	6862      	ldr	r2, [r4, #4]
 800f424:	6821      	ldr	r1, [r4, #0]
 800f426:	3201      	adds	r2, #1
 800f428:	4605      	mov	r5, r0
 800f42a:	f7ff ff2d 	bl	800f288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f42e:	4620      	mov	r0, r4
 800f430:	f7ff ff0a 	bl	800f248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800f434:	9b01      	ldr	r3, [sp, #4]
 800f436:	6025      	str	r5, [r4, #0]
 800f438:	60a3      	str	r3, [r4, #8]
 800f43a:	b003      	add	sp, #12
 800f43c:	bd30      	pop	{r4, r5, pc}
	...

0800f440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800f440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f444:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f446:	4614      	mov	r4, r2
 800f448:	4680      	mov	r8, r0
 800f44a:	462a      	mov	r2, r5
 800f44c:	4689      	mov	r9, r1
 800f44e:	461f      	mov	r7, r3
 800f450:	4621      	mov	r1, r4
 800f452:	4b39      	ldr	r3, [pc, #228]	; (800f538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 800f454:	f7ff ff00 	bl	800f258 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800f458:	4642      	mov	r2, r8
 800f45a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f45e:	f852 6b08 	ldr.w	r6, [r2], #8
 800f462:	4296      	cmp	r6, r2
 800f464:	bf18      	it	ne
 800f466:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800f46a:	eba5 0b04 	sub.w	fp, r5, r4
 800f46e:	eb03 0a0b 	add.w	sl, r3, fp
 800f472:	bf08      	it	eq
 800f474:	220f      	moveq	r2, #15
 800f476:	4552      	cmp	r2, sl
 800f478:	d351      	bcc.n	800f51e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800f47a:	444e      	add	r6, r9
 800f47c:	4639      	mov	r1, r7
 800f47e:	44a1      	add	r9, r4
 800f480:	4640      	mov	r0, r8
 800f482:	eba3 0909 	sub.w	r9, r3, r9
 800f486:	f7ff fef3 	bl	800f270 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800f48a:	b180      	cbz	r0, 800f4ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800f48c:	f1b9 0f00 	cmp.w	r9, #0
 800f490:	d006      	beq.n	800f4a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800f492:	42ac      	cmp	r4, r5
 800f494:	d004      	beq.n	800f4a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800f496:	464a      	mov	r2, r9
 800f498:	1931      	adds	r1, r6, r4
 800f49a:	1970      	adds	r0, r6, r5
 800f49c:	f7ff ff00 	bl	800f2a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800f4a0:	b315      	cbz	r5, 800f4e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800f4a2:	462a      	mov	r2, r5
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f7ff feee 	bl	800f288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f4ac:	e01c      	b.n	800f4e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800f4ae:	b135      	cbz	r5, 800f4be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800f4b0:	42ac      	cmp	r4, r5
 800f4b2:	d33c      	bcc.n	800f52e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800f4b4:	462a      	mov	r2, r5
 800f4b6:	4639      	mov	r1, r7
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f7ff fef1 	bl	800f2a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800f4be:	f1b9 0f00 	cmp.w	r9, #0
 800f4c2:	d011      	beq.n	800f4e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800f4c4:	42ac      	cmp	r4, r5
 800f4c6:	d00f      	beq.n	800f4e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800f4c8:	464a      	mov	r2, r9
 800f4ca:	1931      	adds	r1, r6, r4
 800f4cc:	1970      	adds	r0, r6, r5
 800f4ce:	f7ff fee7 	bl	800f2a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800f4d2:	42ac      	cmp	r4, r5
 800f4d4:	d208      	bcs.n	800f4e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800f4d6:	4434      	add	r4, r6
 800f4d8:	197b      	adds	r3, r7, r5
 800f4da:	429c      	cmp	r4, r3
 800f4dc:	d30f      	bcc.n	800f4fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800f4de:	462a      	mov	r2, r5
 800f4e0:	4639      	mov	r1, r7
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f7ff fedc 	bl	800f2a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800f4e8:	f8d8 3000 	ldr.w	r3, [r8]
 800f4ec:	f8c8 a004 	str.w	sl, [r8, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	4640      	mov	r0, r8
 800f4f4:	f803 200a 	strb.w	r2, [r3, sl]
 800f4f8:	b003      	add	sp, #12
 800f4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4fe:	42bc      	cmp	r4, r7
 800f500:	d803      	bhi.n	800f50a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800f502:	462a      	mov	r2, r5
 800f504:	eb07 010b 	add.w	r1, r7, fp
 800f508:	e7cd      	b.n	800f4a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800f50a:	1be4      	subs	r4, r4, r7
 800f50c:	4622      	mov	r2, r4
 800f50e:	4639      	mov	r1, r7
 800f510:	4630      	mov	r0, r6
 800f512:	f7ff fec5 	bl	800f2a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800f516:	1b2a      	subs	r2, r5, r4
 800f518:	1971      	adds	r1, r6, r5
 800f51a:	1930      	adds	r0, r6, r4
 800f51c:	e7c4      	b.n	800f4a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800f51e:	9500      	str	r5, [sp, #0]
 800f520:	463b      	mov	r3, r7
 800f522:	4622      	mov	r2, r4
 800f524:	4649      	mov	r1, r9
 800f526:	4640      	mov	r0, r8
 800f528:	f7ff fef6 	bl	800f318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800f52c:	e7dc      	b.n	800f4e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800f52e:	f1b9 0f00 	cmp.w	r9, #0
 800f532:	d0d0      	beq.n	800f4d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 800f534:	e7c8      	b.n	800f4c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800f536:	bf00      	nop
 800f538:	08013948 	.word	0x08013948

0800f53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800f53c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f53e:	4604      	mov	r4, r0
 800f540:	4608      	mov	r0, r1
 800f542:	9103      	str	r1, [sp, #12]
 800f544:	f7f0 fea4 	bl	8000290 <strlen>
 800f548:	9b03      	ldr	r3, [sp, #12]
 800f54a:	9000      	str	r0, [sp, #0]
 800f54c:	6862      	ldr	r2, [r4, #4]
 800f54e:	2100      	movs	r1, #0
 800f550:	4620      	mov	r0, r4
 800f552:	f7ff ff75 	bl	800f440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800f556:	b004      	add	sp, #16
 800f558:	bd10      	pop	{r4, pc}

0800f55a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800f55a:	b508      	push	{r3, lr}
 800f55c:	f7ff ffee 	bl	800f53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800f560:	bd08      	pop	{r3, pc}

0800f562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800f562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f564:	4604      	mov	r4, r0
 800f566:	4623      	mov	r3, r4
 800f568:	6840      	ldr	r0, [r0, #4]
 800f56a:	f853 6b08 	ldr.w	r6, [r3], #8
 800f56e:	429e      	cmp	r6, r3
 800f570:	bf18      	it	ne
 800f572:	68a3      	ldrne	r3, [r4, #8]
 800f574:	eb00 0502 	add.w	r5, r0, r2
 800f578:	bf08      	it	eq
 800f57a:	230f      	moveq	r3, #15
 800f57c:	429d      	cmp	r5, r3
 800f57e:	d80a      	bhi.n	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800f580:	b112      	cbz	r2, 800f588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800f582:	4430      	add	r0, r6
 800f584:	f7ff fe80 	bl	800f288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f588:	6823      	ldr	r3, [r4, #0]
 800f58a:	6065      	str	r5, [r4, #4]
 800f58c:	2200      	movs	r2, #0
 800f58e:	4620      	mov	r0, r4
 800f590:	555a      	strb	r2, [r3, r5]
 800f592:	b002      	add	sp, #8
 800f594:	bd70      	pop	{r4, r5, r6, pc}
 800f596:	9200      	str	r2, [sp, #0]
 800f598:	460b      	mov	r3, r1
 800f59a:	2200      	movs	r2, #0
 800f59c:	4601      	mov	r1, r0
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f7ff feba 	bl	800f318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800f5a4:	e7f0      	b.n	800f588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800f5a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800f5a6:	b508      	push	{r3, lr}
 800f5a8:	e9d1 1200 	ldrd	r1, r2, [r1]
 800f5ac:	f7ff ffd9 	bl	800f562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800f5b0:	bd08      	pop	{r3, pc}
	...

0800f5b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	4b06      	ldr	r3, [pc, #24]	; (800f5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800f5b8:	4604      	mov	r4, r0
 800f5ba:	460d      	mov	r5, r1
 800f5bc:	4616      	mov	r6, r2
 800f5be:	2100      	movs	r1, #0
 800f5c0:	f7ff fe4a 	bl	800f258 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800f5c4:	4632      	mov	r2, r6
 800f5c6:	4629      	mov	r1, r5
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f7ff ffca 	bl	800f562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800f5ce:	bd70      	pop	{r4, r5, r6, pc}
 800f5d0:	08013961 	.word	0x08013961

0800f5d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800f5d4:	6800      	ldr	r0, [r0, #0]
 800f5d6:	4770      	bx	lr

0800f5d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 800f5d8:	4770      	bx	lr
	...

0800f5dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800f5dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5de:	4604      	mov	r4, r0
 800f5e0:	4616      	mov	r6, r2
 800f5e2:	460d      	mov	r5, r1
 800f5e4:	b919      	cbnz	r1, 800f5ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800f5e6:	b112      	cbz	r2, 800f5ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800f5e8:	480d      	ldr	r0, [pc, #52]	; (800f620 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800f5ea:	f000 f87a 	bl	800f6e2 <_ZSt19__throw_logic_errorPKc>
 800f5ee:	1b73      	subs	r3, r6, r5
 800f5f0:	2b0f      	cmp	r3, #15
 800f5f2:	9301      	str	r3, [sp, #4]
 800f5f4:	d907      	bls.n	800f606 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	a901      	add	r1, sp, #4
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	f7ff fe02 	bl	800f204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800f600:	9b01      	ldr	r3, [sp, #4]
 800f602:	6020      	str	r0, [r4, #0]
 800f604:	60a3      	str	r3, [r4, #8]
 800f606:	4632      	mov	r2, r6
 800f608:	4629      	mov	r1, r5
 800f60a:	6820      	ldr	r0, [r4, #0]
 800f60c:	f7ff fe54 	bl	800f2b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800f610:	9b01      	ldr	r3, [sp, #4]
 800f612:	6822      	ldr	r2, [r4, #0]
 800f614:	6063      	str	r3, [r4, #4]
 800f616:	2100      	movs	r1, #0
 800f618:	54d1      	strb	r1, [r2, r3]
 800f61a:	b002      	add	sp, #8
 800f61c:	bd70      	pop	{r4, r5, r6, pc}
 800f61e:	bf00      	nop
 800f620:	08013976 	.word	0x08013976

0800f624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800f624:	b538      	push	{r3, r4, r5, lr}
 800f626:	f100 0308 	add.w	r3, r0, #8
 800f62a:	6003      	str	r3, [r0, #0]
 800f62c:	e9d1 5200 	ldrd	r5, r2, [r1]
 800f630:	4604      	mov	r4, r0
 800f632:	f04f 0300 	mov.w	r3, #0
 800f636:	442a      	add	r2, r5
 800f638:	4629      	mov	r1, r5
 800f63a:	f7ff ffcf 	bl	800f5dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800f63e:	4620      	mov	r0, r4
 800f640:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800f644:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f646:	4604      	mov	r4, r0
 800f648:	4616      	mov	r6, r2
 800f64a:	460d      	mov	r5, r1
 800f64c:	b919      	cbnz	r1, 800f656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800f64e:	b112      	cbz	r2, 800f656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800f650:	480d      	ldr	r0, [pc, #52]	; (800f688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800f652:	f000 f846 	bl	800f6e2 <_ZSt19__throw_logic_errorPKc>
 800f656:	1b73      	subs	r3, r6, r5
 800f658:	2b0f      	cmp	r3, #15
 800f65a:	9301      	str	r3, [sp, #4]
 800f65c:	d907      	bls.n	800f66e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800f65e:	2200      	movs	r2, #0
 800f660:	a901      	add	r1, sp, #4
 800f662:	4620      	mov	r0, r4
 800f664:	f7ff fdce 	bl	800f204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800f668:	9b01      	ldr	r3, [sp, #4]
 800f66a:	6020      	str	r0, [r4, #0]
 800f66c:	60a3      	str	r3, [r4, #8]
 800f66e:	4632      	mov	r2, r6
 800f670:	4629      	mov	r1, r5
 800f672:	6820      	ldr	r0, [r4, #0]
 800f674:	f7ff fe25 	bl	800f2c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800f678:	9b01      	ldr	r3, [sp, #4]
 800f67a:	6822      	ldr	r2, [r4, #0]
 800f67c:	6063      	str	r3, [r4, #4]
 800f67e:	2100      	movs	r1, #0
 800f680:	54d1      	strb	r1, [r2, r3]
 800f682:	b002      	add	sp, #8
 800f684:	bd70      	pop	{r4, r5, r6, pc}
 800f686:	bf00      	nop
 800f688:	08013976 	.word	0x08013976

0800f68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800f68c:	b538      	push	{r3, r4, r5, lr}
 800f68e:	f100 0308 	add.w	r3, r0, #8
 800f692:	4604      	mov	r4, r0
 800f694:	6003      	str	r3, [r0, #0]
 800f696:	460d      	mov	r5, r1
 800f698:	b159      	cbz	r1, 800f6b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800f69a:	4608      	mov	r0, r1
 800f69c:	f7f0 fdf8 	bl	8000290 <strlen>
 800f6a0:	182a      	adds	r2, r5, r0
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f04f 0300 	mov.w	r3, #0
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	f7ff ffcb 	bl	800f644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	bd38      	pop	{r3, r4, r5, pc}
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	e7f5      	b.n	800f6a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800f6b6 <_ZdlPv>:
 800f6b6:	f000 b833 	b.w	800f720 <free>

0800f6ba <_Znwj>:
 800f6ba:	2801      	cmp	r0, #1
 800f6bc:	bf38      	it	cc
 800f6be:	2001      	movcc	r0, #1
 800f6c0:	b510      	push	{r4, lr}
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	f000 f823 	bl	800f710 <malloc>
 800f6ca:	b100      	cbz	r0, 800f6ce <_Znwj+0x14>
 800f6cc:	bd10      	pop	{r4, pc}
 800f6ce:	f000 f80f 	bl	800f6f0 <_ZSt15get_new_handlerv>
 800f6d2:	b908      	cbnz	r0, 800f6d8 <_Znwj+0x1e>
 800f6d4:	f000 f814 	bl	800f700 <abort>
 800f6d8:	4780      	blx	r0
 800f6da:	e7f3      	b.n	800f6c4 <_Znwj+0xa>

0800f6dc <_ZSt17__throw_bad_allocv>:
 800f6dc:	b508      	push	{r3, lr}
 800f6de:	f000 f80f 	bl	800f700 <abort>

0800f6e2 <_ZSt19__throw_logic_errorPKc>:
 800f6e2:	b508      	push	{r3, lr}
 800f6e4:	f000 f80c 	bl	800f700 <abort>

0800f6e8 <_ZSt20__throw_length_errorPKc>:
 800f6e8:	b508      	push	{r3, lr}
 800f6ea:	f000 f809 	bl	800f700 <abort>
	...

0800f6f0 <_ZSt15get_new_handlerv>:
 800f6f0:	4b02      	ldr	r3, [pc, #8]	; (800f6fc <_ZSt15get_new_handlerv+0xc>)
 800f6f2:	6818      	ldr	r0, [r3, #0]
 800f6f4:	f3bf 8f5b 	dmb	ish
 800f6f8:	4770      	bx	lr
 800f6fa:	bf00      	nop
 800f6fc:	200032e0 	.word	0x200032e0

0800f700 <abort>:
 800f700:	b508      	push	{r3, lr}
 800f702:	2006      	movs	r0, #6
 800f704:	f001 f928 	bl	8010958 <raise>
 800f708:	2001      	movs	r0, #1
 800f70a:	f7fc f8b5 	bl	800b878 <_exit>
	...

0800f710 <malloc>:
 800f710:	4b02      	ldr	r3, [pc, #8]	; (800f71c <malloc+0xc>)
 800f712:	4601      	mov	r1, r0
 800f714:	6818      	ldr	r0, [r3, #0]
 800f716:	f000 b82b 	b.w	800f770 <_malloc_r>
 800f71a:	bf00      	nop
 800f71c:	20000228 	.word	0x20000228

0800f720 <free>:
 800f720:	4b02      	ldr	r3, [pc, #8]	; (800f72c <free+0xc>)
 800f722:	4601      	mov	r1, r0
 800f724:	6818      	ldr	r0, [r3, #0]
 800f726:	f001 b9cf 	b.w	8010ac8 <_free_r>
 800f72a:	bf00      	nop
 800f72c:	20000228 	.word	0x20000228

0800f730 <sbrk_aligned>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	4e0e      	ldr	r6, [pc, #56]	; (800f76c <sbrk_aligned+0x3c>)
 800f734:	460c      	mov	r4, r1
 800f736:	6831      	ldr	r1, [r6, #0]
 800f738:	4605      	mov	r5, r0
 800f73a:	b911      	cbnz	r1, 800f742 <sbrk_aligned+0x12>
 800f73c:	f001 f95c 	bl	80109f8 <_sbrk_r>
 800f740:	6030      	str	r0, [r6, #0]
 800f742:	4621      	mov	r1, r4
 800f744:	4628      	mov	r0, r5
 800f746:	f001 f957 	bl	80109f8 <_sbrk_r>
 800f74a:	1c43      	adds	r3, r0, #1
 800f74c:	d00a      	beq.n	800f764 <sbrk_aligned+0x34>
 800f74e:	1cc4      	adds	r4, r0, #3
 800f750:	f024 0403 	bic.w	r4, r4, #3
 800f754:	42a0      	cmp	r0, r4
 800f756:	d007      	beq.n	800f768 <sbrk_aligned+0x38>
 800f758:	1a21      	subs	r1, r4, r0
 800f75a:	4628      	mov	r0, r5
 800f75c:	f001 f94c 	bl	80109f8 <_sbrk_r>
 800f760:	3001      	adds	r0, #1
 800f762:	d101      	bne.n	800f768 <sbrk_aligned+0x38>
 800f764:	f04f 34ff 	mov.w	r4, #4294967295
 800f768:	4620      	mov	r0, r4
 800f76a:	bd70      	pop	{r4, r5, r6, pc}
 800f76c:	200032e8 	.word	0x200032e8

0800f770 <_malloc_r>:
 800f770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f774:	1ccd      	adds	r5, r1, #3
 800f776:	f025 0503 	bic.w	r5, r5, #3
 800f77a:	3508      	adds	r5, #8
 800f77c:	2d0c      	cmp	r5, #12
 800f77e:	bf38      	it	cc
 800f780:	250c      	movcc	r5, #12
 800f782:	2d00      	cmp	r5, #0
 800f784:	4607      	mov	r7, r0
 800f786:	db01      	blt.n	800f78c <_malloc_r+0x1c>
 800f788:	42a9      	cmp	r1, r5
 800f78a:	d905      	bls.n	800f798 <_malloc_r+0x28>
 800f78c:	230c      	movs	r3, #12
 800f78e:	603b      	str	r3, [r7, #0]
 800f790:	2600      	movs	r6, #0
 800f792:	4630      	mov	r0, r6
 800f794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f798:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f86c <_malloc_r+0xfc>
 800f79c:	f000 f868 	bl	800f870 <__malloc_lock>
 800f7a0:	f8d8 3000 	ldr.w	r3, [r8]
 800f7a4:	461c      	mov	r4, r3
 800f7a6:	bb5c      	cbnz	r4, 800f800 <_malloc_r+0x90>
 800f7a8:	4629      	mov	r1, r5
 800f7aa:	4638      	mov	r0, r7
 800f7ac:	f7ff ffc0 	bl	800f730 <sbrk_aligned>
 800f7b0:	1c43      	adds	r3, r0, #1
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	d155      	bne.n	800f862 <_malloc_r+0xf2>
 800f7b6:	f8d8 4000 	ldr.w	r4, [r8]
 800f7ba:	4626      	mov	r6, r4
 800f7bc:	2e00      	cmp	r6, #0
 800f7be:	d145      	bne.n	800f84c <_malloc_r+0xdc>
 800f7c0:	2c00      	cmp	r4, #0
 800f7c2:	d048      	beq.n	800f856 <_malloc_r+0xe6>
 800f7c4:	6823      	ldr	r3, [r4, #0]
 800f7c6:	4631      	mov	r1, r6
 800f7c8:	4638      	mov	r0, r7
 800f7ca:	eb04 0903 	add.w	r9, r4, r3
 800f7ce:	f001 f913 	bl	80109f8 <_sbrk_r>
 800f7d2:	4581      	cmp	r9, r0
 800f7d4:	d13f      	bne.n	800f856 <_malloc_r+0xe6>
 800f7d6:	6821      	ldr	r1, [r4, #0]
 800f7d8:	1a6d      	subs	r5, r5, r1
 800f7da:	4629      	mov	r1, r5
 800f7dc:	4638      	mov	r0, r7
 800f7de:	f7ff ffa7 	bl	800f730 <sbrk_aligned>
 800f7e2:	3001      	adds	r0, #1
 800f7e4:	d037      	beq.n	800f856 <_malloc_r+0xe6>
 800f7e6:	6823      	ldr	r3, [r4, #0]
 800f7e8:	442b      	add	r3, r5
 800f7ea:	6023      	str	r3, [r4, #0]
 800f7ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d038      	beq.n	800f866 <_malloc_r+0xf6>
 800f7f4:	685a      	ldr	r2, [r3, #4]
 800f7f6:	42a2      	cmp	r2, r4
 800f7f8:	d12b      	bne.n	800f852 <_malloc_r+0xe2>
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	605a      	str	r2, [r3, #4]
 800f7fe:	e00f      	b.n	800f820 <_malloc_r+0xb0>
 800f800:	6822      	ldr	r2, [r4, #0]
 800f802:	1b52      	subs	r2, r2, r5
 800f804:	d41f      	bmi.n	800f846 <_malloc_r+0xd6>
 800f806:	2a0b      	cmp	r2, #11
 800f808:	d917      	bls.n	800f83a <_malloc_r+0xca>
 800f80a:	1961      	adds	r1, r4, r5
 800f80c:	42a3      	cmp	r3, r4
 800f80e:	6025      	str	r5, [r4, #0]
 800f810:	bf18      	it	ne
 800f812:	6059      	strne	r1, [r3, #4]
 800f814:	6863      	ldr	r3, [r4, #4]
 800f816:	bf08      	it	eq
 800f818:	f8c8 1000 	streq.w	r1, [r8]
 800f81c:	5162      	str	r2, [r4, r5]
 800f81e:	604b      	str	r3, [r1, #4]
 800f820:	4638      	mov	r0, r7
 800f822:	f104 060b 	add.w	r6, r4, #11
 800f826:	f000 f829 	bl	800f87c <__malloc_unlock>
 800f82a:	f026 0607 	bic.w	r6, r6, #7
 800f82e:	1d23      	adds	r3, r4, #4
 800f830:	1af2      	subs	r2, r6, r3
 800f832:	d0ae      	beq.n	800f792 <_malloc_r+0x22>
 800f834:	1b9b      	subs	r3, r3, r6
 800f836:	50a3      	str	r3, [r4, r2]
 800f838:	e7ab      	b.n	800f792 <_malloc_r+0x22>
 800f83a:	42a3      	cmp	r3, r4
 800f83c:	6862      	ldr	r2, [r4, #4]
 800f83e:	d1dd      	bne.n	800f7fc <_malloc_r+0x8c>
 800f840:	f8c8 2000 	str.w	r2, [r8]
 800f844:	e7ec      	b.n	800f820 <_malloc_r+0xb0>
 800f846:	4623      	mov	r3, r4
 800f848:	6864      	ldr	r4, [r4, #4]
 800f84a:	e7ac      	b.n	800f7a6 <_malloc_r+0x36>
 800f84c:	4634      	mov	r4, r6
 800f84e:	6876      	ldr	r6, [r6, #4]
 800f850:	e7b4      	b.n	800f7bc <_malloc_r+0x4c>
 800f852:	4613      	mov	r3, r2
 800f854:	e7cc      	b.n	800f7f0 <_malloc_r+0x80>
 800f856:	230c      	movs	r3, #12
 800f858:	603b      	str	r3, [r7, #0]
 800f85a:	4638      	mov	r0, r7
 800f85c:	f000 f80e 	bl	800f87c <__malloc_unlock>
 800f860:	e797      	b.n	800f792 <_malloc_r+0x22>
 800f862:	6025      	str	r5, [r4, #0]
 800f864:	e7dc      	b.n	800f820 <_malloc_r+0xb0>
 800f866:	605b      	str	r3, [r3, #4]
 800f868:	deff      	udf	#255	; 0xff
 800f86a:	bf00      	nop
 800f86c:	200032e4 	.word	0x200032e4

0800f870 <__malloc_lock>:
 800f870:	4801      	ldr	r0, [pc, #4]	; (800f878 <__malloc_lock+0x8>)
 800f872:	f001 b90e 	b.w	8010a92 <__retarget_lock_acquire_recursive>
 800f876:	bf00      	nop
 800f878:	2000342c 	.word	0x2000342c

0800f87c <__malloc_unlock>:
 800f87c:	4801      	ldr	r0, [pc, #4]	; (800f884 <__malloc_unlock+0x8>)
 800f87e:	f001 b909 	b.w	8010a94 <__retarget_lock_release_recursive>
 800f882:	bf00      	nop
 800f884:	2000342c 	.word	0x2000342c

0800f888 <realloc>:
 800f888:	4b02      	ldr	r3, [pc, #8]	; (800f894 <realloc+0xc>)
 800f88a:	460a      	mov	r2, r1
 800f88c:	4601      	mov	r1, r0
 800f88e:	6818      	ldr	r0, [r3, #0]
 800f890:	f000 b802 	b.w	800f898 <_realloc_r>
 800f894:	20000228 	.word	0x20000228

0800f898 <_realloc_r>:
 800f898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f89c:	4680      	mov	r8, r0
 800f89e:	4614      	mov	r4, r2
 800f8a0:	460e      	mov	r6, r1
 800f8a2:	b921      	cbnz	r1, 800f8ae <_realloc_r+0x16>
 800f8a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a8:	4611      	mov	r1, r2
 800f8aa:	f7ff bf61 	b.w	800f770 <_malloc_r>
 800f8ae:	b92a      	cbnz	r2, 800f8bc <_realloc_r+0x24>
 800f8b0:	f001 f90a 	bl	8010ac8 <_free_r>
 800f8b4:	4625      	mov	r5, r4
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8bc:	f002 f967 	bl	8011b8e <_malloc_usable_size_r>
 800f8c0:	4284      	cmp	r4, r0
 800f8c2:	4607      	mov	r7, r0
 800f8c4:	d802      	bhi.n	800f8cc <_realloc_r+0x34>
 800f8c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8ca:	d812      	bhi.n	800f8f2 <_realloc_r+0x5a>
 800f8cc:	4621      	mov	r1, r4
 800f8ce:	4640      	mov	r0, r8
 800f8d0:	f7ff ff4e 	bl	800f770 <_malloc_r>
 800f8d4:	4605      	mov	r5, r0
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d0ed      	beq.n	800f8b6 <_realloc_r+0x1e>
 800f8da:	42bc      	cmp	r4, r7
 800f8dc:	4622      	mov	r2, r4
 800f8de:	4631      	mov	r1, r6
 800f8e0:	bf28      	it	cs
 800f8e2:	463a      	movcs	r2, r7
 800f8e4:	f001 f8d7 	bl	8010a96 <memcpy>
 800f8e8:	4631      	mov	r1, r6
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	f001 f8ec 	bl	8010ac8 <_free_r>
 800f8f0:	e7e1      	b.n	800f8b6 <_realloc_r+0x1e>
 800f8f2:	4635      	mov	r5, r6
 800f8f4:	e7df      	b.n	800f8b6 <_realloc_r+0x1e>

0800f8f6 <sulp>:
 800f8f6:	b570      	push	{r4, r5, r6, lr}
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	460d      	mov	r5, r1
 800f8fc:	ec45 4b10 	vmov	d0, r4, r5
 800f900:	4616      	mov	r6, r2
 800f902:	f002 f803 	bl	801190c <__ulp>
 800f906:	ec51 0b10 	vmov	r0, r1, d0
 800f90a:	b17e      	cbz	r6, 800f92c <sulp+0x36>
 800f90c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f910:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f914:	2b00      	cmp	r3, #0
 800f916:	dd09      	ble.n	800f92c <sulp+0x36>
 800f918:	051b      	lsls	r3, r3, #20
 800f91a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f91e:	2400      	movs	r4, #0
 800f920:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f924:	4622      	mov	r2, r4
 800f926:	462b      	mov	r3, r5
 800f928:	f7f0 fe76 	bl	8000618 <__aeabi_dmul>
 800f92c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f930 <_strtod_l>:
 800f930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f934:	ed2d 8b02 	vpush	{d8}
 800f938:	b09b      	sub	sp, #108	; 0x6c
 800f93a:	4604      	mov	r4, r0
 800f93c:	9213      	str	r2, [sp, #76]	; 0x4c
 800f93e:	2200      	movs	r2, #0
 800f940:	9216      	str	r2, [sp, #88]	; 0x58
 800f942:	460d      	mov	r5, r1
 800f944:	f04f 0800 	mov.w	r8, #0
 800f948:	f04f 0900 	mov.w	r9, #0
 800f94c:	460a      	mov	r2, r1
 800f94e:	9215      	str	r2, [sp, #84]	; 0x54
 800f950:	7811      	ldrb	r1, [r2, #0]
 800f952:	292b      	cmp	r1, #43	; 0x2b
 800f954:	d04c      	beq.n	800f9f0 <_strtod_l+0xc0>
 800f956:	d83a      	bhi.n	800f9ce <_strtod_l+0x9e>
 800f958:	290d      	cmp	r1, #13
 800f95a:	d834      	bhi.n	800f9c6 <_strtod_l+0x96>
 800f95c:	2908      	cmp	r1, #8
 800f95e:	d834      	bhi.n	800f9ca <_strtod_l+0x9a>
 800f960:	2900      	cmp	r1, #0
 800f962:	d03d      	beq.n	800f9e0 <_strtod_l+0xb0>
 800f964:	2200      	movs	r2, #0
 800f966:	920a      	str	r2, [sp, #40]	; 0x28
 800f968:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800f96a:	7832      	ldrb	r2, [r6, #0]
 800f96c:	2a30      	cmp	r2, #48	; 0x30
 800f96e:	f040 80b4 	bne.w	800fada <_strtod_l+0x1aa>
 800f972:	7872      	ldrb	r2, [r6, #1]
 800f974:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f978:	2a58      	cmp	r2, #88	; 0x58
 800f97a:	d170      	bne.n	800fa5e <_strtod_l+0x12e>
 800f97c:	9302      	str	r3, [sp, #8]
 800f97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f980:	9301      	str	r3, [sp, #4]
 800f982:	ab16      	add	r3, sp, #88	; 0x58
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	4a8e      	ldr	r2, [pc, #568]	; (800fbc0 <_strtod_l+0x290>)
 800f988:	ab17      	add	r3, sp, #92	; 0x5c
 800f98a:	a915      	add	r1, sp, #84	; 0x54
 800f98c:	4620      	mov	r0, r4
 800f98e:	f001 f94f 	bl	8010c30 <__gethex>
 800f992:	f010 070f 	ands.w	r7, r0, #15
 800f996:	4605      	mov	r5, r0
 800f998:	d005      	beq.n	800f9a6 <_strtod_l+0x76>
 800f99a:	2f06      	cmp	r7, #6
 800f99c:	d12a      	bne.n	800f9f4 <_strtod_l+0xc4>
 800f99e:	3601      	adds	r6, #1
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	9615      	str	r6, [sp, #84]	; 0x54
 800f9a4:	930a      	str	r3, [sp, #40]	; 0x28
 800f9a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f040 857f 	bne.w	80104ac <_strtod_l+0xb7c>
 800f9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9b0:	b1db      	cbz	r3, 800f9ea <_strtod_l+0xba>
 800f9b2:	4642      	mov	r2, r8
 800f9b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f9b8:	ec43 2b10 	vmov	d0, r2, r3
 800f9bc:	b01b      	add	sp, #108	; 0x6c
 800f9be:	ecbd 8b02 	vpop	{d8}
 800f9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c6:	2920      	cmp	r1, #32
 800f9c8:	d1cc      	bne.n	800f964 <_strtod_l+0x34>
 800f9ca:	3201      	adds	r2, #1
 800f9cc:	e7bf      	b.n	800f94e <_strtod_l+0x1e>
 800f9ce:	292d      	cmp	r1, #45	; 0x2d
 800f9d0:	d1c8      	bne.n	800f964 <_strtod_l+0x34>
 800f9d2:	2101      	movs	r1, #1
 800f9d4:	910a      	str	r1, [sp, #40]	; 0x28
 800f9d6:	1c51      	adds	r1, r2, #1
 800f9d8:	9115      	str	r1, [sp, #84]	; 0x54
 800f9da:	7852      	ldrb	r2, [r2, #1]
 800f9dc:	2a00      	cmp	r2, #0
 800f9de:	d1c3      	bne.n	800f968 <_strtod_l+0x38>
 800f9e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f9e2:	9515      	str	r5, [sp, #84]	; 0x54
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f040 855f 	bne.w	80104a8 <_strtod_l+0xb78>
 800f9ea:	4642      	mov	r2, r8
 800f9ec:	464b      	mov	r3, r9
 800f9ee:	e7e3      	b.n	800f9b8 <_strtod_l+0x88>
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	e7ef      	b.n	800f9d4 <_strtod_l+0xa4>
 800f9f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f9f6:	b13a      	cbz	r2, 800fa08 <_strtod_l+0xd8>
 800f9f8:	2135      	movs	r1, #53	; 0x35
 800f9fa:	a818      	add	r0, sp, #96	; 0x60
 800f9fc:	f002 f883 	bl	8011b06 <__copybits>
 800fa00:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fa02:	4620      	mov	r0, r4
 800fa04:	f001 fc56 	bl	80112b4 <_Bfree>
 800fa08:	3f01      	subs	r7, #1
 800fa0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa0c:	2f04      	cmp	r7, #4
 800fa0e:	d806      	bhi.n	800fa1e <_strtod_l+0xee>
 800fa10:	e8df f007 	tbb	[pc, r7]
 800fa14:	201d0314 	.word	0x201d0314
 800fa18:	14          	.byte	0x14
 800fa19:	00          	.byte	0x00
 800fa1a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800fa1e:	05e9      	lsls	r1, r5, #23
 800fa20:	bf48      	it	mi
 800fa22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800fa26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa2a:	0d1b      	lsrs	r3, r3, #20
 800fa2c:	051b      	lsls	r3, r3, #20
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d1b9      	bne.n	800f9a6 <_strtod_l+0x76>
 800fa32:	f001 f803 	bl	8010a3c <__errno>
 800fa36:	2322      	movs	r3, #34	; 0x22
 800fa38:	6003      	str	r3, [r0, #0]
 800fa3a:	e7b4      	b.n	800f9a6 <_strtod_l+0x76>
 800fa3c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800fa40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fa44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fa48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800fa4c:	e7e7      	b.n	800fa1e <_strtod_l+0xee>
 800fa4e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fbc8 <_strtod_l+0x298>
 800fa52:	e7e4      	b.n	800fa1e <_strtod_l+0xee>
 800fa54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fa58:	f04f 38ff 	mov.w	r8, #4294967295
 800fa5c:	e7df      	b.n	800fa1e <_strtod_l+0xee>
 800fa5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa60:	1c5a      	adds	r2, r3, #1
 800fa62:	9215      	str	r2, [sp, #84]	; 0x54
 800fa64:	785b      	ldrb	r3, [r3, #1]
 800fa66:	2b30      	cmp	r3, #48	; 0x30
 800fa68:	d0f9      	beq.n	800fa5e <_strtod_l+0x12e>
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d09b      	beq.n	800f9a6 <_strtod_l+0x76>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	f04f 0a00 	mov.w	sl, #0
 800fa74:	9304      	str	r3, [sp, #16]
 800fa76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa78:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa7a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fa7e:	46d3      	mov	fp, sl
 800fa80:	220a      	movs	r2, #10
 800fa82:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fa84:	7806      	ldrb	r6, [r0, #0]
 800fa86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fa8a:	b2d9      	uxtb	r1, r3
 800fa8c:	2909      	cmp	r1, #9
 800fa8e:	d926      	bls.n	800fade <_strtod_l+0x1ae>
 800fa90:	494c      	ldr	r1, [pc, #304]	; (800fbc4 <_strtod_l+0x294>)
 800fa92:	2201      	movs	r2, #1
 800fa94:	f000 ff25 	bl	80108e2 <strncmp>
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d030      	beq.n	800fafe <_strtod_l+0x1ce>
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	4632      	mov	r2, r6
 800faa0:	9005      	str	r0, [sp, #20]
 800faa2:	465e      	mov	r6, fp
 800faa4:	4603      	mov	r3, r0
 800faa6:	2a65      	cmp	r2, #101	; 0x65
 800faa8:	d001      	beq.n	800faae <_strtod_l+0x17e>
 800faaa:	2a45      	cmp	r2, #69	; 0x45
 800faac:	d113      	bne.n	800fad6 <_strtod_l+0x1a6>
 800faae:	b91e      	cbnz	r6, 800fab8 <_strtod_l+0x188>
 800fab0:	9a04      	ldr	r2, [sp, #16]
 800fab2:	4302      	orrs	r2, r0
 800fab4:	d094      	beq.n	800f9e0 <_strtod_l+0xb0>
 800fab6:	2600      	movs	r6, #0
 800fab8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800faba:	1c6a      	adds	r2, r5, #1
 800fabc:	9215      	str	r2, [sp, #84]	; 0x54
 800fabe:	786a      	ldrb	r2, [r5, #1]
 800fac0:	2a2b      	cmp	r2, #43	; 0x2b
 800fac2:	d074      	beq.n	800fbae <_strtod_l+0x27e>
 800fac4:	2a2d      	cmp	r2, #45	; 0x2d
 800fac6:	d078      	beq.n	800fbba <_strtod_l+0x28a>
 800fac8:	f04f 0c00 	mov.w	ip, #0
 800facc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fad0:	2909      	cmp	r1, #9
 800fad2:	d97f      	bls.n	800fbd4 <_strtod_l+0x2a4>
 800fad4:	9515      	str	r5, [sp, #84]	; 0x54
 800fad6:	2700      	movs	r7, #0
 800fad8:	e09e      	b.n	800fc18 <_strtod_l+0x2e8>
 800fada:	2300      	movs	r3, #0
 800fadc:	e7c8      	b.n	800fa70 <_strtod_l+0x140>
 800fade:	f1bb 0f08 	cmp.w	fp, #8
 800fae2:	bfd8      	it	le
 800fae4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fae6:	f100 0001 	add.w	r0, r0, #1
 800faea:	bfda      	itte	le
 800faec:	fb02 3301 	mlale	r3, r2, r1, r3
 800faf0:	9309      	strle	r3, [sp, #36]	; 0x24
 800faf2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800faf6:	f10b 0b01 	add.w	fp, fp, #1
 800fafa:	9015      	str	r0, [sp, #84]	; 0x54
 800fafc:	e7c1      	b.n	800fa82 <_strtod_l+0x152>
 800fafe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb00:	1c5a      	adds	r2, r3, #1
 800fb02:	9215      	str	r2, [sp, #84]	; 0x54
 800fb04:	785a      	ldrb	r2, [r3, #1]
 800fb06:	f1bb 0f00 	cmp.w	fp, #0
 800fb0a:	d037      	beq.n	800fb7c <_strtod_l+0x24c>
 800fb0c:	9005      	str	r0, [sp, #20]
 800fb0e:	465e      	mov	r6, fp
 800fb10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fb14:	2b09      	cmp	r3, #9
 800fb16:	d912      	bls.n	800fb3e <_strtod_l+0x20e>
 800fb18:	2301      	movs	r3, #1
 800fb1a:	e7c4      	b.n	800faa6 <_strtod_l+0x176>
 800fb1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb1e:	1c5a      	adds	r2, r3, #1
 800fb20:	9215      	str	r2, [sp, #84]	; 0x54
 800fb22:	785a      	ldrb	r2, [r3, #1]
 800fb24:	3001      	adds	r0, #1
 800fb26:	2a30      	cmp	r2, #48	; 0x30
 800fb28:	d0f8      	beq.n	800fb1c <_strtod_l+0x1ec>
 800fb2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fb2e:	2b08      	cmp	r3, #8
 800fb30:	f200 84c1 	bhi.w	80104b6 <_strtod_l+0xb86>
 800fb34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb36:	9005      	str	r0, [sp, #20]
 800fb38:	2000      	movs	r0, #0
 800fb3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	3a30      	subs	r2, #48	; 0x30
 800fb40:	f100 0301 	add.w	r3, r0, #1
 800fb44:	d014      	beq.n	800fb70 <_strtod_l+0x240>
 800fb46:	9905      	ldr	r1, [sp, #20]
 800fb48:	4419      	add	r1, r3
 800fb4a:	9105      	str	r1, [sp, #20]
 800fb4c:	4633      	mov	r3, r6
 800fb4e:	eb00 0c06 	add.w	ip, r0, r6
 800fb52:	210a      	movs	r1, #10
 800fb54:	4563      	cmp	r3, ip
 800fb56:	d113      	bne.n	800fb80 <_strtod_l+0x250>
 800fb58:	1833      	adds	r3, r6, r0
 800fb5a:	2b08      	cmp	r3, #8
 800fb5c:	f106 0601 	add.w	r6, r6, #1
 800fb60:	4406      	add	r6, r0
 800fb62:	dc1a      	bgt.n	800fb9a <_strtod_l+0x26a>
 800fb64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb66:	230a      	movs	r3, #10
 800fb68:	fb03 2301 	mla	r3, r3, r1, r2
 800fb6c:	9309      	str	r3, [sp, #36]	; 0x24
 800fb6e:	2300      	movs	r3, #0
 800fb70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fb72:	1c51      	adds	r1, r2, #1
 800fb74:	9115      	str	r1, [sp, #84]	; 0x54
 800fb76:	7852      	ldrb	r2, [r2, #1]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	e7c9      	b.n	800fb10 <_strtod_l+0x1e0>
 800fb7c:	4658      	mov	r0, fp
 800fb7e:	e7d2      	b.n	800fb26 <_strtod_l+0x1f6>
 800fb80:	2b08      	cmp	r3, #8
 800fb82:	f103 0301 	add.w	r3, r3, #1
 800fb86:	dc03      	bgt.n	800fb90 <_strtod_l+0x260>
 800fb88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fb8a:	434f      	muls	r7, r1
 800fb8c:	9709      	str	r7, [sp, #36]	; 0x24
 800fb8e:	e7e1      	b.n	800fb54 <_strtod_l+0x224>
 800fb90:	2b10      	cmp	r3, #16
 800fb92:	bfd8      	it	le
 800fb94:	fb01 fa0a 	mulle.w	sl, r1, sl
 800fb98:	e7dc      	b.n	800fb54 <_strtod_l+0x224>
 800fb9a:	2e10      	cmp	r6, #16
 800fb9c:	bfdc      	itt	le
 800fb9e:	230a      	movle	r3, #10
 800fba0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800fba4:	e7e3      	b.n	800fb6e <_strtod_l+0x23e>
 800fba6:	2300      	movs	r3, #0
 800fba8:	9305      	str	r3, [sp, #20]
 800fbaa:	2301      	movs	r3, #1
 800fbac:	e780      	b.n	800fab0 <_strtod_l+0x180>
 800fbae:	f04f 0c00 	mov.w	ip, #0
 800fbb2:	1caa      	adds	r2, r5, #2
 800fbb4:	9215      	str	r2, [sp, #84]	; 0x54
 800fbb6:	78aa      	ldrb	r2, [r5, #2]
 800fbb8:	e788      	b.n	800facc <_strtod_l+0x19c>
 800fbba:	f04f 0c01 	mov.w	ip, #1
 800fbbe:	e7f8      	b.n	800fbb2 <_strtod_l+0x282>
 800fbc0:	080139b0 	.word	0x080139b0
 800fbc4:	080139a0 	.word	0x080139a0
 800fbc8:	7ff00000 	.word	0x7ff00000
 800fbcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fbce:	1c51      	adds	r1, r2, #1
 800fbd0:	9115      	str	r1, [sp, #84]	; 0x54
 800fbd2:	7852      	ldrb	r2, [r2, #1]
 800fbd4:	2a30      	cmp	r2, #48	; 0x30
 800fbd6:	d0f9      	beq.n	800fbcc <_strtod_l+0x29c>
 800fbd8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fbdc:	2908      	cmp	r1, #8
 800fbde:	f63f af7a 	bhi.w	800fad6 <_strtod_l+0x1a6>
 800fbe2:	3a30      	subs	r2, #48	; 0x30
 800fbe4:	9208      	str	r2, [sp, #32]
 800fbe6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fbe8:	920c      	str	r2, [sp, #48]	; 0x30
 800fbea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fbec:	1c57      	adds	r7, r2, #1
 800fbee:	9715      	str	r7, [sp, #84]	; 0x54
 800fbf0:	7852      	ldrb	r2, [r2, #1]
 800fbf2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fbf6:	f1be 0f09 	cmp.w	lr, #9
 800fbfa:	d938      	bls.n	800fc6e <_strtod_l+0x33e>
 800fbfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fbfe:	1a7f      	subs	r7, r7, r1
 800fc00:	2f08      	cmp	r7, #8
 800fc02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fc06:	dc03      	bgt.n	800fc10 <_strtod_l+0x2e0>
 800fc08:	9908      	ldr	r1, [sp, #32]
 800fc0a:	428f      	cmp	r7, r1
 800fc0c:	bfa8      	it	ge
 800fc0e:	460f      	movge	r7, r1
 800fc10:	f1bc 0f00 	cmp.w	ip, #0
 800fc14:	d000      	beq.n	800fc18 <_strtod_l+0x2e8>
 800fc16:	427f      	negs	r7, r7
 800fc18:	2e00      	cmp	r6, #0
 800fc1a:	d14f      	bne.n	800fcbc <_strtod_l+0x38c>
 800fc1c:	9904      	ldr	r1, [sp, #16]
 800fc1e:	4301      	orrs	r1, r0
 800fc20:	f47f aec1 	bne.w	800f9a6 <_strtod_l+0x76>
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f47f aedb 	bne.w	800f9e0 <_strtod_l+0xb0>
 800fc2a:	2a69      	cmp	r2, #105	; 0x69
 800fc2c:	d029      	beq.n	800fc82 <_strtod_l+0x352>
 800fc2e:	dc26      	bgt.n	800fc7e <_strtod_l+0x34e>
 800fc30:	2a49      	cmp	r2, #73	; 0x49
 800fc32:	d026      	beq.n	800fc82 <_strtod_l+0x352>
 800fc34:	2a4e      	cmp	r2, #78	; 0x4e
 800fc36:	f47f aed3 	bne.w	800f9e0 <_strtod_l+0xb0>
 800fc3a:	499b      	ldr	r1, [pc, #620]	; (800fea8 <_strtod_l+0x578>)
 800fc3c:	a815      	add	r0, sp, #84	; 0x54
 800fc3e:	f001 fa37 	bl	80110b0 <__match>
 800fc42:	2800      	cmp	r0, #0
 800fc44:	f43f aecc 	beq.w	800f9e0 <_strtod_l+0xb0>
 800fc48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	2b28      	cmp	r3, #40	; 0x28
 800fc4e:	d12f      	bne.n	800fcb0 <_strtod_l+0x380>
 800fc50:	4996      	ldr	r1, [pc, #600]	; (800feac <_strtod_l+0x57c>)
 800fc52:	aa18      	add	r2, sp, #96	; 0x60
 800fc54:	a815      	add	r0, sp, #84	; 0x54
 800fc56:	f001 fa3f 	bl	80110d8 <__hexnan>
 800fc5a:	2805      	cmp	r0, #5
 800fc5c:	d128      	bne.n	800fcb0 <_strtod_l+0x380>
 800fc5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fc64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800fc68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800fc6c:	e69b      	b.n	800f9a6 <_strtod_l+0x76>
 800fc6e:	9f08      	ldr	r7, [sp, #32]
 800fc70:	210a      	movs	r1, #10
 800fc72:	fb01 2107 	mla	r1, r1, r7, r2
 800fc76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800fc7a:	9208      	str	r2, [sp, #32]
 800fc7c:	e7b5      	b.n	800fbea <_strtod_l+0x2ba>
 800fc7e:	2a6e      	cmp	r2, #110	; 0x6e
 800fc80:	e7d9      	b.n	800fc36 <_strtod_l+0x306>
 800fc82:	498b      	ldr	r1, [pc, #556]	; (800feb0 <_strtod_l+0x580>)
 800fc84:	a815      	add	r0, sp, #84	; 0x54
 800fc86:	f001 fa13 	bl	80110b0 <__match>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	f43f aea8 	beq.w	800f9e0 <_strtod_l+0xb0>
 800fc90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc92:	4988      	ldr	r1, [pc, #544]	; (800feb4 <_strtod_l+0x584>)
 800fc94:	3b01      	subs	r3, #1
 800fc96:	a815      	add	r0, sp, #84	; 0x54
 800fc98:	9315      	str	r3, [sp, #84]	; 0x54
 800fc9a:	f001 fa09 	bl	80110b0 <__match>
 800fc9e:	b910      	cbnz	r0, 800fca6 <_strtod_l+0x376>
 800fca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fca2:	3301      	adds	r3, #1
 800fca4:	9315      	str	r3, [sp, #84]	; 0x54
 800fca6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800fec4 <_strtod_l+0x594>
 800fcaa:	f04f 0800 	mov.w	r8, #0
 800fcae:	e67a      	b.n	800f9a6 <_strtod_l+0x76>
 800fcb0:	4881      	ldr	r0, [pc, #516]	; (800feb8 <_strtod_l+0x588>)
 800fcb2:	f000 ff01 	bl	8010ab8 <nan>
 800fcb6:	ec59 8b10 	vmov	r8, r9, d0
 800fcba:	e674      	b.n	800f9a6 <_strtod_l+0x76>
 800fcbc:	9b05      	ldr	r3, [sp, #20]
 800fcbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcc0:	1afb      	subs	r3, r7, r3
 800fcc2:	f1bb 0f00 	cmp.w	fp, #0
 800fcc6:	bf08      	it	eq
 800fcc8:	46b3      	moveq	fp, r6
 800fcca:	2e10      	cmp	r6, #16
 800fccc:	9308      	str	r3, [sp, #32]
 800fcce:	4635      	mov	r5, r6
 800fcd0:	bfa8      	it	ge
 800fcd2:	2510      	movge	r5, #16
 800fcd4:	f7f0 fc26 	bl	8000524 <__aeabi_ui2d>
 800fcd8:	2e09      	cmp	r6, #9
 800fcda:	4680      	mov	r8, r0
 800fcdc:	4689      	mov	r9, r1
 800fcde:	dd13      	ble.n	800fd08 <_strtod_l+0x3d8>
 800fce0:	4b76      	ldr	r3, [pc, #472]	; (800febc <_strtod_l+0x58c>)
 800fce2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fce6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fcea:	f7f0 fc95 	bl	8000618 <__aeabi_dmul>
 800fcee:	4680      	mov	r8, r0
 800fcf0:	4650      	mov	r0, sl
 800fcf2:	4689      	mov	r9, r1
 800fcf4:	f7f0 fc16 	bl	8000524 <__aeabi_ui2d>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	4640      	mov	r0, r8
 800fcfe:	4649      	mov	r1, r9
 800fd00:	f7f0 fad4 	bl	80002ac <__adddf3>
 800fd04:	4680      	mov	r8, r0
 800fd06:	4689      	mov	r9, r1
 800fd08:	2e0f      	cmp	r6, #15
 800fd0a:	dc38      	bgt.n	800fd7e <_strtod_l+0x44e>
 800fd0c:	9b08      	ldr	r3, [sp, #32]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f43f ae49 	beq.w	800f9a6 <_strtod_l+0x76>
 800fd14:	dd24      	ble.n	800fd60 <_strtod_l+0x430>
 800fd16:	2b16      	cmp	r3, #22
 800fd18:	dc0b      	bgt.n	800fd32 <_strtod_l+0x402>
 800fd1a:	4968      	ldr	r1, [pc, #416]	; (800febc <_strtod_l+0x58c>)
 800fd1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd24:	4642      	mov	r2, r8
 800fd26:	464b      	mov	r3, r9
 800fd28:	f7f0 fc76 	bl	8000618 <__aeabi_dmul>
 800fd2c:	4680      	mov	r8, r0
 800fd2e:	4689      	mov	r9, r1
 800fd30:	e639      	b.n	800f9a6 <_strtod_l+0x76>
 800fd32:	9a08      	ldr	r2, [sp, #32]
 800fd34:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	db20      	blt.n	800fd7e <_strtod_l+0x44e>
 800fd3c:	4c5f      	ldr	r4, [pc, #380]	; (800febc <_strtod_l+0x58c>)
 800fd3e:	f1c6 060f 	rsb	r6, r6, #15
 800fd42:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800fd46:	4642      	mov	r2, r8
 800fd48:	464b      	mov	r3, r9
 800fd4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd4e:	f7f0 fc63 	bl	8000618 <__aeabi_dmul>
 800fd52:	9b08      	ldr	r3, [sp, #32]
 800fd54:	1b9e      	subs	r6, r3, r6
 800fd56:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800fd5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fd5e:	e7e3      	b.n	800fd28 <_strtod_l+0x3f8>
 800fd60:	9b08      	ldr	r3, [sp, #32]
 800fd62:	3316      	adds	r3, #22
 800fd64:	db0b      	blt.n	800fd7e <_strtod_l+0x44e>
 800fd66:	9b05      	ldr	r3, [sp, #20]
 800fd68:	1bdf      	subs	r7, r3, r7
 800fd6a:	4b54      	ldr	r3, [pc, #336]	; (800febc <_strtod_l+0x58c>)
 800fd6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fd70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd74:	4640      	mov	r0, r8
 800fd76:	4649      	mov	r1, r9
 800fd78:	f7f0 fd78 	bl	800086c <__aeabi_ddiv>
 800fd7c:	e7d6      	b.n	800fd2c <_strtod_l+0x3fc>
 800fd7e:	9b08      	ldr	r3, [sp, #32]
 800fd80:	1b75      	subs	r5, r6, r5
 800fd82:	441d      	add	r5, r3
 800fd84:	2d00      	cmp	r5, #0
 800fd86:	dd70      	ble.n	800fe6a <_strtod_l+0x53a>
 800fd88:	f015 030f 	ands.w	r3, r5, #15
 800fd8c:	d00a      	beq.n	800fda4 <_strtod_l+0x474>
 800fd8e:	494b      	ldr	r1, [pc, #300]	; (800febc <_strtod_l+0x58c>)
 800fd90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd94:	4642      	mov	r2, r8
 800fd96:	464b      	mov	r3, r9
 800fd98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd9c:	f7f0 fc3c 	bl	8000618 <__aeabi_dmul>
 800fda0:	4680      	mov	r8, r0
 800fda2:	4689      	mov	r9, r1
 800fda4:	f035 050f 	bics.w	r5, r5, #15
 800fda8:	d04d      	beq.n	800fe46 <_strtod_l+0x516>
 800fdaa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800fdae:	dd22      	ble.n	800fdf6 <_strtod_l+0x4c6>
 800fdb0:	2500      	movs	r5, #0
 800fdb2:	46ab      	mov	fp, r5
 800fdb4:	9509      	str	r5, [sp, #36]	; 0x24
 800fdb6:	9505      	str	r5, [sp, #20]
 800fdb8:	2322      	movs	r3, #34	; 0x22
 800fdba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800fec4 <_strtod_l+0x594>
 800fdbe:	6023      	str	r3, [r4, #0]
 800fdc0:	f04f 0800 	mov.w	r8, #0
 800fdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	f43f aded 	beq.w	800f9a6 <_strtod_l+0x76>
 800fdcc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f001 fa70 	bl	80112b4 <_Bfree>
 800fdd4:	9905      	ldr	r1, [sp, #20]
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f001 fa6c 	bl	80112b4 <_Bfree>
 800fddc:	4659      	mov	r1, fp
 800fdde:	4620      	mov	r0, r4
 800fde0:	f001 fa68 	bl	80112b4 <_Bfree>
 800fde4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fde6:	4620      	mov	r0, r4
 800fde8:	f001 fa64 	bl	80112b4 <_Bfree>
 800fdec:	4629      	mov	r1, r5
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f001 fa60 	bl	80112b4 <_Bfree>
 800fdf4:	e5d7      	b.n	800f9a6 <_strtod_l+0x76>
 800fdf6:	4b32      	ldr	r3, [pc, #200]	; (800fec0 <_strtod_l+0x590>)
 800fdf8:	9304      	str	r3, [sp, #16]
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	112d      	asrs	r5, r5, #4
 800fdfe:	4640      	mov	r0, r8
 800fe00:	4649      	mov	r1, r9
 800fe02:	469a      	mov	sl, r3
 800fe04:	2d01      	cmp	r5, #1
 800fe06:	dc21      	bgt.n	800fe4c <_strtod_l+0x51c>
 800fe08:	b10b      	cbz	r3, 800fe0e <_strtod_l+0x4de>
 800fe0a:	4680      	mov	r8, r0
 800fe0c:	4689      	mov	r9, r1
 800fe0e:	492c      	ldr	r1, [pc, #176]	; (800fec0 <_strtod_l+0x590>)
 800fe10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800fe14:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fe18:	4642      	mov	r2, r8
 800fe1a:	464b      	mov	r3, r9
 800fe1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe20:	f7f0 fbfa 	bl	8000618 <__aeabi_dmul>
 800fe24:	4b27      	ldr	r3, [pc, #156]	; (800fec4 <_strtod_l+0x594>)
 800fe26:	460a      	mov	r2, r1
 800fe28:	400b      	ands	r3, r1
 800fe2a:	4927      	ldr	r1, [pc, #156]	; (800fec8 <_strtod_l+0x598>)
 800fe2c:	428b      	cmp	r3, r1
 800fe2e:	4680      	mov	r8, r0
 800fe30:	d8be      	bhi.n	800fdb0 <_strtod_l+0x480>
 800fe32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fe36:	428b      	cmp	r3, r1
 800fe38:	bf86      	itte	hi
 800fe3a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800fecc <_strtod_l+0x59c>
 800fe3e:	f04f 38ff 	movhi.w	r8, #4294967295
 800fe42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800fe46:	2300      	movs	r3, #0
 800fe48:	9304      	str	r3, [sp, #16]
 800fe4a:	e07b      	b.n	800ff44 <_strtod_l+0x614>
 800fe4c:	07ea      	lsls	r2, r5, #31
 800fe4e:	d505      	bpl.n	800fe5c <_strtod_l+0x52c>
 800fe50:	9b04      	ldr	r3, [sp, #16]
 800fe52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe56:	f7f0 fbdf 	bl	8000618 <__aeabi_dmul>
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	9a04      	ldr	r2, [sp, #16]
 800fe5e:	3208      	adds	r2, #8
 800fe60:	f10a 0a01 	add.w	sl, sl, #1
 800fe64:	106d      	asrs	r5, r5, #1
 800fe66:	9204      	str	r2, [sp, #16]
 800fe68:	e7cc      	b.n	800fe04 <_strtod_l+0x4d4>
 800fe6a:	d0ec      	beq.n	800fe46 <_strtod_l+0x516>
 800fe6c:	426d      	negs	r5, r5
 800fe6e:	f015 020f 	ands.w	r2, r5, #15
 800fe72:	d00a      	beq.n	800fe8a <_strtod_l+0x55a>
 800fe74:	4b11      	ldr	r3, [pc, #68]	; (800febc <_strtod_l+0x58c>)
 800fe76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe7a:	4640      	mov	r0, r8
 800fe7c:	4649      	mov	r1, r9
 800fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe82:	f7f0 fcf3 	bl	800086c <__aeabi_ddiv>
 800fe86:	4680      	mov	r8, r0
 800fe88:	4689      	mov	r9, r1
 800fe8a:	112d      	asrs	r5, r5, #4
 800fe8c:	d0db      	beq.n	800fe46 <_strtod_l+0x516>
 800fe8e:	2d1f      	cmp	r5, #31
 800fe90:	dd1e      	ble.n	800fed0 <_strtod_l+0x5a0>
 800fe92:	2500      	movs	r5, #0
 800fe94:	46ab      	mov	fp, r5
 800fe96:	9509      	str	r5, [sp, #36]	; 0x24
 800fe98:	9505      	str	r5, [sp, #20]
 800fe9a:	2322      	movs	r3, #34	; 0x22
 800fe9c:	f04f 0800 	mov.w	r8, #0
 800fea0:	f04f 0900 	mov.w	r9, #0
 800fea4:	6023      	str	r3, [r4, #0]
 800fea6:	e78d      	b.n	800fdc4 <_strtod_l+0x494>
 800fea8:	080139ab 	.word	0x080139ab
 800feac:	080139c4 	.word	0x080139c4
 800feb0:	080139a2 	.word	0x080139a2
 800feb4:	080139a5 	.word	0x080139a5
 800feb8:	08013d75 	.word	0x08013d75
 800febc:	08013c18 	.word	0x08013c18
 800fec0:	08013bf0 	.word	0x08013bf0
 800fec4:	7ff00000 	.word	0x7ff00000
 800fec8:	7ca00000 	.word	0x7ca00000
 800fecc:	7fefffff 	.word	0x7fefffff
 800fed0:	f015 0310 	ands.w	r3, r5, #16
 800fed4:	bf18      	it	ne
 800fed6:	236a      	movne	r3, #106	; 0x6a
 800fed8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801027c <_strtod_l+0x94c>
 800fedc:	9304      	str	r3, [sp, #16]
 800fede:	4640      	mov	r0, r8
 800fee0:	4649      	mov	r1, r9
 800fee2:	2300      	movs	r3, #0
 800fee4:	07ea      	lsls	r2, r5, #31
 800fee6:	d504      	bpl.n	800fef2 <_strtod_l+0x5c2>
 800fee8:	e9da 2300 	ldrd	r2, r3, [sl]
 800feec:	f7f0 fb94 	bl	8000618 <__aeabi_dmul>
 800fef0:	2301      	movs	r3, #1
 800fef2:	106d      	asrs	r5, r5, #1
 800fef4:	f10a 0a08 	add.w	sl, sl, #8
 800fef8:	d1f4      	bne.n	800fee4 <_strtod_l+0x5b4>
 800fefa:	b10b      	cbz	r3, 800ff00 <_strtod_l+0x5d0>
 800fefc:	4680      	mov	r8, r0
 800fefe:	4689      	mov	r9, r1
 800ff00:	9b04      	ldr	r3, [sp, #16]
 800ff02:	b1bb      	cbz	r3, 800ff34 <_strtod_l+0x604>
 800ff04:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ff08:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	4649      	mov	r1, r9
 800ff10:	dd10      	ble.n	800ff34 <_strtod_l+0x604>
 800ff12:	2b1f      	cmp	r3, #31
 800ff14:	f340 811e 	ble.w	8010154 <_strtod_l+0x824>
 800ff18:	2b34      	cmp	r3, #52	; 0x34
 800ff1a:	bfde      	ittt	le
 800ff1c:	f04f 33ff 	movle.w	r3, #4294967295
 800ff20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ff24:	4093      	lslle	r3, r2
 800ff26:	f04f 0800 	mov.w	r8, #0
 800ff2a:	bfcc      	ite	gt
 800ff2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ff30:	ea03 0901 	andle.w	r9, r3, r1
 800ff34:	2200      	movs	r2, #0
 800ff36:	2300      	movs	r3, #0
 800ff38:	4640      	mov	r0, r8
 800ff3a:	4649      	mov	r1, r9
 800ff3c:	f7f0 fdd4 	bl	8000ae8 <__aeabi_dcmpeq>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d1a6      	bne.n	800fe92 <_strtod_l+0x562>
 800ff44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff46:	9300      	str	r3, [sp, #0]
 800ff48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff4a:	4633      	mov	r3, r6
 800ff4c:	465a      	mov	r2, fp
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f001 fa18 	bl	8011384 <__s2b>
 800ff54:	9009      	str	r0, [sp, #36]	; 0x24
 800ff56:	2800      	cmp	r0, #0
 800ff58:	f43f af2a 	beq.w	800fdb0 <_strtod_l+0x480>
 800ff5c:	9a08      	ldr	r2, [sp, #32]
 800ff5e:	9b05      	ldr	r3, [sp, #20]
 800ff60:	2a00      	cmp	r2, #0
 800ff62:	eba3 0307 	sub.w	r3, r3, r7
 800ff66:	bfa8      	it	ge
 800ff68:	2300      	movge	r3, #0
 800ff6a:	930c      	str	r3, [sp, #48]	; 0x30
 800ff6c:	2500      	movs	r5, #0
 800ff6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ff72:	9312      	str	r3, [sp, #72]	; 0x48
 800ff74:	46ab      	mov	fp, r5
 800ff76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff78:	4620      	mov	r0, r4
 800ff7a:	6859      	ldr	r1, [r3, #4]
 800ff7c:	f001 f95a 	bl	8011234 <_Balloc>
 800ff80:	9005      	str	r0, [sp, #20]
 800ff82:	2800      	cmp	r0, #0
 800ff84:	f43f af18 	beq.w	800fdb8 <_strtod_l+0x488>
 800ff88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff8a:	691a      	ldr	r2, [r3, #16]
 800ff8c:	3202      	adds	r2, #2
 800ff8e:	f103 010c 	add.w	r1, r3, #12
 800ff92:	0092      	lsls	r2, r2, #2
 800ff94:	300c      	adds	r0, #12
 800ff96:	f000 fd7e 	bl	8010a96 <memcpy>
 800ff9a:	ec49 8b10 	vmov	d0, r8, r9
 800ff9e:	aa18      	add	r2, sp, #96	; 0x60
 800ffa0:	a917      	add	r1, sp, #92	; 0x5c
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f001 fd22 	bl	80119ec <__d2b>
 800ffa8:	ec49 8b18 	vmov	d8, r8, r9
 800ffac:	9016      	str	r0, [sp, #88]	; 0x58
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	f43f af02 	beq.w	800fdb8 <_strtod_l+0x488>
 800ffb4:	2101      	movs	r1, #1
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	f001 fa7c 	bl	80114b4 <__i2b>
 800ffbc:	4683      	mov	fp, r0
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	f43f aefa 	beq.w	800fdb8 <_strtod_l+0x488>
 800ffc4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ffc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ffc8:	2e00      	cmp	r6, #0
 800ffca:	bfab      	itete	ge
 800ffcc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ffce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ffd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ffd2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ffd6:	bfac      	ite	ge
 800ffd8:	eb06 0a03 	addge.w	sl, r6, r3
 800ffdc:	1b9f      	sublt	r7, r3, r6
 800ffde:	9b04      	ldr	r3, [sp, #16]
 800ffe0:	1af6      	subs	r6, r6, r3
 800ffe2:	4416      	add	r6, r2
 800ffe4:	4ba0      	ldr	r3, [pc, #640]	; (8010268 <_strtod_l+0x938>)
 800ffe6:	3e01      	subs	r6, #1
 800ffe8:	429e      	cmp	r6, r3
 800ffea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ffee:	f280 80c4 	bge.w	801017a <_strtod_l+0x84a>
 800fff2:	1b9b      	subs	r3, r3, r6
 800fff4:	2b1f      	cmp	r3, #31
 800fff6:	eba2 0203 	sub.w	r2, r2, r3
 800fffa:	f04f 0101 	mov.w	r1, #1
 800fffe:	f300 80b0 	bgt.w	8010162 <_strtod_l+0x832>
 8010002:	fa01 f303 	lsl.w	r3, r1, r3
 8010006:	930e      	str	r3, [sp, #56]	; 0x38
 8010008:	2300      	movs	r3, #0
 801000a:	930d      	str	r3, [sp, #52]	; 0x34
 801000c:	eb0a 0602 	add.w	r6, sl, r2
 8010010:	9b04      	ldr	r3, [sp, #16]
 8010012:	45b2      	cmp	sl, r6
 8010014:	4417      	add	r7, r2
 8010016:	441f      	add	r7, r3
 8010018:	4653      	mov	r3, sl
 801001a:	bfa8      	it	ge
 801001c:	4633      	movge	r3, r6
 801001e:	42bb      	cmp	r3, r7
 8010020:	bfa8      	it	ge
 8010022:	463b      	movge	r3, r7
 8010024:	2b00      	cmp	r3, #0
 8010026:	bfc2      	ittt	gt
 8010028:	1af6      	subgt	r6, r6, r3
 801002a:	1aff      	subgt	r7, r7, r3
 801002c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010032:	2b00      	cmp	r3, #0
 8010034:	dd17      	ble.n	8010066 <_strtod_l+0x736>
 8010036:	4659      	mov	r1, fp
 8010038:	461a      	mov	r2, r3
 801003a:	4620      	mov	r0, r4
 801003c:	f001 fafa 	bl	8011634 <__pow5mult>
 8010040:	4683      	mov	fp, r0
 8010042:	2800      	cmp	r0, #0
 8010044:	f43f aeb8 	beq.w	800fdb8 <_strtod_l+0x488>
 8010048:	4601      	mov	r1, r0
 801004a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801004c:	4620      	mov	r0, r4
 801004e:	f001 fa47 	bl	80114e0 <__multiply>
 8010052:	900b      	str	r0, [sp, #44]	; 0x2c
 8010054:	2800      	cmp	r0, #0
 8010056:	f43f aeaf 	beq.w	800fdb8 <_strtod_l+0x488>
 801005a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801005c:	4620      	mov	r0, r4
 801005e:	f001 f929 	bl	80112b4 <_Bfree>
 8010062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010064:	9316      	str	r3, [sp, #88]	; 0x58
 8010066:	2e00      	cmp	r6, #0
 8010068:	f300 808c 	bgt.w	8010184 <_strtod_l+0x854>
 801006c:	9b08      	ldr	r3, [sp, #32]
 801006e:	2b00      	cmp	r3, #0
 8010070:	dd08      	ble.n	8010084 <_strtod_l+0x754>
 8010072:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010074:	9905      	ldr	r1, [sp, #20]
 8010076:	4620      	mov	r0, r4
 8010078:	f001 fadc 	bl	8011634 <__pow5mult>
 801007c:	9005      	str	r0, [sp, #20]
 801007e:	2800      	cmp	r0, #0
 8010080:	f43f ae9a 	beq.w	800fdb8 <_strtod_l+0x488>
 8010084:	2f00      	cmp	r7, #0
 8010086:	dd08      	ble.n	801009a <_strtod_l+0x76a>
 8010088:	9905      	ldr	r1, [sp, #20]
 801008a:	463a      	mov	r2, r7
 801008c:	4620      	mov	r0, r4
 801008e:	f001 fb2b 	bl	80116e8 <__lshift>
 8010092:	9005      	str	r0, [sp, #20]
 8010094:	2800      	cmp	r0, #0
 8010096:	f43f ae8f 	beq.w	800fdb8 <_strtod_l+0x488>
 801009a:	f1ba 0f00 	cmp.w	sl, #0
 801009e:	dd08      	ble.n	80100b2 <_strtod_l+0x782>
 80100a0:	4659      	mov	r1, fp
 80100a2:	4652      	mov	r2, sl
 80100a4:	4620      	mov	r0, r4
 80100a6:	f001 fb1f 	bl	80116e8 <__lshift>
 80100aa:	4683      	mov	fp, r0
 80100ac:	2800      	cmp	r0, #0
 80100ae:	f43f ae83 	beq.w	800fdb8 <_strtod_l+0x488>
 80100b2:	9a05      	ldr	r2, [sp, #20]
 80100b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80100b6:	4620      	mov	r0, r4
 80100b8:	f001 fb9e 	bl	80117f8 <__mdiff>
 80100bc:	4605      	mov	r5, r0
 80100be:	2800      	cmp	r0, #0
 80100c0:	f43f ae7a 	beq.w	800fdb8 <_strtod_l+0x488>
 80100c4:	68c3      	ldr	r3, [r0, #12]
 80100c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80100c8:	2300      	movs	r3, #0
 80100ca:	60c3      	str	r3, [r0, #12]
 80100cc:	4659      	mov	r1, fp
 80100ce:	f001 fb77 	bl	80117c0 <__mcmp>
 80100d2:	2800      	cmp	r0, #0
 80100d4:	da60      	bge.n	8010198 <_strtod_l+0x868>
 80100d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100d8:	ea53 0308 	orrs.w	r3, r3, r8
 80100dc:	f040 8084 	bne.w	80101e8 <_strtod_l+0x8b8>
 80100e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d17f      	bne.n	80101e8 <_strtod_l+0x8b8>
 80100e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80100ec:	0d1b      	lsrs	r3, r3, #20
 80100ee:	051b      	lsls	r3, r3, #20
 80100f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80100f4:	d978      	bls.n	80101e8 <_strtod_l+0x8b8>
 80100f6:	696b      	ldr	r3, [r5, #20]
 80100f8:	b913      	cbnz	r3, 8010100 <_strtod_l+0x7d0>
 80100fa:	692b      	ldr	r3, [r5, #16]
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	dd73      	ble.n	80101e8 <_strtod_l+0x8b8>
 8010100:	4629      	mov	r1, r5
 8010102:	2201      	movs	r2, #1
 8010104:	4620      	mov	r0, r4
 8010106:	f001 faef 	bl	80116e8 <__lshift>
 801010a:	4659      	mov	r1, fp
 801010c:	4605      	mov	r5, r0
 801010e:	f001 fb57 	bl	80117c0 <__mcmp>
 8010112:	2800      	cmp	r0, #0
 8010114:	dd68      	ble.n	80101e8 <_strtod_l+0x8b8>
 8010116:	9904      	ldr	r1, [sp, #16]
 8010118:	4a54      	ldr	r2, [pc, #336]	; (801026c <_strtod_l+0x93c>)
 801011a:	464b      	mov	r3, r9
 801011c:	2900      	cmp	r1, #0
 801011e:	f000 8084 	beq.w	801022a <_strtod_l+0x8fa>
 8010122:	ea02 0109 	and.w	r1, r2, r9
 8010126:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801012a:	dc7e      	bgt.n	801022a <_strtod_l+0x8fa>
 801012c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010130:	f77f aeb3 	ble.w	800fe9a <_strtod_l+0x56a>
 8010134:	4b4e      	ldr	r3, [pc, #312]	; (8010270 <_strtod_l+0x940>)
 8010136:	4640      	mov	r0, r8
 8010138:	4649      	mov	r1, r9
 801013a:	2200      	movs	r2, #0
 801013c:	f7f0 fa6c 	bl	8000618 <__aeabi_dmul>
 8010140:	4b4a      	ldr	r3, [pc, #296]	; (801026c <_strtod_l+0x93c>)
 8010142:	400b      	ands	r3, r1
 8010144:	4680      	mov	r8, r0
 8010146:	4689      	mov	r9, r1
 8010148:	2b00      	cmp	r3, #0
 801014a:	f47f ae3f 	bne.w	800fdcc <_strtod_l+0x49c>
 801014e:	2322      	movs	r3, #34	; 0x22
 8010150:	6023      	str	r3, [r4, #0]
 8010152:	e63b      	b.n	800fdcc <_strtod_l+0x49c>
 8010154:	f04f 32ff 	mov.w	r2, #4294967295
 8010158:	fa02 f303 	lsl.w	r3, r2, r3
 801015c:	ea03 0808 	and.w	r8, r3, r8
 8010160:	e6e8      	b.n	800ff34 <_strtod_l+0x604>
 8010162:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010166:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801016a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801016e:	36e2      	adds	r6, #226	; 0xe2
 8010170:	fa01 f306 	lsl.w	r3, r1, r6
 8010174:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010178:	e748      	b.n	801000c <_strtod_l+0x6dc>
 801017a:	2100      	movs	r1, #0
 801017c:	2301      	movs	r3, #1
 801017e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010182:	e743      	b.n	801000c <_strtod_l+0x6dc>
 8010184:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010186:	4632      	mov	r2, r6
 8010188:	4620      	mov	r0, r4
 801018a:	f001 faad 	bl	80116e8 <__lshift>
 801018e:	9016      	str	r0, [sp, #88]	; 0x58
 8010190:	2800      	cmp	r0, #0
 8010192:	f47f af6b 	bne.w	801006c <_strtod_l+0x73c>
 8010196:	e60f      	b.n	800fdb8 <_strtod_l+0x488>
 8010198:	46ca      	mov	sl, r9
 801019a:	d171      	bne.n	8010280 <_strtod_l+0x950>
 801019c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801019e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101a2:	b352      	cbz	r2, 80101fa <_strtod_l+0x8ca>
 80101a4:	4a33      	ldr	r2, [pc, #204]	; (8010274 <_strtod_l+0x944>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d12a      	bne.n	8010200 <_strtod_l+0x8d0>
 80101aa:	9b04      	ldr	r3, [sp, #16]
 80101ac:	4641      	mov	r1, r8
 80101ae:	b1fb      	cbz	r3, 80101f0 <_strtod_l+0x8c0>
 80101b0:	4b2e      	ldr	r3, [pc, #184]	; (801026c <_strtod_l+0x93c>)
 80101b2:	ea09 0303 	and.w	r3, r9, r3
 80101b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80101ba:	f04f 32ff 	mov.w	r2, #4294967295
 80101be:	d81a      	bhi.n	80101f6 <_strtod_l+0x8c6>
 80101c0:	0d1b      	lsrs	r3, r3, #20
 80101c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80101c6:	fa02 f303 	lsl.w	r3, r2, r3
 80101ca:	4299      	cmp	r1, r3
 80101cc:	d118      	bne.n	8010200 <_strtod_l+0x8d0>
 80101ce:	4b2a      	ldr	r3, [pc, #168]	; (8010278 <_strtod_l+0x948>)
 80101d0:	459a      	cmp	sl, r3
 80101d2:	d102      	bne.n	80101da <_strtod_l+0x8aa>
 80101d4:	3101      	adds	r1, #1
 80101d6:	f43f adef 	beq.w	800fdb8 <_strtod_l+0x488>
 80101da:	4b24      	ldr	r3, [pc, #144]	; (801026c <_strtod_l+0x93c>)
 80101dc:	ea0a 0303 	and.w	r3, sl, r3
 80101e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80101e4:	f04f 0800 	mov.w	r8, #0
 80101e8:	9b04      	ldr	r3, [sp, #16]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d1a2      	bne.n	8010134 <_strtod_l+0x804>
 80101ee:	e5ed      	b.n	800fdcc <_strtod_l+0x49c>
 80101f0:	f04f 33ff 	mov.w	r3, #4294967295
 80101f4:	e7e9      	b.n	80101ca <_strtod_l+0x89a>
 80101f6:	4613      	mov	r3, r2
 80101f8:	e7e7      	b.n	80101ca <_strtod_l+0x89a>
 80101fa:	ea53 0308 	orrs.w	r3, r3, r8
 80101fe:	d08a      	beq.n	8010116 <_strtod_l+0x7e6>
 8010200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010202:	b1e3      	cbz	r3, 801023e <_strtod_l+0x90e>
 8010204:	ea13 0f0a 	tst.w	r3, sl
 8010208:	d0ee      	beq.n	80101e8 <_strtod_l+0x8b8>
 801020a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801020c:	9a04      	ldr	r2, [sp, #16]
 801020e:	4640      	mov	r0, r8
 8010210:	4649      	mov	r1, r9
 8010212:	b1c3      	cbz	r3, 8010246 <_strtod_l+0x916>
 8010214:	f7ff fb6f 	bl	800f8f6 <sulp>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	ec51 0b18 	vmov	r0, r1, d8
 8010220:	f7f0 f844 	bl	80002ac <__adddf3>
 8010224:	4680      	mov	r8, r0
 8010226:	4689      	mov	r9, r1
 8010228:	e7de      	b.n	80101e8 <_strtod_l+0x8b8>
 801022a:	4013      	ands	r3, r2
 801022c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010230:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010234:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010238:	f04f 38ff 	mov.w	r8, #4294967295
 801023c:	e7d4      	b.n	80101e8 <_strtod_l+0x8b8>
 801023e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010240:	ea13 0f08 	tst.w	r3, r8
 8010244:	e7e0      	b.n	8010208 <_strtod_l+0x8d8>
 8010246:	f7ff fb56 	bl	800f8f6 <sulp>
 801024a:	4602      	mov	r2, r0
 801024c:	460b      	mov	r3, r1
 801024e:	ec51 0b18 	vmov	r0, r1, d8
 8010252:	f7f0 f829 	bl	80002a8 <__aeabi_dsub>
 8010256:	2200      	movs	r2, #0
 8010258:	2300      	movs	r3, #0
 801025a:	4680      	mov	r8, r0
 801025c:	4689      	mov	r9, r1
 801025e:	f7f0 fc43 	bl	8000ae8 <__aeabi_dcmpeq>
 8010262:	2800      	cmp	r0, #0
 8010264:	d0c0      	beq.n	80101e8 <_strtod_l+0x8b8>
 8010266:	e618      	b.n	800fe9a <_strtod_l+0x56a>
 8010268:	fffffc02 	.word	0xfffffc02
 801026c:	7ff00000 	.word	0x7ff00000
 8010270:	39500000 	.word	0x39500000
 8010274:	000fffff 	.word	0x000fffff
 8010278:	7fefffff 	.word	0x7fefffff
 801027c:	080139d8 	.word	0x080139d8
 8010280:	4659      	mov	r1, fp
 8010282:	4628      	mov	r0, r5
 8010284:	f001 fc0c 	bl	8011aa0 <__ratio>
 8010288:	ec57 6b10 	vmov	r6, r7, d0
 801028c:	ee10 0a10 	vmov	r0, s0
 8010290:	2200      	movs	r2, #0
 8010292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010296:	4639      	mov	r1, r7
 8010298:	f7f0 fc3a 	bl	8000b10 <__aeabi_dcmple>
 801029c:	2800      	cmp	r0, #0
 801029e:	d071      	beq.n	8010384 <_strtod_l+0xa54>
 80102a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d17c      	bne.n	80103a0 <_strtod_l+0xa70>
 80102a6:	f1b8 0f00 	cmp.w	r8, #0
 80102aa:	d15a      	bne.n	8010362 <_strtod_l+0xa32>
 80102ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d15d      	bne.n	8010370 <_strtod_l+0xa40>
 80102b4:	4b90      	ldr	r3, [pc, #576]	; (80104f8 <_strtod_l+0xbc8>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	4630      	mov	r0, r6
 80102ba:	4639      	mov	r1, r7
 80102bc:	f7f0 fc1e 	bl	8000afc <__aeabi_dcmplt>
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d15c      	bne.n	801037e <_strtod_l+0xa4e>
 80102c4:	4630      	mov	r0, r6
 80102c6:	4639      	mov	r1, r7
 80102c8:	4b8c      	ldr	r3, [pc, #560]	; (80104fc <_strtod_l+0xbcc>)
 80102ca:	2200      	movs	r2, #0
 80102cc:	f7f0 f9a4 	bl	8000618 <__aeabi_dmul>
 80102d0:	4606      	mov	r6, r0
 80102d2:	460f      	mov	r7, r1
 80102d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80102d8:	9606      	str	r6, [sp, #24]
 80102da:	9307      	str	r3, [sp, #28]
 80102dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80102e4:	4b86      	ldr	r3, [pc, #536]	; (8010500 <_strtod_l+0xbd0>)
 80102e6:	ea0a 0303 	and.w	r3, sl, r3
 80102ea:	930d      	str	r3, [sp, #52]	; 0x34
 80102ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102ee:	4b85      	ldr	r3, [pc, #532]	; (8010504 <_strtod_l+0xbd4>)
 80102f0:	429a      	cmp	r2, r3
 80102f2:	f040 8090 	bne.w	8010416 <_strtod_l+0xae6>
 80102f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80102fa:	ec49 8b10 	vmov	d0, r8, r9
 80102fe:	f001 fb05 	bl	801190c <__ulp>
 8010302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010306:	ec51 0b10 	vmov	r0, r1, d0
 801030a:	f7f0 f985 	bl	8000618 <__aeabi_dmul>
 801030e:	4642      	mov	r2, r8
 8010310:	464b      	mov	r3, r9
 8010312:	f7ef ffcb 	bl	80002ac <__adddf3>
 8010316:	460b      	mov	r3, r1
 8010318:	4979      	ldr	r1, [pc, #484]	; (8010500 <_strtod_l+0xbd0>)
 801031a:	4a7b      	ldr	r2, [pc, #492]	; (8010508 <_strtod_l+0xbd8>)
 801031c:	4019      	ands	r1, r3
 801031e:	4291      	cmp	r1, r2
 8010320:	4680      	mov	r8, r0
 8010322:	d944      	bls.n	80103ae <_strtod_l+0xa7e>
 8010324:	ee18 2a90 	vmov	r2, s17
 8010328:	4b78      	ldr	r3, [pc, #480]	; (801050c <_strtod_l+0xbdc>)
 801032a:	429a      	cmp	r2, r3
 801032c:	d104      	bne.n	8010338 <_strtod_l+0xa08>
 801032e:	ee18 3a10 	vmov	r3, s16
 8010332:	3301      	adds	r3, #1
 8010334:	f43f ad40 	beq.w	800fdb8 <_strtod_l+0x488>
 8010338:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801050c <_strtod_l+0xbdc>
 801033c:	f04f 38ff 	mov.w	r8, #4294967295
 8010340:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010342:	4620      	mov	r0, r4
 8010344:	f000 ffb6 	bl	80112b4 <_Bfree>
 8010348:	9905      	ldr	r1, [sp, #20]
 801034a:	4620      	mov	r0, r4
 801034c:	f000 ffb2 	bl	80112b4 <_Bfree>
 8010350:	4659      	mov	r1, fp
 8010352:	4620      	mov	r0, r4
 8010354:	f000 ffae 	bl	80112b4 <_Bfree>
 8010358:	4629      	mov	r1, r5
 801035a:	4620      	mov	r0, r4
 801035c:	f000 ffaa 	bl	80112b4 <_Bfree>
 8010360:	e609      	b.n	800ff76 <_strtod_l+0x646>
 8010362:	f1b8 0f01 	cmp.w	r8, #1
 8010366:	d103      	bne.n	8010370 <_strtod_l+0xa40>
 8010368:	f1b9 0f00 	cmp.w	r9, #0
 801036c:	f43f ad95 	beq.w	800fe9a <_strtod_l+0x56a>
 8010370:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80104c8 <_strtod_l+0xb98>
 8010374:	4f60      	ldr	r7, [pc, #384]	; (80104f8 <_strtod_l+0xbc8>)
 8010376:	ed8d 7b06 	vstr	d7, [sp, #24]
 801037a:	2600      	movs	r6, #0
 801037c:	e7ae      	b.n	80102dc <_strtod_l+0x9ac>
 801037e:	4f5f      	ldr	r7, [pc, #380]	; (80104fc <_strtod_l+0xbcc>)
 8010380:	2600      	movs	r6, #0
 8010382:	e7a7      	b.n	80102d4 <_strtod_l+0x9a4>
 8010384:	4b5d      	ldr	r3, [pc, #372]	; (80104fc <_strtod_l+0xbcc>)
 8010386:	4630      	mov	r0, r6
 8010388:	4639      	mov	r1, r7
 801038a:	2200      	movs	r2, #0
 801038c:	f7f0 f944 	bl	8000618 <__aeabi_dmul>
 8010390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010392:	4606      	mov	r6, r0
 8010394:	460f      	mov	r7, r1
 8010396:	2b00      	cmp	r3, #0
 8010398:	d09c      	beq.n	80102d4 <_strtod_l+0x9a4>
 801039a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801039e:	e79d      	b.n	80102dc <_strtod_l+0x9ac>
 80103a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80104d0 <_strtod_l+0xba0>
 80103a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80103a8:	ec57 6b17 	vmov	r6, r7, d7
 80103ac:	e796      	b.n	80102dc <_strtod_l+0x9ac>
 80103ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80103b2:	9b04      	ldr	r3, [sp, #16]
 80103b4:	46ca      	mov	sl, r9
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1c2      	bne.n	8010340 <_strtod_l+0xa10>
 80103ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80103be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103c0:	0d1b      	lsrs	r3, r3, #20
 80103c2:	051b      	lsls	r3, r3, #20
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d1bb      	bne.n	8010340 <_strtod_l+0xa10>
 80103c8:	4630      	mov	r0, r6
 80103ca:	4639      	mov	r1, r7
 80103cc:	f7f0 fc34 	bl	8000c38 <__aeabi_d2lz>
 80103d0:	f7f0 f8f4 	bl	80005bc <__aeabi_l2d>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4630      	mov	r0, r6
 80103da:	4639      	mov	r1, r7
 80103dc:	f7ef ff64 	bl	80002a8 <__aeabi_dsub>
 80103e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80103e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80103e6:	ea43 0308 	orr.w	r3, r3, r8
 80103ea:	4313      	orrs	r3, r2
 80103ec:	4606      	mov	r6, r0
 80103ee:	460f      	mov	r7, r1
 80103f0:	d054      	beq.n	801049c <_strtod_l+0xb6c>
 80103f2:	a339      	add	r3, pc, #228	; (adr r3, 80104d8 <_strtod_l+0xba8>)
 80103f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f8:	f7f0 fb80 	bl	8000afc <__aeabi_dcmplt>
 80103fc:	2800      	cmp	r0, #0
 80103fe:	f47f ace5 	bne.w	800fdcc <_strtod_l+0x49c>
 8010402:	a337      	add	r3, pc, #220	; (adr r3, 80104e0 <_strtod_l+0xbb0>)
 8010404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010408:	4630      	mov	r0, r6
 801040a:	4639      	mov	r1, r7
 801040c:	f7f0 fb94 	bl	8000b38 <__aeabi_dcmpgt>
 8010410:	2800      	cmp	r0, #0
 8010412:	d095      	beq.n	8010340 <_strtod_l+0xa10>
 8010414:	e4da      	b.n	800fdcc <_strtod_l+0x49c>
 8010416:	9b04      	ldr	r3, [sp, #16]
 8010418:	b333      	cbz	r3, 8010468 <_strtod_l+0xb38>
 801041a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801041c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010420:	d822      	bhi.n	8010468 <_strtod_l+0xb38>
 8010422:	a331      	add	r3, pc, #196	; (adr r3, 80104e8 <_strtod_l+0xbb8>)
 8010424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010428:	4630      	mov	r0, r6
 801042a:	4639      	mov	r1, r7
 801042c:	f7f0 fb70 	bl	8000b10 <__aeabi_dcmple>
 8010430:	b1a0      	cbz	r0, 801045c <_strtod_l+0xb2c>
 8010432:	4639      	mov	r1, r7
 8010434:	4630      	mov	r0, r6
 8010436:	f7f0 fbc7 	bl	8000bc8 <__aeabi_d2uiz>
 801043a:	2801      	cmp	r0, #1
 801043c:	bf38      	it	cc
 801043e:	2001      	movcc	r0, #1
 8010440:	f7f0 f870 	bl	8000524 <__aeabi_ui2d>
 8010444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010446:	4606      	mov	r6, r0
 8010448:	460f      	mov	r7, r1
 801044a:	bb23      	cbnz	r3, 8010496 <_strtod_l+0xb66>
 801044c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010450:	9010      	str	r0, [sp, #64]	; 0x40
 8010452:	9311      	str	r3, [sp, #68]	; 0x44
 8010454:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010458:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801045c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801045e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010460:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010464:	1a9b      	subs	r3, r3, r2
 8010466:	930f      	str	r3, [sp, #60]	; 0x3c
 8010468:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801046c:	eeb0 0a48 	vmov.f32	s0, s16
 8010470:	eef0 0a68 	vmov.f32	s1, s17
 8010474:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010478:	f001 fa48 	bl	801190c <__ulp>
 801047c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010480:	ec53 2b10 	vmov	r2, r3, d0
 8010484:	f7f0 f8c8 	bl	8000618 <__aeabi_dmul>
 8010488:	ec53 2b18 	vmov	r2, r3, d8
 801048c:	f7ef ff0e 	bl	80002ac <__adddf3>
 8010490:	4680      	mov	r8, r0
 8010492:	4689      	mov	r9, r1
 8010494:	e78d      	b.n	80103b2 <_strtod_l+0xa82>
 8010496:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801049a:	e7db      	b.n	8010454 <_strtod_l+0xb24>
 801049c:	a314      	add	r3, pc, #80	; (adr r3, 80104f0 <_strtod_l+0xbc0>)
 801049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a2:	f7f0 fb2b 	bl	8000afc <__aeabi_dcmplt>
 80104a6:	e7b3      	b.n	8010410 <_strtod_l+0xae0>
 80104a8:	2300      	movs	r3, #0
 80104aa:	930a      	str	r3, [sp, #40]	; 0x28
 80104ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80104ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104b0:	6013      	str	r3, [r2, #0]
 80104b2:	f7ff ba7c 	b.w	800f9ae <_strtod_l+0x7e>
 80104b6:	2a65      	cmp	r2, #101	; 0x65
 80104b8:	f43f ab75 	beq.w	800fba6 <_strtod_l+0x276>
 80104bc:	2a45      	cmp	r2, #69	; 0x45
 80104be:	f43f ab72 	beq.w	800fba6 <_strtod_l+0x276>
 80104c2:	2301      	movs	r3, #1
 80104c4:	f7ff bbaa 	b.w	800fc1c <_strtod_l+0x2ec>
 80104c8:	00000000 	.word	0x00000000
 80104cc:	bff00000 	.word	0xbff00000
 80104d0:	00000000 	.word	0x00000000
 80104d4:	3ff00000 	.word	0x3ff00000
 80104d8:	94a03595 	.word	0x94a03595
 80104dc:	3fdfffff 	.word	0x3fdfffff
 80104e0:	35afe535 	.word	0x35afe535
 80104e4:	3fe00000 	.word	0x3fe00000
 80104e8:	ffc00000 	.word	0xffc00000
 80104ec:	41dfffff 	.word	0x41dfffff
 80104f0:	94a03595 	.word	0x94a03595
 80104f4:	3fcfffff 	.word	0x3fcfffff
 80104f8:	3ff00000 	.word	0x3ff00000
 80104fc:	3fe00000 	.word	0x3fe00000
 8010500:	7ff00000 	.word	0x7ff00000
 8010504:	7fe00000 	.word	0x7fe00000
 8010508:	7c9fffff 	.word	0x7c9fffff
 801050c:	7fefffff 	.word	0x7fefffff

08010510 <strtod>:
 8010510:	460a      	mov	r2, r1
 8010512:	4601      	mov	r1, r0
 8010514:	4802      	ldr	r0, [pc, #8]	; (8010520 <strtod+0x10>)
 8010516:	4b03      	ldr	r3, [pc, #12]	; (8010524 <strtod+0x14>)
 8010518:	6800      	ldr	r0, [r0, #0]
 801051a:	f7ff ba09 	b.w	800f930 <_strtod_l>
 801051e:	bf00      	nop
 8010520:	20000228 	.word	0x20000228
 8010524:	20000070 	.word	0x20000070

08010528 <std>:
 8010528:	2300      	movs	r3, #0
 801052a:	b510      	push	{r4, lr}
 801052c:	4604      	mov	r4, r0
 801052e:	e9c0 3300 	strd	r3, r3, [r0]
 8010532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010536:	6083      	str	r3, [r0, #8]
 8010538:	8181      	strh	r1, [r0, #12]
 801053a:	6643      	str	r3, [r0, #100]	; 0x64
 801053c:	81c2      	strh	r2, [r0, #14]
 801053e:	6183      	str	r3, [r0, #24]
 8010540:	4619      	mov	r1, r3
 8010542:	2208      	movs	r2, #8
 8010544:	305c      	adds	r0, #92	; 0x5c
 8010546:	f000 f9a7 	bl	8010898 <memset>
 801054a:	4b0d      	ldr	r3, [pc, #52]	; (8010580 <std+0x58>)
 801054c:	6263      	str	r3, [r4, #36]	; 0x24
 801054e:	4b0d      	ldr	r3, [pc, #52]	; (8010584 <std+0x5c>)
 8010550:	62a3      	str	r3, [r4, #40]	; 0x28
 8010552:	4b0d      	ldr	r3, [pc, #52]	; (8010588 <std+0x60>)
 8010554:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010556:	4b0d      	ldr	r3, [pc, #52]	; (801058c <std+0x64>)
 8010558:	6323      	str	r3, [r4, #48]	; 0x30
 801055a:	4b0d      	ldr	r3, [pc, #52]	; (8010590 <std+0x68>)
 801055c:	6224      	str	r4, [r4, #32]
 801055e:	429c      	cmp	r4, r3
 8010560:	d006      	beq.n	8010570 <std+0x48>
 8010562:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010566:	4294      	cmp	r4, r2
 8010568:	d002      	beq.n	8010570 <std+0x48>
 801056a:	33d0      	adds	r3, #208	; 0xd0
 801056c:	429c      	cmp	r4, r3
 801056e:	d105      	bne.n	801057c <std+0x54>
 8010570:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010578:	f000 ba8a 	b.w	8010a90 <__retarget_lock_init_recursive>
 801057c:	bd10      	pop	{r4, pc}
 801057e:	bf00      	nop
 8010580:	08010769 	.word	0x08010769
 8010584:	0801078f 	.word	0x0801078f
 8010588:	080107c7 	.word	0x080107c7
 801058c:	080107eb 	.word	0x080107eb
 8010590:	200032ec 	.word	0x200032ec

08010594 <stdio_exit_handler>:
 8010594:	4a02      	ldr	r2, [pc, #8]	; (80105a0 <stdio_exit_handler+0xc>)
 8010596:	4903      	ldr	r1, [pc, #12]	; (80105a4 <stdio_exit_handler+0x10>)
 8010598:	4803      	ldr	r0, [pc, #12]	; (80105a8 <stdio_exit_handler+0x14>)
 801059a:	f000 b87b 	b.w	8010694 <_fwalk_sglue>
 801059e:	bf00      	nop
 80105a0:	20000064 	.word	0x20000064
 80105a4:	08012b5d 	.word	0x08012b5d
 80105a8:	200001dc 	.word	0x200001dc

080105ac <cleanup_stdio>:
 80105ac:	6841      	ldr	r1, [r0, #4]
 80105ae:	4b0c      	ldr	r3, [pc, #48]	; (80105e0 <cleanup_stdio+0x34>)
 80105b0:	4299      	cmp	r1, r3
 80105b2:	b510      	push	{r4, lr}
 80105b4:	4604      	mov	r4, r0
 80105b6:	d001      	beq.n	80105bc <cleanup_stdio+0x10>
 80105b8:	f002 fad0 	bl	8012b5c <_fflush_r>
 80105bc:	68a1      	ldr	r1, [r4, #8]
 80105be:	4b09      	ldr	r3, [pc, #36]	; (80105e4 <cleanup_stdio+0x38>)
 80105c0:	4299      	cmp	r1, r3
 80105c2:	d002      	beq.n	80105ca <cleanup_stdio+0x1e>
 80105c4:	4620      	mov	r0, r4
 80105c6:	f002 fac9 	bl	8012b5c <_fflush_r>
 80105ca:	68e1      	ldr	r1, [r4, #12]
 80105cc:	4b06      	ldr	r3, [pc, #24]	; (80105e8 <cleanup_stdio+0x3c>)
 80105ce:	4299      	cmp	r1, r3
 80105d0:	d004      	beq.n	80105dc <cleanup_stdio+0x30>
 80105d2:	4620      	mov	r0, r4
 80105d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105d8:	f002 bac0 	b.w	8012b5c <_fflush_r>
 80105dc:	bd10      	pop	{r4, pc}
 80105de:	bf00      	nop
 80105e0:	200032ec 	.word	0x200032ec
 80105e4:	20003354 	.word	0x20003354
 80105e8:	200033bc 	.word	0x200033bc

080105ec <global_stdio_init.part.0>:
 80105ec:	b510      	push	{r4, lr}
 80105ee:	4b0b      	ldr	r3, [pc, #44]	; (801061c <global_stdio_init.part.0+0x30>)
 80105f0:	4c0b      	ldr	r4, [pc, #44]	; (8010620 <global_stdio_init.part.0+0x34>)
 80105f2:	4a0c      	ldr	r2, [pc, #48]	; (8010624 <global_stdio_init.part.0+0x38>)
 80105f4:	601a      	str	r2, [r3, #0]
 80105f6:	4620      	mov	r0, r4
 80105f8:	2200      	movs	r2, #0
 80105fa:	2104      	movs	r1, #4
 80105fc:	f7ff ff94 	bl	8010528 <std>
 8010600:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010604:	2201      	movs	r2, #1
 8010606:	2109      	movs	r1, #9
 8010608:	f7ff ff8e 	bl	8010528 <std>
 801060c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010610:	2202      	movs	r2, #2
 8010612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010616:	2112      	movs	r1, #18
 8010618:	f7ff bf86 	b.w	8010528 <std>
 801061c:	20003424 	.word	0x20003424
 8010620:	200032ec 	.word	0x200032ec
 8010624:	08010595 	.word	0x08010595

08010628 <__sfp_lock_acquire>:
 8010628:	4801      	ldr	r0, [pc, #4]	; (8010630 <__sfp_lock_acquire+0x8>)
 801062a:	f000 ba32 	b.w	8010a92 <__retarget_lock_acquire_recursive>
 801062e:	bf00      	nop
 8010630:	2000342d 	.word	0x2000342d

08010634 <__sfp_lock_release>:
 8010634:	4801      	ldr	r0, [pc, #4]	; (801063c <__sfp_lock_release+0x8>)
 8010636:	f000 ba2d 	b.w	8010a94 <__retarget_lock_release_recursive>
 801063a:	bf00      	nop
 801063c:	2000342d 	.word	0x2000342d

08010640 <__sinit>:
 8010640:	b510      	push	{r4, lr}
 8010642:	4604      	mov	r4, r0
 8010644:	f7ff fff0 	bl	8010628 <__sfp_lock_acquire>
 8010648:	6a23      	ldr	r3, [r4, #32]
 801064a:	b11b      	cbz	r3, 8010654 <__sinit+0x14>
 801064c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010650:	f7ff bff0 	b.w	8010634 <__sfp_lock_release>
 8010654:	4b04      	ldr	r3, [pc, #16]	; (8010668 <__sinit+0x28>)
 8010656:	6223      	str	r3, [r4, #32]
 8010658:	4b04      	ldr	r3, [pc, #16]	; (801066c <__sinit+0x2c>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1f5      	bne.n	801064c <__sinit+0xc>
 8010660:	f7ff ffc4 	bl	80105ec <global_stdio_init.part.0>
 8010664:	e7f2      	b.n	801064c <__sinit+0xc>
 8010666:	bf00      	nop
 8010668:	080105ad 	.word	0x080105ad
 801066c:	20003424 	.word	0x20003424

08010670 <fiprintf>:
 8010670:	b40e      	push	{r1, r2, r3}
 8010672:	b503      	push	{r0, r1, lr}
 8010674:	4601      	mov	r1, r0
 8010676:	ab03      	add	r3, sp, #12
 8010678:	4805      	ldr	r0, [pc, #20]	; (8010690 <fiprintf+0x20>)
 801067a:	f853 2b04 	ldr.w	r2, [r3], #4
 801067e:	6800      	ldr	r0, [r0, #0]
 8010680:	9301      	str	r3, [sp, #4]
 8010682:	f001 fded 	bl	8012260 <_vfiprintf_r>
 8010686:	b002      	add	sp, #8
 8010688:	f85d eb04 	ldr.w	lr, [sp], #4
 801068c:	b003      	add	sp, #12
 801068e:	4770      	bx	lr
 8010690:	20000228 	.word	0x20000228

08010694 <_fwalk_sglue>:
 8010694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010698:	4607      	mov	r7, r0
 801069a:	4688      	mov	r8, r1
 801069c:	4614      	mov	r4, r2
 801069e:	2600      	movs	r6, #0
 80106a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106a4:	f1b9 0901 	subs.w	r9, r9, #1
 80106a8:	d505      	bpl.n	80106b6 <_fwalk_sglue+0x22>
 80106aa:	6824      	ldr	r4, [r4, #0]
 80106ac:	2c00      	cmp	r4, #0
 80106ae:	d1f7      	bne.n	80106a0 <_fwalk_sglue+0xc>
 80106b0:	4630      	mov	r0, r6
 80106b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106b6:	89ab      	ldrh	r3, [r5, #12]
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d907      	bls.n	80106cc <_fwalk_sglue+0x38>
 80106bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106c0:	3301      	adds	r3, #1
 80106c2:	d003      	beq.n	80106cc <_fwalk_sglue+0x38>
 80106c4:	4629      	mov	r1, r5
 80106c6:	4638      	mov	r0, r7
 80106c8:	47c0      	blx	r8
 80106ca:	4306      	orrs	r6, r0
 80106cc:	3568      	adds	r5, #104	; 0x68
 80106ce:	e7e9      	b.n	80106a4 <_fwalk_sglue+0x10>

080106d0 <siprintf>:
 80106d0:	b40e      	push	{r1, r2, r3}
 80106d2:	b500      	push	{lr}
 80106d4:	b09c      	sub	sp, #112	; 0x70
 80106d6:	ab1d      	add	r3, sp, #116	; 0x74
 80106d8:	9002      	str	r0, [sp, #8]
 80106da:	9006      	str	r0, [sp, #24]
 80106dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80106e0:	4809      	ldr	r0, [pc, #36]	; (8010708 <siprintf+0x38>)
 80106e2:	9107      	str	r1, [sp, #28]
 80106e4:	9104      	str	r1, [sp, #16]
 80106e6:	4909      	ldr	r1, [pc, #36]	; (801070c <siprintf+0x3c>)
 80106e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80106ec:	9105      	str	r1, [sp, #20]
 80106ee:	6800      	ldr	r0, [r0, #0]
 80106f0:	9301      	str	r3, [sp, #4]
 80106f2:	a902      	add	r1, sp, #8
 80106f4:	f001 faba 	bl	8011c6c <_svfiprintf_r>
 80106f8:	9b02      	ldr	r3, [sp, #8]
 80106fa:	2200      	movs	r2, #0
 80106fc:	701a      	strb	r2, [r3, #0]
 80106fe:	b01c      	add	sp, #112	; 0x70
 8010700:	f85d eb04 	ldr.w	lr, [sp], #4
 8010704:	b003      	add	sp, #12
 8010706:	4770      	bx	lr
 8010708:	20000228 	.word	0x20000228
 801070c:	ffff0208 	.word	0xffff0208

08010710 <siscanf>:
 8010710:	b40e      	push	{r1, r2, r3}
 8010712:	b510      	push	{r4, lr}
 8010714:	b09f      	sub	sp, #124	; 0x7c
 8010716:	ac21      	add	r4, sp, #132	; 0x84
 8010718:	f44f 7101 	mov.w	r1, #516	; 0x204
 801071c:	f854 2b04 	ldr.w	r2, [r4], #4
 8010720:	9201      	str	r2, [sp, #4]
 8010722:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010726:	9004      	str	r0, [sp, #16]
 8010728:	9008      	str	r0, [sp, #32]
 801072a:	f7ef fdb1 	bl	8000290 <strlen>
 801072e:	4b0c      	ldr	r3, [pc, #48]	; (8010760 <siscanf+0x50>)
 8010730:	9005      	str	r0, [sp, #20]
 8010732:	9009      	str	r0, [sp, #36]	; 0x24
 8010734:	930d      	str	r3, [sp, #52]	; 0x34
 8010736:	480b      	ldr	r0, [pc, #44]	; (8010764 <siscanf+0x54>)
 8010738:	9a01      	ldr	r2, [sp, #4]
 801073a:	6800      	ldr	r0, [r0, #0]
 801073c:	9403      	str	r4, [sp, #12]
 801073e:	2300      	movs	r3, #0
 8010740:	9311      	str	r3, [sp, #68]	; 0x44
 8010742:	9316      	str	r3, [sp, #88]	; 0x58
 8010744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010748:	f8ad 301e 	strh.w	r3, [sp, #30]
 801074c:	a904      	add	r1, sp, #16
 801074e:	4623      	mov	r3, r4
 8010750:	f001 fbe4 	bl	8011f1c <__ssvfiscanf_r>
 8010754:	b01f      	add	sp, #124	; 0x7c
 8010756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801075a:	b003      	add	sp, #12
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	0801078b 	.word	0x0801078b
 8010764:	20000228 	.word	0x20000228

08010768 <__sread>:
 8010768:	b510      	push	{r4, lr}
 801076a:	460c      	mov	r4, r1
 801076c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010770:	f000 f91c 	bl	80109ac <_read_r>
 8010774:	2800      	cmp	r0, #0
 8010776:	bfab      	itete	ge
 8010778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801077a:	89a3      	ldrhlt	r3, [r4, #12]
 801077c:	181b      	addge	r3, r3, r0
 801077e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010782:	bfac      	ite	ge
 8010784:	6563      	strge	r3, [r4, #84]	; 0x54
 8010786:	81a3      	strhlt	r3, [r4, #12]
 8010788:	bd10      	pop	{r4, pc}

0801078a <__seofread>:
 801078a:	2000      	movs	r0, #0
 801078c:	4770      	bx	lr

0801078e <__swrite>:
 801078e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010792:	461f      	mov	r7, r3
 8010794:	898b      	ldrh	r3, [r1, #12]
 8010796:	05db      	lsls	r3, r3, #23
 8010798:	4605      	mov	r5, r0
 801079a:	460c      	mov	r4, r1
 801079c:	4616      	mov	r6, r2
 801079e:	d505      	bpl.n	80107ac <__swrite+0x1e>
 80107a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107a4:	2302      	movs	r3, #2
 80107a6:	2200      	movs	r2, #0
 80107a8:	f000 f8ee 	bl	8010988 <_lseek_r>
 80107ac:	89a3      	ldrh	r3, [r4, #12]
 80107ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107b6:	81a3      	strh	r3, [r4, #12]
 80107b8:	4632      	mov	r2, r6
 80107ba:	463b      	mov	r3, r7
 80107bc:	4628      	mov	r0, r5
 80107be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107c2:	f000 b929 	b.w	8010a18 <_write_r>

080107c6 <__sseek>:
 80107c6:	b510      	push	{r4, lr}
 80107c8:	460c      	mov	r4, r1
 80107ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ce:	f000 f8db 	bl	8010988 <_lseek_r>
 80107d2:	1c43      	adds	r3, r0, #1
 80107d4:	89a3      	ldrh	r3, [r4, #12]
 80107d6:	bf15      	itete	ne
 80107d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80107da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107e2:	81a3      	strheq	r3, [r4, #12]
 80107e4:	bf18      	it	ne
 80107e6:	81a3      	strhne	r3, [r4, #12]
 80107e8:	bd10      	pop	{r4, pc}

080107ea <__sclose>:
 80107ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ee:	f000 b8bb 	b.w	8010968 <_close_r>

080107f2 <_vsniprintf_r>:
 80107f2:	b530      	push	{r4, r5, lr}
 80107f4:	4614      	mov	r4, r2
 80107f6:	2c00      	cmp	r4, #0
 80107f8:	b09b      	sub	sp, #108	; 0x6c
 80107fa:	4605      	mov	r5, r0
 80107fc:	461a      	mov	r2, r3
 80107fe:	da05      	bge.n	801080c <_vsniprintf_r+0x1a>
 8010800:	238b      	movs	r3, #139	; 0x8b
 8010802:	6003      	str	r3, [r0, #0]
 8010804:	f04f 30ff 	mov.w	r0, #4294967295
 8010808:	b01b      	add	sp, #108	; 0x6c
 801080a:	bd30      	pop	{r4, r5, pc}
 801080c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010810:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010814:	bf14      	ite	ne
 8010816:	f104 33ff 	addne.w	r3, r4, #4294967295
 801081a:	4623      	moveq	r3, r4
 801081c:	9302      	str	r3, [sp, #8]
 801081e:	9305      	str	r3, [sp, #20]
 8010820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010824:	9100      	str	r1, [sp, #0]
 8010826:	9104      	str	r1, [sp, #16]
 8010828:	f8ad 300e 	strh.w	r3, [sp, #14]
 801082c:	4669      	mov	r1, sp
 801082e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010830:	f001 fa1c 	bl	8011c6c <_svfiprintf_r>
 8010834:	1c43      	adds	r3, r0, #1
 8010836:	bfbc      	itt	lt
 8010838:	238b      	movlt	r3, #139	; 0x8b
 801083a:	602b      	strlt	r3, [r5, #0]
 801083c:	2c00      	cmp	r4, #0
 801083e:	d0e3      	beq.n	8010808 <_vsniprintf_r+0x16>
 8010840:	9b00      	ldr	r3, [sp, #0]
 8010842:	2200      	movs	r2, #0
 8010844:	701a      	strb	r2, [r3, #0]
 8010846:	e7df      	b.n	8010808 <_vsniprintf_r+0x16>

08010848 <vsniprintf>:
 8010848:	b507      	push	{r0, r1, r2, lr}
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	4613      	mov	r3, r2
 801084e:	460a      	mov	r2, r1
 8010850:	4601      	mov	r1, r0
 8010852:	4803      	ldr	r0, [pc, #12]	; (8010860 <vsniprintf+0x18>)
 8010854:	6800      	ldr	r0, [r0, #0]
 8010856:	f7ff ffcc 	bl	80107f2 <_vsniprintf_r>
 801085a:	b003      	add	sp, #12
 801085c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010860:	20000228 	.word	0x20000228

08010864 <memmove>:
 8010864:	4288      	cmp	r0, r1
 8010866:	b510      	push	{r4, lr}
 8010868:	eb01 0402 	add.w	r4, r1, r2
 801086c:	d902      	bls.n	8010874 <memmove+0x10>
 801086e:	4284      	cmp	r4, r0
 8010870:	4623      	mov	r3, r4
 8010872:	d807      	bhi.n	8010884 <memmove+0x20>
 8010874:	1e43      	subs	r3, r0, #1
 8010876:	42a1      	cmp	r1, r4
 8010878:	d008      	beq.n	801088c <memmove+0x28>
 801087a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801087e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010882:	e7f8      	b.n	8010876 <memmove+0x12>
 8010884:	4402      	add	r2, r0
 8010886:	4601      	mov	r1, r0
 8010888:	428a      	cmp	r2, r1
 801088a:	d100      	bne.n	801088e <memmove+0x2a>
 801088c:	bd10      	pop	{r4, pc}
 801088e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010896:	e7f7      	b.n	8010888 <memmove+0x24>

08010898 <memset>:
 8010898:	4402      	add	r2, r0
 801089a:	4603      	mov	r3, r0
 801089c:	4293      	cmp	r3, r2
 801089e:	d100      	bne.n	80108a2 <memset+0xa>
 80108a0:	4770      	bx	lr
 80108a2:	f803 1b01 	strb.w	r1, [r3], #1
 80108a6:	e7f9      	b.n	801089c <memset+0x4>

080108a8 <strdup>:
 80108a8:	4b02      	ldr	r3, [pc, #8]	; (80108b4 <strdup+0xc>)
 80108aa:	4601      	mov	r1, r0
 80108ac:	6818      	ldr	r0, [r3, #0]
 80108ae:	f000 b803 	b.w	80108b8 <_strdup_r>
 80108b2:	bf00      	nop
 80108b4:	20000228 	.word	0x20000228

080108b8 <_strdup_r>:
 80108b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108ba:	4604      	mov	r4, r0
 80108bc:	4608      	mov	r0, r1
 80108be:	460d      	mov	r5, r1
 80108c0:	f7ef fce6 	bl	8000290 <strlen>
 80108c4:	1c42      	adds	r2, r0, #1
 80108c6:	4611      	mov	r1, r2
 80108c8:	4620      	mov	r0, r4
 80108ca:	9201      	str	r2, [sp, #4]
 80108cc:	f7fe ff50 	bl	800f770 <_malloc_r>
 80108d0:	4604      	mov	r4, r0
 80108d2:	b118      	cbz	r0, 80108dc <_strdup_r+0x24>
 80108d4:	9a01      	ldr	r2, [sp, #4]
 80108d6:	4629      	mov	r1, r5
 80108d8:	f000 f8dd 	bl	8010a96 <memcpy>
 80108dc:	4620      	mov	r0, r4
 80108de:	b003      	add	sp, #12
 80108e0:	bd30      	pop	{r4, r5, pc}

080108e2 <strncmp>:
 80108e2:	b510      	push	{r4, lr}
 80108e4:	b16a      	cbz	r2, 8010902 <strncmp+0x20>
 80108e6:	3901      	subs	r1, #1
 80108e8:	1884      	adds	r4, r0, r2
 80108ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d103      	bne.n	80108fe <strncmp+0x1c>
 80108f6:	42a0      	cmp	r0, r4
 80108f8:	d001      	beq.n	80108fe <strncmp+0x1c>
 80108fa:	2a00      	cmp	r2, #0
 80108fc:	d1f5      	bne.n	80108ea <strncmp+0x8>
 80108fe:	1ad0      	subs	r0, r2, r3
 8010900:	bd10      	pop	{r4, pc}
 8010902:	4610      	mov	r0, r2
 8010904:	e7fc      	b.n	8010900 <strncmp+0x1e>

08010906 <_raise_r>:
 8010906:	291f      	cmp	r1, #31
 8010908:	b538      	push	{r3, r4, r5, lr}
 801090a:	4604      	mov	r4, r0
 801090c:	460d      	mov	r5, r1
 801090e:	d904      	bls.n	801091a <_raise_r+0x14>
 8010910:	2316      	movs	r3, #22
 8010912:	6003      	str	r3, [r0, #0]
 8010914:	f04f 30ff 	mov.w	r0, #4294967295
 8010918:	bd38      	pop	{r3, r4, r5, pc}
 801091a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801091c:	b112      	cbz	r2, 8010924 <_raise_r+0x1e>
 801091e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010922:	b94b      	cbnz	r3, 8010938 <_raise_r+0x32>
 8010924:	4620      	mov	r0, r4
 8010926:	f000 f865 	bl	80109f4 <_getpid_r>
 801092a:	462a      	mov	r2, r5
 801092c:	4601      	mov	r1, r0
 801092e:	4620      	mov	r0, r4
 8010930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010934:	f000 b84c 	b.w	80109d0 <_kill_r>
 8010938:	2b01      	cmp	r3, #1
 801093a:	d00a      	beq.n	8010952 <_raise_r+0x4c>
 801093c:	1c59      	adds	r1, r3, #1
 801093e:	d103      	bne.n	8010948 <_raise_r+0x42>
 8010940:	2316      	movs	r3, #22
 8010942:	6003      	str	r3, [r0, #0]
 8010944:	2001      	movs	r0, #1
 8010946:	e7e7      	b.n	8010918 <_raise_r+0x12>
 8010948:	2400      	movs	r4, #0
 801094a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801094e:	4628      	mov	r0, r5
 8010950:	4798      	blx	r3
 8010952:	2000      	movs	r0, #0
 8010954:	e7e0      	b.n	8010918 <_raise_r+0x12>
	...

08010958 <raise>:
 8010958:	4b02      	ldr	r3, [pc, #8]	; (8010964 <raise+0xc>)
 801095a:	4601      	mov	r1, r0
 801095c:	6818      	ldr	r0, [r3, #0]
 801095e:	f7ff bfd2 	b.w	8010906 <_raise_r>
 8010962:	bf00      	nop
 8010964:	20000228 	.word	0x20000228

08010968 <_close_r>:
 8010968:	b538      	push	{r3, r4, r5, lr}
 801096a:	4d06      	ldr	r5, [pc, #24]	; (8010984 <_close_r+0x1c>)
 801096c:	2300      	movs	r3, #0
 801096e:	4604      	mov	r4, r0
 8010970:	4608      	mov	r0, r1
 8010972:	602b      	str	r3, [r5, #0]
 8010974:	f7fa ffc3 	bl	800b8fe <_close>
 8010978:	1c43      	adds	r3, r0, #1
 801097a:	d102      	bne.n	8010982 <_close_r+0x1a>
 801097c:	682b      	ldr	r3, [r5, #0]
 801097e:	b103      	cbz	r3, 8010982 <_close_r+0x1a>
 8010980:	6023      	str	r3, [r4, #0]
 8010982:	bd38      	pop	{r3, r4, r5, pc}
 8010984:	20003428 	.word	0x20003428

08010988 <_lseek_r>:
 8010988:	b538      	push	{r3, r4, r5, lr}
 801098a:	4d07      	ldr	r5, [pc, #28]	; (80109a8 <_lseek_r+0x20>)
 801098c:	4604      	mov	r4, r0
 801098e:	4608      	mov	r0, r1
 8010990:	4611      	mov	r1, r2
 8010992:	2200      	movs	r2, #0
 8010994:	602a      	str	r2, [r5, #0]
 8010996:	461a      	mov	r2, r3
 8010998:	f7fa ffd8 	bl	800b94c <_lseek>
 801099c:	1c43      	adds	r3, r0, #1
 801099e:	d102      	bne.n	80109a6 <_lseek_r+0x1e>
 80109a0:	682b      	ldr	r3, [r5, #0]
 80109a2:	b103      	cbz	r3, 80109a6 <_lseek_r+0x1e>
 80109a4:	6023      	str	r3, [r4, #0]
 80109a6:	bd38      	pop	{r3, r4, r5, pc}
 80109a8:	20003428 	.word	0x20003428

080109ac <_read_r>:
 80109ac:	b538      	push	{r3, r4, r5, lr}
 80109ae:	4d07      	ldr	r5, [pc, #28]	; (80109cc <_read_r+0x20>)
 80109b0:	4604      	mov	r4, r0
 80109b2:	4608      	mov	r0, r1
 80109b4:	4611      	mov	r1, r2
 80109b6:	2200      	movs	r2, #0
 80109b8:	602a      	str	r2, [r5, #0]
 80109ba:	461a      	mov	r2, r3
 80109bc:	f7fa ff66 	bl	800b88c <_read>
 80109c0:	1c43      	adds	r3, r0, #1
 80109c2:	d102      	bne.n	80109ca <_read_r+0x1e>
 80109c4:	682b      	ldr	r3, [r5, #0]
 80109c6:	b103      	cbz	r3, 80109ca <_read_r+0x1e>
 80109c8:	6023      	str	r3, [r4, #0]
 80109ca:	bd38      	pop	{r3, r4, r5, pc}
 80109cc:	20003428 	.word	0x20003428

080109d0 <_kill_r>:
 80109d0:	b538      	push	{r3, r4, r5, lr}
 80109d2:	4d07      	ldr	r5, [pc, #28]	; (80109f0 <_kill_r+0x20>)
 80109d4:	2300      	movs	r3, #0
 80109d6:	4604      	mov	r4, r0
 80109d8:	4608      	mov	r0, r1
 80109da:	4611      	mov	r1, r2
 80109dc:	602b      	str	r3, [r5, #0]
 80109de:	f7fa ff3b 	bl	800b858 <_kill>
 80109e2:	1c43      	adds	r3, r0, #1
 80109e4:	d102      	bne.n	80109ec <_kill_r+0x1c>
 80109e6:	682b      	ldr	r3, [r5, #0]
 80109e8:	b103      	cbz	r3, 80109ec <_kill_r+0x1c>
 80109ea:	6023      	str	r3, [r4, #0]
 80109ec:	bd38      	pop	{r3, r4, r5, pc}
 80109ee:	bf00      	nop
 80109f0:	20003428 	.word	0x20003428

080109f4 <_getpid_r>:
 80109f4:	f7fa bf28 	b.w	800b848 <_getpid>

080109f8 <_sbrk_r>:
 80109f8:	b538      	push	{r3, r4, r5, lr}
 80109fa:	4d06      	ldr	r5, [pc, #24]	; (8010a14 <_sbrk_r+0x1c>)
 80109fc:	2300      	movs	r3, #0
 80109fe:	4604      	mov	r4, r0
 8010a00:	4608      	mov	r0, r1
 8010a02:	602b      	str	r3, [r5, #0]
 8010a04:	f7fa ffb0 	bl	800b968 <_sbrk>
 8010a08:	1c43      	adds	r3, r0, #1
 8010a0a:	d102      	bne.n	8010a12 <_sbrk_r+0x1a>
 8010a0c:	682b      	ldr	r3, [r5, #0]
 8010a0e:	b103      	cbz	r3, 8010a12 <_sbrk_r+0x1a>
 8010a10:	6023      	str	r3, [r4, #0]
 8010a12:	bd38      	pop	{r3, r4, r5, pc}
 8010a14:	20003428 	.word	0x20003428

08010a18 <_write_r>:
 8010a18:	b538      	push	{r3, r4, r5, lr}
 8010a1a:	4d07      	ldr	r5, [pc, #28]	; (8010a38 <_write_r+0x20>)
 8010a1c:	4604      	mov	r4, r0
 8010a1e:	4608      	mov	r0, r1
 8010a20:	4611      	mov	r1, r2
 8010a22:	2200      	movs	r2, #0
 8010a24:	602a      	str	r2, [r5, #0]
 8010a26:	461a      	mov	r2, r3
 8010a28:	f7fa ff4d 	bl	800b8c6 <_write>
 8010a2c:	1c43      	adds	r3, r0, #1
 8010a2e:	d102      	bne.n	8010a36 <_write_r+0x1e>
 8010a30:	682b      	ldr	r3, [r5, #0]
 8010a32:	b103      	cbz	r3, 8010a36 <_write_r+0x1e>
 8010a34:	6023      	str	r3, [r4, #0]
 8010a36:	bd38      	pop	{r3, r4, r5, pc}
 8010a38:	20003428 	.word	0x20003428

08010a3c <__errno>:
 8010a3c:	4b01      	ldr	r3, [pc, #4]	; (8010a44 <__errno+0x8>)
 8010a3e:	6818      	ldr	r0, [r3, #0]
 8010a40:	4770      	bx	lr
 8010a42:	bf00      	nop
 8010a44:	20000228 	.word	0x20000228

08010a48 <__libc_init_array>:
 8010a48:	b570      	push	{r4, r5, r6, lr}
 8010a4a:	4d0d      	ldr	r5, [pc, #52]	; (8010a80 <__libc_init_array+0x38>)
 8010a4c:	4c0d      	ldr	r4, [pc, #52]	; (8010a84 <__libc_init_array+0x3c>)
 8010a4e:	1b64      	subs	r4, r4, r5
 8010a50:	10a4      	asrs	r4, r4, #2
 8010a52:	2600      	movs	r6, #0
 8010a54:	42a6      	cmp	r6, r4
 8010a56:	d109      	bne.n	8010a6c <__libc_init_array+0x24>
 8010a58:	4d0b      	ldr	r5, [pc, #44]	; (8010a88 <__libc_init_array+0x40>)
 8010a5a:	4c0c      	ldr	r4, [pc, #48]	; (8010a8c <__libc_init_array+0x44>)
 8010a5c:	f002 fb5e 	bl	801311c <_init>
 8010a60:	1b64      	subs	r4, r4, r5
 8010a62:	10a4      	asrs	r4, r4, #2
 8010a64:	2600      	movs	r6, #0
 8010a66:	42a6      	cmp	r6, r4
 8010a68:	d105      	bne.n	8010a76 <__libc_init_array+0x2e>
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}
 8010a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a70:	4798      	blx	r3
 8010a72:	3601      	adds	r6, #1
 8010a74:	e7ee      	b.n	8010a54 <__libc_init_array+0xc>
 8010a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a7a:	4798      	blx	r3
 8010a7c:	3601      	adds	r6, #1
 8010a7e:	e7f2      	b.n	8010a66 <__libc_init_array+0x1e>
 8010a80:	08013d80 	.word	0x08013d80
 8010a84:	08013d80 	.word	0x08013d80
 8010a88:	08013d80 	.word	0x08013d80
 8010a8c:	08013d88 	.word	0x08013d88

08010a90 <__retarget_lock_init_recursive>:
 8010a90:	4770      	bx	lr

08010a92 <__retarget_lock_acquire_recursive>:
 8010a92:	4770      	bx	lr

08010a94 <__retarget_lock_release_recursive>:
 8010a94:	4770      	bx	lr

08010a96 <memcpy>:
 8010a96:	440a      	add	r2, r1
 8010a98:	4291      	cmp	r1, r2
 8010a9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a9e:	d100      	bne.n	8010aa2 <memcpy+0xc>
 8010aa0:	4770      	bx	lr
 8010aa2:	b510      	push	{r4, lr}
 8010aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010aa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010aac:	4291      	cmp	r1, r2
 8010aae:	d1f9      	bne.n	8010aa4 <memcpy+0xe>
 8010ab0:	bd10      	pop	{r4, pc}
 8010ab2:	0000      	movs	r0, r0
 8010ab4:	0000      	movs	r0, r0
	...

08010ab8 <nan>:
 8010ab8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010ac0 <nan+0x8>
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	00000000 	.word	0x00000000
 8010ac4:	7ff80000 	.word	0x7ff80000

08010ac8 <_free_r>:
 8010ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010aca:	2900      	cmp	r1, #0
 8010acc:	d044      	beq.n	8010b58 <_free_r+0x90>
 8010ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ad2:	9001      	str	r0, [sp, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f1a1 0404 	sub.w	r4, r1, #4
 8010ada:	bfb8      	it	lt
 8010adc:	18e4      	addlt	r4, r4, r3
 8010ade:	f7fe fec7 	bl	800f870 <__malloc_lock>
 8010ae2:	4a1e      	ldr	r2, [pc, #120]	; (8010b5c <_free_r+0x94>)
 8010ae4:	9801      	ldr	r0, [sp, #4]
 8010ae6:	6813      	ldr	r3, [r2, #0]
 8010ae8:	b933      	cbnz	r3, 8010af8 <_free_r+0x30>
 8010aea:	6063      	str	r3, [r4, #4]
 8010aec:	6014      	str	r4, [r2, #0]
 8010aee:	b003      	add	sp, #12
 8010af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010af4:	f7fe bec2 	b.w	800f87c <__malloc_unlock>
 8010af8:	42a3      	cmp	r3, r4
 8010afa:	d908      	bls.n	8010b0e <_free_r+0x46>
 8010afc:	6825      	ldr	r5, [r4, #0]
 8010afe:	1961      	adds	r1, r4, r5
 8010b00:	428b      	cmp	r3, r1
 8010b02:	bf01      	itttt	eq
 8010b04:	6819      	ldreq	r1, [r3, #0]
 8010b06:	685b      	ldreq	r3, [r3, #4]
 8010b08:	1949      	addeq	r1, r1, r5
 8010b0a:	6021      	streq	r1, [r4, #0]
 8010b0c:	e7ed      	b.n	8010aea <_free_r+0x22>
 8010b0e:	461a      	mov	r2, r3
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	b10b      	cbz	r3, 8010b18 <_free_r+0x50>
 8010b14:	42a3      	cmp	r3, r4
 8010b16:	d9fa      	bls.n	8010b0e <_free_r+0x46>
 8010b18:	6811      	ldr	r1, [r2, #0]
 8010b1a:	1855      	adds	r5, r2, r1
 8010b1c:	42a5      	cmp	r5, r4
 8010b1e:	d10b      	bne.n	8010b38 <_free_r+0x70>
 8010b20:	6824      	ldr	r4, [r4, #0]
 8010b22:	4421      	add	r1, r4
 8010b24:	1854      	adds	r4, r2, r1
 8010b26:	42a3      	cmp	r3, r4
 8010b28:	6011      	str	r1, [r2, #0]
 8010b2a:	d1e0      	bne.n	8010aee <_free_r+0x26>
 8010b2c:	681c      	ldr	r4, [r3, #0]
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	6053      	str	r3, [r2, #4]
 8010b32:	440c      	add	r4, r1
 8010b34:	6014      	str	r4, [r2, #0]
 8010b36:	e7da      	b.n	8010aee <_free_r+0x26>
 8010b38:	d902      	bls.n	8010b40 <_free_r+0x78>
 8010b3a:	230c      	movs	r3, #12
 8010b3c:	6003      	str	r3, [r0, #0]
 8010b3e:	e7d6      	b.n	8010aee <_free_r+0x26>
 8010b40:	6825      	ldr	r5, [r4, #0]
 8010b42:	1961      	adds	r1, r4, r5
 8010b44:	428b      	cmp	r3, r1
 8010b46:	bf04      	itt	eq
 8010b48:	6819      	ldreq	r1, [r3, #0]
 8010b4a:	685b      	ldreq	r3, [r3, #4]
 8010b4c:	6063      	str	r3, [r4, #4]
 8010b4e:	bf04      	itt	eq
 8010b50:	1949      	addeq	r1, r1, r5
 8010b52:	6021      	streq	r1, [r4, #0]
 8010b54:	6054      	str	r4, [r2, #4]
 8010b56:	e7ca      	b.n	8010aee <_free_r+0x26>
 8010b58:	b003      	add	sp, #12
 8010b5a:	bd30      	pop	{r4, r5, pc}
 8010b5c:	200032e4 	.word	0x200032e4

08010b60 <rshift>:
 8010b60:	6903      	ldr	r3, [r0, #16]
 8010b62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010b66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010b6e:	f100 0414 	add.w	r4, r0, #20
 8010b72:	dd45      	ble.n	8010c00 <rshift+0xa0>
 8010b74:	f011 011f 	ands.w	r1, r1, #31
 8010b78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010b7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010b80:	d10c      	bne.n	8010b9c <rshift+0x3c>
 8010b82:	f100 0710 	add.w	r7, r0, #16
 8010b86:	4629      	mov	r1, r5
 8010b88:	42b1      	cmp	r1, r6
 8010b8a:	d334      	bcc.n	8010bf6 <rshift+0x96>
 8010b8c:	1a9b      	subs	r3, r3, r2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	1eea      	subs	r2, r5, #3
 8010b92:	4296      	cmp	r6, r2
 8010b94:	bf38      	it	cc
 8010b96:	2300      	movcc	r3, #0
 8010b98:	4423      	add	r3, r4
 8010b9a:	e015      	b.n	8010bc8 <rshift+0x68>
 8010b9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010ba0:	f1c1 0820 	rsb	r8, r1, #32
 8010ba4:	40cf      	lsrs	r7, r1
 8010ba6:	f105 0e04 	add.w	lr, r5, #4
 8010baa:	46a1      	mov	r9, r4
 8010bac:	4576      	cmp	r6, lr
 8010bae:	46f4      	mov	ip, lr
 8010bb0:	d815      	bhi.n	8010bde <rshift+0x7e>
 8010bb2:	1a9a      	subs	r2, r3, r2
 8010bb4:	0092      	lsls	r2, r2, #2
 8010bb6:	3a04      	subs	r2, #4
 8010bb8:	3501      	adds	r5, #1
 8010bba:	42ae      	cmp	r6, r5
 8010bbc:	bf38      	it	cc
 8010bbe:	2200      	movcc	r2, #0
 8010bc0:	18a3      	adds	r3, r4, r2
 8010bc2:	50a7      	str	r7, [r4, r2]
 8010bc4:	b107      	cbz	r7, 8010bc8 <rshift+0x68>
 8010bc6:	3304      	adds	r3, #4
 8010bc8:	1b1a      	subs	r2, r3, r4
 8010bca:	42a3      	cmp	r3, r4
 8010bcc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010bd0:	bf08      	it	eq
 8010bd2:	2300      	moveq	r3, #0
 8010bd4:	6102      	str	r2, [r0, #16]
 8010bd6:	bf08      	it	eq
 8010bd8:	6143      	streq	r3, [r0, #20]
 8010bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bde:	f8dc c000 	ldr.w	ip, [ip]
 8010be2:	fa0c fc08 	lsl.w	ip, ip, r8
 8010be6:	ea4c 0707 	orr.w	r7, ip, r7
 8010bea:	f849 7b04 	str.w	r7, [r9], #4
 8010bee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010bf2:	40cf      	lsrs	r7, r1
 8010bf4:	e7da      	b.n	8010bac <rshift+0x4c>
 8010bf6:	f851 cb04 	ldr.w	ip, [r1], #4
 8010bfa:	f847 cf04 	str.w	ip, [r7, #4]!
 8010bfe:	e7c3      	b.n	8010b88 <rshift+0x28>
 8010c00:	4623      	mov	r3, r4
 8010c02:	e7e1      	b.n	8010bc8 <rshift+0x68>

08010c04 <__hexdig_fun>:
 8010c04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010c08:	2b09      	cmp	r3, #9
 8010c0a:	d802      	bhi.n	8010c12 <__hexdig_fun+0xe>
 8010c0c:	3820      	subs	r0, #32
 8010c0e:	b2c0      	uxtb	r0, r0
 8010c10:	4770      	bx	lr
 8010c12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010c16:	2b05      	cmp	r3, #5
 8010c18:	d801      	bhi.n	8010c1e <__hexdig_fun+0x1a>
 8010c1a:	3847      	subs	r0, #71	; 0x47
 8010c1c:	e7f7      	b.n	8010c0e <__hexdig_fun+0xa>
 8010c1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010c22:	2b05      	cmp	r3, #5
 8010c24:	d801      	bhi.n	8010c2a <__hexdig_fun+0x26>
 8010c26:	3827      	subs	r0, #39	; 0x27
 8010c28:	e7f1      	b.n	8010c0e <__hexdig_fun+0xa>
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	4770      	bx	lr
	...

08010c30 <__gethex>:
 8010c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c34:	4617      	mov	r7, r2
 8010c36:	680a      	ldr	r2, [r1, #0]
 8010c38:	b085      	sub	sp, #20
 8010c3a:	f102 0b02 	add.w	fp, r2, #2
 8010c3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010c42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010c46:	4681      	mov	r9, r0
 8010c48:	468a      	mov	sl, r1
 8010c4a:	9302      	str	r3, [sp, #8]
 8010c4c:	32fe      	adds	r2, #254	; 0xfe
 8010c4e:	eb02 030b 	add.w	r3, r2, fp
 8010c52:	46d8      	mov	r8, fp
 8010c54:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010c58:	9301      	str	r3, [sp, #4]
 8010c5a:	2830      	cmp	r0, #48	; 0x30
 8010c5c:	d0f7      	beq.n	8010c4e <__gethex+0x1e>
 8010c5e:	f7ff ffd1 	bl	8010c04 <__hexdig_fun>
 8010c62:	4604      	mov	r4, r0
 8010c64:	2800      	cmp	r0, #0
 8010c66:	d138      	bne.n	8010cda <__gethex+0xaa>
 8010c68:	49a7      	ldr	r1, [pc, #668]	; (8010f08 <__gethex+0x2d8>)
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	4640      	mov	r0, r8
 8010c6e:	f7ff fe38 	bl	80108e2 <strncmp>
 8010c72:	4606      	mov	r6, r0
 8010c74:	2800      	cmp	r0, #0
 8010c76:	d169      	bne.n	8010d4c <__gethex+0x11c>
 8010c78:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010c7c:	465d      	mov	r5, fp
 8010c7e:	f7ff ffc1 	bl	8010c04 <__hexdig_fun>
 8010c82:	2800      	cmp	r0, #0
 8010c84:	d064      	beq.n	8010d50 <__gethex+0x120>
 8010c86:	465a      	mov	r2, fp
 8010c88:	7810      	ldrb	r0, [r2, #0]
 8010c8a:	2830      	cmp	r0, #48	; 0x30
 8010c8c:	4690      	mov	r8, r2
 8010c8e:	f102 0201 	add.w	r2, r2, #1
 8010c92:	d0f9      	beq.n	8010c88 <__gethex+0x58>
 8010c94:	f7ff ffb6 	bl	8010c04 <__hexdig_fun>
 8010c98:	2301      	movs	r3, #1
 8010c9a:	fab0 f480 	clz	r4, r0
 8010c9e:	0964      	lsrs	r4, r4, #5
 8010ca0:	465e      	mov	r6, fp
 8010ca2:	9301      	str	r3, [sp, #4]
 8010ca4:	4642      	mov	r2, r8
 8010ca6:	4615      	mov	r5, r2
 8010ca8:	3201      	adds	r2, #1
 8010caa:	7828      	ldrb	r0, [r5, #0]
 8010cac:	f7ff ffaa 	bl	8010c04 <__hexdig_fun>
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	d1f8      	bne.n	8010ca6 <__gethex+0x76>
 8010cb4:	4994      	ldr	r1, [pc, #592]	; (8010f08 <__gethex+0x2d8>)
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f7ff fe12 	bl	80108e2 <strncmp>
 8010cbe:	b978      	cbnz	r0, 8010ce0 <__gethex+0xb0>
 8010cc0:	b946      	cbnz	r6, 8010cd4 <__gethex+0xa4>
 8010cc2:	1c6e      	adds	r6, r5, #1
 8010cc4:	4632      	mov	r2, r6
 8010cc6:	4615      	mov	r5, r2
 8010cc8:	3201      	adds	r2, #1
 8010cca:	7828      	ldrb	r0, [r5, #0]
 8010ccc:	f7ff ff9a 	bl	8010c04 <__hexdig_fun>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d1f8      	bne.n	8010cc6 <__gethex+0x96>
 8010cd4:	1b73      	subs	r3, r6, r5
 8010cd6:	009e      	lsls	r6, r3, #2
 8010cd8:	e004      	b.n	8010ce4 <__gethex+0xb4>
 8010cda:	2400      	movs	r4, #0
 8010cdc:	4626      	mov	r6, r4
 8010cde:	e7e1      	b.n	8010ca4 <__gethex+0x74>
 8010ce0:	2e00      	cmp	r6, #0
 8010ce2:	d1f7      	bne.n	8010cd4 <__gethex+0xa4>
 8010ce4:	782b      	ldrb	r3, [r5, #0]
 8010ce6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010cea:	2b50      	cmp	r3, #80	; 0x50
 8010cec:	d13d      	bne.n	8010d6a <__gethex+0x13a>
 8010cee:	786b      	ldrb	r3, [r5, #1]
 8010cf0:	2b2b      	cmp	r3, #43	; 0x2b
 8010cf2:	d02f      	beq.n	8010d54 <__gethex+0x124>
 8010cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8010cf6:	d031      	beq.n	8010d5c <__gethex+0x12c>
 8010cf8:	1c69      	adds	r1, r5, #1
 8010cfa:	f04f 0b00 	mov.w	fp, #0
 8010cfe:	7808      	ldrb	r0, [r1, #0]
 8010d00:	f7ff ff80 	bl	8010c04 <__hexdig_fun>
 8010d04:	1e42      	subs	r2, r0, #1
 8010d06:	b2d2      	uxtb	r2, r2
 8010d08:	2a18      	cmp	r2, #24
 8010d0a:	d82e      	bhi.n	8010d6a <__gethex+0x13a>
 8010d0c:	f1a0 0210 	sub.w	r2, r0, #16
 8010d10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010d14:	f7ff ff76 	bl	8010c04 <__hexdig_fun>
 8010d18:	f100 3cff 	add.w	ip, r0, #4294967295
 8010d1c:	fa5f fc8c 	uxtb.w	ip, ip
 8010d20:	f1bc 0f18 	cmp.w	ip, #24
 8010d24:	d91d      	bls.n	8010d62 <__gethex+0x132>
 8010d26:	f1bb 0f00 	cmp.w	fp, #0
 8010d2a:	d000      	beq.n	8010d2e <__gethex+0xfe>
 8010d2c:	4252      	negs	r2, r2
 8010d2e:	4416      	add	r6, r2
 8010d30:	f8ca 1000 	str.w	r1, [sl]
 8010d34:	b1dc      	cbz	r4, 8010d6e <__gethex+0x13e>
 8010d36:	9b01      	ldr	r3, [sp, #4]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	bf14      	ite	ne
 8010d3c:	f04f 0800 	movne.w	r8, #0
 8010d40:	f04f 0806 	moveq.w	r8, #6
 8010d44:	4640      	mov	r0, r8
 8010d46:	b005      	add	sp, #20
 8010d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d4c:	4645      	mov	r5, r8
 8010d4e:	4626      	mov	r6, r4
 8010d50:	2401      	movs	r4, #1
 8010d52:	e7c7      	b.n	8010ce4 <__gethex+0xb4>
 8010d54:	f04f 0b00 	mov.w	fp, #0
 8010d58:	1ca9      	adds	r1, r5, #2
 8010d5a:	e7d0      	b.n	8010cfe <__gethex+0xce>
 8010d5c:	f04f 0b01 	mov.w	fp, #1
 8010d60:	e7fa      	b.n	8010d58 <__gethex+0x128>
 8010d62:	230a      	movs	r3, #10
 8010d64:	fb03 0002 	mla	r0, r3, r2, r0
 8010d68:	e7d0      	b.n	8010d0c <__gethex+0xdc>
 8010d6a:	4629      	mov	r1, r5
 8010d6c:	e7e0      	b.n	8010d30 <__gethex+0x100>
 8010d6e:	eba5 0308 	sub.w	r3, r5, r8
 8010d72:	3b01      	subs	r3, #1
 8010d74:	4621      	mov	r1, r4
 8010d76:	2b07      	cmp	r3, #7
 8010d78:	dc0a      	bgt.n	8010d90 <__gethex+0x160>
 8010d7a:	4648      	mov	r0, r9
 8010d7c:	f000 fa5a 	bl	8011234 <_Balloc>
 8010d80:	4604      	mov	r4, r0
 8010d82:	b940      	cbnz	r0, 8010d96 <__gethex+0x166>
 8010d84:	4b61      	ldr	r3, [pc, #388]	; (8010f0c <__gethex+0x2dc>)
 8010d86:	4602      	mov	r2, r0
 8010d88:	21e4      	movs	r1, #228	; 0xe4
 8010d8a:	4861      	ldr	r0, [pc, #388]	; (8010f10 <__gethex+0x2e0>)
 8010d8c:	f002 f816 	bl	8012dbc <__assert_func>
 8010d90:	3101      	adds	r1, #1
 8010d92:	105b      	asrs	r3, r3, #1
 8010d94:	e7ef      	b.n	8010d76 <__gethex+0x146>
 8010d96:	f100 0a14 	add.w	sl, r0, #20
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	495a      	ldr	r1, [pc, #360]	; (8010f08 <__gethex+0x2d8>)
 8010d9e:	f8cd a004 	str.w	sl, [sp, #4]
 8010da2:	469b      	mov	fp, r3
 8010da4:	45a8      	cmp	r8, r5
 8010da6:	d342      	bcc.n	8010e2e <__gethex+0x1fe>
 8010da8:	9801      	ldr	r0, [sp, #4]
 8010daa:	f840 bb04 	str.w	fp, [r0], #4
 8010dae:	eba0 000a 	sub.w	r0, r0, sl
 8010db2:	1080      	asrs	r0, r0, #2
 8010db4:	6120      	str	r0, [r4, #16]
 8010db6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8010dba:	4658      	mov	r0, fp
 8010dbc:	f000 fb2c 	bl	8011418 <__hi0bits>
 8010dc0:	683d      	ldr	r5, [r7, #0]
 8010dc2:	eba8 0000 	sub.w	r0, r8, r0
 8010dc6:	42a8      	cmp	r0, r5
 8010dc8:	dd59      	ble.n	8010e7e <__gethex+0x24e>
 8010dca:	eba0 0805 	sub.w	r8, r0, r5
 8010dce:	4641      	mov	r1, r8
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	f000 febb 	bl	8011b4c <__any_on>
 8010dd6:	4683      	mov	fp, r0
 8010dd8:	b1b8      	cbz	r0, 8010e0a <__gethex+0x1da>
 8010dda:	f108 33ff 	add.w	r3, r8, #4294967295
 8010dde:	1159      	asrs	r1, r3, #5
 8010de0:	f003 021f 	and.w	r2, r3, #31
 8010de4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010de8:	f04f 0b01 	mov.w	fp, #1
 8010dec:	fa0b f202 	lsl.w	r2, fp, r2
 8010df0:	420a      	tst	r2, r1
 8010df2:	d00a      	beq.n	8010e0a <__gethex+0x1da>
 8010df4:	455b      	cmp	r3, fp
 8010df6:	dd06      	ble.n	8010e06 <__gethex+0x1d6>
 8010df8:	f1a8 0102 	sub.w	r1, r8, #2
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f000 fea5 	bl	8011b4c <__any_on>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	d138      	bne.n	8010e78 <__gethex+0x248>
 8010e06:	f04f 0b02 	mov.w	fp, #2
 8010e0a:	4641      	mov	r1, r8
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f7ff fea7 	bl	8010b60 <rshift>
 8010e12:	4446      	add	r6, r8
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	42b3      	cmp	r3, r6
 8010e18:	da41      	bge.n	8010e9e <__gethex+0x26e>
 8010e1a:	4621      	mov	r1, r4
 8010e1c:	4648      	mov	r0, r9
 8010e1e:	f000 fa49 	bl	80112b4 <_Bfree>
 8010e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e24:	2300      	movs	r3, #0
 8010e26:	6013      	str	r3, [r2, #0]
 8010e28:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8010e2c:	e78a      	b.n	8010d44 <__gethex+0x114>
 8010e2e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8010e32:	2a2e      	cmp	r2, #46	; 0x2e
 8010e34:	d014      	beq.n	8010e60 <__gethex+0x230>
 8010e36:	2b20      	cmp	r3, #32
 8010e38:	d106      	bne.n	8010e48 <__gethex+0x218>
 8010e3a:	9b01      	ldr	r3, [sp, #4]
 8010e3c:	f843 bb04 	str.w	fp, [r3], #4
 8010e40:	f04f 0b00 	mov.w	fp, #0
 8010e44:	9301      	str	r3, [sp, #4]
 8010e46:	465b      	mov	r3, fp
 8010e48:	7828      	ldrb	r0, [r5, #0]
 8010e4a:	9303      	str	r3, [sp, #12]
 8010e4c:	f7ff feda 	bl	8010c04 <__hexdig_fun>
 8010e50:	9b03      	ldr	r3, [sp, #12]
 8010e52:	f000 000f 	and.w	r0, r0, #15
 8010e56:	4098      	lsls	r0, r3
 8010e58:	ea4b 0b00 	orr.w	fp, fp, r0
 8010e5c:	3304      	adds	r3, #4
 8010e5e:	e7a1      	b.n	8010da4 <__gethex+0x174>
 8010e60:	45a8      	cmp	r8, r5
 8010e62:	d8e8      	bhi.n	8010e36 <__gethex+0x206>
 8010e64:	2201      	movs	r2, #1
 8010e66:	4628      	mov	r0, r5
 8010e68:	9303      	str	r3, [sp, #12]
 8010e6a:	f7ff fd3a 	bl	80108e2 <strncmp>
 8010e6e:	4926      	ldr	r1, [pc, #152]	; (8010f08 <__gethex+0x2d8>)
 8010e70:	9b03      	ldr	r3, [sp, #12]
 8010e72:	2800      	cmp	r0, #0
 8010e74:	d1df      	bne.n	8010e36 <__gethex+0x206>
 8010e76:	e795      	b.n	8010da4 <__gethex+0x174>
 8010e78:	f04f 0b03 	mov.w	fp, #3
 8010e7c:	e7c5      	b.n	8010e0a <__gethex+0x1da>
 8010e7e:	da0b      	bge.n	8010e98 <__gethex+0x268>
 8010e80:	eba5 0800 	sub.w	r8, r5, r0
 8010e84:	4621      	mov	r1, r4
 8010e86:	4642      	mov	r2, r8
 8010e88:	4648      	mov	r0, r9
 8010e8a:	f000 fc2d 	bl	80116e8 <__lshift>
 8010e8e:	eba6 0608 	sub.w	r6, r6, r8
 8010e92:	4604      	mov	r4, r0
 8010e94:	f100 0a14 	add.w	sl, r0, #20
 8010e98:	f04f 0b00 	mov.w	fp, #0
 8010e9c:	e7ba      	b.n	8010e14 <__gethex+0x1e4>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	42b3      	cmp	r3, r6
 8010ea2:	dd73      	ble.n	8010f8c <__gethex+0x35c>
 8010ea4:	1b9e      	subs	r6, r3, r6
 8010ea6:	42b5      	cmp	r5, r6
 8010ea8:	dc34      	bgt.n	8010f14 <__gethex+0x2e4>
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	2b02      	cmp	r3, #2
 8010eae:	d023      	beq.n	8010ef8 <__gethex+0x2c8>
 8010eb0:	2b03      	cmp	r3, #3
 8010eb2:	d025      	beq.n	8010f00 <__gethex+0x2d0>
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d115      	bne.n	8010ee4 <__gethex+0x2b4>
 8010eb8:	42b5      	cmp	r5, r6
 8010eba:	d113      	bne.n	8010ee4 <__gethex+0x2b4>
 8010ebc:	2d01      	cmp	r5, #1
 8010ebe:	d10b      	bne.n	8010ed8 <__gethex+0x2a8>
 8010ec0:	9a02      	ldr	r2, [sp, #8]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6013      	str	r3, [r2, #0]
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	6123      	str	r3, [r4, #16]
 8010eca:	f8ca 3000 	str.w	r3, [sl]
 8010ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ed0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8010ed4:	601c      	str	r4, [r3, #0]
 8010ed6:	e735      	b.n	8010d44 <__gethex+0x114>
 8010ed8:	1e69      	subs	r1, r5, #1
 8010eda:	4620      	mov	r0, r4
 8010edc:	f000 fe36 	bl	8011b4c <__any_on>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d1ed      	bne.n	8010ec0 <__gethex+0x290>
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	4648      	mov	r0, r9
 8010ee8:	f000 f9e4 	bl	80112b4 <_Bfree>
 8010eec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010eee:	2300      	movs	r3, #0
 8010ef0:	6013      	str	r3, [r2, #0]
 8010ef2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8010ef6:	e725      	b.n	8010d44 <__gethex+0x114>
 8010ef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d1f2      	bne.n	8010ee4 <__gethex+0x2b4>
 8010efe:	e7df      	b.n	8010ec0 <__gethex+0x290>
 8010f00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d1dc      	bne.n	8010ec0 <__gethex+0x290>
 8010f06:	e7ed      	b.n	8010ee4 <__gethex+0x2b4>
 8010f08:	080139a0 	.word	0x080139a0
 8010f0c:	08013b09 	.word	0x08013b09
 8010f10:	08013b1a 	.word	0x08013b1a
 8010f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8010f18:	f1bb 0f00 	cmp.w	fp, #0
 8010f1c:	d133      	bne.n	8010f86 <__gethex+0x356>
 8010f1e:	f1b8 0f00 	cmp.w	r8, #0
 8010f22:	d004      	beq.n	8010f2e <__gethex+0x2fe>
 8010f24:	4641      	mov	r1, r8
 8010f26:	4620      	mov	r0, r4
 8010f28:	f000 fe10 	bl	8011b4c <__any_on>
 8010f2c:	4683      	mov	fp, r0
 8010f2e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8010f32:	2301      	movs	r3, #1
 8010f34:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010f38:	f008 081f 	and.w	r8, r8, #31
 8010f3c:	fa03 f308 	lsl.w	r3, r3, r8
 8010f40:	4213      	tst	r3, r2
 8010f42:	4631      	mov	r1, r6
 8010f44:	4620      	mov	r0, r4
 8010f46:	bf18      	it	ne
 8010f48:	f04b 0b02 	orrne.w	fp, fp, #2
 8010f4c:	1bad      	subs	r5, r5, r6
 8010f4e:	f7ff fe07 	bl	8010b60 <rshift>
 8010f52:	687e      	ldr	r6, [r7, #4]
 8010f54:	f04f 0802 	mov.w	r8, #2
 8010f58:	f1bb 0f00 	cmp.w	fp, #0
 8010f5c:	d04a      	beq.n	8010ff4 <__gethex+0x3c4>
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2b02      	cmp	r3, #2
 8010f62:	d016      	beq.n	8010f92 <__gethex+0x362>
 8010f64:	2b03      	cmp	r3, #3
 8010f66:	d018      	beq.n	8010f9a <__gethex+0x36a>
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d109      	bne.n	8010f80 <__gethex+0x350>
 8010f6c:	f01b 0f02 	tst.w	fp, #2
 8010f70:	d006      	beq.n	8010f80 <__gethex+0x350>
 8010f72:	f8da 3000 	ldr.w	r3, [sl]
 8010f76:	ea4b 0b03 	orr.w	fp, fp, r3
 8010f7a:	f01b 0f01 	tst.w	fp, #1
 8010f7e:	d10f      	bne.n	8010fa0 <__gethex+0x370>
 8010f80:	f048 0810 	orr.w	r8, r8, #16
 8010f84:	e036      	b.n	8010ff4 <__gethex+0x3c4>
 8010f86:	f04f 0b01 	mov.w	fp, #1
 8010f8a:	e7d0      	b.n	8010f2e <__gethex+0x2fe>
 8010f8c:	f04f 0801 	mov.w	r8, #1
 8010f90:	e7e2      	b.n	8010f58 <__gethex+0x328>
 8010f92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f94:	f1c3 0301 	rsb	r3, r3, #1
 8010f98:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d0ef      	beq.n	8010f80 <__gethex+0x350>
 8010fa0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010fa4:	f104 0214 	add.w	r2, r4, #20
 8010fa8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010fac:	9301      	str	r3, [sp, #4]
 8010fae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	4694      	mov	ip, r2
 8010fb6:	f852 1b04 	ldr.w	r1, [r2], #4
 8010fba:	f1b1 3fff 	cmp.w	r1, #4294967295
 8010fbe:	d01e      	beq.n	8010ffe <__gethex+0x3ce>
 8010fc0:	3101      	adds	r1, #1
 8010fc2:	f8cc 1000 	str.w	r1, [ip]
 8010fc6:	f1b8 0f02 	cmp.w	r8, #2
 8010fca:	f104 0214 	add.w	r2, r4, #20
 8010fce:	d13d      	bne.n	801104c <__gethex+0x41c>
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	42ab      	cmp	r3, r5
 8010fd6:	d10b      	bne.n	8010ff0 <__gethex+0x3c0>
 8010fd8:	1169      	asrs	r1, r5, #5
 8010fda:	2301      	movs	r3, #1
 8010fdc:	f005 051f 	and.w	r5, r5, #31
 8010fe0:	fa03 f505 	lsl.w	r5, r3, r5
 8010fe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010fe8:	421d      	tst	r5, r3
 8010fea:	bf18      	it	ne
 8010fec:	f04f 0801 	movne.w	r8, #1
 8010ff0:	f048 0820 	orr.w	r8, r8, #32
 8010ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ff6:	601c      	str	r4, [r3, #0]
 8010ff8:	9b02      	ldr	r3, [sp, #8]
 8010ffa:	601e      	str	r6, [r3, #0]
 8010ffc:	e6a2      	b.n	8010d44 <__gethex+0x114>
 8010ffe:	4290      	cmp	r0, r2
 8011000:	f842 3c04 	str.w	r3, [r2, #-4]
 8011004:	d8d6      	bhi.n	8010fb4 <__gethex+0x384>
 8011006:	68a2      	ldr	r2, [r4, #8]
 8011008:	4593      	cmp	fp, r2
 801100a:	db17      	blt.n	801103c <__gethex+0x40c>
 801100c:	6861      	ldr	r1, [r4, #4]
 801100e:	4648      	mov	r0, r9
 8011010:	3101      	adds	r1, #1
 8011012:	f000 f90f 	bl	8011234 <_Balloc>
 8011016:	4682      	mov	sl, r0
 8011018:	b918      	cbnz	r0, 8011022 <__gethex+0x3f2>
 801101a:	4b1b      	ldr	r3, [pc, #108]	; (8011088 <__gethex+0x458>)
 801101c:	4602      	mov	r2, r0
 801101e:	2184      	movs	r1, #132	; 0x84
 8011020:	e6b3      	b.n	8010d8a <__gethex+0x15a>
 8011022:	6922      	ldr	r2, [r4, #16]
 8011024:	3202      	adds	r2, #2
 8011026:	f104 010c 	add.w	r1, r4, #12
 801102a:	0092      	lsls	r2, r2, #2
 801102c:	300c      	adds	r0, #12
 801102e:	f7ff fd32 	bl	8010a96 <memcpy>
 8011032:	4621      	mov	r1, r4
 8011034:	4648      	mov	r0, r9
 8011036:	f000 f93d 	bl	80112b4 <_Bfree>
 801103a:	4654      	mov	r4, sl
 801103c:	6922      	ldr	r2, [r4, #16]
 801103e:	1c51      	adds	r1, r2, #1
 8011040:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011044:	6121      	str	r1, [r4, #16]
 8011046:	2101      	movs	r1, #1
 8011048:	6151      	str	r1, [r2, #20]
 801104a:	e7bc      	b.n	8010fc6 <__gethex+0x396>
 801104c:	6921      	ldr	r1, [r4, #16]
 801104e:	4559      	cmp	r1, fp
 8011050:	dd0b      	ble.n	801106a <__gethex+0x43a>
 8011052:	2101      	movs	r1, #1
 8011054:	4620      	mov	r0, r4
 8011056:	f7ff fd83 	bl	8010b60 <rshift>
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	3601      	adds	r6, #1
 801105e:	42b3      	cmp	r3, r6
 8011060:	f6ff aedb 	blt.w	8010e1a <__gethex+0x1ea>
 8011064:	f04f 0801 	mov.w	r8, #1
 8011068:	e7c2      	b.n	8010ff0 <__gethex+0x3c0>
 801106a:	f015 051f 	ands.w	r5, r5, #31
 801106e:	d0f9      	beq.n	8011064 <__gethex+0x434>
 8011070:	9b01      	ldr	r3, [sp, #4]
 8011072:	441a      	add	r2, r3
 8011074:	f1c5 0520 	rsb	r5, r5, #32
 8011078:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801107c:	f000 f9cc 	bl	8011418 <__hi0bits>
 8011080:	42a8      	cmp	r0, r5
 8011082:	dbe6      	blt.n	8011052 <__gethex+0x422>
 8011084:	e7ee      	b.n	8011064 <__gethex+0x434>
 8011086:	bf00      	nop
 8011088:	08013b09 	.word	0x08013b09

0801108c <L_shift>:
 801108c:	f1c2 0208 	rsb	r2, r2, #8
 8011090:	0092      	lsls	r2, r2, #2
 8011092:	b570      	push	{r4, r5, r6, lr}
 8011094:	f1c2 0620 	rsb	r6, r2, #32
 8011098:	6843      	ldr	r3, [r0, #4]
 801109a:	6804      	ldr	r4, [r0, #0]
 801109c:	fa03 f506 	lsl.w	r5, r3, r6
 80110a0:	432c      	orrs	r4, r5
 80110a2:	40d3      	lsrs	r3, r2
 80110a4:	6004      	str	r4, [r0, #0]
 80110a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80110aa:	4288      	cmp	r0, r1
 80110ac:	d3f4      	bcc.n	8011098 <L_shift+0xc>
 80110ae:	bd70      	pop	{r4, r5, r6, pc}

080110b0 <__match>:
 80110b0:	b530      	push	{r4, r5, lr}
 80110b2:	6803      	ldr	r3, [r0, #0]
 80110b4:	3301      	adds	r3, #1
 80110b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110ba:	b914      	cbnz	r4, 80110c2 <__match+0x12>
 80110bc:	6003      	str	r3, [r0, #0]
 80110be:	2001      	movs	r0, #1
 80110c0:	bd30      	pop	{r4, r5, pc}
 80110c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80110ca:	2d19      	cmp	r5, #25
 80110cc:	bf98      	it	ls
 80110ce:	3220      	addls	r2, #32
 80110d0:	42a2      	cmp	r2, r4
 80110d2:	d0f0      	beq.n	80110b6 <__match+0x6>
 80110d4:	2000      	movs	r0, #0
 80110d6:	e7f3      	b.n	80110c0 <__match+0x10>

080110d8 <__hexnan>:
 80110d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110dc:	680b      	ldr	r3, [r1, #0]
 80110de:	6801      	ldr	r1, [r0, #0]
 80110e0:	115e      	asrs	r6, r3, #5
 80110e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80110e6:	f013 031f 	ands.w	r3, r3, #31
 80110ea:	b087      	sub	sp, #28
 80110ec:	bf18      	it	ne
 80110ee:	3604      	addne	r6, #4
 80110f0:	2500      	movs	r5, #0
 80110f2:	1f37      	subs	r7, r6, #4
 80110f4:	4682      	mov	sl, r0
 80110f6:	4690      	mov	r8, r2
 80110f8:	9301      	str	r3, [sp, #4]
 80110fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80110fe:	46b9      	mov	r9, r7
 8011100:	463c      	mov	r4, r7
 8011102:	9502      	str	r5, [sp, #8]
 8011104:	46ab      	mov	fp, r5
 8011106:	784a      	ldrb	r2, [r1, #1]
 8011108:	1c4b      	adds	r3, r1, #1
 801110a:	9303      	str	r3, [sp, #12]
 801110c:	b342      	cbz	r2, 8011160 <__hexnan+0x88>
 801110e:	4610      	mov	r0, r2
 8011110:	9105      	str	r1, [sp, #20]
 8011112:	9204      	str	r2, [sp, #16]
 8011114:	f7ff fd76 	bl	8010c04 <__hexdig_fun>
 8011118:	2800      	cmp	r0, #0
 801111a:	d14f      	bne.n	80111bc <__hexnan+0xe4>
 801111c:	9a04      	ldr	r2, [sp, #16]
 801111e:	9905      	ldr	r1, [sp, #20]
 8011120:	2a20      	cmp	r2, #32
 8011122:	d818      	bhi.n	8011156 <__hexnan+0x7e>
 8011124:	9b02      	ldr	r3, [sp, #8]
 8011126:	459b      	cmp	fp, r3
 8011128:	dd13      	ble.n	8011152 <__hexnan+0x7a>
 801112a:	454c      	cmp	r4, r9
 801112c:	d206      	bcs.n	801113c <__hexnan+0x64>
 801112e:	2d07      	cmp	r5, #7
 8011130:	dc04      	bgt.n	801113c <__hexnan+0x64>
 8011132:	462a      	mov	r2, r5
 8011134:	4649      	mov	r1, r9
 8011136:	4620      	mov	r0, r4
 8011138:	f7ff ffa8 	bl	801108c <L_shift>
 801113c:	4544      	cmp	r4, r8
 801113e:	d950      	bls.n	80111e2 <__hexnan+0x10a>
 8011140:	2300      	movs	r3, #0
 8011142:	f1a4 0904 	sub.w	r9, r4, #4
 8011146:	f844 3c04 	str.w	r3, [r4, #-4]
 801114a:	f8cd b008 	str.w	fp, [sp, #8]
 801114e:	464c      	mov	r4, r9
 8011150:	461d      	mov	r5, r3
 8011152:	9903      	ldr	r1, [sp, #12]
 8011154:	e7d7      	b.n	8011106 <__hexnan+0x2e>
 8011156:	2a29      	cmp	r2, #41	; 0x29
 8011158:	d155      	bne.n	8011206 <__hexnan+0x12e>
 801115a:	3102      	adds	r1, #2
 801115c:	f8ca 1000 	str.w	r1, [sl]
 8011160:	f1bb 0f00 	cmp.w	fp, #0
 8011164:	d04f      	beq.n	8011206 <__hexnan+0x12e>
 8011166:	454c      	cmp	r4, r9
 8011168:	d206      	bcs.n	8011178 <__hexnan+0xa0>
 801116a:	2d07      	cmp	r5, #7
 801116c:	dc04      	bgt.n	8011178 <__hexnan+0xa0>
 801116e:	462a      	mov	r2, r5
 8011170:	4649      	mov	r1, r9
 8011172:	4620      	mov	r0, r4
 8011174:	f7ff ff8a 	bl	801108c <L_shift>
 8011178:	4544      	cmp	r4, r8
 801117a:	d934      	bls.n	80111e6 <__hexnan+0x10e>
 801117c:	f1a8 0204 	sub.w	r2, r8, #4
 8011180:	4623      	mov	r3, r4
 8011182:	f853 1b04 	ldr.w	r1, [r3], #4
 8011186:	f842 1f04 	str.w	r1, [r2, #4]!
 801118a:	429f      	cmp	r7, r3
 801118c:	d2f9      	bcs.n	8011182 <__hexnan+0xaa>
 801118e:	1b3b      	subs	r3, r7, r4
 8011190:	f023 0303 	bic.w	r3, r3, #3
 8011194:	3304      	adds	r3, #4
 8011196:	3e03      	subs	r6, #3
 8011198:	3401      	adds	r4, #1
 801119a:	42a6      	cmp	r6, r4
 801119c:	bf38      	it	cc
 801119e:	2304      	movcc	r3, #4
 80111a0:	4443      	add	r3, r8
 80111a2:	2200      	movs	r2, #0
 80111a4:	f843 2b04 	str.w	r2, [r3], #4
 80111a8:	429f      	cmp	r7, r3
 80111aa:	d2fb      	bcs.n	80111a4 <__hexnan+0xcc>
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	b91b      	cbnz	r3, 80111b8 <__hexnan+0xe0>
 80111b0:	4547      	cmp	r7, r8
 80111b2:	d126      	bne.n	8011202 <__hexnan+0x12a>
 80111b4:	2301      	movs	r3, #1
 80111b6:	603b      	str	r3, [r7, #0]
 80111b8:	2005      	movs	r0, #5
 80111ba:	e025      	b.n	8011208 <__hexnan+0x130>
 80111bc:	3501      	adds	r5, #1
 80111be:	2d08      	cmp	r5, #8
 80111c0:	f10b 0b01 	add.w	fp, fp, #1
 80111c4:	dd06      	ble.n	80111d4 <__hexnan+0xfc>
 80111c6:	4544      	cmp	r4, r8
 80111c8:	d9c3      	bls.n	8011152 <__hexnan+0x7a>
 80111ca:	2300      	movs	r3, #0
 80111cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80111d0:	2501      	movs	r5, #1
 80111d2:	3c04      	subs	r4, #4
 80111d4:	6822      	ldr	r2, [r4, #0]
 80111d6:	f000 000f 	and.w	r0, r0, #15
 80111da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80111de:	6020      	str	r0, [r4, #0]
 80111e0:	e7b7      	b.n	8011152 <__hexnan+0x7a>
 80111e2:	2508      	movs	r5, #8
 80111e4:	e7b5      	b.n	8011152 <__hexnan+0x7a>
 80111e6:	9b01      	ldr	r3, [sp, #4]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d0df      	beq.n	80111ac <__hexnan+0xd4>
 80111ec:	f1c3 0320 	rsb	r3, r3, #32
 80111f0:	f04f 32ff 	mov.w	r2, #4294967295
 80111f4:	40da      	lsrs	r2, r3
 80111f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80111fa:	4013      	ands	r3, r2
 80111fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8011200:	e7d4      	b.n	80111ac <__hexnan+0xd4>
 8011202:	3f04      	subs	r7, #4
 8011204:	e7d2      	b.n	80111ac <__hexnan+0xd4>
 8011206:	2004      	movs	r0, #4
 8011208:	b007      	add	sp, #28
 801120a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801120e <__ascii_mbtowc>:
 801120e:	b082      	sub	sp, #8
 8011210:	b901      	cbnz	r1, 8011214 <__ascii_mbtowc+0x6>
 8011212:	a901      	add	r1, sp, #4
 8011214:	b142      	cbz	r2, 8011228 <__ascii_mbtowc+0x1a>
 8011216:	b14b      	cbz	r3, 801122c <__ascii_mbtowc+0x1e>
 8011218:	7813      	ldrb	r3, [r2, #0]
 801121a:	600b      	str	r3, [r1, #0]
 801121c:	7812      	ldrb	r2, [r2, #0]
 801121e:	1e10      	subs	r0, r2, #0
 8011220:	bf18      	it	ne
 8011222:	2001      	movne	r0, #1
 8011224:	b002      	add	sp, #8
 8011226:	4770      	bx	lr
 8011228:	4610      	mov	r0, r2
 801122a:	e7fb      	b.n	8011224 <__ascii_mbtowc+0x16>
 801122c:	f06f 0001 	mvn.w	r0, #1
 8011230:	e7f8      	b.n	8011224 <__ascii_mbtowc+0x16>
	...

08011234 <_Balloc>:
 8011234:	b570      	push	{r4, r5, r6, lr}
 8011236:	69c6      	ldr	r6, [r0, #28]
 8011238:	4604      	mov	r4, r0
 801123a:	460d      	mov	r5, r1
 801123c:	b976      	cbnz	r6, 801125c <_Balloc+0x28>
 801123e:	2010      	movs	r0, #16
 8011240:	f7fe fa66 	bl	800f710 <malloc>
 8011244:	4602      	mov	r2, r0
 8011246:	61e0      	str	r0, [r4, #28]
 8011248:	b920      	cbnz	r0, 8011254 <_Balloc+0x20>
 801124a:	4b18      	ldr	r3, [pc, #96]	; (80112ac <_Balloc+0x78>)
 801124c:	4818      	ldr	r0, [pc, #96]	; (80112b0 <_Balloc+0x7c>)
 801124e:	216b      	movs	r1, #107	; 0x6b
 8011250:	f001 fdb4 	bl	8012dbc <__assert_func>
 8011254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011258:	6006      	str	r6, [r0, #0]
 801125a:	60c6      	str	r6, [r0, #12]
 801125c:	69e6      	ldr	r6, [r4, #28]
 801125e:	68f3      	ldr	r3, [r6, #12]
 8011260:	b183      	cbz	r3, 8011284 <_Balloc+0x50>
 8011262:	69e3      	ldr	r3, [r4, #28]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801126a:	b9b8      	cbnz	r0, 801129c <_Balloc+0x68>
 801126c:	2101      	movs	r1, #1
 801126e:	fa01 f605 	lsl.w	r6, r1, r5
 8011272:	1d72      	adds	r2, r6, #5
 8011274:	0092      	lsls	r2, r2, #2
 8011276:	4620      	mov	r0, r4
 8011278:	f001 fdbe 	bl	8012df8 <_calloc_r>
 801127c:	b160      	cbz	r0, 8011298 <_Balloc+0x64>
 801127e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011282:	e00e      	b.n	80112a2 <_Balloc+0x6e>
 8011284:	2221      	movs	r2, #33	; 0x21
 8011286:	2104      	movs	r1, #4
 8011288:	4620      	mov	r0, r4
 801128a:	f001 fdb5 	bl	8012df8 <_calloc_r>
 801128e:	69e3      	ldr	r3, [r4, #28]
 8011290:	60f0      	str	r0, [r6, #12]
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d1e4      	bne.n	8011262 <_Balloc+0x2e>
 8011298:	2000      	movs	r0, #0
 801129a:	bd70      	pop	{r4, r5, r6, pc}
 801129c:	6802      	ldr	r2, [r0, #0]
 801129e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112a2:	2300      	movs	r3, #0
 80112a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80112a8:	e7f7      	b.n	801129a <_Balloc+0x66>
 80112aa:	bf00      	nop
 80112ac:	08013b7a 	.word	0x08013b7a
 80112b0:	08013b91 	.word	0x08013b91

080112b4 <_Bfree>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	69c6      	ldr	r6, [r0, #28]
 80112b8:	4605      	mov	r5, r0
 80112ba:	460c      	mov	r4, r1
 80112bc:	b976      	cbnz	r6, 80112dc <_Bfree+0x28>
 80112be:	2010      	movs	r0, #16
 80112c0:	f7fe fa26 	bl	800f710 <malloc>
 80112c4:	4602      	mov	r2, r0
 80112c6:	61e8      	str	r0, [r5, #28]
 80112c8:	b920      	cbnz	r0, 80112d4 <_Bfree+0x20>
 80112ca:	4b09      	ldr	r3, [pc, #36]	; (80112f0 <_Bfree+0x3c>)
 80112cc:	4809      	ldr	r0, [pc, #36]	; (80112f4 <_Bfree+0x40>)
 80112ce:	218f      	movs	r1, #143	; 0x8f
 80112d0:	f001 fd74 	bl	8012dbc <__assert_func>
 80112d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112d8:	6006      	str	r6, [r0, #0]
 80112da:	60c6      	str	r6, [r0, #12]
 80112dc:	b13c      	cbz	r4, 80112ee <_Bfree+0x3a>
 80112de:	69eb      	ldr	r3, [r5, #28]
 80112e0:	6862      	ldr	r2, [r4, #4]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112e8:	6021      	str	r1, [r4, #0]
 80112ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80112ee:	bd70      	pop	{r4, r5, r6, pc}
 80112f0:	08013b7a 	.word	0x08013b7a
 80112f4:	08013b91 	.word	0x08013b91

080112f8 <__multadd>:
 80112f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112fc:	690d      	ldr	r5, [r1, #16]
 80112fe:	4607      	mov	r7, r0
 8011300:	460c      	mov	r4, r1
 8011302:	461e      	mov	r6, r3
 8011304:	f101 0c14 	add.w	ip, r1, #20
 8011308:	2000      	movs	r0, #0
 801130a:	f8dc 3000 	ldr.w	r3, [ip]
 801130e:	b299      	uxth	r1, r3
 8011310:	fb02 6101 	mla	r1, r2, r1, r6
 8011314:	0c1e      	lsrs	r6, r3, #16
 8011316:	0c0b      	lsrs	r3, r1, #16
 8011318:	fb02 3306 	mla	r3, r2, r6, r3
 801131c:	b289      	uxth	r1, r1
 801131e:	3001      	adds	r0, #1
 8011320:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011324:	4285      	cmp	r5, r0
 8011326:	f84c 1b04 	str.w	r1, [ip], #4
 801132a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801132e:	dcec      	bgt.n	801130a <__multadd+0x12>
 8011330:	b30e      	cbz	r6, 8011376 <__multadd+0x7e>
 8011332:	68a3      	ldr	r3, [r4, #8]
 8011334:	42ab      	cmp	r3, r5
 8011336:	dc19      	bgt.n	801136c <__multadd+0x74>
 8011338:	6861      	ldr	r1, [r4, #4]
 801133a:	4638      	mov	r0, r7
 801133c:	3101      	adds	r1, #1
 801133e:	f7ff ff79 	bl	8011234 <_Balloc>
 8011342:	4680      	mov	r8, r0
 8011344:	b928      	cbnz	r0, 8011352 <__multadd+0x5a>
 8011346:	4602      	mov	r2, r0
 8011348:	4b0c      	ldr	r3, [pc, #48]	; (801137c <__multadd+0x84>)
 801134a:	480d      	ldr	r0, [pc, #52]	; (8011380 <__multadd+0x88>)
 801134c:	21ba      	movs	r1, #186	; 0xba
 801134e:	f001 fd35 	bl	8012dbc <__assert_func>
 8011352:	6922      	ldr	r2, [r4, #16]
 8011354:	3202      	adds	r2, #2
 8011356:	f104 010c 	add.w	r1, r4, #12
 801135a:	0092      	lsls	r2, r2, #2
 801135c:	300c      	adds	r0, #12
 801135e:	f7ff fb9a 	bl	8010a96 <memcpy>
 8011362:	4621      	mov	r1, r4
 8011364:	4638      	mov	r0, r7
 8011366:	f7ff ffa5 	bl	80112b4 <_Bfree>
 801136a:	4644      	mov	r4, r8
 801136c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011370:	3501      	adds	r5, #1
 8011372:	615e      	str	r6, [r3, #20]
 8011374:	6125      	str	r5, [r4, #16]
 8011376:	4620      	mov	r0, r4
 8011378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801137c:	08013b09 	.word	0x08013b09
 8011380:	08013b91 	.word	0x08013b91

08011384 <__s2b>:
 8011384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011388:	460c      	mov	r4, r1
 801138a:	4615      	mov	r5, r2
 801138c:	461f      	mov	r7, r3
 801138e:	2209      	movs	r2, #9
 8011390:	3308      	adds	r3, #8
 8011392:	4606      	mov	r6, r0
 8011394:	fb93 f3f2 	sdiv	r3, r3, r2
 8011398:	2100      	movs	r1, #0
 801139a:	2201      	movs	r2, #1
 801139c:	429a      	cmp	r2, r3
 801139e:	db09      	blt.n	80113b4 <__s2b+0x30>
 80113a0:	4630      	mov	r0, r6
 80113a2:	f7ff ff47 	bl	8011234 <_Balloc>
 80113a6:	b940      	cbnz	r0, 80113ba <__s2b+0x36>
 80113a8:	4602      	mov	r2, r0
 80113aa:	4b19      	ldr	r3, [pc, #100]	; (8011410 <__s2b+0x8c>)
 80113ac:	4819      	ldr	r0, [pc, #100]	; (8011414 <__s2b+0x90>)
 80113ae:	21d3      	movs	r1, #211	; 0xd3
 80113b0:	f001 fd04 	bl	8012dbc <__assert_func>
 80113b4:	0052      	lsls	r2, r2, #1
 80113b6:	3101      	adds	r1, #1
 80113b8:	e7f0      	b.n	801139c <__s2b+0x18>
 80113ba:	9b08      	ldr	r3, [sp, #32]
 80113bc:	6143      	str	r3, [r0, #20]
 80113be:	2d09      	cmp	r5, #9
 80113c0:	f04f 0301 	mov.w	r3, #1
 80113c4:	6103      	str	r3, [r0, #16]
 80113c6:	dd16      	ble.n	80113f6 <__s2b+0x72>
 80113c8:	f104 0909 	add.w	r9, r4, #9
 80113cc:	46c8      	mov	r8, r9
 80113ce:	442c      	add	r4, r5
 80113d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80113d4:	4601      	mov	r1, r0
 80113d6:	3b30      	subs	r3, #48	; 0x30
 80113d8:	220a      	movs	r2, #10
 80113da:	4630      	mov	r0, r6
 80113dc:	f7ff ff8c 	bl	80112f8 <__multadd>
 80113e0:	45a0      	cmp	r8, r4
 80113e2:	d1f5      	bne.n	80113d0 <__s2b+0x4c>
 80113e4:	f1a5 0408 	sub.w	r4, r5, #8
 80113e8:	444c      	add	r4, r9
 80113ea:	1b2d      	subs	r5, r5, r4
 80113ec:	1963      	adds	r3, r4, r5
 80113ee:	42bb      	cmp	r3, r7
 80113f0:	db04      	blt.n	80113fc <__s2b+0x78>
 80113f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113f6:	340a      	adds	r4, #10
 80113f8:	2509      	movs	r5, #9
 80113fa:	e7f6      	b.n	80113ea <__s2b+0x66>
 80113fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011400:	4601      	mov	r1, r0
 8011402:	3b30      	subs	r3, #48	; 0x30
 8011404:	220a      	movs	r2, #10
 8011406:	4630      	mov	r0, r6
 8011408:	f7ff ff76 	bl	80112f8 <__multadd>
 801140c:	e7ee      	b.n	80113ec <__s2b+0x68>
 801140e:	bf00      	nop
 8011410:	08013b09 	.word	0x08013b09
 8011414:	08013b91 	.word	0x08013b91

08011418 <__hi0bits>:
 8011418:	0c03      	lsrs	r3, r0, #16
 801141a:	041b      	lsls	r3, r3, #16
 801141c:	b9d3      	cbnz	r3, 8011454 <__hi0bits+0x3c>
 801141e:	0400      	lsls	r0, r0, #16
 8011420:	2310      	movs	r3, #16
 8011422:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011426:	bf04      	itt	eq
 8011428:	0200      	lsleq	r0, r0, #8
 801142a:	3308      	addeq	r3, #8
 801142c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011430:	bf04      	itt	eq
 8011432:	0100      	lsleq	r0, r0, #4
 8011434:	3304      	addeq	r3, #4
 8011436:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801143a:	bf04      	itt	eq
 801143c:	0080      	lsleq	r0, r0, #2
 801143e:	3302      	addeq	r3, #2
 8011440:	2800      	cmp	r0, #0
 8011442:	db05      	blt.n	8011450 <__hi0bits+0x38>
 8011444:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011448:	f103 0301 	add.w	r3, r3, #1
 801144c:	bf08      	it	eq
 801144e:	2320      	moveq	r3, #32
 8011450:	4618      	mov	r0, r3
 8011452:	4770      	bx	lr
 8011454:	2300      	movs	r3, #0
 8011456:	e7e4      	b.n	8011422 <__hi0bits+0xa>

08011458 <__lo0bits>:
 8011458:	6803      	ldr	r3, [r0, #0]
 801145a:	f013 0207 	ands.w	r2, r3, #7
 801145e:	d00c      	beq.n	801147a <__lo0bits+0x22>
 8011460:	07d9      	lsls	r1, r3, #31
 8011462:	d422      	bmi.n	80114aa <__lo0bits+0x52>
 8011464:	079a      	lsls	r2, r3, #30
 8011466:	bf49      	itett	mi
 8011468:	085b      	lsrmi	r3, r3, #1
 801146a:	089b      	lsrpl	r3, r3, #2
 801146c:	6003      	strmi	r3, [r0, #0]
 801146e:	2201      	movmi	r2, #1
 8011470:	bf5c      	itt	pl
 8011472:	6003      	strpl	r3, [r0, #0]
 8011474:	2202      	movpl	r2, #2
 8011476:	4610      	mov	r0, r2
 8011478:	4770      	bx	lr
 801147a:	b299      	uxth	r1, r3
 801147c:	b909      	cbnz	r1, 8011482 <__lo0bits+0x2a>
 801147e:	0c1b      	lsrs	r3, r3, #16
 8011480:	2210      	movs	r2, #16
 8011482:	b2d9      	uxtb	r1, r3
 8011484:	b909      	cbnz	r1, 801148a <__lo0bits+0x32>
 8011486:	3208      	adds	r2, #8
 8011488:	0a1b      	lsrs	r3, r3, #8
 801148a:	0719      	lsls	r1, r3, #28
 801148c:	bf04      	itt	eq
 801148e:	091b      	lsreq	r3, r3, #4
 8011490:	3204      	addeq	r2, #4
 8011492:	0799      	lsls	r1, r3, #30
 8011494:	bf04      	itt	eq
 8011496:	089b      	lsreq	r3, r3, #2
 8011498:	3202      	addeq	r2, #2
 801149a:	07d9      	lsls	r1, r3, #31
 801149c:	d403      	bmi.n	80114a6 <__lo0bits+0x4e>
 801149e:	085b      	lsrs	r3, r3, #1
 80114a0:	f102 0201 	add.w	r2, r2, #1
 80114a4:	d003      	beq.n	80114ae <__lo0bits+0x56>
 80114a6:	6003      	str	r3, [r0, #0]
 80114a8:	e7e5      	b.n	8011476 <__lo0bits+0x1e>
 80114aa:	2200      	movs	r2, #0
 80114ac:	e7e3      	b.n	8011476 <__lo0bits+0x1e>
 80114ae:	2220      	movs	r2, #32
 80114b0:	e7e1      	b.n	8011476 <__lo0bits+0x1e>
	...

080114b4 <__i2b>:
 80114b4:	b510      	push	{r4, lr}
 80114b6:	460c      	mov	r4, r1
 80114b8:	2101      	movs	r1, #1
 80114ba:	f7ff febb 	bl	8011234 <_Balloc>
 80114be:	4602      	mov	r2, r0
 80114c0:	b928      	cbnz	r0, 80114ce <__i2b+0x1a>
 80114c2:	4b05      	ldr	r3, [pc, #20]	; (80114d8 <__i2b+0x24>)
 80114c4:	4805      	ldr	r0, [pc, #20]	; (80114dc <__i2b+0x28>)
 80114c6:	f240 1145 	movw	r1, #325	; 0x145
 80114ca:	f001 fc77 	bl	8012dbc <__assert_func>
 80114ce:	2301      	movs	r3, #1
 80114d0:	6144      	str	r4, [r0, #20]
 80114d2:	6103      	str	r3, [r0, #16]
 80114d4:	bd10      	pop	{r4, pc}
 80114d6:	bf00      	nop
 80114d8:	08013b09 	.word	0x08013b09
 80114dc:	08013b91 	.word	0x08013b91

080114e0 <__multiply>:
 80114e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e4:	4691      	mov	r9, r2
 80114e6:	690a      	ldr	r2, [r1, #16]
 80114e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	bfb8      	it	lt
 80114f0:	460b      	movlt	r3, r1
 80114f2:	460c      	mov	r4, r1
 80114f4:	bfbc      	itt	lt
 80114f6:	464c      	movlt	r4, r9
 80114f8:	4699      	movlt	r9, r3
 80114fa:	6927      	ldr	r7, [r4, #16]
 80114fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011500:	68a3      	ldr	r3, [r4, #8]
 8011502:	6861      	ldr	r1, [r4, #4]
 8011504:	eb07 060a 	add.w	r6, r7, sl
 8011508:	42b3      	cmp	r3, r6
 801150a:	b085      	sub	sp, #20
 801150c:	bfb8      	it	lt
 801150e:	3101      	addlt	r1, #1
 8011510:	f7ff fe90 	bl	8011234 <_Balloc>
 8011514:	b930      	cbnz	r0, 8011524 <__multiply+0x44>
 8011516:	4602      	mov	r2, r0
 8011518:	4b44      	ldr	r3, [pc, #272]	; (801162c <__multiply+0x14c>)
 801151a:	4845      	ldr	r0, [pc, #276]	; (8011630 <__multiply+0x150>)
 801151c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011520:	f001 fc4c 	bl	8012dbc <__assert_func>
 8011524:	f100 0514 	add.w	r5, r0, #20
 8011528:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801152c:	462b      	mov	r3, r5
 801152e:	2200      	movs	r2, #0
 8011530:	4543      	cmp	r3, r8
 8011532:	d321      	bcc.n	8011578 <__multiply+0x98>
 8011534:	f104 0314 	add.w	r3, r4, #20
 8011538:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801153c:	f109 0314 	add.w	r3, r9, #20
 8011540:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011544:	9202      	str	r2, [sp, #8]
 8011546:	1b3a      	subs	r2, r7, r4
 8011548:	3a15      	subs	r2, #21
 801154a:	f022 0203 	bic.w	r2, r2, #3
 801154e:	3204      	adds	r2, #4
 8011550:	f104 0115 	add.w	r1, r4, #21
 8011554:	428f      	cmp	r7, r1
 8011556:	bf38      	it	cc
 8011558:	2204      	movcc	r2, #4
 801155a:	9201      	str	r2, [sp, #4]
 801155c:	9a02      	ldr	r2, [sp, #8]
 801155e:	9303      	str	r3, [sp, #12]
 8011560:	429a      	cmp	r2, r3
 8011562:	d80c      	bhi.n	801157e <__multiply+0x9e>
 8011564:	2e00      	cmp	r6, #0
 8011566:	dd03      	ble.n	8011570 <__multiply+0x90>
 8011568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801156c:	2b00      	cmp	r3, #0
 801156e:	d05b      	beq.n	8011628 <__multiply+0x148>
 8011570:	6106      	str	r6, [r0, #16]
 8011572:	b005      	add	sp, #20
 8011574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011578:	f843 2b04 	str.w	r2, [r3], #4
 801157c:	e7d8      	b.n	8011530 <__multiply+0x50>
 801157e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011582:	f1ba 0f00 	cmp.w	sl, #0
 8011586:	d024      	beq.n	80115d2 <__multiply+0xf2>
 8011588:	f104 0e14 	add.w	lr, r4, #20
 801158c:	46a9      	mov	r9, r5
 801158e:	f04f 0c00 	mov.w	ip, #0
 8011592:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011596:	f8d9 1000 	ldr.w	r1, [r9]
 801159a:	fa1f fb82 	uxth.w	fp, r2
 801159e:	b289      	uxth	r1, r1
 80115a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80115a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80115a8:	f8d9 2000 	ldr.w	r2, [r9]
 80115ac:	4461      	add	r1, ip
 80115ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80115b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80115b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80115ba:	b289      	uxth	r1, r1
 80115bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80115c0:	4577      	cmp	r7, lr
 80115c2:	f849 1b04 	str.w	r1, [r9], #4
 80115c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80115ca:	d8e2      	bhi.n	8011592 <__multiply+0xb2>
 80115cc:	9a01      	ldr	r2, [sp, #4]
 80115ce:	f845 c002 	str.w	ip, [r5, r2]
 80115d2:	9a03      	ldr	r2, [sp, #12]
 80115d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80115d8:	3304      	adds	r3, #4
 80115da:	f1b9 0f00 	cmp.w	r9, #0
 80115de:	d021      	beq.n	8011624 <__multiply+0x144>
 80115e0:	6829      	ldr	r1, [r5, #0]
 80115e2:	f104 0c14 	add.w	ip, r4, #20
 80115e6:	46ae      	mov	lr, r5
 80115e8:	f04f 0a00 	mov.w	sl, #0
 80115ec:	f8bc b000 	ldrh.w	fp, [ip]
 80115f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80115f4:	fb09 220b 	mla	r2, r9, fp, r2
 80115f8:	4452      	add	r2, sl
 80115fa:	b289      	uxth	r1, r1
 80115fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011600:	f84e 1b04 	str.w	r1, [lr], #4
 8011604:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011608:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801160c:	f8be 1000 	ldrh.w	r1, [lr]
 8011610:	fb09 110a 	mla	r1, r9, sl, r1
 8011614:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011618:	4567      	cmp	r7, ip
 801161a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801161e:	d8e5      	bhi.n	80115ec <__multiply+0x10c>
 8011620:	9a01      	ldr	r2, [sp, #4]
 8011622:	50a9      	str	r1, [r5, r2]
 8011624:	3504      	adds	r5, #4
 8011626:	e799      	b.n	801155c <__multiply+0x7c>
 8011628:	3e01      	subs	r6, #1
 801162a:	e79b      	b.n	8011564 <__multiply+0x84>
 801162c:	08013b09 	.word	0x08013b09
 8011630:	08013b91 	.word	0x08013b91

08011634 <__pow5mult>:
 8011634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011638:	4615      	mov	r5, r2
 801163a:	f012 0203 	ands.w	r2, r2, #3
 801163e:	4606      	mov	r6, r0
 8011640:	460f      	mov	r7, r1
 8011642:	d007      	beq.n	8011654 <__pow5mult+0x20>
 8011644:	4c25      	ldr	r4, [pc, #148]	; (80116dc <__pow5mult+0xa8>)
 8011646:	3a01      	subs	r2, #1
 8011648:	2300      	movs	r3, #0
 801164a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801164e:	f7ff fe53 	bl	80112f8 <__multadd>
 8011652:	4607      	mov	r7, r0
 8011654:	10ad      	asrs	r5, r5, #2
 8011656:	d03d      	beq.n	80116d4 <__pow5mult+0xa0>
 8011658:	69f4      	ldr	r4, [r6, #28]
 801165a:	b97c      	cbnz	r4, 801167c <__pow5mult+0x48>
 801165c:	2010      	movs	r0, #16
 801165e:	f7fe f857 	bl	800f710 <malloc>
 8011662:	4602      	mov	r2, r0
 8011664:	61f0      	str	r0, [r6, #28]
 8011666:	b928      	cbnz	r0, 8011674 <__pow5mult+0x40>
 8011668:	4b1d      	ldr	r3, [pc, #116]	; (80116e0 <__pow5mult+0xac>)
 801166a:	481e      	ldr	r0, [pc, #120]	; (80116e4 <__pow5mult+0xb0>)
 801166c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011670:	f001 fba4 	bl	8012dbc <__assert_func>
 8011674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011678:	6004      	str	r4, [r0, #0]
 801167a:	60c4      	str	r4, [r0, #12]
 801167c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011684:	b94c      	cbnz	r4, 801169a <__pow5mult+0x66>
 8011686:	f240 2171 	movw	r1, #625	; 0x271
 801168a:	4630      	mov	r0, r6
 801168c:	f7ff ff12 	bl	80114b4 <__i2b>
 8011690:	2300      	movs	r3, #0
 8011692:	f8c8 0008 	str.w	r0, [r8, #8]
 8011696:	4604      	mov	r4, r0
 8011698:	6003      	str	r3, [r0, #0]
 801169a:	f04f 0900 	mov.w	r9, #0
 801169e:	07eb      	lsls	r3, r5, #31
 80116a0:	d50a      	bpl.n	80116b8 <__pow5mult+0x84>
 80116a2:	4639      	mov	r1, r7
 80116a4:	4622      	mov	r2, r4
 80116a6:	4630      	mov	r0, r6
 80116a8:	f7ff ff1a 	bl	80114e0 <__multiply>
 80116ac:	4639      	mov	r1, r7
 80116ae:	4680      	mov	r8, r0
 80116b0:	4630      	mov	r0, r6
 80116b2:	f7ff fdff 	bl	80112b4 <_Bfree>
 80116b6:	4647      	mov	r7, r8
 80116b8:	106d      	asrs	r5, r5, #1
 80116ba:	d00b      	beq.n	80116d4 <__pow5mult+0xa0>
 80116bc:	6820      	ldr	r0, [r4, #0]
 80116be:	b938      	cbnz	r0, 80116d0 <__pow5mult+0x9c>
 80116c0:	4622      	mov	r2, r4
 80116c2:	4621      	mov	r1, r4
 80116c4:	4630      	mov	r0, r6
 80116c6:	f7ff ff0b 	bl	80114e0 <__multiply>
 80116ca:	6020      	str	r0, [r4, #0]
 80116cc:	f8c0 9000 	str.w	r9, [r0]
 80116d0:	4604      	mov	r4, r0
 80116d2:	e7e4      	b.n	801169e <__pow5mult+0x6a>
 80116d4:	4638      	mov	r0, r7
 80116d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116da:	bf00      	nop
 80116dc:	08013ce0 	.word	0x08013ce0
 80116e0:	08013b7a 	.word	0x08013b7a
 80116e4:	08013b91 	.word	0x08013b91

080116e8 <__lshift>:
 80116e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116ec:	460c      	mov	r4, r1
 80116ee:	6849      	ldr	r1, [r1, #4]
 80116f0:	6923      	ldr	r3, [r4, #16]
 80116f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80116f6:	68a3      	ldr	r3, [r4, #8]
 80116f8:	4607      	mov	r7, r0
 80116fa:	4691      	mov	r9, r2
 80116fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011700:	f108 0601 	add.w	r6, r8, #1
 8011704:	42b3      	cmp	r3, r6
 8011706:	db0b      	blt.n	8011720 <__lshift+0x38>
 8011708:	4638      	mov	r0, r7
 801170a:	f7ff fd93 	bl	8011234 <_Balloc>
 801170e:	4605      	mov	r5, r0
 8011710:	b948      	cbnz	r0, 8011726 <__lshift+0x3e>
 8011712:	4602      	mov	r2, r0
 8011714:	4b28      	ldr	r3, [pc, #160]	; (80117b8 <__lshift+0xd0>)
 8011716:	4829      	ldr	r0, [pc, #164]	; (80117bc <__lshift+0xd4>)
 8011718:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801171c:	f001 fb4e 	bl	8012dbc <__assert_func>
 8011720:	3101      	adds	r1, #1
 8011722:	005b      	lsls	r3, r3, #1
 8011724:	e7ee      	b.n	8011704 <__lshift+0x1c>
 8011726:	2300      	movs	r3, #0
 8011728:	f100 0114 	add.w	r1, r0, #20
 801172c:	f100 0210 	add.w	r2, r0, #16
 8011730:	4618      	mov	r0, r3
 8011732:	4553      	cmp	r3, sl
 8011734:	db33      	blt.n	801179e <__lshift+0xb6>
 8011736:	6920      	ldr	r0, [r4, #16]
 8011738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801173c:	f104 0314 	add.w	r3, r4, #20
 8011740:	f019 091f 	ands.w	r9, r9, #31
 8011744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011748:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801174c:	d02b      	beq.n	80117a6 <__lshift+0xbe>
 801174e:	f1c9 0e20 	rsb	lr, r9, #32
 8011752:	468a      	mov	sl, r1
 8011754:	2200      	movs	r2, #0
 8011756:	6818      	ldr	r0, [r3, #0]
 8011758:	fa00 f009 	lsl.w	r0, r0, r9
 801175c:	4310      	orrs	r0, r2
 801175e:	f84a 0b04 	str.w	r0, [sl], #4
 8011762:	f853 2b04 	ldr.w	r2, [r3], #4
 8011766:	459c      	cmp	ip, r3
 8011768:	fa22 f20e 	lsr.w	r2, r2, lr
 801176c:	d8f3      	bhi.n	8011756 <__lshift+0x6e>
 801176e:	ebac 0304 	sub.w	r3, ip, r4
 8011772:	3b15      	subs	r3, #21
 8011774:	f023 0303 	bic.w	r3, r3, #3
 8011778:	3304      	adds	r3, #4
 801177a:	f104 0015 	add.w	r0, r4, #21
 801177e:	4584      	cmp	ip, r0
 8011780:	bf38      	it	cc
 8011782:	2304      	movcc	r3, #4
 8011784:	50ca      	str	r2, [r1, r3]
 8011786:	b10a      	cbz	r2, 801178c <__lshift+0xa4>
 8011788:	f108 0602 	add.w	r6, r8, #2
 801178c:	3e01      	subs	r6, #1
 801178e:	4638      	mov	r0, r7
 8011790:	612e      	str	r6, [r5, #16]
 8011792:	4621      	mov	r1, r4
 8011794:	f7ff fd8e 	bl	80112b4 <_Bfree>
 8011798:	4628      	mov	r0, r5
 801179a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801179e:	f842 0f04 	str.w	r0, [r2, #4]!
 80117a2:	3301      	adds	r3, #1
 80117a4:	e7c5      	b.n	8011732 <__lshift+0x4a>
 80117a6:	3904      	subs	r1, #4
 80117a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80117ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80117b0:	459c      	cmp	ip, r3
 80117b2:	d8f9      	bhi.n	80117a8 <__lshift+0xc0>
 80117b4:	e7ea      	b.n	801178c <__lshift+0xa4>
 80117b6:	bf00      	nop
 80117b8:	08013b09 	.word	0x08013b09
 80117bc:	08013b91 	.word	0x08013b91

080117c0 <__mcmp>:
 80117c0:	b530      	push	{r4, r5, lr}
 80117c2:	6902      	ldr	r2, [r0, #16]
 80117c4:	690c      	ldr	r4, [r1, #16]
 80117c6:	1b12      	subs	r2, r2, r4
 80117c8:	d10e      	bne.n	80117e8 <__mcmp+0x28>
 80117ca:	f100 0314 	add.w	r3, r0, #20
 80117ce:	3114      	adds	r1, #20
 80117d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80117d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80117d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80117dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80117e0:	42a5      	cmp	r5, r4
 80117e2:	d003      	beq.n	80117ec <__mcmp+0x2c>
 80117e4:	d305      	bcc.n	80117f2 <__mcmp+0x32>
 80117e6:	2201      	movs	r2, #1
 80117e8:	4610      	mov	r0, r2
 80117ea:	bd30      	pop	{r4, r5, pc}
 80117ec:	4283      	cmp	r3, r0
 80117ee:	d3f3      	bcc.n	80117d8 <__mcmp+0x18>
 80117f0:	e7fa      	b.n	80117e8 <__mcmp+0x28>
 80117f2:	f04f 32ff 	mov.w	r2, #4294967295
 80117f6:	e7f7      	b.n	80117e8 <__mcmp+0x28>

080117f8 <__mdiff>:
 80117f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117fc:	460c      	mov	r4, r1
 80117fe:	4606      	mov	r6, r0
 8011800:	4611      	mov	r1, r2
 8011802:	4620      	mov	r0, r4
 8011804:	4690      	mov	r8, r2
 8011806:	f7ff ffdb 	bl	80117c0 <__mcmp>
 801180a:	1e05      	subs	r5, r0, #0
 801180c:	d110      	bne.n	8011830 <__mdiff+0x38>
 801180e:	4629      	mov	r1, r5
 8011810:	4630      	mov	r0, r6
 8011812:	f7ff fd0f 	bl	8011234 <_Balloc>
 8011816:	b930      	cbnz	r0, 8011826 <__mdiff+0x2e>
 8011818:	4b3a      	ldr	r3, [pc, #232]	; (8011904 <__mdiff+0x10c>)
 801181a:	4602      	mov	r2, r0
 801181c:	f240 2137 	movw	r1, #567	; 0x237
 8011820:	4839      	ldr	r0, [pc, #228]	; (8011908 <__mdiff+0x110>)
 8011822:	f001 facb 	bl	8012dbc <__assert_func>
 8011826:	2301      	movs	r3, #1
 8011828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801182c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011830:	bfa4      	itt	ge
 8011832:	4643      	movge	r3, r8
 8011834:	46a0      	movge	r8, r4
 8011836:	4630      	mov	r0, r6
 8011838:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801183c:	bfa6      	itte	ge
 801183e:	461c      	movge	r4, r3
 8011840:	2500      	movge	r5, #0
 8011842:	2501      	movlt	r5, #1
 8011844:	f7ff fcf6 	bl	8011234 <_Balloc>
 8011848:	b920      	cbnz	r0, 8011854 <__mdiff+0x5c>
 801184a:	4b2e      	ldr	r3, [pc, #184]	; (8011904 <__mdiff+0x10c>)
 801184c:	4602      	mov	r2, r0
 801184e:	f240 2145 	movw	r1, #581	; 0x245
 8011852:	e7e5      	b.n	8011820 <__mdiff+0x28>
 8011854:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011858:	6926      	ldr	r6, [r4, #16]
 801185a:	60c5      	str	r5, [r0, #12]
 801185c:	f104 0914 	add.w	r9, r4, #20
 8011860:	f108 0514 	add.w	r5, r8, #20
 8011864:	f100 0e14 	add.w	lr, r0, #20
 8011868:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801186c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011870:	f108 0210 	add.w	r2, r8, #16
 8011874:	46f2      	mov	sl, lr
 8011876:	2100      	movs	r1, #0
 8011878:	f859 3b04 	ldr.w	r3, [r9], #4
 801187c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011880:	fa11 f88b 	uxtah	r8, r1, fp
 8011884:	b299      	uxth	r1, r3
 8011886:	0c1b      	lsrs	r3, r3, #16
 8011888:	eba8 0801 	sub.w	r8, r8, r1
 801188c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011890:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011894:	fa1f f888 	uxth.w	r8, r8
 8011898:	1419      	asrs	r1, r3, #16
 801189a:	454e      	cmp	r6, r9
 801189c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80118a0:	f84a 3b04 	str.w	r3, [sl], #4
 80118a4:	d8e8      	bhi.n	8011878 <__mdiff+0x80>
 80118a6:	1b33      	subs	r3, r6, r4
 80118a8:	3b15      	subs	r3, #21
 80118aa:	f023 0303 	bic.w	r3, r3, #3
 80118ae:	3304      	adds	r3, #4
 80118b0:	3415      	adds	r4, #21
 80118b2:	42a6      	cmp	r6, r4
 80118b4:	bf38      	it	cc
 80118b6:	2304      	movcc	r3, #4
 80118b8:	441d      	add	r5, r3
 80118ba:	4473      	add	r3, lr
 80118bc:	469e      	mov	lr, r3
 80118be:	462e      	mov	r6, r5
 80118c0:	4566      	cmp	r6, ip
 80118c2:	d30e      	bcc.n	80118e2 <__mdiff+0xea>
 80118c4:	f10c 0203 	add.w	r2, ip, #3
 80118c8:	1b52      	subs	r2, r2, r5
 80118ca:	f022 0203 	bic.w	r2, r2, #3
 80118ce:	3d03      	subs	r5, #3
 80118d0:	45ac      	cmp	ip, r5
 80118d2:	bf38      	it	cc
 80118d4:	2200      	movcc	r2, #0
 80118d6:	4413      	add	r3, r2
 80118d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80118dc:	b17a      	cbz	r2, 80118fe <__mdiff+0x106>
 80118de:	6107      	str	r7, [r0, #16]
 80118e0:	e7a4      	b.n	801182c <__mdiff+0x34>
 80118e2:	f856 8b04 	ldr.w	r8, [r6], #4
 80118e6:	fa11 f288 	uxtah	r2, r1, r8
 80118ea:	1414      	asrs	r4, r2, #16
 80118ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80118f0:	b292      	uxth	r2, r2
 80118f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80118f6:	f84e 2b04 	str.w	r2, [lr], #4
 80118fa:	1421      	asrs	r1, r4, #16
 80118fc:	e7e0      	b.n	80118c0 <__mdiff+0xc8>
 80118fe:	3f01      	subs	r7, #1
 8011900:	e7ea      	b.n	80118d8 <__mdiff+0xe0>
 8011902:	bf00      	nop
 8011904:	08013b09 	.word	0x08013b09
 8011908:	08013b91 	.word	0x08013b91

0801190c <__ulp>:
 801190c:	b082      	sub	sp, #8
 801190e:	ed8d 0b00 	vstr	d0, [sp]
 8011912:	9a01      	ldr	r2, [sp, #4]
 8011914:	4b0f      	ldr	r3, [pc, #60]	; (8011954 <__ulp+0x48>)
 8011916:	4013      	ands	r3, r2
 8011918:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801191c:	2b00      	cmp	r3, #0
 801191e:	dc08      	bgt.n	8011932 <__ulp+0x26>
 8011920:	425b      	negs	r3, r3
 8011922:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011926:	ea4f 5223 	mov.w	r2, r3, asr #20
 801192a:	da04      	bge.n	8011936 <__ulp+0x2a>
 801192c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011930:	4113      	asrs	r3, r2
 8011932:	2200      	movs	r2, #0
 8011934:	e008      	b.n	8011948 <__ulp+0x3c>
 8011936:	f1a2 0314 	sub.w	r3, r2, #20
 801193a:	2b1e      	cmp	r3, #30
 801193c:	bfda      	itte	le
 801193e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011942:	40da      	lsrle	r2, r3
 8011944:	2201      	movgt	r2, #1
 8011946:	2300      	movs	r3, #0
 8011948:	4619      	mov	r1, r3
 801194a:	4610      	mov	r0, r2
 801194c:	ec41 0b10 	vmov	d0, r0, r1
 8011950:	b002      	add	sp, #8
 8011952:	4770      	bx	lr
 8011954:	7ff00000 	.word	0x7ff00000

08011958 <__b2d>:
 8011958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801195c:	6906      	ldr	r6, [r0, #16]
 801195e:	f100 0814 	add.w	r8, r0, #20
 8011962:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011966:	1f37      	subs	r7, r6, #4
 8011968:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801196c:	4610      	mov	r0, r2
 801196e:	f7ff fd53 	bl	8011418 <__hi0bits>
 8011972:	f1c0 0320 	rsb	r3, r0, #32
 8011976:	280a      	cmp	r0, #10
 8011978:	600b      	str	r3, [r1, #0]
 801197a:	491b      	ldr	r1, [pc, #108]	; (80119e8 <__b2d+0x90>)
 801197c:	dc15      	bgt.n	80119aa <__b2d+0x52>
 801197e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011982:	fa22 f30c 	lsr.w	r3, r2, ip
 8011986:	45b8      	cmp	r8, r7
 8011988:	ea43 0501 	orr.w	r5, r3, r1
 801198c:	bf34      	ite	cc
 801198e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011992:	2300      	movcs	r3, #0
 8011994:	3015      	adds	r0, #21
 8011996:	fa02 f000 	lsl.w	r0, r2, r0
 801199a:	fa23 f30c 	lsr.w	r3, r3, ip
 801199e:	4303      	orrs	r3, r0
 80119a0:	461c      	mov	r4, r3
 80119a2:	ec45 4b10 	vmov	d0, r4, r5
 80119a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119aa:	45b8      	cmp	r8, r7
 80119ac:	bf3a      	itte	cc
 80119ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80119b2:	f1a6 0708 	subcc.w	r7, r6, #8
 80119b6:	2300      	movcs	r3, #0
 80119b8:	380b      	subs	r0, #11
 80119ba:	d012      	beq.n	80119e2 <__b2d+0x8a>
 80119bc:	f1c0 0120 	rsb	r1, r0, #32
 80119c0:	fa23 f401 	lsr.w	r4, r3, r1
 80119c4:	4082      	lsls	r2, r0
 80119c6:	4322      	orrs	r2, r4
 80119c8:	4547      	cmp	r7, r8
 80119ca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80119ce:	bf8c      	ite	hi
 80119d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80119d4:	2200      	movls	r2, #0
 80119d6:	4083      	lsls	r3, r0
 80119d8:	40ca      	lsrs	r2, r1
 80119da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80119de:	4313      	orrs	r3, r2
 80119e0:	e7de      	b.n	80119a0 <__b2d+0x48>
 80119e2:	ea42 0501 	orr.w	r5, r2, r1
 80119e6:	e7db      	b.n	80119a0 <__b2d+0x48>
 80119e8:	3ff00000 	.word	0x3ff00000

080119ec <__d2b>:
 80119ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80119f0:	460f      	mov	r7, r1
 80119f2:	2101      	movs	r1, #1
 80119f4:	ec59 8b10 	vmov	r8, r9, d0
 80119f8:	4616      	mov	r6, r2
 80119fa:	f7ff fc1b 	bl	8011234 <_Balloc>
 80119fe:	4604      	mov	r4, r0
 8011a00:	b930      	cbnz	r0, 8011a10 <__d2b+0x24>
 8011a02:	4602      	mov	r2, r0
 8011a04:	4b24      	ldr	r3, [pc, #144]	; (8011a98 <__d2b+0xac>)
 8011a06:	4825      	ldr	r0, [pc, #148]	; (8011a9c <__d2b+0xb0>)
 8011a08:	f240 310f 	movw	r1, #783	; 0x30f
 8011a0c:	f001 f9d6 	bl	8012dbc <__assert_func>
 8011a10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011a14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a18:	bb2d      	cbnz	r5, 8011a66 <__d2b+0x7a>
 8011a1a:	9301      	str	r3, [sp, #4]
 8011a1c:	f1b8 0300 	subs.w	r3, r8, #0
 8011a20:	d026      	beq.n	8011a70 <__d2b+0x84>
 8011a22:	4668      	mov	r0, sp
 8011a24:	9300      	str	r3, [sp, #0]
 8011a26:	f7ff fd17 	bl	8011458 <__lo0bits>
 8011a2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011a2e:	b1e8      	cbz	r0, 8011a6c <__d2b+0x80>
 8011a30:	f1c0 0320 	rsb	r3, r0, #32
 8011a34:	fa02 f303 	lsl.w	r3, r2, r3
 8011a38:	430b      	orrs	r3, r1
 8011a3a:	40c2      	lsrs	r2, r0
 8011a3c:	6163      	str	r3, [r4, #20]
 8011a3e:	9201      	str	r2, [sp, #4]
 8011a40:	9b01      	ldr	r3, [sp, #4]
 8011a42:	61a3      	str	r3, [r4, #24]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	bf14      	ite	ne
 8011a48:	2202      	movne	r2, #2
 8011a4a:	2201      	moveq	r2, #1
 8011a4c:	6122      	str	r2, [r4, #16]
 8011a4e:	b1bd      	cbz	r5, 8011a80 <__d2b+0x94>
 8011a50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011a54:	4405      	add	r5, r0
 8011a56:	603d      	str	r5, [r7, #0]
 8011a58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011a5c:	6030      	str	r0, [r6, #0]
 8011a5e:	4620      	mov	r0, r4
 8011a60:	b003      	add	sp, #12
 8011a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a6a:	e7d6      	b.n	8011a1a <__d2b+0x2e>
 8011a6c:	6161      	str	r1, [r4, #20]
 8011a6e:	e7e7      	b.n	8011a40 <__d2b+0x54>
 8011a70:	a801      	add	r0, sp, #4
 8011a72:	f7ff fcf1 	bl	8011458 <__lo0bits>
 8011a76:	9b01      	ldr	r3, [sp, #4]
 8011a78:	6163      	str	r3, [r4, #20]
 8011a7a:	3020      	adds	r0, #32
 8011a7c:	2201      	movs	r2, #1
 8011a7e:	e7e5      	b.n	8011a4c <__d2b+0x60>
 8011a80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011a88:	6038      	str	r0, [r7, #0]
 8011a8a:	6918      	ldr	r0, [r3, #16]
 8011a8c:	f7ff fcc4 	bl	8011418 <__hi0bits>
 8011a90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a94:	e7e2      	b.n	8011a5c <__d2b+0x70>
 8011a96:	bf00      	nop
 8011a98:	08013b09 	.word	0x08013b09
 8011a9c:	08013b91 	.word	0x08013b91

08011aa0 <__ratio>:
 8011aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa4:	4688      	mov	r8, r1
 8011aa6:	4669      	mov	r1, sp
 8011aa8:	4681      	mov	r9, r0
 8011aaa:	f7ff ff55 	bl	8011958 <__b2d>
 8011aae:	a901      	add	r1, sp, #4
 8011ab0:	4640      	mov	r0, r8
 8011ab2:	ec55 4b10 	vmov	r4, r5, d0
 8011ab6:	f7ff ff4f 	bl	8011958 <__b2d>
 8011aba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011abe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011ac2:	eba3 0c02 	sub.w	ip, r3, r2
 8011ac6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011aca:	1a9b      	subs	r3, r3, r2
 8011acc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011ad0:	ec51 0b10 	vmov	r0, r1, d0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	bfd6      	itet	le
 8011ad8:	460a      	movle	r2, r1
 8011ada:	462a      	movgt	r2, r5
 8011adc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011ae0:	468b      	mov	fp, r1
 8011ae2:	462f      	mov	r7, r5
 8011ae4:	bfd4      	ite	le
 8011ae6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011aea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011aee:	4620      	mov	r0, r4
 8011af0:	ee10 2a10 	vmov	r2, s0
 8011af4:	465b      	mov	r3, fp
 8011af6:	4639      	mov	r1, r7
 8011af8:	f7ee feb8 	bl	800086c <__aeabi_ddiv>
 8011afc:	ec41 0b10 	vmov	d0, r0, r1
 8011b00:	b003      	add	sp, #12
 8011b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b06 <__copybits>:
 8011b06:	3901      	subs	r1, #1
 8011b08:	b570      	push	{r4, r5, r6, lr}
 8011b0a:	1149      	asrs	r1, r1, #5
 8011b0c:	6914      	ldr	r4, [r2, #16]
 8011b0e:	3101      	adds	r1, #1
 8011b10:	f102 0314 	add.w	r3, r2, #20
 8011b14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011b1c:	1f05      	subs	r5, r0, #4
 8011b1e:	42a3      	cmp	r3, r4
 8011b20:	d30c      	bcc.n	8011b3c <__copybits+0x36>
 8011b22:	1aa3      	subs	r3, r4, r2
 8011b24:	3b11      	subs	r3, #17
 8011b26:	f023 0303 	bic.w	r3, r3, #3
 8011b2a:	3211      	adds	r2, #17
 8011b2c:	42a2      	cmp	r2, r4
 8011b2e:	bf88      	it	hi
 8011b30:	2300      	movhi	r3, #0
 8011b32:	4418      	add	r0, r3
 8011b34:	2300      	movs	r3, #0
 8011b36:	4288      	cmp	r0, r1
 8011b38:	d305      	bcc.n	8011b46 <__copybits+0x40>
 8011b3a:	bd70      	pop	{r4, r5, r6, pc}
 8011b3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011b40:	f845 6f04 	str.w	r6, [r5, #4]!
 8011b44:	e7eb      	b.n	8011b1e <__copybits+0x18>
 8011b46:	f840 3b04 	str.w	r3, [r0], #4
 8011b4a:	e7f4      	b.n	8011b36 <__copybits+0x30>

08011b4c <__any_on>:
 8011b4c:	f100 0214 	add.w	r2, r0, #20
 8011b50:	6900      	ldr	r0, [r0, #16]
 8011b52:	114b      	asrs	r3, r1, #5
 8011b54:	4298      	cmp	r0, r3
 8011b56:	b510      	push	{r4, lr}
 8011b58:	db11      	blt.n	8011b7e <__any_on+0x32>
 8011b5a:	dd0a      	ble.n	8011b72 <__any_on+0x26>
 8011b5c:	f011 011f 	ands.w	r1, r1, #31
 8011b60:	d007      	beq.n	8011b72 <__any_on+0x26>
 8011b62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011b66:	fa24 f001 	lsr.w	r0, r4, r1
 8011b6a:	fa00 f101 	lsl.w	r1, r0, r1
 8011b6e:	428c      	cmp	r4, r1
 8011b70:	d10b      	bne.n	8011b8a <__any_on+0x3e>
 8011b72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b76:	4293      	cmp	r3, r2
 8011b78:	d803      	bhi.n	8011b82 <__any_on+0x36>
 8011b7a:	2000      	movs	r0, #0
 8011b7c:	bd10      	pop	{r4, pc}
 8011b7e:	4603      	mov	r3, r0
 8011b80:	e7f7      	b.n	8011b72 <__any_on+0x26>
 8011b82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b86:	2900      	cmp	r1, #0
 8011b88:	d0f5      	beq.n	8011b76 <__any_on+0x2a>
 8011b8a:	2001      	movs	r0, #1
 8011b8c:	e7f6      	b.n	8011b7c <__any_on+0x30>

08011b8e <_malloc_usable_size_r>:
 8011b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b92:	1f18      	subs	r0, r3, #4
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	bfbc      	itt	lt
 8011b98:	580b      	ldrlt	r3, [r1, r0]
 8011b9a:	18c0      	addlt	r0, r0, r3
 8011b9c:	4770      	bx	lr

08011b9e <__ascii_wctomb>:
 8011b9e:	b149      	cbz	r1, 8011bb4 <__ascii_wctomb+0x16>
 8011ba0:	2aff      	cmp	r2, #255	; 0xff
 8011ba2:	bf85      	ittet	hi
 8011ba4:	238a      	movhi	r3, #138	; 0x8a
 8011ba6:	6003      	strhi	r3, [r0, #0]
 8011ba8:	700a      	strbls	r2, [r1, #0]
 8011baa:	f04f 30ff 	movhi.w	r0, #4294967295
 8011bae:	bf98      	it	ls
 8011bb0:	2001      	movls	r0, #1
 8011bb2:	4770      	bx	lr
 8011bb4:	4608      	mov	r0, r1
 8011bb6:	4770      	bx	lr

08011bb8 <__ssputs_r>:
 8011bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bbc:	688e      	ldr	r6, [r1, #8]
 8011bbe:	461f      	mov	r7, r3
 8011bc0:	42be      	cmp	r6, r7
 8011bc2:	680b      	ldr	r3, [r1, #0]
 8011bc4:	4682      	mov	sl, r0
 8011bc6:	460c      	mov	r4, r1
 8011bc8:	4690      	mov	r8, r2
 8011bca:	d82c      	bhi.n	8011c26 <__ssputs_r+0x6e>
 8011bcc:	898a      	ldrh	r2, [r1, #12]
 8011bce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011bd2:	d026      	beq.n	8011c22 <__ssputs_r+0x6a>
 8011bd4:	6965      	ldr	r5, [r4, #20]
 8011bd6:	6909      	ldr	r1, [r1, #16]
 8011bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011bdc:	eba3 0901 	sub.w	r9, r3, r1
 8011be0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011be4:	1c7b      	adds	r3, r7, #1
 8011be6:	444b      	add	r3, r9
 8011be8:	106d      	asrs	r5, r5, #1
 8011bea:	429d      	cmp	r5, r3
 8011bec:	bf38      	it	cc
 8011bee:	461d      	movcc	r5, r3
 8011bf0:	0553      	lsls	r3, r2, #21
 8011bf2:	d527      	bpl.n	8011c44 <__ssputs_r+0x8c>
 8011bf4:	4629      	mov	r1, r5
 8011bf6:	f7fd fdbb 	bl	800f770 <_malloc_r>
 8011bfa:	4606      	mov	r6, r0
 8011bfc:	b360      	cbz	r0, 8011c58 <__ssputs_r+0xa0>
 8011bfe:	6921      	ldr	r1, [r4, #16]
 8011c00:	464a      	mov	r2, r9
 8011c02:	f7fe ff48 	bl	8010a96 <memcpy>
 8011c06:	89a3      	ldrh	r3, [r4, #12]
 8011c08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c10:	81a3      	strh	r3, [r4, #12]
 8011c12:	6126      	str	r6, [r4, #16]
 8011c14:	6165      	str	r5, [r4, #20]
 8011c16:	444e      	add	r6, r9
 8011c18:	eba5 0509 	sub.w	r5, r5, r9
 8011c1c:	6026      	str	r6, [r4, #0]
 8011c1e:	60a5      	str	r5, [r4, #8]
 8011c20:	463e      	mov	r6, r7
 8011c22:	42be      	cmp	r6, r7
 8011c24:	d900      	bls.n	8011c28 <__ssputs_r+0x70>
 8011c26:	463e      	mov	r6, r7
 8011c28:	6820      	ldr	r0, [r4, #0]
 8011c2a:	4632      	mov	r2, r6
 8011c2c:	4641      	mov	r1, r8
 8011c2e:	f7fe fe19 	bl	8010864 <memmove>
 8011c32:	68a3      	ldr	r3, [r4, #8]
 8011c34:	1b9b      	subs	r3, r3, r6
 8011c36:	60a3      	str	r3, [r4, #8]
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	4433      	add	r3, r6
 8011c3c:	6023      	str	r3, [r4, #0]
 8011c3e:	2000      	movs	r0, #0
 8011c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c44:	462a      	mov	r2, r5
 8011c46:	f7fd fe27 	bl	800f898 <_realloc_r>
 8011c4a:	4606      	mov	r6, r0
 8011c4c:	2800      	cmp	r0, #0
 8011c4e:	d1e0      	bne.n	8011c12 <__ssputs_r+0x5a>
 8011c50:	6921      	ldr	r1, [r4, #16]
 8011c52:	4650      	mov	r0, sl
 8011c54:	f7fe ff38 	bl	8010ac8 <_free_r>
 8011c58:	230c      	movs	r3, #12
 8011c5a:	f8ca 3000 	str.w	r3, [sl]
 8011c5e:	89a3      	ldrh	r3, [r4, #12]
 8011c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c64:	81a3      	strh	r3, [r4, #12]
 8011c66:	f04f 30ff 	mov.w	r0, #4294967295
 8011c6a:	e7e9      	b.n	8011c40 <__ssputs_r+0x88>

08011c6c <_svfiprintf_r>:
 8011c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c70:	4698      	mov	r8, r3
 8011c72:	898b      	ldrh	r3, [r1, #12]
 8011c74:	061b      	lsls	r3, r3, #24
 8011c76:	b09d      	sub	sp, #116	; 0x74
 8011c78:	4607      	mov	r7, r0
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	4614      	mov	r4, r2
 8011c7e:	d50e      	bpl.n	8011c9e <_svfiprintf_r+0x32>
 8011c80:	690b      	ldr	r3, [r1, #16]
 8011c82:	b963      	cbnz	r3, 8011c9e <_svfiprintf_r+0x32>
 8011c84:	2140      	movs	r1, #64	; 0x40
 8011c86:	f7fd fd73 	bl	800f770 <_malloc_r>
 8011c8a:	6028      	str	r0, [r5, #0]
 8011c8c:	6128      	str	r0, [r5, #16]
 8011c8e:	b920      	cbnz	r0, 8011c9a <_svfiprintf_r+0x2e>
 8011c90:	230c      	movs	r3, #12
 8011c92:	603b      	str	r3, [r7, #0]
 8011c94:	f04f 30ff 	mov.w	r0, #4294967295
 8011c98:	e0d0      	b.n	8011e3c <_svfiprintf_r+0x1d0>
 8011c9a:	2340      	movs	r3, #64	; 0x40
 8011c9c:	616b      	str	r3, [r5, #20]
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ca2:	2320      	movs	r3, #32
 8011ca4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011cac:	2330      	movs	r3, #48	; 0x30
 8011cae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011e54 <_svfiprintf_r+0x1e8>
 8011cb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011cb6:	f04f 0901 	mov.w	r9, #1
 8011cba:	4623      	mov	r3, r4
 8011cbc:	469a      	mov	sl, r3
 8011cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cc2:	b10a      	cbz	r2, 8011cc8 <_svfiprintf_r+0x5c>
 8011cc4:	2a25      	cmp	r2, #37	; 0x25
 8011cc6:	d1f9      	bne.n	8011cbc <_svfiprintf_r+0x50>
 8011cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8011ccc:	d00b      	beq.n	8011ce6 <_svfiprintf_r+0x7a>
 8011cce:	465b      	mov	r3, fp
 8011cd0:	4622      	mov	r2, r4
 8011cd2:	4629      	mov	r1, r5
 8011cd4:	4638      	mov	r0, r7
 8011cd6:	f7ff ff6f 	bl	8011bb8 <__ssputs_r>
 8011cda:	3001      	adds	r0, #1
 8011cdc:	f000 80a9 	beq.w	8011e32 <_svfiprintf_r+0x1c6>
 8011ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ce2:	445a      	add	r2, fp
 8011ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8011ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	f000 80a1 	beq.w	8011e32 <_svfiprintf_r+0x1c6>
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8011cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cfa:	f10a 0a01 	add.w	sl, sl, #1
 8011cfe:	9304      	str	r3, [sp, #16]
 8011d00:	9307      	str	r3, [sp, #28]
 8011d02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d06:	931a      	str	r3, [sp, #104]	; 0x68
 8011d08:	4654      	mov	r4, sl
 8011d0a:	2205      	movs	r2, #5
 8011d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d10:	4850      	ldr	r0, [pc, #320]	; (8011e54 <_svfiprintf_r+0x1e8>)
 8011d12:	f7ee fa6d 	bl	80001f0 <memchr>
 8011d16:	9a04      	ldr	r2, [sp, #16]
 8011d18:	b9d8      	cbnz	r0, 8011d52 <_svfiprintf_r+0xe6>
 8011d1a:	06d0      	lsls	r0, r2, #27
 8011d1c:	bf44      	itt	mi
 8011d1e:	2320      	movmi	r3, #32
 8011d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d24:	0711      	lsls	r1, r2, #28
 8011d26:	bf44      	itt	mi
 8011d28:	232b      	movmi	r3, #43	; 0x2b
 8011d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8011d32:	2b2a      	cmp	r3, #42	; 0x2a
 8011d34:	d015      	beq.n	8011d62 <_svfiprintf_r+0xf6>
 8011d36:	9a07      	ldr	r2, [sp, #28]
 8011d38:	4654      	mov	r4, sl
 8011d3a:	2000      	movs	r0, #0
 8011d3c:	f04f 0c0a 	mov.w	ip, #10
 8011d40:	4621      	mov	r1, r4
 8011d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d46:	3b30      	subs	r3, #48	; 0x30
 8011d48:	2b09      	cmp	r3, #9
 8011d4a:	d94d      	bls.n	8011de8 <_svfiprintf_r+0x17c>
 8011d4c:	b1b0      	cbz	r0, 8011d7c <_svfiprintf_r+0x110>
 8011d4e:	9207      	str	r2, [sp, #28]
 8011d50:	e014      	b.n	8011d7c <_svfiprintf_r+0x110>
 8011d52:	eba0 0308 	sub.w	r3, r0, r8
 8011d56:	fa09 f303 	lsl.w	r3, r9, r3
 8011d5a:	4313      	orrs	r3, r2
 8011d5c:	9304      	str	r3, [sp, #16]
 8011d5e:	46a2      	mov	sl, r4
 8011d60:	e7d2      	b.n	8011d08 <_svfiprintf_r+0x9c>
 8011d62:	9b03      	ldr	r3, [sp, #12]
 8011d64:	1d19      	adds	r1, r3, #4
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	9103      	str	r1, [sp, #12]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	bfbb      	ittet	lt
 8011d6e:	425b      	neglt	r3, r3
 8011d70:	f042 0202 	orrlt.w	r2, r2, #2
 8011d74:	9307      	strge	r3, [sp, #28]
 8011d76:	9307      	strlt	r3, [sp, #28]
 8011d78:	bfb8      	it	lt
 8011d7a:	9204      	strlt	r2, [sp, #16]
 8011d7c:	7823      	ldrb	r3, [r4, #0]
 8011d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8011d80:	d10c      	bne.n	8011d9c <_svfiprintf_r+0x130>
 8011d82:	7863      	ldrb	r3, [r4, #1]
 8011d84:	2b2a      	cmp	r3, #42	; 0x2a
 8011d86:	d134      	bne.n	8011df2 <_svfiprintf_r+0x186>
 8011d88:	9b03      	ldr	r3, [sp, #12]
 8011d8a:	1d1a      	adds	r2, r3, #4
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	9203      	str	r2, [sp, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	bfb8      	it	lt
 8011d94:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d98:	3402      	adds	r4, #2
 8011d9a:	9305      	str	r3, [sp, #20]
 8011d9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011e64 <_svfiprintf_r+0x1f8>
 8011da0:	7821      	ldrb	r1, [r4, #0]
 8011da2:	2203      	movs	r2, #3
 8011da4:	4650      	mov	r0, sl
 8011da6:	f7ee fa23 	bl	80001f0 <memchr>
 8011daa:	b138      	cbz	r0, 8011dbc <_svfiprintf_r+0x150>
 8011dac:	9b04      	ldr	r3, [sp, #16]
 8011dae:	eba0 000a 	sub.w	r0, r0, sl
 8011db2:	2240      	movs	r2, #64	; 0x40
 8011db4:	4082      	lsls	r2, r0
 8011db6:	4313      	orrs	r3, r2
 8011db8:	3401      	adds	r4, #1
 8011dba:	9304      	str	r3, [sp, #16]
 8011dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dc0:	4825      	ldr	r0, [pc, #148]	; (8011e58 <_svfiprintf_r+0x1ec>)
 8011dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011dc6:	2206      	movs	r2, #6
 8011dc8:	f7ee fa12 	bl	80001f0 <memchr>
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	d038      	beq.n	8011e42 <_svfiprintf_r+0x1d6>
 8011dd0:	4b22      	ldr	r3, [pc, #136]	; (8011e5c <_svfiprintf_r+0x1f0>)
 8011dd2:	bb1b      	cbnz	r3, 8011e1c <_svfiprintf_r+0x1b0>
 8011dd4:	9b03      	ldr	r3, [sp, #12]
 8011dd6:	3307      	adds	r3, #7
 8011dd8:	f023 0307 	bic.w	r3, r3, #7
 8011ddc:	3308      	adds	r3, #8
 8011dde:	9303      	str	r3, [sp, #12]
 8011de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011de2:	4433      	add	r3, r6
 8011de4:	9309      	str	r3, [sp, #36]	; 0x24
 8011de6:	e768      	b.n	8011cba <_svfiprintf_r+0x4e>
 8011de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dec:	460c      	mov	r4, r1
 8011dee:	2001      	movs	r0, #1
 8011df0:	e7a6      	b.n	8011d40 <_svfiprintf_r+0xd4>
 8011df2:	2300      	movs	r3, #0
 8011df4:	3401      	adds	r4, #1
 8011df6:	9305      	str	r3, [sp, #20]
 8011df8:	4619      	mov	r1, r3
 8011dfa:	f04f 0c0a 	mov.w	ip, #10
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e04:	3a30      	subs	r2, #48	; 0x30
 8011e06:	2a09      	cmp	r2, #9
 8011e08:	d903      	bls.n	8011e12 <_svfiprintf_r+0x1a6>
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d0c6      	beq.n	8011d9c <_svfiprintf_r+0x130>
 8011e0e:	9105      	str	r1, [sp, #20]
 8011e10:	e7c4      	b.n	8011d9c <_svfiprintf_r+0x130>
 8011e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e16:	4604      	mov	r4, r0
 8011e18:	2301      	movs	r3, #1
 8011e1a:	e7f0      	b.n	8011dfe <_svfiprintf_r+0x192>
 8011e1c:	ab03      	add	r3, sp, #12
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	462a      	mov	r2, r5
 8011e22:	4b0f      	ldr	r3, [pc, #60]	; (8011e60 <_svfiprintf_r+0x1f4>)
 8011e24:	a904      	add	r1, sp, #16
 8011e26:	4638      	mov	r0, r7
 8011e28:	f3af 8000 	nop.w
 8011e2c:	1c42      	adds	r2, r0, #1
 8011e2e:	4606      	mov	r6, r0
 8011e30:	d1d6      	bne.n	8011de0 <_svfiprintf_r+0x174>
 8011e32:	89ab      	ldrh	r3, [r5, #12]
 8011e34:	065b      	lsls	r3, r3, #25
 8011e36:	f53f af2d 	bmi.w	8011c94 <_svfiprintf_r+0x28>
 8011e3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e3c:	b01d      	add	sp, #116	; 0x74
 8011e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e42:	ab03      	add	r3, sp, #12
 8011e44:	9300      	str	r3, [sp, #0]
 8011e46:	462a      	mov	r2, r5
 8011e48:	4b05      	ldr	r3, [pc, #20]	; (8011e60 <_svfiprintf_r+0x1f4>)
 8011e4a:	a904      	add	r1, sp, #16
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	f000 fb8f 	bl	8012570 <_printf_i>
 8011e52:	e7eb      	b.n	8011e2c <_svfiprintf_r+0x1c0>
 8011e54:	08013cec 	.word	0x08013cec
 8011e58:	08013cf6 	.word	0x08013cf6
 8011e5c:	00000000 	.word	0x00000000
 8011e60:	08011bb9 	.word	0x08011bb9
 8011e64:	08013cf2 	.word	0x08013cf2

08011e68 <_sungetc_r>:
 8011e68:	b538      	push	{r3, r4, r5, lr}
 8011e6a:	1c4b      	adds	r3, r1, #1
 8011e6c:	4614      	mov	r4, r2
 8011e6e:	d103      	bne.n	8011e78 <_sungetc_r+0x10>
 8011e70:	f04f 35ff 	mov.w	r5, #4294967295
 8011e74:	4628      	mov	r0, r5
 8011e76:	bd38      	pop	{r3, r4, r5, pc}
 8011e78:	8993      	ldrh	r3, [r2, #12]
 8011e7a:	f023 0320 	bic.w	r3, r3, #32
 8011e7e:	8193      	strh	r3, [r2, #12]
 8011e80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e82:	6852      	ldr	r2, [r2, #4]
 8011e84:	b2cd      	uxtb	r5, r1
 8011e86:	b18b      	cbz	r3, 8011eac <_sungetc_r+0x44>
 8011e88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	dd08      	ble.n	8011ea0 <_sungetc_r+0x38>
 8011e8e:	6823      	ldr	r3, [r4, #0]
 8011e90:	1e5a      	subs	r2, r3, #1
 8011e92:	6022      	str	r2, [r4, #0]
 8011e94:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011e98:	6863      	ldr	r3, [r4, #4]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	6063      	str	r3, [r4, #4]
 8011e9e:	e7e9      	b.n	8011e74 <_sungetc_r+0xc>
 8011ea0:	4621      	mov	r1, r4
 8011ea2:	f000 febc 	bl	8012c1e <__submore>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d0f1      	beq.n	8011e8e <_sungetc_r+0x26>
 8011eaa:	e7e1      	b.n	8011e70 <_sungetc_r+0x8>
 8011eac:	6921      	ldr	r1, [r4, #16]
 8011eae:	6823      	ldr	r3, [r4, #0]
 8011eb0:	b151      	cbz	r1, 8011ec8 <_sungetc_r+0x60>
 8011eb2:	4299      	cmp	r1, r3
 8011eb4:	d208      	bcs.n	8011ec8 <_sungetc_r+0x60>
 8011eb6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011eba:	42a9      	cmp	r1, r5
 8011ebc:	d104      	bne.n	8011ec8 <_sungetc_r+0x60>
 8011ebe:	3b01      	subs	r3, #1
 8011ec0:	3201      	adds	r2, #1
 8011ec2:	6023      	str	r3, [r4, #0]
 8011ec4:	6062      	str	r2, [r4, #4]
 8011ec6:	e7d5      	b.n	8011e74 <_sungetc_r+0xc>
 8011ec8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ed0:	6363      	str	r3, [r4, #52]	; 0x34
 8011ed2:	2303      	movs	r3, #3
 8011ed4:	63a3      	str	r3, [r4, #56]	; 0x38
 8011ed6:	4623      	mov	r3, r4
 8011ed8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011edc:	6023      	str	r3, [r4, #0]
 8011ede:	2301      	movs	r3, #1
 8011ee0:	e7dc      	b.n	8011e9c <_sungetc_r+0x34>

08011ee2 <__ssrefill_r>:
 8011ee2:	b510      	push	{r4, lr}
 8011ee4:	460c      	mov	r4, r1
 8011ee6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011ee8:	b169      	cbz	r1, 8011f06 <__ssrefill_r+0x24>
 8011eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011eee:	4299      	cmp	r1, r3
 8011ef0:	d001      	beq.n	8011ef6 <__ssrefill_r+0x14>
 8011ef2:	f7fe fde9 	bl	8010ac8 <_free_r>
 8011ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ef8:	6063      	str	r3, [r4, #4]
 8011efa:	2000      	movs	r0, #0
 8011efc:	6360      	str	r0, [r4, #52]	; 0x34
 8011efe:	b113      	cbz	r3, 8011f06 <__ssrefill_r+0x24>
 8011f00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011f02:	6023      	str	r3, [r4, #0]
 8011f04:	bd10      	pop	{r4, pc}
 8011f06:	6923      	ldr	r3, [r4, #16]
 8011f08:	6023      	str	r3, [r4, #0]
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	6063      	str	r3, [r4, #4]
 8011f0e:	89a3      	ldrh	r3, [r4, #12]
 8011f10:	f043 0320 	orr.w	r3, r3, #32
 8011f14:	81a3      	strh	r3, [r4, #12]
 8011f16:	f04f 30ff 	mov.w	r0, #4294967295
 8011f1a:	e7f3      	b.n	8011f04 <__ssrefill_r+0x22>

08011f1c <__ssvfiscanf_r>:
 8011f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f20:	460c      	mov	r4, r1
 8011f22:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011f26:	2100      	movs	r1, #0
 8011f28:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011f2c:	49a6      	ldr	r1, [pc, #664]	; (80121c8 <__ssvfiscanf_r+0x2ac>)
 8011f2e:	91a0      	str	r1, [sp, #640]	; 0x280
 8011f30:	f10d 0804 	add.w	r8, sp, #4
 8011f34:	49a5      	ldr	r1, [pc, #660]	; (80121cc <__ssvfiscanf_r+0x2b0>)
 8011f36:	4fa6      	ldr	r7, [pc, #664]	; (80121d0 <__ssvfiscanf_r+0x2b4>)
 8011f38:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80121d4 <__ssvfiscanf_r+0x2b8>
 8011f3c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011f40:	4606      	mov	r6, r0
 8011f42:	91a1      	str	r1, [sp, #644]	; 0x284
 8011f44:	9300      	str	r3, [sp, #0]
 8011f46:	7813      	ldrb	r3, [r2, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f000 815a 	beq.w	8012202 <__ssvfiscanf_r+0x2e6>
 8011f4e:	5cf9      	ldrb	r1, [r7, r3]
 8011f50:	f011 0108 	ands.w	r1, r1, #8
 8011f54:	f102 0501 	add.w	r5, r2, #1
 8011f58:	d019      	beq.n	8011f8e <__ssvfiscanf_r+0x72>
 8011f5a:	6863      	ldr	r3, [r4, #4]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	dd0f      	ble.n	8011f80 <__ssvfiscanf_r+0x64>
 8011f60:	6823      	ldr	r3, [r4, #0]
 8011f62:	781a      	ldrb	r2, [r3, #0]
 8011f64:	5cba      	ldrb	r2, [r7, r2]
 8011f66:	0712      	lsls	r2, r2, #28
 8011f68:	d401      	bmi.n	8011f6e <__ssvfiscanf_r+0x52>
 8011f6a:	462a      	mov	r2, r5
 8011f6c:	e7eb      	b.n	8011f46 <__ssvfiscanf_r+0x2a>
 8011f6e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011f70:	3201      	adds	r2, #1
 8011f72:	9245      	str	r2, [sp, #276]	; 0x114
 8011f74:	6862      	ldr	r2, [r4, #4]
 8011f76:	3301      	adds	r3, #1
 8011f78:	3a01      	subs	r2, #1
 8011f7a:	6062      	str	r2, [r4, #4]
 8011f7c:	6023      	str	r3, [r4, #0]
 8011f7e:	e7ec      	b.n	8011f5a <__ssvfiscanf_r+0x3e>
 8011f80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011f82:	4621      	mov	r1, r4
 8011f84:	4630      	mov	r0, r6
 8011f86:	4798      	blx	r3
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	d0e9      	beq.n	8011f60 <__ssvfiscanf_r+0x44>
 8011f8c:	e7ed      	b.n	8011f6a <__ssvfiscanf_r+0x4e>
 8011f8e:	2b25      	cmp	r3, #37	; 0x25
 8011f90:	d012      	beq.n	8011fb8 <__ssvfiscanf_r+0x9c>
 8011f92:	469a      	mov	sl, r3
 8011f94:	6863      	ldr	r3, [r4, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f340 8091 	ble.w	80120be <__ssvfiscanf_r+0x1a2>
 8011f9c:	6822      	ldr	r2, [r4, #0]
 8011f9e:	7813      	ldrb	r3, [r2, #0]
 8011fa0:	4553      	cmp	r3, sl
 8011fa2:	f040 812e 	bne.w	8012202 <__ssvfiscanf_r+0x2e6>
 8011fa6:	6863      	ldr	r3, [r4, #4]
 8011fa8:	3b01      	subs	r3, #1
 8011faa:	6063      	str	r3, [r4, #4]
 8011fac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011fae:	3201      	adds	r2, #1
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	6022      	str	r2, [r4, #0]
 8011fb4:	9345      	str	r3, [sp, #276]	; 0x114
 8011fb6:	e7d8      	b.n	8011f6a <__ssvfiscanf_r+0x4e>
 8011fb8:	9141      	str	r1, [sp, #260]	; 0x104
 8011fba:	9143      	str	r1, [sp, #268]	; 0x10c
 8011fbc:	7853      	ldrb	r3, [r2, #1]
 8011fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8011fc0:	bf02      	ittt	eq
 8011fc2:	2310      	moveq	r3, #16
 8011fc4:	1c95      	addeq	r5, r2, #2
 8011fc6:	9341      	streq	r3, [sp, #260]	; 0x104
 8011fc8:	220a      	movs	r2, #10
 8011fca:	46aa      	mov	sl, r5
 8011fcc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011fd0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011fd4:	2b09      	cmp	r3, #9
 8011fd6:	d91c      	bls.n	8012012 <__ssvfiscanf_r+0xf6>
 8011fd8:	487e      	ldr	r0, [pc, #504]	; (80121d4 <__ssvfiscanf_r+0x2b8>)
 8011fda:	2203      	movs	r2, #3
 8011fdc:	f7ee f908 	bl	80001f0 <memchr>
 8011fe0:	b138      	cbz	r0, 8011ff2 <__ssvfiscanf_r+0xd6>
 8011fe2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011fe4:	eba0 0009 	sub.w	r0, r0, r9
 8011fe8:	2301      	movs	r3, #1
 8011fea:	4083      	lsls	r3, r0
 8011fec:	4313      	orrs	r3, r2
 8011fee:	9341      	str	r3, [sp, #260]	; 0x104
 8011ff0:	4655      	mov	r5, sl
 8011ff2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011ff6:	2b78      	cmp	r3, #120	; 0x78
 8011ff8:	d806      	bhi.n	8012008 <__ssvfiscanf_r+0xec>
 8011ffa:	2b57      	cmp	r3, #87	; 0x57
 8011ffc:	d810      	bhi.n	8012020 <__ssvfiscanf_r+0x104>
 8011ffe:	2b25      	cmp	r3, #37	; 0x25
 8012000:	d0c7      	beq.n	8011f92 <__ssvfiscanf_r+0x76>
 8012002:	d857      	bhi.n	80120b4 <__ssvfiscanf_r+0x198>
 8012004:	2b00      	cmp	r3, #0
 8012006:	d065      	beq.n	80120d4 <__ssvfiscanf_r+0x1b8>
 8012008:	2303      	movs	r3, #3
 801200a:	9347      	str	r3, [sp, #284]	; 0x11c
 801200c:	230a      	movs	r3, #10
 801200e:	9342      	str	r3, [sp, #264]	; 0x108
 8012010:	e076      	b.n	8012100 <__ssvfiscanf_r+0x1e4>
 8012012:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012014:	fb02 1103 	mla	r1, r2, r3, r1
 8012018:	3930      	subs	r1, #48	; 0x30
 801201a:	9143      	str	r1, [sp, #268]	; 0x10c
 801201c:	4655      	mov	r5, sl
 801201e:	e7d4      	b.n	8011fca <__ssvfiscanf_r+0xae>
 8012020:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012024:	2a20      	cmp	r2, #32
 8012026:	d8ef      	bhi.n	8012008 <__ssvfiscanf_r+0xec>
 8012028:	a101      	add	r1, pc, #4	; (adr r1, 8012030 <__ssvfiscanf_r+0x114>)
 801202a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801202e:	bf00      	nop
 8012030:	080120e3 	.word	0x080120e3
 8012034:	08012009 	.word	0x08012009
 8012038:	08012009 	.word	0x08012009
 801203c:	08012141 	.word	0x08012141
 8012040:	08012009 	.word	0x08012009
 8012044:	08012009 	.word	0x08012009
 8012048:	08012009 	.word	0x08012009
 801204c:	08012009 	.word	0x08012009
 8012050:	08012009 	.word	0x08012009
 8012054:	08012009 	.word	0x08012009
 8012058:	08012009 	.word	0x08012009
 801205c:	08012157 	.word	0x08012157
 8012060:	0801213d 	.word	0x0801213d
 8012064:	080120bb 	.word	0x080120bb
 8012068:	080120bb 	.word	0x080120bb
 801206c:	080120bb 	.word	0x080120bb
 8012070:	08012009 	.word	0x08012009
 8012074:	080120f9 	.word	0x080120f9
 8012078:	08012009 	.word	0x08012009
 801207c:	08012009 	.word	0x08012009
 8012080:	08012009 	.word	0x08012009
 8012084:	08012009 	.word	0x08012009
 8012088:	08012167 	.word	0x08012167
 801208c:	08012135 	.word	0x08012135
 8012090:	080120db 	.word	0x080120db
 8012094:	08012009 	.word	0x08012009
 8012098:	08012009 	.word	0x08012009
 801209c:	08012163 	.word	0x08012163
 80120a0:	08012009 	.word	0x08012009
 80120a4:	0801213d 	.word	0x0801213d
 80120a8:	08012009 	.word	0x08012009
 80120ac:	08012009 	.word	0x08012009
 80120b0:	080120e3 	.word	0x080120e3
 80120b4:	3b45      	subs	r3, #69	; 0x45
 80120b6:	2b02      	cmp	r3, #2
 80120b8:	d8a6      	bhi.n	8012008 <__ssvfiscanf_r+0xec>
 80120ba:	2305      	movs	r3, #5
 80120bc:	e01f      	b.n	80120fe <__ssvfiscanf_r+0x1e2>
 80120be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80120c0:	4621      	mov	r1, r4
 80120c2:	4630      	mov	r0, r6
 80120c4:	4798      	blx	r3
 80120c6:	2800      	cmp	r0, #0
 80120c8:	f43f af68 	beq.w	8011f9c <__ssvfiscanf_r+0x80>
 80120cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80120ce:	2800      	cmp	r0, #0
 80120d0:	f040 808d 	bne.w	80121ee <__ssvfiscanf_r+0x2d2>
 80120d4:	f04f 30ff 	mov.w	r0, #4294967295
 80120d8:	e08f      	b.n	80121fa <__ssvfiscanf_r+0x2de>
 80120da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80120dc:	f042 0220 	orr.w	r2, r2, #32
 80120e0:	9241      	str	r2, [sp, #260]	; 0x104
 80120e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80120e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80120e8:	9241      	str	r2, [sp, #260]	; 0x104
 80120ea:	2210      	movs	r2, #16
 80120ec:	2b6f      	cmp	r3, #111	; 0x6f
 80120ee:	9242      	str	r2, [sp, #264]	; 0x108
 80120f0:	bf34      	ite	cc
 80120f2:	2303      	movcc	r3, #3
 80120f4:	2304      	movcs	r3, #4
 80120f6:	e002      	b.n	80120fe <__ssvfiscanf_r+0x1e2>
 80120f8:	2300      	movs	r3, #0
 80120fa:	9342      	str	r3, [sp, #264]	; 0x108
 80120fc:	2303      	movs	r3, #3
 80120fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8012100:	6863      	ldr	r3, [r4, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	dd3d      	ble.n	8012182 <__ssvfiscanf_r+0x266>
 8012106:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012108:	0659      	lsls	r1, r3, #25
 801210a:	d404      	bmi.n	8012116 <__ssvfiscanf_r+0x1fa>
 801210c:	6823      	ldr	r3, [r4, #0]
 801210e:	781a      	ldrb	r2, [r3, #0]
 8012110:	5cba      	ldrb	r2, [r7, r2]
 8012112:	0712      	lsls	r2, r2, #28
 8012114:	d43c      	bmi.n	8012190 <__ssvfiscanf_r+0x274>
 8012116:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012118:	2b02      	cmp	r3, #2
 801211a:	dc4b      	bgt.n	80121b4 <__ssvfiscanf_r+0x298>
 801211c:	466b      	mov	r3, sp
 801211e:	4622      	mov	r2, r4
 8012120:	a941      	add	r1, sp, #260	; 0x104
 8012122:	4630      	mov	r0, r6
 8012124:	f000 fb46 	bl	80127b4 <_scanf_chars>
 8012128:	2801      	cmp	r0, #1
 801212a:	d06a      	beq.n	8012202 <__ssvfiscanf_r+0x2e6>
 801212c:	2802      	cmp	r0, #2
 801212e:	f47f af1c 	bne.w	8011f6a <__ssvfiscanf_r+0x4e>
 8012132:	e7cb      	b.n	80120cc <__ssvfiscanf_r+0x1b0>
 8012134:	2308      	movs	r3, #8
 8012136:	9342      	str	r3, [sp, #264]	; 0x108
 8012138:	2304      	movs	r3, #4
 801213a:	e7e0      	b.n	80120fe <__ssvfiscanf_r+0x1e2>
 801213c:	220a      	movs	r2, #10
 801213e:	e7d5      	b.n	80120ec <__ssvfiscanf_r+0x1d0>
 8012140:	4629      	mov	r1, r5
 8012142:	4640      	mov	r0, r8
 8012144:	f000 fd32 	bl	8012bac <__sccl>
 8012148:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801214a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801214e:	9341      	str	r3, [sp, #260]	; 0x104
 8012150:	4605      	mov	r5, r0
 8012152:	2301      	movs	r3, #1
 8012154:	e7d3      	b.n	80120fe <__ssvfiscanf_r+0x1e2>
 8012156:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801215c:	9341      	str	r3, [sp, #260]	; 0x104
 801215e:	2300      	movs	r3, #0
 8012160:	e7cd      	b.n	80120fe <__ssvfiscanf_r+0x1e2>
 8012162:	2302      	movs	r3, #2
 8012164:	e7cb      	b.n	80120fe <__ssvfiscanf_r+0x1e2>
 8012166:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012168:	06c3      	lsls	r3, r0, #27
 801216a:	f53f aefe 	bmi.w	8011f6a <__ssvfiscanf_r+0x4e>
 801216e:	9b00      	ldr	r3, [sp, #0]
 8012170:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012172:	1d19      	adds	r1, r3, #4
 8012174:	9100      	str	r1, [sp, #0]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	07c0      	lsls	r0, r0, #31
 801217a:	bf4c      	ite	mi
 801217c:	801a      	strhmi	r2, [r3, #0]
 801217e:	601a      	strpl	r2, [r3, #0]
 8012180:	e6f3      	b.n	8011f6a <__ssvfiscanf_r+0x4e>
 8012182:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012184:	4621      	mov	r1, r4
 8012186:	4630      	mov	r0, r6
 8012188:	4798      	blx	r3
 801218a:	2800      	cmp	r0, #0
 801218c:	d0bb      	beq.n	8012106 <__ssvfiscanf_r+0x1ea>
 801218e:	e79d      	b.n	80120cc <__ssvfiscanf_r+0x1b0>
 8012190:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012192:	3201      	adds	r2, #1
 8012194:	9245      	str	r2, [sp, #276]	; 0x114
 8012196:	6862      	ldr	r2, [r4, #4]
 8012198:	3a01      	subs	r2, #1
 801219a:	2a00      	cmp	r2, #0
 801219c:	6062      	str	r2, [r4, #4]
 801219e:	dd02      	ble.n	80121a6 <__ssvfiscanf_r+0x28a>
 80121a0:	3301      	adds	r3, #1
 80121a2:	6023      	str	r3, [r4, #0]
 80121a4:	e7b2      	b.n	801210c <__ssvfiscanf_r+0x1f0>
 80121a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80121a8:	4621      	mov	r1, r4
 80121aa:	4630      	mov	r0, r6
 80121ac:	4798      	blx	r3
 80121ae:	2800      	cmp	r0, #0
 80121b0:	d0ac      	beq.n	801210c <__ssvfiscanf_r+0x1f0>
 80121b2:	e78b      	b.n	80120cc <__ssvfiscanf_r+0x1b0>
 80121b4:	2b04      	cmp	r3, #4
 80121b6:	dc0f      	bgt.n	80121d8 <__ssvfiscanf_r+0x2bc>
 80121b8:	466b      	mov	r3, sp
 80121ba:	4622      	mov	r2, r4
 80121bc:	a941      	add	r1, sp, #260	; 0x104
 80121be:	4630      	mov	r0, r6
 80121c0:	f000 fb52 	bl	8012868 <_scanf_i>
 80121c4:	e7b0      	b.n	8012128 <__ssvfiscanf_r+0x20c>
 80121c6:	bf00      	nop
 80121c8:	08011e69 	.word	0x08011e69
 80121cc:	08011ee3 	.word	0x08011ee3
 80121d0:	08013a01 	.word	0x08013a01
 80121d4:	08013cf2 	.word	0x08013cf2
 80121d8:	4b0b      	ldr	r3, [pc, #44]	; (8012208 <__ssvfiscanf_r+0x2ec>)
 80121da:	2b00      	cmp	r3, #0
 80121dc:	f43f aec5 	beq.w	8011f6a <__ssvfiscanf_r+0x4e>
 80121e0:	466b      	mov	r3, sp
 80121e2:	4622      	mov	r2, r4
 80121e4:	a941      	add	r1, sp, #260	; 0x104
 80121e6:	4630      	mov	r0, r6
 80121e8:	f3af 8000 	nop.w
 80121ec:	e79c      	b.n	8012128 <__ssvfiscanf_r+0x20c>
 80121ee:	89a3      	ldrh	r3, [r4, #12]
 80121f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80121f4:	bf18      	it	ne
 80121f6:	f04f 30ff 	movne.w	r0, #4294967295
 80121fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80121fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012202:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012204:	e7f9      	b.n	80121fa <__ssvfiscanf_r+0x2de>
 8012206:	bf00      	nop
 8012208:	00000000 	.word	0x00000000

0801220c <__sfputc_r>:
 801220c:	6893      	ldr	r3, [r2, #8]
 801220e:	3b01      	subs	r3, #1
 8012210:	2b00      	cmp	r3, #0
 8012212:	b410      	push	{r4}
 8012214:	6093      	str	r3, [r2, #8]
 8012216:	da08      	bge.n	801222a <__sfputc_r+0x1e>
 8012218:	6994      	ldr	r4, [r2, #24]
 801221a:	42a3      	cmp	r3, r4
 801221c:	db01      	blt.n	8012222 <__sfputc_r+0x16>
 801221e:	290a      	cmp	r1, #10
 8012220:	d103      	bne.n	801222a <__sfputc_r+0x1e>
 8012222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012226:	f000 bd34 	b.w	8012c92 <__swbuf_r>
 801222a:	6813      	ldr	r3, [r2, #0]
 801222c:	1c58      	adds	r0, r3, #1
 801222e:	6010      	str	r0, [r2, #0]
 8012230:	7019      	strb	r1, [r3, #0]
 8012232:	4608      	mov	r0, r1
 8012234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012238:	4770      	bx	lr

0801223a <__sfputs_r>:
 801223a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801223c:	4606      	mov	r6, r0
 801223e:	460f      	mov	r7, r1
 8012240:	4614      	mov	r4, r2
 8012242:	18d5      	adds	r5, r2, r3
 8012244:	42ac      	cmp	r4, r5
 8012246:	d101      	bne.n	801224c <__sfputs_r+0x12>
 8012248:	2000      	movs	r0, #0
 801224a:	e007      	b.n	801225c <__sfputs_r+0x22>
 801224c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012250:	463a      	mov	r2, r7
 8012252:	4630      	mov	r0, r6
 8012254:	f7ff ffda 	bl	801220c <__sfputc_r>
 8012258:	1c43      	adds	r3, r0, #1
 801225a:	d1f3      	bne.n	8012244 <__sfputs_r+0xa>
 801225c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012260 <_vfiprintf_r>:
 8012260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012264:	460d      	mov	r5, r1
 8012266:	b09d      	sub	sp, #116	; 0x74
 8012268:	4614      	mov	r4, r2
 801226a:	4698      	mov	r8, r3
 801226c:	4606      	mov	r6, r0
 801226e:	b118      	cbz	r0, 8012278 <_vfiprintf_r+0x18>
 8012270:	6a03      	ldr	r3, [r0, #32]
 8012272:	b90b      	cbnz	r3, 8012278 <_vfiprintf_r+0x18>
 8012274:	f7fe f9e4 	bl	8010640 <__sinit>
 8012278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801227a:	07d9      	lsls	r1, r3, #31
 801227c:	d405      	bmi.n	801228a <_vfiprintf_r+0x2a>
 801227e:	89ab      	ldrh	r3, [r5, #12]
 8012280:	059a      	lsls	r2, r3, #22
 8012282:	d402      	bmi.n	801228a <_vfiprintf_r+0x2a>
 8012284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012286:	f7fe fc04 	bl	8010a92 <__retarget_lock_acquire_recursive>
 801228a:	89ab      	ldrh	r3, [r5, #12]
 801228c:	071b      	lsls	r3, r3, #28
 801228e:	d501      	bpl.n	8012294 <_vfiprintf_r+0x34>
 8012290:	692b      	ldr	r3, [r5, #16]
 8012292:	b99b      	cbnz	r3, 80122bc <_vfiprintf_r+0x5c>
 8012294:	4629      	mov	r1, r5
 8012296:	4630      	mov	r0, r6
 8012298:	f000 fd38 	bl	8012d0c <__swsetup_r>
 801229c:	b170      	cbz	r0, 80122bc <_vfiprintf_r+0x5c>
 801229e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122a0:	07dc      	lsls	r4, r3, #31
 80122a2:	d504      	bpl.n	80122ae <_vfiprintf_r+0x4e>
 80122a4:	f04f 30ff 	mov.w	r0, #4294967295
 80122a8:	b01d      	add	sp, #116	; 0x74
 80122aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ae:	89ab      	ldrh	r3, [r5, #12]
 80122b0:	0598      	lsls	r0, r3, #22
 80122b2:	d4f7      	bmi.n	80122a4 <_vfiprintf_r+0x44>
 80122b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122b6:	f7fe fbed 	bl	8010a94 <__retarget_lock_release_recursive>
 80122ba:	e7f3      	b.n	80122a4 <_vfiprintf_r+0x44>
 80122bc:	2300      	movs	r3, #0
 80122be:	9309      	str	r3, [sp, #36]	; 0x24
 80122c0:	2320      	movs	r3, #32
 80122c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80122ca:	2330      	movs	r3, #48	; 0x30
 80122cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012480 <_vfiprintf_r+0x220>
 80122d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122d4:	f04f 0901 	mov.w	r9, #1
 80122d8:	4623      	mov	r3, r4
 80122da:	469a      	mov	sl, r3
 80122dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122e0:	b10a      	cbz	r2, 80122e6 <_vfiprintf_r+0x86>
 80122e2:	2a25      	cmp	r2, #37	; 0x25
 80122e4:	d1f9      	bne.n	80122da <_vfiprintf_r+0x7a>
 80122e6:	ebba 0b04 	subs.w	fp, sl, r4
 80122ea:	d00b      	beq.n	8012304 <_vfiprintf_r+0xa4>
 80122ec:	465b      	mov	r3, fp
 80122ee:	4622      	mov	r2, r4
 80122f0:	4629      	mov	r1, r5
 80122f2:	4630      	mov	r0, r6
 80122f4:	f7ff ffa1 	bl	801223a <__sfputs_r>
 80122f8:	3001      	adds	r0, #1
 80122fa:	f000 80a9 	beq.w	8012450 <_vfiprintf_r+0x1f0>
 80122fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012300:	445a      	add	r2, fp
 8012302:	9209      	str	r2, [sp, #36]	; 0x24
 8012304:	f89a 3000 	ldrb.w	r3, [sl]
 8012308:	2b00      	cmp	r3, #0
 801230a:	f000 80a1 	beq.w	8012450 <_vfiprintf_r+0x1f0>
 801230e:	2300      	movs	r3, #0
 8012310:	f04f 32ff 	mov.w	r2, #4294967295
 8012314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012318:	f10a 0a01 	add.w	sl, sl, #1
 801231c:	9304      	str	r3, [sp, #16]
 801231e:	9307      	str	r3, [sp, #28]
 8012320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012324:	931a      	str	r3, [sp, #104]	; 0x68
 8012326:	4654      	mov	r4, sl
 8012328:	2205      	movs	r2, #5
 801232a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801232e:	4854      	ldr	r0, [pc, #336]	; (8012480 <_vfiprintf_r+0x220>)
 8012330:	f7ed ff5e 	bl	80001f0 <memchr>
 8012334:	9a04      	ldr	r2, [sp, #16]
 8012336:	b9d8      	cbnz	r0, 8012370 <_vfiprintf_r+0x110>
 8012338:	06d1      	lsls	r1, r2, #27
 801233a:	bf44      	itt	mi
 801233c:	2320      	movmi	r3, #32
 801233e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012342:	0713      	lsls	r3, r2, #28
 8012344:	bf44      	itt	mi
 8012346:	232b      	movmi	r3, #43	; 0x2b
 8012348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801234c:	f89a 3000 	ldrb.w	r3, [sl]
 8012350:	2b2a      	cmp	r3, #42	; 0x2a
 8012352:	d015      	beq.n	8012380 <_vfiprintf_r+0x120>
 8012354:	9a07      	ldr	r2, [sp, #28]
 8012356:	4654      	mov	r4, sl
 8012358:	2000      	movs	r0, #0
 801235a:	f04f 0c0a 	mov.w	ip, #10
 801235e:	4621      	mov	r1, r4
 8012360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012364:	3b30      	subs	r3, #48	; 0x30
 8012366:	2b09      	cmp	r3, #9
 8012368:	d94d      	bls.n	8012406 <_vfiprintf_r+0x1a6>
 801236a:	b1b0      	cbz	r0, 801239a <_vfiprintf_r+0x13a>
 801236c:	9207      	str	r2, [sp, #28]
 801236e:	e014      	b.n	801239a <_vfiprintf_r+0x13a>
 8012370:	eba0 0308 	sub.w	r3, r0, r8
 8012374:	fa09 f303 	lsl.w	r3, r9, r3
 8012378:	4313      	orrs	r3, r2
 801237a:	9304      	str	r3, [sp, #16]
 801237c:	46a2      	mov	sl, r4
 801237e:	e7d2      	b.n	8012326 <_vfiprintf_r+0xc6>
 8012380:	9b03      	ldr	r3, [sp, #12]
 8012382:	1d19      	adds	r1, r3, #4
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	9103      	str	r1, [sp, #12]
 8012388:	2b00      	cmp	r3, #0
 801238a:	bfbb      	ittet	lt
 801238c:	425b      	neglt	r3, r3
 801238e:	f042 0202 	orrlt.w	r2, r2, #2
 8012392:	9307      	strge	r3, [sp, #28]
 8012394:	9307      	strlt	r3, [sp, #28]
 8012396:	bfb8      	it	lt
 8012398:	9204      	strlt	r2, [sp, #16]
 801239a:	7823      	ldrb	r3, [r4, #0]
 801239c:	2b2e      	cmp	r3, #46	; 0x2e
 801239e:	d10c      	bne.n	80123ba <_vfiprintf_r+0x15a>
 80123a0:	7863      	ldrb	r3, [r4, #1]
 80123a2:	2b2a      	cmp	r3, #42	; 0x2a
 80123a4:	d134      	bne.n	8012410 <_vfiprintf_r+0x1b0>
 80123a6:	9b03      	ldr	r3, [sp, #12]
 80123a8:	1d1a      	adds	r2, r3, #4
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	9203      	str	r2, [sp, #12]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	bfb8      	it	lt
 80123b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80123b6:	3402      	adds	r4, #2
 80123b8:	9305      	str	r3, [sp, #20]
 80123ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012490 <_vfiprintf_r+0x230>
 80123be:	7821      	ldrb	r1, [r4, #0]
 80123c0:	2203      	movs	r2, #3
 80123c2:	4650      	mov	r0, sl
 80123c4:	f7ed ff14 	bl	80001f0 <memchr>
 80123c8:	b138      	cbz	r0, 80123da <_vfiprintf_r+0x17a>
 80123ca:	9b04      	ldr	r3, [sp, #16]
 80123cc:	eba0 000a 	sub.w	r0, r0, sl
 80123d0:	2240      	movs	r2, #64	; 0x40
 80123d2:	4082      	lsls	r2, r0
 80123d4:	4313      	orrs	r3, r2
 80123d6:	3401      	adds	r4, #1
 80123d8:	9304      	str	r3, [sp, #16]
 80123da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123de:	4829      	ldr	r0, [pc, #164]	; (8012484 <_vfiprintf_r+0x224>)
 80123e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123e4:	2206      	movs	r2, #6
 80123e6:	f7ed ff03 	bl	80001f0 <memchr>
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d03f      	beq.n	801246e <_vfiprintf_r+0x20e>
 80123ee:	4b26      	ldr	r3, [pc, #152]	; (8012488 <_vfiprintf_r+0x228>)
 80123f0:	bb1b      	cbnz	r3, 801243a <_vfiprintf_r+0x1da>
 80123f2:	9b03      	ldr	r3, [sp, #12]
 80123f4:	3307      	adds	r3, #7
 80123f6:	f023 0307 	bic.w	r3, r3, #7
 80123fa:	3308      	adds	r3, #8
 80123fc:	9303      	str	r3, [sp, #12]
 80123fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012400:	443b      	add	r3, r7
 8012402:	9309      	str	r3, [sp, #36]	; 0x24
 8012404:	e768      	b.n	80122d8 <_vfiprintf_r+0x78>
 8012406:	fb0c 3202 	mla	r2, ip, r2, r3
 801240a:	460c      	mov	r4, r1
 801240c:	2001      	movs	r0, #1
 801240e:	e7a6      	b.n	801235e <_vfiprintf_r+0xfe>
 8012410:	2300      	movs	r3, #0
 8012412:	3401      	adds	r4, #1
 8012414:	9305      	str	r3, [sp, #20]
 8012416:	4619      	mov	r1, r3
 8012418:	f04f 0c0a 	mov.w	ip, #10
 801241c:	4620      	mov	r0, r4
 801241e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012422:	3a30      	subs	r2, #48	; 0x30
 8012424:	2a09      	cmp	r2, #9
 8012426:	d903      	bls.n	8012430 <_vfiprintf_r+0x1d0>
 8012428:	2b00      	cmp	r3, #0
 801242a:	d0c6      	beq.n	80123ba <_vfiprintf_r+0x15a>
 801242c:	9105      	str	r1, [sp, #20]
 801242e:	e7c4      	b.n	80123ba <_vfiprintf_r+0x15a>
 8012430:	fb0c 2101 	mla	r1, ip, r1, r2
 8012434:	4604      	mov	r4, r0
 8012436:	2301      	movs	r3, #1
 8012438:	e7f0      	b.n	801241c <_vfiprintf_r+0x1bc>
 801243a:	ab03      	add	r3, sp, #12
 801243c:	9300      	str	r3, [sp, #0]
 801243e:	462a      	mov	r2, r5
 8012440:	4b12      	ldr	r3, [pc, #72]	; (801248c <_vfiprintf_r+0x22c>)
 8012442:	a904      	add	r1, sp, #16
 8012444:	4630      	mov	r0, r6
 8012446:	f3af 8000 	nop.w
 801244a:	4607      	mov	r7, r0
 801244c:	1c78      	adds	r0, r7, #1
 801244e:	d1d6      	bne.n	80123fe <_vfiprintf_r+0x19e>
 8012450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012452:	07d9      	lsls	r1, r3, #31
 8012454:	d405      	bmi.n	8012462 <_vfiprintf_r+0x202>
 8012456:	89ab      	ldrh	r3, [r5, #12]
 8012458:	059a      	lsls	r2, r3, #22
 801245a:	d402      	bmi.n	8012462 <_vfiprintf_r+0x202>
 801245c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801245e:	f7fe fb19 	bl	8010a94 <__retarget_lock_release_recursive>
 8012462:	89ab      	ldrh	r3, [r5, #12]
 8012464:	065b      	lsls	r3, r3, #25
 8012466:	f53f af1d 	bmi.w	80122a4 <_vfiprintf_r+0x44>
 801246a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801246c:	e71c      	b.n	80122a8 <_vfiprintf_r+0x48>
 801246e:	ab03      	add	r3, sp, #12
 8012470:	9300      	str	r3, [sp, #0]
 8012472:	462a      	mov	r2, r5
 8012474:	4b05      	ldr	r3, [pc, #20]	; (801248c <_vfiprintf_r+0x22c>)
 8012476:	a904      	add	r1, sp, #16
 8012478:	4630      	mov	r0, r6
 801247a:	f000 f879 	bl	8012570 <_printf_i>
 801247e:	e7e4      	b.n	801244a <_vfiprintf_r+0x1ea>
 8012480:	08013cec 	.word	0x08013cec
 8012484:	08013cf6 	.word	0x08013cf6
 8012488:	00000000 	.word	0x00000000
 801248c:	0801223b 	.word	0x0801223b
 8012490:	08013cf2 	.word	0x08013cf2

08012494 <_printf_common>:
 8012494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012498:	4616      	mov	r6, r2
 801249a:	4699      	mov	r9, r3
 801249c:	688a      	ldr	r2, [r1, #8]
 801249e:	690b      	ldr	r3, [r1, #16]
 80124a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124a4:	4293      	cmp	r3, r2
 80124a6:	bfb8      	it	lt
 80124a8:	4613      	movlt	r3, r2
 80124aa:	6033      	str	r3, [r6, #0]
 80124ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80124b0:	4607      	mov	r7, r0
 80124b2:	460c      	mov	r4, r1
 80124b4:	b10a      	cbz	r2, 80124ba <_printf_common+0x26>
 80124b6:	3301      	adds	r3, #1
 80124b8:	6033      	str	r3, [r6, #0]
 80124ba:	6823      	ldr	r3, [r4, #0]
 80124bc:	0699      	lsls	r1, r3, #26
 80124be:	bf42      	ittt	mi
 80124c0:	6833      	ldrmi	r3, [r6, #0]
 80124c2:	3302      	addmi	r3, #2
 80124c4:	6033      	strmi	r3, [r6, #0]
 80124c6:	6825      	ldr	r5, [r4, #0]
 80124c8:	f015 0506 	ands.w	r5, r5, #6
 80124cc:	d106      	bne.n	80124dc <_printf_common+0x48>
 80124ce:	f104 0a19 	add.w	sl, r4, #25
 80124d2:	68e3      	ldr	r3, [r4, #12]
 80124d4:	6832      	ldr	r2, [r6, #0]
 80124d6:	1a9b      	subs	r3, r3, r2
 80124d8:	42ab      	cmp	r3, r5
 80124da:	dc26      	bgt.n	801252a <_printf_common+0x96>
 80124dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80124e0:	1e13      	subs	r3, r2, #0
 80124e2:	6822      	ldr	r2, [r4, #0]
 80124e4:	bf18      	it	ne
 80124e6:	2301      	movne	r3, #1
 80124e8:	0692      	lsls	r2, r2, #26
 80124ea:	d42b      	bmi.n	8012544 <_printf_common+0xb0>
 80124ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124f0:	4649      	mov	r1, r9
 80124f2:	4638      	mov	r0, r7
 80124f4:	47c0      	blx	r8
 80124f6:	3001      	adds	r0, #1
 80124f8:	d01e      	beq.n	8012538 <_printf_common+0xa4>
 80124fa:	6823      	ldr	r3, [r4, #0]
 80124fc:	6922      	ldr	r2, [r4, #16]
 80124fe:	f003 0306 	and.w	r3, r3, #6
 8012502:	2b04      	cmp	r3, #4
 8012504:	bf02      	ittt	eq
 8012506:	68e5      	ldreq	r5, [r4, #12]
 8012508:	6833      	ldreq	r3, [r6, #0]
 801250a:	1aed      	subeq	r5, r5, r3
 801250c:	68a3      	ldr	r3, [r4, #8]
 801250e:	bf0c      	ite	eq
 8012510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012514:	2500      	movne	r5, #0
 8012516:	4293      	cmp	r3, r2
 8012518:	bfc4      	itt	gt
 801251a:	1a9b      	subgt	r3, r3, r2
 801251c:	18ed      	addgt	r5, r5, r3
 801251e:	2600      	movs	r6, #0
 8012520:	341a      	adds	r4, #26
 8012522:	42b5      	cmp	r5, r6
 8012524:	d11a      	bne.n	801255c <_printf_common+0xc8>
 8012526:	2000      	movs	r0, #0
 8012528:	e008      	b.n	801253c <_printf_common+0xa8>
 801252a:	2301      	movs	r3, #1
 801252c:	4652      	mov	r2, sl
 801252e:	4649      	mov	r1, r9
 8012530:	4638      	mov	r0, r7
 8012532:	47c0      	blx	r8
 8012534:	3001      	adds	r0, #1
 8012536:	d103      	bne.n	8012540 <_printf_common+0xac>
 8012538:	f04f 30ff 	mov.w	r0, #4294967295
 801253c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012540:	3501      	adds	r5, #1
 8012542:	e7c6      	b.n	80124d2 <_printf_common+0x3e>
 8012544:	18e1      	adds	r1, r4, r3
 8012546:	1c5a      	adds	r2, r3, #1
 8012548:	2030      	movs	r0, #48	; 0x30
 801254a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801254e:	4422      	add	r2, r4
 8012550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012558:	3302      	adds	r3, #2
 801255a:	e7c7      	b.n	80124ec <_printf_common+0x58>
 801255c:	2301      	movs	r3, #1
 801255e:	4622      	mov	r2, r4
 8012560:	4649      	mov	r1, r9
 8012562:	4638      	mov	r0, r7
 8012564:	47c0      	blx	r8
 8012566:	3001      	adds	r0, #1
 8012568:	d0e6      	beq.n	8012538 <_printf_common+0xa4>
 801256a:	3601      	adds	r6, #1
 801256c:	e7d9      	b.n	8012522 <_printf_common+0x8e>
	...

08012570 <_printf_i>:
 8012570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012574:	7e0f      	ldrb	r7, [r1, #24]
 8012576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012578:	2f78      	cmp	r7, #120	; 0x78
 801257a:	4691      	mov	r9, r2
 801257c:	4680      	mov	r8, r0
 801257e:	460c      	mov	r4, r1
 8012580:	469a      	mov	sl, r3
 8012582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012586:	d807      	bhi.n	8012598 <_printf_i+0x28>
 8012588:	2f62      	cmp	r7, #98	; 0x62
 801258a:	d80a      	bhi.n	80125a2 <_printf_i+0x32>
 801258c:	2f00      	cmp	r7, #0
 801258e:	f000 80d4 	beq.w	801273a <_printf_i+0x1ca>
 8012592:	2f58      	cmp	r7, #88	; 0x58
 8012594:	f000 80c0 	beq.w	8012718 <_printf_i+0x1a8>
 8012598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801259c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80125a0:	e03a      	b.n	8012618 <_printf_i+0xa8>
 80125a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80125a6:	2b15      	cmp	r3, #21
 80125a8:	d8f6      	bhi.n	8012598 <_printf_i+0x28>
 80125aa:	a101      	add	r1, pc, #4	; (adr r1, 80125b0 <_printf_i+0x40>)
 80125ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80125b0:	08012609 	.word	0x08012609
 80125b4:	0801261d 	.word	0x0801261d
 80125b8:	08012599 	.word	0x08012599
 80125bc:	08012599 	.word	0x08012599
 80125c0:	08012599 	.word	0x08012599
 80125c4:	08012599 	.word	0x08012599
 80125c8:	0801261d 	.word	0x0801261d
 80125cc:	08012599 	.word	0x08012599
 80125d0:	08012599 	.word	0x08012599
 80125d4:	08012599 	.word	0x08012599
 80125d8:	08012599 	.word	0x08012599
 80125dc:	08012721 	.word	0x08012721
 80125e0:	08012649 	.word	0x08012649
 80125e4:	080126db 	.word	0x080126db
 80125e8:	08012599 	.word	0x08012599
 80125ec:	08012599 	.word	0x08012599
 80125f0:	08012743 	.word	0x08012743
 80125f4:	08012599 	.word	0x08012599
 80125f8:	08012649 	.word	0x08012649
 80125fc:	08012599 	.word	0x08012599
 8012600:	08012599 	.word	0x08012599
 8012604:	080126e3 	.word	0x080126e3
 8012608:	682b      	ldr	r3, [r5, #0]
 801260a:	1d1a      	adds	r2, r3, #4
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	602a      	str	r2, [r5, #0]
 8012610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012618:	2301      	movs	r3, #1
 801261a:	e09f      	b.n	801275c <_printf_i+0x1ec>
 801261c:	6820      	ldr	r0, [r4, #0]
 801261e:	682b      	ldr	r3, [r5, #0]
 8012620:	0607      	lsls	r7, r0, #24
 8012622:	f103 0104 	add.w	r1, r3, #4
 8012626:	6029      	str	r1, [r5, #0]
 8012628:	d501      	bpl.n	801262e <_printf_i+0xbe>
 801262a:	681e      	ldr	r6, [r3, #0]
 801262c:	e003      	b.n	8012636 <_printf_i+0xc6>
 801262e:	0646      	lsls	r6, r0, #25
 8012630:	d5fb      	bpl.n	801262a <_printf_i+0xba>
 8012632:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012636:	2e00      	cmp	r6, #0
 8012638:	da03      	bge.n	8012642 <_printf_i+0xd2>
 801263a:	232d      	movs	r3, #45	; 0x2d
 801263c:	4276      	negs	r6, r6
 801263e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012642:	485a      	ldr	r0, [pc, #360]	; (80127ac <_printf_i+0x23c>)
 8012644:	230a      	movs	r3, #10
 8012646:	e012      	b.n	801266e <_printf_i+0xfe>
 8012648:	682b      	ldr	r3, [r5, #0]
 801264a:	6820      	ldr	r0, [r4, #0]
 801264c:	1d19      	adds	r1, r3, #4
 801264e:	6029      	str	r1, [r5, #0]
 8012650:	0605      	lsls	r5, r0, #24
 8012652:	d501      	bpl.n	8012658 <_printf_i+0xe8>
 8012654:	681e      	ldr	r6, [r3, #0]
 8012656:	e002      	b.n	801265e <_printf_i+0xee>
 8012658:	0641      	lsls	r1, r0, #25
 801265a:	d5fb      	bpl.n	8012654 <_printf_i+0xe4>
 801265c:	881e      	ldrh	r6, [r3, #0]
 801265e:	4853      	ldr	r0, [pc, #332]	; (80127ac <_printf_i+0x23c>)
 8012660:	2f6f      	cmp	r7, #111	; 0x6f
 8012662:	bf0c      	ite	eq
 8012664:	2308      	moveq	r3, #8
 8012666:	230a      	movne	r3, #10
 8012668:	2100      	movs	r1, #0
 801266a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801266e:	6865      	ldr	r5, [r4, #4]
 8012670:	60a5      	str	r5, [r4, #8]
 8012672:	2d00      	cmp	r5, #0
 8012674:	bfa2      	ittt	ge
 8012676:	6821      	ldrge	r1, [r4, #0]
 8012678:	f021 0104 	bicge.w	r1, r1, #4
 801267c:	6021      	strge	r1, [r4, #0]
 801267e:	b90e      	cbnz	r6, 8012684 <_printf_i+0x114>
 8012680:	2d00      	cmp	r5, #0
 8012682:	d04b      	beq.n	801271c <_printf_i+0x1ac>
 8012684:	4615      	mov	r5, r2
 8012686:	fbb6 f1f3 	udiv	r1, r6, r3
 801268a:	fb03 6711 	mls	r7, r3, r1, r6
 801268e:	5dc7      	ldrb	r7, [r0, r7]
 8012690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012694:	4637      	mov	r7, r6
 8012696:	42bb      	cmp	r3, r7
 8012698:	460e      	mov	r6, r1
 801269a:	d9f4      	bls.n	8012686 <_printf_i+0x116>
 801269c:	2b08      	cmp	r3, #8
 801269e:	d10b      	bne.n	80126b8 <_printf_i+0x148>
 80126a0:	6823      	ldr	r3, [r4, #0]
 80126a2:	07de      	lsls	r6, r3, #31
 80126a4:	d508      	bpl.n	80126b8 <_printf_i+0x148>
 80126a6:	6923      	ldr	r3, [r4, #16]
 80126a8:	6861      	ldr	r1, [r4, #4]
 80126aa:	4299      	cmp	r1, r3
 80126ac:	bfde      	ittt	le
 80126ae:	2330      	movle	r3, #48	; 0x30
 80126b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80126b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80126b8:	1b52      	subs	r2, r2, r5
 80126ba:	6122      	str	r2, [r4, #16]
 80126bc:	f8cd a000 	str.w	sl, [sp]
 80126c0:	464b      	mov	r3, r9
 80126c2:	aa03      	add	r2, sp, #12
 80126c4:	4621      	mov	r1, r4
 80126c6:	4640      	mov	r0, r8
 80126c8:	f7ff fee4 	bl	8012494 <_printf_common>
 80126cc:	3001      	adds	r0, #1
 80126ce:	d14a      	bne.n	8012766 <_printf_i+0x1f6>
 80126d0:	f04f 30ff 	mov.w	r0, #4294967295
 80126d4:	b004      	add	sp, #16
 80126d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126da:	6823      	ldr	r3, [r4, #0]
 80126dc:	f043 0320 	orr.w	r3, r3, #32
 80126e0:	6023      	str	r3, [r4, #0]
 80126e2:	4833      	ldr	r0, [pc, #204]	; (80127b0 <_printf_i+0x240>)
 80126e4:	2778      	movs	r7, #120	; 0x78
 80126e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80126ea:	6823      	ldr	r3, [r4, #0]
 80126ec:	6829      	ldr	r1, [r5, #0]
 80126ee:	061f      	lsls	r7, r3, #24
 80126f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80126f4:	d402      	bmi.n	80126fc <_printf_i+0x18c>
 80126f6:	065f      	lsls	r7, r3, #25
 80126f8:	bf48      	it	mi
 80126fa:	b2b6      	uxthmi	r6, r6
 80126fc:	07df      	lsls	r7, r3, #31
 80126fe:	bf48      	it	mi
 8012700:	f043 0320 	orrmi.w	r3, r3, #32
 8012704:	6029      	str	r1, [r5, #0]
 8012706:	bf48      	it	mi
 8012708:	6023      	strmi	r3, [r4, #0]
 801270a:	b91e      	cbnz	r6, 8012714 <_printf_i+0x1a4>
 801270c:	6823      	ldr	r3, [r4, #0]
 801270e:	f023 0320 	bic.w	r3, r3, #32
 8012712:	6023      	str	r3, [r4, #0]
 8012714:	2310      	movs	r3, #16
 8012716:	e7a7      	b.n	8012668 <_printf_i+0xf8>
 8012718:	4824      	ldr	r0, [pc, #144]	; (80127ac <_printf_i+0x23c>)
 801271a:	e7e4      	b.n	80126e6 <_printf_i+0x176>
 801271c:	4615      	mov	r5, r2
 801271e:	e7bd      	b.n	801269c <_printf_i+0x12c>
 8012720:	682b      	ldr	r3, [r5, #0]
 8012722:	6826      	ldr	r6, [r4, #0]
 8012724:	6961      	ldr	r1, [r4, #20]
 8012726:	1d18      	adds	r0, r3, #4
 8012728:	6028      	str	r0, [r5, #0]
 801272a:	0635      	lsls	r5, r6, #24
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	d501      	bpl.n	8012734 <_printf_i+0x1c4>
 8012730:	6019      	str	r1, [r3, #0]
 8012732:	e002      	b.n	801273a <_printf_i+0x1ca>
 8012734:	0670      	lsls	r0, r6, #25
 8012736:	d5fb      	bpl.n	8012730 <_printf_i+0x1c0>
 8012738:	8019      	strh	r1, [r3, #0]
 801273a:	2300      	movs	r3, #0
 801273c:	6123      	str	r3, [r4, #16]
 801273e:	4615      	mov	r5, r2
 8012740:	e7bc      	b.n	80126bc <_printf_i+0x14c>
 8012742:	682b      	ldr	r3, [r5, #0]
 8012744:	1d1a      	adds	r2, r3, #4
 8012746:	602a      	str	r2, [r5, #0]
 8012748:	681d      	ldr	r5, [r3, #0]
 801274a:	6862      	ldr	r2, [r4, #4]
 801274c:	2100      	movs	r1, #0
 801274e:	4628      	mov	r0, r5
 8012750:	f7ed fd4e 	bl	80001f0 <memchr>
 8012754:	b108      	cbz	r0, 801275a <_printf_i+0x1ea>
 8012756:	1b40      	subs	r0, r0, r5
 8012758:	6060      	str	r0, [r4, #4]
 801275a:	6863      	ldr	r3, [r4, #4]
 801275c:	6123      	str	r3, [r4, #16]
 801275e:	2300      	movs	r3, #0
 8012760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012764:	e7aa      	b.n	80126bc <_printf_i+0x14c>
 8012766:	6923      	ldr	r3, [r4, #16]
 8012768:	462a      	mov	r2, r5
 801276a:	4649      	mov	r1, r9
 801276c:	4640      	mov	r0, r8
 801276e:	47d0      	blx	sl
 8012770:	3001      	adds	r0, #1
 8012772:	d0ad      	beq.n	80126d0 <_printf_i+0x160>
 8012774:	6823      	ldr	r3, [r4, #0]
 8012776:	079b      	lsls	r3, r3, #30
 8012778:	d413      	bmi.n	80127a2 <_printf_i+0x232>
 801277a:	68e0      	ldr	r0, [r4, #12]
 801277c:	9b03      	ldr	r3, [sp, #12]
 801277e:	4298      	cmp	r0, r3
 8012780:	bfb8      	it	lt
 8012782:	4618      	movlt	r0, r3
 8012784:	e7a6      	b.n	80126d4 <_printf_i+0x164>
 8012786:	2301      	movs	r3, #1
 8012788:	4632      	mov	r2, r6
 801278a:	4649      	mov	r1, r9
 801278c:	4640      	mov	r0, r8
 801278e:	47d0      	blx	sl
 8012790:	3001      	adds	r0, #1
 8012792:	d09d      	beq.n	80126d0 <_printf_i+0x160>
 8012794:	3501      	adds	r5, #1
 8012796:	68e3      	ldr	r3, [r4, #12]
 8012798:	9903      	ldr	r1, [sp, #12]
 801279a:	1a5b      	subs	r3, r3, r1
 801279c:	42ab      	cmp	r3, r5
 801279e:	dcf2      	bgt.n	8012786 <_printf_i+0x216>
 80127a0:	e7eb      	b.n	801277a <_printf_i+0x20a>
 80127a2:	2500      	movs	r5, #0
 80127a4:	f104 0619 	add.w	r6, r4, #25
 80127a8:	e7f5      	b.n	8012796 <_printf_i+0x226>
 80127aa:	bf00      	nop
 80127ac:	08013cfd 	.word	0x08013cfd
 80127b0:	08013d0e 	.word	0x08013d0e

080127b4 <_scanf_chars>:
 80127b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127b8:	4615      	mov	r5, r2
 80127ba:	688a      	ldr	r2, [r1, #8]
 80127bc:	4680      	mov	r8, r0
 80127be:	460c      	mov	r4, r1
 80127c0:	b932      	cbnz	r2, 80127d0 <_scanf_chars+0x1c>
 80127c2:	698a      	ldr	r2, [r1, #24]
 80127c4:	2a00      	cmp	r2, #0
 80127c6:	bf0c      	ite	eq
 80127c8:	2201      	moveq	r2, #1
 80127ca:	f04f 32ff 	movne.w	r2, #4294967295
 80127ce:	608a      	str	r2, [r1, #8]
 80127d0:	6822      	ldr	r2, [r4, #0]
 80127d2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8012864 <_scanf_chars+0xb0>
 80127d6:	06d1      	lsls	r1, r2, #27
 80127d8:	bf5f      	itttt	pl
 80127da:	681a      	ldrpl	r2, [r3, #0]
 80127dc:	1d11      	addpl	r1, r2, #4
 80127de:	6019      	strpl	r1, [r3, #0]
 80127e0:	6816      	ldrpl	r6, [r2, #0]
 80127e2:	2700      	movs	r7, #0
 80127e4:	69a0      	ldr	r0, [r4, #24]
 80127e6:	b188      	cbz	r0, 801280c <_scanf_chars+0x58>
 80127e8:	2801      	cmp	r0, #1
 80127ea:	d107      	bne.n	80127fc <_scanf_chars+0x48>
 80127ec:	682a      	ldr	r2, [r5, #0]
 80127ee:	7811      	ldrb	r1, [r2, #0]
 80127f0:	6962      	ldr	r2, [r4, #20]
 80127f2:	5c52      	ldrb	r2, [r2, r1]
 80127f4:	b952      	cbnz	r2, 801280c <_scanf_chars+0x58>
 80127f6:	2f00      	cmp	r7, #0
 80127f8:	d031      	beq.n	801285e <_scanf_chars+0xaa>
 80127fa:	e022      	b.n	8012842 <_scanf_chars+0x8e>
 80127fc:	2802      	cmp	r0, #2
 80127fe:	d120      	bne.n	8012842 <_scanf_chars+0x8e>
 8012800:	682b      	ldr	r3, [r5, #0]
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012808:	071b      	lsls	r3, r3, #28
 801280a:	d41a      	bmi.n	8012842 <_scanf_chars+0x8e>
 801280c:	6823      	ldr	r3, [r4, #0]
 801280e:	06da      	lsls	r2, r3, #27
 8012810:	bf5e      	ittt	pl
 8012812:	682b      	ldrpl	r3, [r5, #0]
 8012814:	781b      	ldrbpl	r3, [r3, #0]
 8012816:	f806 3b01 	strbpl.w	r3, [r6], #1
 801281a:	682a      	ldr	r2, [r5, #0]
 801281c:	686b      	ldr	r3, [r5, #4]
 801281e:	3201      	adds	r2, #1
 8012820:	602a      	str	r2, [r5, #0]
 8012822:	68a2      	ldr	r2, [r4, #8]
 8012824:	3b01      	subs	r3, #1
 8012826:	3a01      	subs	r2, #1
 8012828:	606b      	str	r3, [r5, #4]
 801282a:	3701      	adds	r7, #1
 801282c:	60a2      	str	r2, [r4, #8]
 801282e:	b142      	cbz	r2, 8012842 <_scanf_chars+0x8e>
 8012830:	2b00      	cmp	r3, #0
 8012832:	dcd7      	bgt.n	80127e4 <_scanf_chars+0x30>
 8012834:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012838:	4629      	mov	r1, r5
 801283a:	4640      	mov	r0, r8
 801283c:	4798      	blx	r3
 801283e:	2800      	cmp	r0, #0
 8012840:	d0d0      	beq.n	80127e4 <_scanf_chars+0x30>
 8012842:	6823      	ldr	r3, [r4, #0]
 8012844:	f013 0310 	ands.w	r3, r3, #16
 8012848:	d105      	bne.n	8012856 <_scanf_chars+0xa2>
 801284a:	68e2      	ldr	r2, [r4, #12]
 801284c:	3201      	adds	r2, #1
 801284e:	60e2      	str	r2, [r4, #12]
 8012850:	69a2      	ldr	r2, [r4, #24]
 8012852:	b102      	cbz	r2, 8012856 <_scanf_chars+0xa2>
 8012854:	7033      	strb	r3, [r6, #0]
 8012856:	6923      	ldr	r3, [r4, #16]
 8012858:	443b      	add	r3, r7
 801285a:	6123      	str	r3, [r4, #16]
 801285c:	2000      	movs	r0, #0
 801285e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012862:	bf00      	nop
 8012864:	08013a01 	.word	0x08013a01

08012868 <_scanf_i>:
 8012868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801286c:	4698      	mov	r8, r3
 801286e:	4b74      	ldr	r3, [pc, #464]	; (8012a40 <_scanf_i+0x1d8>)
 8012870:	460c      	mov	r4, r1
 8012872:	4682      	mov	sl, r0
 8012874:	4616      	mov	r6, r2
 8012876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801287a:	b087      	sub	sp, #28
 801287c:	ab03      	add	r3, sp, #12
 801287e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012882:	4b70      	ldr	r3, [pc, #448]	; (8012a44 <_scanf_i+0x1dc>)
 8012884:	69a1      	ldr	r1, [r4, #24]
 8012886:	4a70      	ldr	r2, [pc, #448]	; (8012a48 <_scanf_i+0x1e0>)
 8012888:	2903      	cmp	r1, #3
 801288a:	bf18      	it	ne
 801288c:	461a      	movne	r2, r3
 801288e:	68a3      	ldr	r3, [r4, #8]
 8012890:	9201      	str	r2, [sp, #4]
 8012892:	1e5a      	subs	r2, r3, #1
 8012894:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012898:	bf88      	it	hi
 801289a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801289e:	4627      	mov	r7, r4
 80128a0:	bf82      	ittt	hi
 80128a2:	eb03 0905 	addhi.w	r9, r3, r5
 80128a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80128aa:	60a3      	strhi	r3, [r4, #8]
 80128ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80128b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80128b4:	bf98      	it	ls
 80128b6:	f04f 0900 	movls.w	r9, #0
 80128ba:	6023      	str	r3, [r4, #0]
 80128bc:	463d      	mov	r5, r7
 80128be:	f04f 0b00 	mov.w	fp, #0
 80128c2:	6831      	ldr	r1, [r6, #0]
 80128c4:	ab03      	add	r3, sp, #12
 80128c6:	7809      	ldrb	r1, [r1, #0]
 80128c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80128cc:	2202      	movs	r2, #2
 80128ce:	f7ed fc8f 	bl	80001f0 <memchr>
 80128d2:	b328      	cbz	r0, 8012920 <_scanf_i+0xb8>
 80128d4:	f1bb 0f01 	cmp.w	fp, #1
 80128d8:	d159      	bne.n	801298e <_scanf_i+0x126>
 80128da:	6862      	ldr	r2, [r4, #4]
 80128dc:	b92a      	cbnz	r2, 80128ea <_scanf_i+0x82>
 80128de:	6822      	ldr	r2, [r4, #0]
 80128e0:	2308      	movs	r3, #8
 80128e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80128e6:	6063      	str	r3, [r4, #4]
 80128e8:	6022      	str	r2, [r4, #0]
 80128ea:	6822      	ldr	r2, [r4, #0]
 80128ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80128f0:	6022      	str	r2, [r4, #0]
 80128f2:	68a2      	ldr	r2, [r4, #8]
 80128f4:	1e51      	subs	r1, r2, #1
 80128f6:	60a1      	str	r1, [r4, #8]
 80128f8:	b192      	cbz	r2, 8012920 <_scanf_i+0xb8>
 80128fa:	6832      	ldr	r2, [r6, #0]
 80128fc:	1c51      	adds	r1, r2, #1
 80128fe:	6031      	str	r1, [r6, #0]
 8012900:	7812      	ldrb	r2, [r2, #0]
 8012902:	f805 2b01 	strb.w	r2, [r5], #1
 8012906:	6872      	ldr	r2, [r6, #4]
 8012908:	3a01      	subs	r2, #1
 801290a:	2a00      	cmp	r2, #0
 801290c:	6072      	str	r2, [r6, #4]
 801290e:	dc07      	bgt.n	8012920 <_scanf_i+0xb8>
 8012910:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012914:	4631      	mov	r1, r6
 8012916:	4650      	mov	r0, sl
 8012918:	4790      	blx	r2
 801291a:	2800      	cmp	r0, #0
 801291c:	f040 8085 	bne.w	8012a2a <_scanf_i+0x1c2>
 8012920:	f10b 0b01 	add.w	fp, fp, #1
 8012924:	f1bb 0f03 	cmp.w	fp, #3
 8012928:	d1cb      	bne.n	80128c2 <_scanf_i+0x5a>
 801292a:	6863      	ldr	r3, [r4, #4]
 801292c:	b90b      	cbnz	r3, 8012932 <_scanf_i+0xca>
 801292e:	230a      	movs	r3, #10
 8012930:	6063      	str	r3, [r4, #4]
 8012932:	6863      	ldr	r3, [r4, #4]
 8012934:	4945      	ldr	r1, [pc, #276]	; (8012a4c <_scanf_i+0x1e4>)
 8012936:	6960      	ldr	r0, [r4, #20]
 8012938:	1ac9      	subs	r1, r1, r3
 801293a:	f000 f937 	bl	8012bac <__sccl>
 801293e:	f04f 0b00 	mov.w	fp, #0
 8012942:	68a3      	ldr	r3, [r4, #8]
 8012944:	6822      	ldr	r2, [r4, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d03d      	beq.n	80129c6 <_scanf_i+0x15e>
 801294a:	6831      	ldr	r1, [r6, #0]
 801294c:	6960      	ldr	r0, [r4, #20]
 801294e:	f891 c000 	ldrb.w	ip, [r1]
 8012952:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012956:	2800      	cmp	r0, #0
 8012958:	d035      	beq.n	80129c6 <_scanf_i+0x15e>
 801295a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801295e:	d124      	bne.n	80129aa <_scanf_i+0x142>
 8012960:	0510      	lsls	r0, r2, #20
 8012962:	d522      	bpl.n	80129aa <_scanf_i+0x142>
 8012964:	f10b 0b01 	add.w	fp, fp, #1
 8012968:	f1b9 0f00 	cmp.w	r9, #0
 801296c:	d003      	beq.n	8012976 <_scanf_i+0x10e>
 801296e:	3301      	adds	r3, #1
 8012970:	f109 39ff 	add.w	r9, r9, #4294967295
 8012974:	60a3      	str	r3, [r4, #8]
 8012976:	6873      	ldr	r3, [r6, #4]
 8012978:	3b01      	subs	r3, #1
 801297a:	2b00      	cmp	r3, #0
 801297c:	6073      	str	r3, [r6, #4]
 801297e:	dd1b      	ble.n	80129b8 <_scanf_i+0x150>
 8012980:	6833      	ldr	r3, [r6, #0]
 8012982:	3301      	adds	r3, #1
 8012984:	6033      	str	r3, [r6, #0]
 8012986:	68a3      	ldr	r3, [r4, #8]
 8012988:	3b01      	subs	r3, #1
 801298a:	60a3      	str	r3, [r4, #8]
 801298c:	e7d9      	b.n	8012942 <_scanf_i+0xda>
 801298e:	f1bb 0f02 	cmp.w	fp, #2
 8012992:	d1ae      	bne.n	80128f2 <_scanf_i+0x8a>
 8012994:	6822      	ldr	r2, [r4, #0]
 8012996:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801299a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801299e:	d1bf      	bne.n	8012920 <_scanf_i+0xb8>
 80129a0:	2310      	movs	r3, #16
 80129a2:	6063      	str	r3, [r4, #4]
 80129a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80129a8:	e7a2      	b.n	80128f0 <_scanf_i+0x88>
 80129aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80129ae:	6022      	str	r2, [r4, #0]
 80129b0:	780b      	ldrb	r3, [r1, #0]
 80129b2:	f805 3b01 	strb.w	r3, [r5], #1
 80129b6:	e7de      	b.n	8012976 <_scanf_i+0x10e>
 80129b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80129bc:	4631      	mov	r1, r6
 80129be:	4650      	mov	r0, sl
 80129c0:	4798      	blx	r3
 80129c2:	2800      	cmp	r0, #0
 80129c4:	d0df      	beq.n	8012986 <_scanf_i+0x11e>
 80129c6:	6823      	ldr	r3, [r4, #0]
 80129c8:	05d9      	lsls	r1, r3, #23
 80129ca:	d50d      	bpl.n	80129e8 <_scanf_i+0x180>
 80129cc:	42bd      	cmp	r5, r7
 80129ce:	d909      	bls.n	80129e4 <_scanf_i+0x17c>
 80129d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80129d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80129d8:	4632      	mov	r2, r6
 80129da:	4650      	mov	r0, sl
 80129dc:	4798      	blx	r3
 80129de:	f105 39ff 	add.w	r9, r5, #4294967295
 80129e2:	464d      	mov	r5, r9
 80129e4:	42bd      	cmp	r5, r7
 80129e6:	d028      	beq.n	8012a3a <_scanf_i+0x1d2>
 80129e8:	6822      	ldr	r2, [r4, #0]
 80129ea:	f012 0210 	ands.w	r2, r2, #16
 80129ee:	d113      	bne.n	8012a18 <_scanf_i+0x1b0>
 80129f0:	702a      	strb	r2, [r5, #0]
 80129f2:	6863      	ldr	r3, [r4, #4]
 80129f4:	9e01      	ldr	r6, [sp, #4]
 80129f6:	4639      	mov	r1, r7
 80129f8:	4650      	mov	r0, sl
 80129fa:	47b0      	blx	r6
 80129fc:	f8d8 3000 	ldr.w	r3, [r8]
 8012a00:	6821      	ldr	r1, [r4, #0]
 8012a02:	1d1a      	adds	r2, r3, #4
 8012a04:	f8c8 2000 	str.w	r2, [r8]
 8012a08:	f011 0f20 	tst.w	r1, #32
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	d00f      	beq.n	8012a30 <_scanf_i+0x1c8>
 8012a10:	6018      	str	r0, [r3, #0]
 8012a12:	68e3      	ldr	r3, [r4, #12]
 8012a14:	3301      	adds	r3, #1
 8012a16:	60e3      	str	r3, [r4, #12]
 8012a18:	6923      	ldr	r3, [r4, #16]
 8012a1a:	1bed      	subs	r5, r5, r7
 8012a1c:	445d      	add	r5, fp
 8012a1e:	442b      	add	r3, r5
 8012a20:	6123      	str	r3, [r4, #16]
 8012a22:	2000      	movs	r0, #0
 8012a24:	b007      	add	sp, #28
 8012a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a2a:	f04f 0b00 	mov.w	fp, #0
 8012a2e:	e7ca      	b.n	80129c6 <_scanf_i+0x15e>
 8012a30:	07ca      	lsls	r2, r1, #31
 8012a32:	bf4c      	ite	mi
 8012a34:	8018      	strhmi	r0, [r3, #0]
 8012a36:	6018      	strpl	r0, [r3, #0]
 8012a38:	e7eb      	b.n	8012a12 <_scanf_i+0x1aa>
 8012a3a:	2001      	movs	r0, #1
 8012a3c:	e7f2      	b.n	8012a24 <_scanf_i+0x1bc>
 8012a3e:	bf00      	nop
 8012a40:	08013908 	.word	0x08013908
 8012a44:	08013011 	.word	0x08013011
 8012a48:	08012f29 	.word	0x08012f29
 8012a4c:	08013d2f 	.word	0x08013d2f

08012a50 <__sflush_r>:
 8012a50:	898a      	ldrh	r2, [r1, #12]
 8012a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a56:	4605      	mov	r5, r0
 8012a58:	0710      	lsls	r0, r2, #28
 8012a5a:	460c      	mov	r4, r1
 8012a5c:	d458      	bmi.n	8012b10 <__sflush_r+0xc0>
 8012a5e:	684b      	ldr	r3, [r1, #4]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	dc05      	bgt.n	8012a70 <__sflush_r+0x20>
 8012a64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	dc02      	bgt.n	8012a70 <__sflush_r+0x20>
 8012a6a:	2000      	movs	r0, #0
 8012a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a72:	2e00      	cmp	r6, #0
 8012a74:	d0f9      	beq.n	8012a6a <__sflush_r+0x1a>
 8012a76:	2300      	movs	r3, #0
 8012a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012a7c:	682f      	ldr	r7, [r5, #0]
 8012a7e:	6a21      	ldr	r1, [r4, #32]
 8012a80:	602b      	str	r3, [r5, #0]
 8012a82:	d032      	beq.n	8012aea <__sflush_r+0x9a>
 8012a84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012a86:	89a3      	ldrh	r3, [r4, #12]
 8012a88:	075a      	lsls	r2, r3, #29
 8012a8a:	d505      	bpl.n	8012a98 <__sflush_r+0x48>
 8012a8c:	6863      	ldr	r3, [r4, #4]
 8012a8e:	1ac0      	subs	r0, r0, r3
 8012a90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a92:	b10b      	cbz	r3, 8012a98 <__sflush_r+0x48>
 8012a94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a96:	1ac0      	subs	r0, r0, r3
 8012a98:	2300      	movs	r3, #0
 8012a9a:	4602      	mov	r2, r0
 8012a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a9e:	6a21      	ldr	r1, [r4, #32]
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	47b0      	blx	r6
 8012aa4:	1c43      	adds	r3, r0, #1
 8012aa6:	89a3      	ldrh	r3, [r4, #12]
 8012aa8:	d106      	bne.n	8012ab8 <__sflush_r+0x68>
 8012aaa:	6829      	ldr	r1, [r5, #0]
 8012aac:	291d      	cmp	r1, #29
 8012aae:	d82b      	bhi.n	8012b08 <__sflush_r+0xb8>
 8012ab0:	4a29      	ldr	r2, [pc, #164]	; (8012b58 <__sflush_r+0x108>)
 8012ab2:	410a      	asrs	r2, r1
 8012ab4:	07d6      	lsls	r6, r2, #31
 8012ab6:	d427      	bmi.n	8012b08 <__sflush_r+0xb8>
 8012ab8:	2200      	movs	r2, #0
 8012aba:	6062      	str	r2, [r4, #4]
 8012abc:	04d9      	lsls	r1, r3, #19
 8012abe:	6922      	ldr	r2, [r4, #16]
 8012ac0:	6022      	str	r2, [r4, #0]
 8012ac2:	d504      	bpl.n	8012ace <__sflush_r+0x7e>
 8012ac4:	1c42      	adds	r2, r0, #1
 8012ac6:	d101      	bne.n	8012acc <__sflush_r+0x7c>
 8012ac8:	682b      	ldr	r3, [r5, #0]
 8012aca:	b903      	cbnz	r3, 8012ace <__sflush_r+0x7e>
 8012acc:	6560      	str	r0, [r4, #84]	; 0x54
 8012ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ad0:	602f      	str	r7, [r5, #0]
 8012ad2:	2900      	cmp	r1, #0
 8012ad4:	d0c9      	beq.n	8012a6a <__sflush_r+0x1a>
 8012ad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ada:	4299      	cmp	r1, r3
 8012adc:	d002      	beq.n	8012ae4 <__sflush_r+0x94>
 8012ade:	4628      	mov	r0, r5
 8012ae0:	f7fd fff2 	bl	8010ac8 <_free_r>
 8012ae4:	2000      	movs	r0, #0
 8012ae6:	6360      	str	r0, [r4, #52]	; 0x34
 8012ae8:	e7c0      	b.n	8012a6c <__sflush_r+0x1c>
 8012aea:	2301      	movs	r3, #1
 8012aec:	4628      	mov	r0, r5
 8012aee:	47b0      	blx	r6
 8012af0:	1c41      	adds	r1, r0, #1
 8012af2:	d1c8      	bne.n	8012a86 <__sflush_r+0x36>
 8012af4:	682b      	ldr	r3, [r5, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d0c5      	beq.n	8012a86 <__sflush_r+0x36>
 8012afa:	2b1d      	cmp	r3, #29
 8012afc:	d001      	beq.n	8012b02 <__sflush_r+0xb2>
 8012afe:	2b16      	cmp	r3, #22
 8012b00:	d101      	bne.n	8012b06 <__sflush_r+0xb6>
 8012b02:	602f      	str	r7, [r5, #0]
 8012b04:	e7b1      	b.n	8012a6a <__sflush_r+0x1a>
 8012b06:	89a3      	ldrh	r3, [r4, #12]
 8012b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b0c:	81a3      	strh	r3, [r4, #12]
 8012b0e:	e7ad      	b.n	8012a6c <__sflush_r+0x1c>
 8012b10:	690f      	ldr	r7, [r1, #16]
 8012b12:	2f00      	cmp	r7, #0
 8012b14:	d0a9      	beq.n	8012a6a <__sflush_r+0x1a>
 8012b16:	0793      	lsls	r3, r2, #30
 8012b18:	680e      	ldr	r6, [r1, #0]
 8012b1a:	bf08      	it	eq
 8012b1c:	694b      	ldreq	r3, [r1, #20]
 8012b1e:	600f      	str	r7, [r1, #0]
 8012b20:	bf18      	it	ne
 8012b22:	2300      	movne	r3, #0
 8012b24:	eba6 0807 	sub.w	r8, r6, r7
 8012b28:	608b      	str	r3, [r1, #8]
 8012b2a:	f1b8 0f00 	cmp.w	r8, #0
 8012b2e:	dd9c      	ble.n	8012a6a <__sflush_r+0x1a>
 8012b30:	6a21      	ldr	r1, [r4, #32]
 8012b32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012b34:	4643      	mov	r3, r8
 8012b36:	463a      	mov	r2, r7
 8012b38:	4628      	mov	r0, r5
 8012b3a:	47b0      	blx	r6
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	dc06      	bgt.n	8012b4e <__sflush_r+0xfe>
 8012b40:	89a3      	ldrh	r3, [r4, #12]
 8012b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b46:	81a3      	strh	r3, [r4, #12]
 8012b48:	f04f 30ff 	mov.w	r0, #4294967295
 8012b4c:	e78e      	b.n	8012a6c <__sflush_r+0x1c>
 8012b4e:	4407      	add	r7, r0
 8012b50:	eba8 0800 	sub.w	r8, r8, r0
 8012b54:	e7e9      	b.n	8012b2a <__sflush_r+0xda>
 8012b56:	bf00      	nop
 8012b58:	dfbffffe 	.word	0xdfbffffe

08012b5c <_fflush_r>:
 8012b5c:	b538      	push	{r3, r4, r5, lr}
 8012b5e:	690b      	ldr	r3, [r1, #16]
 8012b60:	4605      	mov	r5, r0
 8012b62:	460c      	mov	r4, r1
 8012b64:	b913      	cbnz	r3, 8012b6c <_fflush_r+0x10>
 8012b66:	2500      	movs	r5, #0
 8012b68:	4628      	mov	r0, r5
 8012b6a:	bd38      	pop	{r3, r4, r5, pc}
 8012b6c:	b118      	cbz	r0, 8012b76 <_fflush_r+0x1a>
 8012b6e:	6a03      	ldr	r3, [r0, #32]
 8012b70:	b90b      	cbnz	r3, 8012b76 <_fflush_r+0x1a>
 8012b72:	f7fd fd65 	bl	8010640 <__sinit>
 8012b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d0f3      	beq.n	8012b66 <_fflush_r+0xa>
 8012b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012b80:	07d0      	lsls	r0, r2, #31
 8012b82:	d404      	bmi.n	8012b8e <_fflush_r+0x32>
 8012b84:	0599      	lsls	r1, r3, #22
 8012b86:	d402      	bmi.n	8012b8e <_fflush_r+0x32>
 8012b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b8a:	f7fd ff82 	bl	8010a92 <__retarget_lock_acquire_recursive>
 8012b8e:	4628      	mov	r0, r5
 8012b90:	4621      	mov	r1, r4
 8012b92:	f7ff ff5d 	bl	8012a50 <__sflush_r>
 8012b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b98:	07da      	lsls	r2, r3, #31
 8012b9a:	4605      	mov	r5, r0
 8012b9c:	d4e4      	bmi.n	8012b68 <_fflush_r+0xc>
 8012b9e:	89a3      	ldrh	r3, [r4, #12]
 8012ba0:	059b      	lsls	r3, r3, #22
 8012ba2:	d4e1      	bmi.n	8012b68 <_fflush_r+0xc>
 8012ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ba6:	f7fd ff75 	bl	8010a94 <__retarget_lock_release_recursive>
 8012baa:	e7dd      	b.n	8012b68 <_fflush_r+0xc>

08012bac <__sccl>:
 8012bac:	b570      	push	{r4, r5, r6, lr}
 8012bae:	780b      	ldrb	r3, [r1, #0]
 8012bb0:	4604      	mov	r4, r0
 8012bb2:	2b5e      	cmp	r3, #94	; 0x5e
 8012bb4:	bf0b      	itete	eq
 8012bb6:	784b      	ldrbeq	r3, [r1, #1]
 8012bb8:	1c4a      	addne	r2, r1, #1
 8012bba:	1c8a      	addeq	r2, r1, #2
 8012bbc:	2100      	movne	r1, #0
 8012bbe:	bf08      	it	eq
 8012bc0:	2101      	moveq	r1, #1
 8012bc2:	3801      	subs	r0, #1
 8012bc4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012bc8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012bcc:	42a8      	cmp	r0, r5
 8012bce:	d1fb      	bne.n	8012bc8 <__sccl+0x1c>
 8012bd0:	b90b      	cbnz	r3, 8012bd6 <__sccl+0x2a>
 8012bd2:	1e50      	subs	r0, r2, #1
 8012bd4:	bd70      	pop	{r4, r5, r6, pc}
 8012bd6:	f081 0101 	eor.w	r1, r1, #1
 8012bda:	54e1      	strb	r1, [r4, r3]
 8012bdc:	4610      	mov	r0, r2
 8012bde:	4602      	mov	r2, r0
 8012be0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012be4:	2d2d      	cmp	r5, #45	; 0x2d
 8012be6:	d005      	beq.n	8012bf4 <__sccl+0x48>
 8012be8:	2d5d      	cmp	r5, #93	; 0x5d
 8012bea:	d016      	beq.n	8012c1a <__sccl+0x6e>
 8012bec:	2d00      	cmp	r5, #0
 8012bee:	d0f1      	beq.n	8012bd4 <__sccl+0x28>
 8012bf0:	462b      	mov	r3, r5
 8012bf2:	e7f2      	b.n	8012bda <__sccl+0x2e>
 8012bf4:	7846      	ldrb	r6, [r0, #1]
 8012bf6:	2e5d      	cmp	r6, #93	; 0x5d
 8012bf8:	d0fa      	beq.n	8012bf0 <__sccl+0x44>
 8012bfa:	42b3      	cmp	r3, r6
 8012bfc:	dcf8      	bgt.n	8012bf0 <__sccl+0x44>
 8012bfe:	3002      	adds	r0, #2
 8012c00:	461a      	mov	r2, r3
 8012c02:	3201      	adds	r2, #1
 8012c04:	4296      	cmp	r6, r2
 8012c06:	54a1      	strb	r1, [r4, r2]
 8012c08:	dcfb      	bgt.n	8012c02 <__sccl+0x56>
 8012c0a:	1af2      	subs	r2, r6, r3
 8012c0c:	3a01      	subs	r2, #1
 8012c0e:	1c5d      	adds	r5, r3, #1
 8012c10:	42b3      	cmp	r3, r6
 8012c12:	bfa8      	it	ge
 8012c14:	2200      	movge	r2, #0
 8012c16:	18ab      	adds	r3, r5, r2
 8012c18:	e7e1      	b.n	8012bde <__sccl+0x32>
 8012c1a:	4610      	mov	r0, r2
 8012c1c:	e7da      	b.n	8012bd4 <__sccl+0x28>

08012c1e <__submore>:
 8012c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c22:	460c      	mov	r4, r1
 8012c24:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c2a:	4299      	cmp	r1, r3
 8012c2c:	d11d      	bne.n	8012c6a <__submore+0x4c>
 8012c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012c32:	f7fc fd9d 	bl	800f770 <_malloc_r>
 8012c36:	b918      	cbnz	r0, 8012c40 <__submore+0x22>
 8012c38:	f04f 30ff 	mov.w	r0, #4294967295
 8012c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c44:	63a3      	str	r3, [r4, #56]	; 0x38
 8012c46:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012c4a:	6360      	str	r0, [r4, #52]	; 0x34
 8012c4c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8012c50:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012c54:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012c58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012c5c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8012c60:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8012c64:	6020      	str	r0, [r4, #0]
 8012c66:	2000      	movs	r0, #0
 8012c68:	e7e8      	b.n	8012c3c <__submore+0x1e>
 8012c6a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012c6c:	0077      	lsls	r7, r6, #1
 8012c6e:	463a      	mov	r2, r7
 8012c70:	f7fc fe12 	bl	800f898 <_realloc_r>
 8012c74:	4605      	mov	r5, r0
 8012c76:	2800      	cmp	r0, #0
 8012c78:	d0de      	beq.n	8012c38 <__submore+0x1a>
 8012c7a:	eb00 0806 	add.w	r8, r0, r6
 8012c7e:	4601      	mov	r1, r0
 8012c80:	4632      	mov	r2, r6
 8012c82:	4640      	mov	r0, r8
 8012c84:	f7fd ff07 	bl	8010a96 <memcpy>
 8012c88:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8012c8c:	f8c4 8000 	str.w	r8, [r4]
 8012c90:	e7e9      	b.n	8012c66 <__submore+0x48>

08012c92 <__swbuf_r>:
 8012c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c94:	460e      	mov	r6, r1
 8012c96:	4614      	mov	r4, r2
 8012c98:	4605      	mov	r5, r0
 8012c9a:	b118      	cbz	r0, 8012ca4 <__swbuf_r+0x12>
 8012c9c:	6a03      	ldr	r3, [r0, #32]
 8012c9e:	b90b      	cbnz	r3, 8012ca4 <__swbuf_r+0x12>
 8012ca0:	f7fd fcce 	bl	8010640 <__sinit>
 8012ca4:	69a3      	ldr	r3, [r4, #24]
 8012ca6:	60a3      	str	r3, [r4, #8]
 8012ca8:	89a3      	ldrh	r3, [r4, #12]
 8012caa:	071a      	lsls	r2, r3, #28
 8012cac:	d525      	bpl.n	8012cfa <__swbuf_r+0x68>
 8012cae:	6923      	ldr	r3, [r4, #16]
 8012cb0:	b31b      	cbz	r3, 8012cfa <__swbuf_r+0x68>
 8012cb2:	6823      	ldr	r3, [r4, #0]
 8012cb4:	6922      	ldr	r2, [r4, #16]
 8012cb6:	1a98      	subs	r0, r3, r2
 8012cb8:	6963      	ldr	r3, [r4, #20]
 8012cba:	b2f6      	uxtb	r6, r6
 8012cbc:	4283      	cmp	r3, r0
 8012cbe:	4637      	mov	r7, r6
 8012cc0:	dc04      	bgt.n	8012ccc <__swbuf_r+0x3a>
 8012cc2:	4621      	mov	r1, r4
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	f7ff ff49 	bl	8012b5c <_fflush_r>
 8012cca:	b9e0      	cbnz	r0, 8012d06 <__swbuf_r+0x74>
 8012ccc:	68a3      	ldr	r3, [r4, #8]
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	60a3      	str	r3, [r4, #8]
 8012cd2:	6823      	ldr	r3, [r4, #0]
 8012cd4:	1c5a      	adds	r2, r3, #1
 8012cd6:	6022      	str	r2, [r4, #0]
 8012cd8:	701e      	strb	r6, [r3, #0]
 8012cda:	6962      	ldr	r2, [r4, #20]
 8012cdc:	1c43      	adds	r3, r0, #1
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d004      	beq.n	8012cec <__swbuf_r+0x5a>
 8012ce2:	89a3      	ldrh	r3, [r4, #12]
 8012ce4:	07db      	lsls	r3, r3, #31
 8012ce6:	d506      	bpl.n	8012cf6 <__swbuf_r+0x64>
 8012ce8:	2e0a      	cmp	r6, #10
 8012cea:	d104      	bne.n	8012cf6 <__swbuf_r+0x64>
 8012cec:	4621      	mov	r1, r4
 8012cee:	4628      	mov	r0, r5
 8012cf0:	f7ff ff34 	bl	8012b5c <_fflush_r>
 8012cf4:	b938      	cbnz	r0, 8012d06 <__swbuf_r+0x74>
 8012cf6:	4638      	mov	r0, r7
 8012cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cfa:	4621      	mov	r1, r4
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	f000 f805 	bl	8012d0c <__swsetup_r>
 8012d02:	2800      	cmp	r0, #0
 8012d04:	d0d5      	beq.n	8012cb2 <__swbuf_r+0x20>
 8012d06:	f04f 37ff 	mov.w	r7, #4294967295
 8012d0a:	e7f4      	b.n	8012cf6 <__swbuf_r+0x64>

08012d0c <__swsetup_r>:
 8012d0c:	b538      	push	{r3, r4, r5, lr}
 8012d0e:	4b2a      	ldr	r3, [pc, #168]	; (8012db8 <__swsetup_r+0xac>)
 8012d10:	4605      	mov	r5, r0
 8012d12:	6818      	ldr	r0, [r3, #0]
 8012d14:	460c      	mov	r4, r1
 8012d16:	b118      	cbz	r0, 8012d20 <__swsetup_r+0x14>
 8012d18:	6a03      	ldr	r3, [r0, #32]
 8012d1a:	b90b      	cbnz	r3, 8012d20 <__swsetup_r+0x14>
 8012d1c:	f7fd fc90 	bl	8010640 <__sinit>
 8012d20:	89a3      	ldrh	r3, [r4, #12]
 8012d22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d26:	0718      	lsls	r0, r3, #28
 8012d28:	d422      	bmi.n	8012d70 <__swsetup_r+0x64>
 8012d2a:	06d9      	lsls	r1, r3, #27
 8012d2c:	d407      	bmi.n	8012d3e <__swsetup_r+0x32>
 8012d2e:	2309      	movs	r3, #9
 8012d30:	602b      	str	r3, [r5, #0]
 8012d32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d36:	81a3      	strh	r3, [r4, #12]
 8012d38:	f04f 30ff 	mov.w	r0, #4294967295
 8012d3c:	e034      	b.n	8012da8 <__swsetup_r+0x9c>
 8012d3e:	0758      	lsls	r0, r3, #29
 8012d40:	d512      	bpl.n	8012d68 <__swsetup_r+0x5c>
 8012d42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d44:	b141      	cbz	r1, 8012d58 <__swsetup_r+0x4c>
 8012d46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d4a:	4299      	cmp	r1, r3
 8012d4c:	d002      	beq.n	8012d54 <__swsetup_r+0x48>
 8012d4e:	4628      	mov	r0, r5
 8012d50:	f7fd feba 	bl	8010ac8 <_free_r>
 8012d54:	2300      	movs	r3, #0
 8012d56:	6363      	str	r3, [r4, #52]	; 0x34
 8012d58:	89a3      	ldrh	r3, [r4, #12]
 8012d5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012d5e:	81a3      	strh	r3, [r4, #12]
 8012d60:	2300      	movs	r3, #0
 8012d62:	6063      	str	r3, [r4, #4]
 8012d64:	6923      	ldr	r3, [r4, #16]
 8012d66:	6023      	str	r3, [r4, #0]
 8012d68:	89a3      	ldrh	r3, [r4, #12]
 8012d6a:	f043 0308 	orr.w	r3, r3, #8
 8012d6e:	81a3      	strh	r3, [r4, #12]
 8012d70:	6923      	ldr	r3, [r4, #16]
 8012d72:	b94b      	cbnz	r3, 8012d88 <__swsetup_r+0x7c>
 8012d74:	89a3      	ldrh	r3, [r4, #12]
 8012d76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d7e:	d003      	beq.n	8012d88 <__swsetup_r+0x7c>
 8012d80:	4621      	mov	r1, r4
 8012d82:	4628      	mov	r0, r5
 8012d84:	f000 f96c 	bl	8013060 <__smakebuf_r>
 8012d88:	89a0      	ldrh	r0, [r4, #12]
 8012d8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d8e:	f010 0301 	ands.w	r3, r0, #1
 8012d92:	d00a      	beq.n	8012daa <__swsetup_r+0x9e>
 8012d94:	2300      	movs	r3, #0
 8012d96:	60a3      	str	r3, [r4, #8]
 8012d98:	6963      	ldr	r3, [r4, #20]
 8012d9a:	425b      	negs	r3, r3
 8012d9c:	61a3      	str	r3, [r4, #24]
 8012d9e:	6923      	ldr	r3, [r4, #16]
 8012da0:	b943      	cbnz	r3, 8012db4 <__swsetup_r+0xa8>
 8012da2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012da6:	d1c4      	bne.n	8012d32 <__swsetup_r+0x26>
 8012da8:	bd38      	pop	{r3, r4, r5, pc}
 8012daa:	0781      	lsls	r1, r0, #30
 8012dac:	bf58      	it	pl
 8012dae:	6963      	ldrpl	r3, [r4, #20]
 8012db0:	60a3      	str	r3, [r4, #8]
 8012db2:	e7f4      	b.n	8012d9e <__swsetup_r+0x92>
 8012db4:	2000      	movs	r0, #0
 8012db6:	e7f7      	b.n	8012da8 <__swsetup_r+0x9c>
 8012db8:	20000228 	.word	0x20000228

08012dbc <__assert_func>:
 8012dbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012dbe:	4614      	mov	r4, r2
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	4b09      	ldr	r3, [pc, #36]	; (8012de8 <__assert_func+0x2c>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	4605      	mov	r5, r0
 8012dc8:	68d8      	ldr	r0, [r3, #12]
 8012dca:	b14c      	cbz	r4, 8012de0 <__assert_func+0x24>
 8012dcc:	4b07      	ldr	r3, [pc, #28]	; (8012dec <__assert_func+0x30>)
 8012dce:	9100      	str	r1, [sp, #0]
 8012dd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012dd4:	4906      	ldr	r1, [pc, #24]	; (8012df0 <__assert_func+0x34>)
 8012dd6:	462b      	mov	r3, r5
 8012dd8:	f7fd fc4a 	bl	8010670 <fiprintf>
 8012ddc:	f7fc fc90 	bl	800f700 <abort>
 8012de0:	4b04      	ldr	r3, [pc, #16]	; (8012df4 <__assert_func+0x38>)
 8012de2:	461c      	mov	r4, r3
 8012de4:	e7f3      	b.n	8012dce <__assert_func+0x12>
 8012de6:	bf00      	nop
 8012de8:	20000228 	.word	0x20000228
 8012dec:	08013d3a 	.word	0x08013d3a
 8012df0:	08013d47 	.word	0x08013d47
 8012df4:	08013d75 	.word	0x08013d75

08012df8 <_calloc_r>:
 8012df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012dfa:	fba1 2402 	umull	r2, r4, r1, r2
 8012dfe:	b94c      	cbnz	r4, 8012e14 <_calloc_r+0x1c>
 8012e00:	4611      	mov	r1, r2
 8012e02:	9201      	str	r2, [sp, #4]
 8012e04:	f7fc fcb4 	bl	800f770 <_malloc_r>
 8012e08:	9a01      	ldr	r2, [sp, #4]
 8012e0a:	4605      	mov	r5, r0
 8012e0c:	b930      	cbnz	r0, 8012e1c <_calloc_r+0x24>
 8012e0e:	4628      	mov	r0, r5
 8012e10:	b003      	add	sp, #12
 8012e12:	bd30      	pop	{r4, r5, pc}
 8012e14:	220c      	movs	r2, #12
 8012e16:	6002      	str	r2, [r0, #0]
 8012e18:	2500      	movs	r5, #0
 8012e1a:	e7f8      	b.n	8012e0e <_calloc_r+0x16>
 8012e1c:	4621      	mov	r1, r4
 8012e1e:	f7fd fd3b 	bl	8010898 <memset>
 8012e22:	e7f4      	b.n	8012e0e <_calloc_r+0x16>

08012e24 <_strtol_l.constprop.0>:
 8012e24:	2b01      	cmp	r3, #1
 8012e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e2a:	d001      	beq.n	8012e30 <_strtol_l.constprop.0+0xc>
 8012e2c:	2b24      	cmp	r3, #36	; 0x24
 8012e2e:	d906      	bls.n	8012e3e <_strtol_l.constprop.0+0x1a>
 8012e30:	f7fd fe04 	bl	8010a3c <__errno>
 8012e34:	2316      	movs	r3, #22
 8012e36:	6003      	str	r3, [r0, #0]
 8012e38:	2000      	movs	r0, #0
 8012e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012f24 <_strtol_l.constprop.0+0x100>
 8012e42:	460d      	mov	r5, r1
 8012e44:	462e      	mov	r6, r5
 8012e46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e4a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012e4e:	f017 0708 	ands.w	r7, r7, #8
 8012e52:	d1f7      	bne.n	8012e44 <_strtol_l.constprop.0+0x20>
 8012e54:	2c2d      	cmp	r4, #45	; 0x2d
 8012e56:	d132      	bne.n	8012ebe <_strtol_l.constprop.0+0x9a>
 8012e58:	782c      	ldrb	r4, [r5, #0]
 8012e5a:	2701      	movs	r7, #1
 8012e5c:	1cb5      	adds	r5, r6, #2
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d05b      	beq.n	8012f1a <_strtol_l.constprop.0+0xf6>
 8012e62:	2b10      	cmp	r3, #16
 8012e64:	d109      	bne.n	8012e7a <_strtol_l.constprop.0+0x56>
 8012e66:	2c30      	cmp	r4, #48	; 0x30
 8012e68:	d107      	bne.n	8012e7a <_strtol_l.constprop.0+0x56>
 8012e6a:	782c      	ldrb	r4, [r5, #0]
 8012e6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012e70:	2c58      	cmp	r4, #88	; 0x58
 8012e72:	d14d      	bne.n	8012f10 <_strtol_l.constprop.0+0xec>
 8012e74:	786c      	ldrb	r4, [r5, #1]
 8012e76:	2310      	movs	r3, #16
 8012e78:	3502      	adds	r5, #2
 8012e7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012e7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012e82:	f04f 0e00 	mov.w	lr, #0
 8012e86:	fbb8 f9f3 	udiv	r9, r8, r3
 8012e8a:	4676      	mov	r6, lr
 8012e8c:	fb03 8a19 	mls	sl, r3, r9, r8
 8012e90:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012e94:	f1bc 0f09 	cmp.w	ip, #9
 8012e98:	d816      	bhi.n	8012ec8 <_strtol_l.constprop.0+0xa4>
 8012e9a:	4664      	mov	r4, ip
 8012e9c:	42a3      	cmp	r3, r4
 8012e9e:	dd24      	ble.n	8012eea <_strtol_l.constprop.0+0xc6>
 8012ea0:	f1be 3fff 	cmp.w	lr, #4294967295
 8012ea4:	d008      	beq.n	8012eb8 <_strtol_l.constprop.0+0x94>
 8012ea6:	45b1      	cmp	r9, r6
 8012ea8:	d31c      	bcc.n	8012ee4 <_strtol_l.constprop.0+0xc0>
 8012eaa:	d101      	bne.n	8012eb0 <_strtol_l.constprop.0+0x8c>
 8012eac:	45a2      	cmp	sl, r4
 8012eae:	db19      	blt.n	8012ee4 <_strtol_l.constprop.0+0xc0>
 8012eb0:	fb06 4603 	mla	r6, r6, r3, r4
 8012eb4:	f04f 0e01 	mov.w	lr, #1
 8012eb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ebc:	e7e8      	b.n	8012e90 <_strtol_l.constprop.0+0x6c>
 8012ebe:	2c2b      	cmp	r4, #43	; 0x2b
 8012ec0:	bf04      	itt	eq
 8012ec2:	782c      	ldrbeq	r4, [r5, #0]
 8012ec4:	1cb5      	addeq	r5, r6, #2
 8012ec6:	e7ca      	b.n	8012e5e <_strtol_l.constprop.0+0x3a>
 8012ec8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012ecc:	f1bc 0f19 	cmp.w	ip, #25
 8012ed0:	d801      	bhi.n	8012ed6 <_strtol_l.constprop.0+0xb2>
 8012ed2:	3c37      	subs	r4, #55	; 0x37
 8012ed4:	e7e2      	b.n	8012e9c <_strtol_l.constprop.0+0x78>
 8012ed6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012eda:	f1bc 0f19 	cmp.w	ip, #25
 8012ede:	d804      	bhi.n	8012eea <_strtol_l.constprop.0+0xc6>
 8012ee0:	3c57      	subs	r4, #87	; 0x57
 8012ee2:	e7db      	b.n	8012e9c <_strtol_l.constprop.0+0x78>
 8012ee4:	f04f 3eff 	mov.w	lr, #4294967295
 8012ee8:	e7e6      	b.n	8012eb8 <_strtol_l.constprop.0+0x94>
 8012eea:	f1be 3fff 	cmp.w	lr, #4294967295
 8012eee:	d105      	bne.n	8012efc <_strtol_l.constprop.0+0xd8>
 8012ef0:	2322      	movs	r3, #34	; 0x22
 8012ef2:	6003      	str	r3, [r0, #0]
 8012ef4:	4646      	mov	r6, r8
 8012ef6:	b942      	cbnz	r2, 8012f0a <_strtol_l.constprop.0+0xe6>
 8012ef8:	4630      	mov	r0, r6
 8012efa:	e79e      	b.n	8012e3a <_strtol_l.constprop.0+0x16>
 8012efc:	b107      	cbz	r7, 8012f00 <_strtol_l.constprop.0+0xdc>
 8012efe:	4276      	negs	r6, r6
 8012f00:	2a00      	cmp	r2, #0
 8012f02:	d0f9      	beq.n	8012ef8 <_strtol_l.constprop.0+0xd4>
 8012f04:	f1be 0f00 	cmp.w	lr, #0
 8012f08:	d000      	beq.n	8012f0c <_strtol_l.constprop.0+0xe8>
 8012f0a:	1e69      	subs	r1, r5, #1
 8012f0c:	6011      	str	r1, [r2, #0]
 8012f0e:	e7f3      	b.n	8012ef8 <_strtol_l.constprop.0+0xd4>
 8012f10:	2430      	movs	r4, #48	; 0x30
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d1b1      	bne.n	8012e7a <_strtol_l.constprop.0+0x56>
 8012f16:	2308      	movs	r3, #8
 8012f18:	e7af      	b.n	8012e7a <_strtol_l.constprop.0+0x56>
 8012f1a:	2c30      	cmp	r4, #48	; 0x30
 8012f1c:	d0a5      	beq.n	8012e6a <_strtol_l.constprop.0+0x46>
 8012f1e:	230a      	movs	r3, #10
 8012f20:	e7ab      	b.n	8012e7a <_strtol_l.constprop.0+0x56>
 8012f22:	bf00      	nop
 8012f24:	08013a01 	.word	0x08013a01

08012f28 <_strtol_r>:
 8012f28:	f7ff bf7c 	b.w	8012e24 <_strtol_l.constprop.0>

08012f2c <_strtoul_l.constprop.0>:
 8012f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f30:	4f36      	ldr	r7, [pc, #216]	; (801300c <_strtoul_l.constprop.0+0xe0>)
 8012f32:	4686      	mov	lr, r0
 8012f34:	460d      	mov	r5, r1
 8012f36:	4628      	mov	r0, r5
 8012f38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f3c:	5d3e      	ldrb	r6, [r7, r4]
 8012f3e:	f016 0608 	ands.w	r6, r6, #8
 8012f42:	d1f8      	bne.n	8012f36 <_strtoul_l.constprop.0+0xa>
 8012f44:	2c2d      	cmp	r4, #45	; 0x2d
 8012f46:	d130      	bne.n	8012faa <_strtoul_l.constprop.0+0x7e>
 8012f48:	782c      	ldrb	r4, [r5, #0]
 8012f4a:	2601      	movs	r6, #1
 8012f4c:	1c85      	adds	r5, r0, #2
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d057      	beq.n	8013002 <_strtoul_l.constprop.0+0xd6>
 8012f52:	2b10      	cmp	r3, #16
 8012f54:	d109      	bne.n	8012f6a <_strtoul_l.constprop.0+0x3e>
 8012f56:	2c30      	cmp	r4, #48	; 0x30
 8012f58:	d107      	bne.n	8012f6a <_strtoul_l.constprop.0+0x3e>
 8012f5a:	7828      	ldrb	r0, [r5, #0]
 8012f5c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012f60:	2858      	cmp	r0, #88	; 0x58
 8012f62:	d149      	bne.n	8012ff8 <_strtoul_l.constprop.0+0xcc>
 8012f64:	786c      	ldrb	r4, [r5, #1]
 8012f66:	2310      	movs	r3, #16
 8012f68:	3502      	adds	r5, #2
 8012f6a:	f04f 38ff 	mov.w	r8, #4294967295
 8012f6e:	2700      	movs	r7, #0
 8012f70:	fbb8 f8f3 	udiv	r8, r8, r3
 8012f74:	fb03 f908 	mul.w	r9, r3, r8
 8012f78:	ea6f 0909 	mvn.w	r9, r9
 8012f7c:	4638      	mov	r0, r7
 8012f7e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012f82:	f1bc 0f09 	cmp.w	ip, #9
 8012f86:	d815      	bhi.n	8012fb4 <_strtoul_l.constprop.0+0x88>
 8012f88:	4664      	mov	r4, ip
 8012f8a:	42a3      	cmp	r3, r4
 8012f8c:	dd23      	ble.n	8012fd6 <_strtoul_l.constprop.0+0xaa>
 8012f8e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8012f92:	d007      	beq.n	8012fa4 <_strtoul_l.constprop.0+0x78>
 8012f94:	4580      	cmp	r8, r0
 8012f96:	d31b      	bcc.n	8012fd0 <_strtoul_l.constprop.0+0xa4>
 8012f98:	d101      	bne.n	8012f9e <_strtoul_l.constprop.0+0x72>
 8012f9a:	45a1      	cmp	r9, r4
 8012f9c:	db18      	blt.n	8012fd0 <_strtoul_l.constprop.0+0xa4>
 8012f9e:	fb00 4003 	mla	r0, r0, r3, r4
 8012fa2:	2701      	movs	r7, #1
 8012fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012fa8:	e7e9      	b.n	8012f7e <_strtoul_l.constprop.0+0x52>
 8012faa:	2c2b      	cmp	r4, #43	; 0x2b
 8012fac:	bf04      	itt	eq
 8012fae:	782c      	ldrbeq	r4, [r5, #0]
 8012fb0:	1c85      	addeq	r5, r0, #2
 8012fb2:	e7cc      	b.n	8012f4e <_strtoul_l.constprop.0+0x22>
 8012fb4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012fb8:	f1bc 0f19 	cmp.w	ip, #25
 8012fbc:	d801      	bhi.n	8012fc2 <_strtoul_l.constprop.0+0x96>
 8012fbe:	3c37      	subs	r4, #55	; 0x37
 8012fc0:	e7e3      	b.n	8012f8a <_strtoul_l.constprop.0+0x5e>
 8012fc2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012fc6:	f1bc 0f19 	cmp.w	ip, #25
 8012fca:	d804      	bhi.n	8012fd6 <_strtoul_l.constprop.0+0xaa>
 8012fcc:	3c57      	subs	r4, #87	; 0x57
 8012fce:	e7dc      	b.n	8012f8a <_strtoul_l.constprop.0+0x5e>
 8012fd0:	f04f 37ff 	mov.w	r7, #4294967295
 8012fd4:	e7e6      	b.n	8012fa4 <_strtoul_l.constprop.0+0x78>
 8012fd6:	1c7b      	adds	r3, r7, #1
 8012fd8:	d106      	bne.n	8012fe8 <_strtoul_l.constprop.0+0xbc>
 8012fda:	2322      	movs	r3, #34	; 0x22
 8012fdc:	f8ce 3000 	str.w	r3, [lr]
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	b932      	cbnz	r2, 8012ff2 <_strtoul_l.constprop.0+0xc6>
 8012fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fe8:	b106      	cbz	r6, 8012fec <_strtoul_l.constprop.0+0xc0>
 8012fea:	4240      	negs	r0, r0
 8012fec:	2a00      	cmp	r2, #0
 8012fee:	d0f9      	beq.n	8012fe4 <_strtoul_l.constprop.0+0xb8>
 8012ff0:	b107      	cbz	r7, 8012ff4 <_strtoul_l.constprop.0+0xc8>
 8012ff2:	1e69      	subs	r1, r5, #1
 8012ff4:	6011      	str	r1, [r2, #0]
 8012ff6:	e7f5      	b.n	8012fe4 <_strtoul_l.constprop.0+0xb8>
 8012ff8:	2430      	movs	r4, #48	; 0x30
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d1b5      	bne.n	8012f6a <_strtoul_l.constprop.0+0x3e>
 8012ffe:	2308      	movs	r3, #8
 8013000:	e7b3      	b.n	8012f6a <_strtoul_l.constprop.0+0x3e>
 8013002:	2c30      	cmp	r4, #48	; 0x30
 8013004:	d0a9      	beq.n	8012f5a <_strtoul_l.constprop.0+0x2e>
 8013006:	230a      	movs	r3, #10
 8013008:	e7af      	b.n	8012f6a <_strtoul_l.constprop.0+0x3e>
 801300a:	bf00      	nop
 801300c:	08013a01 	.word	0x08013a01

08013010 <_strtoul_r>:
 8013010:	f7ff bf8c 	b.w	8012f2c <_strtoul_l.constprop.0>

08013014 <__swhatbuf_r>:
 8013014:	b570      	push	{r4, r5, r6, lr}
 8013016:	460c      	mov	r4, r1
 8013018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801301c:	2900      	cmp	r1, #0
 801301e:	b096      	sub	sp, #88	; 0x58
 8013020:	4615      	mov	r5, r2
 8013022:	461e      	mov	r6, r3
 8013024:	da0d      	bge.n	8013042 <__swhatbuf_r+0x2e>
 8013026:	89a3      	ldrh	r3, [r4, #12]
 8013028:	f013 0f80 	tst.w	r3, #128	; 0x80
 801302c:	f04f 0100 	mov.w	r1, #0
 8013030:	bf0c      	ite	eq
 8013032:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013036:	2340      	movne	r3, #64	; 0x40
 8013038:	2000      	movs	r0, #0
 801303a:	6031      	str	r1, [r6, #0]
 801303c:	602b      	str	r3, [r5, #0]
 801303e:	b016      	add	sp, #88	; 0x58
 8013040:	bd70      	pop	{r4, r5, r6, pc}
 8013042:	466a      	mov	r2, sp
 8013044:	f000 f848 	bl	80130d8 <_fstat_r>
 8013048:	2800      	cmp	r0, #0
 801304a:	dbec      	blt.n	8013026 <__swhatbuf_r+0x12>
 801304c:	9901      	ldr	r1, [sp, #4]
 801304e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013052:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013056:	4259      	negs	r1, r3
 8013058:	4159      	adcs	r1, r3
 801305a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801305e:	e7eb      	b.n	8013038 <__swhatbuf_r+0x24>

08013060 <__smakebuf_r>:
 8013060:	898b      	ldrh	r3, [r1, #12]
 8013062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013064:	079d      	lsls	r5, r3, #30
 8013066:	4606      	mov	r6, r0
 8013068:	460c      	mov	r4, r1
 801306a:	d507      	bpl.n	801307c <__smakebuf_r+0x1c>
 801306c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013070:	6023      	str	r3, [r4, #0]
 8013072:	6123      	str	r3, [r4, #16]
 8013074:	2301      	movs	r3, #1
 8013076:	6163      	str	r3, [r4, #20]
 8013078:	b002      	add	sp, #8
 801307a:	bd70      	pop	{r4, r5, r6, pc}
 801307c:	ab01      	add	r3, sp, #4
 801307e:	466a      	mov	r2, sp
 8013080:	f7ff ffc8 	bl	8013014 <__swhatbuf_r>
 8013084:	9900      	ldr	r1, [sp, #0]
 8013086:	4605      	mov	r5, r0
 8013088:	4630      	mov	r0, r6
 801308a:	f7fc fb71 	bl	800f770 <_malloc_r>
 801308e:	b948      	cbnz	r0, 80130a4 <__smakebuf_r+0x44>
 8013090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013094:	059a      	lsls	r2, r3, #22
 8013096:	d4ef      	bmi.n	8013078 <__smakebuf_r+0x18>
 8013098:	f023 0303 	bic.w	r3, r3, #3
 801309c:	f043 0302 	orr.w	r3, r3, #2
 80130a0:	81a3      	strh	r3, [r4, #12]
 80130a2:	e7e3      	b.n	801306c <__smakebuf_r+0xc>
 80130a4:	89a3      	ldrh	r3, [r4, #12]
 80130a6:	6020      	str	r0, [r4, #0]
 80130a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130ac:	81a3      	strh	r3, [r4, #12]
 80130ae:	9b00      	ldr	r3, [sp, #0]
 80130b0:	6163      	str	r3, [r4, #20]
 80130b2:	9b01      	ldr	r3, [sp, #4]
 80130b4:	6120      	str	r0, [r4, #16]
 80130b6:	b15b      	cbz	r3, 80130d0 <__smakebuf_r+0x70>
 80130b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130bc:	4630      	mov	r0, r6
 80130be:	f000 f81d 	bl	80130fc <_isatty_r>
 80130c2:	b128      	cbz	r0, 80130d0 <__smakebuf_r+0x70>
 80130c4:	89a3      	ldrh	r3, [r4, #12]
 80130c6:	f023 0303 	bic.w	r3, r3, #3
 80130ca:	f043 0301 	orr.w	r3, r3, #1
 80130ce:	81a3      	strh	r3, [r4, #12]
 80130d0:	89a3      	ldrh	r3, [r4, #12]
 80130d2:	431d      	orrs	r5, r3
 80130d4:	81a5      	strh	r5, [r4, #12]
 80130d6:	e7cf      	b.n	8013078 <__smakebuf_r+0x18>

080130d8 <_fstat_r>:
 80130d8:	b538      	push	{r3, r4, r5, lr}
 80130da:	4d07      	ldr	r5, [pc, #28]	; (80130f8 <_fstat_r+0x20>)
 80130dc:	2300      	movs	r3, #0
 80130de:	4604      	mov	r4, r0
 80130e0:	4608      	mov	r0, r1
 80130e2:	4611      	mov	r1, r2
 80130e4:	602b      	str	r3, [r5, #0]
 80130e6:	f7f8 fc16 	bl	800b916 <_fstat>
 80130ea:	1c43      	adds	r3, r0, #1
 80130ec:	d102      	bne.n	80130f4 <_fstat_r+0x1c>
 80130ee:	682b      	ldr	r3, [r5, #0]
 80130f0:	b103      	cbz	r3, 80130f4 <_fstat_r+0x1c>
 80130f2:	6023      	str	r3, [r4, #0]
 80130f4:	bd38      	pop	{r3, r4, r5, pc}
 80130f6:	bf00      	nop
 80130f8:	20003428 	.word	0x20003428

080130fc <_isatty_r>:
 80130fc:	b538      	push	{r3, r4, r5, lr}
 80130fe:	4d06      	ldr	r5, [pc, #24]	; (8013118 <_isatty_r+0x1c>)
 8013100:	2300      	movs	r3, #0
 8013102:	4604      	mov	r4, r0
 8013104:	4608      	mov	r0, r1
 8013106:	602b      	str	r3, [r5, #0]
 8013108:	f7f8 fc15 	bl	800b936 <_isatty>
 801310c:	1c43      	adds	r3, r0, #1
 801310e:	d102      	bne.n	8013116 <_isatty_r+0x1a>
 8013110:	682b      	ldr	r3, [r5, #0]
 8013112:	b103      	cbz	r3, 8013116 <_isatty_r+0x1a>
 8013114:	6023      	str	r3, [r4, #0]
 8013116:	bd38      	pop	{r3, r4, r5, pc}
 8013118:	20003428 	.word	0x20003428

0801311c <_init>:
 801311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801311e:	bf00      	nop
 8013120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013122:	bc08      	pop	{r3}
 8013124:	469e      	mov	lr, r3
 8013126:	4770      	bx	lr

08013128 <_fini>:
 8013128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801312a:	bf00      	nop
 801312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801312e:	bc08      	pop	{r3}
 8013130:	469e      	mov	lr, r3
 8013132:	4770      	bx	lr

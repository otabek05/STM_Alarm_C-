
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d38  08013b78  08013b78  00023b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080148b0  080148b0  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  080148b0  080148b0  000248b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080148b8  080148b8  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080148b8  080148b8  000248b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080148c0  080148c0  000248c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  080148c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003022c  2**0
                  CONTENTS
 10 .bss          0000321c  2000022c  2000022c  0003022c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003448  20003448  0003022c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004df4f  00000000  00000000  0003029f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007484  00000000  00000000  0007e1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a60  00000000  00000000  00085678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014b7  00000000  00000000  000870d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b282  00000000  00000000  0008858f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023d51  00000000  00000000  000b3811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed111  00000000  00000000  000d7562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009874  00000000  00000000  001c4674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001cdee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000022c 	.word	0x2000022c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013b5c 	.word	0x08013b5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000230 	.word	0x20000230
 80001cc:	08013b5c 	.word	0x08013b5c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a6 	b.w	8000f6c <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9e08      	ldr	r6, [sp, #32]
 8000caa:	460d      	mov	r5, r1
 8000cac:	4604      	mov	r4, r0
 8000cae:	460f      	mov	r7, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14a      	bne.n	8000d4a <__udivmoddi4+0xa6>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4694      	mov	ip, r2
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0xe2>
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	b143      	cbz	r3, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	f1c3 0220 	rsb	r2, r3, #32
 8000cc8:	409f      	lsls	r7, r3
 8000cca:	fa20 f202 	lsr.w	r2, r0, r2
 8000cce:	4317      	orrs	r7, r2
 8000cd0:	409c      	lsls	r4, r3
 8000cd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd6:	fa1f f58c 	uxth.w	r5, ip
 8000cda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cde:	0c22      	lsrs	r2, r4, #16
 8000ce0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce8:	fb01 f005 	mul.w	r0, r1, r5
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d90a      	bls.n	8000d06 <__udivmoddi4+0x62>
 8000cf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf8:	f080 811c 	bcs.w	8000f34 <__udivmoddi4+0x290>
 8000cfc:	4290      	cmp	r0, r2
 8000cfe:	f240 8119 	bls.w	8000f34 <__udivmoddi4+0x290>
 8000d02:	3902      	subs	r1, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	b2a4      	uxth	r4, r4
 8000d0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d16:	fb00 f505 	mul.w	r5, r0, r5
 8000d1a:	42a5      	cmp	r5, r4
 8000d1c:	d90a      	bls.n	8000d34 <__udivmoddi4+0x90>
 8000d1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x294>
 8000d2a:	42a5      	cmp	r5, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x294>
 8000d30:	4464      	add	r4, ip
 8000d32:	3802      	subs	r0, #2
 8000d34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d38:	1b64      	subs	r4, r4, r5
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	b11e      	cbz	r6, 8000d46 <__udivmoddi4+0xa2>
 8000d3e:	40dc      	lsrs	r4, r3
 8000d40:	2300      	movs	r3, #0
 8000d42:	e9c6 4300 	strd	r4, r3, [r6]
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0xbc>
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f000 80ed 	beq.w	8000f2e <__udivmoddi4+0x28a>
 8000d54:	2100      	movs	r1, #0
 8000d56:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	fab3 f183 	clz	r1, r3
 8000d64:	2900      	cmp	r1, #0
 8000d66:	d149      	bne.n	8000dfc <__udivmoddi4+0x158>
 8000d68:	42ab      	cmp	r3, r5
 8000d6a:	d302      	bcc.n	8000d72 <__udivmoddi4+0xce>
 8000d6c:	4282      	cmp	r2, r0
 8000d6e:	f200 80f8 	bhi.w	8000f62 <__udivmoddi4+0x2be>
 8000d72:	1a84      	subs	r4, r0, r2
 8000d74:	eb65 0203 	sbc.w	r2, r5, r3
 8000d78:	2001      	movs	r0, #1
 8000d7a:	4617      	mov	r7, r2
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d0e2      	beq.n	8000d46 <__udivmoddi4+0xa2>
 8000d80:	e9c6 4700 	strd	r4, r7, [r6]
 8000d84:	e7df      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000d86:	b902      	cbnz	r2, 8000d8a <__udivmoddi4+0xe6>
 8000d88:	deff      	udf	#255	; 0xff
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8090 	bne.w	8000eb4 <__udivmoddi4+0x210>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fa1f fe8c 	uxth.w	lr, ip
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da4:	fb07 2015 	mls	r0, r7, r5, r2
 8000da8:	0c22      	lsrs	r2, r4, #16
 8000daa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dae:	fb0e f005 	mul.w	r0, lr, r5
 8000db2:	4290      	cmp	r0, r2
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x124>
 8000db6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x122>
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	f200 80cb 	bhi.w	8000f5c <__udivmoddi4+0x2b8>
 8000dc6:	4645      	mov	r5, r8
 8000dc8:	1a12      	subs	r2, r2, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x14e>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x14c>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	f200 80bb 	bhi.w	8000f66 <__udivmoddi4+0x2c2>
 8000df0:	4610      	mov	r0, r2
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfa:	e79f      	b.n	8000d3c <__udivmoddi4+0x98>
 8000dfc:	f1c1 0720 	rsb	r7, r1, #32
 8000e00:	408b      	lsls	r3, r1
 8000e02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e12:	40fd      	lsrs	r5, r7
 8000e14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e18:	4323      	orrs	r3, r4
 8000e1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	fb09 5518 	mls	r5, r9, r8, r5
 8000e26:	0c1c      	lsrs	r4, r3, #16
 8000e28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3a:	d90b      	bls.n	8000e54 <__udivmoddi4+0x1b0>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e44:	f080 8088 	bcs.w	8000f58 <__udivmoddi4+0x2b4>
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	f240 8085 	bls.w	8000f58 <__udivmoddi4+0x2b4>
 8000e4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e52:	4464      	add	r4, ip
 8000e54:	1b64      	subs	r4, r4, r5
 8000e56:	b29d      	uxth	r5, r3
 8000e58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x1da>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e74:	d26c      	bcs.n	8000f50 <__udivmoddi4+0x2ac>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	d96a      	bls.n	8000f50 <__udivmoddi4+0x2ac>
 8000e7a:	3b02      	subs	r3, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e82:	fba3 9502 	umull	r9, r5, r3, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	42ac      	cmp	r4, r5
 8000e8c:	46c8      	mov	r8, r9
 8000e8e:	46ae      	mov	lr, r5
 8000e90:	d356      	bcc.n	8000f40 <__udivmoddi4+0x29c>
 8000e92:	d053      	beq.n	8000f3c <__udivmoddi4+0x298>
 8000e94:	b156      	cbz	r6, 8000eac <__udivmoddi4+0x208>
 8000e96:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	40ca      	lsrs	r2, r1
 8000ea4:	40cc      	lsrs	r4, r1
 8000ea6:	4317      	orrs	r7, r2
 8000ea8:	e9c6 7400 	strd	r7, r4, [r6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb4:	f1c3 0120 	rsb	r1, r3, #32
 8000eb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ebc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec4:	409d      	lsls	r5, r3
 8000ec6:	432a      	orrs	r2, r5
 8000ec8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ed8:	0c11      	lsrs	r1, r2, #16
 8000eda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ede:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee2:	428d      	cmp	r5, r1
 8000ee4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ee8:	d908      	bls.n	8000efc <__udivmoddi4+0x258>
 8000eea:	eb1c 0101 	adds.w	r1, ip, r1
 8000eee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef2:	d22f      	bcs.n	8000f54 <__udivmoddi4+0x2b0>
 8000ef4:	428d      	cmp	r5, r1
 8000ef6:	d92d      	bls.n	8000f54 <__udivmoddi4+0x2b0>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1b49      	subs	r1, r1, r5
 8000efe:	b292      	uxth	r2, r2
 8000f00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f04:	fb07 1115 	mls	r1, r7, r5, r1
 8000f08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f10:	4291      	cmp	r1, r2
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x282>
 8000f14:	eb1c 0202 	adds.w	r2, ip, r2
 8000f18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1c:	d216      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000f1e:	4291      	cmp	r1, r2
 8000f20:	d914      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000f22:	3d02      	subs	r5, #2
 8000f24:	4462      	add	r2, ip
 8000f26:	1a52      	subs	r2, r2, r1
 8000f28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f2c:	e738      	b.n	8000da0 <__udivmoddi4+0xfc>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e708      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000f34:	4639      	mov	r1, r7
 8000f36:	e6e6      	b.n	8000d06 <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x90>
 8000f3c:	4548      	cmp	r0, r9
 8000f3e:	d2a9      	bcs.n	8000e94 <__udivmoddi4+0x1f0>
 8000f40:	ebb9 0802 	subs.w	r8, r9, r2
 8000f44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	e7a3      	b.n	8000e94 <__udivmoddi4+0x1f0>
 8000f4c:	4645      	mov	r5, r8
 8000f4e:	e7ea      	b.n	8000f26 <__udivmoddi4+0x282>
 8000f50:	462b      	mov	r3, r5
 8000f52:	e794      	b.n	8000e7e <__udivmoddi4+0x1da>
 8000f54:	4640      	mov	r0, r8
 8000f56:	e7d1      	b.n	8000efc <__udivmoddi4+0x258>
 8000f58:	46d0      	mov	r8, sl
 8000f5a:	e77b      	b.n	8000e54 <__udivmoddi4+0x1b0>
 8000f5c:	3d02      	subs	r5, #2
 8000f5e:	4462      	add	r2, ip
 8000f60:	e732      	b.n	8000dc8 <__udivmoddi4+0x124>
 8000f62:	4608      	mov	r0, r1
 8000f64:	e70a      	b.n	8000d7c <__udivmoddi4+0xd8>
 8000f66:	4464      	add	r4, ip
 8000f68:	3802      	subs	r0, #2
 8000f6a:	e742      	b.n	8000df2 <__udivmoddi4+0x14e>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8000f74:	2204      	movs	r2, #4
 8000f76:	4909      	ldr	r1, [pc, #36]	; (8000f9c <default_ip_assign+0x2c>)
 8000f78:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000f7c:	f001 fc72 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8000f80:	2204      	movs	r2, #4
 8000f82:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <default_ip_assign+0x30>)
 8000f84:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000f88:	f001 fc6c 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	4905      	ldr	r1, [pc, #20]	; (8000fa4 <default_ip_assign+0x34>)
 8000f90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f94:	f001 fc66 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000254 	.word	0x20000254
 8000fa0:	2000025c 	.word	0x2000025c
 8000fa4:	20000258 	.word	0x20000258

08000fa8 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f001 fbaa 	bl	8002708 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f001 fb5b 	bl	8002670 <WIZCHIP_READ>
   default_ip_assign();
 8000fba:	f7ff ffd9 	bl	8000f70 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8000fbe:	2206      	movs	r2, #6
 8000fc0:	4903      	ldr	r1, [pc, #12]	; (8000fd0 <default_ip_update+0x28>)
 8000fc2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000fc6:	f001 fc4d 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000274 	.word	0x20000274

08000fd4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f001 fb94 	bl	8002708 <WIZCHIP_WRITE>
	getMR(); // for delay
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f001 fb45 	bl	8002670 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8000fe6:	2206      	movs	r2, #6
 8000fe8:	4903      	ldr	r1, [pc, #12]	; (8000ff8 <default_ip_conflict+0x24>)
 8000fea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000fee:	f001 fc39 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000274 	.word	0x20000274

08000ffc <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <reg_dhcp_cbfunc+0x50>)
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <reg_dhcp_cbfunc+0x54>)
 800100c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <reg_dhcp_cbfunc+0x58>)
 8001010:	4a11      	ldr	r2, [pc, #68]	; (8001058 <reg_dhcp_cbfunc+0x5c>)
 8001012:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <reg_dhcp_cbfunc+0x60>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <reg_dhcp_cbfunc+0x64>)
 8001018:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <reg_dhcp_cbfunc+0x2a>
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <reg_dhcp_cbfunc+0x50>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <reg_dhcp_cbfunc+0x36>
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <reg_dhcp_cbfunc+0x58>)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <reg_dhcp_cbfunc+0x42>
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <reg_dhcp_cbfunc+0x60>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000010 	.word	0x20000010
 8001050:	08000f71 	.word	0x08000f71
 8001054:	20000014 	.word	0x20000014
 8001058:	08000fa9 	.word	0x08000fa9
 800105c:	20000018 	.word	0x20000018
 8001060:	08000fd5 	.word	0x08000fd5

08001064 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800106a:	463b      	mov	r3, r7
 800106c:	2206      	movs	r2, #6
 800106e:	4619      	mov	r1, r3
 8001070:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001074:	f001 fb96 	bl	80027a4 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001078:	4b72      	ldr	r3, [pc, #456]	; (8001244 <makeDHCPMSG+0x1e0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001080:	4b70      	ldr	r3, [pc, #448]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001088:	4b6e      	ldr	r3, [pc, #440]	; (8001244 <makeDHCPMSG+0x1e0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2206      	movs	r2, #6
 800108e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001098:	4b6a      	ldr	r3, [pc, #424]	; (8001244 <makeDHCPMSG+0x1e0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3304      	adds	r3, #4
 800109e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80010a0:	4b69      	ldr	r3, [pc, #420]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0e1b      	lsrs	r3, r3, #24
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0c1a      	lsrs	r2, r3, #16
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0a1a      	lsrs	r2, r3, #8
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3302      	adds	r3, #2
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80010c8:	4b5f      	ldr	r3, [pc, #380]	; (8001248 <makeDHCPMSG+0x1e4>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3303      	adds	r3, #3
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80010d4:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80010dc:	4b59      	ldr	r3, [pc, #356]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	330a      	adds	r3, #10
 80010e2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3301      	adds	r3, #1
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80010f2:	4b54      	ldr	r3, [pc, #336]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80010fa:	4b52      	ldr	r3, [pc, #328]	; (8001244 <makeDHCPMSG+0x1e0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001102:	4b50      	ldr	r3, [pc, #320]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2200      	movs	r2, #0
 8001108:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800110a:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <makeDHCPMSG+0x1e0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001112:	4b4c      	ldr	r3, [pc, #304]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800111a:	4b4a      	ldr	r3, [pc, #296]	; (8001244 <makeDHCPMSG+0x1e0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800112a:	4b46      	ldr	r3, [pc, #280]	; (8001244 <makeDHCPMSG+0x1e0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8001132:	4b44      	ldr	r3, [pc, #272]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800113a:	4b42      	ldr	r3, [pc, #264]	; (8001244 <makeDHCPMSG+0x1e0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8001142:	4b40      	ldr	r3, [pc, #256]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800114a:	4b3e      	ldr	r3, [pc, #248]	; (8001244 <makeDHCPMSG+0x1e0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8001152:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <makeDHCPMSG+0x1e0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <makeDHCPMSG+0x1e0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a35      	ldr	r2, [pc, #212]	; (800124c <makeDHCPMSG+0x1e8>)
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <makeDHCPMSG+0x1e0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a32      	ldr	r2, [pc, #200]	; (800124c <makeDHCPMSG+0x1e8>)
 8001182:	7852      	ldrb	r2, [r2, #1]
 8001184:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a30      	ldr	r2, [pc, #192]	; (800124c <makeDHCPMSG+0x1e8>)
 800118c:	7892      	ldrb	r2, [r2, #2]
 800118e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a2d      	ldr	r2, [pc, #180]	; (800124c <makeDHCPMSG+0x1e8>)
 8001196:	78d2      	ldrb	r2, [r2, #3]
 8001198:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <makeDHCPMSG+0x1e0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a2b      	ldr	r2, [pc, #172]	; (800124c <makeDHCPMSG+0x1e8>)
 80011a0:	7912      	ldrb	r2, [r2, #4]
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <makeDHCPMSG+0x1e8>)
 80011ac:	7952      	ldrb	r2, [r2, #5]
 80011ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80011b2:	2306      	movs	r3, #6
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e008      	b.n	80011ca <makeDHCPMSG+0x166>
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4413      	add	r3, r2
 80011c0:	2200      	movs	r2, #0
 80011c2:	771a      	strb	r2, [r3, #28]
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	3301      	adds	r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d9f3      	bls.n	80011b8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e009      	b.n	80011ea <makeDHCPMSG+0x186>
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	4413      	add	r3, r2
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	3301      	adds	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b3f      	cmp	r3, #63	; 0x3f
 80011ee:	d9f2      	bls.n	80011d6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e009      	b.n	800120a <makeDHCPMSG+0x1a6>
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <makeDHCPMSG+0x1e0>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	4413      	add	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	3301      	adds	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	daf1      	bge.n	80011f6 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2263      	movs	r2, #99	; 0x63
 8001218:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <makeDHCPMSG+0x1e0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2282      	movs	r2, #130	; 0x82
 8001222:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2253      	movs	r2, #83	; 0x53
 800122c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <makeDHCPMSG+0x1e0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2263      	movs	r2, #99	; 0x63
 8001236:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000270 	.word	0x20000270
 8001248:	2000026c 	.word	0x2000026c
 800124c:	20000274 	.word	0x20000274

08001250 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800125a:	f7ff ff03 	bl	8001064 <makeDHCPMSG>

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800125e:	2304      	movs	r3, #4
 8001260:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001262:	4ba9      	ldr	r3, [pc, #676]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	1c59      	adds	r1, r3, #1
 800126a:	80b9      	strh	r1, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	2235      	movs	r2, #53	; 0x35
 8001270:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001274:	4ba4      	ldr	r3, [pc, #656]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	80b9      	strh	r1, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	2201      	movs	r2, #1
 8001282:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8001286:	4ba0      	ldr	r3, [pc, #640]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	1c59      	adds	r1, r3, #1
 800128e:	80b9      	strh	r1, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	2201      	movs	r2, #1
 8001294:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001298:	4b9b      	ldr	r3, [pc, #620]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	1c59      	adds	r1, r3, #1
 80012a0:	80b9      	strh	r1, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	223d      	movs	r2, #61	; 0x3d
 80012a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80012aa:	4b97      	ldr	r3, [pc, #604]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	80b9      	strh	r1, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	2207      	movs	r2, #7
 80012b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80012bc:	4b92      	ldr	r3, [pc, #584]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	1c59      	adds	r1, r3, #1
 80012c4:	80b9      	strh	r1, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80012ce:	4b8e      	ldr	r3, [pc, #568]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	1c59      	adds	r1, r3, #1
 80012d6:	80b9      	strh	r1, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	4b8c      	ldr	r3, [pc, #560]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80012dc:	7819      	ldrb	r1, [r3, #0]
 80012de:	1813      	adds	r3, r2, r0
 80012e0:	460a      	mov	r2, r1
 80012e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	1c59      	adds	r1, r3, #1
 80012ee:	80b9      	strh	r1, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	4b86      	ldr	r3, [pc, #536]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80012f4:	7859      	ldrb	r1, [r3, #1]
 80012f6:	1813      	adds	r3, r2, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	1c59      	adds	r1, r3, #1
 8001306:	80b9      	strh	r1, [r7, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	4b80      	ldr	r3, [pc, #512]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 800130c:	7899      	ldrb	r1, [r3, #2]
 800130e:	1813      	adds	r3, r2, r0
 8001310:	460a      	mov	r2, r1
 8001312:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001316:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	1c59      	adds	r1, r3, #1
 800131e:	80b9      	strh	r1, [r7, #4]
 8001320:	4618      	mov	r0, r3
 8001322:	4b7a      	ldr	r3, [pc, #488]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 8001324:	78d9      	ldrb	r1, [r3, #3]
 8001326:	1813      	adds	r3, r2, r0
 8001328:	460a      	mov	r2, r1
 800132a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	1c59      	adds	r1, r3, #1
 8001336:	80b9      	strh	r1, [r7, #4]
 8001338:	4618      	mov	r0, r3
 800133a:	4b74      	ldr	r3, [pc, #464]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 800133c:	7919      	ldrb	r1, [r3, #4]
 800133e:	1813      	adds	r3, r2, r0
 8001340:	460a      	mov	r2, r1
 8001342:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	1c59      	adds	r1, r3, #1
 800134e:	80b9      	strh	r1, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	4b6e      	ldr	r3, [pc, #440]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 8001354:	7959      	ldrb	r1, [r3, #5]
 8001356:	1813      	adds	r3, r2, r0
 8001358:	460a      	mov	r2, r1
 800135a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800135e:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	1c59      	adds	r1, r3, #1
 8001366:	80b9      	strh	r1, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	220c      	movs	r2, #12
 800136c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001370:	4b65      	ldr	r3, [pc, #404]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	1c59      	adds	r1, r3, #1
 8001378:	80b9      	strh	r1, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	2200      	movs	r2, #0
 800137e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	80fb      	strh	r3, [r7, #6]
 8001386:	e00f      	b.n	80013a8 <send_DHCP_DISCOVER+0x158>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001388:	88f9      	ldrh	r1, [r7, #6]
 800138a:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	1c58      	adds	r0, r3, #1
 8001392:	80b8      	strh	r0, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	4b5e      	ldr	r3, [pc, #376]	; (8001510 <send_DHCP_DISCOVER+0x2c0>)
 8001398:	5c59      	ldrb	r1, [r3, r1]
 800139a:	1813      	adds	r3, r2, r0
 800139c:	460a      	mov	r2, r1
 800139e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	3301      	adds	r3, #1
 80013a6:	80fb      	strh	r3, [r7, #6]
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	4a59      	ldr	r2, [pc, #356]	; (8001510 <send_DHCP_DISCOVER+0x2c0>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ea      	bne.n	8001388 <send_DHCP_DISCOVER+0x138>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80013b2:	4b55      	ldr	r3, [pc, #340]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	88bb      	ldrh	r3, [r7, #4]
 80013b8:	1c59      	adds	r1, r3, #1
 80013ba:	80b9      	strh	r1, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	4b53      	ldr	r3, [pc, #332]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80013c0:	78d9      	ldrb	r1, [r3, #3]
 80013c2:	1813      	adds	r3, r2, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80013ca:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	1c59      	adds	r1, r3, #1
 80013d2:	80b9      	strh	r1, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	4b4d      	ldr	r3, [pc, #308]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80013d8:	7919      	ldrb	r1, [r3, #4]
 80013da:	1813      	adds	r3, r2, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80013e2:	4b49      	ldr	r3, [pc, #292]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	88bb      	ldrh	r3, [r7, #4]
 80013e8:	1c59      	adds	r1, r3, #1
 80013ea:	80b9      	strh	r1, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <send_DHCP_DISCOVER+0x2bc>)
 80013f0:	7959      	ldrb	r1, [r3, #5]
 80013f2:	1813      	adds	r3, r2, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2d9      	uxtb	r1, r3
 80013fe:	4b42      	ldr	r3, [pc, #264]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	88b8      	ldrh	r0, [r7, #4]
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	3304      	adds	r3, #4
 8001408:	1ac3      	subs	r3, r0, r3
 800140a:	3103      	adds	r1, #3
 800140c:	b2c9      	uxtb	r1, r1
 800140e:	4413      	add	r3, r2
 8001410:	460a      	mov	r2, r1
 8001412:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001416:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	1c59      	adds	r1, r3, #1
 800141e:	80b9      	strh	r1, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	2237      	movs	r2, #55	; 0x37
 8001424:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	88bb      	ldrh	r3, [r7, #4]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	80b9      	strh	r1, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	2206      	movs	r2, #6
 8001436:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	80b9      	strh	r1, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	2201      	movs	r2, #1
 8001448:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	80b9      	strh	r1, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	2203      	movs	r2, #3
 800145a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	1c59      	adds	r1, r3, #1
 8001466:	80b9      	strh	r1, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	2206      	movs	r2, #6
 800146c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001470:	4b25      	ldr	r3, [pc, #148]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	1c59      	adds	r1, r3, #1
 8001478:	80b9      	strh	r1, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	220f      	movs	r2, #15
 800147e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	80b9      	strh	r1, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	223a      	movs	r2, #58	; 0x3a
 8001490:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	1c59      	adds	r1, r3, #1
 800149c:	80b9      	strh	r1, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	223b      	movs	r2, #59	; 0x3b
 80014a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	1c59      	adds	r1, r3, #1
 80014ae:	80b9      	strh	r1, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	22ff      	movs	r2, #255	; 0xff
 80014b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	80fb      	strh	r3, [r7, #6]
 80014bc:	e009      	b.n	80014d2 <send_DHCP_DISCOVER+0x282>
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	4413      	add	r3, r2
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	3301      	adds	r3, #1
 80014d0:	80fb      	strh	r3, [r7, #6]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80014d8:	d3f1      	bcc.n	80014be <send_DHCP_DISCOVER+0x26e>

	// send broadcasting packet
	ip[0] = 255;
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80014de:	23ff      	movs	r3, #255	; 0xff
 80014e0:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80014e2:	23ff      	movs	r3, #255	; 0xff
 80014e4:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80014e6:	23ff      	movs	r3, #255	; 0xff
 80014e8:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <send_DHCP_DISCOVER+0x2c4>)
 80014ec:	7818      	ldrb	r0, [r3, #0]
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <send_DHCP_DISCOVER+0x2b8>)
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	463b      	mov	r3, r7
 80014f4:	2243      	movs	r2, #67	; 0x43
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80014fc:	f002 f82c 	bl	8003558 <sendto>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000270 	.word	0x20000270
 800150c:	20000274 	.word	0x20000274
 8001510:	20000008 	.word	0x20000008
 8001514:	20000248 	.word	0x20000248

08001518 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001522:	f7ff fd9f 	bl	8001064 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <send_DHCP_REQUEST+0x7c>)
 8001528:	f993 3000 	ldrsb.w	r3, [r3]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d004      	beq.n	800153a <send_DHCP_REQUEST+0x22>
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <send_DHCP_REQUEST+0x7c>)
 8001532:	f993 3000 	ldrsb.w	r3, [r3]
 8001536:	2b04      	cmp	r3, #4
 8001538:	d134      	bne.n	80015a4 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <send_DHCP_REQUEST+0x80>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	330a      	adds	r3, #10
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	330a      	adds	r3, #10
 800154a:	3301      	adds	r3, #1
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a11      	ldr	r2, [pc, #68]	; (800159c <send_DHCP_REQUEST+0x84>)
 8001556:	7812      	ldrb	r2, [r2, #0]
 8001558:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <send_DHCP_REQUEST+0x80>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <send_DHCP_REQUEST+0x84>)
 8001560:	7852      	ldrb	r2, [r2, #1]
 8001562:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <send_DHCP_REQUEST+0x84>)
 800156a:	7892      	ldrb	r2, [r2, #2]
 800156c:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <send_DHCP_REQUEST+0x80>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <send_DHCP_REQUEST+0x84>)
 8001574:	78d2      	ldrb	r2, [r2, #3]
 8001576:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <send_DHCP_REQUEST+0x88>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	e010      	b.n	80015b4 <send_DHCP_REQUEST+0x9c>
 8001592:	bf00      	nop
 8001594:	20000264 	.word	0x20000264
 8001598:	20000270 	.word	0x20000270
 800159c:	20000254 	.word	0x20000254
 80015a0:	2000024c 	.word	0x2000024c
   }
   else
   {
   	ip[0] = 255;
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80015a8:	23ff      	movs	r3, #255	; 0xff
 80015aa:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80015ac:	23ff      	movs	r3, #255	; 0xff
 80015ae:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80015b0:	23ff      	movs	r3, #255	; 0xff
 80015b2:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80015b4:	2304      	movs	r3, #4
 80015b6:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80015b8:	4b8d      	ldr	r3, [pc, #564]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	897b      	ldrh	r3, [r7, #10]
 80015be:	1c59      	adds	r1, r3, #1
 80015c0:	8179      	strh	r1, [r7, #10]
 80015c2:	4413      	add	r3, r2
 80015c4:	2235      	movs	r2, #53	; 0x35
 80015c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	897b      	ldrh	r3, [r7, #10]
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	8179      	strh	r1, [r7, #10]
 80015d4:	4413      	add	r3, r2
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80015dc:	4b84      	ldr	r3, [pc, #528]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	897b      	ldrh	r3, [r7, #10]
 80015e2:	1c59      	adds	r1, r3, #1
 80015e4:	8179      	strh	r1, [r7, #10]
 80015e6:	4413      	add	r3, r2
 80015e8:	2203      	movs	r2, #3
 80015ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80015ee:	4b80      	ldr	r3, [pc, #512]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	1c59      	adds	r1, r3, #1
 80015f6:	8179      	strh	r1, [r7, #10]
 80015f8:	4413      	add	r3, r2
 80015fa:	223d      	movs	r2, #61	; 0x3d
 80015fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001600:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	897b      	ldrh	r3, [r7, #10]
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	8179      	strh	r1, [r7, #10]
 800160a:	4413      	add	r3, r2
 800160c:	2207      	movs	r2, #7
 800160e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001612:	4b77      	ldr	r3, [pc, #476]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	897b      	ldrh	r3, [r7, #10]
 8001618:	1c59      	adds	r1, r3, #1
 800161a:	8179      	strh	r1, [r7, #10]
 800161c:	4413      	add	r3, r2
 800161e:	2201      	movs	r2, #1
 8001620:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001624:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	897b      	ldrh	r3, [r7, #10]
 800162a:	1c59      	adds	r1, r3, #1
 800162c:	8179      	strh	r1, [r7, #10]
 800162e:	4618      	mov	r0, r3
 8001630:	4b70      	ldr	r3, [pc, #448]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 8001632:	7819      	ldrb	r1, [r3, #0]
 8001634:	1813      	adds	r3, r2, r0
 8001636:	460a      	mov	r2, r1
 8001638:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800163c:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	897b      	ldrh	r3, [r7, #10]
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	8179      	strh	r1, [r7, #10]
 8001646:	4618      	mov	r0, r3
 8001648:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 800164a:	7859      	ldrb	r1, [r3, #1]
 800164c:	1813      	adds	r3, r2, r0
 800164e:	460a      	mov	r2, r1
 8001650:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001654:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	897b      	ldrh	r3, [r7, #10]
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	8179      	strh	r1, [r7, #10]
 800165e:	4618      	mov	r0, r3
 8001660:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 8001662:	7899      	ldrb	r1, [r3, #2]
 8001664:	1813      	adds	r3, r2, r0
 8001666:	460a      	mov	r2, r1
 8001668:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800166c:	4b60      	ldr	r3, [pc, #384]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	897b      	ldrh	r3, [r7, #10]
 8001672:	1c59      	adds	r1, r3, #1
 8001674:	8179      	strh	r1, [r7, #10]
 8001676:	4618      	mov	r0, r3
 8001678:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 800167a:	78d9      	ldrb	r1, [r3, #3]
 800167c:	1813      	adds	r3, r2, r0
 800167e:	460a      	mov	r2, r1
 8001680:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001684:	4b5a      	ldr	r3, [pc, #360]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	897b      	ldrh	r3, [r7, #10]
 800168a:	1c59      	adds	r1, r3, #1
 800168c:	8179      	strh	r1, [r7, #10]
 800168e:	4618      	mov	r0, r3
 8001690:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 8001692:	7919      	ldrb	r1, [r3, #4]
 8001694:	1813      	adds	r3, r2, r0
 8001696:	460a      	mov	r2, r1
 8001698:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800169c:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	1c59      	adds	r1, r3, #1
 80016a4:	8179      	strh	r1, [r7, #10]
 80016a6:	4618      	mov	r0, r3
 80016a8:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <send_DHCP_REQUEST+0x2dc>)
 80016aa:	7959      	ldrb	r1, [r3, #5]
 80016ac:	1813      	adds	r3, r2, r0
 80016ae:	460a      	mov	r2, r1
 80016b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2bff      	cmp	r3, #255	; 0xff
 80016b8:	f040 8084 	bne.w	80017c4 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80016bc:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	897b      	ldrh	r3, [r7, #10]
 80016c2:	1c59      	adds	r1, r3, #1
 80016c4:	8179      	strh	r1, [r7, #10]
 80016c6:	4413      	add	r3, r2
 80016c8:	2232      	movs	r2, #50	; 0x32
 80016ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80016ce:	4b48      	ldr	r3, [pc, #288]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	897b      	ldrh	r3, [r7, #10]
 80016d4:	1c59      	adds	r1, r3, #1
 80016d6:	8179      	strh	r1, [r7, #10]
 80016d8:	4413      	add	r3, r2
 80016da:	2204      	movs	r2, #4
 80016dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80016e0:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	897b      	ldrh	r3, [r7, #10]
 80016e6:	1c59      	adds	r1, r3, #1
 80016e8:	8179      	strh	r1, [r7, #10]
 80016ea:	4618      	mov	r0, r3
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 80016ee:	7819      	ldrb	r1, [r3, #0]
 80016f0:	1813      	adds	r3, r2, r0
 80016f2:	460a      	mov	r2, r1
 80016f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80016f8:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	897b      	ldrh	r3, [r7, #10]
 80016fe:	1c59      	adds	r1, r3, #1
 8001700:	8179      	strh	r1, [r7, #10]
 8001702:	4618      	mov	r0, r3
 8001704:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 8001706:	7859      	ldrb	r1, [r3, #1]
 8001708:	1813      	adds	r3, r2, r0
 800170a:	460a      	mov	r2, r1
 800170c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001710:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	897b      	ldrh	r3, [r7, #10]
 8001716:	1c59      	adds	r1, r3, #1
 8001718:	8179      	strh	r1, [r7, #10]
 800171a:	4618      	mov	r0, r3
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 800171e:	7899      	ldrb	r1, [r3, #2]
 8001720:	1813      	adds	r3, r2, r0
 8001722:	460a      	mov	r2, r1
 8001724:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	897b      	ldrh	r3, [r7, #10]
 800172e:	1c59      	adds	r1, r3, #1
 8001730:	8179      	strh	r1, [r7, #10]
 8001732:	4618      	mov	r0, r3
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <send_DHCP_REQUEST+0x2e0>)
 8001736:	78d9      	ldrb	r1, [r3, #3]
 8001738:	1813      	adds	r3, r2, r0
 800173a:	460a      	mov	r2, r1
 800173c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	897b      	ldrh	r3, [r7, #10]
 8001746:	1c59      	adds	r1, r3, #1
 8001748:	8179      	strh	r1, [r7, #10]
 800174a:	4413      	add	r3, r2
 800174c:	2236      	movs	r2, #54	; 0x36
 800174e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	897b      	ldrh	r3, [r7, #10]
 8001758:	1c59      	adds	r1, r3, #1
 800175a:	8179      	strh	r1, [r7, #10]
 800175c:	4413      	add	r3, r2
 800175e:	2204      	movs	r2, #4
 8001760:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	897b      	ldrh	r3, [r7, #10]
 800176a:	1c59      	adds	r1, r3, #1
 800176c:	8179      	strh	r1, [r7, #10]
 800176e:	4618      	mov	r0, r3
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 8001772:	7819      	ldrb	r1, [r3, #0]
 8001774:	1813      	adds	r3, r2, r0
 8001776:	460a      	mov	r2, r1
 8001778:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	897b      	ldrh	r3, [r7, #10]
 8001782:	1c59      	adds	r1, r3, #1
 8001784:	8179      	strh	r1, [r7, #10]
 8001786:	4618      	mov	r0, r3
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 800178a:	7859      	ldrb	r1, [r3, #1]
 800178c:	1813      	adds	r3, r2, r0
 800178e:	460a      	mov	r2, r1
 8001790:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	897b      	ldrh	r3, [r7, #10]
 800179a:	1c59      	adds	r1, r3, #1
 800179c:	8179      	strh	r1, [r7, #10]
 800179e:	4618      	mov	r0, r3
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 80017a2:	7899      	ldrb	r1, [r3, #2]
 80017a4:	1813      	adds	r3, r2, r0
 80017a6:	460a      	mov	r2, r1
 80017a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	897b      	ldrh	r3, [r7, #10]
 80017b2:	1c59      	adds	r1, r3, #1
 80017b4:	8179      	strh	r1, [r7, #10]
 80017b6:	4618      	mov	r0, r3
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <send_DHCP_REQUEST+0x2e4>)
 80017ba:	78d9      	ldrb	r1, [r3, #3]
 80017bc:	1813      	adds	r3, r2, r0
 80017be:	460a      	mov	r2, r1
 80017c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	897b      	ldrh	r3, [r7, #10]
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	8179      	strh	r1, [r7, #10]
 80017ce:	4413      	add	r3, r2
 80017d0:	220c      	movs	r2, #12
 80017d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <send_DHCP_REQUEST+0x2d8>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	1c59      	adds	r1, r3, #1
 80017de:	8179      	strh	r1, [r7, #10]
 80017e0:	4413      	add	r3, r2
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e019      	b.n	8001822 <send_DHCP_REQUEST+0x30a>
 80017ee:	bf00      	nop
 80017f0:	20000270 	.word	0x20000270
 80017f4:	20000274 	.word	0x20000274
 80017f8:	20000254 	.word	0x20000254
 80017fc:	2000024c 	.word	0x2000024c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001800:	4b86      	ldr	r3, [pc, #536]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	897b      	ldrh	r3, [r7, #10]
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	8179      	strh	r1, [r7, #10]
 800180a:	4618      	mov	r0, r3
 800180c:	4984      	ldr	r1, [pc, #528]	; (8001a20 <send_DHCP_REQUEST+0x508>)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	440b      	add	r3, r1
 8001812:	7819      	ldrb	r1, [r3, #0]
 8001814:	1813      	adds	r3, r2, r0
 8001816:	460a      	mov	r2, r1
 8001818:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4a7f      	ldr	r2, [pc, #508]	; (8001a20 <send_DHCP_REQUEST+0x508>)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1e8      	bne.n	8001800 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800182e:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001830:	78db      	ldrb	r3, [r3, #3]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	897b      	ldrh	r3, [r7, #10]
 800183c:	1c59      	adds	r1, r3, #1
 800183e:	8179      	strh	r1, [r7, #10]
 8001840:	461d      	mov	r5, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 fede 	bl	8002604 <NibbleToHex>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	1963      	adds	r3, r4, r5
 800184e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001852:	4b74      	ldr	r3, [pc, #464]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001854:	78da      	ldrb	r2, [r3, #3]
 8001856:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	1c59      	adds	r1, r3, #1
 800185e:	8179      	strh	r1, [r7, #10]
 8001860:	461d      	mov	r5, r3
 8001862:	4610      	mov	r0, r2
 8001864:	f000 fece 	bl	8002604 <NibbleToHex>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	1963      	adds	r3, r4, r5
 800186e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001872:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001874:	791b      	ldrb	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800187c:	681c      	ldr	r4, [r3, #0]
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	1c59      	adds	r1, r3, #1
 8001882:	8179      	strh	r1, [r7, #10]
 8001884:	461d      	mov	r5, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f000 febc 	bl	8002604 <NibbleToHex>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	1963      	adds	r3, r4, r5
 8001892:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 8001898:	791a      	ldrb	r2, [r3, #4]
 800189a:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800189c:	681c      	ldr	r4, [r3, #0]
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	1c59      	adds	r1, r3, #1
 80018a2:	8179      	strh	r1, [r7, #10]
 80018a4:	461d      	mov	r5, r3
 80018a6:	4610      	mov	r0, r2
 80018a8:	f000 feac 	bl	8002604 <NibbleToHex>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	1963      	adds	r3, r4, r5
 80018b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80018b6:	4b5b      	ldr	r3, [pc, #364]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 80018b8:	795b      	ldrb	r3, [r3, #5]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80018c0:	681c      	ldr	r4, [r3, #0]
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	1c59      	adds	r1, r3, #1
 80018c6:	8179      	strh	r1, [r7, #10]
 80018c8:	461d      	mov	r5, r3
 80018ca:	4610      	mov	r0, r2
 80018cc:	f000 fe9a 	bl	8002604 <NibbleToHex>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	1963      	adds	r3, r4, r5
 80018d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80018da:	4b52      	ldr	r3, [pc, #328]	; (8001a24 <send_DHCP_REQUEST+0x50c>)
 80018dc:	795a      	ldrb	r2, [r3, #5]
 80018de:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80018e0:	681c      	ldr	r4, [r3, #0]
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	1c59      	adds	r1, r3, #1
 80018e6:	8179      	strh	r1, [r7, #10]
 80018e8:	461d      	mov	r5, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	f000 fe8a 	bl	8002604 <NibbleToHex>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	1963      	adds	r3, r4, r5
 80018f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	b2d9      	uxtb	r1, r3
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	8978      	ldrh	r0, [r7, #10]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3307      	adds	r3, #7
 8001908:	1ac3      	subs	r3, r0, r3
 800190a:	3106      	adds	r1, #6
 800190c:	b2c9      	uxtb	r1, r1
 800190e:	4413      	add	r3, r2
 8001910:	460a      	mov	r2, r1
 8001912:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	897b      	ldrh	r3, [r7, #10]
 800191c:	1c59      	adds	r1, r3, #1
 800191e:	8179      	strh	r1, [r7, #10]
 8001920:	4413      	add	r3, r2
 8001922:	2237      	movs	r2, #55	; 0x37
 8001924:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001928:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	897b      	ldrh	r3, [r7, #10]
 800192e:	1c59      	adds	r1, r3, #1
 8001930:	8179      	strh	r1, [r7, #10]
 8001932:	4413      	add	r3, r2
 8001934:	2208      	movs	r2, #8
 8001936:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	1c59      	adds	r1, r3, #1
 8001942:	8179      	strh	r1, [r7, #10]
 8001944:	4413      	add	r3, r2
 8001946:	2201      	movs	r2, #1
 8001948:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	897b      	ldrh	r3, [r7, #10]
 8001952:	1c59      	adds	r1, r3, #1
 8001954:	8179      	strh	r1, [r7, #10]
 8001956:	4413      	add	r3, r2
 8001958:	2203      	movs	r2, #3
 800195a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	8179      	strh	r1, [r7, #10]
 8001968:	4413      	add	r3, r2
 800196a:	2206      	movs	r2, #6
 800196c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	897b      	ldrh	r3, [r7, #10]
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	8179      	strh	r1, [r7, #10]
 800197a:	4413      	add	r3, r2
 800197c:	220f      	movs	r2, #15
 800197e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	1c59      	adds	r1, r3, #1
 800198a:	8179      	strh	r1, [r7, #10]
 800198c:	4413      	add	r3, r2
 800198e:	223a      	movs	r2, #58	; 0x3a
 8001990:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	897b      	ldrh	r3, [r7, #10]
 800199a:	1c59      	adds	r1, r3, #1
 800199c:	8179      	strh	r1, [r7, #10]
 800199e:	4413      	add	r3, r2
 80019a0:	223b      	movs	r2, #59	; 0x3b
 80019a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	897b      	ldrh	r3, [r7, #10]
 80019ac:	1c59      	adds	r1, r3, #1
 80019ae:	8179      	strh	r1, [r7, #10]
 80019b0:	4413      	add	r3, r2
 80019b2:	221f      	movs	r2, #31
 80019b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	897b      	ldrh	r3, [r7, #10]
 80019be:	1c59      	adds	r1, r3, #1
 80019c0:	8179      	strh	r1, [r7, #10]
 80019c2:	4413      	add	r3, r2
 80019c4:	2221      	movs	r2, #33	; 0x21
 80019c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	1c59      	adds	r1, r3, #1
 80019d2:	8179      	strh	r1, [r7, #10]
 80019d4:	4413      	add	r3, r2
 80019d6:	22ff      	movs	r2, #255	; 0xff
 80019d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e009      	b.n	80019f6 <send_DHCP_REQUEST+0x4de>
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	33ec      	adds	r3, #236	; 0xec
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80019fc:	dbf1      	blt.n	80019e2 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <send_DHCP_REQUEST+0x510>)
 8001a00:	7818      	ldrb	r0, [r3, #0]
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <send_DHCP_REQUEST+0x504>)
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2243      	movs	r2, #67	; 0x43
 8001a0a:	9200      	str	r2, [sp, #0]
 8001a0c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001a10:	f001 fda2 	bl	8003558 <sendto>

}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1c:	20000270 	.word	0x20000270
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000274 	.word	0x20000274
 8001a28:	20000248 	.word	0x20000248

08001a2c <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001a36:	f7ff fb15 	bl	8001064 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001a3e:	4b9f      	ldr	r3, [pc, #636]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	330a      	adds	r3, #10
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001a48:	4b9c      	ldr	r3, [pc, #624]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	330a      	adds	r3, #10
 8001a4e:	3301      	adds	r3, #1
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001a54:	4b99      	ldr	r3, [pc, #612]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	897b      	ldrh	r3, [r7, #10]
 8001a5a:	1c59      	adds	r1, r3, #1
 8001a5c:	8179      	strh	r1, [r7, #10]
 8001a5e:	4413      	add	r3, r2
 8001a60:	2235      	movs	r2, #53	; 0x35
 8001a62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001a66:	4b95      	ldr	r3, [pc, #596]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	897b      	ldrh	r3, [r7, #10]
 8001a6c:	1c59      	adds	r1, r3, #1
 8001a6e:	8179      	strh	r1, [r7, #10]
 8001a70:	4413      	add	r3, r2
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001a78:	4b90      	ldr	r3, [pc, #576]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	897b      	ldrh	r3, [r7, #10]
 8001a7e:	1c59      	adds	r1, r3, #1
 8001a80:	8179      	strh	r1, [r7, #10]
 8001a82:	4413      	add	r3, r2
 8001a84:	2204      	movs	r2, #4
 8001a86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	897b      	ldrh	r3, [r7, #10]
 8001a90:	1c59      	adds	r1, r3, #1
 8001a92:	8179      	strh	r1, [r7, #10]
 8001a94:	4413      	add	r3, r2
 8001a96:	223d      	movs	r2, #61	; 0x3d
 8001a98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001a9c:	4b87      	ldr	r3, [pc, #540]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	897b      	ldrh	r3, [r7, #10]
 8001aa2:	1c59      	adds	r1, r3, #1
 8001aa4:	8179      	strh	r1, [r7, #10]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001aae:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	897b      	ldrh	r3, [r7, #10]
 8001ab4:	1c59      	adds	r1, r3, #1
 8001ab6:	8179      	strh	r1, [r7, #10]
 8001ab8:	4413      	add	r3, r2
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001ac0:	4b7e      	ldr	r3, [pc, #504]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	897b      	ldrh	r3, [r7, #10]
 8001ac6:	1c59      	adds	r1, r3, #1
 8001ac8:	8179      	strh	r1, [r7, #10]
 8001aca:	4618      	mov	r0, r3
 8001acc:	4b7c      	ldr	r3, [pc, #496]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001ace:	7819      	ldrb	r1, [r3, #0]
 8001ad0:	1813      	adds	r3, r2, r0
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001ad8:	4b78      	ldr	r3, [pc, #480]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	897b      	ldrh	r3, [r7, #10]
 8001ade:	1c59      	adds	r1, r3, #1
 8001ae0:	8179      	strh	r1, [r7, #10]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001ae6:	7859      	ldrb	r1, [r3, #1]
 8001ae8:	1813      	adds	r3, r2, r0
 8001aea:	460a      	mov	r2, r1
 8001aec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001af0:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	1c59      	adds	r1, r3, #1
 8001af8:	8179      	strh	r1, [r7, #10]
 8001afa:	4618      	mov	r0, r3
 8001afc:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001afe:	7899      	ldrb	r1, [r3, #2]
 8001b00:	1813      	adds	r3, r2, r0
 8001b02:	460a      	mov	r2, r1
 8001b04:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001b08:	4b6c      	ldr	r3, [pc, #432]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	897b      	ldrh	r3, [r7, #10]
 8001b0e:	1c59      	adds	r1, r3, #1
 8001b10:	8179      	strh	r1, [r7, #10]
 8001b12:	4618      	mov	r0, r3
 8001b14:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001b16:	78d9      	ldrb	r1, [r3, #3]
 8001b18:	1813      	adds	r3, r2, r0
 8001b1a:	460a      	mov	r2, r1
 8001b1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001b20:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	1c59      	adds	r1, r3, #1
 8001b28:	8179      	strh	r1, [r7, #10]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001b2e:	7919      	ldrb	r1, [r3, #4]
 8001b30:	1813      	adds	r3, r2, r0
 8001b32:	460a      	mov	r2, r1
 8001b34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001b38:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	8179      	strh	r1, [r7, #10]
 8001b42:	4618      	mov	r0, r3
 8001b44:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <send_DHCP_DECLINE+0x294>)
 8001b46:	7959      	ldrb	r1, [r3, #5]
 8001b48:	1813      	adds	r3, r2, r0
 8001b4a:	460a      	mov	r2, r1
 8001b4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001b50:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	1c59      	adds	r1, r3, #1
 8001b58:	8179      	strh	r1, [r7, #10]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	2232      	movs	r2, #50	; 0x32
 8001b5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001b62:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	1c59      	adds	r1, r3, #1
 8001b6a:	8179      	strh	r1, [r7, #10]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2204      	movs	r2, #4
 8001b70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001b74:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	8179      	strh	r1, [r7, #10]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001b82:	7819      	ldrb	r1, [r3, #0]
 8001b84:	1813      	adds	r3, r2, r0
 8001b86:	460a      	mov	r2, r1
 8001b88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	1c59      	adds	r1, r3, #1
 8001b94:	8179      	strh	r1, [r7, #10]
 8001b96:	4618      	mov	r0, r3
 8001b98:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001b9a:	7859      	ldrb	r1, [r3, #1]
 8001b9c:	1813      	adds	r3, r2, r0
 8001b9e:	460a      	mov	r2, r1
 8001ba0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001ba4:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	897b      	ldrh	r3, [r7, #10]
 8001baa:	1c59      	adds	r1, r3, #1
 8001bac:	8179      	strh	r1, [r7, #10]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001bb2:	7899      	ldrb	r1, [r3, #2]
 8001bb4:	1813      	adds	r3, r2, r0
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	1c59      	adds	r1, r3, #1
 8001bc4:	8179      	strh	r1, [r7, #10]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	; (8001cc4 <send_DHCP_DECLINE+0x298>)
 8001bca:	78d9      	ldrb	r1, [r3, #3]
 8001bcc:	1813      	adds	r3, r2, r0
 8001bce:	460a      	mov	r2, r1
 8001bd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001bd4:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	897b      	ldrh	r3, [r7, #10]
 8001bda:	1c59      	adds	r1, r3, #1
 8001bdc:	8179      	strh	r1, [r7, #10]
 8001bde:	4413      	add	r3, r2
 8001be0:	2236      	movs	r2, #54	; 0x36
 8001be2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001be6:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	897b      	ldrh	r3, [r7, #10]
 8001bec:	1c59      	adds	r1, r3, #1
 8001bee:	8179      	strh	r1, [r7, #10]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	897b      	ldrh	r3, [r7, #10]
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	8179      	strh	r1, [r7, #10]
 8001c02:	4618      	mov	r0, r3
 8001c04:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c06:	7819      	ldrb	r1, [r3, #0]
 8001c08:	1813      	adds	r3, r2, r0
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	8179      	strh	r1, [r7, #10]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c1e:	7859      	ldrb	r1, [r3, #1]
 8001c20:	1813      	adds	r3, r2, r0
 8001c22:	460a      	mov	r2, r1
 8001c24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	8179      	strh	r1, [r7, #10]
 8001c32:	4618      	mov	r0, r3
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c36:	7899      	ldrb	r1, [r3, #2]
 8001c38:	1813      	adds	r3, r2, r0
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	1c59      	adds	r1, r3, #1
 8001c48:	8179      	strh	r1, [r7, #10]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <send_DHCP_DECLINE+0x29c>)
 8001c4e:	78d9      	ldrb	r1, [r3, #3]
 8001c50:	1813      	adds	r3, r2, r0
 8001c52:	460a      	mov	r2, r1
 8001c54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	897b      	ldrh	r3, [r7, #10]
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	8179      	strh	r1, [r7, #10]
 8001c62:	4413      	add	r3, r2
 8001c64:	22ff      	movs	r2, #255	; 0xff
 8001c66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e009      	b.n	8001c84 <send_DHCP_DECLINE+0x258>
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	33ec      	adds	r3, #236	; 0xec
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001c8a:	dbf1      	blt.n	8001c70 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001c8c:	23ff      	movs	r3, #255	; 0xff
 8001c8e:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001c90:	23ff      	movs	r3, #255	; 0xff
 8001c92:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001c94:	23ff      	movs	r3, #255	; 0xff
 8001c96:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001c98:	23ff      	movs	r3, #255	; 0xff
 8001c9a:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <send_DHCP_DECLINE+0x2a0>)
 8001c9e:	7818      	ldrb	r0, [r3, #0]
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <send_DHCP_DECLINE+0x290>)
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2243      	movs	r2, #67	; 0x43
 8001ca8:	9200      	str	r2, [sp, #0]
 8001caa:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001cae:	f001 fc53 	bl	8003558 <sendto>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000270 	.word	0x20000270
 8001cc0:	20000274 	.word	0x20000274
 8001cc4:	20000254 	.word	0x20000254
 8001cc8:	2000024c 	.word	0x2000024c
 8001ccc:	20000248 	.word	0x20000248

08001cd0 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001cda:	4baa      	ldr	r3, [pc, #680]	; (8001f84 <parseDHCPMSG+0x2b4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fe6b 	bl	80029ba <getSn_RX_RSR>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	823b      	strh	r3, [r7, #16]
 8001ce8:	8a3b      	ldrh	r3, [r7, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d011      	beq.n	8001d12 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001cee:	4ba5      	ldr	r3, [pc, #660]	; (8001f84 <parseDHCPMSG+0x2b4>)
 8001cf0:	7818      	ldrb	r0, [r3, #0]
 8001cf2:	4ba5      	ldr	r3, [pc, #660]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001cf4:	6819      	ldr	r1, [r3, #0]
 8001cf6:	1d3c      	adds	r4, r7, #4
 8001cf8:	8a3a      	ldrh	r2, [r7, #16]
 8001cfa:	1cbb      	adds	r3, r7, #2
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4623      	mov	r3, r4
 8001d00:	f001 fd60 	bl	80037c4 <recvfrom>
 8001d04:	4603      	mov	r3, r0
 8001d06:	823b      	strh	r3, [r7, #16]
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;

   if (svr_port == DHCP_SERVER_PORT) {
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	2b43      	cmp	r3, #67	; 0x43
 8001d0c:	f040 81a7 	bne.w	800205e <parseDHCPMSG+0x38e>
 8001d10:	e001      	b.n	8001d16 <parseDHCPMSG+0x46>
   else return 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e1a5      	b.n	8002062 <parseDHCPMSG+0x392>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001d16:	4b9c      	ldr	r3, [pc, #624]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	7f1a      	ldrb	r2, [r3, #28]
 8001d1c:	4b9b      	ldr	r3, [pc, #620]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d124      	bne.n	8001d6e <parseDHCPMSG+0x9e>
 8001d24:	4b98      	ldr	r3, [pc, #608]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	7f5a      	ldrb	r2, [r3, #29]
 8001d2a:	4b98      	ldr	r3, [pc, #608]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d11d      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d32:	4b95      	ldr	r3, [pc, #596]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	7f9a      	ldrb	r2, [r3, #30]
 8001d38:	4b94      	ldr	r3, [pc, #592]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d3a:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d116      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d40:	4b91      	ldr	r3, [pc, #580]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	7fda      	ldrb	r2, [r3, #31]
 8001d46:	4b91      	ldr	r3, [pc, #580]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d48:	78db      	ldrb	r3, [r3, #3]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d10f      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001d4e:	4b8e      	ldr	r3, [pc, #568]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001d56:	4b8d      	ldr	r3, [pc, #564]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d58:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d107      	bne.n	8001d6e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001d5e:	4b8a      	ldr	r3, [pc, #552]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001d66:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <parseDHCPMSG+0x2bc>)
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <parseDHCPMSG+0xa2>
         return 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e177      	b.n	8002062 <parseDHCPMSG+0x392>
		p = (uint8_t *)(&pDHCPMSG->op);
 8001d72:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <parseDHCPMSG+0x2b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	33f0      	adds	r3, #240	; 0xf0
 8001d7c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001d7e:	8a3b      	ldrh	r3, [r7, #16]
 8001d80:	3bf0      	subs	r3, #240	; 0xf0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4413      	add	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001d88:	e164      	b.n	8002054 <parseDHCPMSG+0x384>

			switch ( *p ) {
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b36      	cmp	r3, #54	; 0x36
 8001d90:	dc76      	bgt.n	8001e80 <parseDHCPMSG+0x1b0>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f2c0 8151 	blt.w	800203a <parseDHCPMSG+0x36a>
 8001d98:	2b36      	cmp	r3, #54	; 0x36
 8001d9a:	f200 814e 	bhi.w	800203a <parseDHCPMSG+0x36a>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <parseDHCPMSG+0xd4>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001e8d 	.word	0x08001e8d
 8001da8:	08001ead 	.word	0x08001ead
 8001dac:	0800203b 	.word	0x0800203b
 8001db0:	08001eeb 	.word	0x08001eeb
 8001db4:	0800203b 	.word	0x0800203b
 8001db8:	0800203b 	.word	0x0800203b
 8001dbc:	08001f37 	.word	0x08001f37
 8001dc0:	0800203b 	.word	0x0800203b
 8001dc4:	0800203b 	.word	0x0800203b
 8001dc8:	0800203b 	.word	0x0800203b
 8001dcc:	0800203b 	.word	0x0800203b
 8001dd0:	0800203b 	.word	0x0800203b
 8001dd4:	0800203b 	.word	0x0800203b
 8001dd8:	0800203b 	.word	0x0800203b
 8001ddc:	0800203b 	.word	0x0800203b
 8001de0:	0800203b 	.word	0x0800203b
 8001de4:	0800203b 	.word	0x0800203b
 8001de8:	0800203b 	.word	0x0800203b
 8001dec:	0800203b 	.word	0x0800203b
 8001df0:	0800203b 	.word	0x0800203b
 8001df4:	0800203b 	.word	0x0800203b
 8001df8:	0800203b 	.word	0x0800203b
 8001dfc:	0800203b 	.word	0x0800203b
 8001e00:	0800203b 	.word	0x0800203b
 8001e04:	0800203b 	.word	0x0800203b
 8001e08:	0800203b 	.word	0x0800203b
 8001e0c:	0800203b 	.word	0x0800203b
 8001e10:	0800203b 	.word	0x0800203b
 8001e14:	0800203b 	.word	0x0800203b
 8001e18:	0800203b 	.word	0x0800203b
 8001e1c:	0800203b 	.word	0x0800203b
 8001e20:	0800203b 	.word	0x0800203b
 8001e24:	0800203b 	.word	0x0800203b
 8001e28:	0800203b 	.word	0x0800203b
 8001e2c:	0800203b 	.word	0x0800203b
 8001e30:	0800203b 	.word	0x0800203b
 8001e34:	0800203b 	.word	0x0800203b
 8001e38:	0800203b 	.word	0x0800203b
 8001e3c:	0800203b 	.word	0x0800203b
 8001e40:	0800203b 	.word	0x0800203b
 8001e44:	0800203b 	.word	0x0800203b
 8001e48:	0800203b 	.word	0x0800203b
 8001e4c:	0800203b 	.word	0x0800203b
 8001e50:	0800203b 	.word	0x0800203b
 8001e54:	0800203b 	.word	0x0800203b
 8001e58:	0800203b 	.word	0x0800203b
 8001e5c:	0800203b 	.word	0x0800203b
 8001e60:	0800203b 	.word	0x0800203b
 8001e64:	0800203b 	.word	0x0800203b
 8001e68:	0800203b 	.word	0x0800203b
 8001e6c:	0800203b 	.word	0x0800203b
 8001e70:	08001f9d 	.word	0x08001f9d
 8001e74:	0800203b 	.word	0x0800203b
 8001e78:	08001e95 	.word	0x08001e95
 8001e7c:	08001ff9 	.word	0x08001ff9
 8001e80:	2bff      	cmp	r3, #255	; 0xff
 8001e82:	f040 80da 	bne.w	800203a <parseDHCPMSG+0x36a>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	617b      	str	r3, [r7, #20]
   				break;
 8001e8a:	e0e3      	b.n	8002054 <parseDHCPMSG+0x384>
            case padOption :
   				p++;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
   				break;
 8001e92:	e0df      	b.n	8002054 <parseDHCPMSG+0x384>
   			case dhcpMessageType :
   				p++;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
   				p++;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	617a      	str	r2, [r7, #20]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	74fb      	strb	r3, [r7, #19]
   				break;
 8001eaa:	e0d3      	b.n	8002054 <parseDHCPMSG+0x384>
   			case subnetMask :
   				p++;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
   				p++;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	617a      	str	r2, [r7, #20]
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001ec2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	617a      	str	r2, [r7, #20]
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001ece:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	617a      	str	r2, [r7, #20]
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001eda:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	617a      	str	r2, [r7, #20]
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <parseDHCPMSG+0x2c0>)
 8001ee6:	70da      	strb	r2, [r3, #3]
   				break;
 8001ee8:	e0b4      	b.n	8002054 <parseDHCPMSG+0x384>
   			case routersOnSubnet :
   				p++;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	617a      	str	r2, [r7, #20]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	617a      	str	r2, [r7, #20]
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f04:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	617a      	str	r2, [r7, #20]
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f10:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	617a      	str	r2, [r7, #20]
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f1c:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	617a      	str	r2, [r7, #20]
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <parseDHCPMSG+0x2c4>)
 8001f28:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001f2a:	7afb      	ldrb	r3, [r7, #11]
 8001f2c:	3b04      	subs	r3, #4
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
   				break;
 8001f34:	e08e      	b.n	8002054 <parseDHCPMSG+0x384>
   			case dns :
   				p++;                  
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	617a      	str	r2, [r7, #20]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	617a      	str	r2, [r7, #20]
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f50:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	617a      	str	r2, [r7, #20]
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f5c:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	617a      	str	r2, [r7, #20]
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f68:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	617a      	str	r2, [r7, #20]
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <parseDHCPMSG+0x2c8>)
 8001f74:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	3b04      	subs	r3, #4
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
   				break;
 8001f80:	e068      	b.n	8002054 <parseDHCPMSG+0x384>
 8001f82:	bf00      	nop
 8001f84:	20000248 	.word	0x20000248
 8001f88:	20000270 	.word	0x20000270
 8001f8c:	20000274 	.word	0x20000274
 8001f90:	2000025c 	.word	0x2000025c
 8001f94:	20000258 	.word	0x20000258
 8001f98:	20000260 	.word	0x20000260
   			case dhcpIPaddrLeaseTime :
   				p++;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	617a      	str	r2, [r7, #20]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	617a      	str	r2, [r7, #20]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <parseDHCPMSG+0x39c>)
 8001fb8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <parseDHCPMSG+0x39c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	021a      	lsls	r2, r3, #8
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1c59      	adds	r1, r3, #1
 8001fc4:	6179      	str	r1, [r7, #20]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a28      	ldr	r2, [pc, #160]	; (800206c <parseDHCPMSG+0x39c>)
 8001fcc:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <parseDHCPMSG+0x39c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	021a      	lsls	r2, r3, #8
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	1c59      	adds	r1, r3, #1
 8001fd8:	6179      	str	r1, [r7, #20]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <parseDHCPMSG+0x39c>)
 8001fe0:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <parseDHCPMSG+0x39c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	021a      	lsls	r2, r3, #8
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	1c59      	adds	r1, r3, #1
 8001fec:	6179      	str	r1, [r7, #20]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <parseDHCPMSG+0x39c>)
 8001ff4:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8001ff6:	e02d      	b.n	8002054 <parseDHCPMSG+0x384>
   			case dhcpServerIdentifier :
   				p++;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	617a      	str	r2, [r7, #20]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	617a      	str	r2, [r7, #20]
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <parseDHCPMSG+0x3a0>)
 8002012:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	617a      	str	r2, [r7, #20]
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <parseDHCPMSG+0x3a0>)
 800201e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	617a      	str	r2, [r7, #20]
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <parseDHCPMSG+0x3a0>)
 800202a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	617a      	str	r2, [r7, #20]
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <parseDHCPMSG+0x3a0>)
 8002036:	70da      	strb	r2, [r3, #3]
   				break;
 8002038:	e00c      	b.n	8002054 <parseDHCPMSG+0x384>
   			default :
   				p++;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	617a      	str	r2, [r7, #20]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800204a:	7afb      	ldrb	r3, [r7, #11]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	4413      	add	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
   				break;
 8002052:	bf00      	nop
		while ( p < e ) {
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	f4ff ae96 	bcc.w	8001d8a <parseDHCPMSG+0xba>
			} // switch
		} // while
	} // if
	return	type;
 800205e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002062:	4618      	mov	r0, r3
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	20000000 	.word	0x20000000
 8002070:	2000024c 	.word	0x2000024c

08002074 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800207a:	4b7f      	ldr	r3, [pc, #508]	; (8002278 <DHCP_run+0x204>)
 800207c:	f993 3000 	ldrsb.w	r3, [r3]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d101      	bne.n	8002088 <DHCP_run+0x14>
 8002084:	2305      	movs	r3, #5
 8002086:	e0f3      	b.n	8002270 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8002088:	4b7c      	ldr	r3, [pc, #496]	; (800227c <DHCP_run+0x208>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3301      	adds	r3, #1
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002096:	4618      	mov	r0, r3
 8002098:	f000 faea 	bl	8002670 <WIZCHIP_READ>
 800209c:	4603      	mov	r3, r0
 800209e:	2b22      	cmp	r3, #34	; 0x22
 80020a0:	d006      	beq.n	80020b0 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80020a2:	4b76      	ldr	r3, [pc, #472]	; (800227c <DHCP_run+0x208>)
 80020a4:	7818      	ldrb	r0, [r3, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	2244      	movs	r2, #68	; 0x44
 80020aa:	2102      	movs	r1, #2
 80020ac:	f000 fdd0 	bl	8002c50 <socket>

	ret = DHCP_RUNNING;
 80020b0:	2301      	movs	r3, #1
 80020b2:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80020b4:	f7ff fe0c 	bl	8001cd0 <parseDHCPMSG>
 80020b8:	4603      	mov	r3, r0
 80020ba:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80020bc:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <DHCP_run+0x204>)
 80020be:	f993 3000 	ldrsb.w	r3, [r3]
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	f200 80d0 	bhi.w	8002268 <DHCP_run+0x1f4>
 80020c8:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <DHCP_run+0x5c>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020e5 	.word	0x080020e5
 80020d4:	08002109 	.word	0x08002109
 80020d8:	0800214d 	.word	0x0800214d
 80020dc:	0800219d 	.word	0x0800219d
 80020e0:	080021f7 	.word	0x080021f7
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80020e4:	4b66      	ldr	r3, [pc, #408]	; (8002280 <DHCP_run+0x20c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <DHCP_run+0x20c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80020f0:	4b63      	ldr	r3, [pc, #396]	; (8002280 <DHCP_run+0x20c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80020f6:	4b62      	ldr	r3, [pc, #392]	; (8002280 <DHCP_run+0x20c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80020fc:	f7ff f8a8 	bl	8001250 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8002100:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <DHCP_run+0x204>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
   		break;
 8002106:	e0b2      	b.n	800226e <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d119      	bne.n	8002142 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800210e:	4b5d      	ldr	r3, [pc, #372]	; (8002284 <DHCP_run+0x210>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	7c1a      	ldrb	r2, [r3, #16]
 8002114:	4b5a      	ldr	r3, [pc, #360]	; (8002280 <DHCP_run+0x20c>)
 8002116:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002118:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <DHCP_run+0x210>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	7c5a      	ldrb	r2, [r3, #17]
 800211e:	4b58      	ldr	r3, [pc, #352]	; (8002280 <DHCP_run+0x20c>)
 8002120:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8002122:	4b58      	ldr	r3, [pc, #352]	; (8002284 <DHCP_run+0x210>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	7c9a      	ldrb	r2, [r3, #18]
 8002128:	4b55      	ldr	r3, [pc, #340]	; (8002280 <DHCP_run+0x20c>)
 800212a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 800212c:	4b55      	ldr	r3, [pc, #340]	; (8002284 <DHCP_run+0x210>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	7cda      	ldrb	r2, [r3, #19]
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <DHCP_run+0x20c>)
 8002134:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002136:	f7ff f9ef 	bl	8001518 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800213a:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <DHCP_run+0x204>)
 800213c:	2202      	movs	r2, #2
 800213e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002140:	e095      	b.n	800226e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002142:	f000 f8b1 	bl	80022a8 <check_DHCP_timeout>
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
         break;
 800214a:	e090      	b.n	800226e <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	2b05      	cmp	r3, #5
 8002150:	d116      	bne.n	8002180 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8002152:	f000 f909 	bl	8002368 <check_DHCP_leasedIP>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800215c:	4b4a      	ldr	r3, [pc, #296]	; (8002288 <DHCP_run+0x214>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4798      	blx	r3
					reset_DHCP_timeout();
 8002162:	f000 f9ab 	bl	80024bc <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <DHCP_run+0x204>)
 8002168:	2203      	movs	r2, #3
 800216a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800216c:	e07f      	b.n	800226e <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800216e:	f000 f9a5 	bl	80024bc <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8002172:	4b46      	ldr	r3, [pc, #280]	; (800228c <DHCP_run+0x218>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <DHCP_run+0x204>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
		break;
 800217e:	e076      	b.n	800226e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	2b06      	cmp	r3, #6
 8002184:	d105      	bne.n	8002192 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8002186:	f000 f999 	bl	80024bc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <DHCP_run+0x204>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
		break;
 8002190:	e06d      	b.n	800226e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002192:	f000 f889 	bl	80022a8 <check_DHCP_timeout>
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
		break;
 800219a:	e068      	b.n	800226e <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800219c:	2304      	movs	r3, #4
 800219e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <DHCP_run+0x21c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d060      	beq.n	800226c <DHCP_run+0x1f8>
 80021aa:	4b39      	ldr	r3, [pc, #228]	; (8002290 <DHCP_run+0x21c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	085a      	lsrs	r2, r3, #1
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <DHCP_run+0x220>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d259      	bcs.n	800226c <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80021bc:	4b30      	ldr	r3, [pc, #192]	; (8002280 <DHCP_run+0x20c>)
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <DHCP_run+0x224>)
 80021c2:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <DHCP_run+0x20c>)
 80021c6:	785a      	ldrb	r2, [r3, #1]
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <DHCP_run+0x224>)
 80021ca:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80021cc:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <DHCP_run+0x20c>)
 80021ce:	789a      	ldrb	r2, [r3, #2]
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <DHCP_run+0x224>)
 80021d2:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80021d4:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <DHCP_run+0x20c>)
 80021d6:	78da      	ldrb	r2, [r3, #3]
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <DHCP_run+0x224>)
 80021da:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <DHCP_run+0x228>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	4a2e      	ldr	r2, [pc, #184]	; (800229c <DHCP_run+0x228>)
 80021e4:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80021e6:	f7ff f997 	bl	8001518 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80021ea:	f000 f967 	bl	80024bc <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <DHCP_run+0x204>)
 80021f0:	2204      	movs	r2, #4
 80021f2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80021f4:	e03a      	b.n	800226c <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80021f6:	2304      	movs	r3, #4
 80021f8:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d125      	bne.n	800224c <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <DHCP_run+0x22c>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <DHCP_run+0x224>)
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <DHCP_run+0x20c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d111      	bne.n	8002236 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <DHCP_run+0x224>)
 8002214:	785a      	ldrb	r2, [r3, #1]
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <DHCP_run+0x20c>)
 8002218:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800221a:	429a      	cmp	r2, r3
 800221c:	d10b      	bne.n	8002236 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <DHCP_run+0x224>)
 8002220:	789a      	ldrb	r2, [r3, #2]
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <DHCP_run+0x20c>)
 8002224:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d105      	bne.n	8002236 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <DHCP_run+0x224>)
 800222c:	78da      	ldrb	r2, [r3, #3]
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <DHCP_run+0x20c>)
 8002230:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d004      	beq.n	8002240 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8002236:	2303      	movs	r3, #3
 8002238:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <DHCP_run+0x230>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002240:	f000 f93c 	bl	80024bc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <DHCP_run+0x204>)
 8002246:	2203      	movs	r2, #3
 8002248:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800224a:	e010      	b.n	800226e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800224c:	79bb      	ldrb	r3, [r7, #6]
 800224e:	2b06      	cmp	r3, #6
 8002250:	d105      	bne.n	800225e <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8002252:	f000 f933 	bl	80024bc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <DHCP_run+0x204>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
	   	break;
 800225c:	e007      	b.n	800226e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800225e:	f000 f823 	bl	80022a8 <check_DHCP_timeout>
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
	   	break;
 8002266:	e002      	b.n	800226e <DHCP_run+0x1fa>
		default :
   		break;
 8002268:	bf00      	nop
 800226a:	e000      	b.n	800226e <DHCP_run+0x1fa>
		break;
 800226c:	bf00      	nop
	}

	return ret;
 800226e:	79fb      	ldrb	r3, [r7, #7]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000264 	.word	0x20000264
 800227c:	20000248 	.word	0x20000248
 8002280:	20000254 	.word	0x20000254
 8002284:	20000270 	.word	0x20000270
 8002288:	20000010 	.word	0x20000010
 800228c:	20000018 	.word	0x20000018
 8002290:	20000000 	.word	0x20000000
 8002294:	20000268 	.word	0x20000268
 8002298:	20000250 	.word	0x20000250
 800229c:	2000026c 	.word	0x2000026c
 80022a0:	20000265 	.word	0x20000265
 80022a4:	20000014 	.word	0x20000014

080022a8 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80022ae:	2301      	movs	r3, #1
 80022b0:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <check_DHCP_timeout+0xb0>)
 80022b4:	f993 3000 	ldrsb.w	r3, [r3]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	dc2d      	bgt.n	8002318 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <check_DHCP_timeout+0xb4>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <check_DHCP_timeout+0xb8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d242      	bcs.n	800234e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80022c8:	4b26      	ldr	r3, [pc, #152]	; (8002364 <check_DHCP_timeout+0xbc>)
 80022ca:	f993 3000 	ldrsb.w	r3, [r3]
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d00c      	beq.n	80022ec <check_DHCP_timeout+0x44>
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	dc0d      	bgt.n	80022f2 <check_DHCP_timeout+0x4a>
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d002      	beq.n	80022e0 <check_DHCP_timeout+0x38>
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d003      	beq.n	80022e6 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80022de:	e008      	b.n	80022f2 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80022e0:	f7fe ffb6 	bl	8001250 <send_DHCP_DISCOVER>
				break;
 80022e4:	e006      	b.n	80022f4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80022e6:	f7ff f917 	bl	8001518 <send_DHCP_REQUEST>
				break;
 80022ea:	e003      	b.n	80022f4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80022ec:	f7ff f914 	bl	8001518 <send_DHCP_REQUEST>
				break;
 80022f0:	e000      	b.n	80022f4 <check_DHCP_timeout+0x4c>
				break;
 80022f2:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <check_DHCP_timeout+0xb8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <check_DHCP_timeout+0xb8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	330a      	adds	r3, #10
 8002300:	4a16      	ldr	r2, [pc, #88]	; (800235c <check_DHCP_timeout+0xb4>)
 8002302:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <check_DHCP_timeout+0xb0>)
 8002306:	f993 3000 	ldrsb.w	r3, [r3]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	3301      	adds	r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	b25a      	sxtb	r2, r3
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <check_DHCP_timeout+0xb0>)
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	e01a      	b.n	800234e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <check_DHCP_timeout+0xbc>)
 800231a:	f993 3000 	ldrsb.w	r3, [r3]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d00c      	beq.n	800233c <check_DHCP_timeout+0x94>
 8002322:	2b04      	cmp	r3, #4
 8002324:	dc10      	bgt.n	8002348 <check_DHCP_timeout+0xa0>
 8002326:	2b01      	cmp	r3, #1
 8002328:	d002      	beq.n	8002330 <check_DHCP_timeout+0x88>
 800232a:	2b02      	cmp	r3, #2
 800232c:	d006      	beq.n	800233c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800232e:	e00b      	b.n	8002348 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <check_DHCP_timeout+0xbc>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002336:	2300      	movs	r3, #0
 8002338:	71fb      	strb	r3, [r7, #7]
				break;
 800233a:	e006      	b.n	800234a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800233c:	f7fe ff88 	bl	8001250 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <check_DHCP_timeout+0xbc>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
				break;
 8002346:	e000      	b.n	800234a <check_DHCP_timeout+0xa2>
				break;
 8002348:	bf00      	nop
		}
		reset_DHCP_timeout();
 800234a:	f000 f8b7 	bl	80024bc <reset_DHCP_timeout>
	}
	return ret;
 800234e:	79fb      	ldrb	r3, [r7, #7]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000265 	.word	0x20000265
 800235c:	20000004 	.word	0x20000004
 8002360:	20000268 	.word	0x20000268
 8002364:	20000264 	.word	0x20000264

08002368 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800236e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002372:	f000 f97d 	bl	8002670 <WIZCHIP_READ>
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800237a:	2103      	movs	r1, #3
 800237c:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002380:	f000 f9c2 	bl	8002708 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <check_DHCP_leasedIP+0x6c>)
 8002386:	7818      	ldrb	r0, [r3, #0]
 8002388:	f241 3388 	movw	r3, #5000	; 0x1388
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <check_DHCP_leasedIP+0x70>)
 8002390:	2211      	movs	r2, #17
 8002392:	4912      	ldr	r1, [pc, #72]	; (80023dc <check_DHCP_leasedIP+0x74>)
 8002394:	f001 f8e0 	bl	8003558 <sendto>
 8002398:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80023a2:	f000 f9b1 	bl	8002708 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f113 0f0d 	cmn.w	r3, #13
 80023ac:	d101      	bne.n	80023b2 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00c      	b.n	80023cc <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80023b2:	f7ff fb3b 	bl	8001a2c <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <check_DHCP_leasedIP+0x78>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80023bc:	bf00      	nop
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <check_DHCP_leasedIP+0x78>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d9f9      	bls.n	80023be <check_DHCP_leasedIP+0x56>

		return 0;
 80023ca:	2300      	movs	r3, #0
	}
}	
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000248 	.word	0x20000248
 80023d8:	20000254 	.word	0x20000254
 80023dc:	08013b78 	.word	0x08013b78
 80023e0:	20000268 	.word	0x20000268

080023e4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80023f4:	2206      	movs	r2, #6
 80023f6:	492b      	ldr	r1, [pc, #172]	; (80024a4 <DHCP_init+0xc0>)
 80023f8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80023fc:	f000 f9d2 	bl	80027a4 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002400:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <DHCP_init+0xc0>)
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <DHCP_init+0xc0>)
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	4313      	orrs	r3, r2
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <DHCP_init+0xc0>)
 800240e:	789b      	ldrb	r3, [r3, #2]
 8002410:	4313      	orrs	r3, r2
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <DHCP_init+0xc0>)
 8002416:	78db      	ldrb	r3, [r3, #3]
 8002418:	4313      	orrs	r3, r2
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <DHCP_init+0xc0>)
 800241e:	791b      	ldrb	r3, [r3, #4]
 8002420:	4313      	orrs	r3, r2
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <DHCP_init+0xc0>)
 8002426:	795b      	ldrb	r3, [r3, #5]
 8002428:	4313      	orrs	r3, r2
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d117      	bne.n	8002460 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <DHCP_init+0xc0>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <DHCP_init+0xc0>)
 8002438:	2208      	movs	r2, #8
 800243a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <DHCP_init+0xc0>)
 800243e:	22dc      	movs	r2, #220	; 0xdc
 8002440:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <DHCP_init+0xc0>)
 8002444:	2200      	movs	r2, #0
 8002446:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <DHCP_init+0xc0>)
 800244a:	2200      	movs	r2, #0
 800244c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <DHCP_init+0xc0>)
 8002450:	2200      	movs	r2, #0
 8002452:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002454:	2206      	movs	r2, #6
 8002456:	4913      	ldr	r1, [pc, #76]	; (80024a4 <DHCP_init+0xc0>)
 8002458:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800245c:	f000 fa02 	bl	8002864 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <DHCP_init+0xc4>)
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002466:	4a11      	ldr	r2, [pc, #68]	; (80024ac <DHCP_init+0xc8>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <DHCP_init+0xcc>)
 800246e:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <DHCP_init+0xd0>)
 8002470:	601a      	str	r2, [r3, #0]

	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	2204      	movs	r2, #4
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800247e:	f000 f9f1 	bl	8002864 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	2204      	movs	r2, #4
 8002488:	4619      	mov	r1, r3
 800248a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800248e:	f000 f9e9 	bl	8002864 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002492:	f000 f813 	bl	80024bc <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <DHCP_init+0xd4>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000274 	.word	0x20000274
 80024a8:	20000248 	.word	0x20000248
 80024ac:	20000270 	.word	0x20000270
 80024b0:	2000026c 	.word	0x2000026c
 80024b4:	12345678 	.word	0x12345678
 80024b8:	20000264 	.word	0x20000264

080024bc <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <reset_DHCP_timeout+0x20>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <reset_DHCP_timeout+0x24>)
 80024c8:	220a      	movs	r2, #10
 80024ca:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <reset_DHCP_timeout+0x28>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	20000268 	.word	0x20000268
 80024e0:	20000004 	.word	0x20000004
 80024e4:	20000265 	.word	0x20000265

080024e8 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <DHCP_time_handler+0x18>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	4a03      	ldr	r2, [pc, #12]	; (8002500 <DHCP_time_handler+0x18>)
 80024f4:	6013      	str	r3, [r2, #0]
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	20000268 	.word	0x20000268

08002504 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <getIPfromDHCP+0x3c>)
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3301      	adds	r3, #1
 8002518:	4a09      	ldr	r2, [pc, #36]	; (8002540 <getIPfromDHCP+0x3c>)
 800251a:	7852      	ldrb	r2, [r2, #1]
 800251c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3302      	adds	r3, #2
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <getIPfromDHCP+0x3c>)
 8002524:	7892      	ldrb	r2, [r2, #2]
 8002526:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3303      	adds	r3, #3
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <getIPfromDHCP+0x3c>)
 800252e:	78d2      	ldrb	r2, [r2, #3]
 8002530:	701a      	strb	r2, [r3, #0]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000254 	.word	0x20000254

08002544 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <getGWfromDHCP+0x3c>)
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3301      	adds	r3, #1
 8002558:	4a09      	ldr	r2, [pc, #36]	; (8002580 <getGWfromDHCP+0x3c>)
 800255a:	7852      	ldrb	r2, [r2, #1]
 800255c:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3302      	adds	r3, #2
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <getGWfromDHCP+0x3c>)
 8002564:	7892      	ldrb	r2, [r2, #2]
 8002566:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3303      	adds	r3, #3
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <getGWfromDHCP+0x3c>)
 800256e:	78d2      	ldrb	r2, [r2, #3]
 8002570:	701a      	strb	r2, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000258 	.word	0x20000258

08002584 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <getSNfromDHCP+0x3c>)
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3301      	adds	r3, #1
 8002598:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <getSNfromDHCP+0x3c>)
 800259a:	7852      	ldrb	r2, [r2, #1]
 800259c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3302      	adds	r3, #2
 80025a2:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <getSNfromDHCP+0x3c>)
 80025a4:	7892      	ldrb	r2, [r2, #2]
 80025a6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3303      	adds	r3, #3
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <getSNfromDHCP+0x3c>)
 80025ae:	78d2      	ldrb	r2, [r2, #3]
 80025b0:	701a      	strb	r2, [r3, #0]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	2000025c 	.word	0x2000025c

080025c4 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a09      	ldr	r2, [pc, #36]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025da:	7852      	ldrb	r2, [r2, #1]
 80025dc:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3302      	adds	r3, #2
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025e4:	7892      	ldrb	r2, [r2, #2]
 80025e6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3303      	adds	r3, #3
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <getDNSfromDHCP+0x3c>)
 80025ee:	78d2      	ldrb	r2, [r2, #3]
 80025f0:	701a      	strb	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000260 	.word	0x20000260

08002604 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	2b09      	cmp	r3, #9
 800261a:	d803      	bhi.n	8002624 <NibbleToHex+0x20>
    return nibble + '0';
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	3330      	adds	r3, #48	; 0x30
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e002      	b.n	800262a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	3337      	adds	r3, #55	; 0x37
 8002628:	b2db      	uxtb	r3, r3
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <DNS_init+0x2c>)
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <DNS_init+0x30>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <DNS_init+0x34>)
 8002652:	f241 1222 	movw	r2, #4386	; 0x1122
 8002656:	801a      	strh	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	20000280 	.word	0x20000280
 8002668:	2000027c 	.word	0x2000027c
 800266c:	20000282 	.word	0x20000282

08002670 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <WIZCHIP_READ+0x94>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800267e:	4b21      	ldr	r3, [pc, #132]	; (8002704 <WIZCHIP_READ+0x94>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <WIZCHIP_READ+0x94>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <WIZCHIP_READ+0x24>
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <WIZCHIP_READ+0x94>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d114      	bne.n	80026be <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <WIZCHIP_READ+0x94>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	0c12      	lsrs	r2, r2, #16
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	4610      	mov	r0, r2
 80026a0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <WIZCHIP_READ+0x94>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	0a12      	lsrs	r2, r2, #8
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	4610      	mov	r0, r2
 80026ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <WIZCHIP_READ+0x94>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4610      	mov	r0, r2
 80026ba:	4798      	blx	r3
 80026bc:	e011      	b.n	80026e2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <WIZCHIP_READ+0x94>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	f107 020c 	add.w	r2, r7, #12
 80026dc:	2103      	movs	r1, #3
 80026de:	4610      	mov	r0, r2
 80026e0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <WIZCHIP_READ+0x94>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	4798      	blx	r3
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <WIZCHIP_READ+0x94>)
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <WIZCHIP_READ+0x94>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4798      	blx	r3
   return ret;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000020 	.word	0x20000020

08002708 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4798      	blx	r3
   WIZCHIP.CS._select();
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b00      	cmp	r3, #0
 800272e:	d119      	bne.n	8002764 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	0c12      	lsrs	r2, r2, #16
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	4610      	mov	r0, r2
 800273c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	0a12      	lsrs	r2, r2, #8
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	4610      	mov	r0, r2
 800274a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4610      	mov	r0, r2
 8002756:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	4610      	mov	r0, r2
 8002760:	4798      	blx	r3
 8002762:	e013      	b.n	800278c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	b2db      	uxtb	r3, r3
 800276a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	b2db      	uxtb	r3, r3
 8002772:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	2104      	movs	r1, #4
 8002788:	4610      	mov	r0, r2
 800278a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002792:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <WIZCHIP_WRITE+0x98>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	4798      	blx	r3
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000020 	.word	0x20000020

080027a4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80027b2:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80027b8:	4b29      	ldr	r3, [pc, #164]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <WIZCHIP_READ_BUF+0x2a>
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d126      	bne.n	800281c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	0c12      	lsrs	r2, r2, #16
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	4610      	mov	r0, r2
 80027da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	0a12      	lsrs	r2, r2, #8
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	4610      	mov	r0, r2
 80027e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	4610      	mov	r0, r2
 80027f4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	82fb      	strh	r3, [r7, #22]
 80027fa:	e00a      	b.n	8002812 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	8afa      	ldrh	r2, [r7, #22]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	188c      	adds	r4, r1, r2
 8002806:	4798      	blx	r3
 8002808:	4603      	mov	r3, r0
 800280a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800280c:	8afb      	ldrh	r3, [r7, #22]
 800280e:	3301      	adds	r3, #1
 8002810:	82fb      	strh	r3, [r7, #22]
 8002812:	8afa      	ldrh	r2, [r7, #22]
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	429a      	cmp	r2, r3
 8002818:	d3f0      	bcc.n	80027fc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800281a:	e017      	b.n	800284c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	b2db      	uxtb	r3, r3
 8002822:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b2db      	uxtb	r3, r3
 800282a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f107 0210 	add.w	r2, r7, #16
 800283a:	2103      	movs	r1, #3
 800283c:	4610      	mov	r0, r2
 800283e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	4611      	mov	r1, r2
 8002848:	68b8      	ldr	r0, [r7, #8]
 800284a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002852:	4b03      	ldr	r3, [pc, #12]	; (8002860 <WIZCHIP_READ_BUF+0xbc>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	4798      	blx	r3
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}
 8002860:	20000020 	.word	0x20000020

08002864 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002878:	4b29      	ldr	r3, [pc, #164]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002886:	4b26      	ldr	r3, [pc, #152]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d126      	bne.n	80028dc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	0c12      	lsrs	r2, r2, #16
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	4610      	mov	r0, r2
 800289a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800289c:	4b20      	ldr	r3, [pc, #128]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	0a12      	lsrs	r2, r2, #8
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	4610      	mov	r0, r2
 80028a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4610      	mov	r0, r2
 80028b4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	82fb      	strh	r3, [r7, #22]
 80028ba:	e00a      	b.n	80028d2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	8afa      	ldrh	r2, [r7, #22]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	440a      	add	r2, r1
 80028c6:	7812      	ldrb	r2, [r2, #0]
 80028c8:	4610      	mov	r0, r2
 80028ca:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80028cc:	8afb      	ldrh	r3, [r7, #22]
 80028ce:	3301      	adds	r3, #1
 80028d0:	82fb      	strh	r3, [r7, #22]
 80028d2:	8afa      	ldrh	r2, [r7, #22]
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3f0      	bcc.n	80028bc <WIZCHIP_WRITE_BUF+0x58>
 80028da:	e017      	b.n	800290c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f107 0210 	add.w	r2, r7, #16
 80028fa:	2103      	movs	r1, #3
 80028fc:	4610      	mov	r0, r2
 80028fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	88fa      	ldrh	r2, [r7, #6]
 8002906:	4611      	mov	r1, r2
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002912:	4b03      	ldr	r3, [pc, #12]	; (8002920 <WIZCHIP_WRITE_BUF+0xbc>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4798      	blx	r3
}
 8002918:	bf00      	nop
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000020 	.word	0x20000020

08002924 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800292e:	2300      	movs	r3, #0
 8002930:	81fb      	strh	r3, [r7, #14]
 8002932:	2300      	movs	r3, #0
 8002934:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3301      	adds	r3, #1
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fe94 	bl	8002670 <WIZCHIP_READ>
 8002948:	4603      	mov	r3, r0
 800294a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800294c:	89bb      	ldrh	r3, [r7, #12]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	b29c      	uxth	r4, r3
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	3301      	adds	r3, #1
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fe86 	bl	8002670 <WIZCHIP_READ>
 8002964:	4603      	mov	r3, r0
 8002966:	b29b      	uxth	r3, r3
 8002968:	4423      	add	r3, r4
 800296a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800296c:	89bb      	ldrh	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01a      	beq.n	80029a8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	3301      	adds	r3, #1
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fe76 	bl	8002670 <WIZCHIP_READ>
 8002984:	4603      	mov	r3, r0
 8002986:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002988:	89fb      	ldrh	r3, [r7, #14]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	b29c      	uxth	r4, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	3301      	adds	r3, #1
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fe68 	bl	8002670 <WIZCHIP_READ>
 80029a0:	4603      	mov	r3, r0
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4423      	add	r3, r4
 80029a6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80029a8:	89fa      	ldrh	r2, [r7, #14]
 80029aa:	89bb      	ldrh	r3, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1c2      	bne.n	8002936 <getSn_TX_FSR+0x12>
   return val;
 80029b0:	89fb      	ldrh	r3, [r7, #14]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd90      	pop	{r4, r7, pc}

080029ba <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80029ba:	b590      	push	{r4, r7, lr}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	81fb      	strh	r3, [r7, #14]
 80029c8:	2300      	movs	r3, #0
 80029ca:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3301      	adds	r3, #1
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fe49 	bl	8002670 <WIZCHIP_READ>
 80029de:	4603      	mov	r3, r0
 80029e0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80029e2:	89bb      	ldrh	r3, [r7, #12]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	b29c      	uxth	r4, r3
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	3301      	adds	r3, #1
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fe3b 	bl	8002670 <WIZCHIP_READ>
 80029fa:	4603      	mov	r3, r0
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4423      	add	r3, r4
 8002a00:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002a02:	89bb      	ldrh	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01a      	beq.n	8002a3e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fe2b 	bl	8002670 <WIZCHIP_READ>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a1e:	89fb      	ldrh	r3, [r7, #14]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	b29c      	uxth	r4, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	3301      	adds	r3, #1
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fe1d 	bl	8002670 <WIZCHIP_READ>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4423      	add	r3, r4
 8002a3c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002a3e:	89fa      	ldrh	r2, [r7, #14]
 8002a40:	89bb      	ldrh	r3, [r7, #12]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d1c2      	bne.n	80029cc <getSn_RX_RSR+0x12>
   return val;
 8002a46:	89fb      	ldrh	r3, [r7, #14]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}

08002a50 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d048      	beq.n	8002b00 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3301      	adds	r3, #1
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fdf8 	bl	8002670 <WIZCHIP_READ>
 8002a80:	4603      	mov	r3, r0
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b29c      	uxth	r4, r3
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fdeb 	bl	8002670 <WIZCHIP_READ>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	4423      	add	r3, r4
 8002aa0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002aa2:	89fb      	ldrh	r3, [r7, #14]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	79fa      	ldrb	r2, [r7, #7]
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	3202      	adds	r2, #2
 8002aac:	00d2      	lsls	r2, r2, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002ab2:	88bb      	ldrh	r3, [r7, #4]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6839      	ldr	r1, [r7, #0]
 8002ab8:	68b8      	ldr	r0, [r7, #8]
 8002aba:	f7ff fed3 	bl	8002864 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002abe:	89fa      	ldrh	r2, [r7, #14]
 8002ac0:	88bb      	ldrh	r3, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	3301      	adds	r3, #1
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7ff fe12 	bl	8002708 <WIZCHIP_WRITE>
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	3301      	adds	r3, #1
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002af0:	461a      	mov	r2, r3
 8002af2:	89fb      	ldrh	r3, [r7, #14]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff fe05 	bl	8002708 <WIZCHIP_WRITE>
 8002afe:	e000      	b.n	8002b02 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002b00:	bf00      	nop
}
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd90      	pop	{r4, r7, pc}

08002b08 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002b20:	88bb      	ldrh	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d048      	beq.n	8002bb8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fd9c 	bl	8002670 <WIZCHIP_READ>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	b29c      	uxth	r4, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	3301      	adds	r3, #1
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fd8f 	bl	8002670 <WIZCHIP_READ>
 8002b52:	4603      	mov	r3, r0
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	4423      	add	r3, r4
 8002b58:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	79fa      	ldrb	r2, [r7, #7]
 8002b60:	0092      	lsls	r2, r2, #2
 8002b62:	3203      	adds	r2, #3
 8002b64:	00d2      	lsls	r2, r2, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002b6a:	88bb      	ldrh	r3, [r7, #4]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	68b8      	ldr	r0, [r7, #8]
 8002b72:	f7ff fe17 	bl	80027a4 <WIZCHIP_READ_BUF>
   ptr += len;
 8002b76:	89fa      	ldrh	r2, [r7, #14]
 8002b78:	88bb      	ldrh	r3, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	3301      	adds	r3, #1
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	89fb      	ldrh	r3, [r7, #14]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f7ff fdb6 	bl	8002708 <WIZCHIP_WRITE>
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002ba8:	461a      	mov	r2, r3
 8002baa:	89fb      	ldrh	r3, [r7, #14]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f7ff fda9 	bl	8002708 <WIZCHIP_WRITE>
 8002bb6:	e000      	b.n	8002bba <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002bb8:	bf00      	nop
}
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd90      	pop	{r4, r7, pc}

08002bc0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	460a      	mov	r2, r1
 8002bca:	71fb      	strb	r3, [r7, #7]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	3301      	adds	r3, #1
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fd45 	bl	8002670 <WIZCHIP_READ>
 8002be6:	4603      	mov	r3, r0
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	b29c      	uxth	r4, r3
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fd38 	bl	8002670 <WIZCHIP_READ>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4423      	add	r3, r4
 8002c06:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8002c08:	89fa      	ldrh	r2, [r7, #14]
 8002c0a:	88bb      	ldrh	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	3301      	adds	r3, #1
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	89fb      	ldrh	r3, [r7, #14]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f7ff fd6d 	bl	8002708 <WIZCHIP_WRITE>
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	3301      	adds	r3, #1
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	89fb      	ldrh	r3, [r7, #14]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f7ff fd60 	bl	8002708 <WIZCHIP_WRITE>
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}

08002c50 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4604      	mov	r4, r0
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4623      	mov	r3, r4
 8002c60:	71fb      	strb	r3, [r7, #7]
 8002c62:	4603      	mov	r3, r0
 8002c64:	71bb      	strb	r3, [r7, #6]
 8002c66:	460b      	mov	r3, r1
 8002c68:	80bb      	strh	r3, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d902      	bls.n	8002c7a <socket+0x2a>
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295
 8002c78:	e0f0      	b.n	8002e5c <socket+0x20c>
	switch(protocol)
 8002c7a:	79bb      	ldrb	r3, [r7, #6]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d005      	beq.n	8002c8c <socket+0x3c>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	dd11      	ble.n	8002ca8 <socket+0x58>
 8002c84:	3b02      	subs	r3, #2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d80e      	bhi.n	8002ca8 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002c8a:	e010      	b.n	8002cae <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	2204      	movs	r2, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002c98:	f7ff fd84 	bl	80027a4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <socket+0x5e>
 8002ca2:	f06f 0302 	mvn.w	r3, #2
 8002ca6:	e0d9      	b.n	8002e5c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002ca8:	f06f 0304 	mvn.w	r3, #4
 8002cac:	e0d6      	b.n	8002e5c <socket+0x20c>
         break;
 8002cae:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <socket+0x70>
 8002cba:	f06f 0305 	mvn.w	r3, #5
 8002cbe:	e0cd      	b.n	8002e5c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d028      	beq.n	8002d18 <socket+0xc8>
	{
   	switch(protocol)
 8002cc6:	79bb      	ldrb	r3, [r7, #6]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d002      	beq.n	8002cd2 <socket+0x82>
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d008      	beq.n	8002ce2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002cd0:	e022      	b.n	8002d18 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11a      	bne.n	8002d12 <socket+0xc2>
 8002cdc:	f06f 0305 	mvn.w	r3, #5
 8002ce0:	e0bc      	b.n	8002e5c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db02      	blt.n	8002cfa <socket+0xaa>
 8002cf4:	f06f 0305 	mvn.w	r3, #5
 8002cf8:	e0b0      	b.n	8002e5c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db04      	blt.n	8002d16 <socket+0xc6>
 8002d0c:	f06f 0305 	mvn.w	r3, #5
 8002d10:	e0a4      	b.n	8002e5c <socket+0x20c>
   	      break;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <socket+0xc8>
   	      break;
 8002d16:	bf00      	nop
   	}
   }
	close(sn);
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f8ac 	bl	8002e78 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	3301      	adds	r3, #1
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2e:	f023 030f 	bic.w	r3, r3, #15
 8002d32:	b25a      	sxtb	r2, r3
 8002d34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7ff fce2 	bl	8002708 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002d44:	88bb      	ldrh	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d110      	bne.n	8002d6c <socket+0x11c>
	{
	   port = sock_any_port++;
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <socket+0x214>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	b291      	uxth	r1, r2
 8002d52:	4a44      	ldr	r2, [pc, #272]	; (8002e64 <socket+0x214>)
 8002d54:	8011      	strh	r1, [r2, #0]
 8002d56:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002d58:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <socket+0x214>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d103      	bne.n	8002d6c <socket+0x11c>
 8002d64:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <socket+0x214>)
 8002d66:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002d6a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	3301      	adds	r3, #1
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d78:	461a      	mov	r2, r3
 8002d7a:	88bb      	ldrh	r3, [r7, #4]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f7ff fcbf 	bl	8002708 <WIZCHIP_WRITE>
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	3301      	adds	r3, #1
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d96:	461a      	mov	r2, r3
 8002d98:	88bb      	ldrh	r3, [r7, #4]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f7ff fcb2 	bl	8002708 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	3301      	adds	r3, #1
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fca8 	bl	8002708 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002db8:	bf00      	nop
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fc52 	bl	8002670 <WIZCHIP_READ>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f3      	bne.n	8002dba <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <socket+0x218>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	4013      	ands	r3, r2
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <socket+0x218>)
 8002dee:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	f003 0201 	and.w	r2, r3, #1
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	b21a      	sxth	r2, r3
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <socket+0x218>)
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b21b      	sxth	r3, r3
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <socket+0x218>)
 8002e0c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	2201      	movs	r2, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <socket+0x21c>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	4013      	ands	r3, r2
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <socket+0x21c>)
 8002e2a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <socket+0x220>)
 8002e30:	2100      	movs	r1, #0
 8002e32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <socket+0x224>)
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002e3e:	bf00      	nop
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	3301      	adds	r3, #1
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fc0f 	bl	8002670 <WIZCHIP_READ>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f3      	beq.n	8002e40 <socket+0x1f0>
   return (int8_t)sn;
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd90      	pop	{r4, r7, pc}
 8002e64:	2000001c 	.word	0x2000001c
 8002e68:	20000284 	.word	0x20000284
 8002e6c:	20000286 	.word	0x20000286
 8002e70:	20000288 	.word	0x20000288
 8002e74:	20000298 	.word	0x20000298

08002e78 <close>:

int8_t close(uint8_t sn)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d902      	bls.n	8002e8e <close+0x16>
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8c:	e055      	b.n	8002f3a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	3301      	adds	r3, #1
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e9a:	2110      	movs	r1, #16
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fc33 	bl	8002708 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002ea2:	bf00      	nop
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fbdd 	bl	8002670 <WIZCHIP_READ>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f3      	bne.n	8002ea4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ec8:	211f      	movs	r1, #31
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fc1c 	bl	8002708 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <close+0xcc>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <close+0xcc>)
 8002eec:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	b21a      	sxth	r2, r3
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <close+0xd0>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	4013      	ands	r3, r2
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <close+0xd0>)
 8002f0a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <close+0xd4>)
 8002f10:	2100      	movs	r1, #0
 8002f12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <close+0xd8>)
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002f1e:	bf00      	nop
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3301      	adds	r3, #1
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fb9f 	bl	8002670 <WIZCHIP_READ>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f3      	bne.n	8002f20 <close+0xa8>
	return SOCK_OK;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000284 	.word	0x20000284
 8002f48:	20000286 	.word	0x20000286
 8002f4c:	20000288 	.word	0x20000288
 8002f50:	20000298 	.word	0x20000298

08002f54 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
 8002f60:	4613      	mov	r3, r2
 8002f62:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d902      	bls.n	8002f70 <connect+0x1c>
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	e0c6      	b.n	80030fe <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	3301      	adds	r3, #1
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fb79 	bl	8002670 <WIZCHIP_READ>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d002      	beq.n	8002f8e <connect+0x3a>
 8002f88:	f06f 0304 	mvn.w	r3, #4
 8002f8c:	e0b7      	b.n	80030fe <connect+0x1aa>
   CHECK_SOCKINIT();
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	3301      	adds	r3, #1
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fb68 	bl	8002670 <WIZCHIP_READ>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b13      	cmp	r3, #19
 8002fa4:	d002      	beq.n	8002fac <connect+0x58>
 8002fa6:	f06f 0302 	mvn.w	r3, #2
 8002faa:	e0a8      	b.n	80030fe <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	3201      	adds	r2, #1
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	3202      	adds	r2, #2
 8002fc8:	7812      	ldrb	r2, [r2, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	3203      	adds	r2, #3
 8002fd6:	7812      	ldrb	r2, [r2, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d002      	beq.n	8002fea <connect+0x96>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <connect+0x9c>
 8002fea:	f06f 030b 	mvn.w	r3, #11
 8002fee:	e086      	b.n	80030fe <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <connect+0xa8>
 8002ff6:	f06f 030a 	mvn.w	r3, #10
 8002ffa:	e080      	b.n	80030fe <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	3301      	adds	r3, #1
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003008:	2204      	movs	r2, #4
 800300a:	6839      	ldr	r1, [r7, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fc29 	bl	8002864 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	3301      	adds	r3, #1
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301e:	461a      	mov	r2, r3
 8003020:	88bb      	ldrh	r3, [r7, #4]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	b29b      	uxth	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f7ff fb6c 	bl	8002708 <WIZCHIP_WRITE>
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	3301      	adds	r3, #1
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800303c:	461a      	mov	r2, r3
 800303e:	88bb      	ldrh	r3, [r7, #4]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7ff fb5f 	bl	8002708 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3301      	adds	r3, #1
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003056:	2104      	movs	r1, #4
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fb55 	bl	8002708 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800305e:	bf00      	nop
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3301      	adds	r3, #1
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff faff 	bl	8002670 <WIZCHIP_READ>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f3      	bne.n	8003060 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <connect+0x1b4>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	fa42 f303 	asr.w	r3, r2, r3
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d02b      	beq.n	80030e4 <connect+0x190>
 800308c:	2300      	movs	r3, #0
 800308e:	e036      	b.n	80030fe <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3301      	adds	r3, #1
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fae7 	bl	8002670 <WIZCHIP_READ>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00c      	beq.n	80030c6 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3301      	adds	r3, #1
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80030b8:	2108      	movs	r1, #8
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fb24 	bl	8002708 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80030c0:	f06f 030c 	mvn.w	r3, #12
 80030c4:	e01b      	b.n	80030fe <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	3301      	adds	r3, #1
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff facc 	bl	8002670 <WIZCHIP_READ>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80030de:	f06f 0303 	mvn.w	r3, #3
 80030e2:	e00c      	b.n	80030fe <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	3301      	adds	r3, #1
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fabd 	bl	8002670 <WIZCHIP_READ>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b17      	cmp	r3, #23
 80030fa:	d1c9      	bne.n	8003090 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80030fc:	2301      	movs	r3, #1
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000284 	.word	0x20000284

0800310c <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d902      	bls.n	8003122 <disconnect+0x16>
 800311c:	f04f 33ff 	mov.w	r3, #4294967295
 8003120:	e062      	b.n	80031e8 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	3301      	adds	r3, #1
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff faa0 	bl	8002670 <WIZCHIP_READ>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	2b01      	cmp	r3, #1
 8003138:	d002      	beq.n	8003140 <disconnect+0x34>
 800313a:	f06f 0304 	mvn.w	r3, #4
 800313e:	e053      	b.n	80031e8 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	3301      	adds	r3, #1
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800314c:	2108      	movs	r1, #8
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fada 	bl	8002708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003154:	bf00      	nop
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	3301      	adds	r3, #1
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fa84 	bl	8002670 <WIZCHIP_READ>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f3      	bne.n	8003156 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2201      	movs	r2, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	b21b      	sxth	r3, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	b21a      	sxth	r2, r3
 800317c:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <disconnect+0xe4>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b21b      	sxth	r3, r3
 8003182:	4013      	ands	r3, r2
 8003184:	b21b      	sxth	r3, r3
 8003186:	b29a      	uxth	r2, r3
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <disconnect+0xe4>)
 800318a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <disconnect+0xe8>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	fa42 f303 	asr.w	r3, r2, r3
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <disconnect+0xc2>
 80031a0:	2300      	movs	r3, #0
 80031a2:	e021      	b.n	80031e8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	3301      	adds	r3, #1
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fa5d 	bl	8002670 <WIZCHIP_READ>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <disconnect+0xc2>
	   {
	      close(sn);
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fe58 	bl	8002e78 <close>
	      return SOCKERR_TIMEOUT;
 80031c8:	f06f 030c 	mvn.w	r3, #12
 80031cc:	e00c      	b.n	80031e8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	3301      	adds	r3, #1
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fa48 	bl	8002670 <WIZCHIP_READ>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1de      	bne.n	80031a4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000286 	.word	0x20000286
 80031f4:	20000284 	.word	0x20000284

080031f8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	6039      	str	r1, [r7, #0]
 8003202:	71fb      	strb	r3, [r7, #7]
 8003204:	4613      	mov	r3, r2
 8003206:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800320c:	2300      	movs	r3, #0
 800320e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	2b08      	cmp	r3, #8
 8003214:	d902      	bls.n	800321c <send+0x24>
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e0de      	b.n	80033da <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	3301      	adds	r3, #1
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fa23 	bl	8002670 <WIZCHIP_READ>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	2b01      	cmp	r3, #1
 8003232:	d002      	beq.n	800323a <send+0x42>
 8003234:	f06f 0304 	mvn.w	r3, #4
 8003238:	e0cf      	b.n	80033da <send+0x1e2>
   CHECK_SOCKDATA();
 800323a:	88bb      	ldrh	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <send+0x4e>
 8003240:	f06f 030d 	mvn.w	r3, #13
 8003244:	e0c9      	b.n	80033da <send+0x1e2>
   tmp = getSn_SR(sn);
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	3301      	adds	r3, #1
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fa0c 	bl	8002670 <WIZCHIP_READ>
 8003258:	4603      	mov	r3, r0
 800325a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b17      	cmp	r3, #23
 8003260:	d005      	beq.n	800326e <send+0x76>
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b1c      	cmp	r3, #28
 8003266:	d002      	beq.n	800326e <send+0x76>
 8003268:	f06f 0306 	mvn.w	r3, #6
 800326c:	e0b5      	b.n	80033da <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800326e:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <send+0x1ec>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	fa42 f303 	asr.w	r3, r2, r3
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d039      	beq.n	80032f6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3301      	adds	r3, #1
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f9ee 	bl	8002670 <WIZCHIP_READ>
 8003294:	4603      	mov	r3, r0
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d019      	beq.n	80032da <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	3301      	adds	r3, #1
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80032b2:	2110      	movs	r1, #16
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fa27 	bl	8002708 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2201      	movs	r2, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	b21b      	sxth	r3, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <send+0x1ec>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b21b      	sxth	r3, r3
 80032ce:	4013      	ands	r3, r2
 80032d0:	b21b      	sxth	r3, r3
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <send+0x1ec>)
 80032d6:	801a      	strh	r2, [r3, #0]
 80032d8:	e00d      	b.n	80032f6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <send+0xfa>
      {
         close(sn);
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fdc6 	bl	8002e78 <close>
         return SOCKERR_TIMEOUT;
 80032ec:	f06f 030c 	mvn.w	r3, #12
 80032f0:	e073      	b.n	80033da <send+0x1e2>
      }
      else return SOCK_BUSY;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e071      	b.n	80033da <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3301      	adds	r3, #1
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff f9b4 	bl	8002670 <WIZCHIP_READ>
 8003308:	4603      	mov	r3, r0
 800330a:	b29b      	uxth	r3, r3
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003310:	88ba      	ldrh	r2, [r7, #4]
 8003312:	89bb      	ldrh	r3, [r7, #12]
 8003314:	429a      	cmp	r2, r3
 8003316:	d901      	bls.n	800331c <send+0x124>
 8003318:	89bb      	ldrh	r3, [r7, #12]
 800331a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fb00 	bl	8002924 <getSn_TX_FSR>
 8003324:	4603      	mov	r3, r0
 8003326:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	3301      	adds	r3, #1
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff f99b 	bl	8002670 <WIZCHIP_READ>
 800333a:	4603      	mov	r3, r0
 800333c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b17      	cmp	r3, #23
 8003342:	d009      	beq.n	8003358 <send+0x160>
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b1c      	cmp	r3, #28
 8003348:	d006      	beq.n	8003358 <send+0x160>
      {
         close(sn);
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fd93 	bl	8002e78 <close>
         return SOCKERR_SOCKSTATUS;
 8003352:	f06f 0306 	mvn.w	r3, #6
 8003356:	e040      	b.n	80033da <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <send+0x1f0>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	fa42 f303 	asr.w	r3, r2, r3
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <send+0x180>
 800336c:	88ba      	ldrh	r2, [r7, #4]
 800336e:	89bb      	ldrh	r3, [r7, #12]
 8003370:	429a      	cmp	r2, r3
 8003372:	d901      	bls.n	8003378 <send+0x180>
 8003374:	2300      	movs	r3, #0
 8003376:	e030      	b.n	80033da <send+0x1e2>
      if(len <= freesize) break;
 8003378:	88ba      	ldrh	r2, [r7, #4]
 800337a:	89bb      	ldrh	r3, [r7, #12]
 800337c:	429a      	cmp	r2, r3
 800337e:	d900      	bls.n	8003382 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8003380:	e7cc      	b.n	800331c <send+0x124>
      if(len <= freesize) break;
 8003382:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003384:	88ba      	ldrh	r2, [r7, #4]
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fb60 	bl	8002a50 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	3301      	adds	r3, #1
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800339c:	2120      	movs	r1, #32
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff f9b2 	bl	8002708 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80033a4:	bf00      	nop
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	3301      	adds	r3, #1
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f95c 	bl	8002670 <WIZCHIP_READ>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f3      	bne.n	80033a6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	2201      	movs	r2, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	b21a      	sxth	r2, r3
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <send+0x1ec>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <send+0x1ec>)
 80033d6:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80033d8:	88bb      	ldrh	r3, [r7, #4]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000286 	.word	0x20000286
 80033e8:	20000284 	.word	0x20000284

080033ec <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	71fb      	strb	r3, [r7, #7]
 80033f8:	4613      	mov	r3, r2
 80033fa:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b08      	cmp	r3, #8
 8003408:	d902      	bls.n	8003410 <recv+0x24>
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	e09c      	b.n	800354a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	3301      	adds	r3, #1
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f929 	bl	8002670 <WIZCHIP_READ>
 800341e:	4603      	mov	r3, r0
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	2b01      	cmp	r3, #1
 8003426:	d002      	beq.n	800342e <recv+0x42>
 8003428:	f06f 0304 	mvn.w	r3, #4
 800342c:	e08d      	b.n	800354a <recv+0x15e>
   CHECK_SOCKDATA();
 800342e:	88bb      	ldrh	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <recv+0x4e>
 8003434:	f06f 030d 	mvn.w	r3, #13
 8003438:	e087      	b.n	800354a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	3301      	adds	r3, #1
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff f912 	bl	8002670 <WIZCHIP_READ>
 800344c:	4603      	mov	r3, r0
 800344e:	b29b      	uxth	r3, r3
 8003450:	029b      	lsls	r3, r3, #10
 8003452:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003454:	89ba      	ldrh	r2, [r7, #12]
 8003456:	88bb      	ldrh	r3, [r7, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	d201      	bcs.n	8003460 <recv+0x74>
 800345c:	89bb      	ldrh	r3, [r7, #12]
 800345e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff faa9 	bl	80029ba <getSn_RX_RSR>
 8003468:	4603      	mov	r3, r0
 800346a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	3301      	adds	r3, #1
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff f8f9 	bl	8002670 <WIZCHIP_READ>
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b17      	cmp	r3, #23
 8003486:	d026      	beq.n	80034d6 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b1c      	cmp	r3, #28
 800348c:	d11c      	bne.n	80034c8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800348e:	89bb      	ldrh	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d133      	bne.n	80034fc <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fa44 	bl	8002924 <getSn_TX_FSR>
 800349c:	4603      	mov	r3, r0
 800349e:	461c      	mov	r4, r3
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	3301      	adds	r3, #1
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff f8df 	bl	8002670 <WIZCHIP_READ>
 80034b2:	4603      	mov	r3, r0
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	429c      	cmp	r4, r3
 80034b8:	d10d      	bne.n	80034d6 <recv+0xea>
               {
                  close(sn);
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fcdb 	bl	8002e78 <close>
                  return SOCKERR_SOCKSTATUS;
 80034c2:	f06f 0306 	mvn.w	r3, #6
 80034c6:	e040      	b.n	800354a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fcd4 	bl	8002e78 <close>
               return SOCKERR_SOCKSTATUS;
 80034d0:	f06f 0306 	mvn.w	r3, #6
 80034d4:	e039      	b.n	800354a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80034d6:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <recv+0x168>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	fa42 f303 	asr.w	r3, r2, r3
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <recv+0x108>
 80034ea:	89bb      	ldrh	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <recv+0x108>
 80034f0:	2300      	movs	r3, #0
 80034f2:	e02a      	b.n	800354a <recv+0x15e>
         if(recvsize != 0) break;
 80034f4:	89bb      	ldrh	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80034fa:	e7b1      	b.n	8003460 <recv+0x74>
               if(recvsize != 0) break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <recv+0x116>
         if(recvsize != 0) break;
 8003500:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003502:	89ba      	ldrh	r2, [r7, #12]
 8003504:	88bb      	ldrh	r3, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d201      	bcs.n	800350e <recv+0x122>
 800350a:	89bb      	ldrh	r3, [r7, #12]
 800350c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800350e:	88ba      	ldrh	r2, [r7, #4]
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	6839      	ldr	r1, [r7, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff faf7 	bl	8002b08 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	3301      	adds	r3, #1
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003526:	2140      	movs	r1, #64	; 0x40
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f8ed 	bl	8002708 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800352e:	bf00      	nop
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3301      	adds	r3, #1
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff f897 	bl	8002670 <WIZCHIP_READ>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f3      	bne.n	8003530 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003548:	88bb      	ldrh	r3, [r7, #4]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bd90      	pop	{r4, r7, pc}
 8003552:	bf00      	nop
 8003554:	20000284 	.word	0x20000284

08003558 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	4603      	mov	r3, r0
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	4613      	mov	r3, r2
 8003568:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d902      	bls.n	800357e <sendto+0x26>
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	e11b      	b.n	80037b6 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	3301      	adds	r3, #1
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f872 	bl	8002670 <WIZCHIP_READ>
 800358c:	4603      	mov	r3, r0
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3b02      	subs	r3, #2
 8003594:	2b02      	cmp	r3, #2
 8003596:	d902      	bls.n	800359e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003598:	f06f 0304 	mvn.w	r3, #4
 800359c:	e10b      	b.n	80037b6 <sendto+0x25e>
         break;
 800359e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80035a0:	89bb      	ldrh	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <sendto+0x54>
 80035a6:	f06f 030d 	mvn.w	r3, #13
 80035aa:	e104      	b.n	80037b6 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	3201      	adds	r2, #1
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	3202      	adds	r2, #2
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	3203      	adds	r2, #3
 80035d6:	7812      	ldrb	r2, [r2, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10e      	bne.n	8003600 <sendto+0xa8>
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3301      	adds	r3, #1
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff f840 	bl	8002670 <WIZCHIP_READ>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d002      	beq.n	8003600 <sendto+0xa8>
 80035fa:	f06f 030b 	mvn.w	r3, #11
 80035fe:	e0da      	b.n	80037b6 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8003600:	8c3b      	ldrh	r3, [r7, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <sendto+0xcc>
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	3301      	adds	r3, #1
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f82e 	bl	8002670 <WIZCHIP_READ>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d002      	beq.n	8003624 <sendto+0xcc>
 800361e:	f06f 030a 	mvn.w	r3, #10
 8003622:	e0c8      	b.n	80037b6 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3301      	adds	r3, #1
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f81d 	bl	8002670 <WIZCHIP_READ>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	2b42      	cmp	r3, #66	; 0x42
 800363e:	d008      	beq.n	8003652 <sendto+0xfa>
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b22      	cmp	r3, #34	; 0x22
 8003644:	d005      	beq.n	8003652 <sendto+0xfa>
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b32      	cmp	r3, #50	; 0x32
 800364a:	d002      	beq.n	8003652 <sendto+0xfa>
 800364c:	f06f 0306 	mvn.w	r3, #6
 8003650:	e0b1      	b.n	80037b6 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	3301      	adds	r3, #1
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800365e:	2204      	movs	r2, #4
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f8fe 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3301      	adds	r3, #1
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003674:	461a      	mov	r2, r3
 8003676:	8c3b      	ldrh	r3, [r7, #32]
 8003678:	0a1b      	lsrs	r3, r3, #8
 800367a:	b29b      	uxth	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7ff f841 	bl	8002708 <WIZCHIP_WRITE>
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	3301      	adds	r3, #1
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003692:	461a      	mov	r2, r3
 8003694:	8c3b      	ldrh	r3, [r7, #32]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f7ff f834 	bl	8002708 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	3301      	adds	r3, #1
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe ffdf 	bl	8002670 <WIZCHIP_READ>
 80036b2:	4603      	mov	r3, r0
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	029b      	lsls	r3, r3, #10
 80036b8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80036ba:	89ba      	ldrh	r2, [r7, #12]
 80036bc:	8abb      	ldrh	r3, [r7, #20]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d901      	bls.n	80036c6 <sendto+0x16e>
 80036c2:	8abb      	ldrh	r3, [r7, #20]
 80036c4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff f92b 	bl	8002924 <getSn_TX_FSR>
 80036ce:	4603      	mov	r3, r0
 80036d0:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	3301      	adds	r3, #1
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe ffc6 	bl	8002670 <WIZCHIP_READ>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <sendto+0x198>
 80036ea:	f06f 0303 	mvn.w	r3, #3
 80036ee:	e062      	b.n	80037b6 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80036f0:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <sendto+0x268>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	fa42 f303 	asr.w	r3, r2, r3
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <sendto+0x1b8>
 8003704:	89ba      	ldrh	r2, [r7, #12]
 8003706:	8abb      	ldrh	r3, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d901      	bls.n	8003710 <sendto+0x1b8>
 800370c:	2300      	movs	r3, #0
 800370e:	e052      	b.n	80037b6 <sendto+0x25e>
      if(len <= freesize) break;
 8003710:	89ba      	ldrh	r2, [r7, #12]
 8003712:	8abb      	ldrh	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	d900      	bls.n	800371a <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8003718:	e7d5      	b.n	80036c6 <sendto+0x16e>
      if(len <= freesize) break;
 800371a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800371c:	89ba      	ldrh	r2, [r7, #12]
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff f994 	bl	8002a50 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3301      	adds	r3, #1
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003734:	2120      	movs	r1, #32
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe ffe6 	bl	8002708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800373c:	bf00      	nop
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	3301      	adds	r3, #1
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe ff90 	bl	8002670 <WIZCHIP_READ>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f3      	bne.n	800373e <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	3301      	adds	r3, #1
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe ff84 	bl	8002670 <WIZCHIP_READ>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	3301      	adds	r3, #1
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003786:	2110      	movs	r1, #16
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe ffbd 	bl	8002708 <WIZCHIP_WRITE>
         break;
 800378e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003790:	89bb      	ldrh	r3, [r7, #12]
 8003792:	e010      	b.n	80037b6 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0db      	beq.n	8003756 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	3301      	adds	r3, #1
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037aa:	2108      	movs	r1, #8
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe ffab 	bl	8002708 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80037b2:	f06f 030c 	mvn.w	r3, #12
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000284 	.word	0x20000284

080037c4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	4603      	mov	r3, r0
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	4613      	mov	r3, r2
 80037d4:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d902      	bls.n	80037e6 <recvfrom+0x22>
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	e1d4      	b.n	8003b90 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	3301      	adds	r3, #1
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe ff3e 	bl	8002670 <WIZCHIP_READ>
 80037f4:	4603      	mov	r3, r0
 80037f6:	777b      	strb	r3, [r7, #29]
 80037f8:	7f7b      	ldrb	r3, [r7, #29]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3b02      	subs	r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d902      	bls.n	800380a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003804:	f06f 0304 	mvn.w	r3, #4
 8003808:	e1c2      	b.n	8003b90 <recvfrom+0x3cc>
         break;
 800380a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800380c:	89bb      	ldrh	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <recvfrom+0x54>
 8003812:	f06f 030d 	mvn.w	r3, #13
 8003816:	e1bb      	b.n	8003b90 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	4a88      	ldr	r2, [pc, #544]	; (8003a3c <recvfrom+0x278>)
 800381c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d128      	bne.n	8003876 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff f8c7 	bl	80029ba <getSn_RX_RSR>
 800382c:	4603      	mov	r3, r0
 800382e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	3301      	adds	r3, #1
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe ff17 	bl	8002670 <WIZCHIP_READ>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <recvfrom+0x8a>
 8003848:	f06f 0303 	mvn.w	r3, #3
 800384c:	e1a0      	b.n	8003b90 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800384e:	4b7c      	ldr	r3, [pc, #496]	; (8003a40 <recvfrom+0x27c>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	fa42 f303 	asr.w	r3, r2, r3
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <recvfrom+0xa8>
 8003862:	8bfb      	ldrh	r3, [r7, #30]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <recvfrom+0xa8>
 8003868:	2300      	movs	r3, #0
 800386a:	e191      	b.n	8003b90 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800386c:	8bfb      	ldrh	r3, [r7, #30]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d100      	bne.n	8003874 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8003872:	e7d7      	b.n	8003824 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003874:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8003876:	7f7b      	ldrb	r3, [r7, #29]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	2b04      	cmp	r3, #4
 800387e:	d079      	beq.n	8003974 <recvfrom+0x1b0>
 8003880:	2b04      	cmp	r3, #4
 8003882:	f300 8142 	bgt.w	8003b0a <recvfrom+0x346>
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <recvfrom+0xce>
 800388a:	2b03      	cmp	r3, #3
 800388c:	f000 80dc 	beq.w	8003a48 <recvfrom+0x284>
 8003890:	e13b      	b.n	8003b0a <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	4a69      	ldr	r2, [pc, #420]	; (8003a3c <recvfrom+0x278>)
 8003896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d152      	bne.n	8003944 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800389e:	f107 0114 	add.w	r1, r7, #20
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2208      	movs	r2, #8
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff f92e 	bl	8002b08 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	3301      	adds	r3, #1
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038b8:	2140      	movs	r1, #64	; 0x40
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe ff24 	bl	8002708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80038c0:	bf00      	nop
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	3301      	adds	r3, #1
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fece 	bl	8002670 <WIZCHIP_READ>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f3      	bne.n	80038c2 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80038da:	7d3a      	ldrb	r2, [r7, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3301      	adds	r3, #1
 80038e4:	7d7a      	ldrb	r2, [r7, #21]
 80038e6:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3302      	adds	r3, #2
 80038ec:	7dba      	ldrb	r2, [r7, #22]
 80038ee:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3303      	adds	r3, #3
 80038f4:	7dfa      	ldrb	r2, [r7, #23]
 80038f6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80038f8:	7e3b      	ldrb	r3, [r7, #24]
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	b29a      	uxth	r2, r3
 8003908:	7e7b      	ldrb	r3, [r7, #25]
 800390a:	b29b      	uxth	r3, r3
 800390c:	4413      	add	r3, r2
 800390e:	b29a      	uxth	r2, r3
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8003914:	7eba      	ldrb	r2, [r7, #26]
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	b291      	uxth	r1, r2
 800391a:	4a48      	ldr	r2, [pc, #288]	; (8003a3c <recvfrom+0x278>)
 800391c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	4a46      	ldr	r2, [pc, #280]	; (8003a3c <recvfrom+0x278>)
 8003924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	b299      	uxth	r1, r3
 800392c:	7efb      	ldrb	r3, [r7, #27]
 800392e:	b29a      	uxth	r2, r3
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	440a      	add	r2, r1
 8003934:	b291      	uxth	r1, r2
 8003936:	4a41      	ldr	r2, [pc, #260]	; (8003a3c <recvfrom+0x278>)
 8003938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	4a41      	ldr	r2, [pc, #260]	; (8003a44 <recvfrom+0x280>)
 8003940:	2180      	movs	r1, #128	; 0x80
 8003942:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	4a3d      	ldr	r2, [pc, #244]	; (8003a3c <recvfrom+0x278>)
 8003948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800394c:	89ba      	ldrh	r2, [r7, #12]
 800394e:	429a      	cmp	r2, r3
 8003950:	d202      	bcs.n	8003958 <recvfrom+0x194>
 8003952:	89bb      	ldrh	r3, [r7, #12]
 8003954:	83fb      	strh	r3, [r7, #30]
 8003956:	e004      	b.n	8003962 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	4a38      	ldr	r2, [pc, #224]	; (8003a3c <recvfrom+0x278>)
 800395c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003960:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8003962:	8bfb      	ldrh	r3, [r7, #30]
 8003964:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003966:	8bfa      	ldrh	r2, [r7, #30]
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f8cb 	bl	8002b08 <wiz_recv_data>
			break;
 8003972:	e0d6      	b.n	8003b22 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	4a31      	ldr	r2, [pc, #196]	; (8003a3c <recvfrom+0x278>)
 8003978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d146      	bne.n	8003a0e <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8003980:	f107 0114 	add.w	r1, r7, #20
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2202      	movs	r2, #2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f8bd 	bl	8002b08 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	3301      	adds	r3, #1
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe feb3 	bl	8002708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80039a2:	bf00      	nop
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	3301      	adds	r3, #1
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fe5d 	bl	8002670 <WIZCHIP_READ>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f3      	bne.n	80039a4 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80039bc:	7d3a      	ldrb	r2, [r7, #20]
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	b291      	uxth	r1, r2
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <recvfrom+0x278>)
 80039c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <recvfrom+0x278>)
 80039cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	7d7b      	ldrb	r3, [r7, #21]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4413      	add	r3, r2
 80039da:	b29a      	uxth	r2, r3
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	3a02      	subs	r2, #2
 80039e0:	b291      	uxth	r1, r2
 80039e2:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <recvfrom+0x278>)
 80039e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <recvfrom+0x278>)
 80039ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d906      	bls.n	8003a06 <recvfrom+0x242>
   			{
   			   close(sn);
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fa3c 	bl	8002e78 <close>
   			   return SOCKFATAL_PACKLEN;
 8003a00:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8003a04:	e0c4      	b.n	8003b90 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <recvfrom+0x280>)
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <recvfrom+0x278>)
 8003a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a16:	89ba      	ldrh	r2, [r7, #12]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d202      	bcs.n	8003a22 <recvfrom+0x25e>
 8003a1c:	89bb      	ldrh	r3, [r7, #12]
 8003a1e:	83fb      	strh	r3, [r7, #30]
 8003a20:	e004      	b.n	8003a2c <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <recvfrom+0x278>)
 8003a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a2a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003a2c:	8bfa      	ldrh	r2, [r7, #30]
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f868 	bl	8002b08 <wiz_recv_data>
		   break;
 8003a38:	e073      	b.n	8003b22 <recvfrom+0x35e>
 8003a3a:	bf00      	nop
 8003a3c:	20000288 	.word	0x20000288
 8003a40:	20000284 	.word	0x20000284
 8003a44:	20000298 	.word	0x20000298
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	4a53      	ldr	r2, [pc, #332]	; (8003b98 <recvfrom+0x3d4>)
 8003a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d144      	bne.n	8003ade <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8003a54:	f107 0114 	add.w	r1, r7, #20
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2206      	movs	r2, #6
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff f853 	bl	8002b08 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	3301      	adds	r3, #1
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a6e:	2140      	movs	r1, #64	; 0x40
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fe49 	bl	8002708 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003a76:	bf00      	nop
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fdf3 	bl	8002670 <WIZCHIP_READ>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f3      	bne.n	8003a78 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8003a90:	7d3a      	ldrb	r2, [r7, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	7d7a      	ldrb	r2, [r7, #21]
 8003a9c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	7dba      	ldrb	r2, [r7, #22]
 8003aa4:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3303      	adds	r3, #3
 8003aaa:	7dfa      	ldrb	r2, [r7, #23]
 8003aac:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8003aae:	7e3a      	ldrb	r2, [r7, #24]
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	b291      	uxth	r1, r2
 8003ab4:	4a38      	ldr	r2, [pc, #224]	; (8003b98 <recvfrom+0x3d4>)
 8003ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	4a36      	ldr	r2, [pc, #216]	; (8003b98 <recvfrom+0x3d4>)
 8003abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	b299      	uxth	r1, r3
 8003ac6:	7e7b      	ldrb	r3, [r7, #25]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	440a      	add	r2, r1
 8003ace:	b291      	uxth	r1, r2
 8003ad0:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <recvfrom+0x3d4>)
 8003ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <recvfrom+0x3d8>)
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	; (8003b98 <recvfrom+0x3d4>)
 8003ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ae6:	89ba      	ldrh	r2, [r7, #12]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d202      	bcs.n	8003af2 <recvfrom+0x32e>
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	83fb      	strh	r3, [r7, #30]
 8003af0:	e004      	b.n	8003afc <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <recvfrom+0x3d4>)
 8003af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003afa:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003afc:	8bfa      	ldrh	r2, [r7, #30]
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff f800 	bl	8002b08 <wiz_recv_data>
			break;
 8003b08:	e00b      	b.n	8003b22 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8003b0a:	8bfa      	ldrh	r2, [r7, #30]
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f855 	bl	8002bc0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	491f      	ldr	r1, [pc, #124]	; (8003b98 <recvfrom+0x3d4>)
 8003b1a:	8bfa      	ldrh	r2, [r7, #30]
 8003b1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8003b20:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	3301      	adds	r3, #1
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b2e:	2140      	movs	r1, #64	; 0x40
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fde9 	bl	8002708 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8003b36:	bf00      	nop
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fd93 	bl	8002670 <WIZCHIP_READ>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f3      	bne.n	8003b38 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <recvfrom+0x3d4>)
 8003b54:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	8bfa      	ldrh	r2, [r7, #30]
 8003b5c:	1a8a      	subs	r2, r1, r2
 8003b5e:	b291      	uxth	r1, r2
 8003b60:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <recvfrom+0x3d4>)
 8003b62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <recvfrom+0x3d4>)
 8003b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <recvfrom+0x3d8>)
 8003b76:	5cd2      	ldrb	r2, [r2, r3]
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	b2d1      	uxtb	r1, r2
 8003b80:	4a06      	ldr	r2, [pc, #24]	; (8003b9c <recvfrom+0x3d8>)
 8003b82:	54d1      	strb	r1, [r2, r3]
 8003b84:	e003      	b.n	8003b8e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <recvfrom+0x3d8>)
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8003b8e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000288 	.word	0x20000288
 8003b9c:	20000298 	.word	0x20000298

08003ba0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	bf00      	nop
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	70fb      	strb	r3, [r7, #3]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	2300      	movs	r3, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	807b      	strh	r3, [r7, #2]
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	807b      	strh	r3, [r7, #2]
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <reg_wizchip_cs_cbfunc+0x16>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <reg_wizchip_cs_cbfunc+0x44>)
 8003c82:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <reg_wizchip_cs_cbfunc+0x48>)
 8003c88:	615a      	str	r2, [r3, #20]
 8003c8a:	e006      	b.n	8003c9a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <reg_wizchip_cs_cbfunc+0x40>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6153      	str	r3, [r2, #20]
   }
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000020 	.word	0x20000020
 8003cac:	08003bbd 	.word	0x08003bbd
 8003cb0:	08003bcb 	.word	0x08003bcb

08003cb4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003cbe:	bf00      	nop
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f9      	beq.n	8003cc0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <reg_wizchip_spi_cbfunc+0x24>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cda:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <reg_wizchip_spi_cbfunc+0x50>)
 8003cdc:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <reg_wizchip_spi_cbfunc+0x54>)
 8003ce2:	61da      	str	r2, [r3, #28]
 8003ce4:	e006      	b.n	8003cf4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003ce6:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <reg_wizchip_spi_cbfunc+0x4c>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	61d3      	str	r3, [r2, #28]
   }
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	20000020 	.word	0x20000020
 8003d04:	08003c11 	.word	0x08003c11
 8003d08:	08003c21 	.word	0x08003c21

08003d0c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003d16:	bf00      	nop
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f9      	beq.n	8003d18 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <reg_wizchip_spiburst_cbfunc+0x24>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d106      	bne.n	8003d3e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <reg_wizchip_spiburst_cbfunc+0x50>)
 8003d34:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d38:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d3c:	e006      	b.n	8003d4c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003d3e:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	20000020 	.word	0x20000020
 8003d5c:	08003c37 	.word	0x08003c37
 8003d60:	08003c4f 	.word	0x08003c4f

08003d64 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	71fb      	strb	r3, [r7, #7]
#if    _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	f200 80c2 	bhi.w	8003f08 <ctlwizchip+0x1a4>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <ctlwizchip+0x28>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dd3 	.word	0x08003dd3
 8003d94:	08003dff 	.word	0x08003dff
 8003d98:	08003df3 	.word	0x08003df3
 8003d9c:	08003e0d 	.word	0x08003e0d
 8003da0:	08003e19 	.word	0x08003e19
 8003da4:	08003e27 	.word	0x08003e27
 8003da8:	08003e4d 	.word	0x08003e4d
 8003dac:	08003e73 	.word	0x08003e73
 8003db0:	08003ead 	.word	0x08003ead
 8003db4:	08003eb3 	.word	0x08003eb3
 8003db8:	08003ebb 	.word	0x08003ebb
 8003dbc:	08003f0f 	.word	0x08003f0f
 8003dc0:	08003ec3 	.word	0x08003ec3
 8003dc4:	08003ed1 	.word	0x08003ed1
 8003dc8:	08003eed 	.word	0x08003eed
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003dcc:	f000 f8a8 	bl	8003f20 <wizchip_sw_reset>
         break;
 8003dd0:	e09e      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3308      	adds	r3, #8
 8003de0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f8e5 	bl	8003fb8 <wizchip_init>
 8003dee:	4603      	mov	r3, r0
 8003df0:	e08f      	b.n	8003f12 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f96a 	bl	80040d0 <wizchip_clrinterrupt>
         break;
 8003dfc:	e088      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003dfe:	f000 f985 	bl	800410c <wizchip_getinterrupt>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	801a      	strh	r2, [r3, #0]
         break;
 8003e0a:	e081      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f9a0 	bl	8004156 <wizchip_setinterruptmask>
         break;         
 8003e16:	e07b      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003e18:	f000 f9b8 	bl	800418c <wizchip_getinterruptmask>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	801a      	strh	r2, [r3, #0]
         break;
 8003e24:	e074      	b.n	8003f10 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003e36:	f7fe fc67 	bl	8002708 <WIZCHIP_WRITE>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4619      	mov	r1, r3
 8003e42:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003e46:	f7fe fc5f 	bl	8002708 <WIZCHIP_WRITE>
         break;
 8003e4a:	e061      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003e4c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003e50:	f7fe fc0e 	bl	8002670 <WIZCHIP_READ>
 8003e54:	4603      	mov	r3, r0
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	b29c      	uxth	r4, r3
 8003e5c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003e60:	f7fe fc06 	bl	8002670 <WIZCHIP_READ>
 8003e64:	4603      	mov	r3, r0
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4423      	add	r3, r4
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	801a      	strh	r2, [r3, #0]
         break;
 8003e70:	e04e      	b.n	8003f10 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003e72:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e74:	789a      	ldrb	r2, [r3, #2]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	4a27      	ldr	r2, [pc, #156]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e80:	78d2      	ldrb	r2, [r2, #3]
 8003e82:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	3302      	adds	r3, #2
 8003e88:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e8a:	7912      	ldrb	r2, [r2, #4]
 8003e8c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	3303      	adds	r3, #3
 8003e92:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e94:	7952      	ldrb	r2, [r2, #5]
 8003e96:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <ctlwizchip+0x1b8>)
 8003e9e:	7992      	ldrb	r2, [r2, #6]
 8003ea0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	3305      	adds	r3, #5
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
         break;
 8003eaa:	e031      	b.n	8003f10 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003eac:	f000 f9c0 	bl	8004230 <wizphy_reset>
         break;
 8003eb0:	e02e      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003eb2:	6838      	ldr	r0, [r7, #0]
 8003eb4:	f000 f9e3 	bl	800427e <wizphy_setphyconf>
         break;
 8003eb8:	e02a      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003eba:	6838      	ldr	r0, [r7, #0]
 8003ebc:	f000 fa22 	bl	8004304 <wizphy_getphyconf>
         break;
 8003ec0:	e026      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fa86 	bl	80043d8 <wizphy_setphypmode>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	e020      	b.n	8003f12 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003ed0:	f000 f995 	bl	80041fe <wizphy_getphypmode>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2bff      	cmp	r3, #255	; 0xff
 8003edc:	d102      	bne.n	8003ee4 <ctlwizchip+0x180>
 8003ede:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee2:	e016      	b.n	8003f12 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	7dfa      	ldrb	r2, [r7, #23]
 8003ee8:	701a      	strb	r2, [r3, #0]
         break;
 8003eea:	e011      	b.n	8003f10 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003eec:	f000 f971 	bl	80041d2 <wizphy_getphylink>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	2bff      	cmp	r3, #255	; 0xff
 8003ef8:	d102      	bne.n	8003f00 <ctlwizchip+0x19c>
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	e008      	b.n	8003f12 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	7dfa      	ldrb	r2, [r7, #23]
 8003f04:	701a      	strb	r2, [r3, #0]
         break;
 8003f06:	e003      	b.n	8003f10 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0c:	e001      	b.n	8003f12 <ctlwizchip+0x1ae>
         break;
 8003f0e:	bf00      	nop
   }
   return 0;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd90      	pop	{r4, r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000020 	.word	0x20000020

08003f20 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	2206      	movs	r2, #6
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003f30:	f7fe fc38 	bl	80027a4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	2204      	movs	r2, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f40:	f7fe fc30 	bl	80027a4 <WIZCHIP_READ_BUF>
 8003f44:	f107 0310 	add.w	r3, r7, #16
 8003f48:	2204      	movs	r2, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003f50:	f7fe fc28 	bl	80027a4 <WIZCHIP_READ_BUF>
 8003f54:	f107 030c 	add.w	r3, r7, #12
 8003f58:	2204      	movs	r2, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003f60:	f7fe fc20 	bl	80027a4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003f64:	2180      	movs	r1, #128	; 0x80
 8003f66:	2000      	movs	r0, #0
 8003f68:	f7fe fbce 	bl	8002708 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7fe fb7f 	bl	8002670 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003f72:	1d3b      	adds	r3, r7, #4
 8003f74:	2206      	movs	r2, #6
 8003f76:	4619      	mov	r1, r3
 8003f78:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003f7c:	f7fe fc72 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	2204      	movs	r2, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f8c:	f7fe fc6a 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003f90:	f107 0310 	add.w	r3, r7, #16
 8003f94:	2204      	movs	r2, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003f9c:	f7fe fc62 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003fac:	f7fe fc5a 	bl	8002864 <WIZCHIP_WRITE_BUF>
}
 8003fb0:	bf00      	nop
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003fc6:	f7ff ffab 	bl	8003f20 <wizchip_sw_reset>
   if(txsize)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03b      	beq.n	8004048 <wizchip_init+0x90>
   {
      tmp = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e015      	b.n	8004006 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8003fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	7bbb      	ldrb	r3, [r7, #14]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8003fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	dd02      	ble.n	8003ffa <wizchip_init+0x42>
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff8:	e066      	b.n	80040c8 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3301      	adds	r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	73fb      	strb	r3, [r7, #15]
 8004006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400a:	2b07      	cmp	r3, #7
 800400c:	dde5      	ble.n	8003fda <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
 8004012:	e015      	b.n	8004040 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	3301      	adds	r3, #1
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004022:	4618      	mov	r0, r3
 8004024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	4619      	mov	r1, r3
 8004030:	f7fe fb6a 	bl	8002708 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	3301      	adds	r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004044:	2b07      	cmp	r3, #7
 8004046:	dde5      	ble.n	8004014 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d03b      	beq.n	80040c6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
 8004056:	e015      	b.n	8004084 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8004058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	4413      	add	r3, r2
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	7bbb      	ldrb	r3, [r7, #14]
 8004064:	4413      	add	r3, r2
 8004066:	b2db      	uxtb	r3, r3
 8004068:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800406a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800406e:	2b10      	cmp	r3, #16
 8004070:	dd02      	ble.n	8004078 <wizchip_init+0xc0>
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
 8004076:	e027      	b.n	80040c8 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	3301      	adds	r3, #1
 8004080:	b2db      	uxtb	r3, r3
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004088:	2b07      	cmp	r3, #7
 800408a:	dde5      	ble.n	8004058 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	e015      	b.n	80040be <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8004092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	3301      	adds	r3, #1
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80040a0:	4618      	mov	r0, r3
 80040a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	4619      	mov	r1, r3
 80040ae:	f7fe fb2b 	bl	8002708 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80040b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	3301      	adds	r3, #1
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	73fb      	strb	r3, [r7, #15]
 80040be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c2:	2b07      	cmp	r3, #7
 80040c4:	dde5      	ble.n	8004092 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	f023 030f 	bic.w	r3, r3, #15
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	4619      	mov	r1, r3
 80040f0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80040f4:	f7fe fb08 	bl	8002708 <WIZCHIP_WRITE>
   setSIR(sir);
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	4619      	mov	r1, r3
 80040fc:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8004100:	f7fe fb02 	bl	8002708 <WIZCHIP_WRITE>
#endif   
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800411e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8004122:	f7fe faa5 	bl	8002670 <WIZCHIP_READ>
 8004126:	4603      	mov	r3, r0
 8004128:	f023 030f 	bic.w	r3, r3, #15
 800412c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800412e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8004132:	f7fe fa9d 	bl	8002670 <WIZCHIP_READ>
 8004136:	4603      	mov	r3, r0
 8004138:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800413a:	79bb      	ldrb	r3, [r7, #6]
 800413c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800413e:	88bb      	ldrh	r3, [r7, #4]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	b29a      	uxth	r2, r3
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	b29b      	uxth	r3, r3
 8004148:	4413      	add	r3, r2
 800414a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800414c:	88bb      	ldrh	r3, [r7, #4]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	4603      	mov	r3, r0
 800415e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	b29b      	uxth	r3, r3
 800416a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	4619      	mov	r1, r3
 8004170:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8004174:	f7fe fac8 	bl	8002708 <WIZCHIP_WRITE>
   setSIMR(simr);
 8004178:	7bbb      	ldrb	r3, [r7, #14]
 800417a:	4619      	mov	r1, r3
 800417c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8004180:	f7fe fac2 	bl	8002708 <WIZCHIP_WRITE>
#endif   
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800419e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80041a2:	f7fe fa65 	bl	8002670 <WIZCHIP_READ>
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80041aa:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80041ae:	f7fe fa5f 	bl	8002670 <WIZCHIP_READ>
 80041b2:	4603      	mov	r3, r0
 80041b4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80041b6:	79bb      	ldrb	r3, [r7, #6]
 80041b8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80041ba:	88bb      	ldrh	r3, [r7, #4]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	b29a      	uxth	r2, r3
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80041c8:	88bb      	ldrh	r3, [r7, #4]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80041d8:	2300      	movs	r3, #0
 80041da:	71fb      	strb	r3, [r7, #7]
       tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80041dc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80041e0:	f7fe fa46 	bl	8002670 <WIZCHIP_READ>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80041ee:	2301      	movs	r3, #1
 80041f0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004208:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800420c:	f7fe fa30 	bl	8002670 <WIZCHIP_READ>
 8004210:	4603      	mov	r3, r0
 8004212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004216:	2b30      	cmp	r3, #48	; 0x30
 8004218:	d102      	bne.n	8004220 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800421a:	2301      	movs	r3, #1
 800421c:	71fb      	strb	r3, [r7, #7]
 800421e:	e001      	b.n	8004224 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004220:	2300      	movs	r3, #0
 8004222:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004224:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004236:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800423a:	f7fe fa19 	bl	8002670 <WIZCHIP_READ>
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004248:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	4619      	mov	r1, r3
 800424e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004252:	f7fe fa59 	bl	8002708 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004256:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800425a:	f7fe fa09 	bl	8002670 <WIZCHIP_READ>
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004268:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	4619      	mov	r1, r3
 800426e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004272:	f7fe fa49 	bl	8002708 <WIZCHIP_WRITE>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d104      	bne.n	800429c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	e003      	b.n	80042a4 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	785b      	ldrb	r3, [r3, #1]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d104      	bne.n	80042b6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e019      	b.n	80042ea <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	78db      	ldrb	r3, [r3, #3]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10d      	bne.n	80042da <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	789b      	ldrb	r3, [r3, #2]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d104      	bne.n	80042d0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	f043 0318 	orr.w	r3, r3, #24
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e00c      	b.n	80042ea <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	f043 0308 	orr.w	r3, r3, #8
 80042d6:	73fb      	strb	r3, [r7, #15]
 80042d8:	e007      	b.n	80042ea <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	789b      	ldrb	r3, [r3, #2]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d103      	bne.n	80042ea <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	f043 0310 	orr.w	r3, r3, #16
 80042e8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	4619      	mov	r1, r3
 80042ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80042f2:	f7fe fa09 	bl	8002708 <WIZCHIP_WRITE>
   wizphy_reset();
 80042f6:	f7ff ff9b 	bl	8004230 <wizphy_reset>
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004310:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004314:	f7fe f9ac 	bl	8002670 <WIZCHIP_READ>
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	119b      	asrs	r3, r3, #6
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004332:	2b20      	cmp	r3, #32
 8004334:	d001      	beq.n	800433a <wizphy_getphyconf+0x36>
 8004336:	2b38      	cmp	r3, #56	; 0x38
 8004338:	d103      	bne.n	8004342 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	705a      	strb	r2, [r3, #1]
         break;
 8004340:	e003      	b.n	800434a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	705a      	strb	r2, [r3, #1]
         break;
 8004348:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004350:	3b10      	subs	r3, #16
 8004352:	2b10      	cmp	r3, #16
 8004354:	bf8c      	ite	hi
 8004356:	2201      	movhi	r2, #1
 8004358:	2200      	movls	r2, #0
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	2a00      	cmp	r2, #0
 800435e:	d10f      	bne.n	8004380 <wizphy_getphyconf+0x7c>
 8004360:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <wizphy_getphyconf+0xcc>)
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	bf14      	ite	ne
 800436e:	2301      	movne	r3, #1
 8004370:	2300      	moveq	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	709a      	strb	r2, [r3, #2]
         break;
 800437e:	e003      	b.n	8004388 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	709a      	strb	r2, [r3, #2]
         break;
 8004386:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800438e:	3b08      	subs	r3, #8
 8004390:	2b18      	cmp	r3, #24
 8004392:	bf8c      	ite	hi
 8004394:	2201      	movhi	r2, #1
 8004396:	2200      	movls	r2, #0
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	2a00      	cmp	r2, #0
 800439c:	d10f      	bne.n	80043be <wizphy_getphyconf+0xba>
 800439e:	4a0d      	ldr	r2, [pc, #52]	; (80043d4 <wizphy_getphyconf+0xd0>)
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	70da      	strb	r2, [r3, #3]
         break;
 80043bc:	e003      	b.n	80043c6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	70da      	strb	r2, [r3, #3]
         break;
 80043c4:	bf00      	nop
   }
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	00010101 	.word	0x00010101
 80043d4:	01010001 	.word	0x01010001

080043d8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80043e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80043ea:	f7fe f941 	bl	8002670 <WIZCHIP_READ>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <wizphy_setphypmode+0x2a>
 80043fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004400:	e030      	b.n	8004464 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004408:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d104      	bne.n	800441a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e003      	b.n	8004422 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004420:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	4619      	mov	r1, r3
 8004426:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800442a:	f7fe f96d 	bl	8002708 <WIZCHIP_WRITE>
   wizphy_reset();
 800442e:	f7ff feff 	bl	8004230 <wizphy_reset>
   tmp = getPHYCFGR();
 8004432:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004436:	f7fe f91b 	bl	8002670 <WIZCHIP_READ>
 800443a:	4603      	mov	r3, r0
 800443c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <wizphy_setphypmode+0x88>
 800444e:	2300      	movs	r3, #0
 8004450:	e008      	b.n	8004464 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <wizphy_setphypmode+0x88>
 800445c:	2300      	movs	r3, #0
 800445e:	e001      	b.n	8004464 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2206      	movs	r2, #6
 8004478:	4619      	mov	r1, r3
 800447a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800447e:	f7fe f9f1 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	330e      	adds	r3, #14
 8004486:	2204      	movs	r2, #4
 8004488:	4619      	mov	r1, r3
 800448a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800448e:	f7fe f9e9 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	330a      	adds	r3, #10
 8004496:	2204      	movs	r2, #4
 8004498:	4619      	mov	r1, r3
 800449a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800449e:	f7fe f9e1 	bl	8002864 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3306      	adds	r3, #6
 80044a6:	2204      	movs	r2, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80044ae:	f7fe f9d9 	bl	8002864 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	7c9a      	ldrb	r2, [r3, #18]
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044b8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7cda      	ldrb	r2, [r3, #19]
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044c0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7d1a      	ldrb	r2, [r3, #20]
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044c8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7d5a      	ldrb	r2, [r3, #21]
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <wizchip_setnetinfo+0x78>)
 80044d0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	7d9a      	ldrb	r2, [r3, #22]
 80044d6:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <wizchip_setnetinfo+0x7c>)
 80044d8:	701a      	strb	r2, [r3, #0]
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200002a0 	.word	0x200002a0
 80044e8:	200002a4 	.word	0x200002a4

080044ec <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <cJSON_GetErrorPtr+0x18>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <cJSON_GetErrorPtr+0x18>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4413      	add	r3, r2
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	200002a8 	.word	0x200002a8

08004508 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <case_insensitive_strcmp+0x16>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800451e:	2301      	movs	r3, #1
 8004520:	e056      	b.n	80045d0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d10d      	bne.n	8004546 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800452a:	2300      	movs	r3, #0
 800452c:	e050      	b.n	80045d0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8004536:	2300      	movs	r3, #0
 8004538:	e04a      	b.n	80045d0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3301      	adds	r3, #1
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	3301      	adds	r3, #1
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <case_insensitive_strcmp+0xd4>)
 8004552:	4413      	add	r3, r2
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d103      	bne.n	8004566 <case_insensitive_strcmp+0x5e>
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	f103 0220 	add.w	r2, r3, #32
 8004564:	e000      	b.n	8004568 <case_insensitive_strcmp+0x60>
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	73bb      	strb	r3, [r7, #14]
 800456e:	7bbb      	ldrb	r3, [r7, #14]
 8004570:	3301      	adds	r3, #1
 8004572:	491a      	ldr	r1, [pc, #104]	; (80045dc <case_insensitive_strcmp+0xd4>)
 8004574:	440b      	add	r3, r1
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d102      	bne.n	8004586 <case_insensitive_strcmp+0x7e>
 8004580:	7bbb      	ldrb	r3, [r7, #14]
 8004582:	3320      	adds	r3, #32
 8004584:	e000      	b.n	8004588 <case_insensitive_strcmp+0x80>
 8004586:	7bbb      	ldrb	r3, [r7, #14]
 8004588:	429a      	cmp	r2, r3
 800458a:	d0d0      	beq.n	800452e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	737b      	strb	r3, [r7, #13]
 8004592:	7b7b      	ldrb	r3, [r7, #13]
 8004594:	3301      	adds	r3, #1
 8004596:	4a11      	ldr	r2, [pc, #68]	; (80045dc <case_insensitive_strcmp+0xd4>)
 8004598:	4413      	add	r3, r2
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d103      	bne.n	80045ac <case_insensitive_strcmp+0xa4>
 80045a4:	7b7b      	ldrb	r3, [r7, #13]
 80045a6:	f103 0220 	add.w	r2, r3, #32
 80045aa:	e000      	b.n	80045ae <case_insensitive_strcmp+0xa6>
 80045ac:	7b7a      	ldrb	r2, [r7, #13]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	733b      	strb	r3, [r7, #12]
 80045b4:	7b3b      	ldrb	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	4908      	ldr	r1, [pc, #32]	; (80045dc <case_insensitive_strcmp+0xd4>)
 80045ba:	440b      	add	r3, r1
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d102      	bne.n	80045cc <case_insensitive_strcmp+0xc4>
 80045c6:	7b3b      	ldrb	r3, [r7, #12]
 80045c8:	3320      	adds	r3, #32
 80045ca:	e000      	b.n	80045ce <case_insensitive_strcmp+0xc6>
 80045cc:	7b3b      	ldrb	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	08014538 	.word	0x08014538

080045e0 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <cJSON_strdup+0x1c>
    {
        return NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e015      	b.n	8004628 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fb fe47 	bl	8000290 <strlen>
 8004602:	4603      	mov	r3, r0
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	4798      	blx	r3
 8004610:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <cJSON_strdup+0x3c>
    {
        return NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	e005      	b.n	8004628 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	68b8      	ldr	r0, [r7, #8]
 8004622:	f00c ff58 	bl	80114d6 <memcpy>

    return copy;
 8004626:	68bb      	ldr	r3, [r7, #8]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2028      	movs	r0, #40	; 0x28
 800463e:	4798      	blx	r3
 8004640:	60f8      	str	r0, [r7, #12]
    if (node)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8004648:	2228      	movs	r2, #40	; 0x28
 800464a:	2100      	movs	r1, #0
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f00c fe43 	bl	80112d8 <memset>
    }

    return node;
 8004652:	68fb      	ldr	r3, [r7, #12]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8004668:	e037      	b.n	80046da <cJSON_Delete+0x7e>
    {
        next = item->next;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d108      	bne.n	800468e <cJSON_Delete+0x32>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ffe7 	bl	800465c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <cJSON_Delete+0x52>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <cJSON_Delete+0x90>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6912      	ldr	r2, [r2, #16]
 80046aa:	4610      	mov	r0, r2
 80046ac:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <cJSON_Delete+0x72>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <cJSON_Delete+0x90>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6a12      	ldr	r2, [r2, #32]
 80046ca:	4610      	mov	r0, r2
 80046cc:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <cJSON_Delete+0x90>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
        item = next;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1c4      	bne.n	800466a <cJSON_Delete+0xe>
    }
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000048 	.word	0x20000048

080046f0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80046f4:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b098      	sub	sp, #96	; 0x60
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
    double number = 0;
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800471a:	f7ff ffe9 	bl	80046f0 <get_decimal_point>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <parse_number+0x36>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <parse_number+0x3a>
    {
        return false;
 8004736:	2300      	movs	r3, #0
 8004738:	e0a0      	b.n	800487c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800473a:	2300      	movs	r3, #0
 800473c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800473e:	e03d      	b.n	80047bc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800474a:	440b      	add	r3, r1
 800474c:	4413      	add	r3, r2
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b45      	cmp	r3, #69	; 0x45
 8004752:	dc17      	bgt.n	8004784 <parse_number+0x84>
 8004754:	2b2b      	cmp	r3, #43	; 0x2b
 8004756:	db40      	blt.n	80047da <parse_number+0xda>
 8004758:	3b2b      	subs	r3, #43	; 0x2b
 800475a:	2201      	movs	r2, #1
 800475c:	409a      	lsls	r2, r3
 800475e:	4b4c      	ldr	r3, [pc, #304]	; (8004890 <parse_number+0x190>)
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <parse_number+0x88>
 8004770:	f002 0308 	and.w	r3, r2, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d111      	bne.n	80047a6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8004782:	e02a      	b.n	80047da <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8004784:	2b65      	cmp	r3, #101	; 0x65
 8004786:	d128      	bne.n	80047da <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004792:	440b      	add	r3, r1
 8004794:	4413      	add	r3, r2
 8004796:	7819      	ldrb	r1, [r3, #0]
 8004798:	f107 0208 	add.w	r2, r7, #8
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479e:	4413      	add	r3, r2
 80047a0:	460a      	mov	r2, r1
 80047a2:	701a      	strb	r2, [r3, #0]
                break;
 80047a4:	e007      	b.n	80047b6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80047a6:	f107 0208 	add.w	r2, r7, #8
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	4413      	add	r3, r2
 80047ae:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80047b2:	701a      	strb	r2, [r3, #0]
                break;
 80047b4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80047b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b8:	3301      	adds	r3, #1
 80047ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047be:	2b3e      	cmp	r3, #62	; 0x3e
 80047c0:	d80d      	bhi.n	80047de <parse_number+0xde>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <parse_number+0xde>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ce:	441a      	add	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3b3      	bcc.n	8004740 <parse_number+0x40>
        }
    }
loop_end:
 80047d8:	e001      	b.n	80047de <parse_number+0xde>
                goto loop_end;
 80047da:	bf00      	nop
 80047dc:	e000      	b.n	80047e0 <parse_number+0xe0>
loop_end:
 80047de:	bf00      	nop
    number_c_string[i] = '\0';
 80047e0:	f107 0208 	add.w	r2, r7, #8
 80047e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e6:	4413      	add	r3, r2
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80047ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047f0:	f107 0308 	add.w	r3, r7, #8
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f00c fbaa 	bl	8010f50 <strtod>
 80047fc:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8004800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	429a      	cmp	r2, r3
 8004808:	d101      	bne.n	800480e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800480a:	2300      	movs	r3, #0
 800480c:	e036      	b.n	800487c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004814:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8004818:	a31b      	add	r3, pc, #108	; (adr r3, 8004888 <parse_number+0x188>)
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004822:	f7fc f97f 	bl	8000b24 <__aeabi_dcmpge>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004832:	615a      	str	r2, [r3, #20]
 8004834:	e015      	b.n	8004862 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	4b16      	ldr	r3, [pc, #88]	; (8004894 <parse_number+0x194>)
 800483c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004840:	f7fc f966 	bl	8000b10 <__aeabi_dcmple>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004850:	615a      	str	r2, [r3, #20]
 8004852:	e006      	b.n	8004862 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8004854:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004858:	f7fc f98e 	bl	8000b78 <__aeabi_d2iz>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2208      	movs	r2, #8
 8004866:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800486e:	f107 0208 	add.w	r2, r7, #8
 8004872:	1a8a      	subs	r2, r1, r2
 8004874:	441a      	add	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	609a      	str	r2, [r3, #8]
    return true;
 800487a:	2301      	movs	r3, #1
}
 800487c:	4618      	mov	r0, r3
 800487e:	3760      	adds	r7, #96	; 0x60
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	f3af 8000 	nop.w
 8004888:	ffc00000 	.word	0xffc00000
 800488c:	41dfffff 	.word	0x41dfffff
 8004890:	04007fe5 	.word	0x04007fe5
 8004894:	c1e00000 	.word	0xc1e00000

08004898 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <ensure+0x20>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <ensure+0x24>
    {
        return NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e083      	b.n	80049c4 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <ensure+0x3c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d301      	bcc.n	80048d4 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e077      	b.n	80049c4 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	da01      	bge.n	80048de <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	e072      	b.n	80049c4 <ensure+0x12c>
    }

    needed += p->offset + 1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	3301      	adds	r3, #1
 80048e8:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d805      	bhi.n	8004900 <ensure+0x68>
    {
        return p->buffer + p->offset;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4413      	add	r3, r2
 80048fe:	e061      	b.n	80049c4 <ensure+0x12c>
    }

    if (p->noalloc) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <ensure+0x74>
        return NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	e05b      	b.n	80049c4 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d308      	bcc.n	8004926 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	db03      	blt.n	8004922 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800491a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	e004      	b.n	800492c <ensure+0x94>
        }
        else
        {
            return NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	e04e      	b.n	80049c4 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d018      	beq.n	8004966 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	4610      	mov	r0, r2
 8004940:	4798      	blx	r3
 8004942:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d132      	bne.n	80049b0 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	4610      	mov	r0, r2
 8004954:	4798      	blx	r3
            p->length = 0;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]

            return NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	e02e      	b.n	80049c4 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	68b8      	ldr	r0, [r7, #8]
 800496c:	4798      	blx	r3
 800496e:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	4610      	mov	r0, r2
 8004980:	4798      	blx	r3
            p->length = 0;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

            return NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	e018      	b.n	80049c4 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6819      	ldr	r1, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	3301      	adds	r3, #1
 800499c:	461a      	mov	r2, r3
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f00c fd99 	bl	80114d6 <memcpy>
        p->hooks.deallocate(p->buffer);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	4610      	mov	r0, r2
 80049ae:	4798      	blx	r3
    }
    p->length = newsize;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4413      	add	r3, r2
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <update_offset+0x3a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00f      	beq.n	8004a06 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4413      	add	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689c      	ldr	r4, [r3, #8]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7fb fc4a 	bl	8000290 <strlen>
 80049fc:	4603      	mov	r3, r0
 80049fe:	18e2      	adds	r2, r4, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	e000      	b.n	8004a08 <update_offset+0x3c>
        return;
 8004a06:	bf00      	nop
}
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd90      	pop	{r4, r7, pc}
	...

08004a10 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8004a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	ed87 0b02 	vstr	d0, [r7, #8]
 8004a1c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	68fe      	ldr	r6, [r7, #12]
 8004a24:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	687e      	ldr	r6, [r7, #4]
 8004a2c:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004a30:	f7fc f882 	bl	8000b38 <__aeabi_dcmpgt>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <compare_double+0x34>
 8004a3a:	68bc      	ldr	r4, [r7, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004a42:	e003      	b.n	8004a4c <compare_double+0x3c>
 8004a44:	683c      	ldr	r4, [r7, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004a4c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8004a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a58:	f7fb fc26 	bl	80002a8 <__aeabi_dsub>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4690      	mov	r8, r2
 8004a62:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <compare_double+0x8c>)
 8004a6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a70:	f7fb fdd2 	bl	8000618 <__aeabi_dmul>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	2101      	movs	r1, #1
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4649      	mov	r1, r9
 8004a80:	f7fc f846 	bl	8000b10 <__aeabi_dcmple>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <compare_double+0x7e>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	461c      	mov	r4, r3
 8004a8e:	b2e3      	uxtb	r3, r4
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a9a:	bf00      	nop
 8004a9c:	3cb00000 	.word	0x3cb00000

08004aa0 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa2:	b093      	sub	sp, #76	; 0x4c
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004ab4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	f107 0318 	add.w	r3, r7, #24
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	611a      	str	r2, [r3, #16]
 8004ad4:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8004ad6:	f7ff fe0b 	bl	80046f0 <get_decimal_point>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <print_number+0x56>
    {
        return false;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e0b4      	b.n	8004c60 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8004af6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004afa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004afe:	f7fc f825 	bl	8000b4c <__aeabi_dcmpun>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d121      	bne.n	8004b4c <print_number+0xac>
 8004b08:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004b10:	2301      	movs	r3, #1
 8004b12:	461e      	mov	r6, r3
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295
 8004b18:	4b53      	ldr	r3, [pc, #332]	; (8004c68 <print_number+0x1c8>)
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f7fc f815 	bl	8000b4c <__aeabi_dcmpun>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <print_number+0xa0>
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	4b4e      	ldr	r3, [pc, #312]	; (8004c68 <print_number+0x1c8>)
 8004b2e:	4620      	mov	r0, r4
 8004b30:	4629      	mov	r1, r5
 8004b32:	f7fb ffed 	bl	8000b10 <__aeabi_dcmple>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <print_number+0xa0>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	461e      	mov	r6, r3
 8004b40:	b2f3      	uxtb	r3, r6
 8004b42:	f083 0301 	eor.w	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	4946      	ldr	r1, [pc, #280]	; (8004c6c <print_number+0x1cc>)
 8004b52:	4618      	mov	r0, r3
 8004b54:	f00c fadc 	bl	8011110 <siprintf>
 8004b58:	6478      	str	r0, [r7, #68]	; 0x44
 8004b5a:	e03f      	b.n	8004bdc <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fb fcef 	bl	8000544 <__aeabi_i2d>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b6e:	f7fb ffbb 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	493b      	ldr	r1, [pc, #236]	; (8004c70 <print_number+0x1d0>)
 8004b82:	4618      	mov	r0, r3
 8004b84:	f00c fac4 	bl	8011110 <siprintf>
 8004b88:	6478      	str	r0, [r7, #68]	; 0x44
 8004b8a:	e027      	b.n	8004bdc <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8004b8c:	f107 0014 	add.w	r0, r7, #20
 8004b90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b94:	4937      	ldr	r1, [pc, #220]	; (8004c74 <print_number+0x1d4>)
 8004b96:	f00c fabb 	bl	8011110 <siprintf>
 8004b9a:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8004b9c:	f107 0208 	add.w	r2, r7, #8
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4934      	ldr	r1, [pc, #208]	; (8004c78 <print_number+0x1d8>)
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f00c fad2 	bl	8011150 <siscanf>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d10c      	bne.n	8004bcc <print_number+0x12c>
 8004bb2:	ed97 7b02 	vldr	d7, [r7, #8]
 8004bb6:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8004bba:	eeb0 0a47 	vmov.f32	s0, s14
 8004bbe:	eef0 0a67 	vmov.f32	s1, s15
 8004bc2:	f7ff ff25 	bl	8004a10 <compare_double>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8004bcc:	f107 0014 	add.w	r0, r7, #20
 8004bd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bd4:	4929      	ldr	r1, [pc, #164]	; (8004c7c <print_number+0x1dc>)
 8004bd6:	f00c fa9b 	bl	8011110 <siprintf>
 8004bda:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8004bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db02      	blt.n	8004be8 <print_number+0x148>
 8004be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be4:	2b19      	cmp	r3, #25
 8004be6:	dd01      	ble.n	8004bec <print_number+0x14c>
    {
        return false;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e039      	b.n	8004c60 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8004bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bee:	3301      	adds	r3, #1
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6838      	ldr	r0, [r7, #0]
 8004bf4:	f7ff fe50 	bl	8004898 <ensure>
 8004bf8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8004bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <print_number+0x164>
    {
        return false;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e02d      	b.n	8004c60 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	643b      	str	r3, [r7, #64]	; 0x40
 8004c08:	e01a      	b.n	8004c40 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8004c0a:	f107 0214 	add.w	r2, r7, #20
 8004c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c10:	4413      	add	r3, r2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d105      	bne.n	8004c28 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8004c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c20:	4413      	add	r3, r2
 8004c22:	222e      	movs	r2, #46	; 0x2e
 8004c24:	701a      	strb	r2, [r3, #0]
            continue;
 8004c26:	e008      	b.n	8004c3a <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8004c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f107 0114 	add.w	r1, r7, #20
 8004c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c34:	440a      	add	r2, r1
 8004c36:	7812      	ldrb	r2, [r2, #0]
 8004c38:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8004c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d3e0      	bcc.n	8004c0a <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8004c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4c:	4413      	add	r3, r2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c58:	441a      	add	r2, r3
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	609a      	str	r2, [r3, #8]

    return true;
 8004c5e:	2301      	movs	r3, #1
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	374c      	adds	r7, #76	; 0x4c
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c68:	7fefffff 	.word	0x7fefffff
 8004c6c:	08013b98 	.word	0x08013b98
 8004c70:	08013ba0 	.word	0x08013ba0
 8004c74:	08013ba4 	.word	0x08013ba4
 8004c78:	08013bac 	.word	0x08013bac
 8004c7c:	08013bb0 	.word	0x08013bb0

08004c80 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	e04c      	b.n	8004d30 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b2f      	cmp	r3, #47	; 0x2f
 8004ca0:	d90f      	bls.n	8004cc2 <parse_hex4+0x42>
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b39      	cmp	r3, #57	; 0x39
 8004cac:	d809      	bhi.n	8004cc2 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	3b30      	subs	r3, #48	; 0x30
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e02d      	b.n	8004d1e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	d90f      	bls.n	8004cee <parse_hex4+0x6e>
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b46      	cmp	r3, #70	; 0x46
 8004cd8:	d809      	bhi.n	8004cee <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4413      	add	r3, r2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3b37      	subs	r3, #55	; 0x37
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e017      	b.n	8004d1e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b60      	cmp	r3, #96	; 0x60
 8004cf8:	d90f      	bls.n	8004d1a <parse_hex4+0x9a>
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b66      	cmp	r3, #102	; 0x66
 8004d04:	d809      	bhi.n	8004d1a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	3b57      	subs	r3, #87	; 0x57
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e001      	b.n	8004d1e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e00c      	b.n	8004d38 <parse_hex4+0xb8>
        }

        if (i < 3)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d802      	bhi.n	8004d2a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d9af      	bls.n	8004c96 <parse_hex4+0x16>
        }
    }

    return h;
 8004d36:	68fb      	ldr	r3, [r7, #12]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	f340 80b7 	ble.w	8004eee <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	3302      	adds	r3, #2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff ff7b 	bl	8004c80 <parse_hex4>
 8004d8a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004d92:	d304      	bcc.n	8004d9e <utf16_literal_to_utf8+0x5a>
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8004d9a:	f0c0 80aa 	bcc.w	8004ef2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8004da4:	d337      	bcc.n	8004e16 <utf16_literal_to_utf8+0xd2>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004dac:	d233      	bcs.n	8004e16 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3306      	adds	r3, #6
 8004db2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8004db8:	230c      	movs	r3, #12
 8004dba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	f340 8096 	ble.w	8004ef6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b5c      	cmp	r3, #92	; 0x5c
 8004dd0:	f040 8093 	bne.w	8004efa <utf16_literal_to_utf8+0x1b6>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b75      	cmp	r3, #117	; 0x75
 8004ddc:	f040 808d 	bne.w	8004efa <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	3302      	adds	r3, #2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff4b 	bl	8004c80 <parse_hex4>
 8004dea:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004df2:	f0c0 8084 	bcc.w	8004efe <utf16_literal_to_utf8+0x1ba>
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8004dfc:	d27f      	bcs.n	8004efe <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	029a      	lsls	r2, r3, #10
 8004e02:	4b43      	ldr	r3, [pc, #268]	; (8004f10 <utf16_literal_to_utf8+0x1cc>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8004e14:	e004      	b.n	8004e20 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8004e16:	2306      	movs	r3, #6
 8004e18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	2b7f      	cmp	r3, #127	; 0x7f
 8004e24:	d803      	bhi.n	8004e2e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2c:	e01f      	b.n	8004e6e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e34:	d206      	bcs.n	8004e44 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8004e36:	2302      	movs	r3, #2
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8004e3c:	23c0      	movs	r3, #192	; 0xc0
 8004e3e:	f887 3020 	strb.w	r3, [r7, #32]
 8004e42:	e014      	b.n	8004e6e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4a:	d206      	bcs.n	8004e5a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8004e52:	23e0      	movs	r3, #224	; 0xe0
 8004e54:	f887 3020 	strb.w	r3, [r7, #32]
 8004e58:	e009      	b.n	8004e6e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004e60:	d24f      	bcs.n	8004f02 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8004e62:	2304      	movs	r3, #4
 8004e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8004e68:	23f0      	movs	r3, #240	; 0xf0
 8004e6a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8004e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e72:	3b01      	subs	r3, #1
 8004e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e78:	e015      	b.n	8004ea6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6819      	ldr	r1, [r3, #0]
 8004e88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004e8c:	440b      	add	r3, r1
 8004e8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8004e9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ea6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8004eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d909      	bls.n	8004eca <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	b2d9      	uxtb	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	e007      	b.n	8004eda <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee2:	441a      	add	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8004ee8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004eec:	e00b      	b.n	8004f06 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8004eee:	bf00      	nop
 8004ef0:	e008      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8004ef2:	bf00      	nop
 8004ef4:	e006      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004ef6:	bf00      	nop
 8004ef8:	e004      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8004f02:	bf00      	nop

fail:
    return 0;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3728      	adds	r7, #40	; 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	000ffc00 	.word	0x000ffc00

08004f14 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4413      	add	r3, r2
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	3301      	adds	r3, #1
 8004f36:	4413      	add	r3, r2
 8004f38:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b22      	cmp	r3, #34	; 0x22
 8004f50:	f040 8103 	bne.w	800515a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8004f5c:	e017      	b.n	8004f8e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b5c      	cmp	r3, #92	; 0x5c
 8004f64:	d110      	bne.n	8004f88 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	f080 80f1 	bcs.w	800515e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	61bb      	str	r3, [r7, #24]
                input_end++;
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	3301      	adds	r3, #1
 8004f86:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6a3a      	ldr	r2, [r7, #32]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d203      	bcs.n	8004fa8 <parse_string+0x94>
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b22      	cmp	r3, #34	; 0x22
 8004fa6:	d1da      	bne.n	8004f5e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	f080 80d3 	bcs.w	8005162 <parse_string+0x24e>
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b22      	cmp	r3, #34	; 0x22
 8004fc2:	f040 80ce 	bne.w	8005162 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	4413      	add	r3, r2
 8004fd0:	6a3a      	ldr	r2, [r7, #32]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	3201      	adds	r2, #1
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
 8004fe8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80ba 	beq.w	8005166 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8004ff6:	e094      	b.n	8005122 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b5c      	cmp	r3, #92	; 0x5c
 8004ffe:	d008      	beq.n	8005012 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	1c53      	adds	r3, r2, #1
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	60f9      	str	r1, [r7, #12]
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e087      	b.n	8005122 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8005012:	2302      	movs	r3, #2
 8005014:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8005016:	6a3a      	ldr	r2, [r7, #32]
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	f340 80a4 	ble.w	800516a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	3301      	adds	r3, #1
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b75      	cmp	r3, #117	; 0x75
 800502a:	f300 80a0 	bgt.w	800516e <parse_string+0x25a>
 800502e:	2b5c      	cmp	r3, #92	; 0x5c
 8005030:	da04      	bge.n	800503c <parse_string+0x128>
 8005032:	2b22      	cmp	r3, #34	; 0x22
 8005034:	d05c      	beq.n	80050f0 <parse_string+0x1dc>
 8005036:	2b2f      	cmp	r3, #47	; 0x2f
 8005038:	d05a      	beq.n	80050f0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800503a:	e098      	b.n	800516e <parse_string+0x25a>
            switch (input_pointer[1])
 800503c:	3b5c      	subs	r3, #92	; 0x5c
 800503e:	2b19      	cmp	r3, #25
 8005040:	f200 8095 	bhi.w	800516e <parse_string+0x25a>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <parse_string+0x138>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	080050f1 	.word	0x080050f1
 8005050:	0800516f 	.word	0x0800516f
 8005054:	0800516f 	.word	0x0800516f
 8005058:	0800516f 	.word	0x0800516f
 800505c:	0800516f 	.word	0x0800516f
 8005060:	0800516f 	.word	0x0800516f
 8005064:	080050b5 	.word	0x080050b5
 8005068:	0800516f 	.word	0x0800516f
 800506c:	0800516f 	.word	0x0800516f
 8005070:	0800516f 	.word	0x0800516f
 8005074:	080050c1 	.word	0x080050c1
 8005078:	0800516f 	.word	0x0800516f
 800507c:	0800516f 	.word	0x0800516f
 8005080:	0800516f 	.word	0x0800516f
 8005084:	0800516f 	.word	0x0800516f
 8005088:	0800516f 	.word	0x0800516f
 800508c:	0800516f 	.word	0x0800516f
 8005090:	0800516f 	.word	0x0800516f
 8005094:	080050cd 	.word	0x080050cd
 8005098:	0800516f 	.word	0x0800516f
 800509c:	0800516f 	.word	0x0800516f
 80050a0:	0800516f 	.word	0x0800516f
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	0800516f 	.word	0x0800516f
 80050ac:	080050e5 	.word	0x080050e5
 80050b0:	08005101 	.word	0x08005101
                    *output_pointer++ = '\b';
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	60fa      	str	r2, [r7, #12]
 80050ba:	2208      	movs	r2, #8
 80050bc:	701a      	strb	r2, [r3, #0]
                    break;
 80050be:	e02c      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\f';
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	60fa      	str	r2, [r7, #12]
 80050c6:	220c      	movs	r2, #12
 80050c8:	701a      	strb	r2, [r3, #0]
                    break;
 80050ca:	e026      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\n';
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	60fa      	str	r2, [r7, #12]
 80050d2:	220a      	movs	r2, #10
 80050d4:	701a      	strb	r2, [r3, #0]
                    break;
 80050d6:	e020      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\r';
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	60fa      	str	r2, [r7, #12]
 80050de:	220d      	movs	r2, #13
 80050e0:	701a      	strb	r2, [r3, #0]
                    break;
 80050e2:	e01a      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = '\t';
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	60fa      	str	r2, [r7, #12]
 80050ea:	2209      	movs	r2, #9
 80050ec:	701a      	strb	r2, [r3, #0]
                    break;
 80050ee:	e014      	b.n	800511a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	60f9      	str	r1, [r7, #12]
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	701a      	strb	r2, [r3, #0]
                    break;
 80050fe:	e00c      	b.n	800511a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8005100:	f107 030c 	add.w	r3, r7, #12
 8005104:	461a      	mov	r2, r3
 8005106:	6a39      	ldr	r1, [r7, #32]
 8005108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800510a:	f7ff fe1b 	bl	8004d44 <utf16_literal_to_utf8>
 800510e:	4603      	mov	r3, r0
 8005110:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d02c      	beq.n	8005172 <parse_string+0x25e>
                    break;
 8005118:	bf00      	nop
            }
            input_pointer += sequence_length;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	4413      	add	r3, r2
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8005122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	429a      	cmp	r2, r3
 8005128:	f4ff af66 	bcc.w	8004ff8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2210      	movs	r2, #16
 8005136:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	461a      	mov	r2, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	609a      	str	r2, [r3, #8]

    return true;
 8005156:	2301      	movs	r3, #1
 8005158:	e01e      	b.n	8005198 <parse_string+0x284>
        goto fail;
 800515a:	bf00      	nop
 800515c:	e00a      	b.n	8005174 <parse_string+0x260>
                    goto fail;
 800515e:	bf00      	nop
 8005160:	e008      	b.n	8005174 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8005162:	bf00      	nop
 8005164:	e006      	b.n	8005174 <parse_string+0x260>
            goto fail; /* allocation failure */
 8005166:	bf00      	nop
 8005168:	e004      	b.n	8005174 <parse_string+0x260>
                goto fail;
 800516a:	bf00      	nop
 800516c:	e002      	b.n	8005174 <parse_string+0x260>
                    goto fail;
 800516e:	bf00      	nop
 8005170:	e000      	b.n	8005174 <parse_string+0x260>
                        goto fail;
 8005172:	bf00      	nop

fail:
    if (output != NULL)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	69f8      	ldr	r0, [r7, #28]
 8005180:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	461a      	mov	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	609a      	str	r2, [r3, #8]
    }

    return false;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <print_string_ptr+0x28>
    {
        return false;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e110      	b.n	80053ea <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d111      	bne.n	80051f2 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80051ce:	2103      	movs	r1, #3
 80051d0:	6838      	ldr	r0, [r7, #0]
 80051d2:	f7ff fb61 	bl	8004898 <ensure>
 80051d6:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <print_string_ptr+0x42>
        {
            return false;
 80051de:	2300      	movs	r3, #0
 80051e0:	e103      	b.n	80053ea <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4a83      	ldr	r2, [pc, #524]	; (80053f4 <print_string_ptr+0x254>)
 80051e6:	8811      	ldrh	r1, [r2, #0]
 80051e8:	7892      	ldrb	r2, [r2, #2]
 80051ea:	8019      	strh	r1, [r3, #0]
 80051ec:	709a      	strb	r2, [r3, #2]

        return true;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0fb      	b.n	80053ea <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	e024      	b.n	8005242 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b22      	cmp	r3, #34	; 0x22
 80051fe:	dc0f      	bgt.n	8005220 <print_string_ptr+0x80>
 8005200:	2b08      	cmp	r3, #8
 8005202:	db13      	blt.n	800522c <print_string_ptr+0x8c>
 8005204:	3b08      	subs	r3, #8
 8005206:	4a7c      	ldr	r2, [pc, #496]	; (80053f8 <print_string_ptr+0x258>)
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <print_string_ptr+0x84>
 800521e:	e005      	b.n	800522c <print_string_ptr+0x8c>
 8005220:	2b5c      	cmp	r3, #92	; 0x5c
 8005222:	d103      	bne.n	800522c <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	3301      	adds	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
                break;
 800522a:	e007      	b.n	800523c <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b1f      	cmp	r3, #31
 8005232:	d802      	bhi.n	800523a <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	3305      	adds	r3, #5
 8005238:	617b      	str	r3, [r7, #20]
                }
                break;
 800523a:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1d6      	bne.n	80051f8 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	461a      	mov	r2, r3
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	4413      	add	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3303      	adds	r3, #3
 800525c:	4619      	mov	r1, r3
 800525e:	6838      	ldr	r0, [r7, #0]
 8005260:	f7ff fb1a 	bl	8004898 <ensure>
 8005264:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <print_string_ptr+0xd0>
    {
        return false;
 800526c:	2300      	movs	r3, #0
 800526e:	e0bc      	b.n	80053ea <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d117      	bne.n	80052a6 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2222      	movs	r2, #34	; 0x22
 800527a:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3301      	adds	r3, #1
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4618      	mov	r0, r3
 8005286:	f00c f926 	bl	80114d6 <memcpy>
        output[output_length + 1] = '\"';
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	2222      	movs	r2, #34	; 0x22
 8005294:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3302      	adds	r3, #2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]

        return true;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e0a1      	b.n	80053ea <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2222      	movs	r2, #34	; 0x22
 80052aa:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3301      	adds	r3, #1
 80052b0:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e086      	b.n	80053c6 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b1f      	cmp	r3, #31
 80052be:	d90c      	bls.n	80052da <print_string_ptr+0x13a>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b22      	cmp	r3, #34	; 0x22
 80052c6:	d008      	beq.n	80052da <print_string_ptr+0x13a>
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b5c      	cmp	r3, #92	; 0x5c
 80052ce:	d004      	beq.n	80052da <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e06f      	b.n	80053ba <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	61ba      	str	r2, [r7, #24]
 80052e0:	225c      	movs	r2, #92	; 0x5c
 80052e2:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b22      	cmp	r3, #34	; 0x22
 80052ea:	dc3d      	bgt.n	8005368 <print_string_ptr+0x1c8>
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	db59      	blt.n	80053a4 <print_string_ptr+0x204>
 80052f0:	3b08      	subs	r3, #8
 80052f2:	2b1a      	cmp	r3, #26
 80052f4:	d856      	bhi.n	80053a4 <print_string_ptr+0x204>
 80052f6:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <print_string_ptr+0x15c>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	0800537d 	.word	0x0800537d
 8005300:	0800539d 	.word	0x0800539d
 8005304:	0800538d 	.word	0x0800538d
 8005308:	080053a5 	.word	0x080053a5
 800530c:	08005385 	.word	0x08005385
 8005310:	08005395 	.word	0x08005395
 8005314:	080053a5 	.word	0x080053a5
 8005318:	080053a5 	.word	0x080053a5
 800531c:	080053a5 	.word	0x080053a5
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053a5 	.word	0x080053a5
 8005328:	080053a5 	.word	0x080053a5
 800532c:	080053a5 	.word	0x080053a5
 8005330:	080053a5 	.word	0x080053a5
 8005334:	080053a5 	.word	0x080053a5
 8005338:	080053a5 	.word	0x080053a5
 800533c:	080053a5 	.word	0x080053a5
 8005340:	080053a5 	.word	0x080053a5
 8005344:	080053a5 	.word	0x080053a5
 8005348:	080053a5 	.word	0x080053a5
 800534c:	080053a5 	.word	0x080053a5
 8005350:	080053a5 	.word	0x080053a5
 8005354:	080053a5 	.word	0x080053a5
 8005358:	080053a5 	.word	0x080053a5
 800535c:	080053a5 	.word	0x080053a5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	08005375 	.word	0x08005375
 8005368:	2b5c      	cmp	r3, #92	; 0x5c
 800536a:	d11b      	bne.n	80053a4 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	225c      	movs	r2, #92	; 0x5c
 8005370:	701a      	strb	r2, [r3, #0]
                    break;
 8005372:	e022      	b.n	80053ba <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2222      	movs	r2, #34	; 0x22
 8005378:	701a      	strb	r2, [r3, #0]
                    break;
 800537a:	e01e      	b.n	80053ba <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2262      	movs	r2, #98	; 0x62
 8005380:	701a      	strb	r2, [r3, #0]
                    break;
 8005382:	e01a      	b.n	80053ba <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2266      	movs	r2, #102	; 0x66
 8005388:	701a      	strb	r2, [r3, #0]
                    break;
 800538a:	e016      	b.n	80053ba <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	226e      	movs	r2, #110	; 0x6e
 8005390:	701a      	strb	r2, [r3, #0]
                    break;
 8005392:	e012      	b.n	80053ba <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2272      	movs	r2, #114	; 0x72
 8005398:	701a      	strb	r2, [r3, #0]
                    break;
 800539a:	e00e      	b.n	80053ba <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2274      	movs	r2, #116	; 0x74
 80053a0:	701a      	strb	r2, [r3, #0]
                    break;
 80053a2:	e00a      	b.n	80053ba <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	4914      	ldr	r1, [pc, #80]	; (80053fc <print_string_ptr+0x25c>)
 80053ac:	69b8      	ldr	r0, [r7, #24]
 80053ae:	f00b feaf 	bl	8011110 <siprintf>
                    output_pointer += 4;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	3304      	adds	r3, #4
 80053b6:	61bb      	str	r3, [r7, #24]
                    break;
 80053b8:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3301      	adds	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	3301      	adds	r3, #1
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f47f af74 	bne.w	80052b8 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	2222      	movs	r2, #34	; 0x22
 80053da:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3302      	adds	r3, #2
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]

    return true;
 80053e8:	2301      	movs	r3, #1
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	08013bb8 	.word	0x08013bb8
 80053f8:	04000037 	.word	0x04000037
 80053fc:	08013bbc 	.word	0x08013bbc

08005400 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fec5 	bl	80051a0 <print_string_ptr>
 8005416:	4603      	mov	r3, r0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <buffer_skip_whitespace+0x16>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	e02c      	b.n	8005494 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <buffer_skip_whitespace+0x2c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d306      	bcc.n	800545a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	e021      	b.n	8005494 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00d      	beq.n	800547c <buffer_skip_whitespace+0x5c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d207      	bcs.n	800547c <buffer_skip_whitespace+0x5c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4413      	add	r3, r2
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b20      	cmp	r3, #32
 800547a:	d9e9      	bls.n	8005450 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d104      	bne.n	8005492 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	1e5a      	subs	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8005492:	687b      	ldr	r3, [r7, #4]
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <skip_utf8_bom+0x1e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <skip_utf8_bom+0x1e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <skip_utf8_bom+0x22>
    {
        return NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	e01c      	b.n	80054fc <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d018      	beq.n	80054fa <skip_utf8_bom+0x5a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d211      	bcs.n	80054fa <skip_utf8_bom+0x5a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4413      	add	r3, r2
 80054e0:	2203      	movs	r2, #3
 80054e2:	4908      	ldr	r1, [pc, #32]	; (8005504 <skip_utf8_bom+0x64>)
 80054e4:	4618      	mov	r0, r3
 80054e6:	f00b ff1c 	bl	8011322 <strncmp>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	1cda      	adds	r2, r3, #3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80054fa:	687b      	ldr	r3, [r7, #4]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	08013bc4 	.word	0x08013bc4

08005508 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	e00c      	b.n	8005538 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7fa feb6 	bl	8000290 <strlen>
 8005524:	4603      	mov	r3, r0
 8005526:	3301      	adds	r3, #1
 8005528:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	6979      	ldr	r1, [r7, #20]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f805 	bl	8005540 <cJSON_ParseWithLengthOpts>
 8005536:	4603      	mov	r3, r0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08e      	sub	sp, #56	; 0x38
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800554e:	f107 0318 	add.w	r3, r7, #24
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	605a      	str	r2, [r3, #4]
 8005558:	609a      	str	r2, [r3, #8]
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	611a      	str	r2, [r3, #16]
 800555e:	615a      	str	r2, [r3, #20]
 8005560:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8005566:	4b41      	ldr	r3, [pc, #260]	; (800566c <cJSON_ParseWithLengthOpts+0x12c>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800556c:	4b3f      	ldr	r3, [pc, #252]	; (800566c <cJSON_ParseWithLengthOpts+0x12c>)
 800556e:	2200      	movs	r2, #0
 8005570:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d042      	beq.n	80055fe <cJSON_ParseWithLengthOpts+0xbe>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03f      	beq.n	80055fe <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800558a:	4a39      	ldr	r2, [pc, #228]	; (8005670 <cJSON_ParseWithLengthOpts+0x130>)
 800558c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005590:	ca07      	ldmia	r2, {r0, r1, r2}
 8005592:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8005596:	4836      	ldr	r0, [pc, #216]	; (8005670 <cJSON_ParseWithLengthOpts+0x130>)
 8005598:	f7ff f84a 	bl	8004630 <cJSON_New_Item>
 800559c:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02e      	beq.n	8005602 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80055a4:	f107 0318 	add.w	r3, r7, #24
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff ff79 	bl	80054a0 <skip_utf8_bom>
 80055ae:	4603      	mov	r3, r0
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ff35 	bl	8005420 <buffer_skip_whitespace>
 80055b6:	4603      	mov	r3, r0
 80055b8:	4619      	mov	r1, r3
 80055ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80055bc:	f000 f8fc 	bl	80057b8 <parse_value>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01f      	beq.n	8005606 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00e      	beq.n	80055ea <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80055cc:	f107 0318 	add.w	r3, r7, #24
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff ff25 	bl	8005420 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80055d6:	6a3a      	ldr	r2, [r7, #32]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d215      	bcs.n	800560a <cJSON_ParseWithLengthOpts+0xca>
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	4413      	add	r3, r2
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10f      	bne.n	800560a <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d004      	beq.n	80055fa <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
    }

    return item;
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	e031      	b.n	8005662 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80055fe:	bf00      	nop
 8005600:	e004      	b.n	800560c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8005602:	bf00      	nop
 8005604:	e002      	b.n	800560c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800560a:	bf00      	nop

fail:
    if (item != NULL)
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8005612:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005614:	f7ff f822 	bl	800465c <cJSON_Delete>
    }

    if (value != NULL)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d020      	beq.n	8005660 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	429a      	cmp	r2, r3
 800562c:	d202      	bcs.n	8005634 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	e005      	b.n	8005640 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3b01      	subs	r3, #1
 800563e:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d004      	beq.n	8005650 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	441a      	add	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <cJSON_ParseWithLengthOpts+0x12c>)
 8005652:	461a      	mov	r2, r3
 8005654:	f107 0310 	add.w	r3, r7, #16
 8005658:	e893 0003 	ldmia.w	r3, {r0, r1}
 800565c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3738      	adds	r7, #56	; 0x38
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	200002a8 	.word	0x200002a8
 8005670:	20000048 	.word	0x20000048

08005674 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800567c:	2200      	movs	r2, #0
 800567e:	2100      	movs	r1, #0
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff41 	bl	8005508 <cJSON_ParseWithOpts>
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08e      	sub	sp, #56	; 0x38
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 80056a0:	f107 0310 	add.w	r3, r7, #16
 80056a4:	2224      	movs	r2, #36	; 0x24
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f00b fe15 	bl	80112d8 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a38      	ldr	r2, [pc, #224]	; (8005794 <print+0x104>)
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	4610      	mov	r0, r2
 80056b8:	4798      	blx	r3
 80056ba:	4603      	mov	r3, r0
 80056bc:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 80056be:	4b35      	ldr	r3, [pc, #212]	; (8005794 <print+0x104>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80056d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d040      	beq.n	800575c <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80056da:	f107 0310 	add.w	r3, r7, #16
 80056de:	4619      	mov	r1, r3
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f955 	bl	8005990 <print_value>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d039      	beq.n	8005760 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 80056ec:	f107 0310 	add.w	r3, r7, #16
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff f96b 	bl	80049cc <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	6938      	ldr	r0, [r7, #16]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	3201      	adds	r2, #1
 8005708:	4611      	mov	r1, r2
 800570a:	4798      	blx	r3
 800570c:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	2b00      	cmp	r3, #0
 8005712:	d027      	beq.n	8005764 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	e01e      	b.n	8005758 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	3201      	adds	r2, #1
 8005722:	4610      	mov	r0, r2
 8005724:	4798      	blx	r3
 8005726:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01c      	beq.n	8005768 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800572e:	6939      	ldr	r1, [r7, #16]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4293      	cmp	r3, r2
 8005738:	bf28      	it	cs
 800573a:	4613      	movcs	r3, r2
 800573c:	461a      	mov	r2, r3
 800573e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005740:	f00b fec9 	bl	80114d6 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005748:	4413      	add	r3, r2
 800574a:	2200      	movs	r2, #0
 800574c:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
    }

    return printed;
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	e016      	b.n	800578a <print+0xfa>
        goto fail;
 800575c:	bf00      	nop
 800575e:	e004      	b.n	800576a <print+0xda>
        goto fail;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <print+0xda>
            goto fail;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <print+0xda>
            goto fail;
 8005768:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4610      	mov	r0, r2
 8005778:	4798      	blx	r3
    }

    if (printed != NULL)
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <print+0xf8>
    {
        hooks->deallocate(printed);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005786:	4798      	blx	r3
    }

    return NULL;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3738      	adds	r7, #56	; 0x38
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	08014448 	.word	0x08014448

08005798 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <cJSON_Print+0x1c>)
 80057a2:	2101      	movs	r1, #1
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ff73 	bl	8005690 <print>
 80057aa:	4603      	mov	r3, r0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000048 	.word	0x20000048

080057b8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <parse_value+0x18>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <parse_value+0x1c>
    {
        return false; /* no input */
 80057d0:	2300      	movs	r3, #0
 80057d2:	e0d2      	b.n	800597a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01d      	beq.n	8005816 <parse_value+0x5e>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	1d1a      	adds	r2, r3, #4
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d816      	bhi.n	8005816 <parse_value+0x5e>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	2204      	movs	r2, #4
 80057f4:	4963      	ldr	r1, [pc, #396]	; (8005984 <parse_value+0x1cc>)
 80057f6:	4618      	mov	r0, r3
 80057f8:	f00b fd93 	bl	8011322 <strncmp>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2204      	movs	r2, #4
 8005806:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	1d1a      	adds	r2, r3, #4
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	609a      	str	r2, [r3, #8]
        return true;
 8005812:	2301      	movs	r3, #1
 8005814:	e0b1      	b.n	800597a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01d      	beq.n	8005858 <parse_value+0xa0>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	1d5a      	adds	r2, r3, #5
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d816      	bhi.n	8005858 <parse_value+0xa0>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	4413      	add	r3, r2
 8005834:	2205      	movs	r2, #5
 8005836:	4954      	ldr	r1, [pc, #336]	; (8005988 <parse_value+0x1d0>)
 8005838:	4618      	mov	r0, r3
 800583a:	f00b fd72 	bl	8011322 <strncmp>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	1d5a      	adds	r2, r3, #5
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	609a      	str	r2, [r3, #8]
        return true;
 8005854:	2301      	movs	r3, #1
 8005856:	e090      	b.n	800597a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d020      	beq.n	80058a0 <parse_value+0xe8>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d819      	bhi.n	80058a0 <parse_value+0xe8>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4413      	add	r3, r2
 8005876:	2204      	movs	r2, #4
 8005878:	4944      	ldr	r1, [pc, #272]	; (800598c <parse_value+0x1d4>)
 800587a:	4618      	mov	r0, r3
 800587c:	f00b fd51 	bl	8011322 <strncmp>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	1d1a      	adds	r2, r3, #4
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	609a      	str	r2, [r3, #8]
        return true;
 800589c:	2301      	movs	r3, #1
 800589e:	e06c      	b.n	800597a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d013      	beq.n	80058ce <parse_value+0x116>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d20d      	bcs.n	80058ce <parse_value+0x116>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	4413      	add	r3, r2
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b22      	cmp	r3, #34	; 0x22
 80058c0:	d105      	bne.n	80058ce <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fb25 	bl	8004f14 <parse_string>
 80058ca:	4603      	mov	r3, r0
 80058cc:	e055      	b.n	800597a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d023      	beq.n	800591c <parse_value+0x164>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d21d      	bcs.n	800591c <parse_value+0x164>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4413      	add	r3, r2
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b2d      	cmp	r3, #45	; 0x2d
 80058ee:	d00f      	beq.n	8005910 <parse_value+0x158>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4413      	add	r3, r2
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b2f      	cmp	r3, #47	; 0x2f
 80058fe:	d90d      	bls.n	800591c <parse_value+0x164>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4413      	add	r3, r2
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b39      	cmp	r3, #57	; 0x39
 800590e:	d805      	bhi.n	800591c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fe fef4 	bl	8004700 <parse_number>
 8005918:	4603      	mov	r3, r0
 800591a:	e02e      	b.n	800597a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d013      	beq.n	800594a <parse_value+0x192>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d20d      	bcs.n	800594a <parse_value+0x192>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	4413      	add	r3, r2
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b5b      	cmp	r3, #91	; 0x5b
 800593c:	d105      	bne.n	800594a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f909 	bl	8005b58 <parse_array>
 8005946:	4603      	mov	r3, r0
 8005948:	e017      	b.n	800597a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d013      	beq.n	8005978 <parse_value+0x1c0>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d20d      	bcs.n	8005978 <parse_value+0x1c0>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4413      	add	r3, r2
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b7b      	cmp	r3, #123	; 0x7b
 800596a:	d105      	bne.n	8005978 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa3c 	bl	8005dec <parse_object>
 8005974:	4603      	mov	r3, r0
 8005976:	e000      	b.n	800597a <parse_value+0x1c2>
    }

    return false;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	08013b98 	.word	0x08013b98
 8005988:	08013bc8 	.word	0x08013bc8
 800598c:	08013bd0 	.word	0x08013bd0

08005990 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <print_value+0x1a>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <print_value+0x1e>
    {
        return false;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e0c9      	b.n	8005b42 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b80      	cmp	r3, #128	; 0x80
 80059b6:	f000 808e 	beq.w	8005ad6 <print_value+0x146>
 80059ba:	2b80      	cmp	r3, #128	; 0x80
 80059bc:	f300 80c0 	bgt.w	8005b40 <print_value+0x1b0>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	dc49      	bgt.n	8005a58 <print_value+0xc8>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f340 80bb 	ble.w	8005b40 <print_value+0x1b0>
 80059ca:	3b01      	subs	r3, #1
 80059cc:	2b1f      	cmp	r3, #31
 80059ce:	f200 80b7 	bhi.w	8005b40 <print_value+0x1b0>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <print_value+0x48>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	08005a83 	.word	0x08005a83
 80059dc:	08005aa7 	.word	0x08005aa7
 80059e0:	08005b41 	.word	0x08005b41
 80059e4:	08005a5f 	.word	0x08005a5f
 80059e8:	08005b41 	.word	0x08005b41
 80059ec:	08005b41 	.word	0x08005b41
 80059f0:	08005b41 	.word	0x08005b41
 80059f4:	08005acb 	.word	0x08005acb
 80059f8:	08005b41 	.word	0x08005b41
 80059fc:	08005b41 	.word	0x08005b41
 8005a00:	08005b41 	.word	0x08005b41
 8005a04:	08005b41 	.word	0x08005b41
 8005a08:	08005b41 	.word	0x08005b41
 8005a0c:	08005b41 	.word	0x08005b41
 8005a10:	08005b41 	.word	0x08005b41
 8005a14:	08005b1d 	.word	0x08005b1d
 8005a18:	08005b41 	.word	0x08005b41
 8005a1c:	08005b41 	.word	0x08005b41
 8005a20:	08005b41 	.word	0x08005b41
 8005a24:	08005b41 	.word	0x08005b41
 8005a28:	08005b41 	.word	0x08005b41
 8005a2c:	08005b41 	.word	0x08005b41
 8005a30:	08005b41 	.word	0x08005b41
 8005a34:	08005b41 	.word	0x08005b41
 8005a38:	08005b41 	.word	0x08005b41
 8005a3c:	08005b41 	.word	0x08005b41
 8005a40:	08005b41 	.word	0x08005b41
 8005a44:	08005b41 	.word	0x08005b41
 8005a48:	08005b41 	.word	0x08005b41
 8005a4c:	08005b41 	.word	0x08005b41
 8005a50:	08005b41 	.word	0x08005b41
 8005a54:	08005b29 	.word	0x08005b29
 8005a58:	2b40      	cmp	r3, #64	; 0x40
 8005a5a:	d06b      	beq.n	8005b34 <print_value+0x1a4>
 8005a5c:	e070      	b.n	8005b40 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8005a5e:	2105      	movs	r1, #5
 8005a60:	6838      	ldr	r0, [r7, #0]
 8005a62:	f7fe ff19 	bl	8004898 <ensure>
 8005a66:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <print_value+0xe2>
            {
                return false;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e067      	b.n	8005b42 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a35      	ldr	r2, [pc, #212]	; (8005b4c <print_value+0x1bc>)
 8005a76:	6810      	ldr	r0, [r2, #0]
 8005a78:	6018      	str	r0, [r3, #0]
 8005a7a:	7912      	ldrb	r2, [r2, #4]
 8005a7c:	711a      	strb	r2, [r3, #4]
            return true;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e05f      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8005a82:	2106      	movs	r1, #6
 8005a84:	6838      	ldr	r0, [r7, #0]
 8005a86:	f7fe ff07 	bl	8004898 <ensure>
 8005a8a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <print_value+0x106>
            {
                return false;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e055      	b.n	8005b42 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a2d      	ldr	r2, [pc, #180]	; (8005b50 <print_value+0x1c0>)
 8005a9a:	6810      	ldr	r0, [r2, #0]
 8005a9c:	6018      	str	r0, [r3, #0]
 8005a9e:	8892      	ldrh	r2, [r2, #4]
 8005aa0:	809a      	strh	r2, [r3, #4]
            return true;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e04d      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8005aa6:	2105      	movs	r1, #5
 8005aa8:	6838      	ldr	r0, [r7, #0]
 8005aaa:	f7fe fef5 	bl	8004898 <ensure>
 8005aae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <print_value+0x12a>
            {
                return false;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e043      	b.n	8005b42 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a25      	ldr	r2, [pc, #148]	; (8005b54 <print_value+0x1c4>)
 8005abe:	6810      	ldr	r0, [r2, #0]
 8005ac0:	6018      	str	r0, [r3, #0]
 8005ac2:	7912      	ldrb	r2, [r2, #4]
 8005ac4:	711a      	strb	r2, [r3, #4]
            return true;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e03b      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fe ffe7 	bl	8004aa0 <print_number>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	e035      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <print_value+0x156>
            {
                return false;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e02d      	b.n	8005b42 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fa fbd0 	bl	8000290 <strlen>
 8005af0:	4603      	mov	r3, r0
 8005af2:	3301      	adds	r3, #1
 8005af4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	6838      	ldr	r0, [r7, #0]
 8005afa:	f7fe fecd 	bl	8004898 <ensure>
 8005afe:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <print_value+0x17a>
            {
                return false;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e01b      	b.n	8005b42 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4619      	mov	r1, r3
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f00b fcdf 	bl	80114d6 <memcpy>
            return true;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e012      	b.n	8005b42 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff fc6e 	bl	8005400 <print_string>
 8005b24:	4603      	mov	r3, r0
 8005b26:	e00c      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f8d8 	bl	8005ce0 <print_array>
 8005b30:	4603      	mov	r3, r0
 8005b32:	e006      	b.n	8005b42 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa57 	bl	8005fea <print_object>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	e000      	b.n	8005b42 <print_value+0x1b2>

        default:
            return false;
 8005b40:	2300      	movs	r3, #0
    }
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	08013b98 	.word	0x08013b98
 8005b50:	08013bc8 	.word	0x08013bc8
 8005b54:	08013bd0 	.word	0x08013bd0

08005b58 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b72:	d301      	bcc.n	8005b78 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8005b74:	2300      	movs	r3, #0
 8005b76:	e0af      	b.n	8005cd8 <parse_array+0x180>
    }
    input_buffer->depth++;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b5b      	cmp	r3, #91	; 0x5b
 8005b90:	f040 8094 	bne.w	8005cbc <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8005b9e:	6838      	ldr	r0, [r7, #0]
 8005ba0:	f7ff fc3e 	bl	8005420 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00d      	beq.n	8005bc6 <parse_array+0x6e>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d207      	bcs.n	8005bc6 <parse_array+0x6e>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b5d      	cmp	r3, #93	; 0x5d
 8005bc4:	d061      	beq.n	8005c8a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <parse_array+0x80>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d305      	bcc.n	8005be4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	1e5a      	subs	r2, r3, #1
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	609a      	str	r2, [r3, #8]
        goto fail;
 8005be2:	e072      	b.n	8005cca <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	1e5a      	subs	r2, r3, #1
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	3310      	adds	r3, #16
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fd1c 	bl	8004630 <cJSON_New_Item>
 8005bf8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d05f      	beq.n	8005cc0 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	e007      	b.n	8005c20 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005c2a:	6838      	ldr	r0, [r7, #0]
 8005c2c:	f7ff fbf8 	bl	8005420 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6938      	ldr	r0, [r7, #16]
 8005c34:	f7ff fdc0 	bl	80057b8 <parse_value>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d042      	beq.n	8005cc4 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005c3e:	6838      	ldr	r0, [r7, #0]
 8005c40:	f7ff fbee 	bl	8005420 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00d      	beq.n	8005c66 <parse_array+0x10e>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d207      	bcs.n	8005c66 <parse_array+0x10e>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4413      	add	r3, r2
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b2c      	cmp	r3, #44	; 0x2c
 8005c64:	d0c3      	beq.n	8005bee <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d02d      	beq.n	8005cc8 <parse_array+0x170>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d227      	bcs.n	8005cc8 <parse_array+0x170>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4413      	add	r3, r2
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b5d      	cmp	r3, #93	; 0x5d
 8005c86:	d11f      	bne.n	8005cc8 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8005c88:	e000      	b.n	8005c8c <parse_array+0x134>
        goto success;
 8005c8a:	bf00      	nop
    input_buffer->depth--;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	1e5a      	subs	r2, r3, #1
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <parse_array+0x14a>
        head->prev = current_item;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	60da      	str	r2, [r3, #12]
    item->child = head;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	609a      	str	r2, [r3, #8]

    return true;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e00d      	b.n	8005cd8 <parse_array+0x180>
        goto fail;
 8005cbc:	bf00      	nop
 8005cbe:	e004      	b.n	8005cca <parse_array+0x172>
            goto fail; /* allocation failure */
 8005cc0:	bf00      	nop
 8005cc2:	e002      	b.n	8005cca <parse_array+0x172>
            goto fail; /* failed to parse value */
 8005cc4:	bf00      	nop
 8005cc6:	e000      	b.n	8005cca <parse_array+0x172>
        goto fail; /* expected end of array */
 8005cc8:	bf00      	nop

fail:
    if (head != NULL)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8005cd0:	6978      	ldr	r0, [r7, #20]
 8005cd2:	f7fe fcc3 	bl	800465c <cJSON_Delete>
    }

    return false;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <print_array+0x22>
    {
        return false;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e070      	b.n	8005de4 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8005d02:	2101      	movs	r1, #1
 8005d04:	6838      	ldr	r0, [r7, #0]
 8005d06:	f7fe fdc7 	bl	8004898 <ensure>
 8005d0a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <print_array+0x36>
    {
        return false;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e066      	b.n	8005de4 <print_array+0x104>
    }

    *output_pointer = '[';
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	225b      	movs	r2, #91	; 0x5b
 8005d1a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8005d30:	e03d      	b.n	8005dae <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6938      	ldr	r0, [r7, #16]
 8005d36:	f7ff fe2b 	bl	8005990 <print_value>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <print_array+0x64>
        {
            return false;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e04f      	b.n	8005de4 <print_array+0x104>
        }
        update_offset(output_buffer);
 8005d44:	6838      	ldr	r0, [r7, #0]
 8005d46:	f7fe fe41 	bl	80049cc <update_offset>
        if (current_element->next)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d02a      	beq.n	8005da8 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <print_array+0x7e>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e000      	b.n	8005d60 <print_array+0x80>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	4619      	mov	r1, r3
 8005d68:	6838      	ldr	r0, [r7, #0]
 8005d6a:	f7fe fd95 	bl	8004898 <ensure>
 8005d6e:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <print_array+0x9a>
            {
                return false;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e034      	b.n	8005de4 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	617a      	str	r2, [r7, #20]
 8005d80:	222c      	movs	r2, #44	; 0x2c
 8005d82:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	617a      	str	r2, [r7, #20]
 8005d92:	2220      	movs	r2, #32
 8005d94:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	441a      	add	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1be      	bne.n	8005d32 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8005db4:	2102      	movs	r1, #2
 8005db6:	6838      	ldr	r0, [r7, #0]
 8005db8:	f7fe fd6e 	bl	8004898 <ensure>
 8005dbc:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <print_array+0xe8>
    {
        return false;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e00d      	b.n	8005de4 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	617a      	str	r2, [r7, #20]
 8005dce:	225d      	movs	r2, #93	; 0x5d
 8005dd0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	1e5a      	subs	r2, r3, #1
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	60da      	str	r2, [r3, #12]

    return true;
 8005de2:	2301      	movs	r3, #1
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e06:	d301      	bcc.n	8005e0c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e0ea      	b.n	8005fe2 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80d0 	beq.w	8005fbe <parse_object+0x1d2>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	f080 80c9 	bcs.w	8005fbe <parse_object+0x1d2>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b7b      	cmp	r3, #123	; 0x7b
 8005e3a:	f040 80c0 	bne.w	8005fbe <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8005e48:	6838      	ldr	r0, [r7, #0]
 8005e4a:	f7ff fae9 	bl	8005420 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00e      	beq.n	8005e72 <parse_object+0x86>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d208      	bcs.n	8005e72 <parse_object+0x86>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4413      	add	r3, r2
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b7d      	cmp	r3, #125	; 0x7d
 8005e6e:	f000 808d 	beq.w	8005f8c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <parse_object+0x98>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d305      	bcc.n	8005e90 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	1e5a      	subs	r2, r3, #1
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	609a      	str	r2, [r3, #8]
        goto fail;
 8005e8e:	e0a1      	b.n	8005fd4 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	1e5a      	subs	r2, r3, #1
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	3310      	adds	r3, #16
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fbc6 	bl	8004630 <cJSON_New_Item>
 8005ea4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 808a 	beq.w	8005fc2 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	e007      	b.n	8005ece <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005ed8:	6838      	ldr	r0, [r7, #0]
 8005eda:	f7ff faa1 	bl	8005420 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6938      	ldr	r0, [r7, #16]
 8005ee2:	f7ff f817 	bl	8004f14 <parse_string>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d06c      	beq.n	8005fc6 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8005eec:	6838      	ldr	r0, [r7, #0]
 8005eee:	f7ff fa97 	bl	8005420 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2200      	movs	r2, #0
 8005efe:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d061      	beq.n	8005fca <parse_object+0x1de>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d25b      	bcs.n	8005fca <parse_object+0x1de>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b3a      	cmp	r3, #58	; 0x3a
 8005f20:	d153      	bne.n	8005fca <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005f2c:	6838      	ldr	r0, [r7, #0]
 8005f2e:	f7ff fa77 	bl	8005420 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6938      	ldr	r0, [r7, #16]
 8005f36:	f7ff fc3f 	bl	80057b8 <parse_value>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d046      	beq.n	8005fce <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005f40:	6838      	ldr	r0, [r7, #0]
 8005f42:	f7ff fa6d 	bl	8005420 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00d      	beq.n	8005f68 <parse_object+0x17c>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d207      	bcs.n	8005f68 <parse_object+0x17c>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4413      	add	r3, r2
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b2c      	cmp	r3, #44	; 0x2c
 8005f66:	d098      	beq.n	8005e9a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d031      	beq.n	8005fd2 <parse_object+0x1e6>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d22b      	bcs.n	8005fd2 <parse_object+0x1e6>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	4413      	add	r3, r2
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b7d      	cmp	r3, #125	; 0x7d
 8005f88:	d123      	bne.n	8005fd2 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8005f8a:	e000      	b.n	8005f8e <parse_object+0x1a2>
        goto success; /* empty object */
 8005f8c:	bf00      	nop
    input_buffer->depth--;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	1e5a      	subs	r2, r3, #1
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <parse_object+0x1b8>
        head->prev = current_item;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2240      	movs	r2, #64	; 0x40
 8005fa8:	60da      	str	r2, [r3, #12]
    item->child = head;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	609a      	str	r2, [r3, #8]
    return true;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e011      	b.n	8005fe2 <parse_object+0x1f6>
        goto fail; /* not an object */
 8005fbe:	bf00      	nop
 8005fc0:	e008      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8005fc2:	bf00      	nop
 8005fc4:	e006      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8005fc6:	bf00      	nop
 8005fc8:	e004      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8005fca:	bf00      	nop
 8005fcc:	e002      	b.n	8005fd4 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8005fd2:	bf00      	nop

fail:
    if (head != NULL)
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8005fda:	6978      	ldr	r0, [r7, #20]
 8005fdc:	f7fe fb3e 	bl	800465c <cJSON_Delete>
    }

    return false;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b088      	sub	sp, #32
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <print_object+0x22>
    {
        return false;
 8006008:	2300      	movs	r3, #0
 800600a:	e108      	b.n	800621e <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <print_object+0x2e>
 8006014:	2302      	movs	r3, #2
 8006016:	e000      	b.n	800601a <print_object+0x30>
 8006018:	2301      	movs	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	4619      	mov	r1, r3
 8006022:	6838      	ldr	r0, [r7, #0]
 8006024:	f7fe fc38 	bl	8004898 <ensure>
 8006028:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <print_object+0x4a>
    {
        return false;
 8006030:	2300      	movs	r3, #0
 8006032:	e0f4      	b.n	800621e <print_object+0x234>
    }

    *output_pointer++ = '{';
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	61fa      	str	r2, [r7, #28]
 800603a:	227b      	movs	r2, #123	; 0x7b
 800603c:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	61fa      	str	r2, [r7, #28]
 8006056:	220a      	movs	r2, #10
 8006058:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	441a      	add	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	609a      	str	r2, [r3, #8]

    while (current_item)
 8006066:	e0a0      	b.n	80061aa <print_object+0x1c0>
    {
        if (output_buffer->format)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d022      	beq.n	80060b6 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4619      	mov	r1, r3
 8006076:	6838      	ldr	r0, [r7, #0]
 8006078:	f7fe fc0e 	bl	8004898 <ensure>
 800607c:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <print_object+0x9e>
            {
                return false;
 8006084:	2300      	movs	r3, #0
 8006086:	e0ca      	b.n	800621e <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e007      	b.n	800609e <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	61fa      	str	r2, [r7, #28]
 8006094:	2209      	movs	r2, #9
 8006096:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3301      	adds	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d3f2      	bcc.n	800608e <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	441a      	add	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff f86f 	bl	80051a0 <print_string_ptr>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <print_object+0xe2>
        {
            return false;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e0a8      	b.n	800621e <print_object+0x234>
        }
        update_offset(output_buffer);
 80060cc:	6838      	ldr	r0, [r7, #0]
 80060ce:	f7fe fc7d 	bl	80049cc <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <print_object+0xf4>
 80060da:	2302      	movs	r3, #2
 80060dc:	e000      	b.n	80060e0 <print_object+0xf6>
 80060de:	2301      	movs	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	6838      	ldr	r0, [r7, #0]
 80060e6:	f7fe fbd7 	bl	8004898 <ensure>
 80060ea:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <print_object+0x10c>
        {
            return false;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e093      	b.n	800621e <print_object+0x234>
        }
        *output_pointer++ = ':';
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	61fa      	str	r2, [r7, #28]
 80060fc:	223a      	movs	r2, #58	; 0x3a
 80060fe:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	61fa      	str	r2, [r7, #28]
 800610e:	2209      	movs	r2, #9
 8006110:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	441a      	add	r2, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	69b8      	ldr	r0, [r7, #24]
 8006122:	f7ff fc35 	bl	8005990 <print_value>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <print_object+0x146>
        {
            return false;
 800612c:	2300      	movs	r3, #0
 800612e:	e076      	b.n	800621e <print_object+0x234>
        }
        update_offset(output_buffer);
 8006130:	6838      	ldr	r0, [r7, #0]
 8006132:	f7fe fc4b 	bl	80049cc <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <print_object+0x158>
 800613e:	2201      	movs	r2, #1
 8006140:	e000      	b.n	8006144 <print_object+0x15a>
 8006142:	2200      	movs	r2, #0
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <print_object+0x166>
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <print_object+0x168>
 8006150:	2300      	movs	r3, #0
 8006152:	4413      	add	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3301      	adds	r3, #1
 800615a:	4619      	mov	r1, r3
 800615c:	6838      	ldr	r0, [r7, #0]
 800615e:	f7fe fb9b 	bl	8004898 <ensure>
 8006162:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <print_object+0x184>
        {
            return false;
 800616a:	2300      	movs	r3, #0
 800616c:	e057      	b.n	800621e <print_object+0x234>
        }
        if (current_item->next)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	61fa      	str	r2, [r7, #28]
 800617c:	222c      	movs	r2, #44	; 0x2c
 800617e:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	61fa      	str	r2, [r7, #28]
 800618e:	220a      	movs	r2, #10
 8006190:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	441a      	add	r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f af5b 	bne.w	8006068 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <print_object+0x1d8>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	e000      	b.n	80061c4 <print_object+0x1da>
 80061c2:	2302      	movs	r3, #2
 80061c4:	4619      	mov	r1, r3
 80061c6:	6838      	ldr	r0, [r7, #0]
 80061c8:	f7fe fb66 	bl	8004898 <ensure>
 80061cc:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <print_object+0x1ee>
    {
        return false;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e022      	b.n	800621e <print_object+0x234>
    }
    if (output_buffer->format)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d010      	beq.n	8006202 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80061e0:	2300      	movs	r3, #0
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	e007      	b.n	80061f6 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	61fa      	str	r2, [r7, #28]
 80061ec:	2209      	movs	r2, #9
 80061ee:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3301      	adds	r3, #1
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d3f1      	bcc.n	80061e6 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	61fa      	str	r2, [r7, #28]
 8006208:	227d      	movs	r2, #125	; 0x7d
 800620a:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2200      	movs	r2, #0
 8006210:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	1e5a      	subs	r2, r3, #1
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	60da      	str	r2, [r3, #12]

    return true;
 800621c:	2301      	movs	r3, #1
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <get_array_item>:

    return (int)size;
}

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <get_array_item+0x18>
    {
        return NULL;
 800623a:	2300      	movs	r3, #0
 800623c:	e010      	b.n	8006260 <get_array_item+0x3a>
    }

    current_child = array->child;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8006244:	e005      	b.n	8006252 <get_array_item+0x2c>
    {
        index--;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <get_array_item+0x38>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f3      	bne.n	8006246 <get_array_item+0x20>
    }

    return current_child;
 800625e:	68fb      	ldr	r3, [r7, #12]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	da01      	bge.n	8006280 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	e005      	b.n	800628c <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff ffce 	bl	8006226 <get_array_item>
 800628a:	4603      	mov	r3, r0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <get_object_item+0x1c>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <get_object_item+0x20>
    {
        return NULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e033      	b.n	800631c <get_object_item+0x88>
    }

    current_element = object->child;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d017      	beq.n	80062f0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80062c0:	e002      	b.n	80062c8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01c      	beq.n	8006308 <get_object_item+0x74>
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d018      	beq.n	8006308 <get_object_item+0x74>
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	4619      	mov	r1, r3
 80062dc:	68b8      	ldr	r0, [r7, #8]
 80062de:	f7f9 ff77 	bl	80001d0 <strcmp>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1ec      	bne.n	80062c2 <get_object_item+0x2e>
 80062e8:	e00e      	b.n	8006308 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <get_object_item+0x74>
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	4619      	mov	r1, r3
 80062fc:	68b8      	ldr	r0, [r7, #8]
 80062fe:	f7fe f903 	bl	8004508 <case_insensitive_strcmp>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f0      	bne.n	80062ea <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <get_object_item+0x82>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <get_object_item+0x86>
        return NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	e000      	b.n	800631c <get_object_item+0x88>
    }

    return current_element;
 800631a:	697b      	ldr	r3, [r7, #20]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 800632e:	2201      	movs	r2, #1
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff ffae 	bl	8006294 <get_object_item>
 8006338:	4603      	mov	r3, r0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	605a      	str	r2, [r3, #4]
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d006      	beq.n	8006386 <add_item_to_array+0x22>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <add_item_to_array+0x22>
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d101      	bne.n	800638a <add_item_to_array+0x26>
    {
        return false;
 8006386:	2300      	movs	r3, #0
 8006388:	e01e      	b.n	80063c8 <add_item_to_array+0x64>
    }

    child = array->child;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	e00d      	b.n	80063c6 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff ffc2 	bl	8006342 <suffix_object>
            array->child->prev = item;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 80063c6:	2301      	movs	r3, #1
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff ffc1 	bl	8006364 <add_item_to_array>
 80063e2:	4603      	mov	r3, r0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80063f4:	687b      	ldr	r3, [r7, #4]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b086      	sub	sp, #24
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <add_item_to_object+0x30>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d006      	beq.n	8006432 <add_item_to_object+0x30>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <add_item_to_object+0x30>
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	429a      	cmp	r2, r3
 8006430:	d101      	bne.n	8006436 <add_item_to_object+0x34>
    {
        return false;
 8006432:	2300      	movs	r3, #0
 8006434:	e036      	b.n	80064a4 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d009      	beq.n	8006450 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800643c:	68b8      	ldr	r0, [r7, #8]
 800643e:	f7ff ffd5 	bl	80063ec <cast_away_const>
 8006442:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	e00e      	b.n	800646e <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	68b8      	ldr	r0, [r7, #8]
 8006454:	f7fe f8c4 	bl	80045e0 <cJSON_strdup>
 8006458:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <add_item_to_object+0x62>
        {
            return false;
 8006460:	2300      	movs	r3, #0
 8006462:	e01f      	b.n	80064a4 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800646c:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <add_item_to_object+0x8c>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6a12      	ldr	r2, [r2, #32]
 800648a:	4610      	mov	r0, r2
 800648c:	4798      	blx	r3
    }

    item->string = new_key;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7ff ff61 	bl	8006364 <add_item_to_array>
 80064a2:	4603      	mov	r3, r0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 80064b8:	2300      	movs	r3, #0
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <cJSON_AddItemToObject+0x28>)
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff ff9d 	bl	8006402 <add_item_to_object>
 80064c8:	4603      	mov	r3, r0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000048 	.word	0x20000048

080064d8 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af02      	add	r7, sp, #8
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 80064e6:	ed97 0b00 	vldr	d0, [r7]
 80064ea:	f000 f835 	bl	8006558 <cJSON_CreateNumber>
 80064ee:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 80064f0:	2300      	movs	r3, #0
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	4b09      	ldr	r3, [pc, #36]	; (800651c <cJSON_AddNumberToObject+0x44>)
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff ff81 	bl	8006402 <add_item_to_object>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	e003      	b.n	8006512 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800650a:	6978      	ldr	r0, [r7, #20]
 800650c:	f7fe f8a6 	bl	800465c <cJSON_Delete>
    return NULL;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000048 	.word	0x20000048

08006520 <cJSON_CreateBool>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8006528:	4809      	ldr	r0, [pc, #36]	; (8006550 <cJSON_CreateBool+0x30>)
 800652a:	f7fe f881 	bl	8004630 <cJSON_New_Item>
 800652e:	60f8      	str	r0, [r7, #12]
    if(item)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <cJSON_CreateBool+0x26>
    {
        item->type = boolean ? cJSON_True : cJSON_False;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <cJSON_CreateBool+0x20>
 800653c:	2202      	movs	r2, #2
 800653e:	e000      	b.n	8006542 <cJSON_CreateBool+0x22>
 8006540:	2201      	movs	r2, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	60da      	str	r2, [r3, #12]
    }

    return item;
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000048 	.word	0x20000048
 8006554:	00000000 	.word	0x00000000

08006558 <cJSON_CreateNumber>:

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8006562:	481f      	ldr	r0, [pc, #124]	; (80065e0 <cJSON_CreateNumber+0x88>)
 8006564:	f7fe f864 	bl	8004630 <cJSON_New_Item>
 8006568:	60f8      	str	r0, [r7, #12]
    if(item)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d02c      	beq.n	80065ca <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2208      	movs	r2, #8
 8006574:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800657c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8006580:	a315      	add	r3, pc, #84	; (adr r3, 80065d8 <cJSON_CreateNumber+0x80>)
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800658a:	f7fa facb 	bl	8000b24 <__aeabi_dcmpge>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d004      	beq.n	800659e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800659a:	615a      	str	r2, [r3, #20]
 800659c:	e015      	b.n	80065ca <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <cJSON_CreateNumber+0x8c>)
 80065a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065a8:	f7fa fab2 	bl	8000b10 <__aeabi_dcmple>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065b8:	615a      	str	r2, [r3, #20]
 80065ba:	e006      	b.n	80065ca <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 80065bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065c0:	f7fa fada 	bl	8000b78 <__aeabi_d2iz>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 80065ca:	68fb      	ldr	r3, [r7, #12]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	f3af 8000 	nop.w
 80065d8:	ffc00000 	.word	0xffc00000
 80065dc:	41dfffff 	.word	0x41dfffff
 80065e0:	20000048 	.word	0x20000048
 80065e4:	c1e00000 	.word	0xc1e00000

080065e8 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80065f0:	480f      	ldr	r0, [pc, #60]	; (8006630 <cJSON_CreateString+0x48>)
 80065f2:	f7fe f81d 	bl	8004630 <cJSON_New_Item>
 80065f6:	60f8      	str	r0, [r7, #12]
    if(item)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d012      	beq.n	8006624 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2210      	movs	r2, #16
 8006602:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8006604:	490a      	ldr	r1, [pc, #40]	; (8006630 <cJSON_CreateString+0x48>)
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fd ffea 	bl	80045e0 <cJSON_strdup>
 800660c:	4602      	mov	r2, r0
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d104      	bne.n	8006624 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7fe f81e 	bl	800465c <cJSON_Delete>
            return NULL;
 8006620:	2300      	movs	r3, #0
 8006622:	e000      	b.n	8006626 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8006624:	68fb      	ldr	r3, [r7, #12]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000048 	.word	0x20000048

08006634 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800663a:	4807      	ldr	r0, [pc, #28]	; (8006658 <cJSON_CreateArray+0x24>)
 800663c:	f7fd fff8 	bl	8004630 <cJSON_New_Item>
 8006640:	6078      	str	r0, [r7, #4]
    if(item)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800664e:	687b      	ldr	r3, [r7, #4]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000048 	.word	0x20000048

0800665c <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8006662:	4807      	ldr	r0, [pc, #28]	; (8006680 <cJSON_CreateObject+0x24>)
 8006664:	f7fd ffe4 	bl	8004630 <cJSON_New_Item>
 8006668:	6078      	str	r0, [r7, #4]
    if (item)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2240      	movs	r2, #64	; 0x40
 8006674:	60da      	str	r2, [r3, #12]
    }

    return item;
 8006676:	687b      	ldr	r3, [r7, #4]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000048 	.word	0x20000048

08006684 <cJSON_IsTrue>:

    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <cJSON_IsTrue+0x12>
    {
        return false;
 8006692:	2300      	movs	r3, #0
 8006694:	e007      	b.n	80066a6 <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	bf0c      	ite	eq
 80066a0:	2301      	moveq	r3, #1
 80066a2:	2300      	movne	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <cJSON_IsBool+0x12>
    {
        return false;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e008      	b.n	80066d6 <cJSON_IsBool+0x24>
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0303 	and.w	r3, r3, #3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf14      	ite	ne
 80066d0:	2301      	movne	r3, #1
 80066d2:	2300      	moveq	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <cJSON_IsNumber+0x12>
    {
        return false;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e007      	b.n	8006704 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	bf0c      	ite	eq
 80066fe:	2301      	moveq	r3, #1
 8006700:	2300      	movne	r3, #0
 8006702:	b2db      	uxtb	r3, r3
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <cJSON_IsString+0x12>
    {
        return false;
 800671e:	2300      	movs	r3, #0
 8006720:	e007      	b.n	8006732 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b10      	cmp	r3, #16
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <cJSON_IsArray+0x12>
    {
        return false;
 800674c:	2300      	movs	r3, #0
 800674e:	e007      	b.n	8006760 <cJSON_IsArray+0x22>
    }

    return (item->type & 0xFF) == cJSON_Array;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b20      	cmp	r3, #32
 8006758:	bf0c      	ite	eq
 800675a:	2301      	moveq	r3, #1
 800675c:	2300      	movne	r3, #0
 800675e:	b2db      	uxtb	r3, r3
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "../../Lib/MQTT/MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]
}
 8006784:	bf00      	nop
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <getNextPacketId+0x1c>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	e000      	b.n	80067ae <getNextPacketId+0x1e>
 80067ac:	2301      	movs	r3, #1
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 80067c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067c4:	b087      	sub	sp, #28
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80067ce:	f04f 33ff 	mov.w	r3, #4294967295
 80067d2:	617b      	str	r3, [r7, #20]
        sent = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80067d8:	e018      	b.n	800680c <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067de:	689c      	ldr	r4, [r3, #8]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	691a      	ldr	r2, [r3, #16]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	18d6      	adds	r6, r2, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fdd9 	bl	80073a4 <TimerLeftMS>
 80067f2:	4603      	mov	r3, r0
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	47a0      	blx	r4
 80067fc:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	db0e      	blt.n	8006822 <sendPacket+0x60>
            break;
        sent += rc;
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4413      	add	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	429a      	cmp	r2, r3
 8006812:	da07      	bge.n	8006824 <sendPacket+0x62>
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fd83 	bl	8007320 <TimerIsExpired>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0dc      	beq.n	80067da <sendPacket+0x18>
 8006820:	e000      	b.n	8006824 <sendPacket+0x62>
            break;
 8006822:	bf00      	nop
    }
    if (sent == length)
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	d10b      	bne.n	8006844 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	4619      	mov	r1, r3
 8006838:	4610      	mov	r0, r2
 800683a:	f000 fd9b 	bl	8007374 <TimerCountdown>
        rc = SUCCESSS;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e002      	b.n	800684a <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8006844:	f04f 33ff 	mov.w	r3, #4294967295
 8006848:	617b      	str	r3, [r7, #20]
    return rc;
 800684a:	697b      	ldr	r3, [r7, #20]
}
 800684c:	4618      	mov	r0, r3
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006854 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e009      	b.n	8006882 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	3304      	adds	r3, #4
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	4413      	add	r3, r2
 8006878:	2200      	movs	r2, #0
 800687a:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	3301      	adds	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b04      	cmp	r3, #4
 8006886:	ddf2      	ble.n	800686e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a3a      	ldr	r2, [r7, #32]
 8006898:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689e:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a4:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3354      	adds	r3, #84	; 0x54
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fd1e 	bl	8007304 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 80068c8:	bf00      	nop
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b08b      	sub	sp, #44	; 0x2c
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 80068dc:	2301      	movs	r3, #1
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 80068e4:	2304      	movs	r3, #4
 80068e6:	61fb      	str	r3, [r7, #28]

    *value = 0;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
 80068f2:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	3301      	adds	r3, #1
 80068f8:	623b      	str	r3, [r7, #32]
 80068fa:	6a3a      	ldr	r2, [r7, #32]
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	429a      	cmp	r2, r3
 8006900:	dd03      	ble.n	800690a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8006902:	f04f 33ff 	mov.w	r3, #4294967295
 8006906:	61bb      	str	r3, [r7, #24]
            goto exit;
 8006908:	e021      	b.n	800694e <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690e:	685c      	ldr	r4, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006914:	f107 0117 	add.w	r1, r7, #23
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	47a0      	blx	r4
 800691e:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d112      	bne.n	800694c <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006932:	fb01 f303 	mul.w	r3, r1, r3
 8006936:	441a      	add	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	01db      	lsls	r3, r3, #7
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	b25b      	sxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	dbd1      	blt.n	80068ee <decodePacket+0x1e>
exit:
 800694a:	e000      	b.n	800694e <decodePacket+0x7e>
            goto exit;
 800694c:	bf00      	nop
    return len;
 800694e:	6a3b      	ldr	r3, [r7, #32]
}
 8006950:	4618      	mov	r0, r3
 8006952:	372c      	adds	r7, #44	; 0x2c
 8006954:	46bd      	mov	sp, r7
 8006956:	bd90      	pop	{r4, r7, pc}

08006958 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8006958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800695a:	b089      	sub	sp, #36	; 0x24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8006962:	f04f 33ff 	mov.w	r3, #4294967295
 8006966:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]
    int len = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006978:	685c      	ldr	r4, [r3, #4]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	695e      	ldr	r6, [r3, #20]
 8006982:	68b8      	ldr	r0, [r7, #8]
 8006984:	f000 fd0e 	bl	80073a4 <TimerLeftMS>
 8006988:	4603      	mov	r3, r0
 800698a:	2201      	movs	r2, #1
 800698c:	4631      	mov	r1, r6
 800698e:	4628      	mov	r0, r5
 8006990:	47a0      	blx	r4
 8006992:	4603      	mov	r3, r0
 8006994:	2b01      	cmp	r3, #1
 8006996:	d13b      	bne.n	8006a10 <readPacket+0xb8>
        goto exit;

    len = 1;
 8006998:	2301      	movs	r3, #1
 800699a:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800699c:	68b8      	ldr	r0, [r7, #8]
 800699e:	f000 fd01 	bl	80073a4 <TimerLeftMS>
 80069a2:	4602      	mov	r2, r0
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	4619      	mov	r1, r3
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff ff90 	bl	80068d0 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	3301      	adds	r3, #1
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 f866 	bl	8007a8c <MQTTPacket_encode>
 80069c0:	4602      	mov	r2, r0
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	4413      	add	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	dd16      	ble.n	80069fc <readPacket+0xa4>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d2:	685c      	ldr	r4, [r3, #4]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	695a      	ldr	r2, [r3, #20]
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	18d6      	adds	r6, r2, r3
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	607b      	str	r3, [r7, #4]
 80069e4:	68b8      	ldr	r0, [r7, #8]
 80069e6:	f000 fcdd 	bl	80073a4 <TimerLeftMS>
 80069ea:	4603      	mov	r3, r0
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47a0      	blx	r4
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d10b      	bne.n	8006a14 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8006a04:	7d3b      	ldrb	r3, [r7, #20]
 8006a06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	e002      	b.n	8006a16 <readPacket+0xbe>
        goto exit;
 8006a10:	bf00      	nop
 8006a12:	e000      	b.n	8006a16 <readPacket+0xbe>
        goto exit;
 8006a14:	bf00      	nop
exit:
    return rc;
 8006a16:	69fb      	ldr	r3, [r7, #28]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3724      	adds	r7, #36	; 0x24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a20 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8006a40:	e039      	b.n	8006ab6 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b2f      	cmp	r3, #47	; 0x2f
 8006a48:	d103      	bne.n	8006a52 <isTopicMatched+0x32>
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b2f      	cmp	r3, #47	; 0x2f
 8006a50:	d13a      	bne.n	8006ac8 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b2b      	cmp	r3, #43	; 0x2b
 8006a58:	d009      	beq.n	8006a6e <isTopicMatched+0x4e>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b23      	cmp	r3, #35	; 0x23
 8006a60:	d005      	beq.n	8006a6e <isTopicMatched+0x4e>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d12e      	bne.n	8006acc <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b2b      	cmp	r3, #43	; 0x2b
 8006a74:	d112      	bne.n	8006a9c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8006a7c:	e005      	b.n	8006a8a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	3301      	adds	r3, #1
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d20b      	bcs.n	8006aaa <isTopicMatched+0x8a>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b2f      	cmp	r3, #47	; 0x2f
 8006a98:	d1f1      	bne.n	8006a7e <isTopicMatched+0x5e>
 8006a9a:	e006      	b.n	8006aaa <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b23      	cmp	r3, #35	; 0x23
 8006aa2:	d102      	bne.n	8006aaa <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	613b      	str	r3, [r7, #16]
        curf++;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	3301      	adds	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
        curn++;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <isTopicMatched+0xae>
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d3bd      	bcc.n	8006a42 <isTopicMatched+0x22>
 8006ac6:	e002      	b.n	8006ace <isTopicMatched+0xae>
            break;
 8006ac8:	bf00      	nop
 8006aca:	e000      	b.n	8006ace <isTopicMatched+0xae>
            break;
 8006acc:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d105      	bne.n	8006ae2 <isTopicMatched+0xc2>
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <isTopicMatched+0xc2>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <isTopicMatched+0xc4>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b08a      	sub	sp, #40	; 0x28
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8006afe:	f04f 33ff 	mov.w	r3, #4294967295
 8006b02:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006b04:	2300      	movs	r3, #0
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
 8006b08:	e03f      	b.n	8006b8a <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	3304      	adds	r3, #4
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4413      	add	r3, r2
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d034      	beq.n	8006b84 <deliverMessage+0x92>
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	3304      	adds	r3, #4
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	4413      	add	r3, r2
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	4619      	mov	r1, r3
 8006b28:	68b8      	ldr	r0, [r7, #8]
 8006b2a:	f001 f97f 	bl	8007e2c <MQTTPacket_equals>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10c      	bne.n	8006b4e <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	3304      	adds	r3, #4
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7ff ff6c 	bl	8006a20 <isTopicMatched>
 8006b48:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01a      	beq.n	8006b84 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	3304      	adds	r3, #4
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	4413      	add	r3, r2
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d012      	beq.n	8006b84 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8006b5e:	f107 0318 	add.w	r3, r7, #24
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff fe00 	bl	800676c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	3304      	adds	r3, #4
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	4413      	add	r3, r2
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f107 0218 	add.w	r2, r7, #24
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4798      	blx	r3
                rc = SUCCESSS;
 8006b80:	2300      	movs	r3, #0
 8006b82:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	3301      	adds	r3, #1
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	ddbc      	ble.n	8006b0a <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b96:	d112      	bne.n	8006bbe <deliverMessage+0xcc>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00e      	beq.n	8006bbe <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8006ba0:	f107 0310 	add.w	r3, r7, #16
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff fddf 	bl	800676c <NewMessageData>
        c->defaultMessageHandler(&md);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb2:	f107 0210 	add.w	r2, r7, #16
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4798      	blx	r3
        rc = SUCCESSS;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3728      	adds	r7, #40	; 0x28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <keepalive>:


int keepalive(MQTTClient* c)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8006bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd4:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
        goto exit;
 8006be2:	e033      	b.n	8006c4c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3354      	adds	r3, #84	; 0x54
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fb99 	bl	8007320 <TimerIsExpired>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d02a      	beq.n	8006c4a <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	7f1b      	ldrb	r3, [r3, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d126      	bne.n	8006c4a <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8006bfc:	f107 0308 	add.w	r3, r7, #8
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fb7f 	bl	8007304 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8006c06:	f107 0308 	add.w	r3, r7, #8
 8006c0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fb9c 	bl	800734c <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f000 fe68 	bl	80078f4 <MQTTSerialize_pingreq>
 8006c24:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	dd0f      	ble.n	8006c4c <keepalive+0x84>
 8006c2c:	f107 0308 	add.w	r3, r7, #8
 8006c30:	461a      	mov	r2, r3
 8006c32:	6939      	ldr	r1, [r7, #16]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fdc4 	bl	80067c2 <sendPacket>
 8006c3a:	6178      	str	r0, [r7, #20]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <keepalive+0x84>
                c->ping_outstanding = 1;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	771a      	strb	r2, [r3, #28]
 8006c48:	e000      	b.n	8006c4c <keepalive+0x84>
        }
    }

exit:
 8006c4a:	bf00      	nop
    return rc;
 8006c4c:	697b      	ldr	r3, [r7, #20]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8006c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5a:	b095      	sub	sp, #84	; 0x54
 8006c5c:	af06      	add	r7, sp, #24
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff fe77 	bl	8006958 <readPacket>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8006c6e:	2300      	movs	r3, #0
 8006c70:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8006c72:	2300      	movs	r3, #0
 8006c74:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8006c76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c78:	3b02      	subs	r3, #2
 8006c7a:	2b0b      	cmp	r3, #11
 8006c7c:	f200 80c0 	bhi.w	8006e00 <cycle+0x1a8>
 8006c80:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <cycle+0x30>)
 8006c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c86:	bf00      	nop
 8006c88:	08006e01 	.word	0x08006e01
 8006c8c:	08006cb9 	.word	0x08006cb9
 8006c90:	08006e01 	.word	0x08006e01
 8006c94:	08006d81 	.word	0x08006d81
 8006c98:	08006e01 	.word	0x08006e01
 8006c9c:	08006e01 	.word	0x08006e01
 8006ca0:	08006e01 	.word	0x08006e01
 8006ca4:	08006e01 	.word	0x08006e01
 8006ca8:	08006e01 	.word	0x08006e01
 8006cac:	08006e01 	.word	0x08006e01
 8006cb0:	08006e01 	.word	0x08006e01
 8006cb4:	08006df3 	.word	0x08006df3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	f107 0210 	add.w	r2, r7, #16
 8006cc6:	1d15      	adds	r5, r2, #4
 8006cc8:	f107 0210 	add.w	r2, r7, #16
 8006ccc:	1c54      	adds	r4, r2, #1
 8006cce:	f107 010c 	add.w	r1, r7, #12
 8006cd2:	f107 0210 	add.w	r2, r7, #16
 8006cd6:	1c90      	adds	r0, r2, #2
 8006cd8:	9604      	str	r6, [sp, #16]
 8006cda:	9303      	str	r3, [sp, #12]
 8006cdc:	f107 0310 	add.w	r3, r7, #16
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	9302      	str	r3, [sp, #8]
 8006ce4:	f107 0310 	add.w	r3, r7, #16
 8006ce8:	3308      	adds	r3, #8
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	f107 0320 	add.w	r3, r7, #32
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	462b      	mov	r3, r5
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	f000 fe0c 	bl	8007912 <MQTTDeserialize_publish>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	f040 8083 	bne.w	8006e08 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8006d08:	f107 0210 	add.w	r2, r7, #16
 8006d0c:	f107 0320 	add.w	r3, r7, #32
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff feed 	bl	8006af2 <deliverMessage>
            if (msg.qos != QOS0)
 8006d18:	7c3b      	ldrb	r3, [r7, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d06d      	beq.n	8006dfa <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8006d1e:	7c3b      	ldrb	r3, [r7, #16]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d10c      	bne.n	8006d3e <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6918      	ldr	r0, [r3, #16]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	8abb      	ldrh	r3, [r7, #20]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	2300      	movs	r3, #0
 8006d34:	2204      	movs	r2, #4
 8006d36:	f001 f946 	bl	8007fc6 <MQTTSerialize_ack>
 8006d3a:	6378      	str	r0, [r7, #52]	; 0x34
 8006d3c:	e00e      	b.n	8006d5c <cycle+0x104>
                else if (msg.qos == QOS2)
 8006d3e:	7c3b      	ldrb	r3, [r7, #16]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d10b      	bne.n	8006d5c <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6918      	ldr	r0, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	8abb      	ldrh	r3, [r7, #20]
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	2300      	movs	r3, #0
 8006d54:	2205      	movs	r2, #5
 8006d56:	f001 f936 	bl	8007fc6 <MQTTSerialize_ack>
 8006d5a:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	dc03      	bgt.n	8006d6a <cycle+0x112>
                    rc = FAILURE;
 8006d62:	f04f 33ff 	mov.w	r3, #4294967295
 8006d66:	633b      	str	r3, [r7, #48]	; 0x30
 8006d68:	e005      	b.n	8006d76 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff fd27 	bl	80067c2 <sendPacket>
 8006d74:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7c:	d13d      	bne.n	8006dfa <cycle+0x1a2>
                    goto exit; // there was a problem
 8006d7e:	e044      	b.n	8006e0a <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695c      	ldr	r4, [r3, #20]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f107 020a 	add.w	r2, r7, #10
 8006d8c:	f107 0109 	add.w	r1, r7, #9
 8006d90:	f107 0008 	add.w	r0, r7, #8
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4623      	mov	r3, r4
 8006d98:	f000 fe2d 	bl	80079f6 <MQTTDeserialize_ack>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d003      	beq.n	8006daa <cycle+0x152>
                rc = FAILURE;
 8006da2:	f04f 33ff 	mov.w	r3, #4294967295
 8006da6:	633b      	str	r3, [r7, #48]	; 0x30
 8006da8:	e01e      	b.n	8006de8 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6918      	ldr	r0, [r3, #16]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	4619      	mov	r1, r3
 8006db4:	897b      	ldrh	r3, [r7, #10]
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	2300      	movs	r3, #0
 8006dba:	2206      	movs	r2, #6
 8006dbc:	f001 f903 	bl	8007fc6 <MQTTSerialize_ack>
 8006dc0:	6378      	str	r0, [r7, #52]	; 0x34
 8006dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dc03      	bgt.n	8006dd0 <cycle+0x178>
                rc = FAILURE;
 8006dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8006dce:	e00b      	b.n	8006de8 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff fcf4 	bl	80067c2 <sendPacket>
 8006dda:	6338      	str	r0, [r7, #48]	; 0x30
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <cycle+0x190>
                rc = FAILURE; // there was a problem
 8006de2:	f04f 33ff 	mov.w	r3, #4294967295
 8006de6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d106      	bne.n	8006dfe <cycle+0x1a6>
                goto exit; // there was a problem
 8006df0:	e00b      	b.n	8006e0a <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]
            break;
 8006df8:	e002      	b.n	8006e00 <cycle+0x1a8>
            break;
 8006dfa:	bf00      	nop
 8006dfc:	e000      	b.n	8006e00 <cycle+0x1a8>
            break;
 8006dfe:	bf00      	nop
    }
    keepalive(c);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff fee1 	bl	8006bc8 <keepalive>
 8006e06:	e000      	b.n	8006e0a <cycle+0x1b2>
                goto exit;
 8006e08:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <cycle+0x1bc>
        rc = packet_type;
 8006e10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e12:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	373c      	adds	r7, #60	; 0x3c
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1e:	bf00      	nop

08006e20 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8006e2e:	f107 030c 	add.w	r3, r7, #12
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fa66 	bl	8007304 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	f107 030c 	add.w	r3, r7, #12
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fa83 	bl	800734c <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 8006e46:	f107 030c 	add.w	r3, r7, #12
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff ff03 	bl	8006c58 <cycle>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e58:	d102      	bne.n	8006e60 <MQTTYield+0x40>
    {
        rc = FAILURE;
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5e:	617b      	str	r3, [r7, #20]
    }

    return rc;
 8006e60:	697b      	ldr	r3, [r7, #20]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8006e76:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7a:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fa4f 	bl	8007320 <TimerIsExpired>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff fee4 	bl	8006c58 <cycle>
 8006e90:	6178      	str	r0, [r7, #20]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d1f0      	bne.n	8006e7c <waitfor+0x12>
 8006e9a:	e000      	b.n	8006e9e <waitfor+0x34>
            break; // we timed out
 8006e9c:	bf00      	nop

    return rc;
 8006e9e:	697b      	ldr	r3, [r7, #20]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b09e      	sub	sp, #120	; 0x78
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb6:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8006eb8:	4a3d      	ldr	r2, [pc, #244]	; (8006fb0 <MQTTConnect+0x108>)
 8006eba:	f107 0310 	add.w	r3, r7, #16
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	2258      	movs	r2, #88	; 0x58
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f00a fb07 	bl	80114d6 <memcpy>
    int len = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d15d      	bne.n	8006f90 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8006ed4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fa13 	bl	8007304 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fa2f 	bl	800734c <TimerCountdownMS>

    if (options == 0)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8006ef4:	f107 0310 	add.w	r3, r7, #16
 8006ef8:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	8b1b      	ldrh	r3, [r3, #24]
 8006efe:	461a      	mov	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4610      	mov	r0, r2
 8006f12:	f000 fa2f 	bl	8007374 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6918      	ldr	r0, [r3, #16]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	4619      	mov	r1, r3
 8006f22:	f000 fb5f 	bl	80075e4 <MQTTSerialize_connect>
 8006f26:	6738      	str	r0, [r7, #112]	; 0x70
 8006f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	dd32      	ble.n	8006f94 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 8006f2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006f32:	461a      	mov	r2, r3
 8006f34:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff fc43 	bl	80067c2 <sendPacket>
 8006f3c:	6778      	str	r0, [r7, #116]	; 0x74
 8006f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d129      	bne.n	8006f98 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8006f44:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2102      	movs	r1, #2
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff ff8c 	bl	8006e6a <waitfor>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d117      	bne.n	8006f88 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 8006f58:	23ff      	movs	r3, #255	; 0xff
 8006f5a:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	695a      	ldr	r2, [r3, #20]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f107 010f 	add.w	r1, r7, #15
 8006f6c:	f107 000e 	add.w	r0, r7, #14
 8006f70:	f000 fc24 	bl	80077bc <MQTTDeserialize_connack>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d102      	bne.n	8006f80 <MQTTConnect+0xd8>
            rc = connack_rc;
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	677b      	str	r3, [r7, #116]	; 0x74
 8006f7e:	e00c      	b.n	8006f9a <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8006f80:	f04f 33ff 	mov.w	r3, #4294967295
 8006f84:	677b      	str	r3, [r7, #116]	; 0x74
 8006f86:	e008      	b.n	8006f9a <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 8006f88:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8c:	677b      	str	r3, [r7, #116]	; 0x74
 8006f8e:	e004      	b.n	8006f9a <MQTTConnect+0xf2>
		goto exit;
 8006f90:	bf00      	nop
 8006f92:	e002      	b.n	8006f9a <MQTTConnect+0xf2>
        goto exit;
 8006f94:	bf00      	nop
 8006f96:	e000      	b.n	8006f9a <MQTTConnect+0xf2>
        goto exit; // there was a problem
 8006f98:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 8006f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <MQTTConnect+0xfe>
        c->isconnected = 1;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 8006fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3778      	adds	r7, #120	; 0x78
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	08013bd8 	.word	0x08013bd8

08006fb4 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8006fb4:	b5b0      	push	{r4, r5, r7, lr}
 8006fb6:	b094      	sub	sp, #80	; 0x50
 8006fb8:	af04      	add	r7, sp, #16
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8006fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	623b      	str	r3, [r7, #32]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 8083 	beq.w	80070f2 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 8006fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 f987 	bl	8007304 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f000 f9a3 	bl	800734c <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	691c      	ldr	r4, [r3, #16]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	461d      	mov	r5, r3
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff fbbd 	bl	8006790 <getNextPacketId>
 8007016:	4603      	mov	r3, r0
 8007018:	b29a      	uxth	r2, r3
 800701a:	f107 031f 	add.w	r3, r7, #31
 800701e:	9302      	str	r3, [sp, #8]
 8007020:	f107 0320 	add.w	r3, r7, #32
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	2301      	movs	r3, #1
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	4613      	mov	r3, r2
 800702c:	2200      	movs	r2, #0
 800702e:	4629      	mov	r1, r5
 8007030:	4620      	mov	r0, r4
 8007032:	f001 f844 	bl	80080be <MQTTSerialize_subscribe>
 8007036:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 8007038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703a:	2b00      	cmp	r3, #0
 800703c:	dd5b      	ble.n	80070f6 <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800703e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007042:	461a      	mov	r2, r3
 8007044:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff fbbb 	bl	80067c2 <sendPacket>
 800704c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800704e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d152      	bne.n	80070fa <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8007054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007058:	461a      	mov	r2, r3
 800705a:	2109      	movs	r1, #9
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff ff04 	bl	8006e6a <waitfor>
 8007062:	4603      	mov	r3, r0
 8007064:	2b09      	cmp	r3, #9
 8007066:	d140      	bne.n	80070ea <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 8007068:	2300      	movs	r3, #0
 800706a:	61bb      	str	r3, [r7, #24]
 800706c:	f04f 33ff 	mov.w	r3, #4294967295
 8007070:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	68d2      	ldr	r2, [r2, #12]
 800707a:	4614      	mov	r4, r2
 800707c:	f107 0114 	add.w	r1, r7, #20
 8007080:	f107 0218 	add.w	r2, r7, #24
 8007084:	f107 0012 	add.w	r0, r7, #18
 8007088:	9401      	str	r4, [sp, #4]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	460b      	mov	r3, r1
 800708e:	2101      	movs	r1, #1
 8007090:	f001 f88f 	bl	80081b2 <MQTTDeserialize_suback>
 8007094:	4603      	mov	r3, r0
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 800709e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a0:	2b80      	cmp	r3, #128	; 0x80
 80070a2:	d02b      	beq.n	80070fc <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80070a4:	2300      	movs	r3, #0
 80070a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80070a8:	e01b      	b.n	80070e2 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	3304      	adds	r3, #4
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	4413      	add	r3, r2
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d110      	bne.n	80070dc <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	3304      	adds	r3, #4
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	4413      	add	r3, r2
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	3304      	adds	r3, #4
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	4413      	add	r3, r2
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	609a      	str	r2, [r3, #8]
                    rc = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80070da:	e00f      	b.n	80070fc <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	3301      	adds	r3, #1
 80070e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	dde0      	ble.n	80070aa <MQTTSubscribe+0xf6>
 80070e8:	e008      	b.n	80070fc <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 80070ea:	f04f 33ff 	mov.w	r3, #4294967295
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070f0:	e004      	b.n	80070fc <MQTTSubscribe+0x148>
		goto exit;
 80070f2:	bf00      	nop
 80070f4:	e002      	b.n	80070fc <MQTTSubscribe+0x148>
        goto exit;
 80070f6:	bf00      	nop
 80070f8:	e000      	b.n	80070fc <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 80070fa:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80070fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3740      	adds	r7, #64	; 0x40
 8007102:	46bd      	mov	sp, r7
 8007104:	bdb0      	pop	{r4, r5, r7, pc}

08007106 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8007106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007108:	b097      	sub	sp, #92	; 0x5c
 800710a:	af08      	add	r7, sp, #32
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8007112:	f04f 33ff 	mov.w	r3, #4294967295
 8007116:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	2300      	movs	r3, #0
 800711e:	623b      	str	r3, [r7, #32]
 8007120:	2300      	movs	r3, #0
 8007122:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 809b 	beq.w	800726c <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 8007136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f8e2 	bl	8007304 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007148:	4611      	mov	r1, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f8fe 	bl	800734c <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d003      	beq.n	8007160 <MQTTPublish+0x5a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b02      	cmp	r3, #2
 800715e:	d106      	bne.n	800716e <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff fb15 	bl	8006790 <getNextPacketId>
 8007166:	4603      	mov	r3, r0
 8007168:	b29a      	uxth	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	469c      	mov	ip, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	469e      	mov	lr, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	785d      	ldrb	r5, [r3, #1]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8007190:	9206      	str	r2, [sp, #24]
 8007192:	9305      	str	r3, [sp, #20]
 8007194:	ac02      	add	r4, sp, #8
 8007196:	f107 031c 	add.w	r3, r7, #28
 800719a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800719e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80071a2:	9601      	str	r6, [sp, #4]
 80071a4:	9500      	str	r5, [sp, #0]
 80071a6:	4673      	mov	r3, lr
 80071a8:	2200      	movs	r2, #0
 80071aa:	4661      	mov	r1, ip
 80071ac:	6838      	ldr	r0, [r7, #0]
 80071ae:	f000 fe94 	bl	8007eda <MQTTSerialize_publish>
 80071b2:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	dd5a      	ble.n	8007270 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 80071ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071be:	461a      	mov	r2, r3
 80071c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff fafd 	bl	80067c2 <sendPacket>
 80071c8:	6378      	str	r0, [r7, #52]	; 0x34
 80071ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d151      	bne.n	8007274 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d122      	bne.n	800721e <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80071d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071dc:	461a      	mov	r2, r3
 80071de:	2104      	movs	r1, #4
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff fe42 	bl	8006e6a <waitfor>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d114      	bne.n	8007216 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	695c      	ldr	r4, [r3, #20]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f107 021a 	add.w	r2, r7, #26
 80071f8:	f107 0119 	add.w	r1, r7, #25
 80071fc:	f107 0018 	add.w	r0, r7, #24
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	4623      	mov	r3, r4
 8007204:	f000 fbf7 	bl	80079f6 <MQTTDeserialize_ack>
 8007208:	4603      	mov	r3, r0
 800720a:	2b01      	cmp	r3, #1
 800720c:	d035      	beq.n	800727a <MQTTPublish+0x174>
                rc = FAILURE;
 800720e:	f04f 33ff 	mov.w	r3, #4294967295
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
 8007214:	e031      	b.n	800727a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8007216:	f04f 33ff 	mov.w	r3, #4294967295
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
 800721c:	e02d      	b.n	800727a <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d128      	bne.n	8007278 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8007226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800722a:	461a      	mov	r2, r3
 800722c:	2107      	movs	r1, #7
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff fe1b 	bl	8006e6a <waitfor>
 8007234:	4603      	mov	r3, r0
 8007236:	2b07      	cmp	r3, #7
 8007238:	d114      	bne.n	8007264 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	695c      	ldr	r4, [r3, #20]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f107 0216 	add.w	r2, r7, #22
 8007246:	f107 0115 	add.w	r1, r7, #21
 800724a:	f107 0014 	add.w	r0, r7, #20
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	4623      	mov	r3, r4
 8007252:	f000 fbd0 	bl	80079f6 <MQTTDeserialize_ack>
 8007256:	4603      	mov	r3, r0
 8007258:	2b01      	cmp	r3, #1
 800725a:	d00e      	beq.n	800727a <MQTTPublish+0x174>
                rc = FAILURE;
 800725c:	f04f 33ff 	mov.w	r3, #4294967295
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
 8007262:	e00a      	b.n	800727a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8007264:	f04f 33ff 	mov.w	r3, #4294967295
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
 800726a:	e006      	b.n	800727a <MQTTPublish+0x174>
		goto exit;
 800726c:	bf00      	nop
 800726e:	e004      	b.n	800727a <MQTTPublish+0x174>
        goto exit;
 8007270:	bf00      	nop
 8007272:	e002      	b.n	800727a <MQTTPublish+0x174>
        goto exit; // there was a problem
 8007274:	bf00      	nop
 8007276:	e000      	b.n	800727a <MQTTPublish+0x174>
    }

exit:
 8007278:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800727a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800727c:	4618      	mov	r0, r3
 800727e:	373c      	adds	r7, #60	; 0x3c
 8007280:	46bd      	mov	sp, r7
 8007282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007284 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
 8007290:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 8007296:	f107 0308 	add.w	r3, r7, #8
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f832 	bl	8007304 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	f107 0308 	add.w	r3, r7, #8
 80072a8:	4611      	mov	r1, r2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 f84e 	bl	800734c <TimerCountdownMS>

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f000 fb0b 	bl	80078d6 <MQTTSerialize_disconnect>
 80072c0:	6138      	str	r0, [r7, #16]
    if (len > 0)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dd07      	ble.n	80072d8 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	461a      	mov	r2, r3
 80072ce:	6939      	ldr	r1, [r7, #16]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff fa76 	bl	80067c2 <sendPacket>
 80072d6:	6178      	str	r0, [r7, #20]

    c->isconnected = 0;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80072de:	697b      	ldr	r3, [r7, #20]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
	MilliTimer++;
 80072ec:	4b04      	ldr	r3, [pc, #16]	; (8007300 <MilliTimer_Handler+0x18>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3301      	adds	r3, #1
 80072f2:	4a03      	ldr	r2, [pc, #12]	; (8007300 <MilliTimer_Handler+0x18>)
 80072f4:	6013      	str	r3, [r2, #0]
}
 80072f6:	bf00      	nop
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	200002b0 	.word	0x200002b0

08007304 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	605a      	str	r2, [r3, #4]
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
	...

08007320 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <TimerIsExpired+0x28>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	0fdb      	lsrs	r3, r3, #31
 8007338:	b2db      	uxtb	r3, r3
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	200002b0 	.word	0x200002b0

0800734c <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8007356:	4b06      	ldr	r3, [pc, #24]	; (8007370 <TimerCountdownMS+0x24>)
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	441a      	add	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	605a      	str	r2, [r3, #4]
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	200002b0 	.word	0x200002b0

08007374 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007384:	fb03 f202 	mul.w	r2, r3, r2
 8007388:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <TimerCountdown+0x2c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	441a      	add	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	605a      	str	r2, [r3, #4]
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	200002b0 	.word	0x200002b0

080073a4 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	4b06      	ldr	r3, [pc, #24]	; (80073cc <TimerLeftMS+0x28>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	200002b0 	.word	0x200002b0

080073d0 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a07      	ldr	r2, [pc, #28]	; (8007400 <NewNetwork+0x30>)
 80073e4:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a06      	ldr	r2, [pc, #24]	; (8007404 <NewNetwork+0x34>)
 80073ea:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a06      	ldr	r2, [pc, #24]	; (8007408 <NewNetwork+0x38>)
 80073f0:	60da      	str	r2, [r3, #12]
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	0800740d 	.word	0x0800740d
 8007404:	08007467 	.word	0x08007467
 8007408:	080074af 	.word	0x080074af

0800740c <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	3301      	adds	r3, #1
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007428:	4618      	mov	r0, r3
 800742a:	f7fb f921 	bl	8002670 <WIZCHIP_READ>
 800742e:	4603      	mov	r3, r0
 8007430:	2b17      	cmp	r3, #23
 8007432:	d113      	bne.n	800745c <w5x00_read+0x50>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	4618      	mov	r0, r3
 800743c:	f7fb fabd 	bl	80029ba <getSn_RX_RSR>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	b292      	uxth	r2, r2
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	4618      	mov	r0, r3
 8007454:	f7fb ffca 	bl	80033ec <recv>
 8007458:	4603      	mov	r3, r0
 800745a:	e000      	b.n	800745e <w5x00_read+0x52>

	return SOCK_ERROR;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	3301      	adds	r3, #1
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007482:	4618      	mov	r0, r3
 8007484:	f7fb f8f4 	bl	8002670 <WIZCHIP_READ>
 8007488:	4603      	mov	r3, r0
 800748a:	2b17      	cmp	r3, #23
 800748c:	d10a      	bne.n	80074a4 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	b292      	uxth	r2, r2
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	4618      	mov	r0, r3
 800749c:	f7fb feac 	bl	80031f8 <send>
 80074a0:	4603      	mov	r3, r0
 80074a2:	e000      	b.n	80074a6 <w5x00_write+0x40>

	return SOCK_ERROR;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fb fe25 	bl	800310c <disconnect>
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b086      	sub	sp, #24
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	4613      	mov	r3, r2
 80074d6:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 80074d8:	f243 0339 	movw	r3, #12345	; 0x3039
 80074dc:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	b2d8      	uxtb	r0, r3
 80074e4:	8afa      	ldrh	r2, [r7, #22]
 80074e6:	2300      	movs	r3, #0
 80074e8:	2101      	movs	r1, #1
 80074ea:	f7fb fbb1 	bl	8002c50 <socket>
 80074ee:	4603      	mov	r3, r0
 80074f0:	461a      	mov	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d001      	beq.n	80074fe <ConnectNetwork+0x34>
		return SOCK_ERROR;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e00d      	b.n	800751a <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	88fa      	ldrh	r2, [r7, #6]
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	4618      	mov	r0, r3
 800750a:	f7fb fd23 	bl	8002f54 <connect>
 800750e:	4603      	mov	r3, r0
 8007510:	2b01      	cmp	r3, #1
 8007512:	d001      	beq.n	8007518 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8007514:	2300      	movs	r3, #0
 8007516:	e000      	b.n	800751a <ConnectNetwork+0x50>

	return SOCK_OK;
 8007518:	2301      	movs	r3, #1
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8007522:	b590      	push	{r4, r7, lr}
 8007524:	b085      	sub	sp, #20
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
	int len = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	7a1b      	ldrb	r3, [r3, #8]
 8007532:	2b03      	cmp	r3, #3
 8007534:	d102      	bne.n	800753c <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8007536:	230c      	movs	r3, #12
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e005      	b.n	8007548 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7a1b      	ldrb	r3, [r3, #8]
 8007540:	2b04      	cmp	r3, #4
 8007542:	d101      	bne.n	8007548 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8007544:	230a      	movs	r3, #10
 8007546:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	330c      	adds	r3, #12
 800754c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007550:	f000 fc53 	bl	8007dfa <MQTTstrlen>
 8007554:	4603      	mov	r3, r0
 8007556:	3302      	adds	r3, #2
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	7edb      	ldrb	r3, [r3, #27]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d013      	beq.n	800758e <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3324      	adds	r3, #36	; 0x24
 800756a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800756e:	f000 fc44 	bl	8007dfa <MQTTstrlen>
 8007572:	4603      	mov	r3, r0
 8007574:	1c9c      	adds	r4, r3, #2
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3330      	adds	r3, #48	; 0x30
 800757a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800757e:	f000 fc3c 	bl	8007dfa <MQTTstrlen>
 8007582:	4603      	mov	r3, r0
 8007584:	4423      	add	r3, r4
 8007586:	3302      	adds	r3, #2
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <MQTTSerialize_connectLength+0x7c>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3340      	adds	r3, #64	; 0x40
 80075a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075a6:	f000 fc28 	bl	8007dfa <MQTTstrlen>
 80075aa:	4603      	mov	r3, r0
 80075ac:	3302      	adds	r3, #2
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d103      	bne.n	80075c4 <MQTTSerialize_connectLength+0xa2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	334c      	adds	r3, #76	; 0x4c
 80075c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075cc:	f000 fc15 	bl	8007dfa <MQTTstrlen>
 80075d0:	4603      	mov	r3, r0
 80075d2:	3302      	adds	r3, #2
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 80075da:	68fb      	ldr	r3, [r7, #12]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd90      	pop	{r4, r7, pc}

080075e4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08a      	sub	sp, #40	; 0x28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80075f4:	2300      	movs	r3, #0
 80075f6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
	int len = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8007600:	f04f 33ff 	mov.w	r3, #4294967295
 8007604:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff ff8b 	bl	8007522 <MQTTSerialize_connectLength>
 800760c:	6238      	str	r0, [r7, #32]
 800760e:	6a38      	ldr	r0, [r7, #32]
 8007610:	f000 faa8 	bl	8007b64 <MQTTPacket_len>
 8007614:	4602      	mov	r2, r0
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	4293      	cmp	r3, r2
 800761a:	da03      	bge.n	8007624 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800761c:	f06f 0301 	mvn.w	r3, #1
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8007622:	e0c2      	b.n	80077aa <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8007628:	7e3b      	ldrb	r3, [r7, #24]
 800762a:	2201      	movs	r2, #1
 800762c:	f362 1307 	bfi	r3, r2, #4, #4
 8007630:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8007632:	7e3a      	ldrb	r2, [r7, #24]
 8007634:	f107 031c 	add.w	r3, r7, #28
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fb21 	bl	8007c82 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	6a39      	ldr	r1, [r7, #32]
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fa21 	bl	8007a8c <MQTTPacket_encode>
 800764a:	4602      	mov	r2, r0
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7a1b      	ldrb	r3, [r3, #8]
 8007656:	2b04      	cmp	r3, #4
 8007658:	d10c      	bne.n	8007674 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800765a:	f107 031c 	add.w	r3, r7, #28
 800765e:	4955      	ldr	r1, [pc, #340]	; (80077b4 <MQTTSerialize_connect+0x1d0>)
 8007660:	4618      	mov	r0, r3
 8007662:	f000 fb4c 	bl	8007cfe <writeCString>
		writeChar(&ptr, (char) 4);
 8007666:	f107 031c 	add.w	r3, r7, #28
 800766a:	2104      	movs	r1, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fb08 	bl	8007c82 <writeChar>
 8007672:	e00b      	b.n	800768c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8007674:	f107 031c 	add.w	r3, r7, #28
 8007678:	494f      	ldr	r1, [pc, #316]	; (80077b8 <MQTTSerialize_connect+0x1d4>)
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fb3f 	bl	8007cfe <writeCString>
		writeChar(&ptr, (char) 3);
 8007680:	f107 031c 	add.w	r3, r7, #28
 8007684:	2103      	movs	r1, #3
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fafb 	bl	8007c82 <writeChar>
	}

	flags.all = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	7e9b      	ldrb	r3, [r3, #26]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	b2da      	uxtb	r2, r3
 800769a:	7d3b      	ldrb	r3, [r7, #20]
 800769c:	f362 0341 	bfi	r3, r2, #1, #1
 80076a0:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	7edb      	ldrb	r3, [r3, #27]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf14      	ite	ne
 80076aa:	2301      	movne	r3, #1
 80076ac:	2300      	moveq	r3, #0
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	7d3b      	ldrb	r3, [r7, #20]
 80076b2:	f362 0382 	bfi	r3, r2, #2, #1
 80076b6:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80076b8:	7d3b      	ldrb	r3, [r7, #20]
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d013      	beq.n	80076ec <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	7d3b      	ldrb	r3, [r7, #20]
 80076d2:	f362 03c4 	bfi	r3, r2, #3, #2
 80076d6:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	7d3b      	ldrb	r3, [r7, #20]
 80076e6:	f362 1345 	bfi	r3, r2, #5, #1
 80076ea:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <MQTTSerialize_connect+0x118>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80076fc:	7d3b      	ldrb	r3, [r7, #20]
 80076fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007702:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d103      	bne.n	8007714 <MQTTSerialize_connect+0x130>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8007714:	7d3b      	ldrb	r3, [r7, #20]
 8007716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800771a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800771c:	7d3a      	ldrb	r2, [r7, #20]
 800771e:	f107 031c 	add.w	r3, r7, #28
 8007722:	4611      	mov	r1, r2
 8007724:	4618      	mov	r0, r3
 8007726:	f000 faac 	bl	8007c82 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8b1b      	ldrh	r3, [r3, #24]
 800772e:	461a      	mov	r2, r3
 8007730:	f107 031c 	add.w	r3, r7, #28
 8007734:	4611      	mov	r1, r2
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fab8 	bl	8007cac <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f107 001c 	add.w	r0, r7, #28
 8007742:	330c      	adds	r3, #12
 8007744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007746:	f000 faf9 	bl	8007d3c <writeMQTTString>
	if (options->willFlag)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7edb      	ldrb	r3, [r3, #27]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00d      	beq.n	800776e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f107 001c 	add.w	r0, r7, #28
 8007758:	3324      	adds	r3, #36	; 0x24
 800775a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800775c:	f000 faee 	bl	8007d3c <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f107 001c 	add.w	r0, r7, #28
 8007766:	3330      	adds	r3, #48	; 0x30
 8007768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800776a:	f000 fae7 	bl	8007d3c <writeMQTTString>
	}
	if (flags.bits.username)
 800776e:	7d3b      	ldrb	r3, [r7, #20]
 8007770:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d006      	beq.n	8007788 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f107 001c 	add.w	r0, r7, #28
 8007780:	3340      	adds	r3, #64	; 0x40
 8007782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007784:	f000 fada 	bl	8007d3c <writeMQTTString>
	if (flags.bits.password)
 8007788:	7d3b      	ldrb	r3, [r7, #20]
 800778a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d006      	beq.n	80077a2 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f107 001c 	add.w	r0, r7, #28
 800779a:	334c      	adds	r3, #76	; 0x4c
 800779c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800779e:	f000 facd 	bl	8007d3c <writeMQTTString>

	rc = ptr - buf;
 80077a2:	69fa      	ldr	r2, [r7, #28]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3728      	adds	r7, #40	; 0x28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	08013c30 	.word	0x08013c30
 80077b8:	08013c38 	.word	0x08013c38

080077bc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	; 0x28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80077ca:	2300      	movs	r3, #0
 80077cc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80077da:	2300      	movs	r3, #0
 80077dc:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80077de:	f107 0318 	add.w	r3, r7, #24
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fa39 	bl	8007c5a <readChar>
 80077e8:	4603      	mov	r3, r0
 80077ea:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 80077ec:	7f3b      	ldrb	r3, [r7, #28]
 80077ee:	f023 030f 	bic.w	r3, r3, #15
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d12e      	bne.n	8007856 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	f107 0214 	add.w	r2, r7, #20
 80077fe:	4611      	mov	r1, r2
 8007800:	4618      	mov	r0, r3
 8007802:	f000 f9f9 	bl	8007bf8 <MQTTPacket_decodeBuf>
 8007806:	6278      	str	r0, [r7, #36]	; 0x24
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	4413      	add	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4413      	add	r3, r2
 8007816:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	6a3a      	ldr	r2, [r7, #32]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b01      	cmp	r3, #1
 8007820:	dd1b      	ble.n	800785a <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8007822:	f107 0318 	add.w	r3, r7, #24
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fa17 	bl	8007c5a <readChar>
 800782c:	4603      	mov	r3, r0
 800782e:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8007830:	7c3b      	ldrb	r3, [r7, #16]
 8007832:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007836:	b2db      	uxtb	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800783e:	f107 0318 	add.w	r3, r7, #24
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fa09 	bl	8007c5a <readChar>
 8007848:	4603      	mov	r3, r0
 800784a:	461a      	mov	r2, r3
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8007850:	2301      	movs	r3, #1
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
 8007854:	e002      	b.n	800785c <MQTTDeserialize_connack+0xa0>
		goto exit;
 8007856:	bf00      	nop
 8007858:	e000      	b.n	800785c <MQTTDeserialize_connack+0xa0>
		goto exit;
 800785a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800785e:	4618      	mov	r0, r3
 8007860:	3728      	adds	r7, #40	; 0x28
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b088      	sub	sp, #32
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	4613      	mov	r3, r2
 8007872:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8007874:	2300      	movs	r3, #0
 8007876:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8007878:	f04f 33ff 	mov.w	r3, #4294967295
 800787c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b01      	cmp	r3, #1
 8007886:	dc03      	bgt.n	8007890 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007888:	f06f 0301 	mvn.w	r3, #1
 800788c:	61fb      	str	r3, [r7, #28]
		goto exit;
 800788e:	e01d      	b.n	80078cc <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	b2da      	uxtb	r2, r3
 800789c:	7e3b      	ldrb	r3, [r7, #24]
 800789e:	f362 1307 	bfi	r3, r2, #4, #4
 80078a2:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80078a4:	7e3a      	ldrb	r2, [r7, #24]
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	4611      	mov	r1, r2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f9e8 	bl	8007c82 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2100      	movs	r1, #0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f8e8 	bl	8007a8c <MQTTPacket_encode>
 80078bc:	4602      	mov	r2, r0
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	4413      	add	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80078cc:	69fb      	ldr	r3, [r7, #28]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3720      	adds	r7, #32
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 80078e0:	220e      	movs	r2, #14
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff ffbe 	bl	8007866 <MQTTSerialize_zero>
 80078ea:	4603      	mov	r3, r0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 80078fe:	220c      	movs	r2, #12
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff ffaf 	bl	8007866 <MQTTSerialize_zero>
 8007908:	4603      	mov	r3, r0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b08a      	sub	sp, #40	; 0x28
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8007924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007926:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8007928:	2300      	movs	r3, #0
 800792a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8007934:	f107 0318 	add.w	r3, r7, #24
 8007938:	4618      	mov	r0, r3
 800793a:	f000 f98e 	bl	8007c5a <readChar>
 800793e:	4603      	mov	r3, r0
 8007940:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8007942:	7f3b      	ldrb	r3, [r7, #28]
 8007944:	f023 030f 	bic.w	r3, r3, #15
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b30      	cmp	r3, #48	; 0x30
 800794c:	d14b      	bne.n	80079e6 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800794e:	7f3b      	ldrb	r3, [r7, #28]
 8007950:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007954:	b2db      	uxtb	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800795c:	7f3b      	ldrb	r3, [r7, #28]
 800795e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8007962:	b2db      	uxtb	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800796a:	7f3b      	ldrb	r3, [r7, #28]
 800796c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007970:	b2db      	uxtb	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f107 0214 	add.w	r2, r7, #20
 800797e:	4611      	mov	r1, r2
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f939 	bl	8007bf8 <MQTTPacket_decodeBuf>
 8007986:	6278      	str	r0, [r7, #36]	; 0x24
 8007988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	4413      	add	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4413      	add	r3, r2
 8007996:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8007998:	f107 0318 	add.w	r3, r7, #24
 800799c:	6a3a      	ldr	r2, [r7, #32]
 800799e:	4619      	mov	r1, r3
 80079a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079a2:	f000 f9f9 	bl	8007d98 <readMQTTLenString>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01e      	beq.n	80079ea <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	6a3a      	ldr	r2, [r7, #32]
 80079b0:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	db19      	blt.n	80079ea <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dd08      	ble.n	80079d0 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80079be:	f107 0318 	add.w	r3, r7, #24
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 f92e 	bl	8007c24 <readInt>
 80079c8:	4603      	mov	r3, r0
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	6a3a      	ldr	r2, [r7, #32]
 80079d4:	1ad2      	subs	r2, r2, r3
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079de:	601a      	str	r2, [r3, #0]
	rc = 1;
 80079e0:	2301      	movs	r3, #1
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
 80079e4:	e002      	b.n	80079ec <MQTTDeserialize_publish+0xda>
		goto exit;
 80079e6:	bf00      	nop
 80079e8:	e000      	b.n	80079ec <MQTTDeserialize_publish+0xda>
		goto exit;
 80079ea:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3728      	adds	r7, #40	; 0x28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b08a      	sub	sp, #40	; 0x28
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
 8007a02:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8007a04:	2300      	movs	r3, #0
 8007a06:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8007a14:	f107 0318 	add.w	r3, r7, #24
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 f91e 	bl	8007c5a <readChar>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8007a22:	7f3b      	ldrb	r3, [r7, #28]
 8007a24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8007a30:	7f3b      	ldrb	r3, [r7, #28]
 8007a32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	f107 0214 	add.w	r2, r7, #20
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f8d6 	bl	8007bf8 <MQTTPacket_decodeBuf>
 8007a4c:	6278      	str	r0, [r7, #36]	; 0x24
 8007a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	4413      	add	r3, r2
 8007a54:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	6a3a      	ldr	r2, [r7, #32]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	dd0b      	ble.n	8007a80 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8007a68:	f107 0318 	add.w	r3, r7, #24
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 f8d9 	bl	8007c24 <readInt>
 8007a72:	4603      	mov	r3, r0
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7e:	e000      	b.n	8007a82 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8007a80:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3728      	adds	r7, #40	; 0x28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	425a      	negs	r2, r3
 8007a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007aa6:	bf58      	it	pl
 8007aa8:	4253      	negpl	r3, r2
 8007aaa:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	da00      	bge.n	8007ab4 <MQTTPacket_encode+0x28>
 8007ab2:	337f      	adds	r3, #127	; 0x7f
 8007ab4:	11db      	asrs	r3, r3, #7
 8007ab6:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	dd03      	ble.n	8007ac6 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8007abe:	7afb      	ldrb	r3, [r7, #11]
 8007ac0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ac4:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	60fa      	str	r2, [r7, #12]
 8007acc:	461a      	mov	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	7afa      	ldrb	r2, [r7, #11]
 8007ad4:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dcde      	bgt.n	8007a9a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8007adc:	68fb      	ldr	r3, [r7, #12]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8007af4:	2301      	movs	r3, #1
 8007af6:	617b      	str	r3, [r7, #20]
	int len = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8007b02:	f04f 33ff 	mov.w	r3, #4294967295
 8007b06:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	dd03      	ble.n	8007b1c <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8007b14:	f04f 33ff 	mov.w	r3, #4294967295
 8007b18:	60fb      	str	r3, [r7, #12]
			goto exit;
 8007b1a:	e01d      	b.n	8007b58 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8007b1c:	f107 020b 	add.w	r2, r7, #11
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2101      	movs	r1, #1
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d112      	bne.n	8007b56 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	7afb      	ldrb	r3, [r7, #11]
 8007b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3a:	6979      	ldr	r1, [r7, #20]
 8007b3c:	fb01 f303 	mul.w	r3, r1, r3
 8007b40:	441a      	add	r2, r3
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	01db      	lsls	r3, r3, #7
 8007b4a:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	b25b      	sxtb	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	dbd6      	blt.n	8007b02 <MQTTPacket_decode+0x18>
exit:
 8007b54:	e000      	b.n	8007b58 <MQTTPacket_decode+0x6e>
			goto exit;
 8007b56:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8007b58:	693b      	ldr	r3, [r7, #16]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b7f      	cmp	r3, #127	; 0x7f
 8007b76:	dc03      	bgt.n	8007b80 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	607b      	str	r3, [r7, #4]
 8007b7e:	e012      	b.n	8007ba6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b86:	da03      	bge.n	8007b90 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3302      	adds	r3, #2
 8007b8c:	607b      	str	r3, [r7, #4]
 8007b8e:	e00a      	b.n	8007ba6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a08      	ldr	r2, [pc, #32]	; (8007bb4 <MQTTPacket_len+0x50>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	dc03      	bgt.n	8007ba0 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3303      	adds	r3, #3
 8007b9c:	607b      	str	r3, [r7, #4]
 8007b9e:	e002      	b.n	8007ba6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	607b      	str	r3, [r7, #4]
	return rem_len;
 8007ba6:	687b      	ldr	r3, [r7, #4]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	001ffffe 	.word	0x001ffffe

08007bb8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e00a      	b.n	8007bde <bufchar+0x26>
		*c = *bufptr++;
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	; (8007bf4 <bufchar+0x3c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	4909      	ldr	r1, [pc, #36]	; (8007bf4 <bufchar+0x3c>)
 8007bd0:	600a      	str	r2, [r1, #0]
 8007bd2:	781a      	ldrb	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	dbf0      	blt.n	8007bc8 <bufchar+0x10>
	return count;
 8007be6:	683b      	ldr	r3, [r7, #0]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	200002b4 	.word	0x200002b4

08007bf8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8007c02:	4a06      	ldr	r2, [pc, #24]	; (8007c1c <MQTTPacket_decodeBuf+0x24>)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	4805      	ldr	r0, [pc, #20]	; (8007c20 <MQTTPacket_decodeBuf+0x28>)
 8007c0c:	f7ff ff6d 	bl	8007aea <MQTTPacket_decode>
 8007c10:	4603      	mov	r3, r0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	200002b4 	.word	0x200002b4
 8007c20:	08007bb9 	.word	0x08007bb9

08007c24 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	3201      	adds	r2, #1
 8007c3c:	7812      	ldrb	r2, [r2, #0]
 8007c3e:	4413      	add	r3, r2
 8007c40:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	1c9a      	adds	r2, r3, #2
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	601a      	str	r2, [r3, #0]
	return len;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	601a      	str	r2, [r3, #0]
	return c;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	78fa      	ldrb	r2, [r7, #3]
 8007c94:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	601a      	str	r2, [r3, #0]
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	da00      	bge.n	8007cbe <writeInt+0x12>
 8007cbc:	33ff      	adds	r3, #255	; 0xff
 8007cbe:	121b      	asrs	r3, r3, #8
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	b2d2      	uxtb	r2, r2
 8007cc8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	425a      	negs	r2, r3
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	bf58      	it	pl
 8007cde:	4253      	negpl	r3, r2
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	6812      	ldr	r2, [r2, #0]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	601a      	str	r2, [r3, #0]
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8007d08:	6838      	ldr	r0, [r7, #0]
 8007d0a:	f7f8 fac1 	bl	8000290 <strlen>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8007d12:	68f9      	ldr	r1, [r7, #12]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff ffc9 	bl	8007cac <writeInt>
	memcpy(*pptr, string, len);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f009 fbd7 	bl	80114d6 <memcpy>
	*pptr += len;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	441a      	add	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	4638      	mov	r0, r7
 8007d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dd12      	ble.n	8007d76 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4619      	mov	r1, r3
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff ffa9 	bl	8007cac <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68b9      	ldr	r1, [r7, #8]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f009 fbb7 	bl	80114d6 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	441a      	add	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8007d74:	e00c      	b.n	8007d90 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff ffbc 	bl	8007cfe <writeCString>
}
 8007d86:	e003      	b.n	8007d90 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8007d88:	2100      	movs	r1, #0
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff ff8e 	bl	8007cac <writeInt>
}
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	dd1a      	ble.n	8007dea <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8007db4:	68b8      	ldr	r0, [r7, #8]
 8007db6:	f7ff ff35 	bl	8007c24 <readInt>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	6852      	ldr	r2, [r2, #4]
 8007dc8:	4413      	add	r3, r2
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d30c      	bcc.n	8007dea <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	6852      	ldr	r2, [r2, #4]
 8007de0:	441a      	add	r2, r3
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	601a      	str	r2, [r3, #0]
			rc = 1;
 8007de6:	2301      	movs	r3, #1
 8007de8:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8007df0:	697b      	ldr	r3, [r7, #20]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	1d3b      	adds	r3, r7, #4
 8007e02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d006      	beq.n	8007e1e <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7f8 fa3c 	bl	8000290 <strlen>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	e001      	b.n	8007e22 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	617b      	str	r3, [r7, #20]
	return rc;
 8007e22:	697b      	ldr	r3, [r7, #20]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8007e36:	2300      	movs	r3, #0
 8007e38:	617b      	str	r3, [r7, #20]
		blen = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7f8 fa1d 	bl	8000290 <strlen>
 8007e56:	4603      	mov	r3, r0
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	e005      	b.n	8007e68 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8007e68:	6838      	ldr	r0, [r7, #0]
 8007e6a:	f7f8 fa11 	bl	8000290 <strlen>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d10a      	bne.n	8007e90 <MQTTPacket_equals+0x64>
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6938      	ldr	r0, [r7, #16]
 8007e82:	f009 fa4e 	bl	8011322 <strncmp>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <MQTTPacket_equals+0x64>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <MQTTPacket_equals+0x66>
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8007eac:	463b      	mov	r3, r7
 8007eae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007eb2:	f7ff ffa2 	bl	8007dfa <MQTTstrlen>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	1c9a      	adds	r2, r3, #2
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	dd02      	ble.n	8007ed0 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	3302      	adds	r3, #2
 8007ece:	617b      	str	r3, [r7, #20]
	return len;
 8007ed0:	697b      	ldr	r3, [r7, #20]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b08a      	sub	sp, #40	; 0x28
 8007ede:	af02      	add	r7, sp, #8
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	603b      	str	r3, [r7, #0]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8007eee:	2300      	movs	r3, #0
 8007ef0:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8007efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f04:	6838      	ldr	r0, [r7, #0]
 8007f06:	f7ff ffc8 	bl	8007e9a <MQTTSerialize_publishLength>
 8007f0a:	61b8      	str	r0, [r7, #24]
 8007f0c:	69b8      	ldr	r0, [r7, #24]
 8007f0e:	f7ff fe29 	bl	8007b64 <MQTTPacket_len>
 8007f12:	4602      	mov	r2, r0
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4293      	cmp	r3, r2
 8007f18:	da03      	bge.n	8007f22 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007f1a:	f06f 0301 	mvn.w	r3, #1
 8007f1e:	61fb      	str	r3, [r7, #28]
		goto exit;
 8007f20:	e04c      	b.n	8007fbc <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8007f22:	7c3b      	ldrb	r3, [r7, #16]
 8007f24:	2203      	movs	r2, #3
 8007f26:	f362 1307 	bfi	r3, r2, #4, #4
 8007f2a:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	7c3b      	ldrb	r3, [r7, #16]
 8007f36:	f362 03c3 	bfi	r3, r2, #3, #1
 8007f3a:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	7c3b      	ldrb	r3, [r7, #16]
 8007f46:	f362 0342 	bfi	r3, r2, #1, #2
 8007f4a:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8007f4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	7c3b      	ldrb	r3, [r7, #16]
 8007f58:	f362 0300 	bfi	r3, r2, #0, #1
 8007f5c:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8007f5e:	7c3a      	ldrb	r2, [r7, #16]
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	4611      	mov	r1, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff fe8b 	bl	8007c82 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	69b9      	ldr	r1, [r7, #24]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff fd8b 	bl	8007a8c <MQTTPacket_encode>
 8007f76:	4602      	mov	r2, r0
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8007f7e:	f107 0014 	add.w	r0, r7, #20
 8007f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f88:	f7ff fed8 	bl	8007d3c <writeMQTTString>

	if (qos > 0)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	dd06      	ble.n	8007fa0 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8007f92:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fe86 	bl	8007cac <writeInt>

	memcpy(ptr, payload, payloadlen);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f009 fa95 	bl	80114d6 <memcpy>
	ptr += payloadlen;
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb0:	4413      	add	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b088      	sub	sp, #32
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	71fb      	strb	r3, [r7, #7]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8007fdc:	2300      	movs	r3, #0
 8007fde:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	dc03      	bgt.n	8007ff6 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8007fee:	f06f 0301 	mvn.w	r3, #1
 8007ff2:	61fb      	str	r3, [r7, #28]
		goto exit;
 8007ff4:	e037      	b.n	8008066 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	f003 030f 	and.w	r3, r3, #15
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	7e3b      	ldrb	r3, [r7, #24]
 8008000:	f362 1307 	bfi	r3, r2, #4, #4
 8008004:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8008006:	79bb      	ldrb	r3, [r7, #6]
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	7e3b      	ldrb	r3, [r7, #24]
 8008010:	f362 03c3 	bfi	r3, r2, #3, #1
 8008014:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	2b06      	cmp	r3, #6
 800801a:	bf0c      	ite	eq
 800801c:	2301      	moveq	r3, #1
 800801e:	2300      	movne	r3, #0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	b2da      	uxtb	r2, r3
 8008028:	7e3b      	ldrb	r3, [r7, #24]
 800802a:	f362 0342 	bfi	r3, r2, #1, #2
 800802e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8008030:	7e3a      	ldrb	r2, [r7, #24]
 8008032:	f107 0314 	add.w	r3, r7, #20
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff fe22 	bl	8007c82 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2102      	movs	r1, #2
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fd22 	bl	8007a8c <MQTTPacket_encode>
 8008048:	4602      	mov	r2, r0
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	4413      	add	r3, r2
 800804e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8008050:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008052:	f107 0314 	add.w	r3, r7, #20
 8008056:	4611      	mov	r1, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff fe27 	bl	8007cac <writeInt>
	rc = ptr - buf;
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8008066:	69fb      	ldr	r3, [r7, #28]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3720      	adds	r7, #32
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800807a:	2302      	movs	r3, #2
 800807c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	e013      	b.n	80080ac <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	4613      	mov	r3, r2
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	461a      	mov	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	4413      	add	r3, r2
 8008094:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008098:	f7ff feaf 	bl	8007dfa <MQTTstrlen>
 800809c:	4603      	mov	r3, r0
 800809e:	3303      	adds	r3, #3
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	4413      	add	r3, r2
 80080a4:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3301      	adds	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	dbe7      	blt.n	8008084 <MQTTSerialize_subscribeLength+0x14>
	return len;
 80080b4:	68bb      	ldr	r3, [r7, #8]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b08a      	sub	sp, #40	; 0x28
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	4611      	mov	r1, r2
 80080ca:	461a      	mov	r2, r3
 80080cc:	460b      	mov	r3, r1
 80080ce:	71fb      	strb	r3, [r7, #7]
 80080d0:	4613      	mov	r3, r2
 80080d2:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 80080d8:	2300      	movs	r3, #0
 80080da:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 80080e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ec:	f7ff ffc0 	bl	8008070 <MQTTSerialize_subscribeLength>
 80080f0:	61f8      	str	r0, [r7, #28]
 80080f2:	69f8      	ldr	r0, [r7, #28]
 80080f4:	f7ff fd36 	bl	8007b64 <MQTTPacket_len>
 80080f8:	4602      	mov	r2, r0
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	4293      	cmp	r3, r2
 80080fe:	da03      	bge.n	8008108 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8008100:	f06f 0301 	mvn.w	r3, #1
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8008106:	e04f      	b.n	80081a8 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800810c:	7d3b      	ldrb	r3, [r7, #20]
 800810e:	2208      	movs	r2, #8
 8008110:	f362 1307 	bfi	r3, r2, #4, #4
 8008114:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	b2da      	uxtb	r2, r3
 800811e:	7d3b      	ldrb	r3, [r7, #20]
 8008120:	f362 03c3 	bfi	r3, r2, #3, #1
 8008124:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8008126:	7d3b      	ldrb	r3, [r7, #20]
 8008128:	2201      	movs	r2, #1
 800812a:	f362 0342 	bfi	r3, r2, #1, #2
 800812e:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8008130:	7d3a      	ldrb	r2, [r7, #20]
 8008132:	f107 0318 	add.w	r3, r7, #24
 8008136:	4611      	mov	r1, r2
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fda2 	bl	8007c82 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	69f9      	ldr	r1, [r7, #28]
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff fca2 	bl	8007a8c <MQTTPacket_encode>
 8008148:	4602      	mov	r2, r0
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	4413      	add	r3, r2
 800814e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8008150:	88ba      	ldrh	r2, [r7, #4]
 8008152:	f107 0318 	add.w	r3, r7, #24
 8008156:	4611      	mov	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff fda7 	bl	8007cac <writeInt>

	for (i = 0; i < count; ++i)
 800815e:	2300      	movs	r3, #0
 8008160:	623b      	str	r3, [r7, #32]
 8008162:	e019      	b.n	8008198 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8008164:	6a3a      	ldr	r2, [r7, #32]
 8008166:	4613      	mov	r3, r2
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	461a      	mov	r2, r3
 8008170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008172:	4413      	add	r3, r2
 8008174:	f107 0018 	add.w	r0, r7, #24
 8008178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800817a:	f7ff fddf 	bl	8007d3c <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008182:	4413      	add	r3, r2
 8008184:	781a      	ldrb	r2, [r3, #0]
 8008186:	f107 0318 	add.w	r3, r7, #24
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f7ff fd78 	bl	8007c82 <writeChar>
	for (i = 0; i < count; ++i)
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	3301      	adds	r3, #1
 8008196:	623b      	str	r3, [r7, #32]
 8008198:	6a3a      	ldr	r2, [r7, #32]
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	429a      	cmp	r2, r3
 800819e:	dbe1      	blt.n	8008164 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3728      	adds	r7, #40	; 0x28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b08a      	sub	sp, #40	; 0x28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80081c0:	2300      	movs	r3, #0
 80081c2:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80081d0:	f107 0318 	add.w	r3, r7, #24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff fd40 	bl	8007c5a <readChar>
 80081da:	4603      	mov	r3, r0
 80081dc:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 80081de:	7f3b      	ldrb	r3, [r7, #28]
 80081e0:	f023 030f 	bic.w	r3, r3, #15
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b90      	cmp	r3, #144	; 0x90
 80081e8:	d142      	bne.n	8008270 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	f107 0214 	add.w	r2, r7, #20
 80081f0:	4611      	mov	r1, r2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff fd00 	bl	8007bf8 <MQTTPacket_decodeBuf>
 80081f8:	6278      	str	r0, [r7, #36]	; 0x24
 80081fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	4413      	add	r3, r2
 8008200:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	4413      	add	r3, r2
 8008208:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	6a3a      	ldr	r2, [r7, #32]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b01      	cmp	r3, #1
 8008212:	dd2f      	ble.n	8008274 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8008214:	f107 0318 	add.w	r3, r7, #24
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fd03 	bl	8007c24 <readInt>
 800821e:	4603      	mov	r3, r0
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800822c:	e019      	b.n	8008262 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	429a      	cmp	r2, r3
 8008236:	da03      	bge.n	8008240 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8008238:	f04f 33ff 	mov.w	r3, #4294967295
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800823e:	e01a      	b.n	8008276 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8008240:	f107 0318 	add.w	r3, r7, #24
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff fd08 	bl	8007c5a <readChar>
 800824a:	4603      	mov	r3, r0
 800824c:	4618      	mov	r0, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	1c59      	adds	r1, r3, #1
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	6011      	str	r1, [r2, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	4413      	add	r3, r2
 800825e:	4602      	mov	r2, r0
 8008260:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	6a3a      	ldr	r2, [r7, #32]
 8008266:	429a      	cmp	r2, r3
 8008268:	d8e1      	bhi.n	800822e <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800826a:	2301      	movs	r3, #1
 800826c:	627b      	str	r3, [r7, #36]	; 0x24
 800826e:	e002      	b.n	8008276 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8008270:	bf00      	nop
 8008272:	e000      	b.n	8008276 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8008274:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008278:	4618      	mov	r0, r3
 800827a:	3728      	adds	r7, #40	; 0x28
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <_ZN14CircularBufferC1Ev>:
// CircularBuffer.cpp
#include "CircularBuffer.h"

CircularBuffer::CircularBuffer() : head(0), tail(0) {}
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <_ZN5UtilsC1Ev>:


void printdata(const char* fmt, ...);


Utils::Utils(){}
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b082      	sub	sp, #8
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 f8e5 	bl	8009480 <_ZN6ConfigC1Ev>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  Nm  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 80082c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2507      	movs	r5, #7
 80082ce:	683c      	ldr	r4, [r7, #0]
 80082d0:	461e      	mov	r6, r3
 80082d2:	e006      	b.n	80082e2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_+0x22>
 80082d4:	4621      	mov	r1, r4
 80082d6:	4630      	mov	r0, r6
 80082d8:	f007 fd7c 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80082dc:	3618      	adds	r6, #24
 80082de:	3418      	adds	r4, #24
 80082e0:	3d01      	subs	r5, #1
 80082e2:	2d00      	cmp	r5, #0
 80082e4:	daf6      	bge.n	80082d4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_+0x14>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082f0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_>:
 80082f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	250f      	movs	r5, #15
 80082fe:	683c      	ldr	r4, [r7, #0]
 8008300:	461e      	mov	r6, r3
 8008302:	e006      	b.n	8008312 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_+0x22>
 8008304:	4621      	mov	r1, r4
 8008306:	4630      	mov	r0, r6
 8008308:	f007 fd64 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800830c:	3618      	adds	r6, #24
 800830e:	3418      	adds	r4, #24
 8008310:	3d01      	subs	r5, #1
 8008312:	2d00      	cmp	r5, #0
 8008314:	daf6      	bge.n	8008304 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_+0x14>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4618      	mov	r0, r3
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008320 <_ZN6ConfigaSERKS_>:
}
constexpr size_t MAX_ANALOG_INPUTS = 8;
constexpr size_t MAX_DIGITAL_INPUTS = 16;
constexpr size_t MAX_DIGITAL_OUTPUTS = 8;

class Config {
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	889a      	ldrh	r2, [r3, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	809a      	strh	r2, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	3306      	adds	r3, #6
 8008340:	3206      	adds	r2, #6
 8008342:	6812      	ldr	r2, [r2, #0]
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	330a      	adds	r3, #10
 800834c:	320a      	adds	r2, #10
 800834e:	6812      	ldr	r2, [r2, #0]
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	330e      	adds	r3, #14
 8008358:	320e      	adds	r2, #14
 800835a:	6812      	ldr	r2, [r2, #0]
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	3312      	adds	r3, #18
 8008364:	3212      	adds	r2, #18
 8008366:	6812      	ldr	r2, [r2, #0]
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	8ada      	ldrh	r2, [r3, #22]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	82da      	strh	r2, [r3, #22]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	7e1a      	ldrb	r2, [r3, #24]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	761a      	strb	r2, [r3, #24]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	69da      	ldr	r2, [r3, #28]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	61da      	str	r2, [r3, #28]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f103 0220 	add.w	r2, r3, #32
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	3320      	adds	r3, #32
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f007 fd20 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	3338      	adds	r3, #56	; 0x38
 800839e:	4619      	mov	r1, r3
 80083a0:	4610      	mov	r0, r2
 80083a2:	f007 fd17 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	3350      	adds	r3, #80	; 0x50
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f007 fd0e 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	3368      	adds	r3, #104	; 0x68
 80083c2:	4619      	mov	r1, r3
 80083c4:	4610      	mov	r0, r2
 80083c6:	f007 fd05 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	3380      	adds	r3, #128	; 0x80
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f007 fcfc 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	339c      	adds	r3, #156	; 0x9c
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f7ff ff63 	bl	80082c0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8008406:	4619      	mov	r1, r3
 8008408:	4610      	mov	r0, r2
 800840a:	f7ff ff71 	bl	80082f0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f503 7237 	add.w	r2, r3, #732	; 0x2dc
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800841a:	4619      	mov	r1, r3
 800841c:	4610      	mov	r0, r2
 800841e:	f7ff ff4f 	bl	80082c0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <_ZN5Utils4initEP6Config>:

void Utils::init(Config* config){
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
	conf = *config;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff ff70 	bl	8008320 <_ZN6ConfigaSERKS_>

	switches[0] = {GPIOE, GPIO_PIN_12}; // switch1
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a61      	ldr	r2, [pc, #388]	; (80085c8 <_ZN5Utils4initEP6Config+0x19c>)
 8008444:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8008448:	e892 0003 	ldmia.w	r2, {r0, r1}
 800844c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[1] = {GPIOE, GPIO_PIN_13}; // switch2
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a5e      	ldr	r2, [pc, #376]	; (80085cc <_ZN5Utils4initEP6Config+0x1a0>)
 8008454:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8008458:	e892 0003 	ldmia.w	r2, {r0, r1}
 800845c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[2] = {GPIOE, GPIO_PIN_14}; // switch3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a5b      	ldr	r2, [pc, #364]	; (80085d0 <_ZN5Utils4initEP6Config+0x1a4>)
 8008464:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8008468:	e892 0003 	ldmia.w	r2, {r0, r1}
 800846c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[3] = {GPIOE, GPIO_PIN_15}; // switch4
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a58      	ldr	r2, [pc, #352]	; (80085d4 <_ZN5Utils4initEP6Config+0x1a8>)
 8008474:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8008478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800847c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[4] = {GPIOA, GPIO_PIN_4};  // switch5
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a55      	ldr	r2, [pc, #340]	; (80085d8 <_ZN5Utils4initEP6Config+0x1ac>)
 8008484:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8008488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800848c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[5] = {GPIOA, GPIO_PIN_5};  // switch6
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a52      	ldr	r2, [pc, #328]	; (80085dc <_ZN5Utils4initEP6Config+0x1b0>)
 8008494:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800849c:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[6] = {GPIOA, GPIO_PIN_6};  // switch7
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a4f      	ldr	r2, [pc, #316]	; (80085e0 <_ZN5Utils4initEP6Config+0x1b4>)
 80084a4:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 80084a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084ac:	e883 0003 	stmia.w	r3, {r0, r1}
	switches[7] = {GPIOA, GPIO_PIN_7};  // switch8
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a4c      	ldr	r2, [pc, #304]	; (80085e4 <_ZN5Utils4initEP6Config+0x1b8>)
 80084b4:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 80084b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084bc:	e883 0003 	stmia.w	r3, {r0, r1}


    digitalInputs[0] = {GPIOC, GPIO_PIN_0};   // DI1
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a49      	ldr	r2, [pc, #292]	; (80085e8 <_ZN5Utils4initEP6Config+0x1bc>)
 80084c4:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80084c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084cc:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[1] = {GPIOC, GPIO_PIN_1};   // DI2
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a46      	ldr	r2, [pc, #280]	; (80085ec <_ZN5Utils4initEP6Config+0x1c0>)
 80084d4:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80084d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084dc:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[2] = {GPIOC, GPIO_PIN_2};   // DI3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a43      	ldr	r2, [pc, #268]	; (80085f0 <_ZN5Utils4initEP6Config+0x1c4>)
 80084e4:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80084e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084ec:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[3] = {GPIOC, GPIO_PIN_3};   // DI4
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a40      	ldr	r2, [pc, #256]	; (80085f4 <_ZN5Utils4initEP6Config+0x1c8>)
 80084f4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80084f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084fc:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[4] = {GPIOD, GPIO_PIN_8};   // DI5
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a3d      	ldr	r2, [pc, #244]	; (80085f8 <_ZN5Utils4initEP6Config+0x1cc>)
 8008504:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8008508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800850c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[5] = {GPIOD, GPIO_PIN_9};   // DI6
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a3a      	ldr	r2, [pc, #232]	; (80085fc <_ZN5Utils4initEP6Config+0x1d0>)
 8008514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800851c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[6] = {GPIOD, GPIO_PIN_10};  // DI7
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a37      	ldr	r2, [pc, #220]	; (8008600 <_ZN5Utils4initEP6Config+0x1d4>)
 8008524:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800852c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[7] = {GPIOD, GPIO_PIN_13};  // DI8
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a34      	ldr	r2, [pc, #208]	; (8008604 <_ZN5Utils4initEP6Config+0x1d8>)
 8008534:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8008538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800853c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[8] = {GPIOC, GPIO_PIN_6};   // DI9
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a31      	ldr	r2, [pc, #196]	; (8008608 <_ZN5Utils4initEP6Config+0x1dc>)
 8008544:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8008548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800854c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[9] = {GPIOC, GPIO_PIN_7};   // DI10
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a2e      	ldr	r2, [pc, #184]	; (800860c <_ZN5Utils4initEP6Config+0x1e0>)
 8008554:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8008558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800855c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[10] = {GPIOC, GPIO_PIN_8};  // DI11
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a2b      	ldr	r2, [pc, #172]	; (8008610 <_ZN5Utils4initEP6Config+0x1e4>)
 8008564:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8008568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800856c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[11] = {GPIOC, GPIO_PIN_9};  // DI12
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a28      	ldr	r2, [pc, #160]	; (8008614 <_ZN5Utils4initEP6Config+0x1e8>)
 8008574:	f203 4334 	addw	r3, r3, #1076	; 0x434
 8008578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800857c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[12] = {GPIOA, GPIO_PIN_8};  // DI13
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a25      	ldr	r2, [pc, #148]	; (8008618 <_ZN5Utils4initEP6Config+0x1ec>)
 8008584:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8008588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800858c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[13] = {GPIOA, GPIO_PIN_9};  // DI14
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a22      	ldr	r2, [pc, #136]	; (800861c <_ZN5Utils4initEP6Config+0x1f0>)
 8008594:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8008598:	e892 0003 	ldmia.w	r2, {r0, r1}
 800859c:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[14] = {GPIOA, GPIO_PIN_10}; // DI15
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a1f      	ldr	r2, [pc, #124]	; (8008620 <_ZN5Utils4initEP6Config+0x1f4>)
 80085a4:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 80085a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085ac:	e883 0003 	stmia.w	r3, {r0, r1}
    digitalInputs[15] = {GPIOA, GPIO_PIN_11}; // DI16
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a1c      	ldr	r2, [pc, #112]	; (8008624 <_ZN5Utils4initEP6Config+0x1f8>)
 80085b4:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80085b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085bc:	e883 0003 	stmia.w	r3, {r0, r1}


}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	08013c40 	.word	0x08013c40
 80085cc:	08013c48 	.word	0x08013c48
 80085d0:	08013c50 	.word	0x08013c50
 80085d4:	08013c58 	.word	0x08013c58
 80085d8:	08013c60 	.word	0x08013c60
 80085dc:	08013c68 	.word	0x08013c68
 80085e0:	08013c70 	.word	0x08013c70
 80085e4:	08013c78 	.word	0x08013c78
 80085e8:	08013c80 	.word	0x08013c80
 80085ec:	08013c88 	.word	0x08013c88
 80085f0:	08013c90 	.word	0x08013c90
 80085f4:	08013c98 	.word	0x08013c98
 80085f8:	08013ca0 	.word	0x08013ca0
 80085fc:	08013ca8 	.word	0x08013ca8
 8008600:	08013cb0 	.word	0x08013cb0
 8008604:	08013cb8 	.word	0x08013cb8
 8008608:	08013cc0 	.word	0x08013cc0
 800860c:	08013cc8 	.word	0x08013cc8
 8008610:	08013cd0 	.word	0x08013cd0
 8008614:	08013cd8 	.word	0x08013cd8
 8008618:	08013ce0 	.word	0x08013ce0
 800861c:	08013ce8 	.word	0x08013ce8
 8008620:	08013cf0 	.word	0x08013cf0
 8008624:	08013cf8 	.word	0x08013cf8

08008628 <_ZN5Utils5printEPKcz>:
void Utils::print(const char* fmt, ...){
 8008628:	b40f      	push	{r0, r1, r2, r3}
 800862a:	b580      	push	{r7, lr}
 800862c:	b0c2      	sub	sp, #264	; 0x108
 800862e:	af00      	add	r7, sp, #0
	 char buff[256];
	 va_list args;
	 va_start(args, fmt);
 8008630:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8008634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800863c:	601a      	str	r2, [r3, #0]
	 vsnprintf(buff, sizeof(buff), fmt, args);
 800863e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008646:	f107 0008 	add.w	r0, r7, #8
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8008650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008654:	f008 fe18 	bl	8011288 <vsniprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 8008658:	f107 0308 	add.w	r3, r7, #8
 800865c:	4618      	mov	r0, r3
 800865e:	f7f7 fe17 	bl	8000290 <strlen>
 8008662:	4603      	mov	r3, r0
 8008664:	b29a      	uxth	r2, r3
 8008666:	f107 0108 	add.w	r1, r7, #8
 800866a:	f04f 33ff 	mov.w	r3, #4294967295
 800866e:	4805      	ldr	r0, [pc, #20]	; (8008684 <_ZN5Utils5printEPKcz+0x5c>)
 8008670:	f006 fac8 	bl	800ec04 <HAL_UART_Transmit>
	                      HAL_MAX_DELAY);
	 va_end(args);
}
 8008674:	bf00      	nop
 8008676:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800867a:	46bd      	mov	sp, r7
 800867c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008680:	b004      	add	sp, #16
 8008682:	4770      	bx	lr
 8008684:	200013a4 	.word	0x200013a4

08008688 <_ZN5Utils9playSoundEv>:

size_t Utils::getSwitchesCount() const {
    return sizeof(switches) / sizeof(switches[0]);
}

void Utils::playSound(){
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(sound_GPIO_Port, sound_Pin, GPIO_PIN_SET);
 800868c:	2201      	movs	r2, #1
 800868e:	2102      	movs	r1, #2
 8008690:	4807      	ldr	r0, [pc, #28]	; (80086b0 <_ZN5Utils9playSoundEv+0x28>)
 8008692:	f005 f807 	bl	800d6a4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8008696:	2014      	movs	r0, #20
 8008698:	f003 ff58 	bl	800c54c <HAL_Delay>
	HAL_GPIO_WritePin(sound_GPIO_Port, sound_Pin, GPIO_PIN_RESET);
 800869c:	2200      	movs	r2, #0
 800869e:	2102      	movs	r1, #2
 80086a0:	4803      	ldr	r0, [pc, #12]	; (80086b0 <_ZN5Utils9playSoundEv+0x28>)
 80086a2:	f004 ffff 	bl	800d6a4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80086a6:	2014      	movs	r0, #20
 80086a8:	f003 ff50 	bl	800c54c <HAL_Delay>
}
 80086ac:	bf00      	nop
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	40021000 	.word	0x40021000

080086b4 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti>:

bool Utils::switchRelay(GPIO_TypeDef* port, uint16_t switchPin, int status){
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	4613      	mov	r3, r2
 80086c2:	80fb      	strh	r3, [r7, #6]
    if (status > 1) {
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	dd05      	ble.n	80086d6 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x22>
    	print("Status is not valid %d \r\n", status);
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	480c      	ldr	r0, [pc, #48]	; (8008700 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x4c>)
 80086ce:	f7ff ffab 	bl	8008628 <_ZN5Utils5printEPKcz>
    	return false;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e00f      	b.n	80086f6 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x42>
    }
	GPIO_PinState gpioStatus = status == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x2c>
 80086dc:	2301      	movs	r3, #1
 80086de:	e000      	b.n	80086e2 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti+0x2e>
 80086e0:	2300      	movs	r3, #0
 80086e2:	75fb      	strb	r3, [r7, #23]
	playSound();
 80086e4:	f7ff ffd0 	bl	8008688 <_ZN5Utils9playSoundEv>
	HAL_GPIO_WritePin(port, switchPin, gpioStatus);
 80086e8:	7dfa      	ldrb	r2, [r7, #23]
 80086ea:	88fb      	ldrh	r3, [r7, #6]
 80086ec:	4619      	mov	r1, r3
 80086ee:	68b8      	ldr	r0, [r7, #8]
 80086f0:	f004 ffd8 	bl	800d6a4 <HAL_GPIO_WritePin>
	return true;
 80086f4:	2301      	movs	r3, #1
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	08013d00 	.word	0x08013d00

08008704 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>:

int Utils::readGPIOPinState(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	4613      	mov	r3, r2
 8008710:	80fb      	strh	r3, [r7, #6]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET ? 0 : 1;
 8008712:	88fb      	ldrh	r3, [r7, #6]
 8008714:	4619      	mov	r1, r3
 8008716:	68b8      	ldr	r0, [r7, #8]
 8008718:	f004 ffac 	bl	800d674 <HAL_GPIO_ReadPin>
 800871c:	4603      	mov	r3, r0
 800871e:	2b01      	cmp	r3, #1
 8008720:	bf14      	ite	ne
 8008722:	2301      	movne	r3, #1
 8008724:	2300      	moveq	r3, #0
 8008726:	b2db      	uxtb	r3, r3
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Utils::createJSON(std::string *message) {
 8008730:	b590      	push	{r4, r7, lr}
 8008732:	b095      	sub	sp, #84	; 0x54
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
	   cJSON *statusJson = cJSON_CreateObject();
 800873a:	f7fd ff8f 	bl	800665c <cJSON_CreateObject>
 800873e:	6478      	str	r0, [r7, #68]	; 0x44
	    for (int i = 0; i < 8; i++) {
 8008740:	2300      	movs	r3, #0
 8008742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008744:	e030      	b.n	80087a8 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
	        int status = readGPIOPinState(switches[i].port, switches[i].pin);
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874a:	3373      	adds	r3, #115	; 0x73
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	4413      	add	r3, r2
 8008750:	6859      	ldr	r1, [r3, #4]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008756:	3373      	adds	r3, #115	; 0x73
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	4413      	add	r3, r2
 800875c:	891b      	ldrh	r3, [r3, #8]
 800875e:	461a      	mov	r2, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff ffcf 	bl	8008704 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>
 8008766:	63b8      	str	r0, [r7, #56]	; 0x38
	        cJSON_AddNumberToObject(statusJson, conf.getDigitalOutputName(i).c_str(), status);
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	f107 0308 	add.w	r3, r7, #8
 800876e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008770:	4618      	mov	r0, r3
 8008772:	f001 fabc 	bl	8009cee <_ZN6Config20getDigitalOutputNameB5cxx11Ei>
 8008776:	f107 0308 	add.w	r3, r7, #8
 800877a:	4618      	mov	r0, r3
 800877c:	f007 fc48 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008780:	4604      	mov	r4, r0
 8008782:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008784:	f7f7 fede 	bl	8000544 <__aeabi_i2d>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	ec43 2b10 	vmov	d0, r2, r3
 8008790:	4621      	mov	r1, r4
 8008792:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008794:	f7fd fea0 	bl	80064d8 <cJSON_AddNumberToObject>
 8008798:	f107 0308 	add.w	r3, r7, #8
 800879c:	4618      	mov	r0, r3
 800879e:	f007 fb13 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    for (int i = 0; i < 8; i++) {
 80087a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a4:	3301      	adds	r3, #1
 80087a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087aa:	2b07      	cmp	r3, #7
 80087ac:	ddcb      	ble.n	8008746 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
	    }
	    for (int i = 0; i < 16; i++) {
 80087ae:	2300      	movs	r3, #0
 80087b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80087b2:	e030      	b.n	8008816 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe6>
	        int status = readGPIOPinState(digitalInputs[i].port, digitalInputs[i].pin);
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b8:	337b      	adds	r3, #123	; 0x7b
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	4413      	add	r3, r2
 80087be:	6859      	ldr	r1, [r3, #4]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c4:	337b      	adds	r3, #123	; 0x7b
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	4413      	add	r3, r2
 80087ca:	891b      	ldrh	r3, [r3, #8]
 80087cc:	461a      	mov	r2, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff ff98 	bl	8008704 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>
 80087d4:	63f8      	str	r0, [r7, #60]	; 0x3c
	        cJSON_AddNumberToObject(statusJson, conf.getDigitalInputName(i).c_str(), status);
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	f107 0320 	add.w	r3, r7, #32
 80087dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 fa6e 	bl	8009cc0 <_ZN6Config19getDigitalInputNameB5cxx11Ei>
 80087e4:	f107 0320 	add.w	r3, r7, #32
 80087e8:	4618      	mov	r0, r3
 80087ea:	f007 fc11 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80087ee:	4604      	mov	r4, r0
 80087f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80087f2:	f7f7 fea7 	bl	8000544 <__aeabi_i2d>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	ec43 2b10 	vmov	d0, r2, r3
 80087fe:	4621      	mov	r1, r4
 8008800:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008802:	f7fd fe69 	bl	80064d8 <cJSON_AddNumberToObject>
 8008806:	f107 0320 	add.w	r3, r7, #32
 800880a:	4618      	mov	r0, r3
 800880c:	f007 fadc 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	    for (int i = 0; i < 16; i++) {
 8008810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008812:	3301      	adds	r3, #1
 8008814:	64bb      	str	r3, [r7, #72]	; 0x48
 8008816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008818:	2b0f      	cmp	r3, #15
 800881a:	ddcb      	ble.n	80087b4 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>
	    }
	    char* json_string = cJSON_Print(statusJson);
 800881c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800881e:	f7fc ffbb 	bl	8005798 <cJSON_Print>
 8008822:	6438      	str	r0, [r7, #64]	; 0x40
	    if (json_string != nullptr) {
 8008824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008826:	2b00      	cmp	r3, #0
 8008828:	d006      	beq.n	8008838 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x108>
	        *message = json_string;
 800882a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800882c:	6838      	ldr	r0, [r7, #0]
 800882e:	f007 fbb2 	bl	800ff96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	        free(json_string); // Free the allocated memory
 8008832:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008834:	f007 fc92 	bl	801015c <free>
	    }
	    cJSON_Delete(statusJson); // Clean up the cJSON object
 8008838:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800883a:	f7fb ff0f 	bl	800465c <cJSON_Delete>
}
 800883e:	bf00      	nop
 8008840:	3754      	adds	r7, #84	; 0x54
 8008842:	46bd      	mov	sp, r7
 8008844:	bd90      	pop	{r4, r7, pc}
	...

08008848 <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Utils::createUSARTJson(std::string *message) {
 8008848:	b580      	push	{r7, lr}
 800884a:	b08a      	sub	sp, #40	; 0x28
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
	 cJSON* rootJson = cJSON_CreateObject();
 8008852:	f7fd ff03 	bl	800665c <cJSON_CreateObject>
 8008856:	61f8      	str	r0, [r7, #28]
	 cJSON* outputsArray = cJSON_CreateArray();
 8008858:	f7fd feec 	bl	8006634 <cJSON_CreateArray>
 800885c:	61b8      	str	r0, [r7, #24]
	 cJSON* inputsArray = cJSON_CreateArray();
 800885e:	f7fd fee9 	bl	8006634 <cJSON_CreateArray>
 8008862:	6178      	str	r0, [r7, #20]

	    for (int i = 0; i < 8; i++) {
 8008864:	2300      	movs	r3, #0
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
 8008868:	e01b      	b.n	80088a2 <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
	        int status = readGPIOPinState(switches[i].port, switches[i].pin);
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	3373      	adds	r3, #115	; 0x73
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	4413      	add	r3, r2
 8008874:	6859      	ldr	r1, [r3, #4]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	3373      	adds	r3, #115	; 0x73
 800887c:	00db      	lsls	r3, r3, #3
 800887e:	4413      	add	r3, r2
 8008880:	891b      	ldrh	r3, [r3, #8]
 8008882:	461a      	mov	r2, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff ff3d 	bl	8008704 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>
 800888a:	60b8      	str	r0, [r7, #8]
	        cJSON_AddItemToArray(outputsArray, cJSON_CreateBool(status));
 800888c:	68b8      	ldr	r0, [r7, #8]
 800888e:	f7fd fe47 	bl	8006520 <cJSON_CreateBool>
 8008892:	4603      	mov	r3, r0
 8008894:	4619      	mov	r1, r3
 8008896:	69b8      	ldr	r0, [r7, #24]
 8008898:	f7fd fd9a 	bl	80063d0 <cJSON_AddItemToArray>
	    for (int i = 0; i < 8; i++) {
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	3301      	adds	r3, #1
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	2b07      	cmp	r3, #7
 80088a6:	dde0      	ble.n	800886a <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
	    }

	    for (int i = 0; i < 16; i++) {
 80088a8:	2300      	movs	r3, #0
 80088aa:	623b      	str	r3, [r7, #32]
 80088ac:	e01b      	b.n	80088e6 <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
	        int status = readGPIOPinState(digitalInputs[i].port, digitalInputs[i].pin);
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	337b      	adds	r3, #123	; 0x7b
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	4413      	add	r3, r2
 80088b8:	6859      	ldr	r1, [r3, #4]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	337b      	adds	r3, #123	; 0x7b
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	4413      	add	r3, r2
 80088c4:	891b      	ldrh	r3, [r3, #8]
 80088c6:	461a      	mov	r2, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff ff1b 	bl	8008704 <_ZN5Utils16readGPIOPinStateEP12GPIO_TypeDeft>
 80088ce:	60f8      	str	r0, [r7, #12]
	        cJSON_AddItemToArray(inputsArray, cJSON_CreateBool(status));
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7fd fe25 	bl	8006520 <cJSON_CreateBool>
 80088d6:	4603      	mov	r3, r0
 80088d8:	4619      	mov	r1, r3
 80088da:	6978      	ldr	r0, [r7, #20]
 80088dc:	f7fd fd78 	bl	80063d0 <cJSON_AddItemToArray>
	    for (int i = 0; i < 16; i++) {
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	3301      	adds	r3, #1
 80088e4:	623b      	str	r3, [r7, #32]
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	2b0f      	cmp	r3, #15
 80088ea:	dde0      	ble.n	80088ae <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x66>
	    }

	    cJSON_AddItemToObject(rootJson, "type", cJSON_CreateString("realTime"));
 80088ec:	4813      	ldr	r0, [pc, #76]	; (800893c <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4>)
 80088ee:	f7fd fe7b 	bl	80065e8 <cJSON_CreateString>
 80088f2:	4603      	mov	r3, r0
 80088f4:	461a      	mov	r2, r3
 80088f6:	4912      	ldr	r1, [pc, #72]	; (8008940 <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf8>)
 80088f8:	69f8      	ldr	r0, [r7, #28]
 80088fa:	f7fd fdd7 	bl	80064ac <cJSON_AddItemToObject>
	    cJSON_AddItemToObject(rootJson, "di", inputsArray);
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	4910      	ldr	r1, [pc, #64]	; (8008944 <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfc>)
 8008902:	69f8      	ldr	r0, [r7, #28]
 8008904:	f7fd fdd2 	bl	80064ac <cJSON_AddItemToObject>
	    cJSON_AddItemToObject(rootJson, "relay", outputsArray);
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	490f      	ldr	r1, [pc, #60]	; (8008948 <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x100>)
 800890c:	69f8      	ldr	r0, [r7, #28]
 800890e:	f7fd fdcd 	bl	80064ac <cJSON_AddItemToObject>

	    char* json_string = cJSON_Print(rootJson);
 8008912:	69f8      	ldr	r0, [r7, #28]
 8008914:	f7fc ff40 	bl	8005798 <cJSON_Print>
 8008918:	6138      	str	r0, [r7, #16]
	    if (json_string != nullptr) {
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d006      	beq.n	800892e <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe6>
	        *message = json_string;
 8008920:	6939      	ldr	r1, [r7, #16]
 8008922:	6838      	ldr	r0, [r7, #0]
 8008924:	f007 fb37 	bl	800ff96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	        free(json_string); // Remember to free the allocated memory
 8008928:	6938      	ldr	r0, [r7, #16]
 800892a:	f007 fc17 	bl	801015c <free>
	    }

	    cJSON_Delete(rootJson);
 800892e:	69f8      	ldr	r0, [r7, #28]
 8008930:	f7fb fe94 	bl	800465c <cJSON_Delete>
}
 8008934:	bf00      	nop
 8008936:	3728      	adds	r7, #40	; 0x28
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	08013d1c 	.word	0x08013d1c
 8008940:	08013d28 	.word	0x08013d28
 8008944:	08013d30 	.word	0x08013d30
 8008948:	08013d34 	.word	0x08013d34

0800894c <_ZN5Utils11usartSwitchEP5cJSON>:

void Utils::usartSwitch(cJSON* data) {
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
    const cJSON *number = cJSON_GetObjectItemCaseSensitive(data, "number");
 8008956:	4926      	ldr	r1, [pc, #152]	; (80089f0 <_ZN5Utils11usartSwitchEP5cJSON+0xa4>)
 8008958:	6838      	ldr	r0, [r7, #0]
 800895a:	f7fd fce3 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800895e:	61f8      	str	r0, [r7, #28]
    // Directly getting the status as expected to be true/false (1/0)
    const cJSON *status = cJSON_GetObjectItemCaseSensitive(data, "status");
 8008960:	4924      	ldr	r1, [pc, #144]	; (80089f4 <_ZN5Utils11usartSwitchEP5cJSON+0xa8>)
 8008962:	6838      	ldr	r0, [r7, #0]
 8008964:	f7fd fcde 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 8008968:	61b8      	str	r0, [r7, #24]


    // Validate number as a numeric value and status also; although boolean, it comes as numeric in cJSON.
    if (cJSON_IsNumber(number) && cJSON_IsBool(status)) { // Assuming status comes as a numeric representation of a boolean
 800896a:	69f8      	ldr	r0, [r7, #28]
 800896c:	f7fd feb9 	bl	80066e2 <cJSON_IsNumber>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d007      	beq.n	8008986 <_ZN5Utils11usartSwitchEP5cJSON+0x3a>
 8008976:	69b8      	ldr	r0, [r7, #24]
 8008978:	f7fd fe9b 	bl	80066b2 <cJSON_IsBool>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <_ZN5Utils11usartSwitchEP5cJSON+0x3a>
 8008982:	2301      	movs	r3, #1
 8008984:	e000      	b.n	8008988 <_ZN5Utils11usartSwitchEP5cJSON+0x3c>
 8008986:	2300      	movs	r3, #0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d02d      	beq.n	80089e8 <_ZN5Utils11usartSwitchEP5cJSON+0x9c>

        if (number->valueint >= 1 && number->valueint <= 8) {
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	dd29      	ble.n	80089e8 <_ZN5Utils11usartSwitchEP5cJSON+0x9c>
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	2b08      	cmp	r3, #8
 800899a:	dc25      	bgt.n	80089e8 <_ZN5Utils11usartSwitchEP5cJSON+0x9c>
            int arrayIndex = number->valueint - 1;
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	617b      	str	r3, [r7, #20]
            PortAndPins targetSwitch = switches[arrayIndex];
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	3373      	adds	r3, #115	; 0x73
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	4413      	add	r3, r2
 80089ae:	f107 0208 	add.w	r2, r7, #8
 80089b2:	3304      	adds	r3, #4
 80089b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80089b8:	e882 0003 	stmia.w	r2, {r0, r1}

            bool success = switchRelay(targetSwitch.port, targetSwitch.pin, status->valueint);
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	89ba      	ldrh	r2, [r7, #12]
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff fe75 	bl	80086b4 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti>
 80089ca:	4603      	mov	r3, r0
 80089cc:	74fb      	strb	r3, [r7, #19]
            if (success) {
 80089ce:	7cfb      	ldrb	r3, [r7, #19]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d006      	beq.n	80089e2 <_ZN5Utils11usartSwitchEP5cJSON+0x96>
                print("The %d switch has been toggled.\r\n", number->valueint);
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	4619      	mov	r1, r3
 80089da:	4807      	ldr	r0, [pc, #28]	; (80089f8 <_ZN5Utils11usartSwitchEP5cJSON+0xac>)
 80089dc:	f7ff fe24 	bl	8008628 <_ZN5Utils5printEPKcz>
            } else {
                print("There is an issue with switch \r\n");
            }
        }
    }
}
 80089e0:	e002      	b.n	80089e8 <_ZN5Utils11usartSwitchEP5cJSON+0x9c>
                print("There is an issue with switch \r\n");
 80089e2:	4806      	ldr	r0, [pc, #24]	; (80089fc <_ZN5Utils11usartSwitchEP5cJSON+0xb0>)
 80089e4:	f7ff fe20 	bl	8008628 <_ZN5Utils5printEPKcz>
}
 80089e8:	bf00      	nop
 80089ea:	3720      	adds	r7, #32
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	08013d3c 	.word	0x08013d3c
 80089f4:	08013d44 	.word	0x08013d44
 80089f8:	08013d4c 	.word	0x08013d4c
 80089fc:	08013d70 	.word	0x08013d70

08008a00 <_Z5printPKcz>:



void print(const char* fmt, ...){
 8008a00:	b40f      	push	{r0, r1, r2, r3}
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b0c2      	sub	sp, #264	; 0x108
 8008a06:	af00      	add	r7, sp, #0
	 char buff[256];
	 va_list args;
	 va_start(args, fmt);
 8008a08:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8008a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a14:	601a      	str	r2, [r3, #0]
	 vsnprintf(buff, sizeof(buff), fmt, args);
 8008a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a1e:	f107 0008 	add.w	r0, r7, #8
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8008a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a2c:	f008 fc2c 	bl	8011288 <vsniprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 8008a30:	f107 0308 	add.w	r3, r7, #8
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7f7 fc2b 	bl	8000290 <strlen>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	f107 0108 	add.w	r1, r7, #8
 8008a42:	f04f 33ff 	mov.w	r3, #4294967295
 8008a46:	4805      	ldr	r0, [pc, #20]	; (8008a5c <_Z5printPKcz+0x5c>)
 8008a48:	f006 f8dc 	bl	800ec04 <HAL_UART_Transmit>
	                      HAL_MAX_DELAY);
	 va_end(args);
}
 8008a4c:	bf00      	nop
 8008a4e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008a52:	46bd      	mov	sp, r7
 8008a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a58:	b004      	add	sp, #16
 8008a5a:	4770      	bx	lr
 8008a5c:	200013a4 	.word	0x200013a4

08008a60 <_ZN15EthernetManagerD1Ev>:
uint8_t EthernetManager::dns_buffer[2048];
uint8_t EthernetManager::DHCP_SOCKET = 1;
uint8_t EthernetManager::DNS_SOCKET = 1;


EthernetManager::~EthernetManager() {
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]

}
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <_ZN15EthernetManagerC1Ev>:

EthernetManager::EthernetManager() {
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]

}
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <_ZN15EthernetManager12isIpAssignedEv>:

bool EthernetManager::ip_assigned = false;

bool EthernetManager::isIpAssigned() {
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	return ip_assigned;
 8008a94:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <_ZN15EthernetManager12isIpAssignedEv+0x18>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	200012b8 	.word	0x200012b8

08008aa8 <_ZN15EthernetManager12setIPAssigedEb>:

void EthernetManager::setIPAssiged(bool val){
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
	ip_assigned = val;
 8008ab4:	4a04      	ldr	r2, [pc, #16]	; (8008ac8 <_ZN15EthernetManager12setIPAssigedEb+0x20>)
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	7013      	strb	r3, [r2, #0]
}
 8008aba:	bf00      	nop
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	200012b8 	.word	0x200012b8

08008acc <_ZN15EthernetManager10initializeEP6ConfigP5Utils>:

void EthernetManager::initialize( Config *conf, Utils *utilClass) {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
    utils = utilClass;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	601a      	str	r2, [r3, #0]
    utils->playSound();
 8008ade:	f7ff fdd3 	bl	8008688 <_ZN5Utils9playSoundEv>
	utils->print("Initializing Internet \r\n");
 8008ae2:	480f      	ldr	r0, [pc, #60]	; (8008b20 <_ZN15EthernetManager10initializeEP6ConfigP5Utils+0x54>)
 8008ae4:	f7ff fda0 	bl	8008628 <_ZN5Utils5printEPKcz>

    resetAssert();
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 f81b 	bl	8008b24 <_ZN15EthernetManager11resetAssertEv>
    HAL_Delay(100); // Delay for the reset
 8008aee:	2064      	movs	r0, #100	; 0x64
 8008af0:	f003 fd2c 	bl	800c54c <HAL_Delay>
    resetDeassert();
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 f829 	bl	8008b4c <_ZN15EthernetManager13resetDeassertEv>
    HAL_Delay(300);
 8008afa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008afe:	f003 fd25 	bl	800c54c <HAL_Delay>
    initWIZCHIP();
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f8a6 	bl	8008c54 <_ZN15EthernetManager11initWIZCHIPEv>
    if (conf != nullptr) {
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <_ZN15EthernetManager10initializeEP6ConfigP5Utils+0x4a>
        configureNetwork(conf);
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 f8f7 	bl	8008d04 <_ZN15EthernetManager16configureNetworkEP6Config>
    }
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	08013d94 	.word	0x08013d94

08008b24 <_ZN15EthernetManager11resetAssertEv>:

}



void EthernetManager::resetAssert() {
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
    utils->print("Resetting!!! \r\n");
 8008b2c:	4805      	ldr	r0, [pc, #20]	; (8008b44 <_ZN15EthernetManager11resetAssertEv+0x20>)
 8008b2e:	f7ff fd7b 	bl	8008628 <_ZN5Utils5printEPKcz>
    HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_RESET);
 8008b32:	2200      	movs	r2, #0
 8008b34:	2120      	movs	r1, #32
 8008b36:	4804      	ldr	r0, [pc, #16]	; (8008b48 <_ZN15EthernetManager11resetAssertEv+0x24>)
 8008b38:	f004 fdb4 	bl	800d6a4 <HAL_GPIO_WritePin>
}
 8008b3c:	bf00      	nop
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	08013db0 	.word	0x08013db0
 8008b48:	40020800 	.word	0x40020800

08008b4c <_ZN15EthernetManager13resetDeassertEv>:

void EthernetManager::resetDeassert() {
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	utils->print("Desserting!!! \r\n");
 8008b54:	4805      	ldr	r0, [pc, #20]	; (8008b6c <_ZN15EthernetManager13resetDeassertEv+0x20>)
 8008b56:	f7ff fd67 	bl	8008628 <_ZN5Utils5printEPKcz>
    HAL_GPIO_WritePin(W5x00_RESET_PORT, W5x00_RESET_PIN, GPIO_PIN_SET);
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	2120      	movs	r1, #32
 8008b5e:	4804      	ldr	r0, [pc, #16]	; (8008b70 <_ZN15EthernetManager13resetDeassertEv+0x24>)
 8008b60:	f004 fda0 	bl	800d6a4 <HAL_GPIO_WritePin>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	08013dc0 	.word	0x08013dc0
 8008b70:	40020800 	.word	0x40020800

08008b74 <_ZN15EthernetManager12W5500_SelectEv>:


void EthernetManager::W5500_Select() {
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b7e:	4802      	ldr	r0, [pc, #8]	; (8008b88 <_ZN15EthernetManager12W5500_SelectEv+0x14>)
 8008b80:	f004 fd90 	bl	800d6a4 <HAL_GPIO_WritePin>
}
 8008b84:	bf00      	nop
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40020400 	.word	0x40020400

08008b8c <_ZN15EthernetManager14W5500_UnselectEv>:


void EthernetManager::W5500_Unselect() {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8008b90:	2201      	movs	r2, #1
 8008b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b96:	4802      	ldr	r0, [pc, #8]	; (8008ba0 <_ZN15EthernetManager14W5500_UnselectEv+0x14>)
 8008b98:	f004 fd84 	bl	800d6a4 <HAL_GPIO_WritePin>
}
 8008b9c:	bf00      	nop
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	40020400 	.word	0x40020400

08008ba4 <_ZN15EthernetManager14W5500_ReadBuffEPht>:

void EthernetManager::unselectW5500() {
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
}

void EthernetManager::W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8008bb0:	887a      	ldrh	r2, [r7, #2]
 8008bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	4803      	ldr	r0, [pc, #12]	; (8008bc8 <_ZN15EthernetManager14W5500_ReadBuffEPht+0x24>)
 8008bba:	f005 fbc9 	bl	800e350 <HAL_SPI_Receive>
}
 8008bbe:	bf00      	nop
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	2000134c 	.word	0x2000134c

08008bcc <_ZN15EthernetManager15W5500_WriteBuffEPht>:

void EthernetManager::W5500_WriteBuff( uint8_t* buff, uint16_t len) {
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 8008bd8:	887a      	ldrh	r2, [r7, #2]
 8008bda:	f04f 33ff 	mov.w	r3, #4294967295
 8008bde:	6879      	ldr	r1, [r7, #4]
 8008be0:	4803      	ldr	r0, [pc, #12]	; (8008bf0 <_ZN15EthernetManager15W5500_WriteBuffEPht+0x24>)
 8008be2:	f005 fa72 	bl	800e0ca <HAL_SPI_Transmit>
}
 8008be6:	bf00      	nop
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	2000134c 	.word	0x2000134c

08008bf4 <_ZN15EthernetManager14W5500_ReadByteEv>:

uint8_t EthernetManager::W5500_ReadByte() {
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, 1);
 8008bfa:	1dfb      	adds	r3, r7, #7
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff ffd0 	bl	8008ba4 <_ZN15EthernetManager14W5500_ReadBuffEPht>
    return byte;
 8008c04:	79fb      	ldrb	r3, [r7, #7]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <_ZN15EthernetManager15W5500_WriteByteEh>:

void EthernetManager::W5500_WriteByte(uint8_t byte) {
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b082      	sub	sp, #8
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	4603      	mov	r3, r0
 8008c16:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, 1);
 8008c18:	1dfb      	adds	r3, r7, #7
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7ff ffd5 	bl	8008bcc <_ZN15EthernetManager15W5500_WriteBuffEPht>
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <_ZN15EthernetManager19Callback_IPAssignedEv>:

void EthernetManager::Callback_IPAssigned() {
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
    	ip_assigned = true;
 8008c30:	4b03      	ldr	r3, [pc, #12]	; (8008c40 <_ZN15EthernetManager19Callback_IPAssignedEv+0x14>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	701a      	strb	r2, [r3, #0]
}
 8008c36:	bf00      	nop
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	200012b8 	.word	0x200012b8

08008c44 <_ZN15EthernetManager19Callback_IPConflictEv>:

void EthernetManager::Callback_IPConflict() {
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
 // Print("Callback: IP conflict!\r\n");
}
 8008c48:	bf00      	nop
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
	...

08008c54 <_ZN15EthernetManager11initWIZCHIPEv>:


void EthernetManager::initWIZCHIP() {
 8008c54:	b590      	push	{r4, r7, lr}
 8008c56:	b089      	sub	sp, #36	; 0x24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
    utils->print("\r\nWIZCHIP Initialization called!\r\n");
 8008c5c:	4820      	ldr	r0, [pc, #128]	; (8008ce0 <_ZN15EthernetManager11initWIZCHIPEv+0x8c>)
 8008c5e:	f7ff fce3 	bl	8008628 <_ZN5Utils5printEPKcz>
    W5500_Unselect();
 8008c62:	f7ff ff93 	bl	8008b8c <_ZN15EthernetManager14W5500_UnselectEv>
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8008c66:	491f      	ldr	r1, [pc, #124]	; (8008ce4 <_ZN15EthernetManager11initWIZCHIPEv+0x90>)
 8008c68:	481f      	ldr	r0, [pc, #124]	; (8008ce8 <_ZN15EthernetManager11initWIZCHIPEv+0x94>)
 8008c6a:	f7fa fffd 	bl	8003c68 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8008c6e:	491f      	ldr	r1, [pc, #124]	; (8008cec <_ZN15EthernetManager11initWIZCHIPEv+0x98>)
 8008c70:	481f      	ldr	r0, [pc, #124]	; (8008cf0 <_ZN15EthernetManager11initWIZCHIPEv+0x9c>)
 8008c72:	f7fb f81f 	bl	8003cb4 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8008c76:	491f      	ldr	r1, [pc, #124]	; (8008cf4 <_ZN15EthernetManager11initWIZCHIPEv+0xa0>)
 8008c78:	481f      	ldr	r0, [pc, #124]	; (8008cf8 <_ZN15EthernetManager11initWIZCHIPEv+0xa4>)
 8008c7a:	f7fb f847 	bl	8003d0c <reg_wizchip_spiburst_cbfunc>

    uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8008c7e:	4b1f      	ldr	r3, [pc, #124]	; (8008cfc <_ZN15EthernetManager11initWIZCHIPEv+0xa8>)
 8008c80:	f107 0410 	add.w	r4, r7, #16
 8008c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (ctlwizchip(CW_INIT_WIZCHIP, (void*)memsize) == -1) {
 8008c8a:	f107 0310 	add.w	r3, r7, #16
 8008c8e:	4619      	mov	r1, r3
 8008c90:	2001      	movs	r0, #1
 8008c92:	f7fb f867 	bl	8003d64 <ctlwizchip>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9c:	bf0c      	ite	eq
 8008c9e:	2301      	moveq	r3, #1
 8008ca0:	2300      	movne	r3, #0
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d115      	bne.n	8008cd4 <_ZN15EthernetManager11initWIZCHIPEv+0x80>
    }

    // Check PHY link status
    uint8_t tmp;
    do {
        if (ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1) {
 8008ca8:	f107 030f 	add.w	r3, r7, #15
 8008cac:	4619      	mov	r1, r3
 8008cae:	200f      	movs	r0, #15
 8008cb0:	f7fb f858 	bl	8003d64 <ctlwizchip>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	bf0c      	ite	eq
 8008cbc:	2301      	moveq	r3, #1
 8008cbe:	2300      	movne	r3, #0
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d108      	bne.n	8008cd8 <_ZN15EthernetManager11initWIZCHIPEv+0x84>
         //  Print("UNKNOWN PHY LINK STATUS.\r\n");
            return;
        }
    } while (tmp == PHY_LINK_OFF);
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d0ed      	beq.n	8008ca8 <_ZN15EthernetManager11initWIZCHIPEv+0x54>
    utils->print("WIZCHIP Initialized successfully.\r\n");
 8008ccc:	480c      	ldr	r0, [pc, #48]	; (8008d00 <_ZN15EthernetManager11initWIZCHIPEv+0xac>)
 8008cce:	f7ff fcab 	bl	8008628 <_ZN5Utils5printEPKcz>
 8008cd2:	e002      	b.n	8008cda <_ZN15EthernetManager11initWIZCHIPEv+0x86>
        return;
 8008cd4:	bf00      	nop
 8008cd6:	e000      	b.n	8008cda <_ZN15EthernetManager11initWIZCHIPEv+0x86>
            return;
 8008cd8:	bf00      	nop
}
 8008cda:	3724      	adds	r7, #36	; 0x24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd90      	pop	{r4, r7, pc}
 8008ce0:	08013dd4 	.word	0x08013dd4
 8008ce4:	08008b8d 	.word	0x08008b8d
 8008ce8:	08008b75 	.word	0x08008b75
 8008cec:	08008c0f 	.word	0x08008c0f
 8008cf0:	08008bf5 	.word	0x08008bf5
 8008cf4:	08008bcd 	.word	0x08008bcd
 8008cf8:	08008ba5 	.word	0x08008ba5
 8008cfc:	08013e1c 	.word	0x08013e1c
 8008d00:	08013df8 	.word	0x08013df8

08008d04 <_ZN15EthernetManager16configureNetworkEP6Config>:


void EthernetManager::configureNetwork( Config* conf) {
 8008d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d08:	b0a2      	sub	sp, #136	; 0x88
 8008d0a:	af0e      	add	r7, sp, #56	; 0x38
 8008d0c:	61f8      	str	r0, [r7, #28]
 8008d0e:	61b9      	str	r1, [r7, #24]
	utils->print("Initializing Netwok Configuration!!! \r\n");
 8008d10:	48a0      	ldr	r0, [pc, #640]	; (8008f94 <_ZN15EthernetManager16configureNetworkEP6Config+0x290>)
 8008d12:	f7ff fc89 	bl	8008628 <_ZN5Utils5printEPKcz>
    if (conf == nullptr) {
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 8135 	beq.w	8008f88 <_ZN15EthernetManager16configureNetworkEP6Config+0x284>
           return;
       }
       uint8_t mac[6];
       getSHAR(mac); // Assuming you have a function getSHAR to get MAC address
 8008d1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d22:	2206      	movs	r2, #6
 8008d24:	4619      	mov	r1, r3
 8008d26:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008d2a:	f7f9 fd3b 	bl	80027a4 <WIZCHIP_READ_BUF>
       HAL_Delay(300);
 8008d2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d32:	f003 fc0b 	bl	800c54c <HAL_Delay>

       wiz_NetInfo net_info = {
 8008d36:	f107 0320 	add.w	r3, r7, #32
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	605a      	str	r2, [r3, #4]
 8008d40:	609a      	str	r2, [r3, #8]
 8008d42:	60da      	str	r2, [r3, #12]
 8008d44:	611a      	str	r2, [r3, #16]
 8008d46:	f8c3 2013 	str.w	r2, [r3, #19]
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008d50:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
           {0,}, // IP address (will be set by DHCP or static config)
           {0,}, // Gateway (will be set by DHCP or static config)
           {0,}, // Subnet Mask (will be set by DHCP or static config)
           {0,}, // DNS server (will be set by DHCP or static config)
           NETINFO_DHCP // Default to DHCP
       };
 8008d54:	f887 3020 	strb.w	r3, [r7, #32]
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008d58:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
       };
 8008d5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008d60:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
       };
 8008d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008d68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
       };
 8008d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008d70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
       };
 8008d74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
           {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]}, // MAC address
 8008d78:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
       };
 8008d7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

       setSHAR(net_info.mac); // Apply MAC address
 8008d80:	f107 0320 	add.w	r3, r7, #32
 8008d84:	2206      	movs	r2, #6
 8008d86:	4619      	mov	r1, r3
 8008d88:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008d8c:	f7f9 fd6a 	bl	8002864 <WIZCHIP_WRITE_BUF>

       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8008d90:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008d94:	4618      	mov	r0, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8008d96:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008d9a:	461c      	mov	r4, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8008d9c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008da0:	461d      	mov	r5, r3
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8008da2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008da6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8008daa:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
       utils->print("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008dae:	9102      	str	r1, [sp, #8]
 8008db0:	9201      	str	r2, [sp, #4]
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	462b      	mov	r3, r5
 8008db6:	4622      	mov	r2, r4
 8008db8:	4601      	mov	r1, r0
 8008dba:	4877      	ldr	r0, [pc, #476]	; (8008f98 <_ZN15EthernetManager16configureNetworkEP6Config+0x294>)
 8008dbc:	f7ff fc34 	bl	8008628 <_ZN5Utils5printEPKcz>

       if (conf->getDHCPEnabled()) {
 8008dc0:	69b8      	ldr	r0, [r7, #24]
 8008dc2:	f001 fe16 	bl	800a9f2 <_ZNK6Config14getDHCPEnabledEv>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d04b      	beq.n	8008e64 <_ZN15EthernetManager16configureNetworkEP6Config+0x160>
           // DHCP mode
    	   utils->print("DHCP mode has been enabled@ \r\n");
 8008dcc:	4873      	ldr	r0, [pc, #460]	; (8008f9c <_ZN15EthernetManager16configureNetworkEP6Config+0x298>)
 8008dce:	f7ff fc2b 	bl	8008628 <_ZN5Utils5printEPKcz>
           DHCP_init(DHCP_SOCKET, dhcp_buffer);
 8008dd2:	4b73      	ldr	r3, [pc, #460]	; (8008fa0 <_ZN15EthernetManager16configureNetworkEP6Config+0x29c>)
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	4973      	ldr	r1, [pc, #460]	; (8008fa4 <_ZN15EthernetManager16configureNetworkEP6Config+0x2a0>)
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7f9 fb03 	bl	80023e4 <DHCP_init>
           reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8008dde:	4a72      	ldr	r2, [pc, #456]	; (8008fa8 <_ZN15EthernetManager16configureNetworkEP6Config+0x2a4>)
 8008de0:	4972      	ldr	r1, [pc, #456]	; (8008fac <_ZN15EthernetManager16configureNetworkEP6Config+0x2a8>)
 8008de2:	4872      	ldr	r0, [pc, #456]	; (8008fac <_ZN15EthernetManager16configureNetworkEP6Config+0x2a8>)
 8008de4:	f7f8 f90a 	bl	8000ffc <reg_dhcp_cbfunc>

   	    do {
   	        utils->print("Attempting DHCP lease...\r\n");
 8008de8:	4871      	ldr	r0, [pc, #452]	; (8008fb0 <_ZN15EthernetManager16configureNetworkEP6Config+0x2ac>)
 8008dea:	f7ff fc1d 	bl	8008628 <_ZN5Utils5printEPKcz>
   	         setIPAssiged(false);
 8008dee:	2100      	movs	r1, #0
 8008df0:	69f8      	ldr	r0, [r7, #28]
 8008df2:	f7ff fe59 	bl	8008aa8 <_ZN15EthernetManager12setIPAssigedEb>
   	        while (!isIpAssigned()) {
 8008df6:	e004      	b.n	8008e02 <_ZN15EthernetManager16configureNetworkEP6Config+0xfe>
   	            DHCP_run();
 8008df8:	f7f9 f93c 	bl	8002074 <DHCP_run>
   	            HAL_Delay(100); // Delay between DHCP runs
 8008dfc:	2064      	movs	r0, #100	; 0x64
 8008dfe:	f003 fba5 	bl	800c54c <HAL_Delay>
   	        while (!isIpAssigned()) {
 8008e02:	69f8      	ldr	r0, [r7, #28]
 8008e04:	f7ff fe42 	bl	8008a8c <_ZN15EthernetManager12isIpAssignedEv>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f083 0301 	eor.w	r3, r3, #1
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1f1      	bne.n	8008df8 <_ZN15EthernetManager16configureNetworkEP6Config+0xf4>
   	        }
   	    } while (!isIpAssigned()); // Retry mechanism if not successful
 8008e14:	69f8      	ldr	r0, [r7, #28]
 8008e16:	f7ff fe39 	bl	8008a8c <_ZN15EthernetManager12isIpAssignedEv>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f083 0301 	eor.w	r3, r3, #1
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e0      	bne.n	8008de8 <_ZN15EthernetManager16configureNetworkEP6Config+0xe4>
           // Get network configuration from DHCP
           getIPfromDHCP(net_info.ip);
 8008e26:	f107 0320 	add.w	r3, r7, #32
 8008e2a:	3306      	adds	r3, #6
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7f9 fb69 	bl	8002504 <getIPfromDHCP>
           getGWfromDHCP(net_info.gw);
 8008e32:	f107 0320 	add.w	r3, r7, #32
 8008e36:	330e      	adds	r3, #14
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7f9 fb83 	bl	8002544 <getGWfromDHCP>
           getSNfromDHCP(net_info.sn);
 8008e3e:	f107 0320 	add.w	r3, r7, #32
 8008e42:	330a      	adds	r3, #10
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7f9 fb9d 	bl	8002584 <getSNfromDHCP>
           getDNSfromDHCP(net_info.dns);
 8008e4a:	f107 0320 	add.w	r3, r7, #32
 8008e4e:	3312      	adds	r3, #18
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7f9 fbb7 	bl	80025c4 <getDNSfromDHCP>

           conf->setDHCPNetworkConfig(&net_info);
 8008e56:	f107 0320 	add.w	r3, r7, #32
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	69b8      	ldr	r0, [r7, #24]
 8008e5e:	f001 fcd1 	bl	800a804 <_ZN6Config20setDHCPNetworkConfigEP13wiz_NetInfo_t>
 8008e62:	e03d      	b.n	8008ee0 <_ZN15EthernetManager16configureNetworkEP6Config+0x1dc>
       } else {
    	   utils->print("STATIC mode has been enabled@ \r\n");
 8008e64:	4853      	ldr	r0, [pc, #332]	; (8008fb4 <_ZN15EthernetManager16configureNetworkEP6Config+0x2b0>)
 8008e66:	f7ff fbdf 	bl	8008628 <_ZN5Utils5printEPKcz>
           // Static IP mode
    	   std::memcpy(net_info.ip, conf->getIP().data(), 4); // For std::array
 8008e6a:	69b8      	ldr	r0, [r7, #24]
 8008e6c:	f001 fd41 	bl	800a8f2 <_ZNK6Config5getIPEv>
 8008e70:	4603      	mov	r3, r0
 8008e72:	643b      	str	r3, [r7, #64]	; 0x40
 8008e74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 f8a3 	bl	8008fc4 <_ZNSt5arrayIhLj4EE4dataEv>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
    	   std::memcpy(net_info.gw, conf->getGateway().data(), 4); // For std::array
 8008e86:	69b8      	ldr	r0, [r7, #24]
 8008e88:	f001 fd50 	bl	800a92c <_ZNK6Config10getGatewayEv>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8008e90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 f895 	bl	8008fc4 <_ZNSt5arrayIhLj4EE4dataEv>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
    	   std::memcpy(net_info.sn, conf->getSubnet().data(), 4); // For std::array
 8008ea2:	69b8      	ldr	r0, [r7, #24]
 8008ea4:	f001 fd5f 	bl	800a966 <_ZNK6Config9getSubnetEv>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 f887 	bl	8008fc4 <_ZNSt5arrayIhLj4EE4dataEv>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f8c7 302a 	str.w	r3, [r7, #42]	; 0x2a
    	   std::memcpy(net_info.dns, conf->getDNS().data(), 4); // For std::array
 8008ebe:	69b8      	ldr	r0, [r7, #24]
 8008ec0:	f001 fd6e 	bl	800a9a0 <_ZNK6Config6getDNSEv>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ec8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 f879 	bl	8008fc4 <_ZNSt5arrayIhLj4EE4dataEv>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
           net_info.dhcp = NETINFO_STATIC;
 8008eda:	2301      	movs	r3, #1
 8008edc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
       }
       // Apply network settings to WIZnet chip
       wizchip_setnetinfo(&net_info);
 8008ee0:	f107 0320 	add.w	r3, r7, #32
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fb fac1 	bl	800446c <wizchip_setnetinfo>

       // Print network information
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8008eea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008eee:	469c      	mov	ip, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8008ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008ef4:	469e      	mov	lr, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8008ef6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008efa:	4698      	mov	r8, r3
                   net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8008efc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f00:	4618      	mov	r0, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8008f02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f06:	461c      	mov	r4, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8008f08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f0c:	461d      	mov	r5, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8008f0e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f12:	461e      	mov	r6, r3
                   net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8008f14:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f18:	617b      	str	r3, [r7, #20]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8008f1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f1e:	613b      	str	r3, [r7, #16]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8008f20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f24:	60fb      	str	r3, [r7, #12]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8008f26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f2a:	60bb      	str	r3, [r7, #8]
                   net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8008f2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f30:	607b      	str	r3, [r7, #4]
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8008f32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f36:	603b      	str	r3, [r7, #0]
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8008f38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f3c:	4619      	mov	r1, r3
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8008f3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f42:	461a      	mov	r2, r3
                   net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 8008f44:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
       utils->print("IP: %d.%d.%d.%d\r\nGW: %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8008f48:	930c      	str	r3, [sp, #48]	; 0x30
 8008f4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f4c:	910a      	str	r1, [sp, #40]	; 0x28
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	9209      	str	r2, [sp, #36]	; 0x24
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	9208      	str	r2, [sp, #32]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	9207      	str	r2, [sp, #28]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	9206      	str	r2, [sp, #24]
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	9205      	str	r2, [sp, #20]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	9304      	str	r3, [sp, #16]
 8008f66:	9603      	str	r6, [sp, #12]
 8008f68:	9502      	str	r5, [sp, #8]
 8008f6a:	9401      	str	r4, [sp, #4]
 8008f6c:	9000      	str	r0, [sp, #0]
 8008f6e:	4643      	mov	r3, r8
 8008f70:	4672      	mov	r2, lr
 8008f72:	4661      	mov	r1, ip
 8008f74:	4810      	ldr	r0, [pc, #64]	; (8008fb8 <_ZN15EthernetManager16configureNetworkEP6Config+0x2b4>)
 8008f76:	f7ff fb57 	bl	8008628 <_ZN5Utils5printEPKcz>

       // Initializing DNS if necessary
       DNS_init(DNS_SOCKET, dns_buffer);
 8008f7a:	4b10      	ldr	r3, [pc, #64]	; (8008fbc <_ZN15EthernetManager16configureNetworkEP6Config+0x2b8>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	4910      	ldr	r1, [pc, #64]	; (8008fc0 <_ZN15EthernetManager16configureNetworkEP6Config+0x2bc>)
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7f9 fb59 	bl	8002638 <DNS_init>
 8008f86:	e000      	b.n	8008f8a <_ZN15EthernetManager16configureNetworkEP6Config+0x286>
           return;
 8008f88:	bf00      	nop
}
 8008f8a:	3750      	adds	r7, #80	; 0x50
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f92:	bf00      	nop
 8008f94:	08013e2c 	.word	0x08013e2c
 8008f98:	08013e54 	.word	0x08013e54
 8008f9c:	08013e84 	.word	0x08013e84
 8008fa0:	20000054 	.word	0x20000054
 8008fa4:	200002b8 	.word	0x200002b8
 8008fa8:	08008c45 	.word	0x08008c45
 8008fac:	08008c2d 	.word	0x08008c2d
 8008fb0:	08013ea4 	.word	0x08013ea4
 8008fb4:	08013ec0 	.word	0x08013ec0
 8008fb8:	08013ee4 	.word	0x08013ee4
 8008fbc:	20000055 	.word	0x20000055
 8008fc0:	20000ab8 	.word	0x20000ab8

08008fc4 <_ZNSt5arrayIhLj4EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 f805 	bl	8008fde <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8008fde:	b480      	push	{r7}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <_ZN11UARTHandlerC1Ev>:
#include "CplusUtils.h"
#include <cstring> // For memset and memcpy
#include <array>
#include <string>

UARTHandler::UARTHandler() : bufferIndex(0), newDataAvailable(false) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3310      	adds	r3, #16
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff f93d 	bl	8008280 <_ZN14CircularBufferC1Ev>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 261c 	strb.w	r2, [r3, #1564]	; 0x61c
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 261d 	strb.w	r2, [r3, #1565]	; 0x61d
    memset(receiveBuffer, 0, sizeof(receiveBuffer));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8009024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009028:	2100      	movs	r1, #0
 800902a:	4618      	mov	r0, r3
 800902c:	f008 f954 	bl	80112d8 <memset>
}
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config>:

void UARTHandler::init(UART_HandleTypeDef* uartHandle, Utils* utilsInstance, Config* configInstance) {
 800903a:	b580      	push	{r7, lr}
 800903c:	b086      	sub	sp, #24
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
 8009046:	603b      	str	r3, [r7, #0]
    huart = uartHandle;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	609a      	str	r2, [r3, #8]
    utils = utilsInstance;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	601a      	str	r2, [r3, #0]
    config = configInstance;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef result = HAL_UART_Receive_IT(huart, &rxByte, 1);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6898      	ldr	r0, [r3, #8]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	330c      	adds	r3, #12
 8009062:	2201      	movs	r2, #1
 8009064:	4619      	mov	r1, r3
 8009066:	f005 fe58 	bl	800ed1a <HAL_UART_Receive_IT>
 800906a:	4603      	mov	r3, r0
 800906c:	75fb      	strb	r3, [r7, #23]

    if(result != HAL_OK) {

    }
}
 800906e:	bf00      	nop
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <_ZN11UARTHandler15setRealTimeDataEb>:

void UARTHandler::setRealTimeData(bool requested){
 8009076:	b480      	push	{r7}
 8009078:	b083      	sub	sp, #12
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	70fb      	strb	r3, [r7, #3]
     realTimeData = requested;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	78fa      	ldrb	r2, [r7, #3]
 8009086:	f883 261d 	strb.w	r2, [r3, #1565]	; 0x61d
}
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <_ZN11UARTHandler15getRealTimeDataEv>:

bool UARTHandler::getRealTimeData(){
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
	return realTimeData;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 361d 	ldrb.w	r3, [r3, #1565]	; 0x61d
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <_ZN11UARTHandler19isNewMessageArrivedEv>:

bool UARTHandler::isNewMessageArrived() {
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
    return newDataAvailable;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 361c 	ldrb.w	r3, [r3, #1564]	; 0x61c
}
 80090be:	4618      	mov	r0, r3
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <_ZN11UARTHandler19setNewDataAvailableEb>:

void UARTHandler::setNewDataAvailable(bool isArrived) {
 80090ca:	b480      	push	{r7}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70fb      	strb	r3, [r7, #3]
    newDataAvailable = isArrived;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	f883 261c 	strb.w	r2, [r3, #1564]	; 0x61c
}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
	...

080090ec <_ZN11UARTHandler9onReceiveEv>:

void UARTHandler::onReceive() {
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]


    if (bufferIndex < sizeof(receiveBuffer) - 1) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 80090fa:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80090fe:	d822      	bhi.n	8009146 <_ZN11UARTHandler9onReceiveEv+0x5a>
        receiveBuffer[bufferIndex++] = rxByte;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 8009106:	1c59      	adds	r1, r3, #1
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	f8c2 1618 	str.w	r1, [r2, #1560]	; 0x618
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	7b11      	ldrb	r1, [r2, #12]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	4413      	add	r3, r2
 8009116:	460a      	mov	r2, r1
 8009118:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        // Check for message end (e.g., newline character)
      //  utils->print("Entered to this function \r\n");
        if (rxByte == '\n') {
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	7b1b      	ldrb	r3, [r3, #12]
 8009120:	2b0a      	cmp	r3, #10
 8009122:	d117      	bne.n	8009154 <_ZN11UARTHandler9onReceiveEv+0x68>
            receiveBuffer[bufferIndex] = '\0';
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	4413      	add	r3, r2
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

            bufferIndex = 0; // Reset index for the next message
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            setNewDataAvailable(true);
 800913c:	2101      	movs	r1, #1
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff ffc3 	bl	80090ca <_ZN11UARTHandler19setNewDataAvailableEb>
 8009144:	e006      	b.n	8009154 <_ZN11UARTHandler9onReceiveEv+0x68>
        }
    } else {
        // Handle buffer overflow
        print("Buffer overflow \r\n");
 8009146:	4809      	ldr	r0, [pc, #36]	; (800916c <_ZN11UARTHandler9onReceiveEv+0x80>)
 8009148:	f7ff fc5a 	bl	8008a00 <_Z5printPKcz>
        bufferIndex = 0; // Reset buffer index
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    }


    HAL_UART_Receive_IT(huart, &rxByte, 1); // Prepare to receive the next byte
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6898      	ldr	r0, [r3, #8]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	330c      	adds	r3, #12
 800915c:	2201      	movs	r2, #1
 800915e:	4619      	mov	r1, r3
 8009160:	f005 fddb 	bl	800ed1a <HAL_UART_Receive_IT>

}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	08013f2c 	.word	0x08013f2c

08009170 <_ZN11UARTHandler19processReceivedDataEv>:

void UARTHandler::processReceivedData() {
 8009170:	b580      	push	{r7, lr}
 8009172:	b08a      	sub	sp, #40	; 0x28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
    if (!isNewMessageArrived()) return; // Early exit if no new data
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff ff99 	bl	80090b0 <_ZN11UARTHandler19isNewMessageArrivedEv>
 800917e:	4603      	mov	r3, r0
 8009180:	f083 0301 	eor.w	r3, r3, #1
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	f040 80db 	bne.w	8009342 <_ZN11UARTHandler19processReceivedDataEv+0x1d2>
    cJSON *json = cJSON_Parse(reinterpret_cast<const char*>(receiveBuffer));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8009192:	4618      	mov	r0, r3
 8009194:	f7fc fa6e 	bl	8005674 <cJSON_Parse>
 8009198:	6278      	str	r0, [r7, #36]	; 0x24
    if (json == NULL) {
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10f      	bne.n	80091c0 <_ZN11UARTHandler19processReceivedDataEv+0x50>
        const char *error_ptr = cJSON_GetErrorPtr();
 80091a0:	f7fb f9a4 	bl	80044ec <cJSON_GetErrorPtr>
 80091a4:	60f8      	str	r0, [r7, #12]
        if (error_ptr != NULL) {
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 80b7 	beq.w	800931c <_ZN11UARTHandler19processReceivedDataEv+0x1ac>
            fprintf(stderr, "Error before: %s\n", error_ptr);
 80091ae:	4b67      	ldr	r3, [pc, #412]	; (800934c <_ZN11UARTHandler19processReceivedDataEv+0x1dc>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4966      	ldr	r1, [pc, #408]	; (8009350 <_ZN11UARTHandler19processReceivedDataEv+0x1e0>)
 80091b8:	4618      	mov	r0, r3
 80091ba:	f007 ff79 	bl	80110b0 <fiprintf>
 80091be:	e0ad      	b.n	800931c <_ZN11UARTHandler19processReceivedDataEv+0x1ac>
        }
    } else {
        cJSON *commandItem = cJSON_GetObjectItemCaseSensitive(json, "type");
 80091c0:	4964      	ldr	r1, [pc, #400]	; (8009354 <_ZN11UARTHandler19processReceivedDataEv+0x1e4>)
 80091c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091c4:	f7fd f8ae 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 80091c8:	6238      	str	r0, [r7, #32]
        cJSON *item = cJSON_GetObjectItemCaseSensitive(json, "data");
 80091ca:	4963      	ldr	r1, [pc, #396]	; (8009358 <_ZN11UARTHandler19processReceivedDataEv+0x1e8>)
 80091cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091ce:	f7fd f8a9 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 80091d2:	61f8      	str	r0, [r7, #28]
        if (cJSON_IsNumber(commandItem)) {
 80091d4:	6a38      	ldr	r0, [r7, #32]
 80091d6:	f7fd fa84 	bl	80066e2 <cJSON_IsNumber>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bf14      	ite	ne
 80091e0:	2301      	movne	r3, #1
 80091e2:	2300      	moveq	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 8095 	beq.w	8009316 <_ZN11UARTHandler19processReceivedDataEv+0x1a6>
            int type = commandItem->valueint;
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	61bb      	str	r3, [r7, #24]

            switch(type) {
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	2b07      	cmp	r3, #7
 80091f8:	f200 808a 	bhi.w	8009310 <_ZN11UARTHandler19processReceivedDataEv+0x1a0>
 80091fc:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <_ZN11UARTHandler19processReceivedDataEv+0x94>)
 80091fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009202:	bf00      	nop
 8009204:	08009225 	.word	0x08009225
 8009208:	08009251 	.word	0x08009251
 800920c:	08009289 	.word	0x08009289
 8009210:	080092a1 	.word	0x080092a1
 8009214:	080092b9 	.word	0x080092b9
 8009218:	080092d1 	.word	0x080092d1
 800921c:	080092e9 	.word	0x080092e9
 8009220:	080092fd 	.word	0x080092fd
                case INFO_TYPE: {
                    utils->print("Message has been arrived: %d\r\n", type);
 8009224:	69b9      	ldr	r1, [r7, #24]
 8009226:	484d      	ldr	r0, [pc, #308]	; (800935c <_ZN11UARTHandler19processReceivedDataEv+0x1ec>)
 8009228:	f7ff f9fe 	bl	8008628 <_ZN5Utils5printEPKcz>
                    // Scope introduced for INFO_TYPE case
                    char* data = config->getInfoList();
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	4618      	mov	r0, r3
 8009232:	f000 fe21 	bl	8009e78 <_ZN6Config11getInfoListEv>
 8009236:	6138      	str	r0, [r7, #16]
                 //   const char* dataToSend = data.c_str();
                    HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(const_cast<char*>(data)), strlen(data), HAL_MAX_DELAY);
 8009238:	6938      	ldr	r0, [r7, #16]
 800923a:	f7f7 f829 	bl	8000290 <strlen>
 800923e:	4603      	mov	r3, r0
 8009240:	b29a      	uxth	r2, r3
 8009242:	f04f 33ff 	mov.w	r3, #4294967295
 8009246:	6939      	ldr	r1, [r7, #16]
 8009248:	4845      	ldr	r0, [pc, #276]	; (8009360 <_ZN11UARTHandler19processReceivedDataEv+0x1f0>)
 800924a:	f005 fcdb 	bl	800ec04 <HAL_UART_Transmit>
                    break;
 800924e:	e062      	b.n	8009316 <_ZN11UARTHandler19processReceivedDataEv+0x1a6>
                }
                case REAL_TIME_TYPE: {
                	utils->playSound();
 8009250:	f7ff fa1a 	bl	8008688 <_ZN5Utils9playSoundEv>
                	 if (cJSON_IsBool(item)) {
 8009254:	69f8      	ldr	r0, [r7, #28]
 8009256:	f7fd fa2c 	bl	80066b2 <cJSON_IsBool>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	bf14      	ite	ne
 8009260:	2301      	movne	r3, #1
 8009262:	2300      	moveq	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d054      	beq.n	8009314 <_ZN11UARTHandler19processReceivedDataEv+0x1a4>
                       bool status = cJSON_IsTrue(item) ? true : false;
 800926a:	69f8      	ldr	r0, [r7, #28]
 800926c:	f7fd fa0a 	bl	8006684 <cJSON_IsTrue>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	bf14      	ite	ne
 8009276:	2301      	movne	r3, #1
 8009278:	2300      	moveq	r3, #0
 800927a:	75fb      	strb	r3, [r7, #23]
            	       setRealTimeData(status);
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff fef8 	bl	8009076 <_ZN11UARTHandler15setRealTimeDataEb>
                	 }
                	break;
 8009286:	e045      	b.n	8009314 <_ZN11UARTHandler19processReceivedDataEv+0x1a4>
                }
                case MQTT_SETTING_TYPE: {
                	utils->playSound();
 8009288:	f7ff f9fe 	bl	8008688 <_ZN5Utils9playSoundEv>
                	config->setMQTTBroker(item);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	69f9      	ldr	r1, [r7, #28]
 8009292:	4618      	mov	r0, r3
 8009294:	f001 f8b8 	bl	800a408 <_ZN6Config13setMQTTBrokerEP5cJSON>
                	utils->print("MQTT config has been arrived!!! \r\n");
 8009298:	4832      	ldr	r0, [pc, #200]	; (8009364 <_ZN11UARTHandler19processReceivedDataEv+0x1f4>)
 800929a:	f7ff f9c5 	bl	8008628 <_ZN5Utils5printEPKcz>
                    break;
 800929e:	e03a      	b.n	8009316 <_ZN11UARTHandler19processReceivedDataEv+0x1a6>
                }
                case NETWORK_SETTING_TYPE :{
                	config->setNetworkSettings(item);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	69f9      	ldr	r1, [r7, #28]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 f842 	bl	800a330 <_ZN6Config18setNetworkSettingsEP5cJSON>
                	utils->playSound();
 80092ac:	f7ff f9ec 	bl	8008688 <_ZN5Utils9playSoundEv>
                	utils->print("Netwokr Settings has been successfully configured \r\n");
 80092b0:	482d      	ldr	r0, [pc, #180]	; (8009368 <_ZN11UARTHandler19processReceivedDataEv+0x1f8>)
 80092b2:	f7ff f9b9 	bl	8008628 <_ZN5Utils5printEPKcz>
                    break;
 80092b6:	e02e      	b.n	8009316 <_ZN11UARTHandler19processReceivedDataEv+0x1a6>
                }
                case ANALOG_NAME: {
                	utils->playSound();
 80092b8:	f7ff f9e6 	bl	8008688 <_ZN5Utils9playSoundEv>
                	config->setAnalogInputNamesFromJson(json);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092c2:	4618      	mov	r0, r3
 80092c4:	f001 f8d8 	bl	800a478 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON>
                    utils->print("Analog Names has been arrived!!! \r\n");
 80092c8:	4828      	ldr	r0, [pc, #160]	; (800936c <_ZN11UARTHandler19processReceivedDataEv+0x1fc>)
 80092ca:	f7ff f9ad 	bl	8008628 <_ZN5Utils5printEPKcz>
                    break;
 80092ce:	e022      	b.n	8009316 <_ZN11UARTHandler19processReceivedDataEv+0x1a6>
                }
                case DIGITAL_NAME: {
                	utils->playSound();
 80092d0:	f7ff f9da 	bl	8008688 <_ZN5Utils9playSoundEv>
                	config->setDigitalInputNamesFromJson(json);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 f95c 	bl	800a598 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON>
                	utils->print("Digital Names has been arrived!!! \r\n");
 80092e0:	4823      	ldr	r0, [pc, #140]	; (8009370 <_ZN11UARTHandler19processReceivedDataEv+0x200>)
 80092e2:	f7ff f9a1 	bl	8008628 <_ZN5Utils5printEPKcz>
                	break;
 80092e6:	e016      	b.n	8009316 <_ZN11UARTHandler19processReceivedDataEv+0x1a6>
                }
                case RELAY_NAME: {
                	config->setRelayNamesFromJson(json);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092ee:	4618      	mov	r0, r3
 80092f0:	f001 f9f8 	bl	800a6e4 <_ZN6Config21setRelayNamesFromJsonEP5cJSON>
                	utils->print("Relay Names has been arrived!!! \r\n");
 80092f4:	481f      	ldr	r0, [pc, #124]	; (8009374 <_ZN11UARTHandler19processReceivedDataEv+0x204>)
 80092f6:	f7ff f997 	bl	8008628 <_ZN5Utils5printEPKcz>
                	break;
 80092fa:	e00c      	b.n	8009316 <_ZN11UARTHandler19processReceivedDataEv+0x1a6>
                }

                case RELAY_SWITCH: {
                	utils->usartSwitch(item);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	69f9      	ldr	r1, [r7, #28]
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff fb22 	bl	800894c <_ZN5Utils11usartSwitchEP5cJSON>
                	utils->print("Relay Switch has been arrived \r\n");
 8009308:	481b      	ldr	r0, [pc, #108]	; (8009378 <_ZN11UARTHandler19processReceivedDataEv+0x208>)
 800930a:	f7ff f98d 	bl	8008628 <_ZN5Utils5printEPKcz>
                	break;
 800930e:	e002      	b.n	8009316 <_ZN11UARTHandler19processReceivedDataEv+0x1a6>
                }
                // Continue for other cases, each in its own scope if needed
                default: {
                    // Handle unknown type
                    break;
 8009310:	bf00      	nop
 8009312:	e000      	b.n	8009316 <_ZN11UARTHandler19processReceivedDataEv+0x1a6>
                	break;
 8009314:	bf00      	nop
                }
            }
        }
        cJSON_Delete(json); // Ensure json is deleted here to avoid memory leak
 8009316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009318:	f7fb f9a0 	bl	800465c <cJSON_Delete>
    }

    setNewDataAvailable(false); // Reset the flag after processing
 800931c:	2100      	movs	r1, #0
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7ff fed3 	bl	80090ca <_ZN11UARTHandler19setNewDataAvailableEb>
    memset(receiveBuffer, 0, bufferIndex); // Clear the buffer
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f503 6083 	add.w	r0, r3, #1048	; 0x418
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 8009330:	461a      	mov	r2, r3
 8009332:	2100      	movs	r1, #0
 8009334:	f007 ffd0 	bl	80112d8 <memset>
    bufferIndex = 0; // Ready for new data
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
 8009340:	e000      	b.n	8009344 <_ZN11UARTHandler19processReceivedDataEv+0x1d4>
    if (!isNewMessageArrived()) return; // Early exit if no new data
 8009342:	bf00      	nop
}
 8009344:	3728      	adds	r7, #40	; 0x28
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20000228 	.word	0x20000228
 8009350:	08013f40 	.word	0x08013f40
 8009354:	08013f54 	.word	0x08013f54
 8009358:	08013f5c 	.word	0x08013f5c
 800935c:	08013f64 	.word	0x08013f64
 8009360:	200013a4 	.word	0x200013a4
 8009364:	08013f84 	.word	0x08013f84
 8009368:	08013fa8 	.word	0x08013fa8
 800936c:	08013fe0 	.word	0x08013fe0
 8009370:	08014004 	.word	0x08014004
 8009374:	0801402c 	.word	0x0801402c
 8009378:	08014050 	.word	0x08014050

0800937c <_ZN11UARTHandler16SendRealTimeDataEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void UARTHandler:: SendRealTimeData(std::string* data ){
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]

    utils->createUSARTJson(data);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fa5b 	bl	8008848 <_ZN5Utils15createUSARTJsonEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    const char* serializedData = data->c_str();
 8009392:	6838      	ldr	r0, [r7, #0]
 8009394:	f006 fe3c 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8009398:	60f8      	str	r0, [r7, #12]

   HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(const_cast<char*>(serializedData)), strlen(serializedData), HAL_MAX_DELAY);
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7f6 ff78 	bl	8000290 <strlen>
 80093a0:	4603      	mov	r3, r0
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	f04f 33ff 	mov.w	r3, #4294967295
 80093a8:	68f9      	ldr	r1, [r7, #12]
 80093aa:	4803      	ldr	r0, [pc, #12]	; (80093b8 <_ZN11UARTHandler16SendRealTimeDataEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>)
 80093ac:	f005 fc2a 	bl	800ec04 <HAL_UART_Transmit>

}
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	200013a4 	.word	0x200013a4

080093bc <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7f6 ff63 	bl	8000290 <strlen>
 80093ca:	4603      	mov	r3, r0
      }
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>:
    struct array
 80093d4:	b5b0      	push	{r4, r5, r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2407      	movs	r4, #7
 80093e0:	461d      	mov	r5, r3
 80093e2:	e004      	b.n	80093ee <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev+0x1a>
 80093e4:	4628      	mov	r0, r5
 80093e6:	f006 fce1 	bl	800fdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80093ea:	3518      	adds	r5, #24
 80093ec:	3c01      	subs	r4, #1
 80093ee:	2c00      	cmp	r4, #0
 80093f0:	daf8      	bge.n	80093e4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev+0x10>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bdb0      	pop	{r4, r5, r7, pc}

080093fc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>:
 80093fc:	b590      	push	{r4, r7, lr}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev+0x24>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	429c      	cmp	r4, r3
 8009414:	d004      	beq.n	8009420 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev+0x24>
 8009416:	3c18      	subs	r4, #24
 8009418:	4620      	mov	r0, r4
 800941a:	f006 fcd5 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800941e:	e7f7      	b.n	8009410 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev+0x14>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	bd90      	pop	{r4, r7, pc}

0800942a <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev>:
 800942a:	b5b0      	push	{r4, r5, r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	240f      	movs	r4, #15
 8009436:	461d      	mov	r5, r3
 8009438:	e004      	b.n	8009444 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev+0x1a>
 800943a:	4628      	mov	r0, r5
 800943c:	f006 fcb6 	bl	800fdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8009440:	3518      	adds	r5, #24
 8009442:	3c01      	subs	r4, #1
 8009444:	2c00      	cmp	r4, #0
 8009446:	daf8      	bge.n	800943a <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev+0x10>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bdb0      	pop	{r4, r5, r7, pc}

08009452 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>:
 8009452:	b590      	push	{r4, r7, lr}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00a      	beq.n	8009476 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev+0x24>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	429c      	cmp	r4, r3
 800946a:	d004      	beq.n	8009476 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev+0x24>
 800946c:	3c18      	subs	r4, #24
 800946e:	4620      	mov	r0, r4
 8009470:	f006 fcaa 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009474:	e7f7      	b.n	8009466 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev+0x14>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	bd90      	pop	{r4, r7, pc}

08009480 <_ZN6ConfigC1Ev>:
#include "config.h"

uint8_t mac[6];

Config::Config(){
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3320      	adds	r3, #32
 800948c:	4618      	mov	r0, r3
 800948e:	f006 fc8d 	bl	800fdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3338      	adds	r3, #56	; 0x38
 8009496:	4618      	mov	r0, r3
 8009498:	f006 fc88 	bl	800fdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3350      	adds	r3, #80	; 0x50
 80094a0:	4618      	mov	r0, r3
 80094a2:	f006 fc83 	bl	800fdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	3368      	adds	r3, #104	; 0x68
 80094aa:	4618      	mov	r0, r3
 80094ac:	f006 fc7e 	bl	800fdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3380      	adds	r3, #128	; 0x80
 80094b4:	4618      	mov	r0, r3
 80094b6:	f006 fc79 	bl	800fdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	339c      	adds	r3, #156	; 0x9c
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff ff88 	bl	80093d4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff ffad 	bl	800942a <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff ff7c 	bl	80093d4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>

}
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <_ZN6Config4initEv>:

void Config::init() {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80094f4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80094f8:	6018      	str	r0, [r3, #0]

    setBrokerIP({172, 30,1,25});
 80094fa:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80094fe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009502:	4ae7      	ldr	r2, [pc, #924]	; (80098a0 <_ZN6Config4initEv+0x3b8>)
 8009504:	6812      	ldr	r2, [r2, #0]
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	f107 0208 	add.w	r2, r7, #8
 800950c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009510:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009514:	4611      	mov	r1, r2
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	f001 fb21 	bl	800ab5e <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>
    setBrokerPort(1883);
 800951c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009520:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009524:	f240 715b 	movw	r1, #1883	; 0x75b
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	f001 fb27 	bl	800ab7c <_ZN6Config13setBrokerPortEt>
    setIP({172, 30, 1, 123});
 800952e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009532:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8009536:	4adb      	ldr	r2, [pc, #876]	; (80098a4 <_ZN6Config4initEv+0x3bc>)
 8009538:	6812      	ldr	r2, [r2, #0]
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	f107 020c 	add.w	r2, r7, #12
 8009540:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009544:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009548:	4611      	mov	r1, r2
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	f001 fb25 	bl	800ab9a <_ZN6Config5setIPERKSt5arrayIhLj4EE>
    setGateway({172, 30, 1, 254});
 8009550:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009554:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8009558:	4ad3      	ldr	r2, [pc, #844]	; (80098a8 <_ZN6Config4initEv+0x3c0>)
 800955a:	6812      	ldr	r2, [r2, #0]
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	f107 0210 	add.w	r2, r7, #16
 8009562:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009566:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800956a:	4611      	mov	r1, r2
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	f001 fb24 	bl	800abba <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>
    setSubnet({255, 255, 255, 0});
 8009572:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009576:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800957a:	4acc      	ldr	r2, [pc, #816]	; (80098ac <_ZN6Config4initEv+0x3c4>)
 800957c:	6812      	ldr	r2, [r2, #0]
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	f107 0214 	add.w	r2, r7, #20
 8009584:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009588:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800958c:	4611      	mov	r1, r2
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	f001 fb23 	bl	800abda <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>
    setDNS({8, 8, 8, 8}); // Google's DNS for example
 8009594:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009598:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800959c:	4ac4      	ldr	r2, [pc, #784]	; (80098b0 <_ZN6Config4initEv+0x3c8>)
 800959e:	6812      	ldr	r2, [r2, #0]
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	f107 0218 	add.w	r2, r7, #24
 80095a6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80095aa:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80095ae:	4611      	mov	r1, r2
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	f001 fb22 	bl	800abfa <_ZN6Config6setDNSERKSt5arrayIhLj4EE>
    setKeepAliveInterval(60);
 80095b6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80095ba:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80095be:	213c      	movs	r1, #60	; 0x3c
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	f001 fb2a 	bl	800ac1a <_ZN6Config20setKeepAliveIntervalEt>
    setDHCPEnabled(true);
 80095c6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80095ca:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80095ce:	2101      	movs	r1, #1
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	f001 fb31 	bl	800ac38 <_ZN6Config14setDHCPEnabledEb>
    setIntervalTime(1000); // Example interval time
 80095d6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80095da:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80095de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	f001 fb37 	bl	800ac56 <_ZN6Config15setIntervalTimeEm>

    setUsername("user");
 80095e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80095ec:	4618      	mov	r0, r3
 80095ee:	f006 fb0f 	bl	800fc10 <_ZNSaIcEC1Ev>
 80095f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80095f6:	f107 031c 	add.w	r3, r7, #28
 80095fa:	49ae      	ldr	r1, [pc, #696]	; (80098b4 <_ZN6Config4initEv+0x3cc>)
 80095fc:	4618      	mov	r0, r3
 80095fe:	f006 fd63 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009602:	f107 021c 	add.w	r2, r7, #28
 8009606:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800960a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800960e:	4611      	mov	r1, r2
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	f001 fb2e 	bl	800ac72 <_ZN6Config11setUsernameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009616:	f107 031c 	add.w	r3, r7, #28
 800961a:	4618      	mov	r0, r3
 800961c:	f006 fbd4 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009620:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009624:	4618      	mov	r0, r3
 8009626:	f006 faf5 	bl	800fc14 <_ZNSaIcED1Ev>
    setClientId(std::string(clientId));
 800962a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800962e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009638:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800963c:	4611      	mov	r1, r2
 800963e:	4618      	mov	r0, r3
 8009640:	f006 fd0e 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009644:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009648:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800964c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009650:	4611      	mov	r1, r2
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	f001 fb1c 	bl	800ac90 <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009658:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800965c:	4618      	mov	r0, r3
 800965e:	f006 fbb3 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    setPassword("pass");
 8009662:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009666:	4618      	mov	r0, r3
 8009668:	f006 fad2 	bl	800fc10 <_ZNSaIcEC1Ev>
 800966c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009670:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009674:	4990      	ldr	r1, [pc, #576]	; (80098b8 <_ZN6Config4initEv+0x3d0>)
 8009676:	4618      	mov	r0, r3
 8009678:	f006 fd26 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800967c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009680:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009684:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009688:	4611      	mov	r1, r2
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	f001 fb0f 	bl	800acae <_ZN6Config11setPasswordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8009690:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009694:	4618      	mov	r0, r3
 8009696:	f006 fb97 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800969a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800969e:	4618      	mov	r0, r3
 80096a0:	f006 fab8 	bl	800fc14 <_ZNSaIcED1Ev>
    setTopicPublish("topic/pub");
 80096a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80096a8:	4618      	mov	r0, r3
 80096aa:	f006 fab1 	bl	800fc10 <_ZNSaIcEC1Ev>
 80096ae:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80096b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80096b6:	4981      	ldr	r1, [pc, #516]	; (80098bc <_ZN6Config4initEv+0x3d4>)
 80096b8:	4618      	mov	r0, r3
 80096ba:	f006 fd05 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80096be:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80096c2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80096c6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80096ca:	4611      	mov	r1, r2
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	f001 fb0c 	bl	800acea <_ZN6Config15setTopicPublishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80096d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80096d6:	4618      	mov	r0, r3
 80096d8:	f006 fb76 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80096dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80096e0:	4618      	mov	r0, r3
 80096e2:	f006 fa97 	bl	800fc14 <_ZNSaIcED1Ev>
    setQoS(1); // Quality of Service level
 80096e6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80096ea:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80096ee:	2101      	movs	r1, #1
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	f001 fb09 	bl	800ad08 <_ZN6Config6setQoSEi>

    setAnalogInputNames({"Analog1", "Analog2", "Analog3", "Analog4", "Analog5", "Analog6", "Analog7", "Analog8",});
 80096f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096fa:	4618      	mov	r0, r3
 80096fc:	f006 fa88 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009700:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009704:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009708:	496d      	ldr	r1, [pc, #436]	; (80098c0 <_ZN6Config4initEv+0x3d8>)
 800970a:	4618      	mov	r0, r3
 800970c:	f006 fcdc 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009710:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009714:	4618      	mov	r0, r3
 8009716:	f006 fa7b 	bl	800fc10 <_ZNSaIcEC1Ev>
 800971a:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 800971e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009722:	3318      	adds	r3, #24
 8009724:	4967      	ldr	r1, [pc, #412]	; (80098c4 <_ZN6Config4initEv+0x3dc>)
 8009726:	4618      	mov	r0, r3
 8009728:	f006 fcce 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800972c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009730:	4618      	mov	r0, r3
 8009732:	f006 fa6d 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009736:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800973a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800973e:	3330      	adds	r3, #48	; 0x30
 8009740:	4961      	ldr	r1, [pc, #388]	; (80098c8 <_ZN6Config4initEv+0x3e0>)
 8009742:	4618      	mov	r0, r3
 8009744:	f006 fcc0 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009748:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800974c:	4618      	mov	r0, r3
 800974e:	f006 fa5f 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009752:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8009756:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800975a:	3348      	adds	r3, #72	; 0x48
 800975c:	495b      	ldr	r1, [pc, #364]	; (80098cc <_ZN6Config4initEv+0x3e4>)
 800975e:	4618      	mov	r0, r3
 8009760:	f006 fcb2 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009764:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009768:	4618      	mov	r0, r3
 800976a:	f006 fa51 	bl	800fc10 <_ZNSaIcEC1Ev>
 800976e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009772:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009776:	3360      	adds	r3, #96	; 0x60
 8009778:	4955      	ldr	r1, [pc, #340]	; (80098d0 <_ZN6Config4initEv+0x3e8>)
 800977a:	4618      	mov	r0, r3
 800977c:	f006 fca4 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009780:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8009784:	4618      	mov	r0, r3
 8009786:	f006 fa43 	bl	800fc10 <_ZNSaIcEC1Ev>
 800978a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 800978e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009792:	3378      	adds	r3, #120	; 0x78
 8009794:	494f      	ldr	r1, [pc, #316]	; (80098d4 <_ZN6Config4initEv+0x3ec>)
 8009796:	4618      	mov	r0, r3
 8009798:	f006 fc96 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800979c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80097a0:	4618      	mov	r0, r3
 80097a2:	f006 fa35 	bl	800fc10 <_ZNSaIcEC1Ev>
 80097a6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80097aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80097ae:	3390      	adds	r3, #144	; 0x90
 80097b0:	4949      	ldr	r1, [pc, #292]	; (80098d8 <_ZN6Config4initEv+0x3f0>)
 80097b2:	4618      	mov	r0, r3
 80097b4:	f006 fc88 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80097b8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80097bc:	4618      	mov	r0, r3
 80097be:	f006 fa27 	bl	800fc10 <_ZNSaIcEC1Ev>
 80097c2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80097c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80097ca:	33a8      	adds	r3, #168	; 0xa8
 80097cc:	4943      	ldr	r1, [pc, #268]	; (80098dc <_ZN6Config4initEv+0x3f4>)
 80097ce:	4618      	mov	r0, r3
 80097d0:	f006 fc7a 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80097d4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80097d8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80097dc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80097e0:	4611      	mov	r1, r2
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	f001 fa9f 	bl	800ad26 <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
 80097e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7ff fe05 	bl	80093fc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 80097f2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80097f6:	4618      	mov	r0, r3
 80097f8:	f006 fa0c 	bl	800fc14 <_ZNSaIcED1Ev>
 80097fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009800:	4618      	mov	r0, r3
 8009802:	f006 fa07 	bl	800fc14 <_ZNSaIcED1Ev>
 8009806:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800980a:	4618      	mov	r0, r3
 800980c:	f006 fa02 	bl	800fc14 <_ZNSaIcED1Ev>
 8009810:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009814:	4618      	mov	r0, r3
 8009816:	f006 f9fd 	bl	800fc14 <_ZNSaIcED1Ev>
 800981a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800981e:	4618      	mov	r0, r3
 8009820:	f006 f9f8 	bl	800fc14 <_ZNSaIcED1Ev>
 8009824:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009828:	4618      	mov	r0, r3
 800982a:	f006 f9f3 	bl	800fc14 <_ZNSaIcED1Ev>
 800982e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009832:	4618      	mov	r0, r3
 8009834:	f006 f9ee 	bl	800fc14 <_ZNSaIcED1Ev>
 8009838:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800983c:	4618      	mov	r0, r3
 800983e:	f006 f9e9 	bl	800fc14 <_ZNSaIcED1Ev>
    setDigitalInputNames({"DI1", "DI2", "DI3", "DI4", "DI5", "DI6", "DI7", "DI8", "DI9", "DI10", "DI11", "DI12", "DI13", "DI14", "DI15", "DI16"});
 8009842:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8009846:	4618      	mov	r0, r3
 8009848:	f006 f9e2 	bl	800fc10 <_ZNSaIcEC1Ev>
 800984c:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8009850:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009854:	4922      	ldr	r1, [pc, #136]	; (80098e0 <_ZN6Config4initEv+0x3f8>)
 8009856:	4618      	mov	r0, r3
 8009858:	f006 fc36 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800985c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8009860:	4618      	mov	r0, r3
 8009862:	f006 f9d5 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009866:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 800986a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800986e:	3318      	adds	r3, #24
 8009870:	491c      	ldr	r1, [pc, #112]	; (80098e4 <_ZN6Config4initEv+0x3fc>)
 8009872:	4618      	mov	r0, r3
 8009874:	f006 fc28 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009878:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800987c:	4618      	mov	r0, r3
 800987e:	f006 f9c7 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009882:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8009886:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800988a:	3330      	adds	r3, #48	; 0x30
 800988c:	4916      	ldr	r1, [pc, #88]	; (80098e8 <_ZN6Config4initEv+0x400>)
 800988e:	4618      	mov	r0, r3
 8009890:	f006 fc1a 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009894:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8009898:	4618      	mov	r0, r3
 800989a:	f006 f9b9 	bl	800fc10 <_ZNSaIcEC1Ev>
 800989e:	e025      	b.n	80098ec <_ZN6Config4initEv+0x404>
 80098a0:	08014188 	.word	0x08014188
 80098a4:	0801418c 	.word	0x0801418c
 80098a8:	08014190 	.word	0x08014190
 80098ac:	08014194 	.word	0x08014194
 80098b0:	08014198 	.word	0x08014198
 80098b4:	08014090 	.word	0x08014090
 80098b8:	08014098 	.word	0x08014098
 80098bc:	080140a0 	.word	0x080140a0
 80098c0:	080140ac 	.word	0x080140ac
 80098c4:	080140b4 	.word	0x080140b4
 80098c8:	080140bc 	.word	0x080140bc
 80098cc:	080140c4 	.word	0x080140c4
 80098d0:	080140cc 	.word	0x080140cc
 80098d4:	080140d4 	.word	0x080140d4
 80098d8:	080140dc 	.word	0x080140dc
 80098dc:	080140e4 	.word	0x080140e4
 80098e0:	080140ec 	.word	0x080140ec
 80098e4:	080140f0 	.word	0x080140f0
 80098e8:	080140f4 	.word	0x080140f4
 80098ec:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 80098f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80098f4:	3348      	adds	r3, #72	; 0x48
 80098f6:	49dd      	ldr	r1, [pc, #884]	; (8009c6c <_ZN6Config4initEv+0x784>)
 80098f8:	4618      	mov	r0, r3
 80098fa:	f006 fbe5 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80098fe:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8009902:	4618      	mov	r0, r3
 8009904:	f006 f984 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009908:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800990c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009910:	3360      	adds	r3, #96	; 0x60
 8009912:	49d7      	ldr	r1, [pc, #860]	; (8009c70 <_ZN6Config4initEv+0x788>)
 8009914:	4618      	mov	r0, r3
 8009916:	f006 fbd7 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800991a:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800991e:	4618      	mov	r0, r3
 8009920:	f006 f976 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009924:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8009928:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800992c:	3378      	adds	r3, #120	; 0x78
 800992e:	49d1      	ldr	r1, [pc, #836]	; (8009c74 <_ZN6Config4initEv+0x78c>)
 8009930:	4618      	mov	r0, r3
 8009932:	f006 fbc9 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009936:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800993a:	4618      	mov	r0, r3
 800993c:	f006 f968 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009940:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8009944:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009948:	3390      	adds	r3, #144	; 0x90
 800994a:	49cb      	ldr	r1, [pc, #812]	; (8009c78 <_ZN6Config4initEv+0x790>)
 800994c:	4618      	mov	r0, r3
 800994e:	f006 fbbb 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009952:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8009956:	4618      	mov	r0, r3
 8009958:	f006 f95a 	bl	800fc10 <_ZNSaIcEC1Ev>
 800995c:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8009960:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009964:	33a8      	adds	r3, #168	; 0xa8
 8009966:	49c5      	ldr	r1, [pc, #788]	; (8009c7c <_ZN6Config4initEv+0x794>)
 8009968:	4618      	mov	r0, r3
 800996a:	f006 fbad 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800996e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8009972:	4618      	mov	r0, r3
 8009974:	f006 f94c 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009978:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800997c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009980:	33c0      	adds	r3, #192	; 0xc0
 8009982:	49bf      	ldr	r1, [pc, #764]	; (8009c80 <_ZN6Config4initEv+0x798>)
 8009984:	4618      	mov	r0, r3
 8009986:	f006 fb9f 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800998a:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800998e:	4618      	mov	r0, r3
 8009990:	f006 f93e 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009994:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8009998:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800999c:	33d8      	adds	r3, #216	; 0xd8
 800999e:	49b9      	ldr	r1, [pc, #740]	; (8009c84 <_ZN6Config4initEv+0x79c>)
 80099a0:	4618      	mov	r0, r3
 80099a2:	f006 fb91 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099a6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80099aa:	4618      	mov	r0, r3
 80099ac:	f006 f930 	bl	800fc10 <_ZNSaIcEC1Ev>
 80099b0:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80099b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80099b8:	33f0      	adds	r3, #240	; 0xf0
 80099ba:	49b3      	ldr	r1, [pc, #716]	; (8009c88 <_ZN6Config4initEv+0x7a0>)
 80099bc:	4618      	mov	r0, r3
 80099be:	f006 fb83 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099c2:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80099c6:	4618      	mov	r0, r3
 80099c8:	f006 f922 	bl	800fc10 <_ZNSaIcEC1Ev>
 80099cc:	f507 7245 	add.w	r2, r7, #788	; 0x314
 80099d0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80099d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80099d8:	49ac      	ldr	r1, [pc, #688]	; (8009c8c <_ZN6Config4initEv+0x7a4>)
 80099da:	4618      	mov	r0, r3
 80099dc:	f006 fb74 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099e0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80099e4:	4618      	mov	r0, r3
 80099e6:	f006 f913 	bl	800fc10 <_ZNSaIcEC1Ev>
 80099ea:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80099ee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80099f2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80099f6:	49a6      	ldr	r1, [pc, #664]	; (8009c90 <_ZN6Config4initEv+0x7a8>)
 80099f8:	4618      	mov	r0, r3
 80099fa:	f006 fb65 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099fe:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8009a02:	4618      	mov	r0, r3
 8009a04:	f006 f904 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009a08:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8009a0c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009a10:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009a14:	499f      	ldr	r1, [pc, #636]	; (8009c94 <_ZN6Config4initEv+0x7ac>)
 8009a16:	4618      	mov	r0, r3
 8009a18:	f006 fb56 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009a1c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009a20:	4618      	mov	r0, r3
 8009a22:	f006 f8f5 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009a26:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8009a2a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009a2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a32:	4999      	ldr	r1, [pc, #612]	; (8009c98 <_ZN6Config4initEv+0x7b0>)
 8009a34:	4618      	mov	r0, r3
 8009a36:	f006 fb47 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009a3a:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f006 f8e6 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009a44:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8009a48:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009a4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009a50:	4992      	ldr	r1, [pc, #584]	; (8009c9c <_ZN6Config4initEv+0x7b4>)
 8009a52:	4618      	mov	r0, r3
 8009a54:	f006 fb38 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009a58:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8009a5c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009a60:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009a64:	4611      	mov	r1, r2
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	f001 f96c 	bl	800ad44 <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>
 8009a6c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7ff fcee 	bl	8009452 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
 8009a76:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f006 f8ca 	bl	800fc14 <_ZNSaIcED1Ev>
 8009a80:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009a84:	4618      	mov	r0, r3
 8009a86:	f006 f8c5 	bl	800fc14 <_ZNSaIcED1Ev>
 8009a8a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f006 f8c0 	bl	800fc14 <_ZNSaIcED1Ev>
 8009a94:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f006 f8bb 	bl	800fc14 <_ZNSaIcED1Ev>
 8009a9e:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f006 f8b6 	bl	800fc14 <_ZNSaIcED1Ev>
 8009aa8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8009aac:	4618      	mov	r0, r3
 8009aae:	f006 f8b1 	bl	800fc14 <_ZNSaIcED1Ev>
 8009ab2:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f006 f8ac 	bl	800fc14 <_ZNSaIcED1Ev>
 8009abc:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f006 f8a7 	bl	800fc14 <_ZNSaIcED1Ev>
 8009ac6:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8009aca:	4618      	mov	r0, r3
 8009acc:	f006 f8a2 	bl	800fc14 <_ZNSaIcED1Ev>
 8009ad0:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f006 f89d 	bl	800fc14 <_ZNSaIcED1Ev>
 8009ada:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f006 f898 	bl	800fc14 <_ZNSaIcED1Ev>
 8009ae4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f006 f893 	bl	800fc14 <_ZNSaIcED1Ev>
 8009aee:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8009af2:	4618      	mov	r0, r3
 8009af4:	f006 f88e 	bl	800fc14 <_ZNSaIcED1Ev>
 8009af8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8009afc:	4618      	mov	r0, r3
 8009afe:	f006 f889 	bl	800fc14 <_ZNSaIcED1Ev>
 8009b02:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8009b06:	4618      	mov	r0, r3
 8009b08:	f006 f884 	bl	800fc14 <_ZNSaIcED1Ev>
 8009b0c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8009b10:	4618      	mov	r0, r3
 8009b12:	f006 f87f 	bl	800fc14 <_ZNSaIcED1Ev>
    setDigitalOutputNames({"Relay1", "Relay2", "Relay3", "Relay4", "Relay5", "Relay6", "Relay7", "Relay8",});
 8009b16:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f006 f878 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009b20:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8009b24:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009b28:	495d      	ldr	r1, [pc, #372]	; (8009ca0 <_ZN6Config4initEv+0x7b8>)
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f006 facc 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b30:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8009b34:	4618      	mov	r0, r3
 8009b36:	f006 f86b 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009b3a:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8009b3e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009b42:	3318      	adds	r3, #24
 8009b44:	4957      	ldr	r1, [pc, #348]	; (8009ca4 <_ZN6Config4initEv+0x7bc>)
 8009b46:	4618      	mov	r0, r3
 8009b48:	f006 fabe 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b4c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f006 f85d 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009b56:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8009b5a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009b5e:	3330      	adds	r3, #48	; 0x30
 8009b60:	4951      	ldr	r1, [pc, #324]	; (8009ca8 <_ZN6Config4initEv+0x7c0>)
 8009b62:	4618      	mov	r0, r3
 8009b64:	f006 fab0 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b68:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f006 f84f 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009b72:	f507 727d 	add.w	r2, r7, #1012	; 0x3f4
 8009b76:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009b7a:	3348      	adds	r3, #72	; 0x48
 8009b7c:	494b      	ldr	r1, [pc, #300]	; (8009cac <_ZN6Config4initEv+0x7c4>)
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f006 faa2 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b84:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f006 f841 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009b8e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8009b92:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009b96:	3360      	adds	r3, #96	; 0x60
 8009b98:	4945      	ldr	r1, [pc, #276]	; (8009cb0 <_ZN6Config4initEv+0x7c8>)
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f006 fa94 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009ba0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f006 f833 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009baa:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8009bae:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009bb2:	3378      	adds	r3, #120	; 0x78
 8009bb4:	493f      	ldr	r1, [pc, #252]	; (8009cb4 <_ZN6Config4initEv+0x7cc>)
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f006 fa86 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009bbc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f006 f825 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009bc6:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8009bca:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009bce:	3390      	adds	r3, #144	; 0x90
 8009bd0:	4939      	ldr	r1, [pc, #228]	; (8009cb8 <_ZN6Config4initEv+0x7d0>)
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f006 fa78 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009bd8:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f006 f817 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009be2:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8009be6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009bea:	33a8      	adds	r3, #168	; 0xa8
 8009bec:	4933      	ldr	r1, [pc, #204]	; (8009cbc <_ZN6Config4initEv+0x7d4>)
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f006 fa6a 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009bf4:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8009bf8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8009bfc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8009c00:	4611      	mov	r1, r2
 8009c02:	6818      	ldr	r0, [r3, #0]
 8009c04:	f001 f8ae 	bl	800ad64 <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
 8009c08:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7ff fbf5 	bl	80093fc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 8009c12:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8009c16:	4618      	mov	r0, r3
 8009c18:	f005 fffc 	bl	800fc14 <_ZNSaIcED1Ev>
 8009c1c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8009c20:	4618      	mov	r0, r3
 8009c22:	f005 fff7 	bl	800fc14 <_ZNSaIcED1Ev>
 8009c26:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f005 fff2 	bl	800fc14 <_ZNSaIcED1Ev>
 8009c30:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8009c34:	4618      	mov	r0, r3
 8009c36:	f005 ffed 	bl	800fc14 <_ZNSaIcED1Ev>
 8009c3a:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f005 ffe8 	bl	800fc14 <_ZNSaIcED1Ev>
 8009c44:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f005 ffe3 	bl	800fc14 <_ZNSaIcED1Ev>
 8009c4e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8009c52:	4618      	mov	r0, r3
 8009c54:	f005 ffde 	bl	800fc14 <_ZNSaIcED1Ev>
 8009c58:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f005 ffd9 	bl	800fc14 <_ZNSaIcED1Ev>

}
 8009c62:	bf00      	nop
 8009c64:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	080140f8 	.word	0x080140f8
 8009c70:	080140fc 	.word	0x080140fc
 8009c74:	08014100 	.word	0x08014100
 8009c78:	08014104 	.word	0x08014104
 8009c7c:	08014108 	.word	0x08014108
 8009c80:	0801410c 	.word	0x0801410c
 8009c84:	08014110 	.word	0x08014110
 8009c88:	08014118 	.word	0x08014118
 8009c8c:	08014120 	.word	0x08014120
 8009c90:	08014128 	.word	0x08014128
 8009c94:	08014130 	.word	0x08014130
 8009c98:	08014138 	.word	0x08014138
 8009c9c:	08014140 	.word	0x08014140
 8009ca0:	08014148 	.word	0x08014148
 8009ca4:	08014150 	.word	0x08014150
 8009ca8:	08014158 	.word	0x08014158
 8009cac:	08014160 	.word	0x08014160
 8009cb0:	08014168 	.word	0x08014168
 8009cb4:	08014170 	.word	0x08014170
 8009cb8:	08014178 	.word	0x08014178
 8009cbc:	08014180 	.word	0x08014180

08009cc0 <_ZN6Config19getDigitalInputNameB5cxx11Ei>:

std::string Config::getAnalogInputName(int index){
	return analog_input_names[index];
}

std::string Config::getDigitalInputName(int index){
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
	return digital_input_names[index];
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f001 f863 	bl	800ada2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f006 f9bd 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <_ZN6Config20getDigitalOutputNameB5cxx11Ei>:

std::string Config::getDigitalOutputName(int index){
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	607a      	str	r2, [r7, #4]
	return digital_output_names[index];
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	4611      	mov	r1, r2
 8009d04:	4618      	mov	r0, r3
 8009d06:	f001 f83d 	bl	800ad84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f006 f9a6 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <_ZN6Config14initmqttConfigEv>:

void Config::initmqttConfig() {
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b098      	sub	sp, #96	; 0x60
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
    uint8_t mac[6];
    getSHAR(mac);
 8009d24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009d28:	2206      	movs	r2, #6
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009d30:	f7f8 fd38 	bl	80027a4 <WIZCHIP_READ_BUF>
    char macString[18] = {0}; // Initialize macString with zeros
 8009d34:	2300      	movs	r3, #0
 8009d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	605a      	str	r2, [r3, #4]
 8009d42:	609a      	str	r2, [r3, #8]
 8009d44:	819a      	strh	r2, [r3, #12]
    for (int i = 0; i < 6; ++i) {
 8009d46:	2300      	movs	r3, #0
 8009d48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d4a:	e026      	b.n	8009d9a <_ZN6Config14initmqttConfigEv+0x7e>
        if (i > 0) {
 8009d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	dd0e      	ble.n	8009d70 <_ZN6Config14initmqttConfigEv+0x54>
            strcat(macString, ":"); // Add ':' between bytes except for the first one
 8009d52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7f6 fa9a 	bl	8000290 <strlen>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009d64:	4413      	add	r3, r2
 8009d66:	492c      	ldr	r1, [pc, #176]	; (8009e18 <_ZN6Config14initmqttConfigEv+0xfc>)
 8009d68:	461a      	mov	r2, r3
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	8013      	strh	r3, [r2, #0]
        }
        sprintf(macString + strlen(macString), "%02X", mac[i]); // Append two characters per byte
 8009d70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7f6 fa8b 	bl	8000290 <strlen>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009d80:	1898      	adds	r0, r3, r2
 8009d82:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d88:	4413      	add	r3, r2
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	4923      	ldr	r1, [pc, #140]	; (8009e1c <_ZN6Config14initmqttConfigEv+0x100>)
 8009d90:	f007 f9be 	bl	8011110 <siprintf>
    for (int i = 0; i < 6; ++i) {
 8009d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d96:	3301      	adds	r3, #1
 8009d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d9c:	2b05      	cmp	r3, #5
 8009d9e:	ddd5      	ble.n	8009d4c <_ZN6Config14initmqttConfigEv+0x30>
    }

     setSHAR(mac); // Commented out because it seems unnecessary here
 8009da0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009da4:	2206      	movs	r2, #6
 8009da6:	4619      	mov	r1, r3
 8009da8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009dac:	f7f8 fd5a 	bl	8002864 <WIZCHIP_WRITE_BUF>
    std::string clientID = std::string(macString);
 8009db0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009db4:	4618      	mov	r0, r3
 8009db6:	f005 ff2b 	bl	800fc10 <_ZNSaIcEC1Ev>
 8009dba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009dbe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f006 f97e 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009dcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f005 ff1f 	bl	800fc14 <_ZNSaIcED1Ev>
    std::string data = "data/" + clientID;
 8009dd6:	f107 030c 	add.w	r3, r7, #12
 8009dda:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009dde:	4910      	ldr	r1, [pc, #64]	; (8009e20 <_ZN6Config14initmqttConfigEv+0x104>)
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 ffed 	bl	800adc0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>

    // Set MQTT client ID and topic to subscribe
    setClientId(clientID);
 8009de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 ff4f 	bl	800ac90 <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    setTopicSubscribe(data);
 8009df2:	f107 030c 	add.w	r3, r7, #12
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 ff67 	bl	800accc <_ZN6Config17setTopicSubscribeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
}
 8009dfe:	f107 030c 	add.w	r3, r7, #12
 8009e02:	4618      	mov	r0, r3
 8009e04:	f005 ffe0 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f005 ffdb 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009e12:	3760      	adds	r7, #96	; 0x60
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	0801419c 	.word	0x0801419c
 8009e1c:	080141a0 	.word	0x080141a0
 8009e20:	080141a8 	.word	0x080141a8

08009e24 <_Z15createJsonArrayPKhj>:


cJSON *createJsonArray(const uint8_t arr[], size_t len) {
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
       cJSON *jsonArray = cJSON_CreateArray();
 8009e2e:	f7fc fc01 	bl	8006634 <cJSON_CreateArray>
 8009e32:	60b8      	str	r0, [r7, #8]
       for (size_t i = 0; i < len; ++i) {
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	e014      	b.n	8009e64 <_Z15createJsonArrayPKhj+0x40>
           cJSON_AddItemToArray(jsonArray, cJSON_CreateNumber(arr[i]));
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f6 fb6e 	bl	8000524 <__aeabi_ui2d>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	ec43 2b10 	vmov	d0, r2, r3
 8009e50:	f7fc fb82 	bl	8006558 <cJSON_CreateNumber>
 8009e54:	4603      	mov	r3, r0
 8009e56:	4619      	mov	r1, r3
 8009e58:	68b8      	ldr	r0, [r7, #8]
 8009e5a:	f7fc fab9 	bl	80063d0 <cJSON_AddItemToArray>
       for (size_t i = 0; i < len; ++i) {
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3301      	adds	r3, #1
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d3e6      	bcc.n	8009e3a <_Z15createJsonArrayPKhj+0x16>
       }
       return jsonArray;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
   }
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <_ZN6Config11getInfoListEv>:


char* Config::getInfoList() {
 8009e78:	b590      	push	{r4, r7, lr}
 8009e7a:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009e84:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009e88:	6018      	str	r0, [r3, #0]
    cJSON *root = cJSON_CreateObject();
 8009e8a:	f7fc fbe7 	bl	800665c <cJSON_CreateObject>
 8009e8e:	f8c7 0358 	str.w	r0, [r7, #856]	; 0x358


    if (root == NULL) {
 8009e92:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <_ZN6Config11getInfoListEv+0x26>
        return "";
 8009e9a:	4ca3      	ldr	r4, [pc, #652]	; (800a128 <_ZN6Config11getInfoListEv+0x2b0>)
 8009e9c:	e1e6      	b.n	800a26c <_ZN6Config11getInfoListEv+0x3f4>
    }

    // Existing configurations
    cJSON_AddItemToObject(root, "ip", createJsonArray(ip.data(), ip.size()));
 8009e9e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009ea2:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3306      	adds	r3, #6
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff f88a 	bl	8008fc4 <_ZNSt5arrayIhLj4EE4dataEv>
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009eb6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3306      	adds	r3, #6
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f000 ffbe 	bl	800ae40 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f7ff ffab 	bl	8009e24 <_Z15createJsonArrayPKhj>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4996      	ldr	r1, [pc, #600]	; (800a12c <_ZN6Config11getInfoListEv+0x2b4>)
 8009ed4:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8009ed8:	f7fc fae8 	bl	80064ac <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "gateway", createJsonArray(gateway.data(), gateway.size()));
 8009edc:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009ee0:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	330a      	adds	r3, #10
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7ff f86b 	bl	8008fc4 <_ZNSt5arrayIhLj4EE4dataEv>
 8009eee:	4604      	mov	r4, r0
 8009ef0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009ef4:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	330a      	adds	r3, #10
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 ff9f 	bl	800ae40 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8009f02:	4603      	mov	r3, r0
 8009f04:	4619      	mov	r1, r3
 8009f06:	4620      	mov	r0, r4
 8009f08:	f7ff ff8c 	bl	8009e24 <_Z15createJsonArrayPKhj>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	461a      	mov	r2, r3
 8009f10:	4987      	ldr	r1, [pc, #540]	; (800a130 <_ZN6Config11getInfoListEv+0x2b8>)
 8009f12:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8009f16:	f7fc fac9 	bl	80064ac <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "subnet", createJsonArray(subnet.data(), subnet.size()));
 8009f1a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009f1e:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	330e      	adds	r3, #14
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff f84c 	bl	8008fc4 <_ZNSt5arrayIhLj4EE4dataEv>
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009f32:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	330e      	adds	r3, #14
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 ff80 	bl	800ae40 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8009f40:	4603      	mov	r3, r0
 8009f42:	4619      	mov	r1, r3
 8009f44:	4620      	mov	r0, r4
 8009f46:	f7ff ff6d 	bl	8009e24 <_Z15createJsonArrayPKhj>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4979      	ldr	r1, [pc, #484]	; (800a134 <_ZN6Config11getInfoListEv+0x2bc>)
 8009f50:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8009f54:	f7fc faaa 	bl	80064ac <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "dns", createJsonArray(dns.data(), dns.size()));
 8009f58:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009f5c:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3312      	adds	r3, #18
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7ff f82d 	bl	8008fc4 <_ZNSt5arrayIhLj4EE4dataEv>
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009f70:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3312      	adds	r3, #18
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 ff61 	bl	800ae40 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	4619      	mov	r1, r3
 8009f82:	4620      	mov	r0, r4
 8009f84:	f7ff ff4e 	bl	8009e24 <_Z15createJsonArrayPKhj>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	496a      	ldr	r1, [pc, #424]	; (800a138 <_ZN6Config11getInfoListEv+0x2c0>)
 8009f8e:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8009f92:	f7fc fa8b 	bl	80064ac <cJSON_AddItemToObject>


    cJSON_AddItemToObject(root, "brokerIp", createJsonArray(broker_ip.data(), dns.size()));
 8009f96:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009f9a:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7ff f80f 	bl	8008fc4 <_ZNSt5arrayIhLj4EE4dataEv>
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009fac:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3312      	adds	r3, #18
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 ff43 	bl	800ae40 <_ZNKSt5arrayIhLj4EE4sizeEv>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f7ff ff30 	bl	8009e24 <_Z15createJsonArrayPKhj>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	495c      	ldr	r1, [pc, #368]	; (800a13c <_ZN6Config11getInfoListEv+0x2c4>)
 8009fca:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8009fce:	f7fc fa6d 	bl	80064ac <cJSON_AddItemToObject>

    // Serialize Analog Input Names
    auto analogInputNames = getAnalogInputNames();
 8009fd2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009fd6:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8009fda:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009fde:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8009fe2:	6819      	ldr	r1, [r3, #0]
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	f000 fd73 	bl	800aad0 <_ZN6Config19getAnalogInputNamesB5cxx11Ev>
    cJSON *analogInputsArray = cJSON_CreateArray();
 8009fea:	f7fc fb23 	bl	8006634 <cJSON_CreateArray>
 8009fee:	f8c7 0354 	str.w	r0, [r7, #852]	; 0x354
    for (const auto& name : analogInputNames) {
 8009ff2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009ff6:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8009ffa:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 8009ffe:	f000 ff2a 	bl	800ae56 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE5beginEv>
 800a002:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364
 800a006:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 800a00a:	f000 ff30 	bl	800ae6e <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE3endEv>
 800a00e:	f8c7 034c 	str.w	r0, [r7, #844]	; 0x34c
 800a012:	e016      	b.n	800a042 <_ZN6Config11getInfoListEv+0x1ca>
 800a014:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800a018:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
        cJSON_AddItemToArray(analogInputsArray, cJSON_CreateString(name.c_str()));
 800a01c:	f8d7 0324 	ldr.w	r0, [r7, #804]	; 0x324
 800a020:	f005 fff6 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800a024:	4603      	mov	r3, r0
 800a026:	4618      	mov	r0, r3
 800a028:	f7fc fade 	bl	80065e8 <cJSON_CreateString>
 800a02c:	4603      	mov	r3, r0
 800a02e:	4619      	mov	r1, r3
 800a030:	f8d7 0354 	ldr.w	r0, [r7, #852]	; 0x354
 800a034:	f7fc f9cc 	bl	80063d0 <cJSON_AddItemToArray>
    for (const auto& name : analogInputNames) {
 800a038:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800a03c:	3318      	adds	r3, #24
 800a03e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800a042:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 800a046:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d1e2      	bne.n	800a014 <_ZN6Config11getInfoListEv+0x19c>
    }
   cJSON_AddItemToObject(root, "ai", analogInputsArray);
 800a04e:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 800a052:	493b      	ldr	r1, [pc, #236]	; (800a140 <_ZN6Config11getInfoListEv+0x2c8>)
 800a054:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 800a058:	f7fc fa28 	bl	80064ac <cJSON_AddItemToObject>

    // Serialize Digital Input Names
    auto digitalInputNames = getDigitalInputNames();
 800a05c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800a060:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 800a064:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800a068:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800a06c:	6819      	ldr	r1, [r3, #0]
 800a06e:	4610      	mov	r0, r2
 800a070:	f000 fd55 	bl	800ab1e <_ZN6Config20getDigitalInputNamesB5cxx11Ev>
    cJSON *digitalInputsArray = cJSON_CreateArray();
 800a074:	f7fc fade 	bl	8006634 <cJSON_CreateArray>
 800a078:	f8c7 0348 	str.w	r0, [r7, #840]	; 0x348
    for (const auto& name : digitalInputNames) {
 800a07c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a080:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800a084:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 800a088:	f000 fefe 	bl	800ae88 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE5beginEv>
 800a08c:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 800a090:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 800a094:	f000 ff04 	bl	800aea0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE3endEv>
 800a098:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 800a09c:	e016      	b.n	800a0cc <_ZN6Config11getInfoListEv+0x254>
 800a09e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800a0a2:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
        cJSON_AddItemToArray(digitalInputsArray, cJSON_CreateString(name.c_str()));
 800a0a6:	f8d7 0328 	ldr.w	r0, [r7, #808]	; 0x328
 800a0aa:	f005 ffb1 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fc fa99 	bl	80065e8 <cJSON_CreateString>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	f8d7 0348 	ldr.w	r0, [r7, #840]	; 0x348
 800a0be:	f7fc f987 	bl	80063d0 <cJSON_AddItemToArray>
    for (const auto& name : digitalInputNames) {
 800a0c2:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800a0c6:	3318      	adds	r3, #24
 800a0c8:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 800a0cc:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 800a0d0:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d1e2      	bne.n	800a09e <_ZN6Config11getInfoListEv+0x226>
    }
    cJSON_AddItemToObject(root, "di", digitalInputsArray);
 800a0d8:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 800a0dc:	4919      	ldr	r1, [pc, #100]	; (800a144 <_ZN6Config11getInfoListEv+0x2cc>)
 800a0de:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 800a0e2:	f7fc f9e3 	bl	80064ac <cJSON_AddItemToObject>

    // Serialize Digital Output Names
    auto digitalOutputNames = getDigitalOutputNames();
 800a0e6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800a0ea:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800a0ee:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800a0f2:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800a0f6:	6819      	ldr	r1, [r3, #0]
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	f000 fd20 	bl	800ab3e <_ZN6Config21getDigitalOutputNamesB5cxx11Ev>
    cJSON *digitalOutputsArray = cJSON_CreateArray();
 800a0fe:	f7fc fa99 	bl	8006634 <cJSON_CreateArray>
 800a102:	f8c7 033c 	str.w	r0, [r7, #828]	; 0x33c
    for (const auto& name : digitalOutputNames) {
 800a106:	f107 030c 	add.w	r3, r7, #12
 800a10a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800a10e:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 800a112:	f000 fea0 	bl	800ae56 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE5beginEv>
 800a116:	f8c7 035c 	str.w	r0, [r7, #860]	; 0x35c
 800a11a:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 800a11e:	f000 fea6 	bl	800ae6e <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE3endEv>
 800a122:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
 800a126:	e026      	b.n	800a176 <_ZN6Config11getInfoListEv+0x2fe>
 800a128:	080141b0 	.word	0x080141b0
 800a12c:	080141b4 	.word	0x080141b4
 800a130:	080141b8 	.word	0x080141b8
 800a134:	080141c0 	.word	0x080141c0
 800a138:	080141c8 	.word	0x080141c8
 800a13c:	080141cc 	.word	0x080141cc
 800a140:	080141d8 	.word	0x080141d8
 800a144:	080141dc 	.word	0x080141dc
 800a148:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800a14c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
        cJSON_AddItemToArray(digitalOutputsArray, cJSON_CreateString(name.c_str()));
 800a150:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800a154:	f005 ff5c 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800a158:	4603      	mov	r3, r0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fc fa44 	bl	80065e8 <cJSON_CreateString>
 800a160:	4603      	mov	r3, r0
 800a162:	4619      	mov	r1, r3
 800a164:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 800a168:	f7fc f932 	bl	80063d0 <cJSON_AddItemToArray>
    for (const auto& name : digitalOutputNames) {
 800a16c:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800a170:	3318      	adds	r3, #24
 800a172:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800a176:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 800a17a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800a17e:	429a      	cmp	r2, r3
 800a180:	d1e2      	bne.n	800a148 <_ZN6Config11getInfoListEv+0x2d0>
    }
    cJSON_AddItemToObject(root, "type", cJSON_CreateString("info"));
 800a182:	483d      	ldr	r0, [pc, #244]	; (800a278 <_ZN6Config11getInfoListEv+0x400>)
 800a184:	f7fc fa30 	bl	80065e8 <cJSON_CreateString>
 800a188:	4603      	mov	r3, r0
 800a18a:	461a      	mov	r2, r3
 800a18c:	493b      	ldr	r1, [pc, #236]	; (800a27c <_ZN6Config11getInfoListEv+0x404>)
 800a18e:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 800a192:	f7fc f98b 	bl	80064ac <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "relay", digitalOutputsArray);
 800a196:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 800a19a:	4939      	ldr	r1, [pc, #228]	; (800a280 <_ZN6Config11getInfoListEv+0x408>)
 800a19c:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 800a1a0:	f7fc f984 	bl	80064ac <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "mac", cJSON_CreateString(getClientId().c_str()));
 800a1a4:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 800a1a8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800a1ac:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800a1b0:	6819      	ldr	r1, [r3, #0]
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	f000 fc38 	bl	800aa28 <_ZNK6Config11getClientIdB5cxx11Ev>
 800a1b8:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f005 ff27 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fc fa0f 	bl	80065e8 <cJSON_CreateString>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	492d      	ldr	r1, [pc, #180]	; (800a284 <_ZN6Config11getInfoListEv+0x40c>)
 800a1d0:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 800a1d4:	f7fc f96a 	bl	80064ac <cJSON_AddItemToObject>
 800a1d8:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f005 fdf3 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    cJSON_AddItemToObject(root, "port", cJSON_CreateNumber(getBrokerPort()));
 800a1e2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800a1e6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800a1ea:	6818      	ldr	r0, [r3, #0]
 800a1ec:	f000 fb75 	bl	800a8da <_ZNK6Config13getBrokerPortEv>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7f6 f996 	bl	8000524 <__aeabi_ui2d>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	ec43 2b10 	vmov	d0, r2, r3
 800a200:	f7fc f9aa 	bl	8006558 <cJSON_CreateNumber>
 800a204:	4603      	mov	r3, r0
 800a206:	461a      	mov	r2, r3
 800a208:	491f      	ldr	r1, [pc, #124]	; (800a288 <_ZN6Config11getInfoListEv+0x410>)
 800a20a:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 800a20e:	f7fc f94d 	bl	80064ac <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "net-status", cJSON_CreateBool(getDHCPEnabled()));
 800a212:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800a216:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	f000 fbe9 	bl	800a9f2 <_ZNK6Config14getDHCPEnabledEv>
 800a220:	4603      	mov	r3, r0
 800a222:	4618      	mov	r0, r3
 800a224:	f7fc f97c 	bl	8006520 <cJSON_CreateBool>
 800a228:	4603      	mov	r3, r0
 800a22a:	461a      	mov	r2, r3
 800a22c:	4917      	ldr	r1, [pc, #92]	; (800a28c <_ZN6Config11getInfoListEv+0x414>)
 800a22e:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 800a232:	f7fc f93b 	bl	80064ac <cJSON_AddItemToObject>

    // Serialize JSON to string
    char *serializedData = cJSON_Print(root);
 800a236:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 800a23a:	f7fb faad 	bl	8005798 <cJSON_Print>
 800a23e:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
    if (serializedData != NULL) {

    }

    cJSON_Delete(root);
 800a242:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 800a246:	f7fa fa09 	bl	800465c <cJSON_Delete>
    return serializedData;
 800a24a:	f8d7 4330 	ldr.w	r4, [r7, #816]	; 0x330

}
 800a24e:	f107 030c 	add.w	r3, r7, #12
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff f8d2 	bl	80093fc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800a258:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7ff f8f8 	bl	8009452 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
 800a262:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a266:	4618      	mov	r0, r3
 800a268:	f7ff f8c8 	bl	80093fc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800a26c:	4623      	mov	r3, r4
 800a26e:	4618      	mov	r0, r3
 800a270:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 800a274:	46bd      	mov	sp, r7
 800a276:	bd90      	pop	{r4, r7, pc}
 800a278:	080141e0 	.word	0x080141e0
 800a27c:	080141e8 	.word	0x080141e8
 800a280:	080141f0 	.word	0x080141f0
 800a284:	080141f8 	.word	0x080141f8
 800a288:	080141fc 	.word	0x080141fc
 800a28c:	08014204 	.word	0x08014204

0800a290 <_ZN6Config16extractIPAddressEP5cJSONPKc>:

std::array<uint8_t, 4> Config::extractIPAddress(cJSON* parent, const char* name) {
 800a290:	b590      	push	{r4, r7, lr}
 800a292:	b08b      	sub	sp, #44	; 0x2c
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
    std::array<uint8_t, 4> addressArray{};
 800a29c:	2300      	movs	r3, #0
 800a29e:	617b      	str	r3, [r7, #20]
    cJSON* item = cJSON_GetObjectItemCaseSensitive(parent, name);
 800a2a0:	6879      	ldr	r1, [r7, #4]
 800a2a2:	68b8      	ldr	r0, [r7, #8]
 800a2a4:	f7fc f83e 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800a2a8:	6238      	str	r0, [r7, #32]
    if (cJSON_IsArray(item)) {
 800a2aa:	6a38      	ldr	r0, [r7, #32]
 800a2ac:	f7fc fa47 	bl	800673e <cJSON_IsArray>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	bf14      	ite	ne
 800a2b6:	2301      	movne	r3, #1
 800a2b8:	2300      	moveq	r3, #0
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d024      	beq.n	800a30a <_ZN6Config16extractIPAddressEP5cJSONPKc+0x7a>
        for (int i = 0; i < 4; ++i) {
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c4:	e01e      	b.n	800a304 <_ZN6Config16extractIPAddressEP5cJSONPKc+0x74>
            cJSON* byteItem = cJSON_GetArrayItem(item, i);
 800a2c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2c8:	6a38      	ldr	r0, [r7, #32]
 800a2ca:	f7fb ffcf 	bl	800626c <cJSON_GetArrayItem>
 800a2ce:	61f8      	str	r0, [r7, #28]
            if (cJSON_IsNumber(byteItem)) {
 800a2d0:	69f8      	ldr	r0, [r7, #28]
 800a2d2:	f7fc fa06 	bl	80066e2 <cJSON_IsNumber>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bf14      	ite	ne
 800a2dc:	2301      	movne	r3, #1
 800a2de:	2300      	moveq	r3, #0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00b      	beq.n	800a2fe <_ZN6Config16extractIPAddressEP5cJSONPKc+0x6e>
                addressArray[i] = static_cast<uint8_t>(byteItem->valueint);
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	695c      	ldr	r4, [r3, #20]
 800a2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ec:	f107 0314 	add.w	r3, r7, #20
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 fde2 	bl	800aebc <_ZNSt5arrayIhLj4EEixEj>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	b2e2      	uxtb	r2, r4
 800a2fc:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 4; ++i) {
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	3301      	adds	r3, #1
 800a302:	627b      	str	r3, [r7, #36]	; 0x24
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	2b03      	cmp	r3, #3
 800a308:	dddd      	ble.n	800a2c6 <_ZN6Config16extractIPAddressEP5cJSONPKc+0x36>
            }
        }
    }
    return addressArray;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	2300      	movs	r3, #0
 800a310:	7e3a      	ldrb	r2, [r7, #24]
 800a312:	f362 0307 	bfi	r3, r2, #0, #8
 800a316:	7e7a      	ldrb	r2, [r7, #25]
 800a318:	f362 230f 	bfi	r3, r2, #8, #8
 800a31c:	7eba      	ldrb	r2, [r7, #26]
 800a31e:	f362 4317 	bfi	r3, r2, #16, #8
 800a322:	7efa      	ldrb	r2, [r7, #27]
 800a324:	f362 631f 	bfi	r3, r2, #24, #8
}
 800a328:	4618      	mov	r0, r3
 800a32a:	372c      	adds	r7, #44	; 0x2c
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd90      	pop	{r4, r7, pc}

0800a330 <_ZN6Config18setNetworkSettingsEP5cJSON>:



void Config::setNetworkSettings(cJSON* data) {
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
    cJSON* statusJson = cJSON_GetObjectItemCaseSensitive(data, "status");
 800a33a:	492e      	ldr	r1, [pc, #184]	; (800a3f4 <_ZN6Config18setNetworkSettingsEP5cJSON+0xc4>)
 800a33c:	6838      	ldr	r0, [r7, #0]
 800a33e:	f7fb fff1 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800a342:	61f8      	str	r0, [r7, #28]
    if (cJSON_IsBool(statusJson)) {
 800a344:	69f8      	ldr	r0, [r7, #28]
 800a346:	f7fc f9b4 	bl	80066b2 <cJSON_IsBool>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bf14      	ite	ne
 800a350:	2301      	movne	r3, #1
 800a352:	2300      	moveq	r3, #0
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d047      	beq.n	800a3ea <_ZN6Config18setNetworkSettingsEP5cJSON+0xba>
    	 bool status = cJSON_IsTrue(statusJson) ? true : false;
 800a35a:	69f8      	ldr	r0, [r7, #28]
 800a35c:	f7fc f992 	bl	8006684 <cJSON_IsTrue>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	bf14      	ite	ne
 800a366:	2301      	movne	r3, #1
 800a368:	2300      	moveq	r3, #0
 800a36a:	76fb      	strb	r3, [r7, #27]
       // bool status = cJSON_IsTrue(statusJson);


        if (!status) {
 800a36c:	7efb      	ldrb	r3, [r7, #27]
 800a36e:	f083 0301 	eor.w	r3, r3, #1
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b00      	cmp	r3, #0
 800a376:	d033      	beq.n	800a3e0 <_ZN6Config18setNetworkSettingsEP5cJSON+0xb0>
            setIP(extractIPAddress(data, "ip"));
 800a378:	4a1f      	ldr	r2, [pc, #124]	; (800a3f8 <_ZN6Config18setNetworkSettingsEP5cJSON+0xc8>)
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff ff87 	bl	800a290 <_ZN6Config16extractIPAddressEP5cJSONPKc>
 800a382:	4603      	mov	r3, r0
 800a384:	60bb      	str	r3, [r7, #8]
 800a386:	f107 0308 	add.w	r3, r7, #8
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fc04 	bl	800ab9a <_ZN6Config5setIPERKSt5arrayIhLj4EE>
            setGateway(extractIPAddress(data, "gateway"));
 800a392:	4a1a      	ldr	r2, [pc, #104]	; (800a3fc <_ZN6Config18setNetworkSettingsEP5cJSON+0xcc>)
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff ff7a 	bl	800a290 <_ZN6Config16extractIPAddressEP5cJSONPKc>
 800a39c:	4603      	mov	r3, r0
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	f107 030c 	add.w	r3, r7, #12
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fc07 	bl	800abba <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>
            setSubnet(extractIPAddress(data, "subnet"));
 800a3ac:	4a14      	ldr	r2, [pc, #80]	; (800a400 <_ZN6Config18setNetworkSettingsEP5cJSON+0xd0>)
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff ff6d 	bl	800a290 <_ZN6Config16extractIPAddressEP5cJSONPKc>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	613b      	str	r3, [r7, #16]
 800a3ba:	f107 0310 	add.w	r3, r7, #16
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 fc0a 	bl	800abda <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>
            setDNS(extractIPAddress(data, "dns"));
 800a3c6:	4a0f      	ldr	r2, [pc, #60]	; (800a404 <_ZN6Config18setNetworkSettingsEP5cJSON+0xd4>)
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7ff ff60 	bl	800a290 <_ZN6Config16extractIPAddressEP5cJSONPKc>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	f107 0314 	add.w	r3, r7, #20
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fc0d 	bl	800abfa <_ZN6Config6setDNSERKSt5arrayIhLj4EE>
        }

        setDHCPEnabled(status);
 800a3e0:	7efb      	ldrb	r3, [r7, #27]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fc27 	bl	800ac38 <_ZN6Config14setDHCPEnabledEb>
    }
}
 800a3ea:	bf00      	nop
 800a3ec:	3720      	adds	r7, #32
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	08014210 	.word	0x08014210
 800a3f8:	080141b4 	.word	0x080141b4
 800a3fc:	080141b8 	.word	0x080141b8
 800a400:	080141c0 	.word	0x080141c0
 800a404:	080141c8 	.word	0x080141c8

0800a408 <_ZN6Config13setMQTTBrokerEP5cJSON>:


void Config::setMQTTBroker(cJSON* data) {
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
	if (data == nullptr) return;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d026      	beq.n	800a466 <_ZN6Config13setMQTTBrokerEP5cJSON+0x5e>
	cJSON* numItem = cJSON_GetObjectItemCaseSensitive(data, "port");
 800a418:	4915      	ldr	r1, [pc, #84]	; (800a470 <_ZN6Config13setMQTTBrokerEP5cJSON+0x68>)
 800a41a:	6838      	ldr	r0, [r7, #0]
 800a41c:	f7fb ff82 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800a420:	6178      	str	r0, [r7, #20]
	        if (cJSON_IsNumber(numItem)) {
 800a422:	6978      	ldr	r0, [r7, #20]
 800a424:	f7fc f95d 	bl	80066e2 <cJSON_IsNumber>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	bf14      	ite	ne
 800a42e:	2301      	movne	r3, #1
 800a430:	2300      	moveq	r3, #0
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d017      	beq.n	800a468 <_ZN6Config13setMQTTBrokerEP5cJSON+0x60>
	            int number = numItem->valueint;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	613b      	str	r3, [r7, #16]
	            setBrokerPort(number);
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	b29b      	uxth	r3, r3
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fb99 	bl	800ab7c <_ZN6Config13setBrokerPortEt>
	            setBrokerIP(extractIPAddress(data, "broker_ip"));
 800a44a:	4a0a      	ldr	r2, [pc, #40]	; (800a474 <_ZN6Config13setMQTTBrokerEP5cJSON+0x6c>)
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff ff1e 	bl	800a290 <_ZN6Config16extractIPAddressEP5cJSONPKc>
 800a454:	4603      	mov	r3, r0
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	f107 030c 	add.w	r3, r7, #12
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fb7d 	bl	800ab5e <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>
 800a464:	e000      	b.n	800a468 <_ZN6Config13setMQTTBrokerEP5cJSON+0x60>
	if (data == nullptr) return;
 800a466:	bf00      	nop
	  }

}
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	080141fc 	.word	0x080141fc
 800a474:	08014218 	.word	0x08014218

0800a478 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON>:



void Config::setAnalogInputNamesFromJson(cJSON* jsonData) {
 800a478:	b5b0      	push	{r4, r5, r7, lr}
 800a47a:	b0bc      	sub	sp, #240	; 0xf0
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
    if (jsonData == nullptr) {
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d07e      	beq.n	800a586 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x10e>
        return; // Input is null, handle error as needed
    }

    cJSON* analogInputsJson = cJSON_GetObjectItemCaseSensitive(jsonData, "data");
 800a488:	4942      	ldr	r1, [pc, #264]	; (800a594 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x11c>)
 800a48a:	6838      	ldr	r0, [r7, #0]
 800a48c:	f7fb ff4a 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800a490:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
    if (!cJSON_IsArray(analogInputsJson)) {
 800a494:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800a498:	f7fc f951 	bl	800673e <cJSON_IsArray>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	bf0c      	ite	eq
 800a4a2:	2301      	moveq	r3, #1
 800a4a4:	2300      	movne	r3, #0
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d16e      	bne.n	800a58a <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x112>
        return; // Not an array, handle error as needed
    }

    std::array<std::string, MAX_ANALOG_INPUTS> analogInputs;
 800a4ac:	f107 0308 	add.w	r3, r7, #8
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fe ff8f 	bl	80093d4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>
    size_t index = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    cJSON* analogInputJson;

    // Iterate over the analog input names array
    cJSON_ArrayForEach(analogInputJson, analogInputsJson) {
 800a4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x54>
 800a4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	e000      	b.n	800a4ce <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x56>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a4d2:	e046      	b.n	800a562 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0xea>
        if (cJSON_IsString(analogInputJson) && (analogInputJson->valuestring != NULL)) {
 800a4d4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800a4d8:	f7fc f91a 	bl	8006710 <cJSON_IsString>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d006      	beq.n	800a4f0 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x78>
 800a4e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x78>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e000      	b.n	800a4f2 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x7a>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d030      	beq.n	800a558 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0xe0>
            if (index < MAX_ANALOG_INPUTS) {
 800a4f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a4fa:	2b07      	cmp	r3, #7
 800a4fc:	d836      	bhi.n	800a56c <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0xf4>
                analogInputs[index] = std::string(analogInputJson->valuestring);
 800a4fe:	f107 0308 	add.w	r3, r7, #8
 800a502:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fc3c 	bl	800ad84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 800a50c:	4605      	mov	r5, r0
 800a50e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a512:	691c      	ldr	r4, [r3, #16]
 800a514:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a518:	4618      	mov	r0, r3
 800a51a:	f005 fb79 	bl	800fc10 <_ZNSaIcEC1Ev>
 800a51e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800a522:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800a526:	4621      	mov	r1, r4
 800a528:	4618      	mov	r0, r3
 800a52a:	f005 fdcd 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a52e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800a532:	4619      	mov	r1, r3
 800a534:	4628      	mov	r0, r5
 800a536:	f005 fc53 	bl	800fde0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a53a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800a53e:	4618      	mov	r0, r3
 800a540:	f005 fc42 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a544:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a548:	4618      	mov	r0, r3
 800a54a:	f005 fb63 	bl	800fc14 <_ZNSaIcED1Ev>
                ++index;
 800a54e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a552:	3301      	adds	r3, #1
 800a554:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    cJSON_ArrayForEach(analogInputJson, analogInputsJson) {
 800a558:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a562:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1b4      	bne.n	800a4d4 <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x5c>
 800a56a:	e000      	b.n	800a56e <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0xf6>
            } else {
                break; // More items in the list than MAX_ANALOG_INPUTS, handle as needed
 800a56c:	bf00      	nop
            }
        }
    }

    setAnalogInputNames(analogInputs);
 800a56e:	f107 0308 	add.w	r3, r7, #8
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fbd6 	bl	800ad26 <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
}
 800a57a:	f107 0308 	add.w	r3, r7, #8
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe ff3c 	bl	80093fc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800a584:	e002      	b.n	800a58c <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x114>
        return; // Input is null, handle error as needed
 800a586:	bf00      	nop
 800a588:	e000      	b.n	800a58c <_ZN6Config27setAnalogInputNamesFromJsonEP5cJSON+0x114>
        return; // Not an array, handle error as needed
 800a58a:	bf00      	nop
}
 800a58c:	37f0      	adds	r7, #240	; 0xf0
 800a58e:	46bd      	mov	sp, r7
 800a590:	bdb0      	pop	{r4, r5, r7, pc}
 800a592:	bf00      	nop
 800a594:	08014224 	.word	0x08014224

0800a598 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON>:


void Config::setDigitalInputNamesFromJson(cJSON* jsonData) {
 800a598:	b5b0      	push	{r4, r5, r7, lr}
 800a59a:	b0ec      	sub	sp, #432	; 0x1b0
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a5a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a5a6:	6018      	str	r0, [r3, #0]
 800a5a8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a5ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a5b0:	6019      	str	r1, [r3, #0]
    if (jsonData == nullptr) {
 800a5b2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a5b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 8087 	beq.w	800a6d0 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x138>
        return; // Input is null, handle error as needed
    }

    cJSON* digitalInputsJson = cJSON_GetObjectItemCaseSensitive(jsonData, "data");
 800a5c2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a5c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a5ca:	4945      	ldr	r1, [pc, #276]	; (800a6e0 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x148>)
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	f7fb fea9 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800a5d2:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
    if (!cJSON_IsArray(digitalInputsJson)) {
 800a5d6:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 800a5da:	f7fc f8b0 	bl	800673e <cJSON_IsArray>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	bf0c      	ite	eq
 800a5e4:	2301      	moveq	r3, #1
 800a5e6:	2300      	movne	r3, #0
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d172      	bne.n	800a6d4 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x13c>
        return; // Not an array, handle error as needed
    }

    std::array<std::string, MAX_DIGITAL_INPUTS> digitalInputs;
 800a5ee:	f107 0308 	add.w	r3, r7, #8
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fe ff19 	bl	800942a <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1Ev>
    size_t index = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    cJSON* digitalInputJson;

    // Iterate over the analog input names array
    cJSON_ArrayForEach(digitalInputJson, digitalInputsJson) {
 800a5fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x76>
 800a606:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	e000      	b.n	800a610 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x78>
 800a60e:	2300      	movs	r3, #0
 800a610:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800a614:	e046      	b.n	800a6a4 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x10c>
        if (cJSON_IsString(digitalInputJson) && (digitalInputJson->valuestring != NULL)) {
 800a616:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 800a61a:	f7fc f879 	bl	8006710 <cJSON_IsString>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d006      	beq.n	800a632 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x9a>
 800a624:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x9a>
 800a62e:	2301      	movs	r3, #1
 800a630:	e000      	b.n	800a634 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x9c>
 800a632:	2300      	movs	r3, #0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d030      	beq.n	800a69a <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x102>
            if (index < MAX_DIGITAL_INPUTS) {
 800a638:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a63c:	2b0f      	cmp	r3, #15
 800a63e:	d836      	bhi.n	800a6ae <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x116>
                digitalInputs[index] = std::string(digitalInputJson->valuestring);
 800a640:	f107 0308 	add.w	r3, r7, #8
 800a644:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 fbaa 	bl	800ada2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>
 800a64e:	4605      	mov	r5, r0
 800a650:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a654:	691c      	ldr	r4, [r3, #16]
 800a656:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800a65a:	4618      	mov	r0, r3
 800a65c:	f005 fad8 	bl	800fc10 <_ZNSaIcEC1Ev>
 800a660:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800a664:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a668:	4621      	mov	r1, r4
 800a66a:	4618      	mov	r0, r3
 800a66c:	f005 fd2c 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a670:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a674:	4619      	mov	r1, r3
 800a676:	4628      	mov	r0, r5
 800a678:	f005 fbb2 	bl	800fde0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a67c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a680:	4618      	mov	r0, r3
 800a682:	f005 fba1 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a686:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f005 fac2 	bl	800fc14 <_ZNSaIcED1Ev>
                ++index;
 800a690:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a694:	3301      	adds	r3, #1
 800a696:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    cJSON_ArrayForEach(digitalInputJson, digitalInputsJson) {
 800a69a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800a6a4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1b4      	bne.n	800a616 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x7e>
 800a6ac:	e000      	b.n	800a6b0 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x118>
            } else {
                break; // More items in the list than MAX_ANALOG_INPUTS, handle as needed
 800a6ae:	bf00      	nop
            }
        }
    }

    setDigitalInputNames(digitalInputs);
 800a6b0:	f107 0208 	add.w	r2, r7, #8
 800a6b4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a6b8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a6bc:	4611      	mov	r1, r2
 800a6be:	6818      	ldr	r0, [r3, #0]
 800a6c0:	f000 fb40 	bl	800ad44 <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>
}
 800a6c4:	f107 0308 	add.w	r3, r7, #8
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fe fec2 	bl	8009452 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
 800a6ce:	e002      	b.n	800a6d6 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x13e>
        return; // Input is null, handle error as needed
 800a6d0:	bf00      	nop
 800a6d2:	e000      	b.n	800a6d6 <_ZN6Config28setDigitalInputNamesFromJsonEP5cJSON+0x13e>
        return; // Not an array, handle error as needed
 800a6d4:	bf00      	nop
}
 800a6d6:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	08014224 	.word	0x08014224

0800a6e4 <_ZN6Config21setRelayNamesFromJsonEP5cJSON>:


void Config:: setRelayNamesFromJson(cJSON* jsonData){
 800a6e4:	b5b0      	push	{r4, r5, r7, lr}
 800a6e6:	b0bc      	sub	sp, #240	; 0xf0
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
	 if (jsonData == nullptr) {
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d07e      	beq.n	800a7f2 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x10e>
	        return; // Input is null, handle error as needed
	    }

	    cJSON* JsonData = cJSON_GetObjectItemCaseSensitive(jsonData, "data");
 800a6f4:	4942      	ldr	r1, [pc, #264]	; (800a800 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x11c>)
 800a6f6:	6838      	ldr	r0, [r7, #0]
 800a6f8:	f7fb fe14 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800a6fc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	    if (!cJSON_IsArray(JsonData)) {
 800a700:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800a704:	f7fc f81b 	bl	800673e <cJSON_IsArray>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	bf0c      	ite	eq
 800a70e:	2301      	moveq	r3, #1
 800a710:	2300      	movne	r3, #0
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	d16e      	bne.n	800a7f6 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x112>
	        return; // Not an array, handle error as needed
	    }

	    std::array<std::string, MAX_DIGITAL_OUTPUTS> relayList;
 800a718:	f107 0308 	add.w	r3, r7, #8
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fe fe59 	bl	80093d4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1Ev>
	    size_t index = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	    cJSON* Json;

	    // Iterate over the analog input names array
	    cJSON_ArrayForEach(Json, JsonData) {
 800a728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d003      	beq.n	800a738 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x54>
 800a730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	e000      	b.n	800a73a <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x56>
 800a738:	2300      	movs	r3, #0
 800a73a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a73e:	e046      	b.n	800a7ce <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0xea>
	        if (cJSON_IsString(Json) && (Json->valuestring != NULL)) {
 800a740:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800a744:	f7fb ffe4 	bl	8006710 <cJSON_IsString>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d006      	beq.n	800a75c <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x78>
 800a74e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x78>
 800a758:	2301      	movs	r3, #1
 800a75a:	e000      	b.n	800a75e <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x7a>
 800a75c:	2300      	movs	r3, #0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d030      	beq.n	800a7c4 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0xe0>
	            if (index < MAX_DIGITAL_OUTPUTS) {
 800a762:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a766:	2b07      	cmp	r3, #7
 800a768:	d836      	bhi.n	800a7d8 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0xf4>
	                relayList[index] = std::string(Json->valuestring);
 800a76a:	f107 0308 	add.w	r3, r7, #8
 800a76e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fb06 	bl	800ad84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>
 800a778:	4605      	mov	r5, r0
 800a77a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a77e:	691c      	ldr	r4, [r3, #16]
 800a780:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a784:	4618      	mov	r0, r3
 800a786:	f005 fa43 	bl	800fc10 <_ZNSaIcEC1Ev>
 800a78a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800a78e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800a792:	4621      	mov	r1, r4
 800a794:	4618      	mov	r0, r3
 800a796:	f005 fc97 	bl	80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a79a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f005 fb1d 	bl	800fde0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a7a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f005 fb0c 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a7b0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f005 fa2d 	bl	800fc14 <_ZNSaIcED1Ev>
	                ++index;
 800a7ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7be:	3301      	adds	r3, #1
 800a7c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	    cJSON_ArrayForEach(Json, JsonData) {
 800a7c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a7ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1b4      	bne.n	800a740 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x5c>
 800a7d6:	e000      	b.n	800a7da <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0xf6>
	            } else {
	                break; // More items in the list than MAX_ANALOG_INPUTS, handle as needed
 800a7d8:	bf00      	nop
	            }
	        }
	    }

	    setDigitalOutputNames(relayList);
 800a7da:	f107 0308 	add.w	r3, r7, #8
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fabf 	bl	800ad64 <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>
}
 800a7e6:	f107 0308 	add.w	r3, r7, #8
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fe fe06 	bl	80093fc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800a7f0:	e002      	b.n	800a7f8 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x114>
	        return; // Input is null, handle error as needed
 800a7f2:	bf00      	nop
 800a7f4:	e000      	b.n	800a7f8 <_ZN6Config21setRelayNamesFromJsonEP5cJSON+0x114>
	        return; // Not an array, handle error as needed
 800a7f6:	bf00      	nop
}
 800a7f8:	37f0      	adds	r7, #240	; 0xf0
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a7fe:	bf00      	nop
 800a800:	08014224 	.word	0x08014224

0800a804 <_ZN6Config20setDHCPNetworkConfigEP13wiz_NetInfo_t>:

void Config::setDHCPNetworkConfig(wiz_NetInfo* net_info) {
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
    std::array<uint8_t, 4> ip = {net_info->ip[0], net_info->ip[1], net_info->ip[2], net_info->ip[3]};
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	799b      	ldrb	r3, [r3, #6]
 800a812:	753b      	strb	r3, [r7, #20]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	79db      	ldrb	r3, [r3, #7]
 800a818:	757b      	strb	r3, [r7, #21]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	7a1b      	ldrb	r3, [r3, #8]
 800a81e:	75bb      	strb	r3, [r7, #22]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	7a5b      	ldrb	r3, [r3, #9]
 800a824:	75fb      	strb	r3, [r7, #23]
    std::array<uint8_t, 4> gateway = {net_info->gw[0], net_info->gw[1], net_info->gw[2], net_info->gw[3]};
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	7b9b      	ldrb	r3, [r3, #14]
 800a82a:	743b      	strb	r3, [r7, #16]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	7bdb      	ldrb	r3, [r3, #15]
 800a830:	747b      	strb	r3, [r7, #17]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	7c1b      	ldrb	r3, [r3, #16]
 800a836:	74bb      	strb	r3, [r7, #18]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	7c5b      	ldrb	r3, [r3, #17]
 800a83c:	74fb      	strb	r3, [r7, #19]
    std::array<uint8_t, 4> subnet = {net_info->sn[0], net_info->sn[1], net_info->sn[2], net_info->sn[3]};
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	7a9b      	ldrb	r3, [r3, #10]
 800a842:	733b      	strb	r3, [r7, #12]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	7adb      	ldrb	r3, [r3, #11]
 800a848:	737b      	strb	r3, [r7, #13]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	7b1b      	ldrb	r3, [r3, #12]
 800a84e:	73bb      	strb	r3, [r7, #14]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	7b5b      	ldrb	r3, [r3, #13]
 800a854:	73fb      	strb	r3, [r7, #15]
    std::array<uint8_t, 4> dns = {net_info->dns[0], net_info->dns[1], net_info->dns[2], net_info->dns[3]};
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	7c9b      	ldrb	r3, [r3, #18]
 800a85a:	723b      	strb	r3, [r7, #8]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	7cdb      	ldrb	r3, [r3, #19]
 800a860:	727b      	strb	r3, [r7, #9]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	7d1b      	ldrb	r3, [r3, #20]
 800a866:	72bb      	strb	r3, [r7, #10]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	7d5b      	ldrb	r3, [r3, #21]
 800a86c:	72fb      	strb	r3, [r7, #11]

    setIP(ip);
 800a86e:	f107 0314 	add.w	r3, r7, #20
 800a872:	4619      	mov	r1, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f990 	bl	800ab9a <_ZN6Config5setIPERKSt5arrayIhLj4EE>
    setGateway(gateway);
 800a87a:	f107 0310 	add.w	r3, r7, #16
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f99a 	bl	800abba <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>
    setSubnet(subnet);
 800a886:	f107 030c 	add.w	r3, r7, #12
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f9a4 	bl	800abda <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>
    setDNS(dns);
 800a892:	f107 0308 	add.w	r3, r7, #8
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f9ae 	bl	800abfa <_ZN6Config6setDNSERKSt5arrayIhLj4EE>
}
 800a89e:	bf00      	nop
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <_ZNK6Config11getBrokerIPEv>:


// Getters
std::array<uint8_t, 4> Config::getBrokerIP() const { return broker_ip; }
 800a8a6:	b480      	push	{r7}
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	60fb      	str	r3, [r7, #12]
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	7b3a      	ldrb	r2, [r7, #12]
 800a8b8:	f362 0307 	bfi	r3, r2, #0, #8
 800a8bc:	7b7a      	ldrb	r2, [r7, #13]
 800a8be:	f362 230f 	bfi	r3, r2, #8, #8
 800a8c2:	7bba      	ldrb	r2, [r7, #14]
 800a8c4:	f362 4317 	bfi	r3, r2, #16, #8
 800a8c8:	7bfa      	ldrb	r2, [r7, #15]
 800a8ca:	f362 631f 	bfi	r3, r2, #24, #8
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3714      	adds	r7, #20
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <_ZNK6Config13getBrokerPortEv>:
uint16_t Config::getBrokerPort() const { return broker_port; }
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	889b      	ldrh	r3, [r3, #4]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <_ZNK6Config5getIPEv>:
std::array<uint8_t, 4> Config::getIP() const { return ip; }
 800a8f2:	b480      	push	{r7}
 800a8f4:	b085      	sub	sp, #20
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	f107 030c 	add.w	r3, r7, #12
 800a900:	3206      	adds	r2, #6
 800a902:	6810      	ldr	r0, [r2, #0]
 800a904:	6018      	str	r0, [r3, #0]
 800a906:	2300      	movs	r3, #0
 800a908:	7b3a      	ldrb	r2, [r7, #12]
 800a90a:	f362 0307 	bfi	r3, r2, #0, #8
 800a90e:	7b7a      	ldrb	r2, [r7, #13]
 800a910:	f362 230f 	bfi	r3, r2, #8, #8
 800a914:	7bba      	ldrb	r2, [r7, #14]
 800a916:	f362 4317 	bfi	r3, r2, #16, #8
 800a91a:	7bfa      	ldrb	r2, [r7, #15]
 800a91c:	f362 631f 	bfi	r3, r2, #24, #8
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <_ZNK6Config10getGatewayEv>:
std::array<uint8_t, 4> Config::getGateway() const { return gateway; }
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	f107 030c 	add.w	r3, r7, #12
 800a93a:	320a      	adds	r2, #10
 800a93c:	6810      	ldr	r0, [r2, #0]
 800a93e:	6018      	str	r0, [r3, #0]
 800a940:	2300      	movs	r3, #0
 800a942:	7b3a      	ldrb	r2, [r7, #12]
 800a944:	f362 0307 	bfi	r3, r2, #0, #8
 800a948:	7b7a      	ldrb	r2, [r7, #13]
 800a94a:	f362 230f 	bfi	r3, r2, #8, #8
 800a94e:	7bba      	ldrb	r2, [r7, #14]
 800a950:	f362 4317 	bfi	r3, r2, #16, #8
 800a954:	7bfa      	ldrb	r2, [r7, #15]
 800a956:	f362 631f 	bfi	r3, r2, #24, #8
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <_ZNK6Config9getSubnetEv>:
std::array<uint8_t, 4> Config::getSubnet() const { return subnet; }
 800a966:	b480      	push	{r7}
 800a968:	b085      	sub	sp, #20
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	f107 030c 	add.w	r3, r7, #12
 800a974:	320e      	adds	r2, #14
 800a976:	6810      	ldr	r0, [r2, #0]
 800a978:	6018      	str	r0, [r3, #0]
 800a97a:	2300      	movs	r3, #0
 800a97c:	7b3a      	ldrb	r2, [r7, #12]
 800a97e:	f362 0307 	bfi	r3, r2, #0, #8
 800a982:	7b7a      	ldrb	r2, [r7, #13]
 800a984:	f362 230f 	bfi	r3, r2, #8, #8
 800a988:	7bba      	ldrb	r2, [r7, #14]
 800a98a:	f362 4317 	bfi	r3, r2, #16, #8
 800a98e:	7bfa      	ldrb	r2, [r7, #15]
 800a990:	f362 631f 	bfi	r3, r2, #24, #8
 800a994:	4618      	mov	r0, r3
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <_ZNK6Config6getDNSEv>:
std::array<uint8_t, 4> Config::getDNS() const { return dns; }
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	f107 030c 	add.w	r3, r7, #12
 800a9ae:	3212      	adds	r2, #18
 800a9b0:	6810      	ldr	r0, [r2, #0]
 800a9b2:	6018      	str	r0, [r3, #0]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	7b3a      	ldrb	r2, [r7, #12]
 800a9b8:	f362 0307 	bfi	r3, r2, #0, #8
 800a9bc:	7b7a      	ldrb	r2, [r7, #13]
 800a9be:	f362 230f 	bfi	r3, r2, #8, #8
 800a9c2:	7bba      	ldrb	r2, [r7, #14]
 800a9c4:	f362 4317 	bfi	r3, r2, #16, #8
 800a9c8:	7bfa      	ldrb	r2, [r7, #15]
 800a9ca:	f362 631f 	bfi	r3, r2, #24, #8
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <_ZNK6Config20getKeepAliveIntervalEv>:
uint16_t Config::getKeepAliveInterval() const { return keep_alive_interval; }
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	8adb      	ldrh	r3, [r3, #22]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <_ZNK6Config14getDHCPEnabledEv>:
bool Config::getDHCPEnabled() const { return dhcp_enabled; }
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	7e1b      	ldrb	r3, [r3, #24]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <_ZNK6Config11getUsernameB5cxx11Ev>:
uint32_t Config::getIntervalTime()  const { return interval_time;}
std::string Config::getUsername()const { return username; }
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	6039      	str	r1, [r7, #0]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	3320      	adds	r3, #32
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f005 fb20 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <_ZNK6Config11getClientIdB5cxx11Ev>:
std::string Config::getClientId()const  { return clientId; }
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	3338      	adds	r3, #56	; 0x38
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f005 fb11 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <_ZNK6Config11getPasswordB5cxx11Ev>:
std::string Config::getPassword()const { return password; }
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b082      	sub	sp, #8
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	6039      	str	r1, [r7, #0]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	3350      	adds	r3, #80	; 0x50
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f005 fb02 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <_ZNK6Config17getTopicSubscribeB5cxx11Ev>:
std::string Config::getTopicSubscribe()const { return topic_subscribe; }
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	3368      	adds	r3, #104	; 0x68
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f005 faf3 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <_ZNK6Config15getTopicPublishB5cxx11Ev>:
std::string Config::getTopicPublish()const {return topic_publish;}
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	6039      	str	r1, [r7, #0]
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	3380      	adds	r3, #128	; 0x80
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f005 fae4 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>:
 800aaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2507      	movs	r5, #7
 800aaae:	683c      	ldr	r4, [r7, #0]
 800aab0:	461e      	mov	r6, r3
 800aab2:	e006      	b.n	800aac2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_+0x22>
 800aab4:	4621      	mov	r1, r4
 800aab6:	4630      	mov	r0, r6
 800aab8:	f005 fad2 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800aabc:	3618      	adds	r6, #24
 800aabe:	3418      	adds	r4, #24
 800aac0:	3d01      	subs	r5, #1
 800aac2:	2d00      	cmp	r5, #0
 800aac4:	daf6      	bge.n	800aab4 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_+0x14>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4618      	mov	r0, r3
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aad0 <_ZN6Config19getAnalogInputNamesB5cxx11Ev>:
int Config::getQoS() const { return qos; }
std::array<std::string, MAX_ANALOG_INPUTS> Config::getAnalogInputNames() { return analog_input_names; }
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	339c      	adds	r3, #156	; 0x9c
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff ffdd 	bl	800aaa0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_>:
 800aaee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaf0:	b083      	sub	sp, #12
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	6039      	str	r1, [r7, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	250f      	movs	r5, #15
 800aafc:	683c      	ldr	r4, [r7, #0]
 800aafe:	461e      	mov	r6, r3
 800ab00:	e006      	b.n	800ab10 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_+0x22>
 800ab02:	4621      	mov	r1, r4
 800ab04:	4630      	mov	r0, r6
 800ab06:	f005 faab 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800ab0a:	3618      	adds	r6, #24
 800ab0c:	3418      	adds	r4, #24
 800ab0e:	3d01      	subs	r5, #1
 800ab10:	2d00      	cmp	r5, #0
 800ab12:	daf6      	bge.n	800ab02 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_+0x14>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4618      	mov	r0, r3
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab1e <_ZN6Config20getDigitalInputNamesB5cxx11Ev>:
std::array<std::string, MAX_DIGITAL_INPUTS> Config::getDigitalInputNames()  { return digital_input_names; }
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b082      	sub	sp, #8
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	6039      	str	r1, [r7, #0]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7ff ffdc 	bl	800aaee <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_>
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <_ZN6Config21getDigitalOutputNamesB5cxx11Ev>:
std::array<std::string, MAX_DIGITAL_OUTPUTS> Config::getDigitalOutputNames()  { return digital_output_names; }
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff ffa5 	bl	800aaa0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <_ZN6Config11setBrokerIPERKSt5arrayIhLj4EE>:

// Setters
void Config::setBrokerIP(const std::array<uint8_t, 4>& value) { broker_ip = value; }
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	6039      	str	r1, [r7, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	6810      	ldr	r0, [r2, #0]
 800ab6e:	6018      	str	r0, [r3, #0]
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <_ZN6Config13setBrokerPortEt>:
void Config::setBrokerPort(uint16_t value) { broker_port = value; }
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	807b      	strh	r3, [r7, #2]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	887a      	ldrh	r2, [r7, #2]
 800ab8c:	809a      	strh	r2, [r3, #4]
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <_ZN6Config5setIPERKSt5arrayIhLj4EE>:
void Config::setIP(const std::array<uint8_t, 4>& value) { ip = value; }
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	6039      	str	r1, [r7, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	3306      	adds	r3, #6
 800abaa:	6812      	ldr	r2, [r2, #0]
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	bf00      	nop
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <_ZN6Config10setGatewayERKSt5arrayIhLj4EE>:
void Config::setGateway(const std::array<uint8_t, 4>& value) { gateway = value; }
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	330a      	adds	r3, #10
 800abca:	6812      	ldr	r2, [r2, #0]
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	bf00      	nop
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <_ZN6Config9setSubnetERKSt5arrayIhLj4EE>:
void Config::setSubnet(const std::array<uint8_t, 4>& value) { subnet = value; }
 800abda:	b480      	push	{r7}
 800abdc:	b083      	sub	sp, #12
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	6039      	str	r1, [r7, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	330e      	adds	r3, #14
 800abea:	6812      	ldr	r2, [r2, #0]
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	bf00      	nop
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <_ZN6Config6setDNSERKSt5arrayIhLj4EE>:
void Config::setDNS(const std::array<uint8_t, 4>& value) { dns = value; }
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	3312      	adds	r3, #18
 800ac0a:	6812      	ldr	r2, [r2, #0]
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	bf00      	nop
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <_ZN6Config20setKeepAliveIntervalEt>:
void Config::setKeepAliveInterval(uint16_t value) { keep_alive_interval = value; }
 800ac1a:	b480      	push	{r7}
 800ac1c:	b083      	sub	sp, #12
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	807b      	strh	r3, [r7, #2]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	887a      	ldrh	r2, [r7, #2]
 800ac2a:	82da      	strh	r2, [r3, #22]
 800ac2c:	bf00      	nop
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <_ZN6Config14setDHCPEnabledEb>:
void Config::setDHCPEnabled(bool value) { dhcp_enabled = value; }
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	460b      	mov	r3, r1
 800ac42:	70fb      	strb	r3, [r7, #3]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	78fa      	ldrb	r2, [r7, #3]
 800ac48:	761a      	strb	r2, [r3, #24]
 800ac4a:	bf00      	nop
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <_ZN6Config15setIntervalTimeEm>:
void Config::setIntervalTime(uint32_t value) { interval_time = value; }
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	61da      	str	r2, [r3, #28]
 800ac66:	bf00      	nop
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <_ZN6Config11setUsernameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Config::setUsername(const std::string& value) { username = value; }
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	6039      	str	r1, [r7, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3320      	adds	r3, #32
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f005 f8a6 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <_ZN6Config11setClientIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setClientId(const std::string& value) { clientId = value; }
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	3338      	adds	r3, #56	; 0x38
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f005 f897 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <_ZN6Config11setPasswordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setPassword(const std::string& value) { password = value; }
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3350      	adds	r3, #80	; 0x50
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f005 f888 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <_ZN6Config17setTopicSubscribeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void Config::setTopicSubscribe(const std::string& value) { topic_subscribe = value; }
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	3368      	adds	r3, #104	; 0x68
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	4618      	mov	r0, r3
 800acde:	f005 f879 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <_ZN6Config15setTopicPublishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
void Config::setTopicPublish(const std::string& value) { topic_publish = value; }
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	6039      	str	r1, [r7, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3380      	adds	r3, #128	; 0x80
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f005 f86a 	bl	800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <_ZN6Config6setQoSEi>:
void Config::setQoS(int value) { qos = value; }
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <_ZN6Config19setAnalogInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>:
void Config::setAnalogInputNames(const std::array<std::string, MAX_ANALOG_INPUTS>& value) { analog_input_names = value; }
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	339c      	adds	r3, #156	; 0x9c
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fd fac2 	bl	80082c0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <_ZN6Config20setDigitalInputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE>:
void Config::setDigitalInputNames(const std::array<std::string, MAX_DIGITAL_INPUTS>& value) { digital_input_names = value; }
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fd faca 	bl	80082f0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEaSERKS6_>
 800ad5c:	bf00      	nop
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <_ZN6Config21setDigitalOutputNamesERKSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE>:
void Config::setDigitalOutputNames(const std::array<std::string, MAX_DIGITAL_OUTPUTS>& value) { digital_output_names = value; }
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fd faa2 	bl	80082c0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEaSERKS6_>
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEixEj>:
      operator[](size_type __n) noexcept
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 f8af 	bl	800aef6 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_refERA8_KS5_j>
 800ad98:	4603      	mov	r3, r0
      }
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEixEj>:
      operator[](size_type __n) noexcept
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b082      	sub	sp, #8
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 f8b2 	bl	800af1a <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_refERA16_KS5_j>
 800adb6:	4603      	mov	r3, r0
      }
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
 800adcc:	68b8      	ldr	r0, [r7, #8]
 800adce:	f7fe faf5 	bl	80093bc <_ZNSt11char_traitsIcE6lengthEPKc>
 800add2:	61f8      	str	r0, [r7, #28]
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 800add4:	f107 0318 	add.w	r3, r7, #24
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	4618      	mov	r0, r3
 800addc:	f005 f91a 	bl	8010014 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 800ade0:	f107 0314 	add.w	r3, r7, #20
 800ade4:	f107 0218 	add.w	r2, r7, #24
 800ade8:	4611      	mov	r1, r2
 800adea:	4618      	mov	r0, r3
 800adec:	f000 f875 	bl	800aeda <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800adf0:	f107 0314 	add.w	r3, r7, #20
 800adf4:	4619      	mov	r1, r3
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f004 ffdf 	bl	800fdba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 800adfc:	f107 0314 	add.w	r3, r7, #20
 800ae00:	4618      	mov	r0, r3
 800ae02:	f004 ff07 	bl	800fc14 <_ZNSaIcED1Ev>
 800ae06:	f107 0318 	add.w	r3, r7, #24
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f004 ff02 	bl	800fc14 <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f005 f810 	bl	800fe36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800ae16:	4602      	mov	r2, r0
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f005 f80d 	bl	800fe3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 800ae24:	69fa      	ldr	r2, [r7, #28]
 800ae26:	68b9      	ldr	r1, [r7, #8]
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f005 f8e1 	bl	800fff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 800ae2e:	6879      	ldr	r1, [r7, #4]
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f005 f8d6 	bl	800ffe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800ae36:	bf00      	nop
    }
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	3720      	adds	r7, #32
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <_ZNKSt5arrayIhLj4EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	2304      	movs	r3, #4
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE5beginEv>:
      begin() noexcept
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b082      	sub	sp, #8
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f86d 	bl	800af3e <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4dataEv>
 800ae64:	4603      	mov	r3, r0
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE3endEv>:
      end() noexcept
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f861 	bl	800af3e <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4dataEv>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	33c0      	adds	r3, #192	; 0xc0
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE5beginEv>:
      begin() noexcept
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f861 	bl	800af58 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4dataEv>
 800ae96:	4603      	mov	r3, r0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE3endEv>:
      end() noexcept
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f855 	bl	800af58 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4dataEv>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <_ZNSt5arrayIhLj4EEixEj>:
      operator[](size_type __n) noexcept
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 f851 	bl	800af72 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
 800aed0:	4603      	mov	r3, r0
      }
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 f850 	bl	800af8e <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_refERA8_KS5_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800aef6:	b480      	push	{r7}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	4613      	mov	r3, r2
 800af04:	005b      	lsls	r3, r3, #1
 800af06:	4413      	add	r3, r2
 800af08:	00db      	lsls	r3, r3, #3
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	4413      	add	r3, r2
 800af0e:	4618      	mov	r0, r3
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_refERA16_KS5_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800af1a:	b480      	push	{r7}
 800af1c:	b083      	sub	sp, #12
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	4613      	mov	r3, r2
 800af28:	005b      	lsls	r3, r3, #1
 800af2a:	4413      	add	r3, r2
 800af2c:	00db      	lsls	r3, r3, #3
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	4413      	add	r3, r2
 800af32:	4618      	mov	r0, r3
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr

0800af3e <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE4dataEv>:
      data() noexcept
 800af3e:	b580      	push	{r7, lr}
 800af40:	b082      	sub	sp, #8
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 f82d 	bl	800afa8 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_ptrERA8_KS5_>
 800af4e:	4603      	mov	r3, r0
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE4dataEv>:
      data() noexcept
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4618      	mov	r0, r3
 800af64:	f000 f82b 	bl	800afbe <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_ptrERA16_KS5_>
 800af68:	4603      	mov	r3, r0
 800af6a:	4618      	mov	r0, r3
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	4413      	add	r3, r2
 800af82:	4618      	mov	r0, r3
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 800af8e:	b580      	push	{r7, lr}
 800af90:	b082      	sub	sp, #8
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f004 fe39 	bl	800fc12 <_ZNSaIcEC1ERKS_>
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EE6_S_ptrERA8_KS5_>:
      _S_ptr(const _Type& __t) noexcept
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <_ZNSt14__array_traitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EE6_S_ptrERA16_KS5_>:
      _S_ptr(const _Type& __t) noexcept
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4618      	mov	r0, r3
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <_ZN6ConfigC1ERKS_>:
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	6812      	ldr	r2, [r2, #0]
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	889a      	ldrh	r2, [r3, #4]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	809a      	strh	r2, [r3, #4]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	683a      	ldr	r2, [r7, #0]
 800aff2:	3306      	adds	r3, #6
 800aff4:	3206      	adds	r2, #6
 800aff6:	6812      	ldr	r2, [r2, #0]
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	330a      	adds	r3, #10
 800b000:	320a      	adds	r2, #10
 800b002:	6812      	ldr	r2, [r2, #0]
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	330e      	adds	r3, #14
 800b00c:	320e      	adds	r2, #14
 800b00e:	6812      	ldr	r2, [r2, #0]
 800b010:	601a      	str	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	3312      	adds	r3, #18
 800b018:	3212      	adds	r2, #18
 800b01a:	6812      	ldr	r2, [r2, #0]
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	8ada      	ldrh	r2, [r3, #22]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	82da      	strh	r2, [r3, #22]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	7e1a      	ldrb	r2, [r3, #24]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	761a      	strb	r2, [r3, #24]
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	69da      	ldr	r2, [r3, #28]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	61da      	str	r2, [r3, #28]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f103 0220 	add.w	r2, r3, #32
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	3320      	adds	r3, #32
 800b040:	4619      	mov	r1, r3
 800b042:	4610      	mov	r0, r2
 800b044:	f005 f80c 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	3338      	adds	r3, #56	; 0x38
 800b052:	4619      	mov	r1, r3
 800b054:	4610      	mov	r0, r2
 800b056:	f005 f803 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	3350      	adds	r3, #80	; 0x50
 800b064:	4619      	mov	r1, r3
 800b066:	4610      	mov	r0, r2
 800b068:	f004 fffa 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	3368      	adds	r3, #104	; 0x68
 800b076:	4619      	mov	r1, r3
 800b078:	4610      	mov	r0, r2
 800b07a:	f004 fff1 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	3380      	adds	r3, #128	; 0x80
 800b088:	4619      	mov	r1, r3
 800b08a:	4610      	mov	r0, r2
 800b08c:	f004 ffe8 	bl	8010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	339c      	adds	r3, #156	; 0x9c
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	f7ff fcf9 	bl	800aaa0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f7ff fd16 	bl	800aaee <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EEC1ERKS6_>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f503 7237 	add.w	r2, r3, #732	; 0x2dc
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	f7ff fce5 	bl	800aaa0 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EEC1ERKS6_>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <_ZN6ConfigD1Ev>:
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe f984 	bl	80093fc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe f9a9 	bl	8009452 <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj16EED1Ev>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	339c      	adds	r3, #156	; 0x9c
 800b104:	4618      	mov	r0, r3
 800b106:	f7fe f979 	bl	80093fc <_ZNSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELj8EED1Ev>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3380      	adds	r3, #128	; 0x80
 800b10e:	4618      	mov	r0, r3
 800b110:	f004 fe5a 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3368      	adds	r3, #104	; 0x68
 800b118:	4618      	mov	r0, r3
 800b11a:	f004 fe55 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3350      	adds	r3, #80	; 0x50
 800b122:	4618      	mov	r0, r3
 800b124:	f004 fe50 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3338      	adds	r3, #56	; 0x38
 800b12c:	4618      	mov	r0, r3
 800b12e:	f004 fe4b 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	3320      	adds	r3, #32
 800b136:	4618      	mov	r0, r3
 800b138:	f004 fe46 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
	...

0800b148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	f5ad 6dea 	sub.w	sp, sp, #1872	; 0x750
 800b14e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b150:	f001 f98a 	bl	800c468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b154:	f000 f87c 	bl	800b250 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b158:	f000 faa6 	bl	800b6a8 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 800b15c:	f000 fa3a 	bl	800b5d4 <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 800b160:	f000 fa74 	bl	800b64c <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 800b164:	f000 f8e8 	bl	800b338 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 800b168:	f000 f9a4 	bl	800b4b4 <_ZL12MX_ADC2_Initv>


//HAL_UART_Receive_IT(&huart1, RxBuffer, sizeof(RxBuffer));


 config.init();
 800b16c:	4830      	ldr	r0, [pc, #192]	; (800b230 <main+0xe8>)
 800b16e:	f7fe f9bb 	bl	80094e8 <_ZN6Config4initEv>

 utils.init(&config);
 800b172:	492f      	ldr	r1, [pc, #188]	; (800b230 <main+0xe8>)
 800b174:	482f      	ldr	r0, [pc, #188]	; (800b234 <main+0xec>)
 800b176:	f7fd f959 	bl	800842c <_ZN5Utils4initEP6Config>

 ethManager.initialize(&config, &utils);
 800b17a:	4a2e      	ldr	r2, [pc, #184]	; (800b234 <main+0xec>)
 800b17c:	492c      	ldr	r1, [pc, #176]	; (800b230 <main+0xe8>)
 800b17e:	482e      	ldr	r0, [pc, #184]	; (800b238 <main+0xf0>)
 800b180:	f7fd fca4 	bl	8008acc <_ZN15EthernetManager10initializeEP6ConfigP5Utils>

 config.initmqttConfig();
 800b184:	482a      	ldr	r0, [pc, #168]	; (800b230 <main+0xe8>)
 800b186:	f7fe fdc9 	bl	8009d1c <_ZN6Config14initmqttConfigEv>

 mqttClient.init(config, &utils);
 800b18a:	463b      	mov	r3, r7
 800b18c:	4928      	ldr	r1, [pc, #160]	; (800b230 <main+0xe8>)
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff ff20 	bl	800afd4 <_ZN6ConfigC1ERKS_>
 800b194:	463b      	mov	r3, r7
 800b196:	4a27      	ldr	r2, [pc, #156]	; (800b234 <main+0xec>)
 800b198:	4619      	mov	r1, r3
 800b19a:	4828      	ldr	r0, [pc, #160]	; (800b23c <main+0xf4>)
 800b19c:	f000 fc20 	bl	800b9e0 <_ZN14MQTTConnection4initE6ConfigP5Utils>
 800b1a0:	463b      	mov	r3, r7
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff ff9c 	bl	800b0e0 <_ZN6ConfigD1Ev>

 mqttClient.subscribe(config.getTopicSubscribe());
 800b1a8:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b1ac:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800b1b0:	491f      	ldr	r1, [pc, #124]	; (800b230 <main+0xe8>)
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff fc56 	bl	800aa64 <_ZNK6Config17getTopicSubscribeB5cxx11Ev>
 800b1b8:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800b1bc:	4619      	mov	r1, r3
 800b1be:	481f      	ldr	r0, [pc, #124]	; (800b23c <main+0xf4>)
 800b1c0:	f000 fd62 	bl	800bc88 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b1c4:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f004 fdfd 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

 uartHandler.init(&huart1, &utils, &config);
 800b1ce:	4b18      	ldr	r3, [pc, #96]	; (800b230 <main+0xe8>)
 800b1d0:	4a18      	ldr	r2, [pc, #96]	; (800b234 <main+0xec>)
 800b1d2:	491b      	ldr	r1, [pc, #108]	; (800b240 <main+0xf8>)
 800b1d4:	481b      	ldr	r0, [pc, #108]	; (800b244 <main+0xfc>)
 800b1d6:	f7fd ff30 	bl	800903a <_ZN11UARTHandler4initEP20__UART_HandleTypeDefP5UtilsP6Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (true)
  {

	mqttClient.mqttYield();
 800b1da:	4818      	ldr	r0, [pc, #96]	; (800b23c <main+0xf4>)
 800b1dc:	f000 fdc4 	bl	800bd68 <_ZN14MQTTConnection9mqttYieldEv>

	utils.createJSON(&statusJsonBuffer);
 800b1e0:	4919      	ldr	r1, [pc, #100]	; (800b248 <main+0x100>)
 800b1e2:	4814      	ldr	r0, [pc, #80]	; (800b234 <main+0xec>)
 800b1e4:	f7fd faa4 	bl	8008730 <_ZN5Utils10createJSONEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

    mqttClient.publish(statusJsonBuffer, config);
 800b1e8:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800b1ec:	4910      	ldr	r1, [pc, #64]	; (800b230 <main+0xe8>)
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7ff fef0 	bl	800afd4 <_ZN6ConfigC1ERKS_>
 800b1f4:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4913      	ldr	r1, [pc, #76]	; (800b248 <main+0x100>)
 800b1fc:	480f      	ldr	r0, [pc, #60]	; (800b23c <main+0xf4>)
 800b1fe:	f000 fcf9 	bl	800bbf4 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config>
 800b202:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800b206:	4618      	mov	r0, r3
 800b208:	f7ff ff6a 	bl	800b0e0 <_ZN6ConfigD1Ev>
	// utils.print("Hello!!! \r\n");
    uartHandler.processReceivedData();
 800b20c:	480d      	ldr	r0, [pc, #52]	; (800b244 <main+0xfc>)
 800b20e:	f7fd ffaf 	bl	8009170 <_ZN11UARTHandler19processReceivedDataEv>

    if (uartHandler.getRealTimeData()) {
 800b212:	480c      	ldr	r0, [pc, #48]	; (800b244 <main+0xfc>)
 800b214:	f7fd ff3f 	bl	8009096 <_ZN11UARTHandler15getRealTimeDataEv>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <main+0xde>
    	uartHandler.SendRealTimeData(&statusJsonUSARTBuffer);
 800b21e:	490b      	ldr	r1, [pc, #44]	; (800b24c <main+0x104>)
 800b220:	4808      	ldr	r0, [pc, #32]	; (800b244 <main+0xfc>)
 800b222:	f7fe f8ab 	bl	800937c <_ZN11UARTHandler16SendRealTimeDataEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

    HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(const_cast<char*>(dataToSend)), strlen(dataToSend), HAL_MAX_DELAY);

    */

    HAL_Delay(3000);
 800b226:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b22a:	f001 f98f 	bl	800c54c <HAL_Delay>
	mqttClient.mqttYield();
 800b22e:	e7d4      	b.n	800b1da <main+0x92>
 800b230:	200013ec 	.word	0x200013ec
 800b234:	20001788 	.word	0x20001788
 800b238:	20001c24 	.word	0x20001c24
 800b23c:	20001c28 	.word	0x20001c28
 800b240:	200013a4 	.word	0x200013a4
 800b244:	20001c98 	.word	0x20001c98
 800b248:	200022b8 	.word	0x200022b8
 800b24c:	200022d0 	.word	0x200022d0

0800b250 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b094      	sub	sp, #80	; 0x50
 800b254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b256:	f107 0320 	add.w	r3, r7, #32
 800b25a:	2230      	movs	r2, #48	; 0x30
 800b25c:	2100      	movs	r1, #0
 800b25e:	4618      	mov	r0, r3
 800b260:	f006 f83a 	bl	80112d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b264:	f107 030c 	add.w	r3, r7, #12
 800b268:	2200      	movs	r2, #0
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	605a      	str	r2, [r3, #4]
 800b26e:	609a      	str	r2, [r3, #8]
 800b270:	60da      	str	r2, [r3, #12]
 800b272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b274:	2300      	movs	r3, #0
 800b276:	60bb      	str	r3, [r7, #8]
 800b278:	4b2d      	ldr	r3, [pc, #180]	; (800b330 <_Z18SystemClock_Configv+0xe0>)
 800b27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27c:	4a2c      	ldr	r2, [pc, #176]	; (800b330 <_Z18SystemClock_Configv+0xe0>)
 800b27e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b282:	6413      	str	r3, [r2, #64]	; 0x40
 800b284:	4b2a      	ldr	r3, [pc, #168]	; (800b330 <_Z18SystemClock_Configv+0xe0>)
 800b286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b28c:	60bb      	str	r3, [r7, #8]
 800b28e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b290:	2300      	movs	r3, #0
 800b292:	607b      	str	r3, [r7, #4]
 800b294:	4b27      	ldr	r3, [pc, #156]	; (800b334 <_Z18SystemClock_Configv+0xe4>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a26      	ldr	r2, [pc, #152]	; (800b334 <_Z18SystemClock_Configv+0xe4>)
 800b29a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	4b24      	ldr	r3, [pc, #144]	; (800b334 <_Z18SystemClock_Configv+0xe4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2a8:	607b      	str	r3, [r7, #4]
 800b2aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b2b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b2b6:	2302      	movs	r3, #2
 800b2b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b2ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800b2c0:	2319      	movs	r3, #25
 800b2c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800b2c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800b2c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b2ce:	2304      	movs	r3, #4
 800b2d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b2d2:	f107 0320 	add.w	r3, r7, #32
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f002 fa16 	bl	800d708 <HAL_RCC_OscConfig>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	bf14      	ite	ne
 800b2e2:	2301      	movne	r3, #1
 800b2e4:	2300      	moveq	r3, #0
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 800b2ec:	f000 faf8 	bl	800b8e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b2f0:	230f      	movs	r3, #15
 800b2f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b2fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b306:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b308:	f107 030c 	add.w	r3, r7, #12
 800b30c:	2105      	movs	r1, #5
 800b30e:	4618      	mov	r0, r3
 800b310:	f002 fc72 	bl	800dbf8 <HAL_RCC_ClockConfig>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	bf14      	ite	ne
 800b31a:	2301      	movne	r3, #1
 800b31c:	2300      	moveq	r3, #0
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 800b324:	f000 fadc 	bl	800b8e0 <Error_Handler>
  }
}
 800b328:	bf00      	nop
 800b32a:	3750      	adds	r7, #80	; 0x50
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	40023800 	.word	0x40023800
 800b334:	40007000 	.word	0x40007000

0800b338 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b08c      	sub	sp, #48	; 0x30
 800b33c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b33e:	f107 0320 	add.w	r3, r7, #32
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	605a      	str	r2, [r3, #4]
 800b348:	609a      	str	r2, [r3, #8]
 800b34a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800b34c:	463b      	mov	r3, r7
 800b34e:	2220      	movs	r2, #32
 800b350:	2100      	movs	r1, #0
 800b352:	4618      	mov	r0, r3
 800b354:	f005 ffc0 	bl	80112d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800b358:	4b52      	ldr	r3, [pc, #328]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b35a:	4a53      	ldr	r2, [pc, #332]	; (800b4a8 <_ZL12MX_ADC1_Initv+0x170>)
 800b35c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b35e:	4b51      	ldr	r3, [pc, #324]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b360:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b364:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b366:	4b4f      	ldr	r3, [pc, #316]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b368:	2200      	movs	r2, #0
 800b36a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800b36c:	4b4d      	ldr	r3, [pc, #308]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b36e:	2201      	movs	r2, #1
 800b370:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800b372:	4b4c      	ldr	r3, [pc, #304]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b374:	2201      	movs	r2, #1
 800b376:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b378:	4b4a      	ldr	r3, [pc, #296]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b380:	4b48      	ldr	r3, [pc, #288]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b382:	2200      	movs	r2, #0
 800b384:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b386:	4b47      	ldr	r3, [pc, #284]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b388:	4a48      	ldr	r2, [pc, #288]	; (800b4ac <_ZL12MX_ADC1_Initv+0x174>)
 800b38a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b38c:	4b45      	ldr	r3, [pc, #276]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b38e:	2200      	movs	r2, #0
 800b390:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800b392:	4b44      	ldr	r3, [pc, #272]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b394:	2204      	movs	r2, #4
 800b396:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800b398:	4b42      	ldr	r3, [pc, #264]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b3a0:	4b40      	ldr	r3, [pc, #256]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b3a6:	483f      	ldr	r0, [pc, #252]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b3a8:	f001 f8f4 	bl	800c594 <HAL_ADC_Init>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bf14      	ite	ne
 800b3b2:	2301      	movne	r3, #1
 800b3b4:	2300      	moveq	r3, #0
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <_ZL12MX_ADC1_Initv+0x88>
  {
    Error_Handler();
 800b3bc:	f000 fa90 	bl	800b8e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b3cc:	f107 0320 	add.w	r3, r7, #32
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	4834      	ldr	r0, [pc, #208]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b3d4:	f001 fa50 	bl	800c878 <HAL_ADC_ConfigChannel>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	bf14      	ite	ne
 800b3de:	2301      	movne	r3, #1
 800b3e0:	2300      	moveq	r3, #0
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <_ZL12MX_ADC1_Initv+0xb4>
  {
    Error_Handler();
 800b3e8:	f000 fa7a 	bl	800b8e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b3f0:	f107 0320 	add.w	r3, r7, #32
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	482b      	ldr	r0, [pc, #172]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b3f8:	f001 fa3e 	bl	800c878 <HAL_ADC_ConfigChannel>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	bf14      	ite	ne
 800b402:	2301      	movne	r3, #1
 800b404:	2300      	moveq	r3, #0
 800b406:	b2db      	uxtb	r3, r3
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <_ZL12MX_ADC1_Initv+0xd8>
  {
    Error_Handler();
 800b40c:	f000 fa68 	bl	800b8e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800b410:	2303      	movs	r3, #3
 800b412:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b414:	f107 0320 	add.w	r3, r7, #32
 800b418:	4619      	mov	r1, r3
 800b41a:	4822      	ldr	r0, [pc, #136]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b41c:	f001 fa2c 	bl	800c878 <HAL_ADC_ConfigChannel>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	bf14      	ite	ne
 800b426:	2301      	movne	r3, #1
 800b428:	2300      	moveq	r3, #0
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800b430:	f000 fa56 	bl	800b8e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 800b434:	2304      	movs	r3, #4
 800b436:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b438:	f107 0320 	add.w	r3, r7, #32
 800b43c:	4619      	mov	r1, r3
 800b43e:	4819      	ldr	r0, [pc, #100]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b440:	f001 fa1a 	bl	800c878 <HAL_ADC_ConfigChannel>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	bf14      	ite	ne
 800b44a:	2301      	movne	r3, #1
 800b44c:	2300      	moveq	r3, #0
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b00      	cmp	r3, #0
 800b452:	d001      	beq.n	800b458 <_ZL12MX_ADC1_Initv+0x120>
  {
    Error_Handler();
 800b454:	f000 fa44 	bl	800b8e0 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800b458:	2300      	movs	r3, #0
 800b45a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800b45c:	2301      	movs	r3, #1
 800b45e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800b460:	2301      	movs	r3, #1
 800b462:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800b464:	2300      	movs	r3, #0
 800b466:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800b468:	2300      	movs	r3, #0
 800b46a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800b46c:	4b10      	ldr	r3, [pc, #64]	; (800b4b0 <_ZL12MX_ADC1_Initv+0x178>)
 800b46e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800b470:	2300      	movs	r3, #0
 800b472:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800b474:	2300      	movs	r3, #0
 800b476:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800b47c:	463b      	mov	r3, r7
 800b47e:	4619      	mov	r1, r3
 800b480:	4808      	ldr	r0, [pc, #32]	; (800b4a4 <_ZL12MX_ADC1_Initv+0x16c>)
 800b482:	f001 fc21 	bl	800ccc8 <HAL_ADCEx_InjectedConfigChannel>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	bf14      	ite	ne
 800b48c:	2301      	movne	r3, #1
 800b48e:	2300      	moveq	r3, #0
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <_ZL12MX_ADC1_Initv+0x162>
  {
    Error_Handler();
 800b496:	f000 fa23 	bl	800b8e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800b49a:	bf00      	nop
 800b49c:	3730      	adds	r7, #48	; 0x30
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	200012bc 	.word	0x200012bc
 800b4a8:	40012000 	.word	0x40012000
 800b4ac:	0f000001 	.word	0x0f000001
 800b4b0:	000f0001 	.word	0x000f0001

0800b4b4 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	2200      	movs	r2, #0
 800b4be:	601a      	str	r2, [r3, #0]
 800b4c0:	605a      	str	r2, [r3, #4]
 800b4c2:	609a      	str	r2, [r3, #8]
 800b4c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800b4c6:	4b40      	ldr	r3, [pc, #256]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b4c8:	4a40      	ldr	r2, [pc, #256]	; (800b5cc <_ZL12MX_ADC2_Initv+0x118>)
 800b4ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b4cc:	4b3e      	ldr	r3, [pc, #248]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b4ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b4d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800b4d4:	4b3c      	ldr	r3, [pc, #240]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800b4da:	4b3b      	ldr	r3, [pc, #236]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b4dc:	2201      	movs	r2, #1
 800b4de:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800b4e0:	4b39      	ldr	r3, [pc, #228]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800b4e6:	4b38      	ldr	r3, [pc, #224]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b4ee:	4b36      	ldr	r3, [pc, #216]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b4f4:	4b34      	ldr	r3, [pc, #208]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b4f6:	4a36      	ldr	r2, [pc, #216]	; (800b5d0 <_ZL12MX_ADC2_Initv+0x11c>)
 800b4f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b4fa:	4b33      	ldr	r3, [pc, #204]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 800b500:	4b31      	ldr	r3, [pc, #196]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b502:	2204      	movs	r2, #4
 800b504:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800b506:	4b30      	ldr	r3, [pc, #192]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b50e:	4b2e      	ldr	r3, [pc, #184]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b510:	2201      	movs	r2, #1
 800b512:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800b514:	482c      	ldr	r0, [pc, #176]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b516:	f001 f83d 	bl	800c594 <HAL_ADC_Init>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bf14      	ite	ne
 800b520:	2301      	movne	r3, #1
 800b522:	2300      	moveq	r3, #0
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 800b52a:	f000 f9d9 	bl	800b8e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800b52e:	2301      	movs	r3, #1
 800b530:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800b532:	2301      	movs	r3, #1
 800b534:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800b536:	2300      	movs	r3, #0
 800b538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800b53a:	463b      	mov	r3, r7
 800b53c:	4619      	mov	r1, r3
 800b53e:	4822      	ldr	r0, [pc, #136]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b540:	f001 f99a 	bl	800c878 <HAL_ADC_ConfigChannel>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	bf14      	ite	ne
 800b54a:	2301      	movne	r3, #1
 800b54c:	2300      	moveq	r3, #0
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 800b554:	f000 f9c4 	bl	800b8e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800b558:	2302      	movs	r3, #2
 800b55a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800b55c:	463b      	mov	r3, r7
 800b55e:	4619      	mov	r1, r3
 800b560:	4819      	ldr	r0, [pc, #100]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b562:	f001 f989 	bl	800c878 <HAL_ADC_ConfigChannel>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	bf14      	ite	ne
 800b56c:	2301      	movne	r3, #1
 800b56e:	2300      	moveq	r3, #0
 800b570:	b2db      	uxtb	r3, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <_ZL12MX_ADC2_Initv+0xc6>
  {
    Error_Handler();
 800b576:	f000 f9b3 	bl	800b8e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800b57a:	2303      	movs	r3, #3
 800b57c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800b57e:	463b      	mov	r3, r7
 800b580:	4619      	mov	r1, r3
 800b582:	4811      	ldr	r0, [pc, #68]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b584:	f001 f978 	bl	800c878 <HAL_ADC_ConfigChannel>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	bf14      	ite	ne
 800b58e:	2301      	movne	r3, #1
 800b590:	2300      	moveq	r3, #0
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <_ZL12MX_ADC2_Initv+0xe8>
  {
    Error_Handler();
 800b598:	f000 f9a2 	bl	800b8e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 800b59c:	2304      	movs	r3, #4
 800b59e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800b5a0:	463b      	mov	r3, r7
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4808      	ldr	r0, [pc, #32]	; (800b5c8 <_ZL12MX_ADC2_Initv+0x114>)
 800b5a6:	f001 f967 	bl	800c878 <HAL_ADC_ConfigChannel>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	bf14      	ite	ne
 800b5b0:	2301      	movne	r3, #1
 800b5b2:	2300      	moveq	r3, #0
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <_ZL12MX_ADC2_Initv+0x10a>
  {
    Error_Handler();
 800b5ba:	f000 f991 	bl	800b8e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800b5be:	bf00      	nop
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20001304 	.word	0x20001304
 800b5cc:	40012100 	.word	0x40012100
 800b5d0:	0f000001 	.word	0x0f000001

0800b5d4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800b5d8:	4b1a      	ldr	r3, [pc, #104]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b5da:	4a1b      	ldr	r2, [pc, #108]	; (800b648 <_ZL12MX_SPI2_Initv+0x74>)
 800b5dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b5de:	4b19      	ldr	r3, [pc, #100]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b5e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b5e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b5e6:	4b17      	ldr	r3, [pc, #92]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b5ec:	4b15      	ldr	r3, [pc, #84]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b5f2:	4b14      	ldr	r3, [pc, #80]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b5f8:	4b12      	ldr	r3, [pc, #72]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800b5fe:	4b11      	ldr	r3, [pc, #68]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b600:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b604:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b606:	4b0f      	ldr	r3, [pc, #60]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b608:	2200      	movs	r2, #0
 800b60a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b60c:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b60e:	2200      	movs	r2, #0
 800b610:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b612:	4b0c      	ldr	r3, [pc, #48]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b614:	2200      	movs	r2, #0
 800b616:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b618:	4b0a      	ldr	r3, [pc, #40]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800b61e:	4b09      	ldr	r3, [pc, #36]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b620:	220a      	movs	r2, #10
 800b622:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b624:	4807      	ldr	r0, [pc, #28]	; (800b644 <_ZL12MX_SPI2_Initv+0x70>)
 800b626:	f002 fcc7 	bl	800dfb8 <HAL_SPI_Init>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	bf14      	ite	ne
 800b630:	2301      	movne	r3, #1
 800b632:	2300      	moveq	r3, #0
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d001      	beq.n	800b63e <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800b63a:	f000 f951 	bl	800b8e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800b63e:	bf00      	nop
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	2000134c 	.word	0x2000134c
 800b648:	40003800 	.word	0x40003800

0800b64c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b650:	4b13      	ldr	r3, [pc, #76]	; (800b6a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800b652:	4a14      	ldr	r2, [pc, #80]	; (800b6a4 <_ZL19MX_USART1_UART_Initv+0x58>)
 800b654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b656:	4b12      	ldr	r3, [pc, #72]	; (800b6a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800b658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b65c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b65e:	4b10      	ldr	r3, [pc, #64]	; (800b6a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800b660:	2200      	movs	r2, #0
 800b662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b664:	4b0e      	ldr	r3, [pc, #56]	; (800b6a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800b666:	2200      	movs	r2, #0
 800b668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b66a:	4b0d      	ldr	r3, [pc, #52]	; (800b6a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800b66c:	2200      	movs	r2, #0
 800b66e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b670:	4b0b      	ldr	r3, [pc, #44]	; (800b6a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800b672:	220c      	movs	r2, #12
 800b674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b676:	4b0a      	ldr	r3, [pc, #40]	; (800b6a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800b678:	2200      	movs	r2, #0
 800b67a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b67c:	4b08      	ldr	r3, [pc, #32]	; (800b6a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800b67e:	2200      	movs	r2, #0
 800b680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b682:	4807      	ldr	r0, [pc, #28]	; (800b6a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800b684:	f003 fa6e 	bl	800eb64 <HAL_UART_Init>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	bf14      	ite	ne
 800b68e:	2301      	movne	r3, #1
 800b690:	2300      	moveq	r3, #0
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800b698:	f000 f922 	bl	800b8e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b69c:	bf00      	nop
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	200013a4 	.word	0x200013a4
 800b6a4:	40011000 	.word	0x40011000

0800b6a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b08c      	sub	sp, #48	; 0x30
 800b6ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6ae:	f107 031c 	add.w	r3, r7, #28
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	605a      	str	r2, [r3, #4]
 800b6b8:	609a      	str	r2, [r3, #8]
 800b6ba:	60da      	str	r2, [r3, #12]
 800b6bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b6be:	2300      	movs	r3, #0
 800b6c0:	61bb      	str	r3, [r7, #24]
 800b6c2:	4b71      	ldr	r3, [pc, #452]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c6:	4a70      	ldr	r2, [pc, #448]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b6c8:	f043 0304 	orr.w	r3, r3, #4
 800b6cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ce:	4b6e      	ldr	r3, [pc, #440]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d2:	f003 0304 	and.w	r3, r3, #4
 800b6d6:	61bb      	str	r3, [r7, #24]
 800b6d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]
 800b6de:	4b6a      	ldr	r3, [pc, #424]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e2:	4a69      	ldr	r2, [pc, #420]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ea:	4b67      	ldr	r3, [pc, #412]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6f2:	617b      	str	r3, [r7, #20]
 800b6f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	613b      	str	r3, [r7, #16]
 800b6fa:	4b63      	ldr	r3, [pc, #396]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fe:	4a62      	ldr	r2, [pc, #392]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b700:	f043 0301 	orr.w	r3, r3, #1
 800b704:	6313      	str	r3, [r2, #48]	; 0x30
 800b706:	4b60      	ldr	r3, [pc, #384]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	613b      	str	r3, [r7, #16]
 800b710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b712:	2300      	movs	r3, #0
 800b714:	60fb      	str	r3, [r7, #12]
 800b716:	4b5c      	ldr	r3, [pc, #368]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b71a:	4a5b      	ldr	r2, [pc, #364]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b71c:	f043 0310 	orr.w	r3, r3, #16
 800b720:	6313      	str	r3, [r2, #48]	; 0x30
 800b722:	4b59      	ldr	r3, [pc, #356]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b726:	f003 0310 	and.w	r3, r3, #16
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b72e:	2300      	movs	r3, #0
 800b730:	60bb      	str	r3, [r7, #8]
 800b732:	4b55      	ldr	r3, [pc, #340]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b736:	4a54      	ldr	r2, [pc, #336]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b738:	f043 0302 	orr.w	r3, r3, #2
 800b73c:	6313      	str	r3, [r2, #48]	; 0x30
 800b73e:	4b52      	ldr	r3, [pc, #328]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b742:	f003 0302 	and.w	r3, r3, #2
 800b746:	60bb      	str	r3, [r7, #8]
 800b748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b74a:	2300      	movs	r3, #0
 800b74c:	607b      	str	r3, [r7, #4]
 800b74e:	4b4e      	ldr	r3, [pc, #312]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b752:	4a4d      	ldr	r2, [pc, #308]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b754:	f043 0308 	orr.w	r3, r3, #8
 800b758:	6313      	str	r3, [r2, #48]	; 0x30
 800b75a:	4b4b      	ldr	r3, [pc, #300]	; (800b888 <_ZL12MX_GPIO_Initv+0x1e0>)
 800b75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75e:	f003 0308 	and.w	r3, r3, #8
 800b762:	607b      	str	r3, [r7, #4]
 800b764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, switch5_Pin|switch6_Pin|switch7_Pin|switch8_Pin, GPIO_PIN_RESET);
 800b766:	2200      	movs	r2, #0
 800b768:	21f0      	movs	r1, #240	; 0xf0
 800b76a:	4848      	ldr	r0, [pc, #288]	; (800b88c <_ZL12MX_GPIO_Initv+0x1e4>)
 800b76c:	f001 ff9a 	bl	800d6a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RESET_GPIO_Port, W5500_RESET_Pin, GPIO_PIN_RESET);
 800b770:	2200      	movs	r2, #0
 800b772:	2120      	movs	r1, #32
 800b774:	4846      	ldr	r0, [pc, #280]	; (800b890 <_ZL12MX_GPIO_Initv+0x1e8>)
 800b776:	f001 ff95 	bl	800d6a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, switch1_Pin|switch2_Pin|switch3_Pin|switch4_Pin
 800b77a:	2200      	movs	r2, #0
 800b77c:	f24f 0102 	movw	r1, #61442	; 0xf002
 800b780:	4844      	ldr	r0, [pc, #272]	; (800b894 <_ZL12MX_GPIO_Initv+0x1ec>)
 800b782:	f001 ff8f 	bl	800d6a4 <HAL_GPIO_WritePin>
                          |sound_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 800b786:	2200      	movs	r2, #0
 800b788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b78c:	4842      	ldr	r0, [pc, #264]	; (800b898 <_ZL12MX_GPIO_Initv+0x1f0>)
 800b78e:	f001 ff89 	bl	800d6a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 800b792:	f240 33cf 	movw	r3, #975	; 0x3cf
 800b796:	61fb      	str	r3, [r7, #28]
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b798:	2300      	movs	r3, #0
 800b79a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b79c:	2302      	movs	r3, #2
 800b79e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b7a0:	f107 031c 	add.w	r3, r7, #28
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	483a      	ldr	r0, [pc, #232]	; (800b890 <_ZL12MX_GPIO_Initv+0x1e8>)
 800b7a8:	f001 fdc8 	bl	800d33c <HAL_GPIO_Init>

  /*Configure GPIO pins : switch5_Pin switch6_Pin switch7_Pin switch8_Pin */
  GPIO_InitStruct.Pin = switch5_Pin|switch6_Pin|switch7_Pin|switch8_Pin;
 800b7ac:	23f0      	movs	r3, #240	; 0xf0
 800b7ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7bc:	f107 031c 	add.w	r3, r7, #28
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4832      	ldr	r0, [pc, #200]	; (800b88c <_ZL12MX_GPIO_Initv+0x1e4>)
 800b7c4:	f001 fdba 	bl	800d33c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RESET_Pin */
  GPIO_InitStruct.Pin = W5500_RESET_Pin;
 800b7c8:	2320      	movs	r3, #32
 800b7ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_RESET_GPIO_Port, &GPIO_InitStruct);
 800b7d8:	f107 031c 	add.w	r3, r7, #28
 800b7dc:	4619      	mov	r1, r3
 800b7de:	482c      	ldr	r0, [pc, #176]	; (800b890 <_ZL12MX_GPIO_Initv+0x1e8>)
 800b7e0:	f001 fdac 	bl	800d33c <HAL_GPIO_Init>

  /*Configure GPIO pin : NetworkStatus_Pin */
  GPIO_InitStruct.Pin = NetworkStatus_Pin;
 800b7e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b7ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800b7ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NetworkStatus_GPIO_Port, &GPIO_InitStruct);
 800b7f4:	f107 031c 	add.w	r3, r7, #28
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4826      	ldr	r0, [pc, #152]	; (800b894 <_ZL12MX_GPIO_Initv+0x1ec>)
 800b7fc:	f001 fd9e 	bl	800d33c <HAL_GPIO_Init>

  /*Configure GPIO pins : switch1_Pin switch2_Pin switch3_Pin switch4_Pin
                           sound_Pin */
  GPIO_InitStruct.Pin = switch1_Pin|switch2_Pin|switch3_Pin|switch4_Pin
 800b800:	f24f 0302 	movw	r3, #61442	; 0xf002
 800b804:	61fb      	str	r3, [r7, #28]
                          |sound_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b806:	2301      	movs	r3, #1
 800b808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b80e:	2300      	movs	r3, #0
 800b810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b812:	f107 031c 	add.w	r3, r7, #28
 800b816:	4619      	mov	r1, r3
 800b818:	481e      	ldr	r0, [pc, #120]	; (800b894 <_ZL12MX_GPIO_Initv+0x1ec>)
 800b81a:	f001 fd8f 	bl	800d33c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 800b81e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b824:	2301      	movs	r3, #1
 800b826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b828:	2300      	movs	r3, #0
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b82c:	2300      	movs	r3, #0
 800b82e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 800b830:	f107 031c 	add.w	r3, r7, #28
 800b834:	4619      	mov	r1, r3
 800b836:	4818      	ldr	r0, [pc, #96]	; (800b898 <_ZL12MX_GPIO_Initv+0x1f0>)
 800b838:	f001 fd80 	bl	800d33c <HAL_GPIO_Init>

  /*Configure GPIO pins : DI5_Pin DI6_Pin DI7_Pin DI8_Pin */
  GPIO_InitStruct.Pin = DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin;
 800b83c:	f44f 531c 	mov.w	r3, #9984	; 0x2700
 800b840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b842:	2300      	movs	r3, #0
 800b844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b846:	2302      	movs	r3, #2
 800b848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b84a:	f107 031c 	add.w	r3, r7, #28
 800b84e:	4619      	mov	r1, r3
 800b850:	4812      	ldr	r0, [pc, #72]	; (800b89c <_ZL12MX_GPIO_Initv+0x1f4>)
 800b852:	f001 fd73 	bl	800d33c <HAL_GPIO_Init>

  /*Configure GPIO pins : DI13_Pin DI14_Pin DI15_Pin DI16_Pin */
  GPIO_InitStruct.Pin = DI13_Pin|DI14_Pin|DI15_Pin|DI16_Pin;
 800b856:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800b85a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b85c:	2300      	movs	r3, #0
 800b85e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b860:	2302      	movs	r3, #2
 800b862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b864:	f107 031c 	add.w	r3, r7, #28
 800b868:	4619      	mov	r1, r3
 800b86a:	4808      	ldr	r0, [pc, #32]	; (800b88c <_ZL12MX_GPIO_Initv+0x1e4>)
 800b86c:	f001 fd66 	bl	800d33c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800b870:	2200      	movs	r2, #0
 800b872:	2100      	movs	r1, #0
 800b874:	2028      	movs	r0, #40	; 0x28
 800b876:	f001 fc98 	bl	800d1aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800b87a:	2028      	movs	r0, #40	; 0x28
 800b87c:	f001 fcb1 	bl	800d1e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800b880:	bf00      	nop
 800b882:	3730      	adds	r7, #48	; 0x30
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	40023800 	.word	0x40023800
 800b88c:	40020000 	.word	0x40020000
 800b890:	40020800 	.word	0x40020800
 800b894:	40021000 	.word	0x40021000
 800b898:	40020400 	.word	0x40020400
 800b89c:	40020c00 	.word	0x40020c00

0800b8a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11) {
    //  UART_Printf("Internet connection lost \r\n");
    }
}
 800b8aa:	bf00      	nop
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
	...

0800b8b8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a04      	ldr	r2, [pc, #16]	; (800b8d8 <HAL_UART_RxCpltCallback+0x20>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d102      	bne.n	800b8d0 <HAL_UART_RxCpltCallback+0x18>
      //utils.print("Interrupt has been recieved! \r\n");
       uartHandler.onReceive();
 800b8ca:	4804      	ldr	r0, [pc, #16]	; (800b8dc <HAL_UART_RxCpltCallback+0x24>)
 800b8cc:	f7fd fc0e 	bl	80090ec <_ZN11UARTHandler9onReceiveEv>
    }
}
 800b8d0:	bf00      	nop
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	40011000 	.word	0x40011000
 800b8dc:	20001c98 	.word	0x20001c98

0800b8e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b8e4:	b672      	cpsid	i
}
 800b8e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b8e8:	e7fe      	b.n	800b8e8 <Error_Handler+0x8>

0800b8ea <_ZN5UtilsD1Ev>:
public:
    std::string name;
    int status;
};

class Utils {
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff fbf3 	bl	800b0e0 <_ZN6ConfigD1Ev>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d119      	bne.n	800b948 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d114      	bne.n	800b948 <_Z41__static_initialization_and_destruction_0ii+0x44>
Config config;
 800b91e:	4819      	ldr	r0, [pc, #100]	; (800b984 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800b920:	f7fd fdae 	bl	8009480 <_ZN6ConfigC1Ev>
Utils utils;
 800b924:	4818      	ldr	r0, [pc, #96]	; (800b988 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800b926:	f7fc fcbe 	bl	80082a6 <_ZN5UtilsC1Ev>
EthernetManager ethManager;
 800b92a:	4818      	ldr	r0, [pc, #96]	; (800b98c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800b92c:	f7fd f8a3 	bl	8008a76 <_ZN15EthernetManagerC1Ev>
MQTTConnection mqttClient;
 800b930:	4817      	ldr	r0, [pc, #92]	; (800b990 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800b932:	f000 f845 	bl	800b9c0 <_ZN14MQTTConnectionC1Ev>
UARTHandler uartHandler;
 800b936:	4817      	ldr	r0, [pc, #92]	; (800b994 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800b938:	f7fd fb5c 	bl	8008ff4 <_ZN11UARTHandlerC1Ev>
static std::string statusJsonBuffer;
 800b93c:	4816      	ldr	r0, [pc, #88]	; (800b998 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800b93e:	f004 fa35 	bl	800fdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
static std::string statusJsonUSARTBuffer;
 800b942:	4816      	ldr	r0, [pc, #88]	; (800b99c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800b944:	f004 fa32 	bl	800fdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d116      	bne.n	800b97c <_Z41__static_initialization_and_destruction_0ii+0x78>
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b954:	4293      	cmp	r3, r2
 800b956:	d111      	bne.n	800b97c <_Z41__static_initialization_and_destruction_0ii+0x78>
 800b958:	4810      	ldr	r0, [pc, #64]	; (800b99c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800b95a:	f004 fa35 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
static std::string statusJsonBuffer;
 800b95e:	480e      	ldr	r0, [pc, #56]	; (800b998 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800b960:	f004 fa32 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
MQTTConnection mqttClient;
 800b964:	480a      	ldr	r0, [pc, #40]	; (800b990 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800b966:	f000 f9d7 	bl	800bd18 <_ZN14MQTTConnectionD1Ev>
EthernetManager ethManager;
 800b96a:	4808      	ldr	r0, [pc, #32]	; (800b98c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800b96c:	f7fd f878 	bl	8008a60 <_ZN15EthernetManagerD1Ev>
Utils utils;
 800b970:	4805      	ldr	r0, [pc, #20]	; (800b988 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800b972:	f7ff ffba 	bl	800b8ea <_ZN5UtilsD1Ev>
Config config;
 800b976:	4803      	ldr	r0, [pc, #12]	; (800b984 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800b978:	f7ff fbb2 	bl	800b0e0 <_ZN6ConfigD1Ev>
}
 800b97c:	bf00      	nop
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	200013ec 	.word	0x200013ec
 800b988:	20001788 	.word	0x20001788
 800b98c:	20001c24 	.word	0x20001c24
 800b990:	20001c28 	.word	0x20001c28
 800b994:	20001c98 	.word	0x20001c98
 800b998:	200022b8 	.word	0x200022b8
 800b99c:	200022d0 	.word	0x200022d0

0800b9a0 <_GLOBAL__sub_I_hadc1>:
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b9a8:	2001      	movs	r0, #1
 800b9aa:	f7ff ffab 	bl	800b904 <_Z41__static_initialization_and_destruction_0ii>
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <_GLOBAL__sub_D_hadc1>:
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	f7ff ffa3 	bl	800b904 <_Z41__static_initialization_and_destruction_0ii>
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <_ZN14MQTTConnectionC1Ev>:
uint8_t MQTTConnection::send_buffer[2048];
uint8_t MQTTConnection::recieve_buff[2048];
MQTTConnection* MQTTConnection::instance = nullptr;


MQTTConnection::MQTTConnection() {
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]

	MQTTConnection::instance = this;
 800b9c8:	4a04      	ldr	r2, [pc, #16]	; (800b9dc <_ZN14MQTTConnectionC1Ev+0x1c>)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6013      	str	r3, [r2, #0]

}
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	200032e8 	.word	0x200032e8

0800b9e0 <_ZN14MQTTConnection4initE6ConfigP5Utils>:

void MQTTConnection::init(Config config, Utils * utilInstance) {
 800b9e0:	b5b0      	push	{r4, r5, r7, lr}
 800b9e2:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 800b9e6:	af04      	add	r7, sp, #16
 800b9e8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b9ec:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800b9f0:	6018      	str	r0, [r3, #0]
 800b9f2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b9f6:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800b9fa:	6019      	str	r1, [r3, #0]
 800b9fc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ba00:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800ba04:	601a      	str	r2, [r3, #0]
	    utils = utilInstance;
 800ba06:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ba0a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ba14:	f5a2 726b 	sub.w	r2, r2, #940	; 0x3ac
 800ba18:	6812      	ldr	r2, [r2, #0]
 800ba1a:	601a      	str	r2, [r3, #0]
	    NewNetwork(&network, 1);
 800ba1c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ba20:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3360      	adds	r3, #96	; 0x60
 800ba28:	2101      	movs	r1, #1
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fb fcd0 	bl	80073d0 <NewNetwork>
	    ConnectNetwork(&network, config.getBrokerIP().data(), config.getBrokerPort());
 800ba30:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ba34:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800ba3e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ba42:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800ba46:	6818      	ldr	r0, [r3, #0]
 800ba48:	f7fe ff2d 	bl	800a8a6 <_ZNK6Config11getBrokerIPEv>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ba52:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800ba56:	601a      	str	r2, [r3, #0]
 800ba58:	f107 0310 	add.w	r3, r7, #16
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fd fab1 	bl	8008fc4 <_ZNSt5arrayIhLj4EE4dataEv>
 800ba62:	4605      	mov	r5, r0
 800ba64:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ba68:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800ba6c:	6818      	ldr	r0, [r3, #0]
 800ba6e:	f7fe ff34 	bl	800a8da <_ZNK6Config13getBrokerPortEv>
 800ba72:	4603      	mov	r3, r0
 800ba74:	461a      	mov	r2, r3
 800ba76:	4629      	mov	r1, r5
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f7fb fd26 	bl	80074ca <ConnectNetwork>
	    MQTTClientInit(&mqttClient, &network, 1000,send_buffer , sizeof(send_buffer), recieve_buff, sizeof(recieve_buff));
 800ba7e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ba82:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	1d18      	adds	r0, r3, #4
 800ba8a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ba8e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800ba98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba9c:	9302      	str	r3, [sp, #8]
 800ba9e:	4b18      	ldr	r3, [pc, #96]	; (800bb00 <_ZN14MQTTConnection4initE6ConfigP5Utils+0x120>)
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	4b16      	ldr	r3, [pc, #88]	; (800bb04 <_ZN14MQTTConnection4initE6ConfigP5Utils+0x124>)
 800baaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800baae:	f7fa fed1 	bl	8006854 <MQTTClientInit>
	    if (!connect(config)) {
 800bab2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800bab6:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800baba:	f107 0214 	add.w	r2, r7, #20
 800babe:	6819      	ldr	r1, [r3, #0]
 800bac0:	4610      	mov	r0, r2
 800bac2:	f7ff fa87 	bl	800afd4 <_ZN6ConfigC1ERKS_>
 800bac6:	f107 0214 	add.w	r2, r7, #20
 800baca:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800bace:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800bad2:	4611      	mov	r1, r2
 800bad4:	6818      	ldr	r0, [r3, #0]
 800bad6:	f000 f819 	bl	800bb0c <_ZN14MQTTConnection7connectE6Config>
 800bada:	4603      	mov	r3, r0
 800badc:	f083 0301 	eor.w	r3, r3, #1
 800bae0:	b2dc      	uxtb	r4, r3
 800bae2:	f107 0314 	add.w	r3, r7, #20
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7ff fafa 	bl	800b0e0 <_ZN6ConfigD1Ev>
 800baec:	2c00      	cmp	r4, #0
 800baee:	d002      	beq.n	800baf6 <_ZN14MQTTConnection4initE6ConfigP5Utils+0x116>
	     	utils->print("MQTT Connection has been failed\r\n");
 800baf0:	4805      	ldr	r0, [pc, #20]	; (800bb08 <_ZN14MQTTConnection4initE6ConfigP5Utils+0x128>)
 800baf2:	f7fc fd99 	bl	8008628 <_ZN5Utils5printEPKcz>
	      }
}
 800baf6:	bf00      	nop
 800baf8:	f507 776c 	add.w	r7, r7, #944	; 0x3b0
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bdb0      	pop	{r4, r5, r7, pc}
 800bb00:	20002ae8 	.word	0x20002ae8
 800bb04:	200022e8 	.word	0x200022e8
 800bb08:	0801422c 	.word	0x0801422c

0800bb0c <_ZN14MQTTConnection7connectE6Config>:

bool MQTTConnection::connect(Config config) {
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b0aa      	sub	sp, #168	; 0xa8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
    // Set MQTT connection parameters
    MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 800bb16:	4a34      	ldr	r2, [pc, #208]	; (800bbe8 <_ZN14MQTTConnection7connectE6Config+0xdc>)
 800bb18:	f107 0308 	add.w	r3, r7, #8
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	2258      	movs	r2, #88	; 0x58
 800bb20:	4618      	mov	r0, r3
 800bb22:	f005 fcd8 	bl	80114d6 <memcpy>
    connectData.MQTTVersion = 3;
 800bb26:	2303      	movs	r3, #3
 800bb28:	743b      	strb	r3, [r7, #16]
    connectData.clientID.cstring = strdup(config.getClientId().c_str());
 800bb2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bb2e:	6839      	ldr	r1, [r7, #0]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7fe ff79 	bl	800aa28 <_ZNK6Config11getClientIdB5cxx11Ev>
 800bb36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f004 fa68 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800bb40:	4603      	mov	r3, r0
 800bb42:	4618      	mov	r0, r3
 800bb44:	f005 fbd0 	bl	80112e8 <strdup>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	617b      	str	r3, [r7, #20]
 800bb4c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bb50:	4618      	mov	r0, r3
 800bb52:	f004 f939 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    connectData.username.cstring = const_cast<char*>(config.getUsername().c_str());
 800bb56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fe ff54 	bl	800aa0a <_ZNK6Config11getUsernameB5cxx11Ev>
 800bb62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb66:	4618      	mov	r0, r3
 800bb68:	f004 fa52 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb74:	4618      	mov	r0, r3
 800bb76:	f004 f927 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    connectData.password.cstring = const_cast<char*>(config.getPassword().c_str());
 800bb7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bb7e:	6839      	ldr	r1, [r7, #0]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fe ff60 	bl	800aa46 <_ZNK6Config11getPasswordB5cxx11Ev>
 800bb86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f004 fa40 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800bb90:	4603      	mov	r3, r0
 800bb92:	657b      	str	r3, [r7, #84]	; 0x54
 800bb94:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f004 f915 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    connectData.keepAliveInterval = config.getKeepAliveInterval();
 800bb9e:	6838      	ldr	r0, [r7, #0]
 800bba0:	f7fe ff1b 	bl	800a9da <_ZNK6Config20getKeepAliveIntervalEv>
 800bba4:	4603      	mov	r3, r0
 800bba6:	843b      	strh	r3, [r7, #32]
    connectData.cleansession = 1;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    // Attempt to connect to the MQTT broker
    if (MQTTConnect(&mqttClient, &connectData) != SUCCESS) {
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	3304      	adds	r3, #4
 800bbb2:	f107 0208 	add.w	r2, r7, #8
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fb f975 	bl	8006ea8 <MQTTConnect>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bf14      	ite	ne
 800bbc4:	2301      	movne	r3, #1
 800bbc6:	2300      	moveq	r3, #0
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d004      	beq.n	800bbd8 <_ZN14MQTTConnection7connectE6Config+0xcc>
        utils->print("Connection failed!\n");
 800bbce:	4807      	ldr	r0, [pc, #28]	; (800bbec <_ZN14MQTTConnection7connectE6Config+0xe0>)
 800bbd0:	f7fc fd2a 	bl	8008628 <_ZN5Utils5printEPKcz>
        return false;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	e003      	b.n	800bbe0 <_ZN14MQTTConnection7connectE6Config+0xd4>
    }

   utils->print("Successfully connected to MQTT broker.\r\n");
 800bbd8:	4805      	ldr	r0, [pc, #20]	; (800bbf0 <_ZN14MQTTConnection7connectE6Config+0xe4>)
 800bbda:	f7fc fd25 	bl	8008628 <_ZN5Utils5printEPKcz>
    return true;
 800bbde:	2301      	movs	r3, #1
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	37a8      	adds	r7, #168	; 0xa8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	08014290 	.word	0x08014290
 800bbec:	08014250 	.word	0x08014250
 800bbf0:	08014264 	.word	0x08014264

0800bbf4 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config>:

bool MQTTConnection::publish(const std::string& message, Config config) {
 800bbf4:	b590      	push	{r4, r7, lr}
 800bbf6:	b091      	sub	sp, #68	; 0x44
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
    MQTTMessage mqttMessage;
    mqttMessage.qos = QOS0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	753b      	strb	r3, [r7, #20]
    mqttMessage.retained = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	757b      	strb	r3, [r7, #21]
    mqttMessage.dup = 0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	75bb      	strb	r3, [r7, #22]
    const char* cMessage = message.c_str();
 800bc0c:	68b8      	ldr	r0, [r7, #8]
 800bc0e:	f004 f9ff 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800bc12:	63f8      	str	r0, [r7, #60]	; 0x3c
    mqttMessage.payload = (void*)cMessage;
 800bc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc16:	61fb      	str	r3, [r7, #28]
    mqttMessage.payloadlen = message.length();
 800bc18:	68b8      	ldr	r0, [r7, #8]
 800bc1a:	f004 f90e 	bl	800fe3a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	623b      	str	r3, [r7, #32]

    if (MQTTPublish(&mqttClient, config.getTopicPublish().c_str(), &mqttMessage) != SUCCESS) {
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	1d1c      	adds	r4, r3, #4
 800bc26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc2a:	6879      	ldr	r1, [r7, #4]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7fe ff28 	bl	800aa82 <_ZNK6Config15getTopicPublishB5cxx11Ev>
 800bc32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc36:	4618      	mov	r0, r3
 800bc38:	f004 f9ea 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800bc3c:	4601      	mov	r1, r0
 800bc3e:	f107 0314 	add.w	r3, r7, #20
 800bc42:	461a      	mov	r2, r3
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7fb fa5e 	bl	8007106 <MQTTPublish>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	bf14      	ite	ne
 800bc50:	2301      	movne	r3, #1
 800bc52:	2300      	moveq	r3, #0
 800bc54:	b2dc      	uxtb	r4, r3
 800bc56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f004 f8b4 	bl	800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bc60:	2c00      	cmp	r4, #0
 800bc62:	d004      	beq.n	800bc6e <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config+0x7a>
      utils->print("Publish failed! \r\n");
 800bc64:	4806      	ldr	r0, [pc, #24]	; (800bc80 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config+0x8c>)
 800bc66:	f7fc fcdf 	bl	8008628 <_ZN5Utils5printEPKcz>
        return false;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e003      	b.n	800bc76 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config+0x82>
    }

     utils->print("Message published successfully.\r\n");
 800bc6e:	4805      	ldr	r0, [pc, #20]	; (800bc84 <_ZN14MQTTConnection7publishERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE6Config+0x90>)
 800bc70:	f7fc fcda 	bl	8008628 <_ZN5Utils5printEPKcz>
    return true;
 800bc74:	2301      	movs	r3, #1
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3744      	adds	r7, #68	; 0x44
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd90      	pop	{r4, r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	080142e8 	.word	0x080142e8
 800bc84:	080142fc 	.word	0x080142fc

0800bc88 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void MQTTConnection::subscribe(std::string topic) {
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
	const char* subTopic = strdup(topic.c_str());
 800bc92:	6838      	ldr	r0, [r7, #0]
 800bc94:	f004 f9bc 	bl	8010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f005 fb24 	bl	80112e8 <strdup>
 800bca0:	4603      	mov	r3, r0
 800bca2:	60fb      	str	r3, [r7, #12]
    if (MQTTSubscribe(&mqttClient, subTopic, QOS0,  handleMessage) != SUCCESS) {
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	1d18      	adds	r0, r3, #4
 800bca8:	4b0b      	ldr	r3, [pc, #44]	; (800bcd8 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	68f9      	ldr	r1, [r7, #12]
 800bcae:	f7fb f981 	bl	8006fb4 <MQTTSubscribe>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	bf14      	ite	ne
 800bcb8:	2301      	movne	r3, #1
 800bcba:	2300      	moveq	r3, #0
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
       utils->print("Subscribe failed!\n");
 800bcc2:	4806      	ldr	r0, [pc, #24]	; (800bcdc <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>)
 800bcc4:	f7fc fcb0 	bl	8008628 <_ZN5Utils5printEPKcz>
    } else {
       utils->print("Subscribed to topic successfully.\r\n");
    }
}
 800bcc8:	e002      	b.n	800bcd0 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>
       utils->print("Subscribed to topic successfully.\r\n");
 800bcca:	4805      	ldr	r0, [pc, #20]	; (800bce0 <_ZN14MQTTConnection9subscribeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>)
 800bccc:	f7fc fcac 	bl	8008628 <_ZN5Utils5printEPKcz>
}
 800bcd0:	bf00      	nop
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	0800bce5 	.word	0x0800bce5
 800bcdc:	08014320 	.word	0x08014320
 800bce0:	08014334 	.word	0x08014334

0800bce4 <_ZN14MQTTConnection13handleMessageEP11MessageData>:

void MQTTConnection::handleMessage(MessageData* data) {
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
	print("Message has been arrived !!! \r\n");
 800bcec:	4808      	ldr	r0, [pc, #32]	; (800bd10 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x2c>)
 800bcee:	f7fc fe87 	bl	8008a00 <_Z5printPKcz>
	 if (MQTTConnection::instance) {
 800bcf2:	4b08      	ldr	r3, [pc, #32]	; (800bd14 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x30>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d005      	beq.n	800bd06 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x22>
           MQTTConnection::instance->handleIncomingMessage(data);
 800bcfa:	4b06      	ldr	r3, [pc, #24]	; (800bd14 <_ZN14MQTTConnection13handleMessageEP11MessageData+0x30>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f000 f841 	bl	800bd88 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData>
	  }
}
 800bd06:	bf00      	nop
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	08014358 	.word	0x08014358
 800bd14:	200032e8 	.word	0x200032e8

0800bd18 <_ZN14MQTTConnectionD1Ev>:



MQTTConnection::~MQTTConnection() {
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
    // Clean up resources, if necessary
    disconnect();
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f80f 	bl	800bd44 <_ZN14MQTTConnection10disconnectEv>
    if (MQTTConnection::instance == this) {
 800bd26:	4b06      	ldr	r3, [pc, #24]	; (800bd40 <_ZN14MQTTConnectionD1Ev+0x28>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d102      	bne.n	800bd36 <_ZN14MQTTConnectionD1Ev+0x1e>
    	MQTTConnection::instance = nullptr;
 800bd30:	4b03      	ldr	r3, [pc, #12]	; (800bd40 <_ZN14MQTTConnectionD1Ev+0x28>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	601a      	str	r2, [r3, #0]
    }
}
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	200032e8 	.word	0x200032e8

0800bd44 <_ZN14MQTTConnection10disconnectEv>:

void MQTTConnection::disconnect() {
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
    // Disconnect from the MQTT broker
    MQTTDisconnect(&mqttClient);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fb fa97 	bl	8007284 <MQTTDisconnect>
    utils->print("Disconnected from MQTT broker.\n");
 800bd56:	4803      	ldr	r0, [pc, #12]	; (800bd64 <_ZN14MQTTConnection10disconnectEv+0x20>)
 800bd58:	f7fc fc66 	bl	8008628 <_ZN5Utils5printEPKcz>
}
 800bd5c:	bf00      	nop
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	08014378 	.word	0x08014378

0800bd68 <_ZN14MQTTConnection9mqttYieldEv>:

void MQTTConnection::mqttYield() {
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
	  MQTTYield(&mqttClient, 1000);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3304      	adds	r3, #4
 800bd74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fb f851 	bl	8006e20 <MQTTYield>
}
 800bd7e:	bf00      	nop
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
	...

0800bd88 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData>:


void MQTTConnection::handleIncomingMessage(MessageData* data) {
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800bd94:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800bd98:	6018      	str	r0, [r3, #0]
 800bd9a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800bd9e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800bda2:	6019      	str	r1, [r3, #0]
	    if (data->message->payloadlen >= 1024) {
 800bda4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800bda8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdb6:	d303      	bcc.n	800bdc0 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x38>
	        utils->print("Data size is bigger than expected \r\n");
 800bdb8:	4853      	ldr	r0, [pc, #332]	; (800bf08 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x180>)
 800bdba:	f7fc fc35 	bl	8008628 <_ZN5Utils5printEPKcz>
	        return;
 800bdbe:	e09f      	b.n	800bf00 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x178>
	    }
	    char payloadStr[1024]; // Static allocation
	    memcpy(payloadStr, data->message->payload, data->message->payloadlen);
 800bdc0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800bdc4:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6899      	ldr	r1, [r3, #8]
 800bdce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800bdd2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68da      	ldr	r2, [r3, #12]
 800bddc:	f107 0314 	add.w	r3, r7, #20
 800bde0:	4618      	mov	r0, r3
 800bde2:	f005 fb78 	bl	80114d6 <memcpy>
	    payloadStr[data->message->payloadlen] = '\0'; // Null-terminate
 800bde6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800bdea:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800bdf8:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	54d1      	strb	r1, [r2, r3]

	    cJSON *json = cJSON_Parse(payloadStr);
 800be00:	f107 0314 	add.w	r3, r7, #20
 800be04:	4618      	mov	r0, r3
 800be06:	f7f9 fc35 	bl	8005674 <cJSON_Parse>
 800be0a:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
	    if (!json) {
 800be0e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800be12:	2b00      	cmp	r3, #0
 800be14:	d103      	bne.n	800be1e <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x96>
	    	utils->print("JSON format is not matching!!! \r\n");
 800be16:	483d      	ldr	r0, [pc, #244]	; (800bf0c <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x184>)
 800be18:	f7fc fc06 	bl	8008628 <_ZN5Utils5printEPKcz>
	        return;
 800be1c:	e070      	b.n	800bf00 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x178>
	    }
	    const cJSON *number = cJSON_GetObjectItemCaseSensitive(json, "number");
 800be1e:	493c      	ldr	r1, [pc, #240]	; (800bf10 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x188>)
 800be20:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 800be24:	f7fa fa7e 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800be28:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
	    const cJSON *status = cJSON_GetObjectItemCaseSensitive(json, "status");
 800be2c:	4939      	ldr	r1, [pc, #228]	; (800bf14 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x18c>)
 800be2e:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 800be32:	f7fa fa77 	bl	8006324 <cJSON_GetObjectItemCaseSensitive>
 800be36:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c

	    if (cJSON_IsNumber(number) && cJSON_IsNumber(status)) {
 800be3a:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 800be3e:	f7fa fc50 	bl	80066e2 <cJSON_IsNumber>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d008      	beq.n	800be5a <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0xd2>
 800be48:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 800be4c:	f7fa fc49 	bl	80066e2 <cJSON_IsNumber>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0xd2>
 800be56:	2301      	movs	r3, #1
 800be58:	e000      	b.n	800be5c <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0xd4>
 800be5a:	2300      	movs	r3, #0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d04b      	beq.n	800bef8 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x170>

	    	if (number->valueint >= 1 && number->valueint <= 8) {
 800be60:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	dd46      	ble.n	800bef8 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x170>
 800be6a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	2b08      	cmp	r3, #8
 800be72:	dc41      	bgt.n	800bef8 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x170>
	    	    int arrayIndex = number->valueint - 1;
 800be74:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	    	    PortAndPins targetSwitch = utils->switches[arrayIndex];
 800be80:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800be84:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800be90:	f2a3 411c 	subw	r1, r3, #1052	; 0x41c
 800be94:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800be98:	3373      	adds	r3, #115	; 0x73
 800be9a:	00db      	lsls	r3, r3, #3
 800be9c:	4413      	add	r3, r2
 800be9e:	460a      	mov	r2, r1
 800bea0:	3304      	adds	r3, #4
 800bea2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bea6:	e882 0003 	stmia.w	r2, {r0, r1}
	    	    bool success = utils->switchRelay(targetSwitch.port, targetSwitch.pin, status->valueint);
 800beaa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800beae:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6818      	ldr	r0, [r3, #0]
 800beb6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800beba:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800bebe:	6819      	ldr	r1, [r3, #0]
 800bec0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800bec4:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800bec8:	889a      	ldrh	r2, [r3, #4]
 800beca:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800bece:	695b      	ldr	r3, [r3, #20]
 800bed0:	f7fc fbf0 	bl	80086b4 <_ZN5Utils11switchRelayEP12GPIO_TypeDefti>
 800bed4:	4603      	mov	r3, r0
 800bed6:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	    	    if (success) {
 800beda:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d007      	beq.n	800bef2 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x16a>
	    	        utils->print("The %d switch has been toggled.\r\n", number->valueint);
 800bee2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800bee6:	695b      	ldr	r3, [r3, #20]
 800bee8:	4619      	mov	r1, r3
 800beea:	480b      	ldr	r0, [pc, #44]	; (800bf18 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x190>)
 800beec:	f7fc fb9c 	bl	8008628 <_ZN5Utils5printEPKcz>
 800bef0:	e002      	b.n	800bef8 <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x170>
	    	    } else {
	    	        utils->print("There is an issue with switch \r\n");
 800bef2:	480a      	ldr	r0, [pc, #40]	; (800bf1c <_ZN14MQTTConnection21handleIncomingMessageEP11MessageData+0x194>)
 800bef4:	f7fc fb98 	bl	8008628 <_ZN5Utils5printEPKcz>
	    	    }
	    	}
	    }
	    cJSON_Delete(json);
 800bef8:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 800befc:	f7f8 fbae 	bl	800465c <cJSON_Delete>
}
 800bf00:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	08014398 	.word	0x08014398
 800bf0c:	080143c0 	.word	0x080143c0
 800bf10:	080143e4 	.word	0x080143e4
 800bf14:	080143ec 	.word	0x080143ec
 800bf18:	080143f4 	.word	0x080143f4
 800bf1c:	08014418 	.word	0x08014418

0800bf20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf26:	2300      	movs	r3, #0
 800bf28:	607b      	str	r3, [r7, #4]
 800bf2a:	4b10      	ldr	r3, [pc, #64]	; (800bf6c <HAL_MspInit+0x4c>)
 800bf2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf2e:	4a0f      	ldr	r2, [pc, #60]	; (800bf6c <HAL_MspInit+0x4c>)
 800bf30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf34:	6453      	str	r3, [r2, #68]	; 0x44
 800bf36:	4b0d      	ldr	r3, [pc, #52]	; (800bf6c <HAL_MspInit+0x4c>)
 800bf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf3e:	607b      	str	r3, [r7, #4]
 800bf40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bf42:	2300      	movs	r3, #0
 800bf44:	603b      	str	r3, [r7, #0]
 800bf46:	4b09      	ldr	r3, [pc, #36]	; (800bf6c <HAL_MspInit+0x4c>)
 800bf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4a:	4a08      	ldr	r2, [pc, #32]	; (800bf6c <HAL_MspInit+0x4c>)
 800bf4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf50:	6413      	str	r3, [r2, #64]	; 0x40
 800bf52:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <HAL_MspInit+0x4c>)
 800bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf5a:	603b      	str	r3, [r7, #0]
 800bf5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bf5e:	bf00      	nop
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	40023800 	.word	0x40023800

0800bf70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08c      	sub	sp, #48	; 0x30
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf78:	f107 031c 	add.w	r3, r7, #28
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	605a      	str	r2, [r3, #4]
 800bf82:	609a      	str	r2, [r3, #8]
 800bf84:	60da      	str	r2, [r3, #12]
 800bf86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a36      	ldr	r2, [pc, #216]	; (800c068 <HAL_ADC_MspInit+0xf8>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d130      	bne.n	800bff4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800bf92:	2300      	movs	r3, #0
 800bf94:	61bb      	str	r3, [r7, #24]
 800bf96:	4b35      	ldr	r3, [pc, #212]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800bf98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf9a:	4a34      	ldr	r2, [pc, #208]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800bf9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfa0:	6453      	str	r3, [r2, #68]	; 0x44
 800bfa2:	4b32      	ldr	r3, [pc, #200]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800bfa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfaa:	61bb      	str	r3, [r7, #24]
 800bfac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfae:	2300      	movs	r3, #0
 800bfb0:	617b      	str	r3, [r7, #20]
 800bfb2:	4b2e      	ldr	r3, [pc, #184]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800bfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb6:	4a2d      	ldr	r2, [pc, #180]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800bfb8:	f043 0301 	orr.w	r3, r3, #1
 800bfbc:	6313      	str	r3, [r2, #48]	; 0x30
 800bfbe:	4b2b      	ldr	r3, [pc, #172]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800bfc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	617b      	str	r3, [r7, #20]
 800bfc8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfd6:	f107 031c 	add.w	r3, r7, #28
 800bfda:	4619      	mov	r1, r3
 800bfdc:	4824      	ldr	r0, [pc, #144]	; (800c070 <HAL_ADC_MspInit+0x100>)
 800bfde:	f001 f9ad 	bl	800d33c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	2012      	movs	r0, #18
 800bfe8:	f001 f8df 	bl	800d1aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800bfec:	2012      	movs	r0, #18
 800bfee:	f001 f8f8 	bl	800d1e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800bff2:	e034      	b.n	800c05e <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a1e      	ldr	r2, [pc, #120]	; (800c074 <HAL_ADC_MspInit+0x104>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d12f      	bne.n	800c05e <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800bffe:	2300      	movs	r3, #0
 800c000:	613b      	str	r3, [r7, #16]
 800c002:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800c004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c006:	4a19      	ldr	r2, [pc, #100]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800c008:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c00c:	6453      	str	r3, [r2, #68]	; 0x44
 800c00e:	4b17      	ldr	r3, [pc, #92]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800c010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c016:	613b      	str	r3, [r7, #16]
 800c018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c01a:	2300      	movs	r3, #0
 800c01c:	60fb      	str	r3, [r7, #12]
 800c01e:	4b13      	ldr	r3, [pc, #76]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800c020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c022:	4a12      	ldr	r2, [pc, #72]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800c024:	f043 0301 	orr.w	r3, r3, #1
 800c028:	6313      	str	r3, [r2, #48]	; 0x30
 800c02a:	4b10      	ldr	r3, [pc, #64]	; (800c06c <HAL_ADC_MspInit+0xfc>)
 800c02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	60fb      	str	r3, [r7, #12]
 800c034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c036:	2302      	movs	r3, #2
 800c038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c03a:	2303      	movs	r3, #3
 800c03c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c03e:	2300      	movs	r3, #0
 800c040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c042:	f107 031c 	add.w	r3, r7, #28
 800c046:	4619      	mov	r1, r3
 800c048:	4809      	ldr	r0, [pc, #36]	; (800c070 <HAL_ADC_MspInit+0x100>)
 800c04a:	f001 f977 	bl	800d33c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c04e:	2200      	movs	r2, #0
 800c050:	2100      	movs	r1, #0
 800c052:	2012      	movs	r0, #18
 800c054:	f001 f8a9 	bl	800d1aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c058:	2012      	movs	r0, #18
 800c05a:	f001 f8c2 	bl	800d1e2 <HAL_NVIC_EnableIRQ>
}
 800c05e:	bf00      	nop
 800c060:	3730      	adds	r7, #48	; 0x30
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	40012000 	.word	0x40012000
 800c06c:	40023800 	.word	0x40023800
 800c070:	40020000 	.word	0x40020000
 800c074:	40012100 	.word	0x40012100

0800c078 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08a      	sub	sp, #40	; 0x28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c080:	f107 0314 	add.w	r3, r7, #20
 800c084:	2200      	movs	r2, #0
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	605a      	str	r2, [r3, #4]
 800c08a:	609a      	str	r2, [r3, #8]
 800c08c:	60da      	str	r2, [r3, #12]
 800c08e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a19      	ldr	r2, [pc, #100]	; (800c0fc <HAL_SPI_MspInit+0x84>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d12c      	bne.n	800c0f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c09a:	2300      	movs	r3, #0
 800c09c:	613b      	str	r3, [r7, #16]
 800c09e:	4b18      	ldr	r3, [pc, #96]	; (800c100 <HAL_SPI_MspInit+0x88>)
 800c0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a2:	4a17      	ldr	r2, [pc, #92]	; (800c100 <HAL_SPI_MspInit+0x88>)
 800c0a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0a8:	6413      	str	r3, [r2, #64]	; 0x40
 800c0aa:	4b15      	ldr	r3, [pc, #84]	; (800c100 <HAL_SPI_MspInit+0x88>)
 800c0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0b2:	613b      	str	r3, [r7, #16]
 800c0b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60fb      	str	r3, [r7, #12]
 800c0ba:	4b11      	ldr	r3, [pc, #68]	; (800c100 <HAL_SPI_MspInit+0x88>)
 800c0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0be:	4a10      	ldr	r2, [pc, #64]	; (800c100 <HAL_SPI_MspInit+0x88>)
 800c0c0:	f043 0302 	orr.w	r3, r3, #2
 800c0c4:	6313      	str	r3, [r2, #48]	; 0x30
 800c0c6:	4b0e      	ldr	r3, [pc, #56]	; (800c100 <HAL_SPI_MspInit+0x88>)
 800c0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ca:	f003 0302 	and.w	r3, r3, #2
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800c0d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800c0d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0d8:	2302      	movs	r3, #2
 800c0da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c0e4:	2305      	movs	r3, #5
 800c0e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0e8:	f107 0314 	add.w	r3, r7, #20
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4805      	ldr	r0, [pc, #20]	; (800c104 <HAL_SPI_MspInit+0x8c>)
 800c0f0:	f001 f924 	bl	800d33c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800c0f4:	bf00      	nop
 800c0f6:	3728      	adds	r7, #40	; 0x28
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	40003800 	.word	0x40003800
 800c100:	40023800 	.word	0x40023800
 800c104:	40020400 	.word	0x40020400

0800c108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08a      	sub	sp, #40	; 0x28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c110:	f107 0314 	add.w	r3, r7, #20
 800c114:	2200      	movs	r2, #0
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	605a      	str	r2, [r3, #4]
 800c11a:	609a      	str	r2, [r3, #8]
 800c11c:	60da      	str	r2, [r3, #12]
 800c11e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a1d      	ldr	r2, [pc, #116]	; (800c19c <HAL_UART_MspInit+0x94>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d133      	bne.n	800c192 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c12a:	2300      	movs	r3, #0
 800c12c:	613b      	str	r3, [r7, #16]
 800c12e:	4b1c      	ldr	r3, [pc, #112]	; (800c1a0 <HAL_UART_MspInit+0x98>)
 800c130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c132:	4a1b      	ldr	r2, [pc, #108]	; (800c1a0 <HAL_UART_MspInit+0x98>)
 800c134:	f043 0310 	orr.w	r3, r3, #16
 800c138:	6453      	str	r3, [r2, #68]	; 0x44
 800c13a:	4b19      	ldr	r3, [pc, #100]	; (800c1a0 <HAL_UART_MspInit+0x98>)
 800c13c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c13e:	f003 0310 	and.w	r3, r3, #16
 800c142:	613b      	str	r3, [r7, #16]
 800c144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c146:	2300      	movs	r3, #0
 800c148:	60fb      	str	r3, [r7, #12]
 800c14a:	4b15      	ldr	r3, [pc, #84]	; (800c1a0 <HAL_UART_MspInit+0x98>)
 800c14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c14e:	4a14      	ldr	r2, [pc, #80]	; (800c1a0 <HAL_UART_MspInit+0x98>)
 800c150:	f043 0302 	orr.w	r3, r3, #2
 800c154:	6313      	str	r3, [r2, #48]	; 0x30
 800c156:	4b12      	ldr	r3, [pc, #72]	; (800c1a0 <HAL_UART_MspInit+0x98>)
 800c158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15a:	f003 0302 	and.w	r3, r3, #2
 800c15e:	60fb      	str	r3, [r7, #12]
 800c160:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c162:	23c0      	movs	r3, #192	; 0xc0
 800c164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c166:	2302      	movs	r3, #2
 800c168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c16a:	2300      	movs	r3, #0
 800c16c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c16e:	2303      	movs	r3, #3
 800c170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c172:	2307      	movs	r3, #7
 800c174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c176:	f107 0314 	add.w	r3, r7, #20
 800c17a:	4619      	mov	r1, r3
 800c17c:	4809      	ldr	r0, [pc, #36]	; (800c1a4 <HAL_UART_MspInit+0x9c>)
 800c17e:	f001 f8dd 	bl	800d33c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c182:	2200      	movs	r2, #0
 800c184:	2100      	movs	r1, #0
 800c186:	2025      	movs	r0, #37	; 0x25
 800c188:	f001 f80f 	bl	800d1aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c18c:	2025      	movs	r0, #37	; 0x25
 800c18e:	f001 f828 	bl	800d1e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800c192:	bf00      	nop
 800c194:	3728      	adds	r7, #40	; 0x28
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	40011000 	.word	0x40011000
 800c1a0:	40023800 	.word	0x40023800
 800c1a4:	40020400 	.word	0x40020400

0800c1a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c1ac:	e7fe      	b.n	800c1ac <NMI_Handler+0x4>

0800c1ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c1b2:	e7fe      	b.n	800c1b2 <HardFault_Handler+0x4>

0800c1b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c1b8:	e7fe      	b.n	800c1b8 <MemManage_Handler+0x4>

0800c1ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c1be:	e7fe      	b.n	800c1be <BusFault_Handler+0x4>

0800c1c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c1c4:	e7fe      	b.n	800c1c4 <UsageFault_Handler+0x4>

0800c1c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c1ca:	bf00      	nop
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c1d8:	bf00      	nop
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c1e6:	bf00      	nop
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c1f4:	f000 f98a 	bl	800c50c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  MilliTimer_Handler();
 800c1f8:	f7fb f876 	bl	80072e8 <MilliTimer_Handler>

  static uint16_t milli_count;
   milli_count++;
 800c1fc:	4b08      	ldr	r3, [pc, #32]	; (800c220 <SysTick_Handler+0x30>)
 800c1fe:	881b      	ldrh	r3, [r3, #0]
 800c200:	3301      	adds	r3, #1
 800c202:	b29a      	uxth	r2, r3
 800c204:	4b06      	ldr	r3, [pc, #24]	; (800c220 <SysTick_Handler+0x30>)
 800c206:	801a      	strh	r2, [r3, #0]
   if(milli_count==1000)
 800c208:	4b05      	ldr	r3, [pc, #20]	; (800c220 <SysTick_Handler+0x30>)
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c210:	d104      	bne.n	800c21c <SysTick_Handler+0x2c>
   {
   milli_count=0;
 800c212:	4b03      	ldr	r3, [pc, #12]	; (800c220 <SysTick_Handler+0x30>)
 800c214:	2200      	movs	r2, #0
 800c216:	801a      	strh	r2, [r3, #0]
   DHCP_time_handler();
 800c218:	f7f6 f966 	bl	80024e8 <DHCP_time_handler>
   }

  /* USER CODE END SysTick_IRQn 1 */
}
 800c21c:	bf00      	nop
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	200032ec 	.word	0x200032ec

0800c224 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800c228:	4803      	ldr	r0, [pc, #12]	; (800c238 <ADC_IRQHandler+0x14>)
 800c22a:	f000 f9f6 	bl	800c61a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800c22e:	4803      	ldr	r0, [pc, #12]	; (800c23c <ADC_IRQHandler+0x18>)
 800c230:	f000 f9f3 	bl	800c61a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800c234:	bf00      	nop
 800c236:	bd80      	pop	{r7, pc}
 800c238:	200012bc 	.word	0x200012bc
 800c23c:	20001304 	.word	0x20001304

0800c240 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	af00      	add	r7, sp, #0
	  }

*/

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800c244:	4802      	ldr	r0, [pc, #8]	; (800c250 <USART1_IRQHandler+0x10>)
 800c246:	f002 fd8d 	bl	800ed64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800c24a:	bf00      	nop
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	200013a4 	.word	0x200013a4

0800c254 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NetworkStatus_Pin);
 800c258:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c25c:	f001 fa3c 	bl	800d6d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c260:	bf00      	nop
 800c262:	bd80      	pop	{r7, pc}

0800c264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c264:	b480      	push	{r7}
 800c266:	af00      	add	r7, sp, #0
  return 1;
 800c268:	2301      	movs	r3, #1
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <_kill>:

int _kill(int pid, int sig)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c27e:	f005 f8fd 	bl	801147c <__errno>
 800c282:	4603      	mov	r3, r0
 800c284:	2216      	movs	r2, #22
 800c286:	601a      	str	r2, [r3, #0]
  return -1;
 800c288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <_exit>:

void _exit (int status)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c29c:	f04f 31ff 	mov.w	r1, #4294967295
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7ff ffe7 	bl	800c274 <_kill>
  while (1) {}    /* Make sure we hang here */
 800c2a6:	e7fe      	b.n	800c2a6 <_exit+0x12>

0800c2a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	617b      	str	r3, [r7, #20]
 800c2b8:	e00a      	b.n	800c2d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c2ba:	f3af 8000 	nop.w
 800c2be:	4601      	mov	r1, r0
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	1c5a      	adds	r2, r3, #1
 800c2c4:	60ba      	str	r2, [r7, #8]
 800c2c6:	b2ca      	uxtb	r2, r1
 800c2c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	dbf0      	blt.n	800c2ba <_read+0x12>
  }

  return len;
 800c2d8:	687b      	ldr	r3, [r7, #4]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b086      	sub	sp, #24
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	617b      	str	r3, [r7, #20]
 800c2f2:	e009      	b.n	800c308 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	60ba      	str	r2, [r7, #8]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	3301      	adds	r3, #1
 800c306:	617b      	str	r3, [r7, #20]
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	dbf1      	blt.n	800c2f4 <_write+0x12>
  }
  return len;
 800c310:	687b      	ldr	r3, [r7, #4]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <_close>:

int _close(int file)
{
 800c31a:	b480      	push	{r7}
 800c31c:	b083      	sub	sp, #12
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c322:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c326:	4618      	mov	r0, r3
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c332:	b480      	push	{r7}
 800c334:	b083      	sub	sp, #12
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c342:	605a      	str	r2, [r3, #4]
  return 0;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <_isatty>:

int _isatty(int file)
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c35a:	2301      	movs	r3, #1
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c374:	2300      	movs	r3, #0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
	...

0800c384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c38c:	4a14      	ldr	r2, [pc, #80]	; (800c3e0 <_sbrk+0x5c>)
 800c38e:	4b15      	ldr	r3, [pc, #84]	; (800c3e4 <_sbrk+0x60>)
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c398:	4b13      	ldr	r3, [pc, #76]	; (800c3e8 <_sbrk+0x64>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c3a0:	4b11      	ldr	r3, [pc, #68]	; (800c3e8 <_sbrk+0x64>)
 800c3a2:	4a12      	ldr	r2, [pc, #72]	; (800c3ec <_sbrk+0x68>)
 800c3a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c3a6:	4b10      	ldr	r3, [pc, #64]	; (800c3e8 <_sbrk+0x64>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d207      	bcs.n	800c3c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c3b4:	f005 f862 	bl	801147c <__errno>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	220c      	movs	r2, #12
 800c3bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c3be:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c2:	e009      	b.n	800c3d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c3c4:	4b08      	ldr	r3, [pc, #32]	; (800c3e8 <_sbrk+0x64>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c3ca:	4b07      	ldr	r3, [pc, #28]	; (800c3e8 <_sbrk+0x64>)
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	4a05      	ldr	r2, [pc, #20]	; (800c3e8 <_sbrk+0x64>)
 800c3d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20020000 	.word	0x20020000
 800c3e4:	00000400 	.word	0x00000400
 800c3e8:	200032f0 	.word	0x200032f0
 800c3ec:	20003448 	.word	0x20003448

0800c3f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c3f4:	4b06      	ldr	r3, [pc, #24]	; (800c410 <SystemInit+0x20>)
 800c3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3fa:	4a05      	ldr	r2, [pc, #20]	; (800c410 <SystemInit+0x20>)
 800c3fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c404:	bf00      	nop
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	e000ed00 	.word	0xe000ed00

0800c414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c44c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800c418:	f7ff ffea 	bl	800c3f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800c41c:	480c      	ldr	r0, [pc, #48]	; (800c450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800c41e:	490d      	ldr	r1, [pc, #52]	; (800c454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800c420:	4a0d      	ldr	r2, [pc, #52]	; (800c458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800c422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c424:	e002      	b.n	800c42c <LoopCopyDataInit>

0800c426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c42a:	3304      	adds	r3, #4

0800c42c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c42c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c42e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c430:	d3f9      	bcc.n	800c426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c432:	4a0a      	ldr	r2, [pc, #40]	; (800c45c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800c434:	4c0a      	ldr	r4, [pc, #40]	; (800c460 <LoopFillZerobss+0x22>)
  movs r3, #0
 800c436:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c438:	e001      	b.n	800c43e <LoopFillZerobss>

0800c43a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c43a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c43c:	3204      	adds	r2, #4

0800c43e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c43e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c440:	d3fb      	bcc.n	800c43a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c442:	f005 f821 	bl	8011488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c446:	f7fe fe7f 	bl	800b148 <main>
  bx  lr    
 800c44a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c44c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800c450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c454:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 800c458:	080148c8 	.word	0x080148c8
  ldr r2, =_sbss
 800c45c:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 800c460:	20003448 	.word	0x20003448

0800c464 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c464:	e7fe      	b.n	800c464 <CAN1_RX0_IRQHandler>
	...

0800c468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c46c:	4b0e      	ldr	r3, [pc, #56]	; (800c4a8 <HAL_Init+0x40>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a0d      	ldr	r2, [pc, #52]	; (800c4a8 <HAL_Init+0x40>)
 800c472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c478:	4b0b      	ldr	r3, [pc, #44]	; (800c4a8 <HAL_Init+0x40>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a0a      	ldr	r2, [pc, #40]	; (800c4a8 <HAL_Init+0x40>)
 800c47e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c484:	4b08      	ldr	r3, [pc, #32]	; (800c4a8 <HAL_Init+0x40>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a07      	ldr	r2, [pc, #28]	; (800c4a8 <HAL_Init+0x40>)
 800c48a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c48e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c490:	2003      	movs	r0, #3
 800c492:	f000 fe7f 	bl	800d194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c496:	200f      	movs	r0, #15
 800c498:	f000 f808 	bl	800c4ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c49c:	f7ff fd40 	bl	800bf20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	40023c00 	.word	0x40023c00

0800c4ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c4b4:	4b12      	ldr	r3, [pc, #72]	; (800c500 <HAL_InitTick+0x54>)
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	4b12      	ldr	r3, [pc, #72]	; (800c504 <HAL_InitTick+0x58>)
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 fe97 	bl	800d1fe <HAL_SYSTICK_Config>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e00e      	b.n	800c4f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b0f      	cmp	r3, #15
 800c4de:	d80a      	bhi.n	800c4f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	6879      	ldr	r1, [r7, #4]
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e8:	f000 fe5f 	bl	800d1aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c4ec:	4a06      	ldr	r2, [pc, #24]	; (800c508 <HAL_InitTick+0x5c>)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	e000      	b.n	800c4f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c4f6:	2301      	movs	r3, #1
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	20000058 	.word	0x20000058
 800c504:	20000060 	.word	0x20000060
 800c508:	2000005c 	.word	0x2000005c

0800c50c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c50c:	b480      	push	{r7}
 800c50e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c510:	4b06      	ldr	r3, [pc, #24]	; (800c52c <HAL_IncTick+0x20>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	461a      	mov	r2, r3
 800c516:	4b06      	ldr	r3, [pc, #24]	; (800c530 <HAL_IncTick+0x24>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4413      	add	r3, r2
 800c51c:	4a04      	ldr	r2, [pc, #16]	; (800c530 <HAL_IncTick+0x24>)
 800c51e:	6013      	str	r3, [r2, #0]
}
 800c520:	bf00      	nop
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	20000060 	.word	0x20000060
 800c530:	200032f4 	.word	0x200032f4

0800c534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c534:	b480      	push	{r7}
 800c536:	af00      	add	r7, sp, #0
  return uwTick;
 800c538:	4b03      	ldr	r3, [pc, #12]	; (800c548 <HAL_GetTick+0x14>)
 800c53a:	681b      	ldr	r3, [r3, #0]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	200032f4 	.word	0x200032f4

0800c54c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c554:	f7ff ffee 	bl	800c534 <HAL_GetTick>
 800c558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c564:	d005      	beq.n	800c572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c566:	4b0a      	ldr	r3, [pc, #40]	; (800c590 <HAL_Delay+0x44>)
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	461a      	mov	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	4413      	add	r3, r2
 800c570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c572:	bf00      	nop
 800c574:	f7ff ffde 	bl	800c534 <HAL_GetTick>
 800c578:	4602      	mov	r2, r0
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	429a      	cmp	r2, r3
 800c582:	d8f7      	bhi.n	800c574 <HAL_Delay+0x28>
  {
  }
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000060 	.word	0x20000060

0800c594 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d101      	bne.n	800c5aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e033      	b.n	800c612 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d109      	bne.n	800c5c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff fcdc 	bl	800bf70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ca:	f003 0310 	and.w	r3, r3, #16
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d118      	bne.n	800c604 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c5da:	f023 0302 	bic.w	r3, r3, #2
 800c5de:	f043 0202 	orr.w	r2, r3, #2
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fa68 	bl	800cabc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f6:	f023 0303 	bic.w	r3, r3, #3
 800c5fa:	f043 0201 	orr.w	r2, r3, #1
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	641a      	str	r2, [r3, #64]	; 0x40
 800c602:	e001      	b.n	800c608 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c610:	7bfb      	ldrb	r3, [r7, #15]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b086      	sub	sp, #24
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800c622:	2300      	movs	r3, #0
 800c624:	617b      	str	r3, [r7, #20]
 800c626:	2300      	movs	r3, #0
 800c628:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f003 0302 	and.w	r3, r3, #2
 800c640:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	f003 0320 	and.w	r3, r3, #32
 800c648:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d049      	beq.n	800c6e4 <HAL_ADC_IRQHandler+0xca>
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d046      	beq.n	800c6e4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65a:	f003 0310 	and.w	r3, r3, #16
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d105      	bne.n	800c66e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c666:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d12b      	bne.n	800c6d4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c680:	2b00      	cmp	r3, #0
 800c682:	d127      	bne.n	800c6d4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d006      	beq.n	800c6a0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d119      	bne.n	800c6d4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	685a      	ldr	r2, [r3, #4]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f022 0220 	bic.w	r2, r2, #32
 800c6ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d105      	bne.n	800c6d4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6cc:	f043 0201 	orr.w	r2, r3, #1
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f8b0 	bl	800c83a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f06f 0212 	mvn.w	r2, #18
 800c6e2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f003 0304 	and.w	r3, r3, #4
 800c6ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d057      	beq.n	800c7aa <HAL_ADC_IRQHandler+0x190>
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d054      	beq.n	800c7aa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c704:	f003 0310 	and.w	r3, r3, #16
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d105      	bne.n	800c718 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c710:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c722:	2b00      	cmp	r3, #0
 800c724:	d139      	bne.n	800c79a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c72c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800c730:	2b00      	cmp	r3, #0
 800c732:	d006      	beq.n	800c742 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d12b      	bne.n	800c79a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d124      	bne.n	800c79a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d11d      	bne.n	800c79a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800c762:	2b00      	cmp	r3, #0
 800c764:	d119      	bne.n	800c79a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c774:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c77a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d105      	bne.n	800c79a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c792:	f043 0201 	orr.w	r2, r3, #1
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fa8a 	bl	800ccb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f06f 020c 	mvn.w	r2, #12
 800c7a8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f003 0301 	and.w	r3, r3, #1
 800c7b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d017      	beq.n	800c7f0 <HAL_ADC_IRQHandler+0x1d6>
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d014      	beq.n	800c7f0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d10d      	bne.n	800c7f0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f834 	bl	800c84e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f06f 0201 	mvn.w	r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f003 0320 	and.w	r3, r3, #32
 800c7f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c7fe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d015      	beq.n	800c832 <HAL_ADC_IRQHandler+0x218>
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d012      	beq.n	800c832 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c810:	f043 0202 	orr.w	r2, r3, #2
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f06f 0220 	mvn.w	r2, #32
 800c820:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f81d 	bl	800c862 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f06f 0220 	mvn.w	r2, #32
 800c830:	601a      	str	r2, [r3, #0]
  }
}
 800c832:	bf00      	nop
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c83a:	b480      	push	{r7}
 800c83c:	b083      	sub	sp, #12
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800c842:	bf00      	nop
 800c844:	370c      	adds	r7, #12
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr

0800c84e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800c84e:	b480      	push	{r7}
 800c850:	b083      	sub	sp, #12
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800c856:	bf00      	nop
 800c858:	370c      	adds	r7, #12
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c862:	b480      	push	{r7}
 800c864:	b083      	sub	sp, #12
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800c86a:	bf00      	nop
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
	...

0800c878 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c882:	2300      	movs	r3, #0
 800c884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d101      	bne.n	800c894 <HAL_ADC_ConfigChannel+0x1c>
 800c890:	2302      	movs	r3, #2
 800c892:	e105      	b.n	800caa0 <HAL_ADC_ConfigChannel+0x228>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b09      	cmp	r3, #9
 800c8a2:	d925      	bls.n	800c8f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68d9      	ldr	r1, [r3, #12]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	4413      	add	r3, r2
 800c8b8:	3b1e      	subs	r3, #30
 800c8ba:	2207      	movs	r2, #7
 800c8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c8c0:	43da      	mvns	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	400a      	ands	r2, r1
 800c8c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68d9      	ldr	r1, [r3, #12]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	689a      	ldr	r2, [r3, #8]
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	4618      	mov	r0, r3
 800c8dc:	4603      	mov	r3, r0
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	4403      	add	r3, r0
 800c8e2:	3b1e      	subs	r3, #30
 800c8e4:	409a      	lsls	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	60da      	str	r2, [r3, #12]
 800c8ee:	e022      	b.n	800c936 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6919      	ldr	r1, [r3, #16]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	4613      	mov	r3, r2
 800c900:	005b      	lsls	r3, r3, #1
 800c902:	4413      	add	r3, r2
 800c904:	2207      	movs	r2, #7
 800c906:	fa02 f303 	lsl.w	r3, r2, r3
 800c90a:	43da      	mvns	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	400a      	ands	r2, r1
 800c912:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	6919      	ldr	r1, [r3, #16]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	689a      	ldr	r2, [r3, #8]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	b29b      	uxth	r3, r3
 800c924:	4618      	mov	r0, r3
 800c926:	4603      	mov	r3, r0
 800c928:	005b      	lsls	r3, r3, #1
 800c92a:	4403      	add	r3, r0
 800c92c:	409a      	lsls	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	430a      	orrs	r2, r1
 800c934:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	2b06      	cmp	r3, #6
 800c93c:	d824      	bhi.n	800c988 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	685a      	ldr	r2, [r3, #4]
 800c948:	4613      	mov	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4413      	add	r3, r2
 800c94e:	3b05      	subs	r3, #5
 800c950:	221f      	movs	r2, #31
 800c952:	fa02 f303 	lsl.w	r3, r2, r3
 800c956:	43da      	mvns	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	400a      	ands	r2, r1
 800c95e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	4618      	mov	r0, r3
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	685a      	ldr	r2, [r3, #4]
 800c972:	4613      	mov	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	3b05      	subs	r3, #5
 800c97a:	fa00 f203 	lsl.w	r2, r0, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	430a      	orrs	r2, r1
 800c984:	635a      	str	r2, [r3, #52]	; 0x34
 800c986:	e04c      	b.n	800ca22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	2b0c      	cmp	r3, #12
 800c98e:	d824      	bhi.n	800c9da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	4613      	mov	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	4413      	add	r3, r2
 800c9a0:	3b23      	subs	r3, #35	; 0x23
 800c9a2:	221f      	movs	r2, #31
 800c9a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a8:	43da      	mvns	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	400a      	ands	r2, r1
 800c9b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	4618      	mov	r0, r3
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	685a      	ldr	r2, [r3, #4]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	4413      	add	r3, r2
 800c9ca:	3b23      	subs	r3, #35	; 0x23
 800c9cc:	fa00 f203 	lsl.w	r2, r0, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	631a      	str	r2, [r3, #48]	; 0x30
 800c9d8:	e023      	b.n	800ca22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4413      	add	r3, r2
 800c9ea:	3b41      	subs	r3, #65	; 0x41
 800c9ec:	221f      	movs	r2, #31
 800c9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f2:	43da      	mvns	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	400a      	ands	r2, r1
 800c9fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	4618      	mov	r0, r3
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	3b41      	subs	r3, #65	; 0x41
 800ca16:	fa00 f203 	lsl.w	r2, r0, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	430a      	orrs	r2, r1
 800ca20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ca22:	4b22      	ldr	r3, [pc, #136]	; (800caac <HAL_ADC_ConfigChannel+0x234>)
 800ca24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a21      	ldr	r2, [pc, #132]	; (800cab0 <HAL_ADC_ConfigChannel+0x238>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d109      	bne.n	800ca44 <HAL_ADC_ConfigChannel+0x1cc>
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b12      	cmp	r3, #18
 800ca36:	d105      	bne.n	800ca44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a19      	ldr	r2, [pc, #100]	; (800cab0 <HAL_ADC_ConfigChannel+0x238>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d123      	bne.n	800ca96 <HAL_ADC_ConfigChannel+0x21e>
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b10      	cmp	r3, #16
 800ca54:	d003      	beq.n	800ca5e <HAL_ADC_ConfigChannel+0x1e6>
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b11      	cmp	r3, #17
 800ca5c:	d11b      	bne.n	800ca96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b10      	cmp	r3, #16
 800ca70:	d111      	bne.n	800ca96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ca72:	4b10      	ldr	r3, [pc, #64]	; (800cab4 <HAL_ADC_ConfigChannel+0x23c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a10      	ldr	r2, [pc, #64]	; (800cab8 <HAL_ADC_ConfigChannel+0x240>)
 800ca78:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7c:	0c9a      	lsrs	r2, r3, #18
 800ca7e:	4613      	mov	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	005b      	lsls	r3, r3, #1
 800ca86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800ca88:	e002      	b.n	800ca90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1f9      	bne.n	800ca8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	40012300 	.word	0x40012300
 800cab0:	40012000 	.word	0x40012000
 800cab4:	20000058 	.word	0x20000058
 800cab8:	431bde83 	.word	0x431bde83

0800cabc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cac4:	4b79      	ldr	r3, [pc, #484]	; (800ccac <ADC_Init+0x1f0>)
 800cac6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	431a      	orrs	r2, r3
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800caf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6859      	ldr	r1, [r3, #4]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	021a      	lsls	r2, r3, #8
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800cb14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	6859      	ldr	r1, [r3, #4]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	689a      	ldr	r2, [r3, #8]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	430a      	orrs	r2, r1
 800cb26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	689a      	ldr	r2, [r3, #8]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6899      	ldr	r1, [r3, #8]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	68da      	ldr	r2, [r3, #12]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	430a      	orrs	r2, r1
 800cb48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4e:	4a58      	ldr	r2, [pc, #352]	; (800ccb0 <ADC_Init+0x1f4>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d022      	beq.n	800cb9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	689a      	ldr	r2, [r3, #8]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cb62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6899      	ldr	r1, [r3, #8]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	430a      	orrs	r2, r1
 800cb74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	689a      	ldr	r2, [r3, #8]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800cb84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6899      	ldr	r1, [r3, #8]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	430a      	orrs	r2, r1
 800cb96:	609a      	str	r2, [r3, #8]
 800cb98:	e00f      	b.n	800cbba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689a      	ldr	r2, [r3, #8]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	689a      	ldr	r2, [r3, #8]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800cbb8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	689a      	ldr	r2, [r3, #8]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f022 0202 	bic.w	r2, r2, #2
 800cbc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	6899      	ldr	r1, [r3, #8]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7e1b      	ldrb	r3, [r3, #24]
 800cbd4:	005a      	lsls	r2, r3, #1
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	430a      	orrs	r2, r1
 800cbdc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d01b      	beq.n	800cc20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbf6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	685a      	ldr	r2, [r3, #4]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800cc06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6859      	ldr	r1, [r3, #4]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc12:	3b01      	subs	r3, #1
 800cc14:	035a      	lsls	r2, r3, #13
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	430a      	orrs	r2, r1
 800cc1c:	605a      	str	r2, [r3, #4]
 800cc1e:	e007      	b.n	800cc30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800cc3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	69db      	ldr	r3, [r3, #28]
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	051a      	lsls	r2, r3, #20
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	430a      	orrs	r2, r1
 800cc54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	689a      	ldr	r2, [r3, #8]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cc64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6899      	ldr	r1, [r3, #8]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc72:	025a      	lsls	r2, r3, #9
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	430a      	orrs	r2, r1
 800cc7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	689a      	ldr	r2, [r3, #8]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6899      	ldr	r1, [r3, #8]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	029a      	lsls	r2, r3, #10
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	430a      	orrs	r2, r1
 800cc9e:	609a      	str	r2, [r3, #8]
}
 800cca0:	bf00      	nop
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	40012300 	.word	0x40012300
 800ccb0:	0f000001 	.word	0x0f000001

0800ccb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800ccbc:	bf00      	nop
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d101      	bne.n	800cce0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800ccdc:	2302      	movs	r3, #2
 800ccde:	e17d      	b.n	800cfdc <HAL_ADCEx_InjectedConfigChannel+0x314>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b09      	cmp	r3, #9
 800ccee:	d925      	bls.n	800cd3c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	68d9      	ldr	r1, [r3, #12]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	4613      	mov	r3, r2
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	4413      	add	r3, r2
 800cd04:	3b1e      	subs	r3, #30
 800cd06:	2207      	movs	r2, #7
 800cd08:	fa02 f303 	lsl.w	r3, r2, r3
 800cd0c:	43da      	mvns	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	400a      	ands	r2, r1
 800cd14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68d9      	ldr	r1, [r3, #12]
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	689a      	ldr	r2, [r3, #8]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	4618      	mov	r0, r3
 800cd28:	4603      	mov	r3, r0
 800cd2a:	005b      	lsls	r3, r3, #1
 800cd2c:	4403      	add	r3, r0
 800cd2e:	3b1e      	subs	r3, #30
 800cd30:	409a      	lsls	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	430a      	orrs	r2, r1
 800cd38:	60da      	str	r2, [r3, #12]
 800cd3a:	e022      	b.n	800cd82 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6919      	ldr	r1, [r3, #16]
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	461a      	mov	r2, r3
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	4413      	add	r3, r2
 800cd50:	2207      	movs	r2, #7
 800cd52:	fa02 f303 	lsl.w	r3, r2, r3
 800cd56:	43da      	mvns	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	400a      	ands	r2, r1
 800cd5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	6919      	ldr	r1, [r3, #16]
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	689a      	ldr	r2, [r3, #8]
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	4618      	mov	r0, r3
 800cd72:	4603      	mov	r3, r0
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	4403      	add	r3, r0
 800cd78:	409a      	lsls	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	430a      	orrs	r2, r1
 800cd80:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800cd90:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	051a      	lsls	r2, r3, #20
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	430a      	orrs	r2, r1
 800cda6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	3303      	adds	r3, #3
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	221f      	movs	r2, #31
 800cdcc:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd0:	43da      	mvns	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	400a      	ands	r2, r1
 800cdd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	4618      	mov	r0, r3
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	1ad3      	subs	r3, r2, r3
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	3303      	adds	r3, #3
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	4613      	mov	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	fa00 f203 	lsl.w	r2, r0, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	699b      	ldr	r3, [r3, #24]
 800ce14:	4a74      	ldr	r2, [pc, #464]	; (800cfe8 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d022      	beq.n	800ce60 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	689a      	ldr	r2, [r3, #8]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800ce28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	6899      	ldr	r1, [r3, #8]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	699a      	ldr	r2, [r3, #24]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	430a      	orrs	r2, r1
 800ce3a:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	689a      	ldr	r2, [r3, #8]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800ce4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6899      	ldr	r1, [r3, #8]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	69da      	ldr	r2, [r3, #28]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	430a      	orrs	r2, r1
 800ce5c:	609a      	str	r2, [r3, #8]
 800ce5e:	e00f      	b.n	800ce80 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	689a      	ldr	r2, [r3, #8]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800ce6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	689a      	ldr	r2, [r3, #8]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800ce7e:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	7d5b      	ldrb	r3, [r3, #21]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d008      	beq.n	800ce9a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce96:	605a      	str	r2, [r3, #4]
 800ce98:	e007      	b.n	800ceaa <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	685a      	ldr	r2, [r3, #4]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cea8:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	7d1b      	ldrb	r3, [r3, #20]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d008      	beq.n	800cec4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	685a      	ldr	r2, [r3, #4]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cec0:	605a      	str	r2, [r3, #4]
 800cec2:	e007      	b.n	800ced4 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ced2:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	2b03      	cmp	r3, #3
 800ceda:	d02e      	beq.n	800cf3a <HAL_ADCEx_InjectedConfigChannel+0x272>
 800cedc:	2b03      	cmp	r3, #3
 800cede:	d840      	bhi.n	800cf62 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d002      	beq.n	800ceea <HAL_ADCEx_InjectedConfigChannel+0x222>
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d014      	beq.n	800cf12 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 800cee8:	e03b      	b.n	800cf62 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	695b      	ldr	r3, [r3, #20]
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	6812      	ldr	r2, [r2, #0]
 800cef4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cef8:	f023 030f 	bic.w	r3, r3, #15
 800cefc:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	6959      	ldr	r1, [r3, #20]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	68da      	ldr	r2, [r3, #12]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	430a      	orrs	r2, r1
 800cf0e:	615a      	str	r2, [r3, #20]
      break;
 800cf10:	e03b      	b.n	800cf8a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	6812      	ldr	r2, [r2, #0]
 800cf1c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cf20:	f023 030f 	bic.w	r3, r3, #15
 800cf24:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	6999      	ldr	r1, [r3, #24]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	68da      	ldr	r2, [r3, #12]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	430a      	orrs	r2, r1
 800cf36:	619a      	str	r2, [r3, #24]
      break;
 800cf38:	e027      	b.n	800cf8a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	69db      	ldr	r3, [r3, #28]
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	6812      	ldr	r2, [r2, #0]
 800cf44:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cf48:	f023 030f 	bic.w	r3, r3, #15
 800cf4c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	69d9      	ldr	r1, [r3, #28]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	68da      	ldr	r2, [r3, #12]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	430a      	orrs	r2, r1
 800cf5e:	61da      	str	r2, [r3, #28]
      break;
 800cf60:	e013      	b.n	800cf8a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	6a1b      	ldr	r3, [r3, #32]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	6812      	ldr	r2, [r2, #0]
 800cf6c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cf70:	f023 030f 	bic.w	r3, r3, #15
 800cf74:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	6a19      	ldr	r1, [r3, #32]
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	68da      	ldr	r2, [r3, #12]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	621a      	str	r2, [r3, #32]
      break;
 800cf88:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cf8a:	4b18      	ldr	r3, [pc, #96]	; (800cfec <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800cf8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a17      	ldr	r2, [pc, #92]	; (800cff0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d109      	bne.n	800cfac <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b12      	cmp	r3, #18
 800cf9e:	d105      	bne.n	800cfac <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a0f      	ldr	r2, [pc, #60]	; (800cff0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d10d      	bne.n	800cfd2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b10      	cmp	r3, #16
 800cfbc:	d003      	beq.n	800cfc6 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b11      	cmp	r3, #17
 800cfc4:	d105      	bne.n	800cfd2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3714      	adds	r7, #20
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr
 800cfe8:	000f0001 	.word	0x000f0001
 800cfec:	40012300 	.word	0x40012300
 800cff0:	40012000 	.word	0x40012000

0800cff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f003 0307 	and.w	r3, r3, #7
 800d002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d004:	4b0c      	ldr	r3, [pc, #48]	; (800d038 <__NVIC_SetPriorityGrouping+0x44>)
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d00a:	68ba      	ldr	r2, [r7, #8]
 800d00c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d010:	4013      	ands	r3, r2
 800d012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d01c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d026:	4a04      	ldr	r2, [pc, #16]	; (800d038 <__NVIC_SetPriorityGrouping+0x44>)
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	60d3      	str	r3, [r2, #12]
}
 800d02c:	bf00      	nop
 800d02e:	3714      	adds	r7, #20
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	e000ed00 	.word	0xe000ed00

0800d03c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d03c:	b480      	push	{r7}
 800d03e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d040:	4b04      	ldr	r3, [pc, #16]	; (800d054 <__NVIC_GetPriorityGrouping+0x18>)
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	0a1b      	lsrs	r3, r3, #8
 800d046:	f003 0307 	and.w	r3, r3, #7
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	e000ed00 	.word	0xe000ed00

0800d058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	4603      	mov	r3, r0
 800d060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d066:	2b00      	cmp	r3, #0
 800d068:	db0b      	blt.n	800d082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d06a:	79fb      	ldrb	r3, [r7, #7]
 800d06c:	f003 021f 	and.w	r2, r3, #31
 800d070:	4907      	ldr	r1, [pc, #28]	; (800d090 <__NVIC_EnableIRQ+0x38>)
 800d072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d076:	095b      	lsrs	r3, r3, #5
 800d078:	2001      	movs	r0, #1
 800d07a:	fa00 f202 	lsl.w	r2, r0, r2
 800d07e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d082:	bf00      	nop
 800d084:	370c      	adds	r7, #12
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	e000e100 	.word	0xe000e100

0800d094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	4603      	mov	r3, r0
 800d09c:	6039      	str	r1, [r7, #0]
 800d09e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d0a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	db0a      	blt.n	800d0be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	490c      	ldr	r1, [pc, #48]	; (800d0e0 <__NVIC_SetPriority+0x4c>)
 800d0ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0b2:	0112      	lsls	r2, r2, #4
 800d0b4:	b2d2      	uxtb	r2, r2
 800d0b6:	440b      	add	r3, r1
 800d0b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d0bc:	e00a      	b.n	800d0d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	4908      	ldr	r1, [pc, #32]	; (800d0e4 <__NVIC_SetPriority+0x50>)
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	f003 030f 	and.w	r3, r3, #15
 800d0ca:	3b04      	subs	r3, #4
 800d0cc:	0112      	lsls	r2, r2, #4
 800d0ce:	b2d2      	uxtb	r2, r2
 800d0d0:	440b      	add	r3, r1
 800d0d2:	761a      	strb	r2, [r3, #24]
}
 800d0d4:	bf00      	nop
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	e000e100 	.word	0xe000e100
 800d0e4:	e000ed00 	.word	0xe000ed00

0800d0e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b089      	sub	sp, #36	; 0x24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f003 0307 	and.w	r3, r3, #7
 800d0fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	f1c3 0307 	rsb	r3, r3, #7
 800d102:	2b04      	cmp	r3, #4
 800d104:	bf28      	it	cs
 800d106:	2304      	movcs	r3, #4
 800d108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	3304      	adds	r3, #4
 800d10e:	2b06      	cmp	r3, #6
 800d110:	d902      	bls.n	800d118 <NVIC_EncodePriority+0x30>
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	3b03      	subs	r3, #3
 800d116:	e000      	b.n	800d11a <NVIC_EncodePriority+0x32>
 800d118:	2300      	movs	r3, #0
 800d11a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d11c:	f04f 32ff 	mov.w	r2, #4294967295
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	fa02 f303 	lsl.w	r3, r2, r3
 800d126:	43da      	mvns	r2, r3
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	401a      	ands	r2, r3
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d130:	f04f 31ff 	mov.w	r1, #4294967295
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	fa01 f303 	lsl.w	r3, r1, r3
 800d13a:	43d9      	mvns	r1, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d140:	4313      	orrs	r3, r2
         );
}
 800d142:	4618      	mov	r0, r3
 800d144:	3724      	adds	r7, #36	; 0x24
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
	...

0800d150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3b01      	subs	r3, #1
 800d15c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d160:	d301      	bcc.n	800d166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d162:	2301      	movs	r3, #1
 800d164:	e00f      	b.n	800d186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d166:	4a0a      	ldr	r2, [pc, #40]	; (800d190 <SysTick_Config+0x40>)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	3b01      	subs	r3, #1
 800d16c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d16e:	210f      	movs	r1, #15
 800d170:	f04f 30ff 	mov.w	r0, #4294967295
 800d174:	f7ff ff8e 	bl	800d094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d178:	4b05      	ldr	r3, [pc, #20]	; (800d190 <SysTick_Config+0x40>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d17e:	4b04      	ldr	r3, [pc, #16]	; (800d190 <SysTick_Config+0x40>)
 800d180:	2207      	movs	r2, #7
 800d182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d184:	2300      	movs	r3, #0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	e000e010 	.word	0xe000e010

0800d194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7ff ff29 	bl	800cff4 <__NVIC_SetPriorityGrouping>
}
 800d1a2:	bf00      	nop
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b086      	sub	sp, #24
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	60b9      	str	r1, [r7, #8]
 800d1b4:	607a      	str	r2, [r7, #4]
 800d1b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d1bc:	f7ff ff3e 	bl	800d03c <__NVIC_GetPriorityGrouping>
 800d1c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	68b9      	ldr	r1, [r7, #8]
 800d1c6:	6978      	ldr	r0, [r7, #20]
 800d1c8:	f7ff ff8e 	bl	800d0e8 <NVIC_EncodePriority>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7ff ff5d 	bl	800d094 <__NVIC_SetPriority>
}
 800d1da:	bf00      	nop
 800d1dc:	3718      	adds	r7, #24
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b082      	sub	sp, #8
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d1ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7ff ff31 	bl	800d058 <__NVIC_EnableIRQ>
}
 800d1f6:	bf00      	nop
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b082      	sub	sp, #8
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7ff ffa2 	bl	800d150 <SysTick_Config>
 800d20c:	4603      	mov	r3, r0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3708      	adds	r7, #8
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d222:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800d224:	f7ff f986 	bl	800c534 <HAL_GetTick>
 800d228:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d230:	b2db      	uxtb	r3, r3
 800d232:	2b02      	cmp	r3, #2
 800d234:	d008      	beq.n	800d248 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2280      	movs	r2, #128	; 0x80
 800d23a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	e052      	b.n	800d2ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f022 0216 	bic.w	r2, r2, #22
 800d256:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	695a      	ldr	r2, [r3, #20]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d266:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d103      	bne.n	800d278 <HAL_DMA_Abort+0x62>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d274:	2b00      	cmp	r3, #0
 800d276:	d007      	beq.n	800d288 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f022 0208 	bic.w	r2, r2, #8
 800d286:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f022 0201 	bic.w	r2, r2, #1
 800d296:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d298:	e013      	b.n	800d2c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d29a:	f7ff f94b 	bl	800c534 <HAL_GetTick>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	2b05      	cmp	r3, #5
 800d2a6:	d90c      	bls.n	800d2c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2220      	movs	r2, #32
 800d2ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2203      	movs	r2, #3
 800d2b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	e015      	b.n	800d2ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f003 0301 	and.w	r3, r3, #1
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1e4      	bne.n	800d29a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2d4:	223f      	movs	r2, #63	; 0x3f
 800d2d6:	409a      	lsls	r2, r3
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d2f6:	b480      	push	{r7}
 800d2f8:	b083      	sub	sp, #12
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d304:	b2db      	uxtb	r3, r3
 800d306:	2b02      	cmp	r3, #2
 800d308:	d004      	beq.n	800d314 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2280      	movs	r2, #128	; 0x80
 800d30e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e00c      	b.n	800d32e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2205      	movs	r2, #5
 800d318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f022 0201 	bic.w	r2, r2, #1
 800d32a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	370c      	adds	r7, #12
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
	...

0800d33c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b089      	sub	sp, #36	; 0x24
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d346:	2300      	movs	r3, #0
 800d348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d34a:	2300      	movs	r3, #0
 800d34c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d34e:	2300      	movs	r3, #0
 800d350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d352:	2300      	movs	r3, #0
 800d354:	61fb      	str	r3, [r7, #28]
 800d356:	e16b      	b.n	800d630 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d358:	2201      	movs	r2, #1
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	fa02 f303 	lsl.w	r3, r2, r3
 800d360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	4013      	ands	r3, r2
 800d36a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d36c:	693a      	ldr	r2, [r7, #16]
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	429a      	cmp	r2, r3
 800d372:	f040 815a 	bne.w	800d62a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	f003 0303 	and.w	r3, r3, #3
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d005      	beq.n	800d38e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d130      	bne.n	800d3f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	005b      	lsls	r3, r3, #1
 800d398:	2203      	movs	r2, #3
 800d39a:	fa02 f303 	lsl.w	r3, r2, r3
 800d39e:	43db      	mvns	r3, r3
 800d3a0:	69ba      	ldr	r2, [r7, #24]
 800d3a2:	4013      	ands	r3, r2
 800d3a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	68da      	ldr	r2, [r3, #12]
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	005b      	lsls	r3, r3, #1
 800d3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d3b2:	69ba      	ldr	r2, [r7, #24]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	69ba      	ldr	r2, [r7, #24]
 800d3bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3cc:	43db      	mvns	r3, r3
 800d3ce:	69ba      	ldr	r2, [r7, #24]
 800d3d0:	4013      	ands	r3, r2
 800d3d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	091b      	lsrs	r3, r3, #4
 800d3da:	f003 0201 	and.w	r2, r3, #1
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3e4:	69ba      	ldr	r2, [r7, #24]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	69ba      	ldr	r2, [r7, #24]
 800d3ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	f003 0303 	and.w	r3, r3, #3
 800d3f8:	2b03      	cmp	r3, #3
 800d3fa:	d017      	beq.n	800d42c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	2203      	movs	r2, #3
 800d408:	fa02 f303 	lsl.w	r3, r2, r3
 800d40c:	43db      	mvns	r3, r3
 800d40e:	69ba      	ldr	r2, [r7, #24]
 800d410:	4013      	ands	r3, r2
 800d412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	689a      	ldr	r2, [r3, #8]
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	005b      	lsls	r3, r3, #1
 800d41c:	fa02 f303 	lsl.w	r3, r2, r3
 800d420:	69ba      	ldr	r2, [r7, #24]
 800d422:	4313      	orrs	r3, r2
 800d424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	69ba      	ldr	r2, [r7, #24]
 800d42a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	f003 0303 	and.w	r3, r3, #3
 800d434:	2b02      	cmp	r3, #2
 800d436:	d123      	bne.n	800d480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	08da      	lsrs	r2, r3, #3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	3208      	adds	r2, #8
 800d440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	f003 0307 	and.w	r3, r3, #7
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	220f      	movs	r2, #15
 800d450:	fa02 f303 	lsl.w	r3, r2, r3
 800d454:	43db      	mvns	r3, r3
 800d456:	69ba      	ldr	r2, [r7, #24]
 800d458:	4013      	ands	r3, r2
 800d45a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	691a      	ldr	r2, [r3, #16]
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	f003 0307 	and.w	r3, r3, #7
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	fa02 f303 	lsl.w	r3, r2, r3
 800d46c:	69ba      	ldr	r2, [r7, #24]
 800d46e:	4313      	orrs	r3, r2
 800d470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	08da      	lsrs	r2, r3, #3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	3208      	adds	r2, #8
 800d47a:	69b9      	ldr	r1, [r7, #24]
 800d47c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	005b      	lsls	r3, r3, #1
 800d48a:	2203      	movs	r2, #3
 800d48c:	fa02 f303 	lsl.w	r3, r2, r3
 800d490:	43db      	mvns	r3, r3
 800d492:	69ba      	ldr	r2, [r7, #24]
 800d494:	4013      	ands	r3, r2
 800d496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	f003 0203 	and.w	r2, r3, #3
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a8:	69ba      	ldr	r2, [r7, #24]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	69ba      	ldr	r2, [r7, #24]
 800d4b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f000 80b4 	beq.w	800d62a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	60fb      	str	r3, [r7, #12]
 800d4c6:	4b60      	ldr	r3, [pc, #384]	; (800d648 <HAL_GPIO_Init+0x30c>)
 800d4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ca:	4a5f      	ldr	r2, [pc, #380]	; (800d648 <HAL_GPIO_Init+0x30c>)
 800d4cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4d0:	6453      	str	r3, [r2, #68]	; 0x44
 800d4d2:	4b5d      	ldr	r3, [pc, #372]	; (800d648 <HAL_GPIO_Init+0x30c>)
 800d4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4da:	60fb      	str	r3, [r7, #12]
 800d4dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d4de:	4a5b      	ldr	r2, [pc, #364]	; (800d64c <HAL_GPIO_Init+0x310>)
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	089b      	lsrs	r3, r3, #2
 800d4e4:	3302      	adds	r3, #2
 800d4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	f003 0303 	and.w	r3, r3, #3
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	220f      	movs	r2, #15
 800d4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4fa:	43db      	mvns	r3, r3
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	4013      	ands	r3, r2
 800d500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	4a52      	ldr	r2, [pc, #328]	; (800d650 <HAL_GPIO_Init+0x314>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d02b      	beq.n	800d562 <HAL_GPIO_Init+0x226>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4a51      	ldr	r2, [pc, #324]	; (800d654 <HAL_GPIO_Init+0x318>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d025      	beq.n	800d55e <HAL_GPIO_Init+0x222>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4a50      	ldr	r2, [pc, #320]	; (800d658 <HAL_GPIO_Init+0x31c>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d01f      	beq.n	800d55a <HAL_GPIO_Init+0x21e>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4a4f      	ldr	r2, [pc, #316]	; (800d65c <HAL_GPIO_Init+0x320>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d019      	beq.n	800d556 <HAL_GPIO_Init+0x21a>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4a4e      	ldr	r2, [pc, #312]	; (800d660 <HAL_GPIO_Init+0x324>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d013      	beq.n	800d552 <HAL_GPIO_Init+0x216>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4a4d      	ldr	r2, [pc, #308]	; (800d664 <HAL_GPIO_Init+0x328>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d00d      	beq.n	800d54e <HAL_GPIO_Init+0x212>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a4c      	ldr	r2, [pc, #304]	; (800d668 <HAL_GPIO_Init+0x32c>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d007      	beq.n	800d54a <HAL_GPIO_Init+0x20e>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a4b      	ldr	r2, [pc, #300]	; (800d66c <HAL_GPIO_Init+0x330>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d101      	bne.n	800d546 <HAL_GPIO_Init+0x20a>
 800d542:	2307      	movs	r3, #7
 800d544:	e00e      	b.n	800d564 <HAL_GPIO_Init+0x228>
 800d546:	2308      	movs	r3, #8
 800d548:	e00c      	b.n	800d564 <HAL_GPIO_Init+0x228>
 800d54a:	2306      	movs	r3, #6
 800d54c:	e00a      	b.n	800d564 <HAL_GPIO_Init+0x228>
 800d54e:	2305      	movs	r3, #5
 800d550:	e008      	b.n	800d564 <HAL_GPIO_Init+0x228>
 800d552:	2304      	movs	r3, #4
 800d554:	e006      	b.n	800d564 <HAL_GPIO_Init+0x228>
 800d556:	2303      	movs	r3, #3
 800d558:	e004      	b.n	800d564 <HAL_GPIO_Init+0x228>
 800d55a:	2302      	movs	r3, #2
 800d55c:	e002      	b.n	800d564 <HAL_GPIO_Init+0x228>
 800d55e:	2301      	movs	r3, #1
 800d560:	e000      	b.n	800d564 <HAL_GPIO_Init+0x228>
 800d562:	2300      	movs	r3, #0
 800d564:	69fa      	ldr	r2, [r7, #28]
 800d566:	f002 0203 	and.w	r2, r2, #3
 800d56a:	0092      	lsls	r2, r2, #2
 800d56c:	4093      	lsls	r3, r2
 800d56e:	69ba      	ldr	r2, [r7, #24]
 800d570:	4313      	orrs	r3, r2
 800d572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d574:	4935      	ldr	r1, [pc, #212]	; (800d64c <HAL_GPIO_Init+0x310>)
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	089b      	lsrs	r3, r3, #2
 800d57a:	3302      	adds	r3, #2
 800d57c:	69ba      	ldr	r2, [r7, #24]
 800d57e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d582:	4b3b      	ldr	r3, [pc, #236]	; (800d670 <HAL_GPIO_Init+0x334>)
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	43db      	mvns	r3, r3
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	4013      	ands	r3, r2
 800d590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d003      	beq.n	800d5a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d59e:	69ba      	ldr	r2, [r7, #24]
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d5a6:	4a32      	ldr	r2, [pc, #200]	; (800d670 <HAL_GPIO_Init+0x334>)
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d5ac:	4b30      	ldr	r3, [pc, #192]	; (800d670 <HAL_GPIO_Init+0x334>)
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	43db      	mvns	r3, r3
 800d5b6:	69ba      	ldr	r2, [r7, #24]
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d003      	beq.n	800d5d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d5c8:	69ba      	ldr	r2, [r7, #24]
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d5d0:	4a27      	ldr	r2, [pc, #156]	; (800d670 <HAL_GPIO_Init+0x334>)
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d5d6:	4b26      	ldr	r3, [pc, #152]	; (800d670 <HAL_GPIO_Init+0x334>)
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	43db      	mvns	r3, r3
 800d5e0:	69ba      	ldr	r2, [r7, #24]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d003      	beq.n	800d5fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d5f2:	69ba      	ldr	r2, [r7, #24]
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d5fa:	4a1d      	ldr	r2, [pc, #116]	; (800d670 <HAL_GPIO_Init+0x334>)
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d600:	4b1b      	ldr	r3, [pc, #108]	; (800d670 <HAL_GPIO_Init+0x334>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	43db      	mvns	r3, r3
 800d60a:	69ba      	ldr	r2, [r7, #24]
 800d60c:	4013      	ands	r3, r2
 800d60e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d003      	beq.n	800d624 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d61c:	69ba      	ldr	r2, [r7, #24]
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	4313      	orrs	r3, r2
 800d622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d624:	4a12      	ldr	r2, [pc, #72]	; (800d670 <HAL_GPIO_Init+0x334>)
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	3301      	adds	r3, #1
 800d62e:	61fb      	str	r3, [r7, #28]
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	2b0f      	cmp	r3, #15
 800d634:	f67f ae90 	bls.w	800d358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d638:	bf00      	nop
 800d63a:	bf00      	nop
 800d63c:	3724      	adds	r7, #36	; 0x24
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	40023800 	.word	0x40023800
 800d64c:	40013800 	.word	0x40013800
 800d650:	40020000 	.word	0x40020000
 800d654:	40020400 	.word	0x40020400
 800d658:	40020800 	.word	0x40020800
 800d65c:	40020c00 	.word	0x40020c00
 800d660:	40021000 	.word	0x40021000
 800d664:	40021400 	.word	0x40021400
 800d668:	40021800 	.word	0x40021800
 800d66c:	40021c00 	.word	0x40021c00
 800d670:	40013c00 	.word	0x40013c00

0800d674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	460b      	mov	r3, r1
 800d67e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	691a      	ldr	r2, [r3, #16]
 800d684:	887b      	ldrh	r3, [r7, #2]
 800d686:	4013      	ands	r3, r2
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d68c:	2301      	movs	r3, #1
 800d68e:	73fb      	strb	r3, [r7, #15]
 800d690:	e001      	b.n	800d696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d692:	2300      	movs	r3, #0
 800d694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d696:	7bfb      	ldrb	r3, [r7, #15]
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3714      	adds	r7, #20
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	807b      	strh	r3, [r7, #2]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d6b4:	787b      	ldrb	r3, [r7, #1]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d003      	beq.n	800d6c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d6ba:	887a      	ldrh	r2, [r7, #2]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d6c0:	e003      	b.n	800d6ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d6c2:	887b      	ldrh	r3, [r7, #2]
 800d6c4:	041a      	lsls	r2, r3, #16
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	619a      	str	r2, [r3, #24]
}
 800d6ca:	bf00      	nop
 800d6cc:	370c      	adds	r7, #12
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
	...

0800d6d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	4603      	mov	r3, r0
 800d6e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d6e2:	4b08      	ldr	r3, [pc, #32]	; (800d704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d6e4:	695a      	ldr	r2, [r3, #20]
 800d6e6:	88fb      	ldrh	r3, [r7, #6]
 800d6e8:	4013      	ands	r3, r2
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d006      	beq.n	800d6fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d6ee:	4a05      	ldr	r2, [pc, #20]	; (800d704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d6f0:	88fb      	ldrh	r3, [r7, #6]
 800d6f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d6f4:	88fb      	ldrh	r3, [r7, #6]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fe f8d2 	bl	800b8a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800d6fc:	bf00      	nop
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	40013c00 	.word	0x40013c00

0800d708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d101      	bne.n	800d71a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e267      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	d075      	beq.n	800d812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d726:	4b88      	ldr	r3, [pc, #544]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	f003 030c 	and.w	r3, r3, #12
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d00c      	beq.n	800d74c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d732:	4b85      	ldr	r3, [pc, #532]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d73a:	2b08      	cmp	r3, #8
 800d73c:	d112      	bne.n	800d764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d73e:	4b82      	ldr	r3, [pc, #520]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d74a:	d10b      	bne.n	800d764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d74c:	4b7e      	ldr	r3, [pc, #504]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d754:	2b00      	cmp	r3, #0
 800d756:	d05b      	beq.n	800d810 <HAL_RCC_OscConfig+0x108>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d157      	bne.n	800d810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	e242      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d76c:	d106      	bne.n	800d77c <HAL_RCC_OscConfig+0x74>
 800d76e:	4b76      	ldr	r3, [pc, #472]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4a75      	ldr	r2, [pc, #468]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d778:	6013      	str	r3, [r2, #0]
 800d77a:	e01d      	b.n	800d7b8 <HAL_RCC_OscConfig+0xb0>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d784:	d10c      	bne.n	800d7a0 <HAL_RCC_OscConfig+0x98>
 800d786:	4b70      	ldr	r3, [pc, #448]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a6f      	ldr	r2, [pc, #444]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d78c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d790:	6013      	str	r3, [r2, #0]
 800d792:	4b6d      	ldr	r3, [pc, #436]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a6c      	ldr	r2, [pc, #432]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d79c:	6013      	str	r3, [r2, #0]
 800d79e:	e00b      	b.n	800d7b8 <HAL_RCC_OscConfig+0xb0>
 800d7a0:	4b69      	ldr	r3, [pc, #420]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a68      	ldr	r2, [pc, #416]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d7a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7aa:	6013      	str	r3, [r2, #0]
 800d7ac:	4b66      	ldr	r3, [pc, #408]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a65      	ldr	r2, [pc, #404]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d7b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d7b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d013      	beq.n	800d7e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d7c0:	f7fe feb8 	bl	800c534 <HAL_GetTick>
 800d7c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7c6:	e008      	b.n	800d7da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d7c8:	f7fe feb4 	bl	800c534 <HAL_GetTick>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	2b64      	cmp	r3, #100	; 0x64
 800d7d4:	d901      	bls.n	800d7da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	e207      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7da:	4b5b      	ldr	r3, [pc, #364]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d0f0      	beq.n	800d7c8 <HAL_RCC_OscConfig+0xc0>
 800d7e6:	e014      	b.n	800d812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d7e8:	f7fe fea4 	bl	800c534 <HAL_GetTick>
 800d7ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d7ee:	e008      	b.n	800d802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d7f0:	f7fe fea0 	bl	800c534 <HAL_GetTick>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	2b64      	cmp	r3, #100	; 0x64
 800d7fc:	d901      	bls.n	800d802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d7fe:	2303      	movs	r3, #3
 800d800:	e1f3      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d802:	4b51      	ldr	r3, [pc, #324]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1f0      	bne.n	800d7f0 <HAL_RCC_OscConfig+0xe8>
 800d80e:	e000      	b.n	800d812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f003 0302 	and.w	r3, r3, #2
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d063      	beq.n	800d8e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d81e:	4b4a      	ldr	r3, [pc, #296]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	f003 030c 	and.w	r3, r3, #12
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00b      	beq.n	800d842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d82a:	4b47      	ldr	r3, [pc, #284]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d832:	2b08      	cmp	r3, #8
 800d834:	d11c      	bne.n	800d870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d836:	4b44      	ldr	r3, [pc, #272]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d116      	bne.n	800d870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d842:	4b41      	ldr	r3, [pc, #260]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f003 0302 	and.w	r3, r3, #2
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d005      	beq.n	800d85a <HAL_RCC_OscConfig+0x152>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d001      	beq.n	800d85a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d856:	2301      	movs	r3, #1
 800d858:	e1c7      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d85a:	4b3b      	ldr	r3, [pc, #236]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	4937      	ldr	r1, [pc, #220]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d86a:	4313      	orrs	r3, r2
 800d86c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d86e:	e03a      	b.n	800d8e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d020      	beq.n	800d8ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d878:	4b34      	ldr	r3, [pc, #208]	; (800d94c <HAL_RCC_OscConfig+0x244>)
 800d87a:	2201      	movs	r2, #1
 800d87c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d87e:	f7fe fe59 	bl	800c534 <HAL_GetTick>
 800d882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d884:	e008      	b.n	800d898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d886:	f7fe fe55 	bl	800c534 <HAL_GetTick>
 800d88a:	4602      	mov	r2, r0
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	1ad3      	subs	r3, r2, r3
 800d890:	2b02      	cmp	r3, #2
 800d892:	d901      	bls.n	800d898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d894:	2303      	movs	r3, #3
 800d896:	e1a8      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d898:	4b2b      	ldr	r3, [pc, #172]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f003 0302 	and.w	r3, r3, #2
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d0f0      	beq.n	800d886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d8a4:	4b28      	ldr	r3, [pc, #160]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	00db      	lsls	r3, r3, #3
 800d8b2:	4925      	ldr	r1, [pc, #148]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	600b      	str	r3, [r1, #0]
 800d8b8:	e015      	b.n	800d8e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d8ba:	4b24      	ldr	r3, [pc, #144]	; (800d94c <HAL_RCC_OscConfig+0x244>)
 800d8bc:	2200      	movs	r2, #0
 800d8be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8c0:	f7fe fe38 	bl	800c534 <HAL_GetTick>
 800d8c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d8c6:	e008      	b.n	800d8da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d8c8:	f7fe fe34 	bl	800c534 <HAL_GetTick>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d901      	bls.n	800d8da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d8d6:	2303      	movs	r3, #3
 800d8d8:	e187      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d8da:	4b1b      	ldr	r3, [pc, #108]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f003 0302 	and.w	r3, r3, #2
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1f0      	bne.n	800d8c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f003 0308 	and.w	r3, r3, #8
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d036      	beq.n	800d960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	695b      	ldr	r3, [r3, #20]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d016      	beq.n	800d928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d8fa:	4b15      	ldr	r3, [pc, #84]	; (800d950 <HAL_RCC_OscConfig+0x248>)
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d900:	f7fe fe18 	bl	800c534 <HAL_GetTick>
 800d904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d906:	e008      	b.n	800d91a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d908:	f7fe fe14 	bl	800c534 <HAL_GetTick>
 800d90c:	4602      	mov	r2, r0
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	2b02      	cmp	r3, #2
 800d914:	d901      	bls.n	800d91a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d916:	2303      	movs	r3, #3
 800d918:	e167      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d91a:	4b0b      	ldr	r3, [pc, #44]	; (800d948 <HAL_RCC_OscConfig+0x240>)
 800d91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d91e:	f003 0302 	and.w	r3, r3, #2
 800d922:	2b00      	cmp	r3, #0
 800d924:	d0f0      	beq.n	800d908 <HAL_RCC_OscConfig+0x200>
 800d926:	e01b      	b.n	800d960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d928:	4b09      	ldr	r3, [pc, #36]	; (800d950 <HAL_RCC_OscConfig+0x248>)
 800d92a:	2200      	movs	r2, #0
 800d92c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d92e:	f7fe fe01 	bl	800c534 <HAL_GetTick>
 800d932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d934:	e00e      	b.n	800d954 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d936:	f7fe fdfd 	bl	800c534 <HAL_GetTick>
 800d93a:	4602      	mov	r2, r0
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	2b02      	cmp	r3, #2
 800d942:	d907      	bls.n	800d954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d944:	2303      	movs	r3, #3
 800d946:	e150      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
 800d948:	40023800 	.word	0x40023800
 800d94c:	42470000 	.word	0x42470000
 800d950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d954:	4b88      	ldr	r3, [pc, #544]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800d956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d958:	f003 0302 	and.w	r3, r3, #2
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d1ea      	bne.n	800d936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 0304 	and.w	r3, r3, #4
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f000 8097 	beq.w	800da9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d96e:	2300      	movs	r3, #0
 800d970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d972:	4b81      	ldr	r3, [pc, #516]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800d974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d10f      	bne.n	800d99e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d97e:	2300      	movs	r3, #0
 800d980:	60bb      	str	r3, [r7, #8]
 800d982:	4b7d      	ldr	r3, [pc, #500]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800d984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d986:	4a7c      	ldr	r2, [pc, #496]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800d988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d98c:	6413      	str	r3, [r2, #64]	; 0x40
 800d98e:	4b7a      	ldr	r3, [pc, #488]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800d990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d996:	60bb      	str	r3, [r7, #8]
 800d998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d99a:	2301      	movs	r3, #1
 800d99c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d99e:	4b77      	ldr	r3, [pc, #476]	; (800db7c <HAL_RCC_OscConfig+0x474>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d118      	bne.n	800d9dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d9aa:	4b74      	ldr	r3, [pc, #464]	; (800db7c <HAL_RCC_OscConfig+0x474>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a73      	ldr	r2, [pc, #460]	; (800db7c <HAL_RCC_OscConfig+0x474>)
 800d9b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d9b6:	f7fe fdbd 	bl	800c534 <HAL_GetTick>
 800d9ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d9bc:	e008      	b.n	800d9d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9be:	f7fe fdb9 	bl	800c534 <HAL_GetTick>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	1ad3      	subs	r3, r2, r3
 800d9c8:	2b02      	cmp	r3, #2
 800d9ca:	d901      	bls.n	800d9d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	e10c      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d9d0:	4b6a      	ldr	r3, [pc, #424]	; (800db7c <HAL_RCC_OscConfig+0x474>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d0f0      	beq.n	800d9be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d106      	bne.n	800d9f2 <HAL_RCC_OscConfig+0x2ea>
 800d9e4:	4b64      	ldr	r3, [pc, #400]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800d9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9e8:	4a63      	ldr	r2, [pc, #396]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800d9ea:	f043 0301 	orr.w	r3, r3, #1
 800d9ee:	6713      	str	r3, [r2, #112]	; 0x70
 800d9f0:	e01c      	b.n	800da2c <HAL_RCC_OscConfig+0x324>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	2b05      	cmp	r3, #5
 800d9f8:	d10c      	bne.n	800da14 <HAL_RCC_OscConfig+0x30c>
 800d9fa:	4b5f      	ldr	r3, [pc, #380]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800d9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9fe:	4a5e      	ldr	r2, [pc, #376]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da00:	f043 0304 	orr.w	r3, r3, #4
 800da04:	6713      	str	r3, [r2, #112]	; 0x70
 800da06:	4b5c      	ldr	r3, [pc, #368]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da0a:	4a5b      	ldr	r2, [pc, #364]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da0c:	f043 0301 	orr.w	r3, r3, #1
 800da10:	6713      	str	r3, [r2, #112]	; 0x70
 800da12:	e00b      	b.n	800da2c <HAL_RCC_OscConfig+0x324>
 800da14:	4b58      	ldr	r3, [pc, #352]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da18:	4a57      	ldr	r2, [pc, #348]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da1a:	f023 0301 	bic.w	r3, r3, #1
 800da1e:	6713      	str	r3, [r2, #112]	; 0x70
 800da20:	4b55      	ldr	r3, [pc, #340]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da24:	4a54      	ldr	r2, [pc, #336]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da26:	f023 0304 	bic.w	r3, r3, #4
 800da2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d015      	beq.n	800da60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da34:	f7fe fd7e 	bl	800c534 <HAL_GetTick>
 800da38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da3a:	e00a      	b.n	800da52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800da3c:	f7fe fd7a 	bl	800c534 <HAL_GetTick>
 800da40:	4602      	mov	r2, r0
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	1ad3      	subs	r3, r2, r3
 800da46:	f241 3288 	movw	r2, #5000	; 0x1388
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d901      	bls.n	800da52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800da4e:	2303      	movs	r3, #3
 800da50:	e0cb      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da52:	4b49      	ldr	r3, [pc, #292]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da56:	f003 0302 	and.w	r3, r3, #2
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0ee      	beq.n	800da3c <HAL_RCC_OscConfig+0x334>
 800da5e:	e014      	b.n	800da8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800da60:	f7fe fd68 	bl	800c534 <HAL_GetTick>
 800da64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da66:	e00a      	b.n	800da7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800da68:	f7fe fd64 	bl	800c534 <HAL_GetTick>
 800da6c:	4602      	mov	r2, r0
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	f241 3288 	movw	r2, #5000	; 0x1388
 800da76:	4293      	cmp	r3, r2
 800da78:	d901      	bls.n	800da7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800da7a:	2303      	movs	r3, #3
 800da7c:	e0b5      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da7e:	4b3e      	ldr	r3, [pc, #248]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da82:	f003 0302 	and.w	r3, r3, #2
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1ee      	bne.n	800da68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800da8a:	7dfb      	ldrb	r3, [r7, #23]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d105      	bne.n	800da9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da90:	4b39      	ldr	r3, [pc, #228]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da94:	4a38      	ldr	r2, [pc, #224]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800da96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	699b      	ldr	r3, [r3, #24]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f000 80a1 	beq.w	800dbe8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800daa6:	4b34      	ldr	r3, [pc, #208]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	f003 030c 	and.w	r3, r3, #12
 800daae:	2b08      	cmp	r3, #8
 800dab0:	d05c      	beq.n	800db6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	699b      	ldr	r3, [r3, #24]
 800dab6:	2b02      	cmp	r3, #2
 800dab8:	d141      	bne.n	800db3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800daba:	4b31      	ldr	r3, [pc, #196]	; (800db80 <HAL_RCC_OscConfig+0x478>)
 800dabc:	2200      	movs	r2, #0
 800dabe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dac0:	f7fe fd38 	bl	800c534 <HAL_GetTick>
 800dac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dac6:	e008      	b.n	800dada <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dac8:	f7fe fd34 	bl	800c534 <HAL_GetTick>
 800dacc:	4602      	mov	r2, r0
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d901      	bls.n	800dada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800dad6:	2303      	movs	r3, #3
 800dad8:	e087      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dada:	4b27      	ldr	r3, [pc, #156]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1f0      	bne.n	800dac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	69da      	ldr	r2, [r3, #28]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a1b      	ldr	r3, [r3, #32]
 800daee:	431a      	orrs	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf4:	019b      	lsls	r3, r3, #6
 800daf6:	431a      	orrs	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dafc:	085b      	lsrs	r3, r3, #1
 800dafe:	3b01      	subs	r3, #1
 800db00:	041b      	lsls	r3, r3, #16
 800db02:	431a      	orrs	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db08:	061b      	lsls	r3, r3, #24
 800db0a:	491b      	ldr	r1, [pc, #108]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800db0c:	4313      	orrs	r3, r2
 800db0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db10:	4b1b      	ldr	r3, [pc, #108]	; (800db80 <HAL_RCC_OscConfig+0x478>)
 800db12:	2201      	movs	r2, #1
 800db14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db16:	f7fe fd0d 	bl	800c534 <HAL_GetTick>
 800db1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db1c:	e008      	b.n	800db30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db1e:	f7fe fd09 	bl	800c534 <HAL_GetTick>
 800db22:	4602      	mov	r2, r0
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	2b02      	cmp	r3, #2
 800db2a:	d901      	bls.n	800db30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800db2c:	2303      	movs	r3, #3
 800db2e:	e05c      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db30:	4b11      	ldr	r3, [pc, #68]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d0f0      	beq.n	800db1e <HAL_RCC_OscConfig+0x416>
 800db3c:	e054      	b.n	800dbe8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db3e:	4b10      	ldr	r3, [pc, #64]	; (800db80 <HAL_RCC_OscConfig+0x478>)
 800db40:	2200      	movs	r2, #0
 800db42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db44:	f7fe fcf6 	bl	800c534 <HAL_GetTick>
 800db48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db4a:	e008      	b.n	800db5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db4c:	f7fe fcf2 	bl	800c534 <HAL_GetTick>
 800db50:	4602      	mov	r2, r0
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	2b02      	cmp	r3, #2
 800db58:	d901      	bls.n	800db5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800db5a:	2303      	movs	r3, #3
 800db5c:	e045      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db5e:	4b06      	ldr	r3, [pc, #24]	; (800db78 <HAL_RCC_OscConfig+0x470>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db66:	2b00      	cmp	r3, #0
 800db68:	d1f0      	bne.n	800db4c <HAL_RCC_OscConfig+0x444>
 800db6a:	e03d      	b.n	800dbe8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d107      	bne.n	800db84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800db74:	2301      	movs	r3, #1
 800db76:	e038      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
 800db78:	40023800 	.word	0x40023800
 800db7c:	40007000 	.word	0x40007000
 800db80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800db84:	4b1b      	ldr	r3, [pc, #108]	; (800dbf4 <HAL_RCC_OscConfig+0x4ec>)
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d028      	beq.n	800dbe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d121      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d11a      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dbba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d111      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbca:	085b      	lsrs	r3, r3, #1
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d107      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d001      	beq.n	800dbe8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e000      	b.n	800dbea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800dbe8:	2300      	movs	r3, #0
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	40023800 	.word	0x40023800

0800dbf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d101      	bne.n	800dc0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e0cc      	b.n	800dda6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dc0c:	4b68      	ldr	r3, [pc, #416]	; (800ddb0 <HAL_RCC_ClockConfig+0x1b8>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f003 0307 	and.w	r3, r3, #7
 800dc14:	683a      	ldr	r2, [r7, #0]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d90c      	bls.n	800dc34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc1a:	4b65      	ldr	r3, [pc, #404]	; (800ddb0 <HAL_RCC_ClockConfig+0x1b8>)
 800dc1c:	683a      	ldr	r2, [r7, #0]
 800dc1e:	b2d2      	uxtb	r2, r2
 800dc20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc22:	4b63      	ldr	r3, [pc, #396]	; (800ddb0 <HAL_RCC_ClockConfig+0x1b8>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f003 0307 	and.w	r3, r3, #7
 800dc2a:	683a      	ldr	r2, [r7, #0]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d001      	beq.n	800dc34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e0b8      	b.n	800dda6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f003 0302 	and.w	r3, r3, #2
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d020      	beq.n	800dc82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f003 0304 	and.w	r3, r3, #4
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d005      	beq.n	800dc58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dc4c:	4b59      	ldr	r3, [pc, #356]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	4a58      	ldr	r2, [pc, #352]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dc56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f003 0308 	and.w	r3, r3, #8
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d005      	beq.n	800dc70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dc64:	4b53      	ldr	r3, [pc, #332]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc66:	689b      	ldr	r3, [r3, #8]
 800dc68:	4a52      	ldr	r2, [pc, #328]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dc6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc70:	4b50      	ldr	r3, [pc, #320]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	494d      	ldr	r1, [pc, #308]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d044      	beq.n	800dd18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d107      	bne.n	800dca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc96:	4b47      	ldr	r3, [pc, #284]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d119      	bne.n	800dcd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dca2:	2301      	movs	r3, #1
 800dca4:	e07f      	b.n	800dda6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	2b02      	cmp	r3, #2
 800dcac:	d003      	beq.n	800dcb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dcb2:	2b03      	cmp	r3, #3
 800dcb4:	d107      	bne.n	800dcc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dcb6:	4b3f      	ldr	r3, [pc, #252]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d109      	bne.n	800dcd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e06f      	b.n	800dda6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dcc6:	4b3b      	ldr	r3, [pc, #236]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f003 0302 	and.w	r3, r3, #2
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e067      	b.n	800dda6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dcd6:	4b37      	ldr	r3, [pc, #220]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	f023 0203 	bic.w	r2, r3, #3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	4934      	ldr	r1, [pc, #208]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dce4:	4313      	orrs	r3, r2
 800dce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dce8:	f7fe fc24 	bl	800c534 <HAL_GetTick>
 800dcec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dcee:	e00a      	b.n	800dd06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dcf0:	f7fe fc20 	bl	800c534 <HAL_GetTick>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	1ad3      	subs	r3, r2, r3
 800dcfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d901      	bls.n	800dd06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dd02:	2303      	movs	r3, #3
 800dd04:	e04f      	b.n	800dda6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd06:	4b2b      	ldr	r3, [pc, #172]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	f003 020c 	and.w	r2, r3, #12
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d1eb      	bne.n	800dcf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dd18:	4b25      	ldr	r3, [pc, #148]	; (800ddb0 <HAL_RCC_ClockConfig+0x1b8>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f003 0307 	and.w	r3, r3, #7
 800dd20:	683a      	ldr	r2, [r7, #0]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d20c      	bcs.n	800dd40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd26:	4b22      	ldr	r3, [pc, #136]	; (800ddb0 <HAL_RCC_ClockConfig+0x1b8>)
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	b2d2      	uxtb	r2, r2
 800dd2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd2e:	4b20      	ldr	r3, [pc, #128]	; (800ddb0 <HAL_RCC_ClockConfig+0x1b8>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0307 	and.w	r3, r3, #7
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d001      	beq.n	800dd40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e032      	b.n	800dda6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 0304 	and.w	r3, r3, #4
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d008      	beq.n	800dd5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dd4c:	4b19      	ldr	r3, [pc, #100]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	4916      	ldr	r1, [pc, #88]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f003 0308 	and.w	r3, r3, #8
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d009      	beq.n	800dd7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dd6a:	4b12      	ldr	r3, [pc, #72]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	00db      	lsls	r3, r3, #3
 800dd78:	490e      	ldr	r1, [pc, #56]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dd7e:	f000 f821 	bl	800ddc4 <HAL_RCC_GetSysClockFreq>
 800dd82:	4602      	mov	r2, r0
 800dd84:	4b0b      	ldr	r3, [pc, #44]	; (800ddb4 <HAL_RCC_ClockConfig+0x1bc>)
 800dd86:	689b      	ldr	r3, [r3, #8]
 800dd88:	091b      	lsrs	r3, r3, #4
 800dd8a:	f003 030f 	and.w	r3, r3, #15
 800dd8e:	490a      	ldr	r1, [pc, #40]	; (800ddb8 <HAL_RCC_ClockConfig+0x1c0>)
 800dd90:	5ccb      	ldrb	r3, [r1, r3]
 800dd92:	fa22 f303 	lsr.w	r3, r2, r3
 800dd96:	4a09      	ldr	r2, [pc, #36]	; (800ddbc <HAL_RCC_ClockConfig+0x1c4>)
 800dd98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dd9a:	4b09      	ldr	r3, [pc, #36]	; (800ddc0 <HAL_RCC_ClockConfig+0x1c8>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fe fb84 	bl	800c4ac <HAL_InitTick>

  return HAL_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	40023c00 	.word	0x40023c00
 800ddb4:	40023800 	.word	0x40023800
 800ddb8:	0801444c 	.word	0x0801444c
 800ddbc:	20000058 	.word	0x20000058
 800ddc0:	2000005c 	.word	0x2000005c

0800ddc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ddc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ddc8:	b090      	sub	sp, #64	; 0x40
 800ddca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	637b      	str	r3, [r7, #52]	; 0x34
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dddc:	4b59      	ldr	r3, [pc, #356]	; (800df44 <HAL_RCC_GetSysClockFreq+0x180>)
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	f003 030c 	and.w	r3, r3, #12
 800dde4:	2b08      	cmp	r3, #8
 800dde6:	d00d      	beq.n	800de04 <HAL_RCC_GetSysClockFreq+0x40>
 800dde8:	2b08      	cmp	r3, #8
 800ddea:	f200 80a1 	bhi.w	800df30 <HAL_RCC_GetSysClockFreq+0x16c>
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d002      	beq.n	800ddf8 <HAL_RCC_GetSysClockFreq+0x34>
 800ddf2:	2b04      	cmp	r3, #4
 800ddf4:	d003      	beq.n	800ddfe <HAL_RCC_GetSysClockFreq+0x3a>
 800ddf6:	e09b      	b.n	800df30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ddf8:	4b53      	ldr	r3, [pc, #332]	; (800df48 <HAL_RCC_GetSysClockFreq+0x184>)
 800ddfa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800ddfc:	e09b      	b.n	800df36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ddfe:	4b53      	ldr	r3, [pc, #332]	; (800df4c <HAL_RCC_GetSysClockFreq+0x188>)
 800de00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800de02:	e098      	b.n	800df36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800de04:	4b4f      	ldr	r3, [pc, #316]	; (800df44 <HAL_RCC_GetSysClockFreq+0x180>)
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800de0e:	4b4d      	ldr	r3, [pc, #308]	; (800df44 <HAL_RCC_GetSysClockFreq+0x180>)
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de16:	2b00      	cmp	r3, #0
 800de18:	d028      	beq.n	800de6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de1a:	4b4a      	ldr	r3, [pc, #296]	; (800df44 <HAL_RCC_GetSysClockFreq+0x180>)
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	099b      	lsrs	r3, r3, #6
 800de20:	2200      	movs	r2, #0
 800de22:	623b      	str	r3, [r7, #32]
 800de24:	627a      	str	r2, [r7, #36]	; 0x24
 800de26:	6a3b      	ldr	r3, [r7, #32]
 800de28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800de2c:	2100      	movs	r1, #0
 800de2e:	4b47      	ldr	r3, [pc, #284]	; (800df4c <HAL_RCC_GetSysClockFreq+0x188>)
 800de30:	fb03 f201 	mul.w	r2, r3, r1
 800de34:	2300      	movs	r3, #0
 800de36:	fb00 f303 	mul.w	r3, r0, r3
 800de3a:	4413      	add	r3, r2
 800de3c:	4a43      	ldr	r2, [pc, #268]	; (800df4c <HAL_RCC_GetSysClockFreq+0x188>)
 800de3e:	fba0 1202 	umull	r1, r2, r0, r2
 800de42:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de44:	460a      	mov	r2, r1
 800de46:	62ba      	str	r2, [r7, #40]	; 0x28
 800de48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de4a:	4413      	add	r3, r2
 800de4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de50:	2200      	movs	r2, #0
 800de52:	61bb      	str	r3, [r7, #24]
 800de54:	61fa      	str	r2, [r7, #28]
 800de56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800de5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800de5e:	f7f2 fed3 	bl	8000c08 <__aeabi_uldivmod>
 800de62:	4602      	mov	r2, r0
 800de64:	460b      	mov	r3, r1
 800de66:	4613      	mov	r3, r2
 800de68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de6a:	e053      	b.n	800df14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de6c:	4b35      	ldr	r3, [pc, #212]	; (800df44 <HAL_RCC_GetSysClockFreq+0x180>)
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	099b      	lsrs	r3, r3, #6
 800de72:	2200      	movs	r2, #0
 800de74:	613b      	str	r3, [r7, #16]
 800de76:	617a      	str	r2, [r7, #20]
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800de7e:	f04f 0b00 	mov.w	fp, #0
 800de82:	4652      	mov	r2, sl
 800de84:	465b      	mov	r3, fp
 800de86:	f04f 0000 	mov.w	r0, #0
 800de8a:	f04f 0100 	mov.w	r1, #0
 800de8e:	0159      	lsls	r1, r3, #5
 800de90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800de94:	0150      	lsls	r0, r2, #5
 800de96:	4602      	mov	r2, r0
 800de98:	460b      	mov	r3, r1
 800de9a:	ebb2 080a 	subs.w	r8, r2, sl
 800de9e:	eb63 090b 	sbc.w	r9, r3, fp
 800dea2:	f04f 0200 	mov.w	r2, #0
 800dea6:	f04f 0300 	mov.w	r3, #0
 800deaa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800deae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800deb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800deb6:	ebb2 0408 	subs.w	r4, r2, r8
 800deba:	eb63 0509 	sbc.w	r5, r3, r9
 800debe:	f04f 0200 	mov.w	r2, #0
 800dec2:	f04f 0300 	mov.w	r3, #0
 800dec6:	00eb      	lsls	r3, r5, #3
 800dec8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800decc:	00e2      	lsls	r2, r4, #3
 800dece:	4614      	mov	r4, r2
 800ded0:	461d      	mov	r5, r3
 800ded2:	eb14 030a 	adds.w	r3, r4, sl
 800ded6:	603b      	str	r3, [r7, #0]
 800ded8:	eb45 030b 	adc.w	r3, r5, fp
 800dedc:	607b      	str	r3, [r7, #4]
 800dede:	f04f 0200 	mov.w	r2, #0
 800dee2:	f04f 0300 	mov.w	r3, #0
 800dee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800deea:	4629      	mov	r1, r5
 800deec:	028b      	lsls	r3, r1, #10
 800deee:	4621      	mov	r1, r4
 800def0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800def4:	4621      	mov	r1, r4
 800def6:	028a      	lsls	r2, r1, #10
 800def8:	4610      	mov	r0, r2
 800defa:	4619      	mov	r1, r3
 800defc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defe:	2200      	movs	r2, #0
 800df00:	60bb      	str	r3, [r7, #8]
 800df02:	60fa      	str	r2, [r7, #12]
 800df04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df08:	f7f2 fe7e 	bl	8000c08 <__aeabi_uldivmod>
 800df0c:	4602      	mov	r2, r0
 800df0e:	460b      	mov	r3, r1
 800df10:	4613      	mov	r3, r2
 800df12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800df14:	4b0b      	ldr	r3, [pc, #44]	; (800df44 <HAL_RCC_GetSysClockFreq+0x180>)
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	0c1b      	lsrs	r3, r3, #16
 800df1a:	f003 0303 	and.w	r3, r3, #3
 800df1e:	3301      	adds	r3, #1
 800df20:	005b      	lsls	r3, r3, #1
 800df22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800df24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	fbb2 f3f3 	udiv	r3, r2, r3
 800df2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800df2e:	e002      	b.n	800df36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800df30:	4b05      	ldr	r3, [pc, #20]	; (800df48 <HAL_RCC_GetSysClockFreq+0x184>)
 800df32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800df34:	bf00      	nop
    }
  }
  return sysclockfreq;
 800df36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3740      	adds	r7, #64	; 0x40
 800df3c:	46bd      	mov	sp, r7
 800df3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df42:	bf00      	nop
 800df44:	40023800 	.word	0x40023800
 800df48:	00f42400 	.word	0x00f42400
 800df4c:	017d7840 	.word	0x017d7840

0800df50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df50:	b480      	push	{r7}
 800df52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800df54:	4b03      	ldr	r3, [pc, #12]	; (800df64 <HAL_RCC_GetHCLKFreq+0x14>)
 800df56:	681b      	ldr	r3, [r3, #0]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	20000058 	.word	0x20000058

0800df68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800df6c:	f7ff fff0 	bl	800df50 <HAL_RCC_GetHCLKFreq>
 800df70:	4602      	mov	r2, r0
 800df72:	4b05      	ldr	r3, [pc, #20]	; (800df88 <HAL_RCC_GetPCLK1Freq+0x20>)
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	0a9b      	lsrs	r3, r3, #10
 800df78:	f003 0307 	and.w	r3, r3, #7
 800df7c:	4903      	ldr	r1, [pc, #12]	; (800df8c <HAL_RCC_GetPCLK1Freq+0x24>)
 800df7e:	5ccb      	ldrb	r3, [r1, r3]
 800df80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800df84:	4618      	mov	r0, r3
 800df86:	bd80      	pop	{r7, pc}
 800df88:	40023800 	.word	0x40023800
 800df8c:	0801445c 	.word	0x0801445c

0800df90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800df94:	f7ff ffdc 	bl	800df50 <HAL_RCC_GetHCLKFreq>
 800df98:	4602      	mov	r2, r0
 800df9a:	4b05      	ldr	r3, [pc, #20]	; (800dfb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	0b5b      	lsrs	r3, r3, #13
 800dfa0:	f003 0307 	and.w	r3, r3, #7
 800dfa4:	4903      	ldr	r1, [pc, #12]	; (800dfb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dfa6:	5ccb      	ldrb	r3, [r1, r3]
 800dfa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	40023800 	.word	0x40023800
 800dfb4:	0801445c 	.word	0x0801445c

0800dfb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d101      	bne.n	800dfca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e07b      	b.n	800e0c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d108      	bne.n	800dfe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfda:	d009      	beq.n	800dff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	61da      	str	r2, [r3, #28]
 800dfe2:	e005      	b.n	800dff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d106      	bne.n	800e010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f7fe f834 	bl	800c078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2202      	movs	r2, #2
 800e014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e026:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e038:	431a      	orrs	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e042:	431a      	orrs	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	691b      	ldr	r3, [r3, #16]
 800e048:	f003 0302 	and.w	r3, r3, #2
 800e04c:	431a      	orrs	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	f003 0301 	and.w	r3, r3, #1
 800e056:	431a      	orrs	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	699b      	ldr	r3, [r3, #24]
 800e05c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e060:	431a      	orrs	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	69db      	ldr	r3, [r3, #28]
 800e066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e06a:	431a      	orrs	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6a1b      	ldr	r3, [r3, #32]
 800e070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e074:	ea42 0103 	orr.w	r1, r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e07c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	430a      	orrs	r2, r1
 800e086:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	0c1b      	lsrs	r3, r3, #16
 800e08e:	f003 0104 	and.w	r1, r3, #4
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e096:	f003 0210 	and.w	r2, r3, #16
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	430a      	orrs	r2, r1
 800e0a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	69da      	ldr	r2, [r3, #28]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e0c0:	2300      	movs	r3, #0
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b088      	sub	sp, #32
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	60f8      	str	r0, [r7, #12]
 800e0d2:	60b9      	str	r1, [r7, #8]
 800e0d4:	603b      	str	r3, [r7, #0]
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d101      	bne.n	800e0ec <HAL_SPI_Transmit+0x22>
 800e0e8:	2302      	movs	r3, #2
 800e0ea:	e12d      	b.n	800e348 <HAL_SPI_Transmit+0x27e>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e0f4:	f7fe fa1e 	bl	800c534 <HAL_GetTick>
 800e0f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e0fa:	88fb      	ldrh	r3, [r7, #6]
 800e0fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b01      	cmp	r3, #1
 800e108:	d002      	beq.n	800e110 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e10a:	2302      	movs	r3, #2
 800e10c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e10e:	e116      	b.n	800e33e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d002      	beq.n	800e11c <HAL_SPI_Transmit+0x52>
 800e116:	88fb      	ldrh	r3, [r7, #6]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d102      	bne.n	800e122 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e11c:	2301      	movs	r3, #1
 800e11e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e120:	e10d      	b.n	800e33e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2203      	movs	r2, #3
 800e126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2200      	movs	r2, #0
 800e12e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	88fa      	ldrh	r2, [r7, #6]
 800e13a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	88fa      	ldrh	r2, [r7, #6]
 800e140:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2200      	movs	r2, #0
 800e14c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2200      	movs	r2, #0
 800e152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e168:	d10f      	bne.n	800e18a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e178:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e188:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e194:	2b40      	cmp	r3, #64	; 0x40
 800e196:	d007      	beq.n	800e1a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1b0:	d14f      	bne.n	800e252 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d002      	beq.n	800e1c0 <HAL_SPI_Transmit+0xf6>
 800e1ba:	8afb      	ldrh	r3, [r7, #22]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d142      	bne.n	800e246 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1c4:	881a      	ldrh	r2, [r3, #0]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1d0:	1c9a      	adds	r2, r3, #2
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e1e4:	e02f      	b.n	800e246 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	f003 0302 	and.w	r3, r3, #2
 800e1f0:	2b02      	cmp	r3, #2
 800e1f2:	d112      	bne.n	800e21a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f8:	881a      	ldrh	r2, [r3, #0]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e204:	1c9a      	adds	r2, r3, #2
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e20e:	b29b      	uxth	r3, r3
 800e210:	3b01      	subs	r3, #1
 800e212:	b29a      	uxth	r2, r3
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	86da      	strh	r2, [r3, #54]	; 0x36
 800e218:	e015      	b.n	800e246 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e21a:	f7fe f98b 	bl	800c534 <HAL_GetTick>
 800e21e:	4602      	mov	r2, r0
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	1ad3      	subs	r3, r2, r3
 800e224:	683a      	ldr	r2, [r7, #0]
 800e226:	429a      	cmp	r2, r3
 800e228:	d803      	bhi.n	800e232 <HAL_SPI_Transmit+0x168>
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e230:	d102      	bne.n	800e238 <HAL_SPI_Transmit+0x16e>
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d106      	bne.n	800e246 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800e238:	2303      	movs	r3, #3
 800e23a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2201      	movs	r2, #1
 800e240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800e244:	e07b      	b.n	800e33e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d1ca      	bne.n	800e1e6 <HAL_SPI_Transmit+0x11c>
 800e250:	e050      	b.n	800e2f4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d002      	beq.n	800e260 <HAL_SPI_Transmit+0x196>
 800e25a:	8afb      	ldrh	r3, [r7, #22]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d144      	bne.n	800e2ea <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	330c      	adds	r3, #12
 800e26a:	7812      	ldrb	r2, [r2, #0]
 800e26c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e272:	1c5a      	adds	r2, r3, #1
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	3b01      	subs	r3, #1
 800e280:	b29a      	uxth	r2, r3
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e286:	e030      	b.n	800e2ea <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	f003 0302 	and.w	r3, r3, #2
 800e292:	2b02      	cmp	r3, #2
 800e294:	d113      	bne.n	800e2be <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	330c      	adds	r3, #12
 800e2a0:	7812      	ldrb	r2, [r2, #0]
 800e2a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2a8:	1c5a      	adds	r2, r3, #1
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	86da      	strh	r2, [r3, #54]	; 0x36
 800e2bc:	e015      	b.n	800e2ea <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2be:	f7fe f939 	bl	800c534 <HAL_GetTick>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d803      	bhi.n	800e2d6 <HAL_SPI_Transmit+0x20c>
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d4:	d102      	bne.n	800e2dc <HAL_SPI_Transmit+0x212>
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d106      	bne.n	800e2ea <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800e2dc:	2303      	movs	r3, #3
 800e2de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800e2e8:	e029      	b.n	800e33e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1c9      	bne.n	800e288 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e2f4:	69ba      	ldr	r2, [r7, #24]
 800e2f6:	6839      	ldr	r1, [r7, #0]
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f000 fbdf 	bl	800eabc <SPI_EndRxTxTransaction>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d002      	beq.n	800e30a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2220      	movs	r2, #32
 800e308:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10a      	bne.n	800e328 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e312:	2300      	movs	r3, #0
 800e314:	613b      	str	r3, [r7, #16]
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	613b      	str	r3, [r7, #16]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	613b      	str	r3, [r7, #16]
 800e326:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800e330:	2301      	movs	r3, #1
 800e332:	77fb      	strb	r3, [r7, #31]
 800e334:	e003      	b.n	800e33e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2201      	movs	r2, #1
 800e33a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2200      	movs	r2, #0
 800e342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e346:	7ffb      	ldrb	r3, [r7, #31]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3720      	adds	r7, #32
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b088      	sub	sp, #32
 800e354:	af02      	add	r7, sp, #8
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	603b      	str	r3, [r7, #0]
 800e35c:	4613      	mov	r3, r2
 800e35e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e360:	2300      	movs	r3, #0
 800e362:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d002      	beq.n	800e376 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800e370:	2302      	movs	r3, #2
 800e372:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e374:	e0fb      	b.n	800e56e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e37e:	d112      	bne.n	800e3a6 <HAL_SPI_Receive+0x56>
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10e      	bne.n	800e3a6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2204      	movs	r2, #4
 800e38c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e390:	88fa      	ldrh	r2, [r7, #6]
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	4613      	mov	r3, r2
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	68b9      	ldr	r1, [r7, #8]
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 f8ef 	bl	800e580 <HAL_SPI_TransmitReceive>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	e0e8      	b.n	800e578 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d101      	bne.n	800e3b4 <HAL_SPI_Receive+0x64>
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	e0e1      	b.n	800e578 <HAL_SPI_Receive+0x228>
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e3bc:	f7fe f8ba 	bl	800c534 <HAL_GetTick>
 800e3c0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d002      	beq.n	800e3ce <HAL_SPI_Receive+0x7e>
 800e3c8:	88fb      	ldrh	r3, [r7, #6]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d102      	bne.n	800e3d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e3d2:	e0cc      	b.n	800e56e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2204      	movs	r2, #4
 800e3d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	88fa      	ldrh	r2, [r7, #6]
 800e3ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	88fa      	ldrh	r2, [r7, #6]
 800e3f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2200      	movs	r2, #0
 800e404:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2200      	movs	r2, #0
 800e40a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2200      	movs	r2, #0
 800e410:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e41a:	d10f      	bne.n	800e43c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e42a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e43a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e446:	2b40      	cmp	r3, #64	; 0x40
 800e448:	d007      	beq.n	800e45a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e458:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d16a      	bne.n	800e538 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e462:	e032      	b.n	800e4ca <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	689b      	ldr	r3, [r3, #8]
 800e46a:	f003 0301 	and.w	r3, r3, #1
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d115      	bne.n	800e49e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f103 020c 	add.w	r2, r3, #12
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e47e:	7812      	ldrb	r2, [r2, #0]
 800e480:	b2d2      	uxtb	r2, r2
 800e482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e488:	1c5a      	adds	r2, r3, #1
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e492:	b29b      	uxth	r3, r3
 800e494:	3b01      	subs	r3, #1
 800e496:	b29a      	uxth	r2, r3
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e49c:	e015      	b.n	800e4ca <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e49e:	f7fe f849 	bl	800c534 <HAL_GetTick>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	1ad3      	subs	r3, r2, r3
 800e4a8:	683a      	ldr	r2, [r7, #0]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d803      	bhi.n	800e4b6 <HAL_SPI_Receive+0x166>
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b4:	d102      	bne.n	800e4bc <HAL_SPI_Receive+0x16c>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d106      	bne.n	800e4ca <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800e4bc:	2303      	movs	r3, #3
 800e4be:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800e4c8:	e051      	b.n	800e56e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d1c7      	bne.n	800e464 <HAL_SPI_Receive+0x114>
 800e4d4:	e035      	b.n	800e542 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	689b      	ldr	r3, [r3, #8]
 800e4dc:	f003 0301 	and.w	r3, r3, #1
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d113      	bne.n	800e50c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	68da      	ldr	r2, [r3, #12]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ee:	b292      	uxth	r2, r2
 800e4f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f6:	1c9a      	adds	r2, r3, #2
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e500:	b29b      	uxth	r3, r3
 800e502:	3b01      	subs	r3, #1
 800e504:	b29a      	uxth	r2, r3
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e50a:	e015      	b.n	800e538 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e50c:	f7fe f812 	bl	800c534 <HAL_GetTick>
 800e510:	4602      	mov	r2, r0
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	683a      	ldr	r2, [r7, #0]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d803      	bhi.n	800e524 <HAL_SPI_Receive+0x1d4>
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e522:	d102      	bne.n	800e52a <HAL_SPI_Receive+0x1da>
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d106      	bne.n	800e538 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800e52a:	2303      	movs	r3, #3
 800e52c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2201      	movs	r2, #1
 800e532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800e536:	e01a      	b.n	800e56e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d1c9      	bne.n	800e4d6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e542:	693a      	ldr	r2, [r7, #16]
 800e544:	6839      	ldr	r1, [r7, #0]
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f000 fa52 	bl	800e9f0 <SPI_EndRxTransaction>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d002      	beq.n	800e558 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2220      	movs	r2, #32
 800e556:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800e560:	2301      	movs	r3, #1
 800e562:	75fb      	strb	r3, [r7, #23]
 800e564:	e003      	b.n	800e56e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2200      	movs	r2, #0
 800e572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e576:	7dfb      	ldrb	r3, [r7, #23]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3718      	adds	r7, #24
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b08c      	sub	sp, #48	; 0x30
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
 800e58c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e58e:	2301      	movs	r3, #1
 800e590:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d101      	bne.n	800e5a6 <HAL_SPI_TransmitReceive+0x26>
 800e5a2:	2302      	movs	r3, #2
 800e5a4:	e198      	b.n	800e8d8 <HAL_SPI_TransmitReceive+0x358>
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e5ae:	f7fd ffc1 	bl	800c534 <HAL_GetTick>
 800e5b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e5c4:	887b      	ldrh	r3, [r7, #2]
 800e5c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e5c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d00f      	beq.n	800e5f0 <HAL_SPI_TransmitReceive+0x70>
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e5d6:	d107      	bne.n	800e5e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d103      	bne.n	800e5e8 <HAL_SPI_TransmitReceive+0x68>
 800e5e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e5e4:	2b04      	cmp	r3, #4
 800e5e6:	d003      	beq.n	800e5f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e5ee:	e16d      	b.n	800e8cc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d005      	beq.n	800e602 <HAL_SPI_TransmitReceive+0x82>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <HAL_SPI_TransmitReceive+0x82>
 800e5fc:	887b      	ldrh	r3, [r7, #2]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d103      	bne.n	800e60a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e602:	2301      	movs	r3, #1
 800e604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e608:	e160      	b.n	800e8cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b04      	cmp	r3, #4
 800e614:	d003      	beq.n	800e61e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2205      	movs	r2, #5
 800e61a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	887a      	ldrh	r2, [r7, #2]
 800e62e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	887a      	ldrh	r2, [r7, #2]
 800e634:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	68ba      	ldr	r2, [r7, #8]
 800e63a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	887a      	ldrh	r2, [r7, #2]
 800e640:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	887a      	ldrh	r2, [r7, #2]
 800e646:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2200      	movs	r2, #0
 800e64c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2200      	movs	r2, #0
 800e652:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e65e:	2b40      	cmp	r3, #64	; 0x40
 800e660:	d007      	beq.n	800e672 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e670:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e67a:	d17c      	bne.n	800e776 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d002      	beq.n	800e68a <HAL_SPI_TransmitReceive+0x10a>
 800e684:	8b7b      	ldrh	r3, [r7, #26]
 800e686:	2b01      	cmp	r3, #1
 800e688:	d16a      	bne.n	800e760 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68e:	881a      	ldrh	r2, [r3, #0]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e69a:	1c9a      	adds	r2, r3, #2
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	3b01      	subs	r3, #1
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6ae:	e057      	b.n	800e760 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	f003 0302 	and.w	r3, r3, #2
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d11b      	bne.n	800e6f6 <HAL_SPI_TransmitReceive+0x176>
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d016      	beq.n	800e6f6 <HAL_SPI_TransmitReceive+0x176>
 800e6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	d113      	bne.n	800e6f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d2:	881a      	ldrh	r2, [r3, #0]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6de:	1c9a      	adds	r2, r3, #2
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	f003 0301 	and.w	r3, r3, #1
 800e700:	2b01      	cmp	r3, #1
 800e702:	d119      	bne.n	800e738 <HAL_SPI_TransmitReceive+0x1b8>
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e708:	b29b      	uxth	r3, r3
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d014      	beq.n	800e738 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	68da      	ldr	r2, [r3, #12]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e718:	b292      	uxth	r2, r2
 800e71a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e720:	1c9a      	adds	r2, r3, #2
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	3b01      	subs	r3, #1
 800e72e:	b29a      	uxth	r2, r3
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e734:	2301      	movs	r3, #1
 800e736:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e738:	f7fd fefc 	bl	800c534 <HAL_GetTick>
 800e73c:	4602      	mov	r2, r0
 800e73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e740:	1ad3      	subs	r3, r2, r3
 800e742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e744:	429a      	cmp	r2, r3
 800e746:	d80b      	bhi.n	800e760 <HAL_SPI_TransmitReceive+0x1e0>
 800e748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e74e:	d007      	beq.n	800e760 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800e750:	2303      	movs	r3, #3
 800e752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2201      	movs	r2, #1
 800e75a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800e75e:	e0b5      	b.n	800e8cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e764:	b29b      	uxth	r3, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1a2      	bne.n	800e6b0 <HAL_SPI_TransmitReceive+0x130>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e76e:	b29b      	uxth	r3, r3
 800e770:	2b00      	cmp	r3, #0
 800e772:	d19d      	bne.n	800e6b0 <HAL_SPI_TransmitReceive+0x130>
 800e774:	e080      	b.n	800e878 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d002      	beq.n	800e784 <HAL_SPI_TransmitReceive+0x204>
 800e77e:	8b7b      	ldrh	r3, [r7, #26]
 800e780:	2b01      	cmp	r3, #1
 800e782:	d16f      	bne.n	800e864 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	330c      	adds	r3, #12
 800e78e:	7812      	ldrb	r2, [r2, #0]
 800e790:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e796:	1c5a      	adds	r2, r3, #1
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e7aa:	e05b      	b.n	800e864 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	f003 0302 	and.w	r3, r3, #2
 800e7b6:	2b02      	cmp	r3, #2
 800e7b8:	d11c      	bne.n	800e7f4 <HAL_SPI_TransmitReceive+0x274>
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d017      	beq.n	800e7f4 <HAL_SPI_TransmitReceive+0x274>
 800e7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d114      	bne.n	800e7f4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	330c      	adds	r3, #12
 800e7d4:	7812      	ldrb	r2, [r2, #0]
 800e7d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7dc:	1c5a      	adds	r2, r3, #1
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	689b      	ldr	r3, [r3, #8]
 800e7fa:	f003 0301 	and.w	r3, r3, #1
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d119      	bne.n	800e836 <HAL_SPI_TransmitReceive+0x2b6>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e806:	b29b      	uxth	r3, r3
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d014      	beq.n	800e836 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	68da      	ldr	r2, [r3, #12]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e816:	b2d2      	uxtb	r2, r2
 800e818:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81e:	1c5a      	adds	r2, r3, #1
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e828:	b29b      	uxth	r3, r3
 800e82a:	3b01      	subs	r3, #1
 800e82c:	b29a      	uxth	r2, r3
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e832:	2301      	movs	r3, #1
 800e834:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e836:	f7fd fe7d 	bl	800c534 <HAL_GetTick>
 800e83a:	4602      	mov	r2, r0
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e842:	429a      	cmp	r2, r3
 800e844:	d803      	bhi.n	800e84e <HAL_SPI_TransmitReceive+0x2ce>
 800e846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e84c:	d102      	bne.n	800e854 <HAL_SPI_TransmitReceive+0x2d4>
 800e84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e850:	2b00      	cmp	r3, #0
 800e852:	d107      	bne.n	800e864 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800e854:	2303      	movs	r3, #3
 800e856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2201      	movs	r2, #1
 800e85e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800e862:	e033      	b.n	800e8cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e868:	b29b      	uxth	r3, r3
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d19e      	bne.n	800e7ac <HAL_SPI_TransmitReceive+0x22c>
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e872:	b29b      	uxth	r3, r3
 800e874:	2b00      	cmp	r3, #0
 800e876:	d199      	bne.n	800e7ac <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e87a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	f000 f91d 	bl	800eabc <SPI_EndRxTxTransaction>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d006      	beq.n	800e896 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800e888:	2301      	movs	r3, #1
 800e88a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2220      	movs	r2, #32
 800e892:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e894:	e01a      	b.n	800e8cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	689b      	ldr	r3, [r3, #8]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10a      	bne.n	800e8b4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e89e:	2300      	movs	r3, #0
 800e8a0:	617b      	str	r3, [r7, #20]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	617b      	str	r3, [r7, #20]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	689b      	ldr	r3, [r3, #8]
 800e8b0:	617b      	str	r3, [r7, #20]
 800e8b2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d003      	beq.n	800e8c4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8c2:	e003      	b.n	800e8cc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e8d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3730      	adds	r7, #48	; 0x30
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b088      	sub	sp, #32
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	603b      	str	r3, [r7, #0]
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e8f0:	f7fd fe20 	bl	800c534 <HAL_GetTick>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f8:	1a9b      	subs	r3, r3, r2
 800e8fa:	683a      	ldr	r2, [r7, #0]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e900:	f7fd fe18 	bl	800c534 <HAL_GetTick>
 800e904:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e906:	4b39      	ldr	r3, [pc, #228]	; (800e9ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	015b      	lsls	r3, r3, #5
 800e90c:	0d1b      	lsrs	r3, r3, #20
 800e90e:	69fa      	ldr	r2, [r7, #28]
 800e910:	fb02 f303 	mul.w	r3, r2, r3
 800e914:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e916:	e054      	b.n	800e9c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e91e:	d050      	beq.n	800e9c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e920:	f7fd fe08 	bl	800c534 <HAL_GetTick>
 800e924:	4602      	mov	r2, r0
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	1ad3      	subs	r3, r2, r3
 800e92a:	69fa      	ldr	r2, [r7, #28]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d902      	bls.n	800e936 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d13d      	bne.n	800e9b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	685a      	ldr	r2, [r3, #4]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e944:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e94e:	d111      	bne.n	800e974 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e958:	d004      	beq.n	800e964 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e962:	d107      	bne.n	800e974 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e97c:	d10f      	bne.n	800e99e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e99c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e9ae:	2303      	movs	r3, #3
 800e9b0:	e017      	b.n	800e9e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d101      	bne.n	800e9bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	689a      	ldr	r2, [r3, #8]
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	4013      	ands	r3, r2
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	bf0c      	ite	eq
 800e9d2:	2301      	moveq	r3, #1
 800e9d4:	2300      	movne	r3, #0
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	461a      	mov	r2, r3
 800e9da:	79fb      	ldrb	r3, [r7, #7]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d19b      	bne.n	800e918 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3720      	adds	r7, #32
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20000058 	.word	0x20000058

0800e9f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b086      	sub	sp, #24
 800e9f4:	af02      	add	r7, sp, #8
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea04:	d111      	bne.n	800ea2a <SPI_EndRxTransaction+0x3a>
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	689b      	ldr	r3, [r3, #8]
 800ea0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea0e:	d004      	beq.n	800ea1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea18:	d107      	bne.n	800ea2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea32:	d12a      	bne.n	800ea8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea3c:	d012      	beq.n	800ea64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	2200      	movs	r2, #0
 800ea46:	2180      	movs	r1, #128	; 0x80
 800ea48:	68f8      	ldr	r0, [r7, #12]
 800ea4a:	f7ff ff49 	bl	800e8e0 <SPI_WaitFlagStateUntilTimeout>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d02d      	beq.n	800eab0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea58:	f043 0220 	orr.w	r2, r3, #32
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ea60:	2303      	movs	r3, #3
 800ea62:	e026      	b.n	800eab2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	9300      	str	r3, [sp, #0]
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	2101      	movs	r1, #1
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f7ff ff36 	bl	800e8e0 <SPI_WaitFlagStateUntilTimeout>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d01a      	beq.n	800eab0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea7e:	f043 0220 	orr.w	r2, r3, #32
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ea86:	2303      	movs	r3, #3
 800ea88:	e013      	b.n	800eab2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2200      	movs	r2, #0
 800ea92:	2101      	movs	r1, #1
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f7ff ff23 	bl	800e8e0 <SPI_WaitFlagStateUntilTimeout>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d007      	beq.n	800eab0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaa4:	f043 0220 	orr.w	r2, r3, #32
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eaac:	2303      	movs	r3, #3
 800eaae:	e000      	b.n	800eab2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
	...

0800eabc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b088      	sub	sp, #32
 800eac0:	af02      	add	r7, sp, #8
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	2201      	movs	r2, #1
 800ead0:	2102      	movs	r1, #2
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f7ff ff04 	bl	800e8e0 <SPI_WaitFlagStateUntilTimeout>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d007      	beq.n	800eaee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eae2:	f043 0220 	orr.w	r2, r3, #32
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800eaea:	2303      	movs	r3, #3
 800eaec:	e032      	b.n	800eb54 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eaee:	4b1b      	ldr	r3, [pc, #108]	; (800eb5c <SPI_EndRxTxTransaction+0xa0>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4a1b      	ldr	r2, [pc, #108]	; (800eb60 <SPI_EndRxTxTransaction+0xa4>)
 800eaf4:	fba2 2303 	umull	r2, r3, r2, r3
 800eaf8:	0d5b      	lsrs	r3, r3, #21
 800eafa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eafe:	fb02 f303 	mul.w	r3, r2, r3
 800eb02:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb0c:	d112      	bne.n	800eb34 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	2200      	movs	r2, #0
 800eb16:	2180      	movs	r1, #128	; 0x80
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f7ff fee1 	bl	800e8e0 <SPI_WaitFlagStateUntilTimeout>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d016      	beq.n	800eb52 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb28:	f043 0220 	orr.w	r2, r3, #32
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb30:	2303      	movs	r3, #3
 800eb32:	e00f      	b.n	800eb54 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d00a      	beq.n	800eb50 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb4a:	2b80      	cmp	r3, #128	; 0x80
 800eb4c:	d0f2      	beq.n	800eb34 <SPI_EndRxTxTransaction+0x78>
 800eb4e:	e000      	b.n	800eb52 <SPI_EndRxTxTransaction+0x96>
        break;
 800eb50:	bf00      	nop
  }

  return HAL_OK;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3718      	adds	r7, #24
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	20000058 	.word	0x20000058
 800eb60:	165e9f81 	.word	0x165e9f81

0800eb64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d101      	bne.n	800eb76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eb72:	2301      	movs	r3, #1
 800eb74:	e042      	b.n	800ebfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f7fd fabc 	bl	800c108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2224      	movs	r2, #36	; 0x24
 800eb94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	68da      	ldr	r2, [r3, #12]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 fdbd 	bl	800f728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	691a      	ldr	r2, [r3, #16]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ebbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	695a      	ldr	r2, [r3, #20]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ebcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68da      	ldr	r2, [r3, #12]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ebdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2220      	movs	r2, #32
 800ebe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2220      	movs	r2, #32
 800ebf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b08a      	sub	sp, #40	; 0x28
 800ec08:	af02      	add	r7, sp, #8
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	603b      	str	r3, [r7, #0]
 800ec10:	4613      	mov	r3, r2
 800ec12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ec14:	2300      	movs	r3, #0
 800ec16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	2b20      	cmp	r3, #32
 800ec22:	d175      	bne.n	800ed10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d002      	beq.n	800ec30 <HAL_UART_Transmit+0x2c>
 800ec2a:	88fb      	ldrh	r3, [r7, #6]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d101      	bne.n	800ec34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ec30:	2301      	movs	r3, #1
 800ec32:	e06e      	b.n	800ed12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2200      	movs	r2, #0
 800ec38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2221      	movs	r2, #33	; 0x21
 800ec3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ec42:	f7fd fc77 	bl	800c534 <HAL_GetTick>
 800ec46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	88fa      	ldrh	r2, [r7, #6]
 800ec4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	88fa      	ldrh	r2, [r7, #6]
 800ec52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec5c:	d108      	bne.n	800ec70 <HAL_UART_Transmit+0x6c>
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	691b      	ldr	r3, [r3, #16]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d104      	bne.n	800ec70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ec66:	2300      	movs	r3, #0
 800ec68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	61bb      	str	r3, [r7, #24]
 800ec6e:	e003      	b.n	800ec78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ec74:	2300      	movs	r3, #0
 800ec76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ec78:	e02e      	b.n	800ecd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	9300      	str	r3, [sp, #0]
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	2200      	movs	r2, #0
 800ec82:	2180      	movs	r1, #128	; 0x80
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f000 fb1f 	bl	800f2c8 <UART_WaitOnFlagUntilTimeout>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d005      	beq.n	800ec9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2220      	movs	r2, #32
 800ec94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800ec98:	2303      	movs	r3, #3
 800ec9a:	e03a      	b.n	800ed12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d10b      	bne.n	800ecba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	881b      	ldrh	r3, [r3, #0]
 800eca6:	461a      	mov	r2, r3
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ecb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	3302      	adds	r3, #2
 800ecb6:	61bb      	str	r3, [r7, #24]
 800ecb8:	e007      	b.n	800ecca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	781a      	ldrb	r2, [r3, #0]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d1cb      	bne.n	800ec7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	2200      	movs	r2, #0
 800ecea:	2140      	movs	r1, #64	; 0x40
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f000 faeb 	bl	800f2c8 <UART_WaitOnFlagUntilTimeout>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d005      	beq.n	800ed04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2220      	movs	r2, #32
 800ecfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800ed00:	2303      	movs	r3, #3
 800ed02:	e006      	b.n	800ed12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2220      	movs	r2, #32
 800ed08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	e000      	b.n	800ed12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ed10:	2302      	movs	r3, #2
  }
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3720      	adds	r7, #32
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}

0800ed1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed1a:	b580      	push	{r7, lr}
 800ed1c:	b084      	sub	sp, #16
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	60f8      	str	r0, [r7, #12]
 800ed22:	60b9      	str	r1, [r7, #8]
 800ed24:	4613      	mov	r3, r2
 800ed26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	2b20      	cmp	r3, #32
 800ed32:	d112      	bne.n	800ed5a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d002      	beq.n	800ed40 <HAL_UART_Receive_IT+0x26>
 800ed3a:	88fb      	ldrh	r3, [r7, #6]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d101      	bne.n	800ed44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ed40:	2301      	movs	r3, #1
 800ed42:	e00b      	b.n	800ed5c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2200      	movs	r2, #0
 800ed48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ed4a:	88fb      	ldrh	r3, [r7, #6]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	68b9      	ldr	r1, [r7, #8]
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f000 fb12 	bl	800f37a <UART_Start_Receive_IT>
 800ed56:	4603      	mov	r3, r0
 800ed58:	e000      	b.n	800ed5c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ed5a:	2302      	movs	r3, #2
  }
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3710      	adds	r7, #16
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b0ba      	sub	sp, #232	; 0xe8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	695b      	ldr	r3, [r3, #20]
 800ed86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ed90:	2300      	movs	r3, #0
 800ed92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ed96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed9a:	f003 030f 	and.w	r3, r3, #15
 800ed9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800eda2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d10f      	bne.n	800edca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800edaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edae:	f003 0320 	and.w	r3, r3, #32
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d009      	beq.n	800edca <HAL_UART_IRQHandler+0x66>
 800edb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edba:	f003 0320 	and.w	r3, r3, #32
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d003      	beq.n	800edca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 fbf2 	bl	800f5ac <UART_Receive_IT>
      return;
 800edc8:	e25b      	b.n	800f282 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800edca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 80de 	beq.w	800ef90 <HAL_UART_IRQHandler+0x22c>
 800edd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edd8:	f003 0301 	and.w	r3, r3, #1
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d106      	bne.n	800edee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ede0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ede4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 80d1 	beq.w	800ef90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800edee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edf2:	f003 0301 	and.w	r3, r3, #1
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00b      	beq.n	800ee12 <HAL_UART_IRQHandler+0xae>
 800edfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d005      	beq.n	800ee12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee0a:	f043 0201 	orr.w	r2, r3, #1
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ee12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee16:	f003 0304 	and.w	r3, r3, #4
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00b      	beq.n	800ee36 <HAL_UART_IRQHandler+0xd2>
 800ee1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d005      	beq.n	800ee36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee2e:	f043 0202 	orr.w	r2, r3, #2
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ee36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee3a:	f003 0302 	and.w	r3, r3, #2
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d00b      	beq.n	800ee5a <HAL_UART_IRQHandler+0xf6>
 800ee42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee46:	f003 0301 	and.w	r3, r3, #1
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d005      	beq.n	800ee5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee52:	f043 0204 	orr.w	r2, r3, #4
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ee5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee5e:	f003 0308 	and.w	r3, r3, #8
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d011      	beq.n	800ee8a <HAL_UART_IRQHandler+0x126>
 800ee66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee6a:	f003 0320 	and.w	r3, r3, #32
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d105      	bne.n	800ee7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ee72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee76:	f003 0301 	and.w	r3, r3, #1
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d005      	beq.n	800ee8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee82:	f043 0208 	orr.w	r2, r3, #8
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	f000 81f2 	beq.w	800f278 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ee94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee98:	f003 0320 	and.w	r3, r3, #32
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d008      	beq.n	800eeb2 <HAL_UART_IRQHandler+0x14e>
 800eea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eea4:	f003 0320 	and.w	r3, r3, #32
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d002      	beq.n	800eeb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 fb7d 	bl	800f5ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	695b      	ldr	r3, [r3, #20]
 800eeb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eebc:	2b40      	cmp	r3, #64	; 0x40
 800eebe:	bf0c      	ite	eq
 800eec0:	2301      	moveq	r3, #1
 800eec2:	2300      	movne	r3, #0
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eece:	f003 0308 	and.w	r3, r3, #8
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d103      	bne.n	800eede <HAL_UART_IRQHandler+0x17a>
 800eed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d04f      	beq.n	800ef7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 fa85 	bl	800f3ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	695b      	ldr	r3, [r3, #20]
 800eeea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeee:	2b40      	cmp	r3, #64	; 0x40
 800eef0:	d141      	bne.n	800ef76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	3314      	adds	r3, #20
 800eef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ef00:	e853 3f00 	ldrex	r3, [r3]
 800ef04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ef08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	3314      	adds	r3, #20
 800ef1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ef1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ef22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ef2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ef2e:	e841 2300 	strex	r3, r2, [r1]
 800ef32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ef36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d1d9      	bne.n	800eef2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d013      	beq.n	800ef6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef4a:	4a7e      	ldr	r2, [pc, #504]	; (800f144 <HAL_UART_IRQHandler+0x3e0>)
 800ef4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fe f9cf 	bl	800d2f6 <HAL_DMA_Abort_IT>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d016      	beq.n	800ef8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ef68:	4610      	mov	r0, r2
 800ef6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef6c:	e00e      	b.n	800ef8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f994 	bl	800f29c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef74:	e00a      	b.n	800ef8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 f990 	bl	800f29c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef7c:	e006      	b.n	800ef8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 f98c 	bl	800f29c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800ef8a:	e175      	b.n	800f278 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef8c:	bf00      	nop
    return;
 800ef8e:	e173      	b.n	800f278 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	f040 814f 	bne.w	800f238 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ef9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef9e:	f003 0310 	and.w	r3, r3, #16
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f000 8148 	beq.w	800f238 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800efa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efac:	f003 0310 	and.w	r3, r3, #16
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f000 8141 	beq.w	800f238 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800efb6:	2300      	movs	r3, #0
 800efb8:	60bb      	str	r3, [r7, #8]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	60bb      	str	r3, [r7, #8]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	60bb      	str	r3, [r7, #8]
 800efca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	695b      	ldr	r3, [r3, #20]
 800efd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efd6:	2b40      	cmp	r3, #64	; 0x40
 800efd8:	f040 80b6 	bne.w	800f148 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800efe8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800efec:	2b00      	cmp	r3, #0
 800efee:	f000 8145 	beq.w	800f27c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800eff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800effa:	429a      	cmp	r2, r3
 800effc:	f080 813e 	bcs.w	800f27c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f006:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f00c:	69db      	ldr	r3, [r3, #28]
 800f00e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f012:	f000 8088 	beq.w	800f126 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	330c      	adds	r3, #12
 800f01c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f024:	e853 3f00 	ldrex	r3, [r3]
 800f028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f02c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f034:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	330c      	adds	r3, #12
 800f03e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f04e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f052:	e841 2300 	strex	r3, r2, [r1]
 800f056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f05a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d1d9      	bne.n	800f016 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	3314      	adds	r3, #20
 800f068:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f06a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f06c:	e853 3f00 	ldrex	r3, [r3]
 800f070:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f074:	f023 0301 	bic.w	r3, r3, #1
 800f078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	3314      	adds	r3, #20
 800f082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f086:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f08a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f08e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f092:	e841 2300 	strex	r3, r2, [r1]
 800f096:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1e1      	bne.n	800f062 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	3314      	adds	r3, #20
 800f0a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0a8:	e853 3f00 	ldrex	r3, [r3]
 800f0ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f0ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	3314      	adds	r3, #20
 800f0be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f0c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f0c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f0c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f0ca:	e841 2300 	strex	r3, r2, [r1]
 800f0ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f0d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d1e3      	bne.n	800f09e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2220      	movs	r2, #32
 800f0da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	330c      	adds	r3, #12
 800f0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0ee:	e853 3f00 	ldrex	r3, [r3]
 800f0f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f0f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0f6:	f023 0310 	bic.w	r3, r3, #16
 800f0fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	330c      	adds	r3, #12
 800f104:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f108:	65ba      	str	r2, [r7, #88]	; 0x58
 800f10a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f10c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f10e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f110:	e841 2300 	strex	r3, r2, [r1]
 800f114:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1e3      	bne.n	800f0e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f120:	4618      	mov	r0, r3
 800f122:	f7fe f878 	bl	800d216 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2202      	movs	r2, #2
 800f12a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f134:	b29b      	uxth	r3, r3
 800f136:	1ad3      	subs	r3, r2, r3
 800f138:	b29b      	uxth	r3, r3
 800f13a:	4619      	mov	r1, r3
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 f8b7 	bl	800f2b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f142:	e09b      	b.n	800f27c <HAL_UART_IRQHandler+0x518>
 800f144:	0800f4b5 	.word	0x0800f4b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f150:	b29b      	uxth	r3, r3
 800f152:	1ad3      	subs	r3, r2, r3
 800f154:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f000 808e 	beq.w	800f280 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800f164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f000 8089 	beq.w	800f280 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	330c      	adds	r3, #12
 800f174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f178:	e853 3f00 	ldrex	r3, [r3]
 800f17c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	330c      	adds	r3, #12
 800f18e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f192:	647a      	str	r2, [r7, #68]	; 0x44
 800f194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f19a:	e841 2300 	strex	r3, r2, [r1]
 800f19e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1e3      	bne.n	800f16e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	3314      	adds	r3, #20
 800f1ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b0:	e853 3f00 	ldrex	r3, [r3]
 800f1b4:	623b      	str	r3, [r7, #32]
   return(result);
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	f023 0301 	bic.w	r3, r3, #1
 800f1bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	3314      	adds	r3, #20
 800f1c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f1ca:	633a      	str	r2, [r7, #48]	; 0x30
 800f1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1d2:	e841 2300 	strex	r3, r2, [r1]
 800f1d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1e3      	bne.n	800f1a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2220      	movs	r2, #32
 800f1e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	330c      	adds	r3, #12
 800f1f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	e853 3f00 	ldrex	r3, [r3]
 800f1fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f023 0310 	bic.w	r3, r3, #16
 800f202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	330c      	adds	r3, #12
 800f20c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f210:	61fa      	str	r2, [r7, #28]
 800f212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f214:	69b9      	ldr	r1, [r7, #24]
 800f216:	69fa      	ldr	r2, [r7, #28]
 800f218:	e841 2300 	strex	r3, r2, [r1]
 800f21c:	617b      	str	r3, [r7, #20]
   return(result);
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d1e3      	bne.n	800f1ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2202      	movs	r2, #2
 800f228:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f22a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f22e:	4619      	mov	r1, r3
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 f83d 	bl	800f2b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f236:	e023      	b.n	800f280 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f23c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f240:	2b00      	cmp	r3, #0
 800f242:	d009      	beq.n	800f258 <HAL_UART_IRQHandler+0x4f4>
 800f244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d003      	beq.n	800f258 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 f943 	bl	800f4dc <UART_Transmit_IT>
    return;
 800f256:	e014      	b.n	800f282 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00e      	beq.n	800f282 <HAL_UART_IRQHandler+0x51e>
 800f264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d008      	beq.n	800f282 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 f983 	bl	800f57c <UART_EndTransmit_IT>
    return;
 800f276:	e004      	b.n	800f282 <HAL_UART_IRQHandler+0x51e>
    return;
 800f278:	bf00      	nop
 800f27a:	e002      	b.n	800f282 <HAL_UART_IRQHandler+0x51e>
      return;
 800f27c:	bf00      	nop
 800f27e:	e000      	b.n	800f282 <HAL_UART_IRQHandler+0x51e>
      return;
 800f280:	bf00      	nop
  }
}
 800f282:	37e8      	adds	r7, #232	; 0xe8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f290:	bf00      	nop
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f2a4:	bf00      	nop
 800f2a6:	370c      	adds	r7, #12
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f2bc:	bf00      	nop
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b086      	sub	sp, #24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	603b      	str	r3, [r7, #0]
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2d8:	e03b      	b.n	800f352 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2da:	6a3b      	ldr	r3, [r7, #32]
 800f2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e0:	d037      	beq.n	800f352 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2e2:	f7fd f927 	bl	800c534 <HAL_GetTick>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	6a3a      	ldr	r2, [r7, #32]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d302      	bcc.n	800f2f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f2f2:	6a3b      	ldr	r3, [r7, #32]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d101      	bne.n	800f2fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f2f8:	2303      	movs	r3, #3
 800f2fa:	e03a      	b.n	800f372 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	f003 0304 	and.w	r3, r3, #4
 800f306:	2b00      	cmp	r3, #0
 800f308:	d023      	beq.n	800f352 <UART_WaitOnFlagUntilTimeout+0x8a>
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	2b80      	cmp	r3, #128	; 0x80
 800f30e:	d020      	beq.n	800f352 <UART_WaitOnFlagUntilTimeout+0x8a>
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	2b40      	cmp	r3, #64	; 0x40
 800f314:	d01d      	beq.n	800f352 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f003 0308 	and.w	r3, r3, #8
 800f320:	2b08      	cmp	r3, #8
 800f322:	d116      	bne.n	800f352 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800f324:	2300      	movs	r3, #0
 800f326:	617b      	str	r3, [r7, #20]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	617b      	str	r3, [r7, #20]
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	617b      	str	r3, [r7, #20]
 800f338:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f000 f857 	bl	800f3ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2208      	movs	r2, #8
 800f344:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800f34e:	2301      	movs	r3, #1
 800f350:	e00f      	b.n	800f372 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	4013      	ands	r3, r2
 800f35c:	68ba      	ldr	r2, [r7, #8]
 800f35e:	429a      	cmp	r2, r3
 800f360:	bf0c      	ite	eq
 800f362:	2301      	moveq	r3, #1
 800f364:	2300      	movne	r3, #0
 800f366:	b2db      	uxtb	r3, r3
 800f368:	461a      	mov	r2, r3
 800f36a:	79fb      	ldrb	r3, [r7, #7]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d0b4      	beq.n	800f2da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f370:	2300      	movs	r3, #0
}
 800f372:	4618      	mov	r0, r3
 800f374:	3718      	adds	r7, #24
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f37a:	b480      	push	{r7}
 800f37c:	b085      	sub	sp, #20
 800f37e:	af00      	add	r7, sp, #0
 800f380:	60f8      	str	r0, [r7, #12]
 800f382:	60b9      	str	r1, [r7, #8]
 800f384:	4613      	mov	r3, r2
 800f386:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	68ba      	ldr	r2, [r7, #8]
 800f38c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	88fa      	ldrh	r2, [r7, #6]
 800f392:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	88fa      	ldrh	r2, [r7, #6]
 800f398:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2200      	movs	r2, #0
 800f39e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2222      	movs	r2, #34	; 0x22
 800f3a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d007      	beq.n	800f3c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68da      	ldr	r2, [r3, #12]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f3be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	695a      	ldr	r2, [r3, #20]
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f042 0201 	orr.w	r2, r2, #1
 800f3ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68da      	ldr	r2, [r3, #12]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f042 0220 	orr.w	r2, r2, #32
 800f3de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f3e0:	2300      	movs	r3, #0
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3714      	adds	r7, #20
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f3ee:	b480      	push	{r7}
 800f3f0:	b095      	sub	sp, #84	; 0x54
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	330c      	adds	r3, #12
 800f3fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f400:	e853 3f00 	ldrex	r3, [r3]
 800f404:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f40c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	330c      	adds	r3, #12
 800f414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f416:	643a      	str	r2, [r7, #64]	; 0x40
 800f418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f41c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f41e:	e841 2300 	strex	r3, r2, [r1]
 800f422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1e5      	bne.n	800f3f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3314      	adds	r3, #20
 800f430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f432:	6a3b      	ldr	r3, [r7, #32]
 800f434:	e853 3f00 	ldrex	r3, [r3]
 800f438:	61fb      	str	r3, [r7, #28]
   return(result);
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	f023 0301 	bic.w	r3, r3, #1
 800f440:	64bb      	str	r3, [r7, #72]	; 0x48
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	3314      	adds	r3, #20
 800f448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f44a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f44c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f452:	e841 2300 	strex	r3, r2, [r1]
 800f456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1e5      	bne.n	800f42a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f462:	2b01      	cmp	r3, #1
 800f464:	d119      	bne.n	800f49a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	330c      	adds	r3, #12
 800f46c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	e853 3f00 	ldrex	r3, [r3]
 800f474:	60bb      	str	r3, [r7, #8]
   return(result);
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	f023 0310 	bic.w	r3, r3, #16
 800f47c:	647b      	str	r3, [r7, #68]	; 0x44
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	330c      	adds	r3, #12
 800f484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f486:	61ba      	str	r2, [r7, #24]
 800f488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f48a:	6979      	ldr	r1, [r7, #20]
 800f48c:	69ba      	ldr	r2, [r7, #24]
 800f48e:	e841 2300 	strex	r3, r2, [r1]
 800f492:	613b      	str	r3, [r7, #16]
   return(result);
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d1e5      	bne.n	800f466 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2220      	movs	r2, #32
 800f49e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f4a8:	bf00      	nop
 800f4aa:	3754      	adds	r7, #84	; 0x54
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f7ff fee4 	bl	800f29c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4d4:	bf00      	nop
 800f4d6:	3710      	adds	r7, #16
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	2b21      	cmp	r3, #33	; 0x21
 800f4ee:	d13e      	bne.n	800f56e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	689b      	ldr	r3, [r3, #8]
 800f4f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4f8:	d114      	bne.n	800f524 <UART_Transmit_IT+0x48>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	691b      	ldr	r3, [r3, #16]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d110      	bne.n	800f524 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6a1b      	ldr	r3, [r3, #32]
 800f506:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	881b      	ldrh	r3, [r3, #0]
 800f50c:	461a      	mov	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f516:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6a1b      	ldr	r3, [r3, #32]
 800f51c:	1c9a      	adds	r2, r3, #2
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	621a      	str	r2, [r3, #32]
 800f522:	e008      	b.n	800f536 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6a1b      	ldr	r3, [r3, #32]
 800f528:	1c59      	adds	r1, r3, #1
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	6211      	str	r1, [r2, #32]
 800f52e:	781a      	ldrb	r2, [r3, #0]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	3b01      	subs	r3, #1
 800f53e:	b29b      	uxth	r3, r3
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	4619      	mov	r1, r3
 800f544:	84d1      	strh	r1, [r2, #38]	; 0x26
 800f546:	2b00      	cmp	r3, #0
 800f548:	d10f      	bne.n	800f56a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	68da      	ldr	r2, [r3, #12]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f558:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	68da      	ldr	r2, [r3, #12]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f568:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f56a:	2300      	movs	r3, #0
 800f56c:	e000      	b.n	800f570 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800f56e:	2302      	movs	r3, #2
  }
}
 800f570:	4618      	mov	r0, r3
 800f572:	3714      	adds	r7, #20
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	68da      	ldr	r2, [r3, #12]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f592:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2220      	movs	r2, #32
 800f598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7ff fe73 	bl	800f288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f5a2:	2300      	movs	r3, #0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b08c      	sub	sp, #48	; 0x30
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	2b22      	cmp	r3, #34	; 0x22
 800f5be:	f040 80ae 	bne.w	800f71e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	689b      	ldr	r3, [r3, #8]
 800f5c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5ca:	d117      	bne.n	800f5fc <UART_Receive_IT+0x50>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	691b      	ldr	r3, [r3, #16]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d113      	bne.n	800f5fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5f4:	1c9a      	adds	r2, r3, #2
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	629a      	str	r2, [r3, #40]	; 0x28
 800f5fa:	e026      	b.n	800f64a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f600:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800f602:	2300      	movs	r3, #0
 800f604:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f60e:	d007      	beq.n	800f620 <UART_Receive_IT+0x74>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d10a      	bne.n	800f62e <UART_Receive_IT+0x82>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	691b      	ldr	r3, [r3, #16]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d106      	bne.n	800f62e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	685b      	ldr	r3, [r3, #4]
 800f626:	b2da      	uxtb	r2, r3
 800f628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62a:	701a      	strb	r2, [r3, #0]
 800f62c:	e008      	b.n	800f640 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	b2db      	uxtb	r3, r3
 800f636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f63a:	b2da      	uxtb	r2, r3
 800f63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f63e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f644:	1c5a      	adds	r2, r3, #1
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f64e:	b29b      	uxth	r3, r3
 800f650:	3b01      	subs	r3, #1
 800f652:	b29b      	uxth	r3, r3
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	4619      	mov	r1, r3
 800f658:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d15d      	bne.n	800f71a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	68da      	ldr	r2, [r3, #12]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f022 0220 	bic.w	r2, r2, #32
 800f66c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	68da      	ldr	r2, [r3, #12]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f67c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	695a      	ldr	r2, [r3, #20]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f022 0201 	bic.w	r2, r2, #1
 800f68c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2220      	movs	r2, #32
 800f692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d135      	bne.n	800f710 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	330c      	adds	r3, #12
 800f6b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	e853 3f00 	ldrex	r3, [r3]
 800f6b8:	613b      	str	r3, [r7, #16]
   return(result);
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	f023 0310 	bic.w	r3, r3, #16
 800f6c0:	627b      	str	r3, [r7, #36]	; 0x24
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	330c      	adds	r3, #12
 800f6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6ca:	623a      	str	r2, [r7, #32]
 800f6cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ce:	69f9      	ldr	r1, [r7, #28]
 800f6d0:	6a3a      	ldr	r2, [r7, #32]
 800f6d2:	e841 2300 	strex	r3, r2, [r1]
 800f6d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1e5      	bne.n	800f6aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f003 0310 	and.w	r3, r3, #16
 800f6e8:	2b10      	cmp	r3, #16
 800f6ea:	d10a      	bne.n	800f702 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	60fb      	str	r3, [r7, #12]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	60fb      	str	r3, [r7, #12]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	60fb      	str	r3, [r7, #12]
 800f700:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f706:	4619      	mov	r1, r3
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f7ff fdd1 	bl	800f2b0 <HAL_UARTEx_RxEventCallback>
 800f70e:	e002      	b.n	800f716 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7fc f8d1 	bl	800b8b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800f716:	2300      	movs	r3, #0
 800f718:	e002      	b.n	800f720 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800f71a:	2300      	movs	r3, #0
 800f71c:	e000      	b.n	800f720 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800f71e:	2302      	movs	r3, #2
  }
}
 800f720:	4618      	mov	r0, r3
 800f722:	3730      	adds	r7, #48	; 0x30
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f72c:	b0c0      	sub	sp, #256	; 0x100
 800f72e:	af00      	add	r7, sp, #0
 800f730:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	691b      	ldr	r3, [r3, #16]
 800f73c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f744:	68d9      	ldr	r1, [r3, #12]
 800f746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	ea40 0301 	orr.w	r3, r0, r1
 800f750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f756:	689a      	ldr	r2, [r3, #8]
 800f758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f75c:	691b      	ldr	r3, [r3, #16]
 800f75e:	431a      	orrs	r2, r3
 800f760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f764:	695b      	ldr	r3, [r3, #20]
 800f766:	431a      	orrs	r2, r3
 800f768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f76c:	69db      	ldr	r3, [r3, #28]
 800f76e:	4313      	orrs	r3, r2
 800f770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800f774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f780:	f021 010c 	bic.w	r1, r1, #12
 800f784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f78e:	430b      	orrs	r3, r1
 800f790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	695b      	ldr	r3, [r3, #20]
 800f79a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f79e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f7a2:	6999      	ldr	r1, [r3, #24]
 800f7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	ea40 0301 	orr.w	r3, r0, r1
 800f7ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	4b8f      	ldr	r3, [pc, #572]	; (800f9f4 <UART_SetConfig+0x2cc>)
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d005      	beq.n	800f7c8 <UART_SetConfig+0xa0>
 800f7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	4b8d      	ldr	r3, [pc, #564]	; (800f9f8 <UART_SetConfig+0x2d0>)
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d104      	bne.n	800f7d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f7c8:	f7fe fbe2 	bl	800df90 <HAL_RCC_GetPCLK2Freq>
 800f7cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800f7d0:	e003      	b.n	800f7da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f7d2:	f7fe fbc9 	bl	800df68 <HAL_RCC_GetPCLK1Freq>
 800f7d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f7de:	69db      	ldr	r3, [r3, #28]
 800f7e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7e4:	f040 810c 	bne.w	800fa00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f7e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f7f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800f7f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800f7fa:	4622      	mov	r2, r4
 800f7fc:	462b      	mov	r3, r5
 800f7fe:	1891      	adds	r1, r2, r2
 800f800:	65b9      	str	r1, [r7, #88]	; 0x58
 800f802:	415b      	adcs	r3, r3
 800f804:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f80a:	4621      	mov	r1, r4
 800f80c:	eb12 0801 	adds.w	r8, r2, r1
 800f810:	4629      	mov	r1, r5
 800f812:	eb43 0901 	adc.w	r9, r3, r1
 800f816:	f04f 0200 	mov.w	r2, #0
 800f81a:	f04f 0300 	mov.w	r3, #0
 800f81e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f82a:	4690      	mov	r8, r2
 800f82c:	4699      	mov	r9, r3
 800f82e:	4623      	mov	r3, r4
 800f830:	eb18 0303 	adds.w	r3, r8, r3
 800f834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f838:	462b      	mov	r3, r5
 800f83a:	eb49 0303 	adc.w	r3, r9, r3
 800f83e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	2200      	movs	r2, #0
 800f84a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f84e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800f852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f856:	460b      	mov	r3, r1
 800f858:	18db      	adds	r3, r3, r3
 800f85a:	653b      	str	r3, [r7, #80]	; 0x50
 800f85c:	4613      	mov	r3, r2
 800f85e:	eb42 0303 	adc.w	r3, r2, r3
 800f862:	657b      	str	r3, [r7, #84]	; 0x54
 800f864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800f86c:	f7f1 f9cc 	bl	8000c08 <__aeabi_uldivmod>
 800f870:	4602      	mov	r2, r0
 800f872:	460b      	mov	r3, r1
 800f874:	4b61      	ldr	r3, [pc, #388]	; (800f9fc <UART_SetConfig+0x2d4>)
 800f876:	fba3 2302 	umull	r2, r3, r3, r2
 800f87a:	095b      	lsrs	r3, r3, #5
 800f87c:	011c      	lsls	r4, r3, #4
 800f87e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f882:	2200      	movs	r2, #0
 800f884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f888:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800f88c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800f890:	4642      	mov	r2, r8
 800f892:	464b      	mov	r3, r9
 800f894:	1891      	adds	r1, r2, r2
 800f896:	64b9      	str	r1, [r7, #72]	; 0x48
 800f898:	415b      	adcs	r3, r3
 800f89a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f89c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f8a0:	4641      	mov	r1, r8
 800f8a2:	eb12 0a01 	adds.w	sl, r2, r1
 800f8a6:	4649      	mov	r1, r9
 800f8a8:	eb43 0b01 	adc.w	fp, r3, r1
 800f8ac:	f04f 0200 	mov.w	r2, #0
 800f8b0:	f04f 0300 	mov.w	r3, #0
 800f8b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f8b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f8bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f8c0:	4692      	mov	sl, r2
 800f8c2:	469b      	mov	fp, r3
 800f8c4:	4643      	mov	r3, r8
 800f8c6:	eb1a 0303 	adds.w	r3, sl, r3
 800f8ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f8ce:	464b      	mov	r3, r9
 800f8d0:	eb4b 0303 	adc.w	r3, fp, r3
 800f8d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f8e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f8e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	18db      	adds	r3, r3, r3
 800f8f0:	643b      	str	r3, [r7, #64]	; 0x40
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	eb42 0303 	adc.w	r3, r2, r3
 800f8f8:	647b      	str	r3, [r7, #68]	; 0x44
 800f8fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f8fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f902:	f7f1 f981 	bl	8000c08 <__aeabi_uldivmod>
 800f906:	4602      	mov	r2, r0
 800f908:	460b      	mov	r3, r1
 800f90a:	4611      	mov	r1, r2
 800f90c:	4b3b      	ldr	r3, [pc, #236]	; (800f9fc <UART_SetConfig+0x2d4>)
 800f90e:	fba3 2301 	umull	r2, r3, r3, r1
 800f912:	095b      	lsrs	r3, r3, #5
 800f914:	2264      	movs	r2, #100	; 0x64
 800f916:	fb02 f303 	mul.w	r3, r2, r3
 800f91a:	1acb      	subs	r3, r1, r3
 800f91c:	00db      	lsls	r3, r3, #3
 800f91e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800f922:	4b36      	ldr	r3, [pc, #216]	; (800f9fc <UART_SetConfig+0x2d4>)
 800f924:	fba3 2302 	umull	r2, r3, r3, r2
 800f928:	095b      	lsrs	r3, r3, #5
 800f92a:	005b      	lsls	r3, r3, #1
 800f92c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f930:	441c      	add	r4, r3
 800f932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f936:	2200      	movs	r2, #0
 800f938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f93c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800f944:	4642      	mov	r2, r8
 800f946:	464b      	mov	r3, r9
 800f948:	1891      	adds	r1, r2, r2
 800f94a:	63b9      	str	r1, [r7, #56]	; 0x38
 800f94c:	415b      	adcs	r3, r3
 800f94e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f954:	4641      	mov	r1, r8
 800f956:	1851      	adds	r1, r2, r1
 800f958:	6339      	str	r1, [r7, #48]	; 0x30
 800f95a:	4649      	mov	r1, r9
 800f95c:	414b      	adcs	r3, r1
 800f95e:	637b      	str	r3, [r7, #52]	; 0x34
 800f960:	f04f 0200 	mov.w	r2, #0
 800f964:	f04f 0300 	mov.w	r3, #0
 800f968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800f96c:	4659      	mov	r1, fp
 800f96e:	00cb      	lsls	r3, r1, #3
 800f970:	4651      	mov	r1, sl
 800f972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f976:	4651      	mov	r1, sl
 800f978:	00ca      	lsls	r2, r1, #3
 800f97a:	4610      	mov	r0, r2
 800f97c:	4619      	mov	r1, r3
 800f97e:	4603      	mov	r3, r0
 800f980:	4642      	mov	r2, r8
 800f982:	189b      	adds	r3, r3, r2
 800f984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f988:	464b      	mov	r3, r9
 800f98a:	460a      	mov	r2, r1
 800f98c:	eb42 0303 	adc.w	r3, r2, r3
 800f990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	2200      	movs	r2, #0
 800f99c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f9a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f9a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	18db      	adds	r3, r3, r3
 800f9ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	eb42 0303 	adc.w	r3, r2, r3
 800f9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f9ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f9be:	f7f1 f923 	bl	8000c08 <__aeabi_uldivmod>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	4b0d      	ldr	r3, [pc, #52]	; (800f9fc <UART_SetConfig+0x2d4>)
 800f9c8:	fba3 1302 	umull	r1, r3, r3, r2
 800f9cc:	095b      	lsrs	r3, r3, #5
 800f9ce:	2164      	movs	r1, #100	; 0x64
 800f9d0:	fb01 f303 	mul.w	r3, r1, r3
 800f9d4:	1ad3      	subs	r3, r2, r3
 800f9d6:	00db      	lsls	r3, r3, #3
 800f9d8:	3332      	adds	r3, #50	; 0x32
 800f9da:	4a08      	ldr	r2, [pc, #32]	; (800f9fc <UART_SetConfig+0x2d4>)
 800f9dc:	fba2 2303 	umull	r2, r3, r2, r3
 800f9e0:	095b      	lsrs	r3, r3, #5
 800f9e2:	f003 0207 	and.w	r2, r3, #7
 800f9e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4422      	add	r2, r4
 800f9ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f9f0:	e106      	b.n	800fc00 <UART_SetConfig+0x4d8>
 800f9f2:	bf00      	nop
 800f9f4:	40011000 	.word	0x40011000
 800f9f8:	40011400 	.word	0x40011400
 800f9fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fa00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa04:	2200      	movs	r2, #0
 800fa06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fa0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fa0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800fa12:	4642      	mov	r2, r8
 800fa14:	464b      	mov	r3, r9
 800fa16:	1891      	adds	r1, r2, r2
 800fa18:	6239      	str	r1, [r7, #32]
 800fa1a:	415b      	adcs	r3, r3
 800fa1c:	627b      	str	r3, [r7, #36]	; 0x24
 800fa1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fa22:	4641      	mov	r1, r8
 800fa24:	1854      	adds	r4, r2, r1
 800fa26:	4649      	mov	r1, r9
 800fa28:	eb43 0501 	adc.w	r5, r3, r1
 800fa2c:	f04f 0200 	mov.w	r2, #0
 800fa30:	f04f 0300 	mov.w	r3, #0
 800fa34:	00eb      	lsls	r3, r5, #3
 800fa36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fa3a:	00e2      	lsls	r2, r4, #3
 800fa3c:	4614      	mov	r4, r2
 800fa3e:	461d      	mov	r5, r3
 800fa40:	4643      	mov	r3, r8
 800fa42:	18e3      	adds	r3, r4, r3
 800fa44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fa48:	464b      	mov	r3, r9
 800fa4a:	eb45 0303 	adc.w	r3, r5, r3
 800fa4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fa52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fa5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fa62:	f04f 0200 	mov.w	r2, #0
 800fa66:	f04f 0300 	mov.w	r3, #0
 800fa6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800fa6e:	4629      	mov	r1, r5
 800fa70:	008b      	lsls	r3, r1, #2
 800fa72:	4621      	mov	r1, r4
 800fa74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800fa78:	4621      	mov	r1, r4
 800fa7a:	008a      	lsls	r2, r1, #2
 800fa7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800fa80:	f7f1 f8c2 	bl	8000c08 <__aeabi_uldivmod>
 800fa84:	4602      	mov	r2, r0
 800fa86:	460b      	mov	r3, r1
 800fa88:	4b60      	ldr	r3, [pc, #384]	; (800fc0c <UART_SetConfig+0x4e4>)
 800fa8a:	fba3 2302 	umull	r2, r3, r3, r2
 800fa8e:	095b      	lsrs	r3, r3, #5
 800fa90:	011c      	lsls	r4, r3, #4
 800fa92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa96:	2200      	movs	r2, #0
 800fa98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fa9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800faa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800faa4:	4642      	mov	r2, r8
 800faa6:	464b      	mov	r3, r9
 800faa8:	1891      	adds	r1, r2, r2
 800faaa:	61b9      	str	r1, [r7, #24]
 800faac:	415b      	adcs	r3, r3
 800faae:	61fb      	str	r3, [r7, #28]
 800fab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fab4:	4641      	mov	r1, r8
 800fab6:	1851      	adds	r1, r2, r1
 800fab8:	6139      	str	r1, [r7, #16]
 800faba:	4649      	mov	r1, r9
 800fabc:	414b      	adcs	r3, r1
 800fabe:	617b      	str	r3, [r7, #20]
 800fac0:	f04f 0200 	mov.w	r2, #0
 800fac4:	f04f 0300 	mov.w	r3, #0
 800fac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800facc:	4659      	mov	r1, fp
 800face:	00cb      	lsls	r3, r1, #3
 800fad0:	4651      	mov	r1, sl
 800fad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fad6:	4651      	mov	r1, sl
 800fad8:	00ca      	lsls	r2, r1, #3
 800fada:	4610      	mov	r0, r2
 800fadc:	4619      	mov	r1, r3
 800fade:	4603      	mov	r3, r0
 800fae0:	4642      	mov	r2, r8
 800fae2:	189b      	adds	r3, r3, r2
 800fae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fae8:	464b      	mov	r3, r9
 800faea:	460a      	mov	r2, r1
 800faec:	eb42 0303 	adc.w	r3, r2, r3
 800faf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800faf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	67bb      	str	r3, [r7, #120]	; 0x78
 800fafe:	67fa      	str	r2, [r7, #124]	; 0x7c
 800fb00:	f04f 0200 	mov.w	r2, #0
 800fb04:	f04f 0300 	mov.w	r3, #0
 800fb08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800fb0c:	4649      	mov	r1, r9
 800fb0e:	008b      	lsls	r3, r1, #2
 800fb10:	4641      	mov	r1, r8
 800fb12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800fb16:	4641      	mov	r1, r8
 800fb18:	008a      	lsls	r2, r1, #2
 800fb1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800fb1e:	f7f1 f873 	bl	8000c08 <__aeabi_uldivmod>
 800fb22:	4602      	mov	r2, r0
 800fb24:	460b      	mov	r3, r1
 800fb26:	4611      	mov	r1, r2
 800fb28:	4b38      	ldr	r3, [pc, #224]	; (800fc0c <UART_SetConfig+0x4e4>)
 800fb2a:	fba3 2301 	umull	r2, r3, r3, r1
 800fb2e:	095b      	lsrs	r3, r3, #5
 800fb30:	2264      	movs	r2, #100	; 0x64
 800fb32:	fb02 f303 	mul.w	r3, r2, r3
 800fb36:	1acb      	subs	r3, r1, r3
 800fb38:	011b      	lsls	r3, r3, #4
 800fb3a:	3332      	adds	r3, #50	; 0x32
 800fb3c:	4a33      	ldr	r2, [pc, #204]	; (800fc0c <UART_SetConfig+0x4e4>)
 800fb3e:	fba2 2303 	umull	r2, r3, r2, r3
 800fb42:	095b      	lsrs	r3, r3, #5
 800fb44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb48:	441c      	add	r4, r3
 800fb4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fb4e:	2200      	movs	r2, #0
 800fb50:	673b      	str	r3, [r7, #112]	; 0x70
 800fb52:	677a      	str	r2, [r7, #116]	; 0x74
 800fb54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800fb58:	4642      	mov	r2, r8
 800fb5a:	464b      	mov	r3, r9
 800fb5c:	1891      	adds	r1, r2, r2
 800fb5e:	60b9      	str	r1, [r7, #8]
 800fb60:	415b      	adcs	r3, r3
 800fb62:	60fb      	str	r3, [r7, #12]
 800fb64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fb68:	4641      	mov	r1, r8
 800fb6a:	1851      	adds	r1, r2, r1
 800fb6c:	6039      	str	r1, [r7, #0]
 800fb6e:	4649      	mov	r1, r9
 800fb70:	414b      	adcs	r3, r1
 800fb72:	607b      	str	r3, [r7, #4]
 800fb74:	f04f 0200 	mov.w	r2, #0
 800fb78:	f04f 0300 	mov.w	r3, #0
 800fb7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800fb80:	4659      	mov	r1, fp
 800fb82:	00cb      	lsls	r3, r1, #3
 800fb84:	4651      	mov	r1, sl
 800fb86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fb8a:	4651      	mov	r1, sl
 800fb8c:	00ca      	lsls	r2, r1, #3
 800fb8e:	4610      	mov	r0, r2
 800fb90:	4619      	mov	r1, r3
 800fb92:	4603      	mov	r3, r0
 800fb94:	4642      	mov	r2, r8
 800fb96:	189b      	adds	r3, r3, r2
 800fb98:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb9a:	464b      	mov	r3, r9
 800fb9c:	460a      	mov	r2, r1
 800fb9e:	eb42 0303 	adc.w	r3, r2, r3
 800fba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	663b      	str	r3, [r7, #96]	; 0x60
 800fbae:	667a      	str	r2, [r7, #100]	; 0x64
 800fbb0:	f04f 0200 	mov.w	r2, #0
 800fbb4:	f04f 0300 	mov.w	r3, #0
 800fbb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800fbbc:	4649      	mov	r1, r9
 800fbbe:	008b      	lsls	r3, r1, #2
 800fbc0:	4641      	mov	r1, r8
 800fbc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800fbc6:	4641      	mov	r1, r8
 800fbc8:	008a      	lsls	r2, r1, #2
 800fbca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800fbce:	f7f1 f81b 	bl	8000c08 <__aeabi_uldivmod>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	4b0d      	ldr	r3, [pc, #52]	; (800fc0c <UART_SetConfig+0x4e4>)
 800fbd8:	fba3 1302 	umull	r1, r3, r3, r2
 800fbdc:	095b      	lsrs	r3, r3, #5
 800fbde:	2164      	movs	r1, #100	; 0x64
 800fbe0:	fb01 f303 	mul.w	r3, r1, r3
 800fbe4:	1ad3      	subs	r3, r2, r3
 800fbe6:	011b      	lsls	r3, r3, #4
 800fbe8:	3332      	adds	r3, #50	; 0x32
 800fbea:	4a08      	ldr	r2, [pc, #32]	; (800fc0c <UART_SetConfig+0x4e4>)
 800fbec:	fba2 2303 	umull	r2, r3, r2, r3
 800fbf0:	095b      	lsrs	r3, r3, #5
 800fbf2:	f003 020f 	and.w	r2, r3, #15
 800fbf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4422      	add	r2, r4
 800fbfe:	609a      	str	r2, [r3, #8]
}
 800fc00:	bf00      	nop
 800fc02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800fc06:	46bd      	mov	sp, r7
 800fc08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fc0c:	51eb851f 	.word	0x51eb851f

0800fc10 <_ZNSaIcEC1Ev>:
 800fc10:	4770      	bx	lr

0800fc12 <_ZNSaIcEC1ERKS_>:
 800fc12:	4770      	bx	lr

0800fc14 <_ZNSaIcED1Ev>:
 800fc14:	4770      	bx	lr

0800fc16 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800fc16:	b10a      	cbz	r2, 800fc1c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800fc18:	f001 bc5d 	b.w	80114d6 <memcpy>
 800fc1c:	4770      	bx	lr
	...

0800fc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800fc20:	b508      	push	{r3, lr}
 800fc22:	680b      	ldr	r3, [r1, #0]
 800fc24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc28:	d302      	bcc.n	800fc30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800fc2a:	480d      	ldr	r0, [pc, #52]	; (800fc60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800fc2c:	f000 fa7a 	bl	8010124 <_ZSt20__throw_length_errorPKc>
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d90b      	bls.n	800fc4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800fc34:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800fc38:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800fc3c:	d206      	bcs.n	800fc4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800fc3e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800fc42:	bf2a      	itet	cs
 800fc44:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800fc48:	6008      	strcc	r0, [r1, #0]
 800fc4a:	600b      	strcs	r3, [r1, #0]
 800fc4c:	6808      	ldr	r0, [r1, #0]
 800fc4e:	3001      	adds	r0, #1
 800fc50:	d501      	bpl.n	800fc56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800fc52:	f000 fa61 	bl	8010118 <_ZSt17__throw_bad_allocv>
 800fc56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fc5a:	f000 ba4c 	b.w	80100f6 <_Znwj>
 800fc5e:	bf00      	nop
 800fc60:	08014464 	.word	0x08014464

0800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800fc64:	f850 3b08 	ldr.w	r3, [r0], #8
 800fc68:	4283      	cmp	r3, r0
 800fc6a:	d002      	beq.n	800fc72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f000 ba40 	b.w	80100f2 <_ZdlPv>
 800fc72:	4770      	bx	lr

0800fc74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800fc74:	6840      	ldr	r0, [r0, #4]
 800fc76:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800fc7a:	3901      	subs	r1, #1
 800fc7c:	1a09      	subs	r1, r1, r0
 800fc7e:	4291      	cmp	r1, r2
 800fc80:	b508      	push	{r3, lr}
 800fc82:	d202      	bcs.n	800fc8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800fc84:	4618      	mov	r0, r3
 800fc86:	f000 fa4d 	bl	8010124 <_ZSt20__throw_length_errorPKc>
 800fc8a:	bd08      	pop	{r3, pc}

0800fc8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800fc8c:	6803      	ldr	r3, [r0, #0]
 800fc8e:	428b      	cmp	r3, r1
 800fc90:	d806      	bhi.n	800fca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800fc92:	6842      	ldr	r2, [r0, #4]
 800fc94:	4413      	add	r3, r2
 800fc96:	4299      	cmp	r1, r3
 800fc98:	bf94      	ite	ls
 800fc9a:	2000      	movls	r0, #0
 800fc9c:	2001      	movhi	r0, #1
 800fc9e:	4770      	bx	lr
 800fca0:	2001      	movs	r0, #1
 800fca2:	4770      	bx	lr

0800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800fca4:	2a01      	cmp	r2, #1
 800fca6:	b410      	push	{r4}
 800fca8:	d104      	bne.n	800fcb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800fcaa:	780a      	ldrb	r2, [r1, #0]
 800fcac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcb0:	7002      	strb	r2, [r0, #0]
 800fcb2:	4770      	bx	lr
 800fcb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcb8:	f7ff bfad 	b.w	800fc16 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800fcbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800fcbc:	2a01      	cmp	r2, #1
 800fcbe:	b430      	push	{r4, r5}
 800fcc0:	d103      	bne.n	800fcca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800fcc2:	780b      	ldrb	r3, [r1, #0]
 800fcc4:	7003      	strb	r3, [r0, #0]
 800fcc6:	bc30      	pop	{r4, r5}
 800fcc8:	4770      	bx	lr
 800fcca:	2a00      	cmp	r2, #0
 800fccc:	d0fb      	beq.n	800fcc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800fcce:	bc30      	pop	{r4, r5}
 800fcd0:	f001 bae8 	b.w	80112a4 <memmove>

0800fcd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800fcd4:	b508      	push	{r3, lr}
 800fcd6:	1a52      	subs	r2, r2, r1
 800fcd8:	f7ff ffe4 	bl	800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fcdc:	bd08      	pop	{r3, pc}

0800fcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800fcde:	b508      	push	{r3, lr}
 800fce0:	1a52      	subs	r2, r2, r1
 800fce2:	f7ff ffdf 	bl	800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fce6:	bd08      	pop	{r3, pc}

0800fce8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800fce8:	4288      	cmp	r0, r1
 800fcea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcec:	4604      	mov	r4, r0
 800fcee:	460e      	mov	r6, r1
 800fcf0:	d01e      	beq.n	800fd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	684d      	ldr	r5, [r1, #4]
 800fcf6:	f853 2b08 	ldr.w	r2, [r3], #8
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	bf14      	ite	ne
 800fcfe:	6882      	ldrne	r2, [r0, #8]
 800fd00:	220f      	moveq	r2, #15
 800fd02:	42aa      	cmp	r2, r5
 800fd04:	d20a      	bcs.n	800fd1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 800fd06:	a901      	add	r1, sp, #4
 800fd08:	9501      	str	r5, [sp, #4]
 800fd0a:	f7ff ff89 	bl	800fc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fd0e:	4607      	mov	r7, r0
 800fd10:	4620      	mov	r0, r4
 800fd12:	f7ff ffa7 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fd16:	9b01      	ldr	r3, [sp, #4]
 800fd18:	6027      	str	r7, [r4, #0]
 800fd1a:	60a3      	str	r3, [r4, #8]
 800fd1c:	b125      	cbz	r5, 800fd28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 800fd1e:	6831      	ldr	r1, [r6, #0]
 800fd20:	6820      	ldr	r0, [r4, #0]
 800fd22:	462a      	mov	r2, r5
 800fd24:	f7ff ffbe 	bl	800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd28:	6823      	ldr	r3, [r4, #0]
 800fd2a:	6065      	str	r5, [r4, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	555a      	strb	r2, [r3, r5]
 800fd30:	b003      	add	sp, #12
 800fd32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800fd34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd38:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fd3a:	461f      	mov	r7, r3
 800fd3c:	6843      	ldr	r3, [r0, #4]
 800fd3e:	eb01 0802 	add.w	r8, r1, r2
 800fd42:	1ab2      	subs	r2, r6, r2
 800fd44:	441a      	add	r2, r3
 800fd46:	eba3 0908 	sub.w	r9, r3, r8
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	9201      	str	r2, [sp, #4]
 800fd4e:	f853 2b08 	ldr.w	r2, [r3], #8
 800fd52:	429a      	cmp	r2, r3
 800fd54:	bf18      	it	ne
 800fd56:	6882      	ldrne	r2, [r0, #8]
 800fd58:	460d      	mov	r5, r1
 800fd5a:	bf08      	it	eq
 800fd5c:	220f      	moveq	r2, #15
 800fd5e:	a901      	add	r1, sp, #4
 800fd60:	4604      	mov	r4, r0
 800fd62:	f7ff ff5d 	bl	800fc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fd66:	4682      	mov	sl, r0
 800fd68:	b11d      	cbz	r5, 800fd72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800fd6a:	6821      	ldr	r1, [r4, #0]
 800fd6c:	462a      	mov	r2, r5
 800fd6e:	f7ff ff99 	bl	800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd72:	b137      	cbz	r7, 800fd82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800fd74:	b12e      	cbz	r6, 800fd82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800fd76:	4632      	mov	r2, r6
 800fd78:	4639      	mov	r1, r7
 800fd7a:	eb0a 0005 	add.w	r0, sl, r5
 800fd7e:	f7ff ff91 	bl	800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd82:	f1b9 0f00 	cmp.w	r9, #0
 800fd86:	d007      	beq.n	800fd98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800fd88:	6821      	ldr	r1, [r4, #0]
 800fd8a:	4435      	add	r5, r6
 800fd8c:	464a      	mov	r2, r9
 800fd8e:	4441      	add	r1, r8
 800fd90:	eb0a 0005 	add.w	r0, sl, r5
 800fd94:	f7ff ff86 	bl	800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f7ff ff63 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fd9e:	9b01      	ldr	r3, [sp, #4]
 800fda0:	f8c4 a000 	str.w	sl, [r4]
 800fda4:	60a3      	str	r3, [r4, #8]
 800fda6:	b002      	add	sp, #8
 800fda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800fdac:	f100 0208 	add.w	r2, r0, #8
 800fdb0:	6002      	str	r2, [r0, #0]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	6042      	str	r2, [r0, #4]
 800fdb6:	7202      	strb	r2, [r0, #8]
 800fdb8:	4770      	bx	lr

0800fdba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>:
 800fdba:	f100 0208 	add.w	r2, r0, #8
 800fdbe:	6002      	str	r2, [r0, #0]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	6042      	str	r2, [r0, #4]
 800fdc4:	7202      	strb	r2, [r0, #8]
 800fdc6:	4770      	bx	lr

0800fdc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800fdc8:	b510      	push	{r4, lr}
 800fdca:	4604      	mov	r4, r0
 800fdcc:	f7ff ff4a 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	bd10      	pop	{r4, pc}

0800fdd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800fdd4:	b510      	push	{r4, lr}
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	f7ff ff86 	bl	800fce8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800fddc:	4620      	mov	r0, r4
 800fdde:	bd10      	pop	{r4, pc}

0800fde0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800fde0:	b570      	push	{r4, r5, r6, lr}
 800fde2:	460c      	mov	r4, r1
 800fde4:	f851 3b08 	ldr.w	r3, [r1], #8
 800fde8:	4299      	cmp	r1, r3
 800fdea:	4605      	mov	r5, r0
 800fdec:	6800      	ldr	r0, [r0, #0]
 800fdee:	d110      	bne.n	800fe12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 800fdf0:	42a5      	cmp	r5, r4
 800fdf2:	d008      	beq.n	800fe06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 800fdf4:	6862      	ldr	r2, [r4, #4]
 800fdf6:	b10a      	cbz	r2, 800fdfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 800fdf8:	f7ff ff54 	bl	800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fdfc:	6863      	ldr	r3, [r4, #4]
 800fdfe:	682a      	ldr	r2, [r5, #0]
 800fe00:	606b      	str	r3, [r5, #4]
 800fe02:	2100      	movs	r1, #0
 800fe04:	54d1      	strb	r1, [r2, r3]
 800fe06:	6822      	ldr	r2, [r4, #0]
 800fe08:	2300      	movs	r3, #0
 800fe0a:	6063      	str	r3, [r4, #4]
 800fe0c:	7013      	strb	r3, [r2, #0]
 800fe0e:	4628      	mov	r0, r5
 800fe10:	bd70      	pop	{r4, r5, r6, pc}
 800fe12:	602b      	str	r3, [r5, #0]
 800fe14:	f105 0608 	add.w	r6, r5, #8
 800fe18:	6863      	ldr	r3, [r4, #4]
 800fe1a:	606b      	str	r3, [r5, #4]
 800fe1c:	42b0      	cmp	r0, r6
 800fe1e:	68a3      	ldr	r3, [r4, #8]
 800fe20:	bf18      	it	ne
 800fe22:	68aa      	ldrne	r2, [r5, #8]
 800fe24:	60ab      	str	r3, [r5, #8]
 800fe26:	bf08      	it	eq
 800fe28:	2000      	moveq	r0, #0
 800fe2a:	b110      	cbz	r0, 800fe32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 800fe2c:	6020      	str	r0, [r4, #0]
 800fe2e:	60a2      	str	r2, [r4, #8]
 800fe30:	e7e9      	b.n	800fe06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 800fe32:	6021      	str	r1, [r4, #0]
 800fe34:	e7e7      	b.n	800fe06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

0800fe36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800fe36:	6840      	ldr	r0, [r0, #4]
 800fe38:	4770      	bx	lr

0800fe3a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800fe3a:	6840      	ldr	r0, [r0, #4]
 800fe3c:	4770      	bx	lr

0800fe3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 800fe3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe40:	4603      	mov	r3, r0
 800fe42:	9101      	str	r1, [sp, #4]
 800fe44:	f853 2b08 	ldr.w	r2, [r3], #8
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	bf18      	it	ne
 800fe4c:	6882      	ldrne	r2, [r0, #8]
 800fe4e:	9b01      	ldr	r3, [sp, #4]
 800fe50:	bf08      	it	eq
 800fe52:	220f      	moveq	r2, #15
 800fe54:	4293      	cmp	r3, r2
 800fe56:	4604      	mov	r4, r0
 800fe58:	d90e      	bls.n	800fe78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x3a>
 800fe5a:	a901      	add	r1, sp, #4
 800fe5c:	f7ff fee0 	bl	800fc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fe60:	6862      	ldr	r2, [r4, #4]
 800fe62:	6821      	ldr	r1, [r4, #0]
 800fe64:	3201      	adds	r2, #1
 800fe66:	4605      	mov	r5, r0
 800fe68:	f7ff ff1c 	bl	800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f7ff fef9 	bl	800fc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fe72:	9b01      	ldr	r3, [sp, #4]
 800fe74:	6025      	str	r5, [r4, #0]
 800fe76:	60a3      	str	r3, [r4, #8]
 800fe78:	b003      	add	sp, #12
 800fe7a:	bd30      	pop	{r4, r5, pc}

0800fe7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800fe7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fe82:	4614      	mov	r4, r2
 800fe84:	4680      	mov	r8, r0
 800fe86:	462a      	mov	r2, r5
 800fe88:	4689      	mov	r9, r1
 800fe8a:	461f      	mov	r7, r3
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	4b39      	ldr	r3, [pc, #228]	; (800ff74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 800fe90:	f7ff fef0 	bl	800fc74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800fe94:	4642      	mov	r2, r8
 800fe96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe9a:	f852 6b08 	ldr.w	r6, [r2], #8
 800fe9e:	4296      	cmp	r6, r2
 800fea0:	bf18      	it	ne
 800fea2:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800fea6:	eba5 0b04 	sub.w	fp, r5, r4
 800feaa:	eb03 0a0b 	add.w	sl, r3, fp
 800feae:	bf08      	it	eq
 800feb0:	220f      	moveq	r2, #15
 800feb2:	4552      	cmp	r2, sl
 800feb4:	d351      	bcc.n	800ff5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800feb6:	444e      	add	r6, r9
 800feb8:	4639      	mov	r1, r7
 800feba:	44a1      	add	r9, r4
 800febc:	4640      	mov	r0, r8
 800febe:	eba3 0909 	sub.w	r9, r3, r9
 800fec2:	f7ff fee3 	bl	800fc8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800fec6:	b180      	cbz	r0, 800feea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 800fec8:	f1b9 0f00 	cmp.w	r9, #0
 800fecc:	d006      	beq.n	800fedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800fece:	42ac      	cmp	r4, r5
 800fed0:	d004      	beq.n	800fedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800fed2:	464a      	mov	r2, r9
 800fed4:	1931      	adds	r1, r6, r4
 800fed6:	1970      	adds	r0, r6, r5
 800fed8:	f7ff fef0 	bl	800fcbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fedc:	b315      	cbz	r5, 800ff24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800fede:	462a      	mov	r2, r5
 800fee0:	4639      	mov	r1, r7
 800fee2:	4630      	mov	r0, r6
 800fee4:	f7ff fede 	bl	800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fee8:	e01c      	b.n	800ff24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800feea:	b135      	cbz	r5, 800fefa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800feec:	42ac      	cmp	r4, r5
 800feee:	d33c      	bcc.n	800ff6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800fef0:	462a      	mov	r2, r5
 800fef2:	4639      	mov	r1, r7
 800fef4:	4630      	mov	r0, r6
 800fef6:	f7ff fee1 	bl	800fcbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fefa:	f1b9 0f00 	cmp.w	r9, #0
 800fefe:	d011      	beq.n	800ff24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800ff00:	42ac      	cmp	r4, r5
 800ff02:	d00f      	beq.n	800ff24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800ff04:	464a      	mov	r2, r9
 800ff06:	1931      	adds	r1, r6, r4
 800ff08:	1970      	adds	r0, r6, r5
 800ff0a:	f7ff fed7 	bl	800fcbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ff0e:	42ac      	cmp	r4, r5
 800ff10:	d208      	bcs.n	800ff24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800ff12:	4434      	add	r4, r6
 800ff14:	197b      	adds	r3, r7, r5
 800ff16:	429c      	cmp	r4, r3
 800ff18:	d30f      	bcc.n	800ff3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800ff1a:	462a      	mov	r2, r5
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f7ff fecc 	bl	800fcbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ff24:	f8d8 3000 	ldr.w	r3, [r8]
 800ff28:	f8c8 a004 	str.w	sl, [r8, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	4640      	mov	r0, r8
 800ff30:	f803 200a 	strb.w	r2, [r3, sl]
 800ff34:	b003      	add	sp, #12
 800ff36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3a:	42bc      	cmp	r4, r7
 800ff3c:	d803      	bhi.n	800ff46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800ff3e:	462a      	mov	r2, r5
 800ff40:	eb07 010b 	add.w	r1, r7, fp
 800ff44:	e7cd      	b.n	800fee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800ff46:	1be4      	subs	r4, r4, r7
 800ff48:	4622      	mov	r2, r4
 800ff4a:	4639      	mov	r1, r7
 800ff4c:	4630      	mov	r0, r6
 800ff4e:	f7ff feb5 	bl	800fcbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800ff52:	1b2a      	subs	r2, r5, r4
 800ff54:	1971      	adds	r1, r6, r5
 800ff56:	1930      	adds	r0, r6, r4
 800ff58:	e7c4      	b.n	800fee4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800ff5a:	9500      	str	r5, [sp, #0]
 800ff5c:	463b      	mov	r3, r7
 800ff5e:	4622      	mov	r2, r4
 800ff60:	4649      	mov	r1, r9
 800ff62:	4640      	mov	r0, r8
 800ff64:	f7ff fee6 	bl	800fd34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800ff68:	e7dc      	b.n	800ff24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800ff6a:	f1b9 0f00 	cmp.w	r9, #0
 800ff6e:	d0d0      	beq.n	800ff12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 800ff70:	e7c8      	b.n	800ff04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800ff72:	bf00      	nop
 800ff74:	0801447c 	.word	0x0801447c

0800ff78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800ff78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	4608      	mov	r0, r1
 800ff7e:	9103      	str	r1, [sp, #12]
 800ff80:	f7f0 f986 	bl	8000290 <strlen>
 800ff84:	9b03      	ldr	r3, [sp, #12]
 800ff86:	9000      	str	r0, [sp, #0]
 800ff88:	6862      	ldr	r2, [r4, #4]
 800ff8a:	2100      	movs	r1, #0
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f7ff ff75 	bl	800fe7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800ff92:	b004      	add	sp, #16
 800ff94:	bd10      	pop	{r4, pc}

0800ff96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800ff96:	b508      	push	{r3, lr}
 800ff98:	f7ff ffee 	bl	800ff78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800ff9c:	bd08      	pop	{r3, pc}

0800ff9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800ff9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	4623      	mov	r3, r4
 800ffa4:	6840      	ldr	r0, [r0, #4]
 800ffa6:	f853 6b08 	ldr.w	r6, [r3], #8
 800ffaa:	429e      	cmp	r6, r3
 800ffac:	bf18      	it	ne
 800ffae:	68a3      	ldrne	r3, [r4, #8]
 800ffb0:	eb00 0502 	add.w	r5, r0, r2
 800ffb4:	bf08      	it	eq
 800ffb6:	230f      	moveq	r3, #15
 800ffb8:	429d      	cmp	r5, r3
 800ffba:	d80a      	bhi.n	800ffd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800ffbc:	b112      	cbz	r2, 800ffc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800ffbe:	4430      	add	r0, r6
 800ffc0:	f7ff fe70 	bl	800fca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ffc4:	6823      	ldr	r3, [r4, #0]
 800ffc6:	6065      	str	r5, [r4, #4]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	4620      	mov	r0, r4
 800ffcc:	555a      	strb	r2, [r3, r5]
 800ffce:	b002      	add	sp, #8
 800ffd0:	bd70      	pop	{r4, r5, r6, pc}
 800ffd2:	9200      	str	r2, [sp, #0]
 800ffd4:	460b      	mov	r3, r1
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	4601      	mov	r1, r0
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f7ff feaa 	bl	800fd34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800ffe0:	e7f0      	b.n	800ffc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800ffe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800ffe2:	b508      	push	{r3, lr}
 800ffe4:	e9d1 1200 	ldrd	r1, r2, [r1]
 800ffe8:	f7ff ffd9 	bl	800ff9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800ffec:	bd08      	pop	{r3, pc}
	...

0800fff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800fff0:	b570      	push	{r4, r5, r6, lr}
 800fff2:	4b06      	ldr	r3, [pc, #24]	; (801000c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800fff4:	4604      	mov	r4, r0
 800fff6:	460d      	mov	r5, r1
 800fff8:	4616      	mov	r6, r2
 800fffa:	2100      	movs	r1, #0
 800fffc:	f7ff fe3a 	bl	800fc74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8010000:	4632      	mov	r2, r6
 8010002:	4629      	mov	r1, r5
 8010004:	4620      	mov	r0, r4
 8010006:	f7ff ffca 	bl	800ff9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801000a:	bd70      	pop	{r4, r5, r6, pc}
 801000c:	08014495 	.word	0x08014495

08010010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8010010:	6800      	ldr	r0, [r0, #0]
 8010012:	4770      	bx	lr

08010014 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 8010014:	4770      	bx	lr
	...

08010018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8010018:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801001a:	4604      	mov	r4, r0
 801001c:	4616      	mov	r6, r2
 801001e:	460d      	mov	r5, r1
 8010020:	b919      	cbnz	r1, 801002a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8010022:	b112      	cbz	r2, 801002a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8010024:	480d      	ldr	r0, [pc, #52]	; (801005c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8010026:	f000 f87a 	bl	801011e <_ZSt19__throw_logic_errorPKc>
 801002a:	1b73      	subs	r3, r6, r5
 801002c:	2b0f      	cmp	r3, #15
 801002e:	9301      	str	r3, [sp, #4]
 8010030:	d907      	bls.n	8010042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8010032:	2200      	movs	r2, #0
 8010034:	a901      	add	r1, sp, #4
 8010036:	4620      	mov	r0, r4
 8010038:	f7ff fdf2 	bl	800fc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801003c:	9b01      	ldr	r3, [sp, #4]
 801003e:	6020      	str	r0, [r4, #0]
 8010040:	60a3      	str	r3, [r4, #8]
 8010042:	4632      	mov	r2, r6
 8010044:	4629      	mov	r1, r5
 8010046:	6820      	ldr	r0, [r4, #0]
 8010048:	f7ff fe44 	bl	800fcd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801004c:	9b01      	ldr	r3, [sp, #4]
 801004e:	6822      	ldr	r2, [r4, #0]
 8010050:	6063      	str	r3, [r4, #4]
 8010052:	2100      	movs	r1, #0
 8010054:	54d1      	strb	r1, [r2, r3]
 8010056:	b002      	add	sp, #8
 8010058:	bd70      	pop	{r4, r5, r6, pc}
 801005a:	bf00      	nop
 801005c:	080144aa 	.word	0x080144aa

08010060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8010060:	b538      	push	{r3, r4, r5, lr}
 8010062:	f100 0308 	add.w	r3, r0, #8
 8010066:	6003      	str	r3, [r0, #0]
 8010068:	e9d1 5200 	ldrd	r5, r2, [r1]
 801006c:	4604      	mov	r4, r0
 801006e:	f04f 0300 	mov.w	r3, #0
 8010072:	442a      	add	r2, r5
 8010074:	4629      	mov	r1, r5
 8010076:	f7ff ffcf 	bl	8010018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801007a:	4620      	mov	r0, r4
 801007c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8010080:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010082:	4604      	mov	r4, r0
 8010084:	4616      	mov	r6, r2
 8010086:	460d      	mov	r5, r1
 8010088:	b919      	cbnz	r1, 8010092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801008a:	b112      	cbz	r2, 8010092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801008c:	480d      	ldr	r0, [pc, #52]	; (80100c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801008e:	f000 f846 	bl	801011e <_ZSt19__throw_logic_errorPKc>
 8010092:	1b73      	subs	r3, r6, r5
 8010094:	2b0f      	cmp	r3, #15
 8010096:	9301      	str	r3, [sp, #4]
 8010098:	d907      	bls.n	80100aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801009a:	2200      	movs	r2, #0
 801009c:	a901      	add	r1, sp, #4
 801009e:	4620      	mov	r0, r4
 80100a0:	f7ff fdbe 	bl	800fc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80100a4:	9b01      	ldr	r3, [sp, #4]
 80100a6:	6020      	str	r0, [r4, #0]
 80100a8:	60a3      	str	r3, [r4, #8]
 80100aa:	4632      	mov	r2, r6
 80100ac:	4629      	mov	r1, r5
 80100ae:	6820      	ldr	r0, [r4, #0]
 80100b0:	f7ff fe15 	bl	800fcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80100b4:	9b01      	ldr	r3, [sp, #4]
 80100b6:	6822      	ldr	r2, [r4, #0]
 80100b8:	6063      	str	r3, [r4, #4]
 80100ba:	2100      	movs	r1, #0
 80100bc:	54d1      	strb	r1, [r2, r3]
 80100be:	b002      	add	sp, #8
 80100c0:	bd70      	pop	{r4, r5, r6, pc}
 80100c2:	bf00      	nop
 80100c4:	080144aa 	.word	0x080144aa

080100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	f100 0308 	add.w	r3, r0, #8
 80100ce:	4604      	mov	r4, r0
 80100d0:	6003      	str	r3, [r0, #0]
 80100d2:	460d      	mov	r5, r1
 80100d4:	b159      	cbz	r1, 80100ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80100d6:	4608      	mov	r0, r1
 80100d8:	f7f0 f8da 	bl	8000290 <strlen>
 80100dc:	182a      	adds	r2, r5, r0
 80100de:	4620      	mov	r0, r4
 80100e0:	f04f 0300 	mov.w	r3, #0
 80100e4:	4629      	mov	r1, r5
 80100e6:	f7ff ffcb 	bl	8010080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80100ea:	4620      	mov	r0, r4
 80100ec:	bd38      	pop	{r3, r4, r5, pc}
 80100ee:	2201      	movs	r2, #1
 80100f0:	e7f5      	b.n	80100de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080100f2 <_ZdlPv>:
 80100f2:	f000 b833 	b.w	801015c <free>

080100f6 <_Znwj>:
 80100f6:	2801      	cmp	r0, #1
 80100f8:	bf38      	it	cc
 80100fa:	2001      	movcc	r0, #1
 80100fc:	b510      	push	{r4, lr}
 80100fe:	4604      	mov	r4, r0
 8010100:	4620      	mov	r0, r4
 8010102:	f000 f823 	bl	801014c <malloc>
 8010106:	b100      	cbz	r0, 801010a <_Znwj+0x14>
 8010108:	bd10      	pop	{r4, pc}
 801010a:	f000 f80f 	bl	801012c <_ZSt15get_new_handlerv>
 801010e:	b908      	cbnz	r0, 8010114 <_Znwj+0x1e>
 8010110:	f000 f814 	bl	801013c <abort>
 8010114:	4780      	blx	r0
 8010116:	e7f3      	b.n	8010100 <_Znwj+0xa>

08010118 <_ZSt17__throw_bad_allocv>:
 8010118:	b508      	push	{r3, lr}
 801011a:	f000 f80f 	bl	801013c <abort>

0801011e <_ZSt19__throw_logic_errorPKc>:
 801011e:	b508      	push	{r3, lr}
 8010120:	f000 f80c 	bl	801013c <abort>

08010124 <_ZSt20__throw_length_errorPKc>:
 8010124:	b508      	push	{r3, lr}
 8010126:	f000 f809 	bl	801013c <abort>
	...

0801012c <_ZSt15get_new_handlerv>:
 801012c:	4b02      	ldr	r3, [pc, #8]	; (8010138 <_ZSt15get_new_handlerv+0xc>)
 801012e:	6818      	ldr	r0, [r3, #0]
 8010130:	f3bf 8f5b 	dmb	ish
 8010134:	4770      	bx	lr
 8010136:	bf00      	nop
 8010138:	200032f8 	.word	0x200032f8

0801013c <abort>:
 801013c:	b508      	push	{r3, lr}
 801013e:	2006      	movs	r0, #6
 8010140:	f001 f92a 	bl	8011398 <raise>
 8010144:	2001      	movs	r0, #1
 8010146:	f7fc f8a5 	bl	800c294 <_exit>
	...

0801014c <malloc>:
 801014c:	4b02      	ldr	r3, [pc, #8]	; (8010158 <malloc+0xc>)
 801014e:	4601      	mov	r1, r0
 8010150:	6818      	ldr	r0, [r3, #0]
 8010152:	f000 b82b 	b.w	80101ac <_malloc_r>
 8010156:	bf00      	nop
 8010158:	20000228 	.word	0x20000228

0801015c <free>:
 801015c:	4b02      	ldr	r3, [pc, #8]	; (8010168 <free+0xc>)
 801015e:	4601      	mov	r1, r0
 8010160:	6818      	ldr	r0, [r3, #0]
 8010162:	f001 b9d1 	b.w	8011508 <_free_r>
 8010166:	bf00      	nop
 8010168:	20000228 	.word	0x20000228

0801016c <sbrk_aligned>:
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	4e0e      	ldr	r6, [pc, #56]	; (80101a8 <sbrk_aligned+0x3c>)
 8010170:	460c      	mov	r4, r1
 8010172:	6831      	ldr	r1, [r6, #0]
 8010174:	4605      	mov	r5, r0
 8010176:	b911      	cbnz	r1, 801017e <sbrk_aligned+0x12>
 8010178:	f001 f95e 	bl	8011438 <_sbrk_r>
 801017c:	6030      	str	r0, [r6, #0]
 801017e:	4621      	mov	r1, r4
 8010180:	4628      	mov	r0, r5
 8010182:	f001 f959 	bl	8011438 <_sbrk_r>
 8010186:	1c43      	adds	r3, r0, #1
 8010188:	d00a      	beq.n	80101a0 <sbrk_aligned+0x34>
 801018a:	1cc4      	adds	r4, r0, #3
 801018c:	f024 0403 	bic.w	r4, r4, #3
 8010190:	42a0      	cmp	r0, r4
 8010192:	d007      	beq.n	80101a4 <sbrk_aligned+0x38>
 8010194:	1a21      	subs	r1, r4, r0
 8010196:	4628      	mov	r0, r5
 8010198:	f001 f94e 	bl	8011438 <_sbrk_r>
 801019c:	3001      	adds	r0, #1
 801019e:	d101      	bne.n	80101a4 <sbrk_aligned+0x38>
 80101a0:	f04f 34ff 	mov.w	r4, #4294967295
 80101a4:	4620      	mov	r0, r4
 80101a6:	bd70      	pop	{r4, r5, r6, pc}
 80101a8:	20003300 	.word	0x20003300

080101ac <_malloc_r>:
 80101ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101b0:	1ccd      	adds	r5, r1, #3
 80101b2:	f025 0503 	bic.w	r5, r5, #3
 80101b6:	3508      	adds	r5, #8
 80101b8:	2d0c      	cmp	r5, #12
 80101ba:	bf38      	it	cc
 80101bc:	250c      	movcc	r5, #12
 80101be:	2d00      	cmp	r5, #0
 80101c0:	4607      	mov	r7, r0
 80101c2:	db01      	blt.n	80101c8 <_malloc_r+0x1c>
 80101c4:	42a9      	cmp	r1, r5
 80101c6:	d905      	bls.n	80101d4 <_malloc_r+0x28>
 80101c8:	230c      	movs	r3, #12
 80101ca:	603b      	str	r3, [r7, #0]
 80101cc:	2600      	movs	r6, #0
 80101ce:	4630      	mov	r0, r6
 80101d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80102a8 <_malloc_r+0xfc>
 80101d8:	f000 f868 	bl	80102ac <__malloc_lock>
 80101dc:	f8d8 3000 	ldr.w	r3, [r8]
 80101e0:	461c      	mov	r4, r3
 80101e2:	bb5c      	cbnz	r4, 801023c <_malloc_r+0x90>
 80101e4:	4629      	mov	r1, r5
 80101e6:	4638      	mov	r0, r7
 80101e8:	f7ff ffc0 	bl	801016c <sbrk_aligned>
 80101ec:	1c43      	adds	r3, r0, #1
 80101ee:	4604      	mov	r4, r0
 80101f0:	d155      	bne.n	801029e <_malloc_r+0xf2>
 80101f2:	f8d8 4000 	ldr.w	r4, [r8]
 80101f6:	4626      	mov	r6, r4
 80101f8:	2e00      	cmp	r6, #0
 80101fa:	d145      	bne.n	8010288 <_malloc_r+0xdc>
 80101fc:	2c00      	cmp	r4, #0
 80101fe:	d048      	beq.n	8010292 <_malloc_r+0xe6>
 8010200:	6823      	ldr	r3, [r4, #0]
 8010202:	4631      	mov	r1, r6
 8010204:	4638      	mov	r0, r7
 8010206:	eb04 0903 	add.w	r9, r4, r3
 801020a:	f001 f915 	bl	8011438 <_sbrk_r>
 801020e:	4581      	cmp	r9, r0
 8010210:	d13f      	bne.n	8010292 <_malloc_r+0xe6>
 8010212:	6821      	ldr	r1, [r4, #0]
 8010214:	1a6d      	subs	r5, r5, r1
 8010216:	4629      	mov	r1, r5
 8010218:	4638      	mov	r0, r7
 801021a:	f7ff ffa7 	bl	801016c <sbrk_aligned>
 801021e:	3001      	adds	r0, #1
 8010220:	d037      	beq.n	8010292 <_malloc_r+0xe6>
 8010222:	6823      	ldr	r3, [r4, #0]
 8010224:	442b      	add	r3, r5
 8010226:	6023      	str	r3, [r4, #0]
 8010228:	f8d8 3000 	ldr.w	r3, [r8]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d038      	beq.n	80102a2 <_malloc_r+0xf6>
 8010230:	685a      	ldr	r2, [r3, #4]
 8010232:	42a2      	cmp	r2, r4
 8010234:	d12b      	bne.n	801028e <_malloc_r+0xe2>
 8010236:	2200      	movs	r2, #0
 8010238:	605a      	str	r2, [r3, #4]
 801023a:	e00f      	b.n	801025c <_malloc_r+0xb0>
 801023c:	6822      	ldr	r2, [r4, #0]
 801023e:	1b52      	subs	r2, r2, r5
 8010240:	d41f      	bmi.n	8010282 <_malloc_r+0xd6>
 8010242:	2a0b      	cmp	r2, #11
 8010244:	d917      	bls.n	8010276 <_malloc_r+0xca>
 8010246:	1961      	adds	r1, r4, r5
 8010248:	42a3      	cmp	r3, r4
 801024a:	6025      	str	r5, [r4, #0]
 801024c:	bf18      	it	ne
 801024e:	6059      	strne	r1, [r3, #4]
 8010250:	6863      	ldr	r3, [r4, #4]
 8010252:	bf08      	it	eq
 8010254:	f8c8 1000 	streq.w	r1, [r8]
 8010258:	5162      	str	r2, [r4, r5]
 801025a:	604b      	str	r3, [r1, #4]
 801025c:	4638      	mov	r0, r7
 801025e:	f104 060b 	add.w	r6, r4, #11
 8010262:	f000 f829 	bl	80102b8 <__malloc_unlock>
 8010266:	f026 0607 	bic.w	r6, r6, #7
 801026a:	1d23      	adds	r3, r4, #4
 801026c:	1af2      	subs	r2, r6, r3
 801026e:	d0ae      	beq.n	80101ce <_malloc_r+0x22>
 8010270:	1b9b      	subs	r3, r3, r6
 8010272:	50a3      	str	r3, [r4, r2]
 8010274:	e7ab      	b.n	80101ce <_malloc_r+0x22>
 8010276:	42a3      	cmp	r3, r4
 8010278:	6862      	ldr	r2, [r4, #4]
 801027a:	d1dd      	bne.n	8010238 <_malloc_r+0x8c>
 801027c:	f8c8 2000 	str.w	r2, [r8]
 8010280:	e7ec      	b.n	801025c <_malloc_r+0xb0>
 8010282:	4623      	mov	r3, r4
 8010284:	6864      	ldr	r4, [r4, #4]
 8010286:	e7ac      	b.n	80101e2 <_malloc_r+0x36>
 8010288:	4634      	mov	r4, r6
 801028a:	6876      	ldr	r6, [r6, #4]
 801028c:	e7b4      	b.n	80101f8 <_malloc_r+0x4c>
 801028e:	4613      	mov	r3, r2
 8010290:	e7cc      	b.n	801022c <_malloc_r+0x80>
 8010292:	230c      	movs	r3, #12
 8010294:	603b      	str	r3, [r7, #0]
 8010296:	4638      	mov	r0, r7
 8010298:	f000 f80e 	bl	80102b8 <__malloc_unlock>
 801029c:	e797      	b.n	80101ce <_malloc_r+0x22>
 801029e:	6025      	str	r5, [r4, #0]
 80102a0:	e7dc      	b.n	801025c <_malloc_r+0xb0>
 80102a2:	605b      	str	r3, [r3, #4]
 80102a4:	deff      	udf	#255	; 0xff
 80102a6:	bf00      	nop
 80102a8:	200032fc 	.word	0x200032fc

080102ac <__malloc_lock>:
 80102ac:	4801      	ldr	r0, [pc, #4]	; (80102b4 <__malloc_lock+0x8>)
 80102ae:	f001 b910 	b.w	80114d2 <__retarget_lock_acquire_recursive>
 80102b2:	bf00      	nop
 80102b4:	20003444 	.word	0x20003444

080102b8 <__malloc_unlock>:
 80102b8:	4801      	ldr	r0, [pc, #4]	; (80102c0 <__malloc_unlock+0x8>)
 80102ba:	f001 b90b 	b.w	80114d4 <__retarget_lock_release_recursive>
 80102be:	bf00      	nop
 80102c0:	20003444 	.word	0x20003444

080102c4 <realloc>:
 80102c4:	4b02      	ldr	r3, [pc, #8]	; (80102d0 <realloc+0xc>)
 80102c6:	460a      	mov	r2, r1
 80102c8:	4601      	mov	r1, r0
 80102ca:	6818      	ldr	r0, [r3, #0]
 80102cc:	f000 b802 	b.w	80102d4 <_realloc_r>
 80102d0:	20000228 	.word	0x20000228

080102d4 <_realloc_r>:
 80102d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d8:	4680      	mov	r8, r0
 80102da:	4614      	mov	r4, r2
 80102dc:	460e      	mov	r6, r1
 80102de:	b921      	cbnz	r1, 80102ea <_realloc_r+0x16>
 80102e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102e4:	4611      	mov	r1, r2
 80102e6:	f7ff bf61 	b.w	80101ac <_malloc_r>
 80102ea:	b92a      	cbnz	r2, 80102f8 <_realloc_r+0x24>
 80102ec:	f001 f90c 	bl	8011508 <_free_r>
 80102f0:	4625      	mov	r5, r4
 80102f2:	4628      	mov	r0, r5
 80102f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102f8:	f002 f969 	bl	80125ce <_malloc_usable_size_r>
 80102fc:	4284      	cmp	r4, r0
 80102fe:	4607      	mov	r7, r0
 8010300:	d802      	bhi.n	8010308 <_realloc_r+0x34>
 8010302:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010306:	d812      	bhi.n	801032e <_realloc_r+0x5a>
 8010308:	4621      	mov	r1, r4
 801030a:	4640      	mov	r0, r8
 801030c:	f7ff ff4e 	bl	80101ac <_malloc_r>
 8010310:	4605      	mov	r5, r0
 8010312:	2800      	cmp	r0, #0
 8010314:	d0ed      	beq.n	80102f2 <_realloc_r+0x1e>
 8010316:	42bc      	cmp	r4, r7
 8010318:	4622      	mov	r2, r4
 801031a:	4631      	mov	r1, r6
 801031c:	bf28      	it	cs
 801031e:	463a      	movcs	r2, r7
 8010320:	f001 f8d9 	bl	80114d6 <memcpy>
 8010324:	4631      	mov	r1, r6
 8010326:	4640      	mov	r0, r8
 8010328:	f001 f8ee 	bl	8011508 <_free_r>
 801032c:	e7e1      	b.n	80102f2 <_realloc_r+0x1e>
 801032e:	4635      	mov	r5, r6
 8010330:	e7df      	b.n	80102f2 <_realloc_r+0x1e>

08010332 <sulp>:
 8010332:	b570      	push	{r4, r5, r6, lr}
 8010334:	4604      	mov	r4, r0
 8010336:	460d      	mov	r5, r1
 8010338:	ec45 4b10 	vmov	d0, r4, r5
 801033c:	4616      	mov	r6, r2
 801033e:	f002 f805 	bl	801234c <__ulp>
 8010342:	ec51 0b10 	vmov	r0, r1, d0
 8010346:	b17e      	cbz	r6, 8010368 <sulp+0x36>
 8010348:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801034c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010350:	2b00      	cmp	r3, #0
 8010352:	dd09      	ble.n	8010368 <sulp+0x36>
 8010354:	051b      	lsls	r3, r3, #20
 8010356:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801035a:	2400      	movs	r4, #0
 801035c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010360:	4622      	mov	r2, r4
 8010362:	462b      	mov	r3, r5
 8010364:	f7f0 f958 	bl	8000618 <__aeabi_dmul>
 8010368:	bd70      	pop	{r4, r5, r6, pc}
 801036a:	0000      	movs	r0, r0
 801036c:	0000      	movs	r0, r0
	...

08010370 <_strtod_l>:
 8010370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010374:	ed2d 8b02 	vpush	{d8}
 8010378:	b09b      	sub	sp, #108	; 0x6c
 801037a:	4604      	mov	r4, r0
 801037c:	9213      	str	r2, [sp, #76]	; 0x4c
 801037e:	2200      	movs	r2, #0
 8010380:	9216      	str	r2, [sp, #88]	; 0x58
 8010382:	460d      	mov	r5, r1
 8010384:	f04f 0800 	mov.w	r8, #0
 8010388:	f04f 0900 	mov.w	r9, #0
 801038c:	460a      	mov	r2, r1
 801038e:	9215      	str	r2, [sp, #84]	; 0x54
 8010390:	7811      	ldrb	r1, [r2, #0]
 8010392:	292b      	cmp	r1, #43	; 0x2b
 8010394:	d04c      	beq.n	8010430 <_strtod_l+0xc0>
 8010396:	d83a      	bhi.n	801040e <_strtod_l+0x9e>
 8010398:	290d      	cmp	r1, #13
 801039a:	d834      	bhi.n	8010406 <_strtod_l+0x96>
 801039c:	2908      	cmp	r1, #8
 801039e:	d834      	bhi.n	801040a <_strtod_l+0x9a>
 80103a0:	2900      	cmp	r1, #0
 80103a2:	d03d      	beq.n	8010420 <_strtod_l+0xb0>
 80103a4:	2200      	movs	r2, #0
 80103a6:	920a      	str	r2, [sp, #40]	; 0x28
 80103a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80103aa:	7832      	ldrb	r2, [r6, #0]
 80103ac:	2a30      	cmp	r2, #48	; 0x30
 80103ae:	f040 80b4 	bne.w	801051a <_strtod_l+0x1aa>
 80103b2:	7872      	ldrb	r2, [r6, #1]
 80103b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80103b8:	2a58      	cmp	r2, #88	; 0x58
 80103ba:	d170      	bne.n	801049e <_strtod_l+0x12e>
 80103bc:	9302      	str	r3, [sp, #8]
 80103be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103c0:	9301      	str	r3, [sp, #4]
 80103c2:	ab16      	add	r3, sp, #88	; 0x58
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	4a8e      	ldr	r2, [pc, #568]	; (8010600 <_strtod_l+0x290>)
 80103c8:	ab17      	add	r3, sp, #92	; 0x5c
 80103ca:	a915      	add	r1, sp, #84	; 0x54
 80103cc:	4620      	mov	r0, r4
 80103ce:	f001 f94f 	bl	8011670 <__gethex>
 80103d2:	f010 070f 	ands.w	r7, r0, #15
 80103d6:	4605      	mov	r5, r0
 80103d8:	d005      	beq.n	80103e6 <_strtod_l+0x76>
 80103da:	2f06      	cmp	r7, #6
 80103dc:	d12a      	bne.n	8010434 <_strtod_l+0xc4>
 80103de:	3601      	adds	r6, #1
 80103e0:	2300      	movs	r3, #0
 80103e2:	9615      	str	r6, [sp, #84]	; 0x54
 80103e4:	930a      	str	r3, [sp, #40]	; 0x28
 80103e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	f040 857f 	bne.w	8010eec <_strtod_l+0xb7c>
 80103ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103f0:	b1db      	cbz	r3, 801042a <_strtod_l+0xba>
 80103f2:	4642      	mov	r2, r8
 80103f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80103f8:	ec43 2b10 	vmov	d0, r2, r3
 80103fc:	b01b      	add	sp, #108	; 0x6c
 80103fe:	ecbd 8b02 	vpop	{d8}
 8010402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010406:	2920      	cmp	r1, #32
 8010408:	d1cc      	bne.n	80103a4 <_strtod_l+0x34>
 801040a:	3201      	adds	r2, #1
 801040c:	e7bf      	b.n	801038e <_strtod_l+0x1e>
 801040e:	292d      	cmp	r1, #45	; 0x2d
 8010410:	d1c8      	bne.n	80103a4 <_strtod_l+0x34>
 8010412:	2101      	movs	r1, #1
 8010414:	910a      	str	r1, [sp, #40]	; 0x28
 8010416:	1c51      	adds	r1, r2, #1
 8010418:	9115      	str	r1, [sp, #84]	; 0x54
 801041a:	7852      	ldrb	r2, [r2, #1]
 801041c:	2a00      	cmp	r2, #0
 801041e:	d1c3      	bne.n	80103a8 <_strtod_l+0x38>
 8010420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010422:	9515      	str	r5, [sp, #84]	; 0x54
 8010424:	2b00      	cmp	r3, #0
 8010426:	f040 855f 	bne.w	8010ee8 <_strtod_l+0xb78>
 801042a:	4642      	mov	r2, r8
 801042c:	464b      	mov	r3, r9
 801042e:	e7e3      	b.n	80103f8 <_strtod_l+0x88>
 8010430:	2100      	movs	r1, #0
 8010432:	e7ef      	b.n	8010414 <_strtod_l+0xa4>
 8010434:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010436:	b13a      	cbz	r2, 8010448 <_strtod_l+0xd8>
 8010438:	2135      	movs	r1, #53	; 0x35
 801043a:	a818      	add	r0, sp, #96	; 0x60
 801043c:	f002 f883 	bl	8012546 <__copybits>
 8010440:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010442:	4620      	mov	r0, r4
 8010444:	f001 fc56 	bl	8011cf4 <_Bfree>
 8010448:	3f01      	subs	r7, #1
 801044a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801044c:	2f04      	cmp	r7, #4
 801044e:	d806      	bhi.n	801045e <_strtod_l+0xee>
 8010450:	e8df f007 	tbb	[pc, r7]
 8010454:	201d0314 	.word	0x201d0314
 8010458:	14          	.byte	0x14
 8010459:	00          	.byte	0x00
 801045a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801045e:	05e9      	lsls	r1, r5, #23
 8010460:	bf48      	it	mi
 8010462:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010466:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801046a:	0d1b      	lsrs	r3, r3, #20
 801046c:	051b      	lsls	r3, r3, #20
 801046e:	2b00      	cmp	r3, #0
 8010470:	d1b9      	bne.n	80103e6 <_strtod_l+0x76>
 8010472:	f001 f803 	bl	801147c <__errno>
 8010476:	2322      	movs	r3, #34	; 0x22
 8010478:	6003      	str	r3, [r0, #0]
 801047a:	e7b4      	b.n	80103e6 <_strtod_l+0x76>
 801047c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010480:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010484:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010488:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801048c:	e7e7      	b.n	801045e <_strtod_l+0xee>
 801048e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010608 <_strtod_l+0x298>
 8010492:	e7e4      	b.n	801045e <_strtod_l+0xee>
 8010494:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010498:	f04f 38ff 	mov.w	r8, #4294967295
 801049c:	e7df      	b.n	801045e <_strtod_l+0xee>
 801049e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104a0:	1c5a      	adds	r2, r3, #1
 80104a2:	9215      	str	r2, [sp, #84]	; 0x54
 80104a4:	785b      	ldrb	r3, [r3, #1]
 80104a6:	2b30      	cmp	r3, #48	; 0x30
 80104a8:	d0f9      	beq.n	801049e <_strtod_l+0x12e>
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d09b      	beq.n	80103e6 <_strtod_l+0x76>
 80104ae:	2301      	movs	r3, #1
 80104b0:	f04f 0a00 	mov.w	sl, #0
 80104b4:	9304      	str	r3, [sp, #16]
 80104b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80104ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80104be:	46d3      	mov	fp, sl
 80104c0:	220a      	movs	r2, #10
 80104c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80104c4:	7806      	ldrb	r6, [r0, #0]
 80104c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80104ca:	b2d9      	uxtb	r1, r3
 80104cc:	2909      	cmp	r1, #9
 80104ce:	d926      	bls.n	801051e <_strtod_l+0x1ae>
 80104d0:	494c      	ldr	r1, [pc, #304]	; (8010604 <_strtod_l+0x294>)
 80104d2:	2201      	movs	r2, #1
 80104d4:	f000 ff25 	bl	8011322 <strncmp>
 80104d8:	2800      	cmp	r0, #0
 80104da:	d030      	beq.n	801053e <_strtod_l+0x1ce>
 80104dc:	2000      	movs	r0, #0
 80104de:	4632      	mov	r2, r6
 80104e0:	9005      	str	r0, [sp, #20]
 80104e2:	465e      	mov	r6, fp
 80104e4:	4603      	mov	r3, r0
 80104e6:	2a65      	cmp	r2, #101	; 0x65
 80104e8:	d001      	beq.n	80104ee <_strtod_l+0x17e>
 80104ea:	2a45      	cmp	r2, #69	; 0x45
 80104ec:	d113      	bne.n	8010516 <_strtod_l+0x1a6>
 80104ee:	b91e      	cbnz	r6, 80104f8 <_strtod_l+0x188>
 80104f0:	9a04      	ldr	r2, [sp, #16]
 80104f2:	4302      	orrs	r2, r0
 80104f4:	d094      	beq.n	8010420 <_strtod_l+0xb0>
 80104f6:	2600      	movs	r6, #0
 80104f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80104fa:	1c6a      	adds	r2, r5, #1
 80104fc:	9215      	str	r2, [sp, #84]	; 0x54
 80104fe:	786a      	ldrb	r2, [r5, #1]
 8010500:	2a2b      	cmp	r2, #43	; 0x2b
 8010502:	d074      	beq.n	80105ee <_strtod_l+0x27e>
 8010504:	2a2d      	cmp	r2, #45	; 0x2d
 8010506:	d078      	beq.n	80105fa <_strtod_l+0x28a>
 8010508:	f04f 0c00 	mov.w	ip, #0
 801050c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010510:	2909      	cmp	r1, #9
 8010512:	d97f      	bls.n	8010614 <_strtod_l+0x2a4>
 8010514:	9515      	str	r5, [sp, #84]	; 0x54
 8010516:	2700      	movs	r7, #0
 8010518:	e09e      	b.n	8010658 <_strtod_l+0x2e8>
 801051a:	2300      	movs	r3, #0
 801051c:	e7c8      	b.n	80104b0 <_strtod_l+0x140>
 801051e:	f1bb 0f08 	cmp.w	fp, #8
 8010522:	bfd8      	it	le
 8010524:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010526:	f100 0001 	add.w	r0, r0, #1
 801052a:	bfda      	itte	le
 801052c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010530:	9309      	strle	r3, [sp, #36]	; 0x24
 8010532:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010536:	f10b 0b01 	add.w	fp, fp, #1
 801053a:	9015      	str	r0, [sp, #84]	; 0x54
 801053c:	e7c1      	b.n	80104c2 <_strtod_l+0x152>
 801053e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010540:	1c5a      	adds	r2, r3, #1
 8010542:	9215      	str	r2, [sp, #84]	; 0x54
 8010544:	785a      	ldrb	r2, [r3, #1]
 8010546:	f1bb 0f00 	cmp.w	fp, #0
 801054a:	d037      	beq.n	80105bc <_strtod_l+0x24c>
 801054c:	9005      	str	r0, [sp, #20]
 801054e:	465e      	mov	r6, fp
 8010550:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010554:	2b09      	cmp	r3, #9
 8010556:	d912      	bls.n	801057e <_strtod_l+0x20e>
 8010558:	2301      	movs	r3, #1
 801055a:	e7c4      	b.n	80104e6 <_strtod_l+0x176>
 801055c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801055e:	1c5a      	adds	r2, r3, #1
 8010560:	9215      	str	r2, [sp, #84]	; 0x54
 8010562:	785a      	ldrb	r2, [r3, #1]
 8010564:	3001      	adds	r0, #1
 8010566:	2a30      	cmp	r2, #48	; 0x30
 8010568:	d0f8      	beq.n	801055c <_strtod_l+0x1ec>
 801056a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801056e:	2b08      	cmp	r3, #8
 8010570:	f200 84c1 	bhi.w	8010ef6 <_strtod_l+0xb86>
 8010574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010576:	9005      	str	r0, [sp, #20]
 8010578:	2000      	movs	r0, #0
 801057a:	930b      	str	r3, [sp, #44]	; 0x2c
 801057c:	4606      	mov	r6, r0
 801057e:	3a30      	subs	r2, #48	; 0x30
 8010580:	f100 0301 	add.w	r3, r0, #1
 8010584:	d014      	beq.n	80105b0 <_strtod_l+0x240>
 8010586:	9905      	ldr	r1, [sp, #20]
 8010588:	4419      	add	r1, r3
 801058a:	9105      	str	r1, [sp, #20]
 801058c:	4633      	mov	r3, r6
 801058e:	eb00 0c06 	add.w	ip, r0, r6
 8010592:	210a      	movs	r1, #10
 8010594:	4563      	cmp	r3, ip
 8010596:	d113      	bne.n	80105c0 <_strtod_l+0x250>
 8010598:	1833      	adds	r3, r6, r0
 801059a:	2b08      	cmp	r3, #8
 801059c:	f106 0601 	add.w	r6, r6, #1
 80105a0:	4406      	add	r6, r0
 80105a2:	dc1a      	bgt.n	80105da <_strtod_l+0x26a>
 80105a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105a6:	230a      	movs	r3, #10
 80105a8:	fb03 2301 	mla	r3, r3, r1, r2
 80105ac:	9309      	str	r3, [sp, #36]	; 0x24
 80105ae:	2300      	movs	r3, #0
 80105b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80105b2:	1c51      	adds	r1, r2, #1
 80105b4:	9115      	str	r1, [sp, #84]	; 0x54
 80105b6:	7852      	ldrb	r2, [r2, #1]
 80105b8:	4618      	mov	r0, r3
 80105ba:	e7c9      	b.n	8010550 <_strtod_l+0x1e0>
 80105bc:	4658      	mov	r0, fp
 80105be:	e7d2      	b.n	8010566 <_strtod_l+0x1f6>
 80105c0:	2b08      	cmp	r3, #8
 80105c2:	f103 0301 	add.w	r3, r3, #1
 80105c6:	dc03      	bgt.n	80105d0 <_strtod_l+0x260>
 80105c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80105ca:	434f      	muls	r7, r1
 80105cc:	9709      	str	r7, [sp, #36]	; 0x24
 80105ce:	e7e1      	b.n	8010594 <_strtod_l+0x224>
 80105d0:	2b10      	cmp	r3, #16
 80105d2:	bfd8      	it	le
 80105d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80105d8:	e7dc      	b.n	8010594 <_strtod_l+0x224>
 80105da:	2e10      	cmp	r6, #16
 80105dc:	bfdc      	itt	le
 80105de:	230a      	movle	r3, #10
 80105e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80105e4:	e7e3      	b.n	80105ae <_strtod_l+0x23e>
 80105e6:	2300      	movs	r3, #0
 80105e8:	9305      	str	r3, [sp, #20]
 80105ea:	2301      	movs	r3, #1
 80105ec:	e780      	b.n	80104f0 <_strtod_l+0x180>
 80105ee:	f04f 0c00 	mov.w	ip, #0
 80105f2:	1caa      	adds	r2, r5, #2
 80105f4:	9215      	str	r2, [sp, #84]	; 0x54
 80105f6:	78aa      	ldrb	r2, [r5, #2]
 80105f8:	e788      	b.n	801050c <_strtod_l+0x19c>
 80105fa:	f04f 0c01 	mov.w	ip, #1
 80105fe:	e7f8      	b.n	80105f2 <_strtod_l+0x282>
 8010600:	080144e4 	.word	0x080144e4
 8010604:	080144d4 	.word	0x080144d4
 8010608:	7ff00000 	.word	0x7ff00000
 801060c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801060e:	1c51      	adds	r1, r2, #1
 8010610:	9115      	str	r1, [sp, #84]	; 0x54
 8010612:	7852      	ldrb	r2, [r2, #1]
 8010614:	2a30      	cmp	r2, #48	; 0x30
 8010616:	d0f9      	beq.n	801060c <_strtod_l+0x29c>
 8010618:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801061c:	2908      	cmp	r1, #8
 801061e:	f63f af7a 	bhi.w	8010516 <_strtod_l+0x1a6>
 8010622:	3a30      	subs	r2, #48	; 0x30
 8010624:	9208      	str	r2, [sp, #32]
 8010626:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010628:	920c      	str	r2, [sp, #48]	; 0x30
 801062a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801062c:	1c57      	adds	r7, r2, #1
 801062e:	9715      	str	r7, [sp, #84]	; 0x54
 8010630:	7852      	ldrb	r2, [r2, #1]
 8010632:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010636:	f1be 0f09 	cmp.w	lr, #9
 801063a:	d938      	bls.n	80106ae <_strtod_l+0x33e>
 801063c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801063e:	1a7f      	subs	r7, r7, r1
 8010640:	2f08      	cmp	r7, #8
 8010642:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010646:	dc03      	bgt.n	8010650 <_strtod_l+0x2e0>
 8010648:	9908      	ldr	r1, [sp, #32]
 801064a:	428f      	cmp	r7, r1
 801064c:	bfa8      	it	ge
 801064e:	460f      	movge	r7, r1
 8010650:	f1bc 0f00 	cmp.w	ip, #0
 8010654:	d000      	beq.n	8010658 <_strtod_l+0x2e8>
 8010656:	427f      	negs	r7, r7
 8010658:	2e00      	cmp	r6, #0
 801065a:	d14f      	bne.n	80106fc <_strtod_l+0x38c>
 801065c:	9904      	ldr	r1, [sp, #16]
 801065e:	4301      	orrs	r1, r0
 8010660:	f47f aec1 	bne.w	80103e6 <_strtod_l+0x76>
 8010664:	2b00      	cmp	r3, #0
 8010666:	f47f aedb 	bne.w	8010420 <_strtod_l+0xb0>
 801066a:	2a69      	cmp	r2, #105	; 0x69
 801066c:	d029      	beq.n	80106c2 <_strtod_l+0x352>
 801066e:	dc26      	bgt.n	80106be <_strtod_l+0x34e>
 8010670:	2a49      	cmp	r2, #73	; 0x49
 8010672:	d026      	beq.n	80106c2 <_strtod_l+0x352>
 8010674:	2a4e      	cmp	r2, #78	; 0x4e
 8010676:	f47f aed3 	bne.w	8010420 <_strtod_l+0xb0>
 801067a:	499b      	ldr	r1, [pc, #620]	; (80108e8 <_strtod_l+0x578>)
 801067c:	a815      	add	r0, sp, #84	; 0x54
 801067e:	f001 fa37 	bl	8011af0 <__match>
 8010682:	2800      	cmp	r0, #0
 8010684:	f43f aecc 	beq.w	8010420 <_strtod_l+0xb0>
 8010688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	2b28      	cmp	r3, #40	; 0x28
 801068e:	d12f      	bne.n	80106f0 <_strtod_l+0x380>
 8010690:	4996      	ldr	r1, [pc, #600]	; (80108ec <_strtod_l+0x57c>)
 8010692:	aa18      	add	r2, sp, #96	; 0x60
 8010694:	a815      	add	r0, sp, #84	; 0x54
 8010696:	f001 fa3f 	bl	8011b18 <__hexnan>
 801069a:	2805      	cmp	r0, #5
 801069c:	d128      	bne.n	80106f0 <_strtod_l+0x380>
 801069e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80106a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80106a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80106a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80106ac:	e69b      	b.n	80103e6 <_strtod_l+0x76>
 80106ae:	9f08      	ldr	r7, [sp, #32]
 80106b0:	210a      	movs	r1, #10
 80106b2:	fb01 2107 	mla	r1, r1, r7, r2
 80106b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80106ba:	9208      	str	r2, [sp, #32]
 80106bc:	e7b5      	b.n	801062a <_strtod_l+0x2ba>
 80106be:	2a6e      	cmp	r2, #110	; 0x6e
 80106c0:	e7d9      	b.n	8010676 <_strtod_l+0x306>
 80106c2:	498b      	ldr	r1, [pc, #556]	; (80108f0 <_strtod_l+0x580>)
 80106c4:	a815      	add	r0, sp, #84	; 0x54
 80106c6:	f001 fa13 	bl	8011af0 <__match>
 80106ca:	2800      	cmp	r0, #0
 80106cc:	f43f aea8 	beq.w	8010420 <_strtod_l+0xb0>
 80106d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106d2:	4988      	ldr	r1, [pc, #544]	; (80108f4 <_strtod_l+0x584>)
 80106d4:	3b01      	subs	r3, #1
 80106d6:	a815      	add	r0, sp, #84	; 0x54
 80106d8:	9315      	str	r3, [sp, #84]	; 0x54
 80106da:	f001 fa09 	bl	8011af0 <__match>
 80106de:	b910      	cbnz	r0, 80106e6 <_strtod_l+0x376>
 80106e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106e2:	3301      	adds	r3, #1
 80106e4:	9315      	str	r3, [sp, #84]	; 0x54
 80106e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010904 <_strtod_l+0x594>
 80106ea:	f04f 0800 	mov.w	r8, #0
 80106ee:	e67a      	b.n	80103e6 <_strtod_l+0x76>
 80106f0:	4881      	ldr	r0, [pc, #516]	; (80108f8 <_strtod_l+0x588>)
 80106f2:	f000 ff01 	bl	80114f8 <nan>
 80106f6:	ec59 8b10 	vmov	r8, r9, d0
 80106fa:	e674      	b.n	80103e6 <_strtod_l+0x76>
 80106fc:	9b05      	ldr	r3, [sp, #20]
 80106fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010700:	1afb      	subs	r3, r7, r3
 8010702:	f1bb 0f00 	cmp.w	fp, #0
 8010706:	bf08      	it	eq
 8010708:	46b3      	moveq	fp, r6
 801070a:	2e10      	cmp	r6, #16
 801070c:	9308      	str	r3, [sp, #32]
 801070e:	4635      	mov	r5, r6
 8010710:	bfa8      	it	ge
 8010712:	2510      	movge	r5, #16
 8010714:	f7ef ff06 	bl	8000524 <__aeabi_ui2d>
 8010718:	2e09      	cmp	r6, #9
 801071a:	4680      	mov	r8, r0
 801071c:	4689      	mov	r9, r1
 801071e:	dd13      	ble.n	8010748 <_strtod_l+0x3d8>
 8010720:	4b76      	ldr	r3, [pc, #472]	; (80108fc <_strtod_l+0x58c>)
 8010722:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010726:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801072a:	f7ef ff75 	bl	8000618 <__aeabi_dmul>
 801072e:	4680      	mov	r8, r0
 8010730:	4650      	mov	r0, sl
 8010732:	4689      	mov	r9, r1
 8010734:	f7ef fef6 	bl	8000524 <__aeabi_ui2d>
 8010738:	4602      	mov	r2, r0
 801073a:	460b      	mov	r3, r1
 801073c:	4640      	mov	r0, r8
 801073e:	4649      	mov	r1, r9
 8010740:	f7ef fdb4 	bl	80002ac <__adddf3>
 8010744:	4680      	mov	r8, r0
 8010746:	4689      	mov	r9, r1
 8010748:	2e0f      	cmp	r6, #15
 801074a:	dc38      	bgt.n	80107be <_strtod_l+0x44e>
 801074c:	9b08      	ldr	r3, [sp, #32]
 801074e:	2b00      	cmp	r3, #0
 8010750:	f43f ae49 	beq.w	80103e6 <_strtod_l+0x76>
 8010754:	dd24      	ble.n	80107a0 <_strtod_l+0x430>
 8010756:	2b16      	cmp	r3, #22
 8010758:	dc0b      	bgt.n	8010772 <_strtod_l+0x402>
 801075a:	4968      	ldr	r1, [pc, #416]	; (80108fc <_strtod_l+0x58c>)
 801075c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010764:	4642      	mov	r2, r8
 8010766:	464b      	mov	r3, r9
 8010768:	f7ef ff56 	bl	8000618 <__aeabi_dmul>
 801076c:	4680      	mov	r8, r0
 801076e:	4689      	mov	r9, r1
 8010770:	e639      	b.n	80103e6 <_strtod_l+0x76>
 8010772:	9a08      	ldr	r2, [sp, #32]
 8010774:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010778:	4293      	cmp	r3, r2
 801077a:	db20      	blt.n	80107be <_strtod_l+0x44e>
 801077c:	4c5f      	ldr	r4, [pc, #380]	; (80108fc <_strtod_l+0x58c>)
 801077e:	f1c6 060f 	rsb	r6, r6, #15
 8010782:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8010786:	4642      	mov	r2, r8
 8010788:	464b      	mov	r3, r9
 801078a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801078e:	f7ef ff43 	bl	8000618 <__aeabi_dmul>
 8010792:	9b08      	ldr	r3, [sp, #32]
 8010794:	1b9e      	subs	r6, r3, r6
 8010796:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801079a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801079e:	e7e3      	b.n	8010768 <_strtod_l+0x3f8>
 80107a0:	9b08      	ldr	r3, [sp, #32]
 80107a2:	3316      	adds	r3, #22
 80107a4:	db0b      	blt.n	80107be <_strtod_l+0x44e>
 80107a6:	9b05      	ldr	r3, [sp, #20]
 80107a8:	1bdf      	subs	r7, r3, r7
 80107aa:	4b54      	ldr	r3, [pc, #336]	; (80108fc <_strtod_l+0x58c>)
 80107ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80107b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107b4:	4640      	mov	r0, r8
 80107b6:	4649      	mov	r1, r9
 80107b8:	f7f0 f858 	bl	800086c <__aeabi_ddiv>
 80107bc:	e7d6      	b.n	801076c <_strtod_l+0x3fc>
 80107be:	9b08      	ldr	r3, [sp, #32]
 80107c0:	1b75      	subs	r5, r6, r5
 80107c2:	441d      	add	r5, r3
 80107c4:	2d00      	cmp	r5, #0
 80107c6:	dd70      	ble.n	80108aa <_strtod_l+0x53a>
 80107c8:	f015 030f 	ands.w	r3, r5, #15
 80107cc:	d00a      	beq.n	80107e4 <_strtod_l+0x474>
 80107ce:	494b      	ldr	r1, [pc, #300]	; (80108fc <_strtod_l+0x58c>)
 80107d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80107d4:	4642      	mov	r2, r8
 80107d6:	464b      	mov	r3, r9
 80107d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107dc:	f7ef ff1c 	bl	8000618 <__aeabi_dmul>
 80107e0:	4680      	mov	r8, r0
 80107e2:	4689      	mov	r9, r1
 80107e4:	f035 050f 	bics.w	r5, r5, #15
 80107e8:	d04d      	beq.n	8010886 <_strtod_l+0x516>
 80107ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80107ee:	dd22      	ble.n	8010836 <_strtod_l+0x4c6>
 80107f0:	2500      	movs	r5, #0
 80107f2:	46ab      	mov	fp, r5
 80107f4:	9509      	str	r5, [sp, #36]	; 0x24
 80107f6:	9505      	str	r5, [sp, #20]
 80107f8:	2322      	movs	r3, #34	; 0x22
 80107fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010904 <_strtod_l+0x594>
 80107fe:	6023      	str	r3, [r4, #0]
 8010800:	f04f 0800 	mov.w	r8, #0
 8010804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010806:	2b00      	cmp	r3, #0
 8010808:	f43f aded 	beq.w	80103e6 <_strtod_l+0x76>
 801080c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801080e:	4620      	mov	r0, r4
 8010810:	f001 fa70 	bl	8011cf4 <_Bfree>
 8010814:	9905      	ldr	r1, [sp, #20]
 8010816:	4620      	mov	r0, r4
 8010818:	f001 fa6c 	bl	8011cf4 <_Bfree>
 801081c:	4659      	mov	r1, fp
 801081e:	4620      	mov	r0, r4
 8010820:	f001 fa68 	bl	8011cf4 <_Bfree>
 8010824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010826:	4620      	mov	r0, r4
 8010828:	f001 fa64 	bl	8011cf4 <_Bfree>
 801082c:	4629      	mov	r1, r5
 801082e:	4620      	mov	r0, r4
 8010830:	f001 fa60 	bl	8011cf4 <_Bfree>
 8010834:	e5d7      	b.n	80103e6 <_strtod_l+0x76>
 8010836:	4b32      	ldr	r3, [pc, #200]	; (8010900 <_strtod_l+0x590>)
 8010838:	9304      	str	r3, [sp, #16]
 801083a:	2300      	movs	r3, #0
 801083c:	112d      	asrs	r5, r5, #4
 801083e:	4640      	mov	r0, r8
 8010840:	4649      	mov	r1, r9
 8010842:	469a      	mov	sl, r3
 8010844:	2d01      	cmp	r5, #1
 8010846:	dc21      	bgt.n	801088c <_strtod_l+0x51c>
 8010848:	b10b      	cbz	r3, 801084e <_strtod_l+0x4de>
 801084a:	4680      	mov	r8, r0
 801084c:	4689      	mov	r9, r1
 801084e:	492c      	ldr	r1, [pc, #176]	; (8010900 <_strtod_l+0x590>)
 8010850:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010854:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010858:	4642      	mov	r2, r8
 801085a:	464b      	mov	r3, r9
 801085c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010860:	f7ef feda 	bl	8000618 <__aeabi_dmul>
 8010864:	4b27      	ldr	r3, [pc, #156]	; (8010904 <_strtod_l+0x594>)
 8010866:	460a      	mov	r2, r1
 8010868:	400b      	ands	r3, r1
 801086a:	4927      	ldr	r1, [pc, #156]	; (8010908 <_strtod_l+0x598>)
 801086c:	428b      	cmp	r3, r1
 801086e:	4680      	mov	r8, r0
 8010870:	d8be      	bhi.n	80107f0 <_strtod_l+0x480>
 8010872:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010876:	428b      	cmp	r3, r1
 8010878:	bf86      	itte	hi
 801087a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801090c <_strtod_l+0x59c>
 801087e:	f04f 38ff 	movhi.w	r8, #4294967295
 8010882:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010886:	2300      	movs	r3, #0
 8010888:	9304      	str	r3, [sp, #16]
 801088a:	e07b      	b.n	8010984 <_strtod_l+0x614>
 801088c:	07ea      	lsls	r2, r5, #31
 801088e:	d505      	bpl.n	801089c <_strtod_l+0x52c>
 8010890:	9b04      	ldr	r3, [sp, #16]
 8010892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010896:	f7ef febf 	bl	8000618 <__aeabi_dmul>
 801089a:	2301      	movs	r3, #1
 801089c:	9a04      	ldr	r2, [sp, #16]
 801089e:	3208      	adds	r2, #8
 80108a0:	f10a 0a01 	add.w	sl, sl, #1
 80108a4:	106d      	asrs	r5, r5, #1
 80108a6:	9204      	str	r2, [sp, #16]
 80108a8:	e7cc      	b.n	8010844 <_strtod_l+0x4d4>
 80108aa:	d0ec      	beq.n	8010886 <_strtod_l+0x516>
 80108ac:	426d      	negs	r5, r5
 80108ae:	f015 020f 	ands.w	r2, r5, #15
 80108b2:	d00a      	beq.n	80108ca <_strtod_l+0x55a>
 80108b4:	4b11      	ldr	r3, [pc, #68]	; (80108fc <_strtod_l+0x58c>)
 80108b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108ba:	4640      	mov	r0, r8
 80108bc:	4649      	mov	r1, r9
 80108be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c2:	f7ef ffd3 	bl	800086c <__aeabi_ddiv>
 80108c6:	4680      	mov	r8, r0
 80108c8:	4689      	mov	r9, r1
 80108ca:	112d      	asrs	r5, r5, #4
 80108cc:	d0db      	beq.n	8010886 <_strtod_l+0x516>
 80108ce:	2d1f      	cmp	r5, #31
 80108d0:	dd1e      	ble.n	8010910 <_strtod_l+0x5a0>
 80108d2:	2500      	movs	r5, #0
 80108d4:	46ab      	mov	fp, r5
 80108d6:	9509      	str	r5, [sp, #36]	; 0x24
 80108d8:	9505      	str	r5, [sp, #20]
 80108da:	2322      	movs	r3, #34	; 0x22
 80108dc:	f04f 0800 	mov.w	r8, #0
 80108e0:	f04f 0900 	mov.w	r9, #0
 80108e4:	6023      	str	r3, [r4, #0]
 80108e6:	e78d      	b.n	8010804 <_strtod_l+0x494>
 80108e8:	080144df 	.word	0x080144df
 80108ec:	080144f8 	.word	0x080144f8
 80108f0:	080144d6 	.word	0x080144d6
 80108f4:	080144d9 	.word	0x080144d9
 80108f8:	080148ad 	.word	0x080148ad
 80108fc:	08014750 	.word	0x08014750
 8010900:	08014728 	.word	0x08014728
 8010904:	7ff00000 	.word	0x7ff00000
 8010908:	7ca00000 	.word	0x7ca00000
 801090c:	7fefffff 	.word	0x7fefffff
 8010910:	f015 0310 	ands.w	r3, r5, #16
 8010914:	bf18      	it	ne
 8010916:	236a      	movne	r3, #106	; 0x6a
 8010918:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8010cbc <_strtod_l+0x94c>
 801091c:	9304      	str	r3, [sp, #16]
 801091e:	4640      	mov	r0, r8
 8010920:	4649      	mov	r1, r9
 8010922:	2300      	movs	r3, #0
 8010924:	07ea      	lsls	r2, r5, #31
 8010926:	d504      	bpl.n	8010932 <_strtod_l+0x5c2>
 8010928:	e9da 2300 	ldrd	r2, r3, [sl]
 801092c:	f7ef fe74 	bl	8000618 <__aeabi_dmul>
 8010930:	2301      	movs	r3, #1
 8010932:	106d      	asrs	r5, r5, #1
 8010934:	f10a 0a08 	add.w	sl, sl, #8
 8010938:	d1f4      	bne.n	8010924 <_strtod_l+0x5b4>
 801093a:	b10b      	cbz	r3, 8010940 <_strtod_l+0x5d0>
 801093c:	4680      	mov	r8, r0
 801093e:	4689      	mov	r9, r1
 8010940:	9b04      	ldr	r3, [sp, #16]
 8010942:	b1bb      	cbz	r3, 8010974 <_strtod_l+0x604>
 8010944:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010948:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801094c:	2b00      	cmp	r3, #0
 801094e:	4649      	mov	r1, r9
 8010950:	dd10      	ble.n	8010974 <_strtod_l+0x604>
 8010952:	2b1f      	cmp	r3, #31
 8010954:	f340 811e 	ble.w	8010b94 <_strtod_l+0x824>
 8010958:	2b34      	cmp	r3, #52	; 0x34
 801095a:	bfde      	ittt	le
 801095c:	f04f 33ff 	movle.w	r3, #4294967295
 8010960:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010964:	4093      	lslle	r3, r2
 8010966:	f04f 0800 	mov.w	r8, #0
 801096a:	bfcc      	ite	gt
 801096c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010970:	ea03 0901 	andle.w	r9, r3, r1
 8010974:	2200      	movs	r2, #0
 8010976:	2300      	movs	r3, #0
 8010978:	4640      	mov	r0, r8
 801097a:	4649      	mov	r1, r9
 801097c:	f7f0 f8b4 	bl	8000ae8 <__aeabi_dcmpeq>
 8010980:	2800      	cmp	r0, #0
 8010982:	d1a6      	bne.n	80108d2 <_strtod_l+0x562>
 8010984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010986:	9300      	str	r3, [sp, #0]
 8010988:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801098a:	4633      	mov	r3, r6
 801098c:	465a      	mov	r2, fp
 801098e:	4620      	mov	r0, r4
 8010990:	f001 fa18 	bl	8011dc4 <__s2b>
 8010994:	9009      	str	r0, [sp, #36]	; 0x24
 8010996:	2800      	cmp	r0, #0
 8010998:	f43f af2a 	beq.w	80107f0 <_strtod_l+0x480>
 801099c:	9a08      	ldr	r2, [sp, #32]
 801099e:	9b05      	ldr	r3, [sp, #20]
 80109a0:	2a00      	cmp	r2, #0
 80109a2:	eba3 0307 	sub.w	r3, r3, r7
 80109a6:	bfa8      	it	ge
 80109a8:	2300      	movge	r3, #0
 80109aa:	930c      	str	r3, [sp, #48]	; 0x30
 80109ac:	2500      	movs	r5, #0
 80109ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80109b2:	9312      	str	r3, [sp, #72]	; 0x48
 80109b4:	46ab      	mov	fp, r5
 80109b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109b8:	4620      	mov	r0, r4
 80109ba:	6859      	ldr	r1, [r3, #4]
 80109bc:	f001 f95a 	bl	8011c74 <_Balloc>
 80109c0:	9005      	str	r0, [sp, #20]
 80109c2:	2800      	cmp	r0, #0
 80109c4:	f43f af18 	beq.w	80107f8 <_strtod_l+0x488>
 80109c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109ca:	691a      	ldr	r2, [r3, #16]
 80109cc:	3202      	adds	r2, #2
 80109ce:	f103 010c 	add.w	r1, r3, #12
 80109d2:	0092      	lsls	r2, r2, #2
 80109d4:	300c      	adds	r0, #12
 80109d6:	f000 fd7e 	bl	80114d6 <memcpy>
 80109da:	ec49 8b10 	vmov	d0, r8, r9
 80109de:	aa18      	add	r2, sp, #96	; 0x60
 80109e0:	a917      	add	r1, sp, #92	; 0x5c
 80109e2:	4620      	mov	r0, r4
 80109e4:	f001 fd22 	bl	801242c <__d2b>
 80109e8:	ec49 8b18 	vmov	d8, r8, r9
 80109ec:	9016      	str	r0, [sp, #88]	; 0x58
 80109ee:	2800      	cmp	r0, #0
 80109f0:	f43f af02 	beq.w	80107f8 <_strtod_l+0x488>
 80109f4:	2101      	movs	r1, #1
 80109f6:	4620      	mov	r0, r4
 80109f8:	f001 fa7c 	bl	8011ef4 <__i2b>
 80109fc:	4683      	mov	fp, r0
 80109fe:	2800      	cmp	r0, #0
 8010a00:	f43f aefa 	beq.w	80107f8 <_strtod_l+0x488>
 8010a04:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010a06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010a08:	2e00      	cmp	r6, #0
 8010a0a:	bfab      	itete	ge
 8010a0c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010a0e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010a10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010a12:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010a16:	bfac      	ite	ge
 8010a18:	eb06 0a03 	addge.w	sl, r6, r3
 8010a1c:	1b9f      	sublt	r7, r3, r6
 8010a1e:	9b04      	ldr	r3, [sp, #16]
 8010a20:	1af6      	subs	r6, r6, r3
 8010a22:	4416      	add	r6, r2
 8010a24:	4ba0      	ldr	r3, [pc, #640]	; (8010ca8 <_strtod_l+0x938>)
 8010a26:	3e01      	subs	r6, #1
 8010a28:	429e      	cmp	r6, r3
 8010a2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010a2e:	f280 80c4 	bge.w	8010bba <_strtod_l+0x84a>
 8010a32:	1b9b      	subs	r3, r3, r6
 8010a34:	2b1f      	cmp	r3, #31
 8010a36:	eba2 0203 	sub.w	r2, r2, r3
 8010a3a:	f04f 0101 	mov.w	r1, #1
 8010a3e:	f300 80b0 	bgt.w	8010ba2 <_strtod_l+0x832>
 8010a42:	fa01 f303 	lsl.w	r3, r1, r3
 8010a46:	930e      	str	r3, [sp, #56]	; 0x38
 8010a48:	2300      	movs	r3, #0
 8010a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8010a4c:	eb0a 0602 	add.w	r6, sl, r2
 8010a50:	9b04      	ldr	r3, [sp, #16]
 8010a52:	45b2      	cmp	sl, r6
 8010a54:	4417      	add	r7, r2
 8010a56:	441f      	add	r7, r3
 8010a58:	4653      	mov	r3, sl
 8010a5a:	bfa8      	it	ge
 8010a5c:	4633      	movge	r3, r6
 8010a5e:	42bb      	cmp	r3, r7
 8010a60:	bfa8      	it	ge
 8010a62:	463b      	movge	r3, r7
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	bfc2      	ittt	gt
 8010a68:	1af6      	subgt	r6, r6, r3
 8010a6a:	1aff      	subgt	r7, r7, r3
 8010a6c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	dd17      	ble.n	8010aa6 <_strtod_l+0x736>
 8010a76:	4659      	mov	r1, fp
 8010a78:	461a      	mov	r2, r3
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	f001 fafa 	bl	8012074 <__pow5mult>
 8010a80:	4683      	mov	fp, r0
 8010a82:	2800      	cmp	r0, #0
 8010a84:	f43f aeb8 	beq.w	80107f8 <_strtod_l+0x488>
 8010a88:	4601      	mov	r1, r0
 8010a8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	f001 fa47 	bl	8011f20 <__multiply>
 8010a92:	900b      	str	r0, [sp, #44]	; 0x2c
 8010a94:	2800      	cmp	r0, #0
 8010a96:	f43f aeaf 	beq.w	80107f8 <_strtod_l+0x488>
 8010a9a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	f001 f929 	bl	8011cf4 <_Bfree>
 8010aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010aa4:	9316      	str	r3, [sp, #88]	; 0x58
 8010aa6:	2e00      	cmp	r6, #0
 8010aa8:	f300 808c 	bgt.w	8010bc4 <_strtod_l+0x854>
 8010aac:	9b08      	ldr	r3, [sp, #32]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	dd08      	ble.n	8010ac4 <_strtod_l+0x754>
 8010ab2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ab4:	9905      	ldr	r1, [sp, #20]
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	f001 fadc 	bl	8012074 <__pow5mult>
 8010abc:	9005      	str	r0, [sp, #20]
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	f43f ae9a 	beq.w	80107f8 <_strtod_l+0x488>
 8010ac4:	2f00      	cmp	r7, #0
 8010ac6:	dd08      	ble.n	8010ada <_strtod_l+0x76a>
 8010ac8:	9905      	ldr	r1, [sp, #20]
 8010aca:	463a      	mov	r2, r7
 8010acc:	4620      	mov	r0, r4
 8010ace:	f001 fb2b 	bl	8012128 <__lshift>
 8010ad2:	9005      	str	r0, [sp, #20]
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	f43f ae8f 	beq.w	80107f8 <_strtod_l+0x488>
 8010ada:	f1ba 0f00 	cmp.w	sl, #0
 8010ade:	dd08      	ble.n	8010af2 <_strtod_l+0x782>
 8010ae0:	4659      	mov	r1, fp
 8010ae2:	4652      	mov	r2, sl
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f001 fb1f 	bl	8012128 <__lshift>
 8010aea:	4683      	mov	fp, r0
 8010aec:	2800      	cmp	r0, #0
 8010aee:	f43f ae83 	beq.w	80107f8 <_strtod_l+0x488>
 8010af2:	9a05      	ldr	r2, [sp, #20]
 8010af4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010af6:	4620      	mov	r0, r4
 8010af8:	f001 fb9e 	bl	8012238 <__mdiff>
 8010afc:	4605      	mov	r5, r0
 8010afe:	2800      	cmp	r0, #0
 8010b00:	f43f ae7a 	beq.w	80107f8 <_strtod_l+0x488>
 8010b04:	68c3      	ldr	r3, [r0, #12]
 8010b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b08:	2300      	movs	r3, #0
 8010b0a:	60c3      	str	r3, [r0, #12]
 8010b0c:	4659      	mov	r1, fp
 8010b0e:	f001 fb77 	bl	8012200 <__mcmp>
 8010b12:	2800      	cmp	r0, #0
 8010b14:	da60      	bge.n	8010bd8 <_strtod_l+0x868>
 8010b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b18:	ea53 0308 	orrs.w	r3, r3, r8
 8010b1c:	f040 8084 	bne.w	8010c28 <_strtod_l+0x8b8>
 8010b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d17f      	bne.n	8010c28 <_strtod_l+0x8b8>
 8010b28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010b2c:	0d1b      	lsrs	r3, r3, #20
 8010b2e:	051b      	lsls	r3, r3, #20
 8010b30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010b34:	d978      	bls.n	8010c28 <_strtod_l+0x8b8>
 8010b36:	696b      	ldr	r3, [r5, #20]
 8010b38:	b913      	cbnz	r3, 8010b40 <_strtod_l+0x7d0>
 8010b3a:	692b      	ldr	r3, [r5, #16]
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	dd73      	ble.n	8010c28 <_strtod_l+0x8b8>
 8010b40:	4629      	mov	r1, r5
 8010b42:	2201      	movs	r2, #1
 8010b44:	4620      	mov	r0, r4
 8010b46:	f001 faef 	bl	8012128 <__lshift>
 8010b4a:	4659      	mov	r1, fp
 8010b4c:	4605      	mov	r5, r0
 8010b4e:	f001 fb57 	bl	8012200 <__mcmp>
 8010b52:	2800      	cmp	r0, #0
 8010b54:	dd68      	ble.n	8010c28 <_strtod_l+0x8b8>
 8010b56:	9904      	ldr	r1, [sp, #16]
 8010b58:	4a54      	ldr	r2, [pc, #336]	; (8010cac <_strtod_l+0x93c>)
 8010b5a:	464b      	mov	r3, r9
 8010b5c:	2900      	cmp	r1, #0
 8010b5e:	f000 8084 	beq.w	8010c6a <_strtod_l+0x8fa>
 8010b62:	ea02 0109 	and.w	r1, r2, r9
 8010b66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010b6a:	dc7e      	bgt.n	8010c6a <_strtod_l+0x8fa>
 8010b6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010b70:	f77f aeb3 	ble.w	80108da <_strtod_l+0x56a>
 8010b74:	4b4e      	ldr	r3, [pc, #312]	; (8010cb0 <_strtod_l+0x940>)
 8010b76:	4640      	mov	r0, r8
 8010b78:	4649      	mov	r1, r9
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f7ef fd4c 	bl	8000618 <__aeabi_dmul>
 8010b80:	4b4a      	ldr	r3, [pc, #296]	; (8010cac <_strtod_l+0x93c>)
 8010b82:	400b      	ands	r3, r1
 8010b84:	4680      	mov	r8, r0
 8010b86:	4689      	mov	r9, r1
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f47f ae3f 	bne.w	801080c <_strtod_l+0x49c>
 8010b8e:	2322      	movs	r3, #34	; 0x22
 8010b90:	6023      	str	r3, [r4, #0]
 8010b92:	e63b      	b.n	801080c <_strtod_l+0x49c>
 8010b94:	f04f 32ff 	mov.w	r2, #4294967295
 8010b98:	fa02 f303 	lsl.w	r3, r2, r3
 8010b9c:	ea03 0808 	and.w	r8, r3, r8
 8010ba0:	e6e8      	b.n	8010974 <_strtod_l+0x604>
 8010ba2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010ba6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010baa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010bae:	36e2      	adds	r6, #226	; 0xe2
 8010bb0:	fa01 f306 	lsl.w	r3, r1, r6
 8010bb4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010bb8:	e748      	b.n	8010a4c <_strtod_l+0x6dc>
 8010bba:	2100      	movs	r1, #0
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010bc2:	e743      	b.n	8010a4c <_strtod_l+0x6dc>
 8010bc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010bc6:	4632      	mov	r2, r6
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f001 faad 	bl	8012128 <__lshift>
 8010bce:	9016      	str	r0, [sp, #88]	; 0x58
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	f47f af6b 	bne.w	8010aac <_strtod_l+0x73c>
 8010bd6:	e60f      	b.n	80107f8 <_strtod_l+0x488>
 8010bd8:	46ca      	mov	sl, r9
 8010bda:	d171      	bne.n	8010cc0 <_strtod_l+0x950>
 8010bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010bde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010be2:	b352      	cbz	r2, 8010c3a <_strtod_l+0x8ca>
 8010be4:	4a33      	ldr	r2, [pc, #204]	; (8010cb4 <_strtod_l+0x944>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d12a      	bne.n	8010c40 <_strtod_l+0x8d0>
 8010bea:	9b04      	ldr	r3, [sp, #16]
 8010bec:	4641      	mov	r1, r8
 8010bee:	b1fb      	cbz	r3, 8010c30 <_strtod_l+0x8c0>
 8010bf0:	4b2e      	ldr	r3, [pc, #184]	; (8010cac <_strtod_l+0x93c>)
 8010bf2:	ea09 0303 	and.w	r3, r9, r3
 8010bf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8010bfe:	d81a      	bhi.n	8010c36 <_strtod_l+0x8c6>
 8010c00:	0d1b      	lsrs	r3, r3, #20
 8010c02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010c06:	fa02 f303 	lsl.w	r3, r2, r3
 8010c0a:	4299      	cmp	r1, r3
 8010c0c:	d118      	bne.n	8010c40 <_strtod_l+0x8d0>
 8010c0e:	4b2a      	ldr	r3, [pc, #168]	; (8010cb8 <_strtod_l+0x948>)
 8010c10:	459a      	cmp	sl, r3
 8010c12:	d102      	bne.n	8010c1a <_strtod_l+0x8aa>
 8010c14:	3101      	adds	r1, #1
 8010c16:	f43f adef 	beq.w	80107f8 <_strtod_l+0x488>
 8010c1a:	4b24      	ldr	r3, [pc, #144]	; (8010cac <_strtod_l+0x93c>)
 8010c1c:	ea0a 0303 	and.w	r3, sl, r3
 8010c20:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010c24:	f04f 0800 	mov.w	r8, #0
 8010c28:	9b04      	ldr	r3, [sp, #16]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d1a2      	bne.n	8010b74 <_strtod_l+0x804>
 8010c2e:	e5ed      	b.n	801080c <_strtod_l+0x49c>
 8010c30:	f04f 33ff 	mov.w	r3, #4294967295
 8010c34:	e7e9      	b.n	8010c0a <_strtod_l+0x89a>
 8010c36:	4613      	mov	r3, r2
 8010c38:	e7e7      	b.n	8010c0a <_strtod_l+0x89a>
 8010c3a:	ea53 0308 	orrs.w	r3, r3, r8
 8010c3e:	d08a      	beq.n	8010b56 <_strtod_l+0x7e6>
 8010c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c42:	b1e3      	cbz	r3, 8010c7e <_strtod_l+0x90e>
 8010c44:	ea13 0f0a 	tst.w	r3, sl
 8010c48:	d0ee      	beq.n	8010c28 <_strtod_l+0x8b8>
 8010c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c4c:	9a04      	ldr	r2, [sp, #16]
 8010c4e:	4640      	mov	r0, r8
 8010c50:	4649      	mov	r1, r9
 8010c52:	b1c3      	cbz	r3, 8010c86 <_strtod_l+0x916>
 8010c54:	f7ff fb6d 	bl	8010332 <sulp>
 8010c58:	4602      	mov	r2, r0
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	ec51 0b18 	vmov	r0, r1, d8
 8010c60:	f7ef fb24 	bl	80002ac <__adddf3>
 8010c64:	4680      	mov	r8, r0
 8010c66:	4689      	mov	r9, r1
 8010c68:	e7de      	b.n	8010c28 <_strtod_l+0x8b8>
 8010c6a:	4013      	ands	r3, r2
 8010c6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010c70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010c74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010c78:	f04f 38ff 	mov.w	r8, #4294967295
 8010c7c:	e7d4      	b.n	8010c28 <_strtod_l+0x8b8>
 8010c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c80:	ea13 0f08 	tst.w	r3, r8
 8010c84:	e7e0      	b.n	8010c48 <_strtod_l+0x8d8>
 8010c86:	f7ff fb54 	bl	8010332 <sulp>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	ec51 0b18 	vmov	r0, r1, d8
 8010c92:	f7ef fb09 	bl	80002a8 <__aeabi_dsub>
 8010c96:	2200      	movs	r2, #0
 8010c98:	2300      	movs	r3, #0
 8010c9a:	4680      	mov	r8, r0
 8010c9c:	4689      	mov	r9, r1
 8010c9e:	f7ef ff23 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	d0c0      	beq.n	8010c28 <_strtod_l+0x8b8>
 8010ca6:	e618      	b.n	80108da <_strtod_l+0x56a>
 8010ca8:	fffffc02 	.word	0xfffffc02
 8010cac:	7ff00000 	.word	0x7ff00000
 8010cb0:	39500000 	.word	0x39500000
 8010cb4:	000fffff 	.word	0x000fffff
 8010cb8:	7fefffff 	.word	0x7fefffff
 8010cbc:	08014510 	.word	0x08014510
 8010cc0:	4659      	mov	r1, fp
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	f001 fc0c 	bl	80124e0 <__ratio>
 8010cc8:	ec57 6b10 	vmov	r6, r7, d0
 8010ccc:	ee10 0a10 	vmov	r0, s0
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010cd6:	4639      	mov	r1, r7
 8010cd8:	f7ef ff1a 	bl	8000b10 <__aeabi_dcmple>
 8010cdc:	2800      	cmp	r0, #0
 8010cde:	d071      	beq.n	8010dc4 <_strtod_l+0xa54>
 8010ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d17c      	bne.n	8010de0 <_strtod_l+0xa70>
 8010ce6:	f1b8 0f00 	cmp.w	r8, #0
 8010cea:	d15a      	bne.n	8010da2 <_strtod_l+0xa32>
 8010cec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d15d      	bne.n	8010db0 <_strtod_l+0xa40>
 8010cf4:	4b90      	ldr	r3, [pc, #576]	; (8010f38 <_strtod_l+0xbc8>)
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	4630      	mov	r0, r6
 8010cfa:	4639      	mov	r1, r7
 8010cfc:	f7ef fefe 	bl	8000afc <__aeabi_dcmplt>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	d15c      	bne.n	8010dbe <_strtod_l+0xa4e>
 8010d04:	4630      	mov	r0, r6
 8010d06:	4639      	mov	r1, r7
 8010d08:	4b8c      	ldr	r3, [pc, #560]	; (8010f3c <_strtod_l+0xbcc>)
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f7ef fc84 	bl	8000618 <__aeabi_dmul>
 8010d10:	4606      	mov	r6, r0
 8010d12:	460f      	mov	r7, r1
 8010d14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010d18:	9606      	str	r6, [sp, #24]
 8010d1a:	9307      	str	r3, [sp, #28]
 8010d1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010d24:	4b86      	ldr	r3, [pc, #536]	; (8010f40 <_strtod_l+0xbd0>)
 8010d26:	ea0a 0303 	and.w	r3, sl, r3
 8010d2a:	930d      	str	r3, [sp, #52]	; 0x34
 8010d2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d2e:	4b85      	ldr	r3, [pc, #532]	; (8010f44 <_strtod_l+0xbd4>)
 8010d30:	429a      	cmp	r2, r3
 8010d32:	f040 8090 	bne.w	8010e56 <_strtod_l+0xae6>
 8010d36:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8010d3a:	ec49 8b10 	vmov	d0, r8, r9
 8010d3e:	f001 fb05 	bl	801234c <__ulp>
 8010d42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d46:	ec51 0b10 	vmov	r0, r1, d0
 8010d4a:	f7ef fc65 	bl	8000618 <__aeabi_dmul>
 8010d4e:	4642      	mov	r2, r8
 8010d50:	464b      	mov	r3, r9
 8010d52:	f7ef faab 	bl	80002ac <__adddf3>
 8010d56:	460b      	mov	r3, r1
 8010d58:	4979      	ldr	r1, [pc, #484]	; (8010f40 <_strtod_l+0xbd0>)
 8010d5a:	4a7b      	ldr	r2, [pc, #492]	; (8010f48 <_strtod_l+0xbd8>)
 8010d5c:	4019      	ands	r1, r3
 8010d5e:	4291      	cmp	r1, r2
 8010d60:	4680      	mov	r8, r0
 8010d62:	d944      	bls.n	8010dee <_strtod_l+0xa7e>
 8010d64:	ee18 2a90 	vmov	r2, s17
 8010d68:	4b78      	ldr	r3, [pc, #480]	; (8010f4c <_strtod_l+0xbdc>)
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d104      	bne.n	8010d78 <_strtod_l+0xa08>
 8010d6e:	ee18 3a10 	vmov	r3, s16
 8010d72:	3301      	adds	r3, #1
 8010d74:	f43f ad40 	beq.w	80107f8 <_strtod_l+0x488>
 8010d78:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8010f4c <_strtod_l+0xbdc>
 8010d7c:	f04f 38ff 	mov.w	r8, #4294967295
 8010d80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010d82:	4620      	mov	r0, r4
 8010d84:	f000 ffb6 	bl	8011cf4 <_Bfree>
 8010d88:	9905      	ldr	r1, [sp, #20]
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	f000 ffb2 	bl	8011cf4 <_Bfree>
 8010d90:	4659      	mov	r1, fp
 8010d92:	4620      	mov	r0, r4
 8010d94:	f000 ffae 	bl	8011cf4 <_Bfree>
 8010d98:	4629      	mov	r1, r5
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	f000 ffaa 	bl	8011cf4 <_Bfree>
 8010da0:	e609      	b.n	80109b6 <_strtod_l+0x646>
 8010da2:	f1b8 0f01 	cmp.w	r8, #1
 8010da6:	d103      	bne.n	8010db0 <_strtod_l+0xa40>
 8010da8:	f1b9 0f00 	cmp.w	r9, #0
 8010dac:	f43f ad95 	beq.w	80108da <_strtod_l+0x56a>
 8010db0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010f08 <_strtod_l+0xb98>
 8010db4:	4f60      	ldr	r7, [pc, #384]	; (8010f38 <_strtod_l+0xbc8>)
 8010db6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010dba:	2600      	movs	r6, #0
 8010dbc:	e7ae      	b.n	8010d1c <_strtod_l+0x9ac>
 8010dbe:	4f5f      	ldr	r7, [pc, #380]	; (8010f3c <_strtod_l+0xbcc>)
 8010dc0:	2600      	movs	r6, #0
 8010dc2:	e7a7      	b.n	8010d14 <_strtod_l+0x9a4>
 8010dc4:	4b5d      	ldr	r3, [pc, #372]	; (8010f3c <_strtod_l+0xbcc>)
 8010dc6:	4630      	mov	r0, r6
 8010dc8:	4639      	mov	r1, r7
 8010dca:	2200      	movs	r2, #0
 8010dcc:	f7ef fc24 	bl	8000618 <__aeabi_dmul>
 8010dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dd2:	4606      	mov	r6, r0
 8010dd4:	460f      	mov	r7, r1
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d09c      	beq.n	8010d14 <_strtod_l+0x9a4>
 8010dda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010dde:	e79d      	b.n	8010d1c <_strtod_l+0x9ac>
 8010de0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010f10 <_strtod_l+0xba0>
 8010de4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010de8:	ec57 6b17 	vmov	r6, r7, d7
 8010dec:	e796      	b.n	8010d1c <_strtod_l+0x9ac>
 8010dee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010df2:	9b04      	ldr	r3, [sp, #16]
 8010df4:	46ca      	mov	sl, r9
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d1c2      	bne.n	8010d80 <_strtod_l+0xa10>
 8010dfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e00:	0d1b      	lsrs	r3, r3, #20
 8010e02:	051b      	lsls	r3, r3, #20
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d1bb      	bne.n	8010d80 <_strtod_l+0xa10>
 8010e08:	4630      	mov	r0, r6
 8010e0a:	4639      	mov	r1, r7
 8010e0c:	f7ef ff14 	bl	8000c38 <__aeabi_d2lz>
 8010e10:	f7ef fbd4 	bl	80005bc <__aeabi_l2d>
 8010e14:	4602      	mov	r2, r0
 8010e16:	460b      	mov	r3, r1
 8010e18:	4630      	mov	r0, r6
 8010e1a:	4639      	mov	r1, r7
 8010e1c:	f7ef fa44 	bl	80002a8 <__aeabi_dsub>
 8010e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e26:	ea43 0308 	orr.w	r3, r3, r8
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	4606      	mov	r6, r0
 8010e2e:	460f      	mov	r7, r1
 8010e30:	d054      	beq.n	8010edc <_strtod_l+0xb6c>
 8010e32:	a339      	add	r3, pc, #228	; (adr r3, 8010f18 <_strtod_l+0xba8>)
 8010e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e38:	f7ef fe60 	bl	8000afc <__aeabi_dcmplt>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	f47f ace5 	bne.w	801080c <_strtod_l+0x49c>
 8010e42:	a337      	add	r3, pc, #220	; (adr r3, 8010f20 <_strtod_l+0xbb0>)
 8010e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e48:	4630      	mov	r0, r6
 8010e4a:	4639      	mov	r1, r7
 8010e4c:	f7ef fe74 	bl	8000b38 <__aeabi_dcmpgt>
 8010e50:	2800      	cmp	r0, #0
 8010e52:	d095      	beq.n	8010d80 <_strtod_l+0xa10>
 8010e54:	e4da      	b.n	801080c <_strtod_l+0x49c>
 8010e56:	9b04      	ldr	r3, [sp, #16]
 8010e58:	b333      	cbz	r3, 8010ea8 <_strtod_l+0xb38>
 8010e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010e60:	d822      	bhi.n	8010ea8 <_strtod_l+0xb38>
 8010e62:	a331      	add	r3, pc, #196	; (adr r3, 8010f28 <_strtod_l+0xbb8>)
 8010e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e68:	4630      	mov	r0, r6
 8010e6a:	4639      	mov	r1, r7
 8010e6c:	f7ef fe50 	bl	8000b10 <__aeabi_dcmple>
 8010e70:	b1a0      	cbz	r0, 8010e9c <_strtod_l+0xb2c>
 8010e72:	4639      	mov	r1, r7
 8010e74:	4630      	mov	r0, r6
 8010e76:	f7ef fea7 	bl	8000bc8 <__aeabi_d2uiz>
 8010e7a:	2801      	cmp	r0, #1
 8010e7c:	bf38      	it	cc
 8010e7e:	2001      	movcc	r0, #1
 8010e80:	f7ef fb50 	bl	8000524 <__aeabi_ui2d>
 8010e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e86:	4606      	mov	r6, r0
 8010e88:	460f      	mov	r7, r1
 8010e8a:	bb23      	cbnz	r3, 8010ed6 <_strtod_l+0xb66>
 8010e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e90:	9010      	str	r0, [sp, #64]	; 0x40
 8010e92:	9311      	str	r3, [sp, #68]	; 0x44
 8010e94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ea0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010ea4:	1a9b      	subs	r3, r3, r2
 8010ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ea8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010eac:	eeb0 0a48 	vmov.f32	s0, s16
 8010eb0:	eef0 0a68 	vmov.f32	s1, s17
 8010eb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010eb8:	f001 fa48 	bl	801234c <__ulp>
 8010ebc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010ec0:	ec53 2b10 	vmov	r2, r3, d0
 8010ec4:	f7ef fba8 	bl	8000618 <__aeabi_dmul>
 8010ec8:	ec53 2b18 	vmov	r2, r3, d8
 8010ecc:	f7ef f9ee 	bl	80002ac <__adddf3>
 8010ed0:	4680      	mov	r8, r0
 8010ed2:	4689      	mov	r9, r1
 8010ed4:	e78d      	b.n	8010df2 <_strtod_l+0xa82>
 8010ed6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010eda:	e7db      	b.n	8010e94 <_strtod_l+0xb24>
 8010edc:	a314      	add	r3, pc, #80	; (adr r3, 8010f30 <_strtod_l+0xbc0>)
 8010ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee2:	f7ef fe0b 	bl	8000afc <__aeabi_dcmplt>
 8010ee6:	e7b3      	b.n	8010e50 <_strtod_l+0xae0>
 8010ee8:	2300      	movs	r3, #0
 8010eea:	930a      	str	r3, [sp, #40]	; 0x28
 8010eec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ef0:	6013      	str	r3, [r2, #0]
 8010ef2:	f7ff ba7c 	b.w	80103ee <_strtod_l+0x7e>
 8010ef6:	2a65      	cmp	r2, #101	; 0x65
 8010ef8:	f43f ab75 	beq.w	80105e6 <_strtod_l+0x276>
 8010efc:	2a45      	cmp	r2, #69	; 0x45
 8010efe:	f43f ab72 	beq.w	80105e6 <_strtod_l+0x276>
 8010f02:	2301      	movs	r3, #1
 8010f04:	f7ff bbaa 	b.w	801065c <_strtod_l+0x2ec>
 8010f08:	00000000 	.word	0x00000000
 8010f0c:	bff00000 	.word	0xbff00000
 8010f10:	00000000 	.word	0x00000000
 8010f14:	3ff00000 	.word	0x3ff00000
 8010f18:	94a03595 	.word	0x94a03595
 8010f1c:	3fdfffff 	.word	0x3fdfffff
 8010f20:	35afe535 	.word	0x35afe535
 8010f24:	3fe00000 	.word	0x3fe00000
 8010f28:	ffc00000 	.word	0xffc00000
 8010f2c:	41dfffff 	.word	0x41dfffff
 8010f30:	94a03595 	.word	0x94a03595
 8010f34:	3fcfffff 	.word	0x3fcfffff
 8010f38:	3ff00000 	.word	0x3ff00000
 8010f3c:	3fe00000 	.word	0x3fe00000
 8010f40:	7ff00000 	.word	0x7ff00000
 8010f44:	7fe00000 	.word	0x7fe00000
 8010f48:	7c9fffff 	.word	0x7c9fffff
 8010f4c:	7fefffff 	.word	0x7fefffff

08010f50 <strtod>:
 8010f50:	460a      	mov	r2, r1
 8010f52:	4601      	mov	r1, r0
 8010f54:	4802      	ldr	r0, [pc, #8]	; (8010f60 <strtod+0x10>)
 8010f56:	4b03      	ldr	r3, [pc, #12]	; (8010f64 <strtod+0x14>)
 8010f58:	6800      	ldr	r0, [r0, #0]
 8010f5a:	f7ff ba09 	b.w	8010370 <_strtod_l>
 8010f5e:	bf00      	nop
 8010f60:	20000228 	.word	0x20000228
 8010f64:	20000070 	.word	0x20000070

08010f68 <std>:
 8010f68:	2300      	movs	r3, #0
 8010f6a:	b510      	push	{r4, lr}
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8010f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f76:	6083      	str	r3, [r0, #8]
 8010f78:	8181      	strh	r1, [r0, #12]
 8010f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8010f7c:	81c2      	strh	r2, [r0, #14]
 8010f7e:	6183      	str	r3, [r0, #24]
 8010f80:	4619      	mov	r1, r3
 8010f82:	2208      	movs	r2, #8
 8010f84:	305c      	adds	r0, #92	; 0x5c
 8010f86:	f000 f9a7 	bl	80112d8 <memset>
 8010f8a:	4b0d      	ldr	r3, [pc, #52]	; (8010fc0 <std+0x58>)
 8010f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8010f8e:	4b0d      	ldr	r3, [pc, #52]	; (8010fc4 <std+0x5c>)
 8010f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f92:	4b0d      	ldr	r3, [pc, #52]	; (8010fc8 <std+0x60>)
 8010f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f96:	4b0d      	ldr	r3, [pc, #52]	; (8010fcc <std+0x64>)
 8010f98:	6323      	str	r3, [r4, #48]	; 0x30
 8010f9a:	4b0d      	ldr	r3, [pc, #52]	; (8010fd0 <std+0x68>)
 8010f9c:	6224      	str	r4, [r4, #32]
 8010f9e:	429c      	cmp	r4, r3
 8010fa0:	d006      	beq.n	8010fb0 <std+0x48>
 8010fa2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010fa6:	4294      	cmp	r4, r2
 8010fa8:	d002      	beq.n	8010fb0 <std+0x48>
 8010faa:	33d0      	adds	r3, #208	; 0xd0
 8010fac:	429c      	cmp	r4, r3
 8010fae:	d105      	bne.n	8010fbc <std+0x54>
 8010fb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fb8:	f000 ba8a 	b.w	80114d0 <__retarget_lock_init_recursive>
 8010fbc:	bd10      	pop	{r4, pc}
 8010fbe:	bf00      	nop
 8010fc0:	080111a9 	.word	0x080111a9
 8010fc4:	080111cf 	.word	0x080111cf
 8010fc8:	08011207 	.word	0x08011207
 8010fcc:	0801122b 	.word	0x0801122b
 8010fd0:	20003304 	.word	0x20003304

08010fd4 <stdio_exit_handler>:
 8010fd4:	4a02      	ldr	r2, [pc, #8]	; (8010fe0 <stdio_exit_handler+0xc>)
 8010fd6:	4903      	ldr	r1, [pc, #12]	; (8010fe4 <stdio_exit_handler+0x10>)
 8010fd8:	4803      	ldr	r0, [pc, #12]	; (8010fe8 <stdio_exit_handler+0x14>)
 8010fda:	f000 b87b 	b.w	80110d4 <_fwalk_sglue>
 8010fde:	bf00      	nop
 8010fe0:	20000064 	.word	0x20000064
 8010fe4:	0801359d 	.word	0x0801359d
 8010fe8:	200001dc 	.word	0x200001dc

08010fec <cleanup_stdio>:
 8010fec:	6841      	ldr	r1, [r0, #4]
 8010fee:	4b0c      	ldr	r3, [pc, #48]	; (8011020 <cleanup_stdio+0x34>)
 8010ff0:	4299      	cmp	r1, r3
 8010ff2:	b510      	push	{r4, lr}
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	d001      	beq.n	8010ffc <cleanup_stdio+0x10>
 8010ff8:	f002 fad0 	bl	801359c <_fflush_r>
 8010ffc:	68a1      	ldr	r1, [r4, #8]
 8010ffe:	4b09      	ldr	r3, [pc, #36]	; (8011024 <cleanup_stdio+0x38>)
 8011000:	4299      	cmp	r1, r3
 8011002:	d002      	beq.n	801100a <cleanup_stdio+0x1e>
 8011004:	4620      	mov	r0, r4
 8011006:	f002 fac9 	bl	801359c <_fflush_r>
 801100a:	68e1      	ldr	r1, [r4, #12]
 801100c:	4b06      	ldr	r3, [pc, #24]	; (8011028 <cleanup_stdio+0x3c>)
 801100e:	4299      	cmp	r1, r3
 8011010:	d004      	beq.n	801101c <cleanup_stdio+0x30>
 8011012:	4620      	mov	r0, r4
 8011014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011018:	f002 bac0 	b.w	801359c <_fflush_r>
 801101c:	bd10      	pop	{r4, pc}
 801101e:	bf00      	nop
 8011020:	20003304 	.word	0x20003304
 8011024:	2000336c 	.word	0x2000336c
 8011028:	200033d4 	.word	0x200033d4

0801102c <global_stdio_init.part.0>:
 801102c:	b510      	push	{r4, lr}
 801102e:	4b0b      	ldr	r3, [pc, #44]	; (801105c <global_stdio_init.part.0+0x30>)
 8011030:	4c0b      	ldr	r4, [pc, #44]	; (8011060 <global_stdio_init.part.0+0x34>)
 8011032:	4a0c      	ldr	r2, [pc, #48]	; (8011064 <global_stdio_init.part.0+0x38>)
 8011034:	601a      	str	r2, [r3, #0]
 8011036:	4620      	mov	r0, r4
 8011038:	2200      	movs	r2, #0
 801103a:	2104      	movs	r1, #4
 801103c:	f7ff ff94 	bl	8010f68 <std>
 8011040:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011044:	2201      	movs	r2, #1
 8011046:	2109      	movs	r1, #9
 8011048:	f7ff ff8e 	bl	8010f68 <std>
 801104c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011050:	2202      	movs	r2, #2
 8011052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011056:	2112      	movs	r1, #18
 8011058:	f7ff bf86 	b.w	8010f68 <std>
 801105c:	2000343c 	.word	0x2000343c
 8011060:	20003304 	.word	0x20003304
 8011064:	08010fd5 	.word	0x08010fd5

08011068 <__sfp_lock_acquire>:
 8011068:	4801      	ldr	r0, [pc, #4]	; (8011070 <__sfp_lock_acquire+0x8>)
 801106a:	f000 ba32 	b.w	80114d2 <__retarget_lock_acquire_recursive>
 801106e:	bf00      	nop
 8011070:	20003445 	.word	0x20003445

08011074 <__sfp_lock_release>:
 8011074:	4801      	ldr	r0, [pc, #4]	; (801107c <__sfp_lock_release+0x8>)
 8011076:	f000 ba2d 	b.w	80114d4 <__retarget_lock_release_recursive>
 801107a:	bf00      	nop
 801107c:	20003445 	.word	0x20003445

08011080 <__sinit>:
 8011080:	b510      	push	{r4, lr}
 8011082:	4604      	mov	r4, r0
 8011084:	f7ff fff0 	bl	8011068 <__sfp_lock_acquire>
 8011088:	6a23      	ldr	r3, [r4, #32]
 801108a:	b11b      	cbz	r3, 8011094 <__sinit+0x14>
 801108c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011090:	f7ff bff0 	b.w	8011074 <__sfp_lock_release>
 8011094:	4b04      	ldr	r3, [pc, #16]	; (80110a8 <__sinit+0x28>)
 8011096:	6223      	str	r3, [r4, #32]
 8011098:	4b04      	ldr	r3, [pc, #16]	; (80110ac <__sinit+0x2c>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d1f5      	bne.n	801108c <__sinit+0xc>
 80110a0:	f7ff ffc4 	bl	801102c <global_stdio_init.part.0>
 80110a4:	e7f2      	b.n	801108c <__sinit+0xc>
 80110a6:	bf00      	nop
 80110a8:	08010fed 	.word	0x08010fed
 80110ac:	2000343c 	.word	0x2000343c

080110b0 <fiprintf>:
 80110b0:	b40e      	push	{r1, r2, r3}
 80110b2:	b503      	push	{r0, r1, lr}
 80110b4:	4601      	mov	r1, r0
 80110b6:	ab03      	add	r3, sp, #12
 80110b8:	4805      	ldr	r0, [pc, #20]	; (80110d0 <fiprintf+0x20>)
 80110ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80110be:	6800      	ldr	r0, [r0, #0]
 80110c0:	9301      	str	r3, [sp, #4]
 80110c2:	f001 fded 	bl	8012ca0 <_vfiprintf_r>
 80110c6:	b002      	add	sp, #8
 80110c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80110cc:	b003      	add	sp, #12
 80110ce:	4770      	bx	lr
 80110d0:	20000228 	.word	0x20000228

080110d4 <_fwalk_sglue>:
 80110d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110d8:	4607      	mov	r7, r0
 80110da:	4688      	mov	r8, r1
 80110dc:	4614      	mov	r4, r2
 80110de:	2600      	movs	r6, #0
 80110e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110e4:	f1b9 0901 	subs.w	r9, r9, #1
 80110e8:	d505      	bpl.n	80110f6 <_fwalk_sglue+0x22>
 80110ea:	6824      	ldr	r4, [r4, #0]
 80110ec:	2c00      	cmp	r4, #0
 80110ee:	d1f7      	bne.n	80110e0 <_fwalk_sglue+0xc>
 80110f0:	4630      	mov	r0, r6
 80110f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110f6:	89ab      	ldrh	r3, [r5, #12]
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	d907      	bls.n	801110c <_fwalk_sglue+0x38>
 80110fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011100:	3301      	adds	r3, #1
 8011102:	d003      	beq.n	801110c <_fwalk_sglue+0x38>
 8011104:	4629      	mov	r1, r5
 8011106:	4638      	mov	r0, r7
 8011108:	47c0      	blx	r8
 801110a:	4306      	orrs	r6, r0
 801110c:	3568      	adds	r5, #104	; 0x68
 801110e:	e7e9      	b.n	80110e4 <_fwalk_sglue+0x10>

08011110 <siprintf>:
 8011110:	b40e      	push	{r1, r2, r3}
 8011112:	b500      	push	{lr}
 8011114:	b09c      	sub	sp, #112	; 0x70
 8011116:	ab1d      	add	r3, sp, #116	; 0x74
 8011118:	9002      	str	r0, [sp, #8]
 801111a:	9006      	str	r0, [sp, #24]
 801111c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011120:	4809      	ldr	r0, [pc, #36]	; (8011148 <siprintf+0x38>)
 8011122:	9107      	str	r1, [sp, #28]
 8011124:	9104      	str	r1, [sp, #16]
 8011126:	4909      	ldr	r1, [pc, #36]	; (801114c <siprintf+0x3c>)
 8011128:	f853 2b04 	ldr.w	r2, [r3], #4
 801112c:	9105      	str	r1, [sp, #20]
 801112e:	6800      	ldr	r0, [r0, #0]
 8011130:	9301      	str	r3, [sp, #4]
 8011132:	a902      	add	r1, sp, #8
 8011134:	f001 faba 	bl	80126ac <_svfiprintf_r>
 8011138:	9b02      	ldr	r3, [sp, #8]
 801113a:	2200      	movs	r2, #0
 801113c:	701a      	strb	r2, [r3, #0]
 801113e:	b01c      	add	sp, #112	; 0x70
 8011140:	f85d eb04 	ldr.w	lr, [sp], #4
 8011144:	b003      	add	sp, #12
 8011146:	4770      	bx	lr
 8011148:	20000228 	.word	0x20000228
 801114c:	ffff0208 	.word	0xffff0208

08011150 <siscanf>:
 8011150:	b40e      	push	{r1, r2, r3}
 8011152:	b510      	push	{r4, lr}
 8011154:	b09f      	sub	sp, #124	; 0x7c
 8011156:	ac21      	add	r4, sp, #132	; 0x84
 8011158:	f44f 7101 	mov.w	r1, #516	; 0x204
 801115c:	f854 2b04 	ldr.w	r2, [r4], #4
 8011160:	9201      	str	r2, [sp, #4]
 8011162:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011166:	9004      	str	r0, [sp, #16]
 8011168:	9008      	str	r0, [sp, #32]
 801116a:	f7ef f891 	bl	8000290 <strlen>
 801116e:	4b0c      	ldr	r3, [pc, #48]	; (80111a0 <siscanf+0x50>)
 8011170:	9005      	str	r0, [sp, #20]
 8011172:	9009      	str	r0, [sp, #36]	; 0x24
 8011174:	930d      	str	r3, [sp, #52]	; 0x34
 8011176:	480b      	ldr	r0, [pc, #44]	; (80111a4 <siscanf+0x54>)
 8011178:	9a01      	ldr	r2, [sp, #4]
 801117a:	6800      	ldr	r0, [r0, #0]
 801117c:	9403      	str	r4, [sp, #12]
 801117e:	2300      	movs	r3, #0
 8011180:	9311      	str	r3, [sp, #68]	; 0x44
 8011182:	9316      	str	r3, [sp, #88]	; 0x58
 8011184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011188:	f8ad 301e 	strh.w	r3, [sp, #30]
 801118c:	a904      	add	r1, sp, #16
 801118e:	4623      	mov	r3, r4
 8011190:	f001 fbe4 	bl	801295c <__ssvfiscanf_r>
 8011194:	b01f      	add	sp, #124	; 0x7c
 8011196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801119a:	b003      	add	sp, #12
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	080111cb 	.word	0x080111cb
 80111a4:	20000228 	.word	0x20000228

080111a8 <__sread>:
 80111a8:	b510      	push	{r4, lr}
 80111aa:	460c      	mov	r4, r1
 80111ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111b0:	f000 f91c 	bl	80113ec <_read_r>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	bfab      	itete	ge
 80111b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80111ba:	89a3      	ldrhlt	r3, [r4, #12]
 80111bc:	181b      	addge	r3, r3, r0
 80111be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80111c2:	bfac      	ite	ge
 80111c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80111c6:	81a3      	strhlt	r3, [r4, #12]
 80111c8:	bd10      	pop	{r4, pc}

080111ca <__seofread>:
 80111ca:	2000      	movs	r0, #0
 80111cc:	4770      	bx	lr

080111ce <__swrite>:
 80111ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111d2:	461f      	mov	r7, r3
 80111d4:	898b      	ldrh	r3, [r1, #12]
 80111d6:	05db      	lsls	r3, r3, #23
 80111d8:	4605      	mov	r5, r0
 80111da:	460c      	mov	r4, r1
 80111dc:	4616      	mov	r6, r2
 80111de:	d505      	bpl.n	80111ec <__swrite+0x1e>
 80111e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111e4:	2302      	movs	r3, #2
 80111e6:	2200      	movs	r2, #0
 80111e8:	f000 f8ee 	bl	80113c8 <_lseek_r>
 80111ec:	89a3      	ldrh	r3, [r4, #12]
 80111ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80111f6:	81a3      	strh	r3, [r4, #12]
 80111f8:	4632      	mov	r2, r6
 80111fa:	463b      	mov	r3, r7
 80111fc:	4628      	mov	r0, r5
 80111fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011202:	f000 b929 	b.w	8011458 <_write_r>

08011206 <__sseek>:
 8011206:	b510      	push	{r4, lr}
 8011208:	460c      	mov	r4, r1
 801120a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801120e:	f000 f8db 	bl	80113c8 <_lseek_r>
 8011212:	1c43      	adds	r3, r0, #1
 8011214:	89a3      	ldrh	r3, [r4, #12]
 8011216:	bf15      	itete	ne
 8011218:	6560      	strne	r0, [r4, #84]	; 0x54
 801121a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801121e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011222:	81a3      	strheq	r3, [r4, #12]
 8011224:	bf18      	it	ne
 8011226:	81a3      	strhne	r3, [r4, #12]
 8011228:	bd10      	pop	{r4, pc}

0801122a <__sclose>:
 801122a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801122e:	f000 b8bb 	b.w	80113a8 <_close_r>

08011232 <_vsniprintf_r>:
 8011232:	b530      	push	{r4, r5, lr}
 8011234:	4614      	mov	r4, r2
 8011236:	2c00      	cmp	r4, #0
 8011238:	b09b      	sub	sp, #108	; 0x6c
 801123a:	4605      	mov	r5, r0
 801123c:	461a      	mov	r2, r3
 801123e:	da05      	bge.n	801124c <_vsniprintf_r+0x1a>
 8011240:	238b      	movs	r3, #139	; 0x8b
 8011242:	6003      	str	r3, [r0, #0]
 8011244:	f04f 30ff 	mov.w	r0, #4294967295
 8011248:	b01b      	add	sp, #108	; 0x6c
 801124a:	bd30      	pop	{r4, r5, pc}
 801124c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011250:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011254:	bf14      	ite	ne
 8011256:	f104 33ff 	addne.w	r3, r4, #4294967295
 801125a:	4623      	moveq	r3, r4
 801125c:	9302      	str	r3, [sp, #8]
 801125e:	9305      	str	r3, [sp, #20]
 8011260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011264:	9100      	str	r1, [sp, #0]
 8011266:	9104      	str	r1, [sp, #16]
 8011268:	f8ad 300e 	strh.w	r3, [sp, #14]
 801126c:	4669      	mov	r1, sp
 801126e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011270:	f001 fa1c 	bl	80126ac <_svfiprintf_r>
 8011274:	1c43      	adds	r3, r0, #1
 8011276:	bfbc      	itt	lt
 8011278:	238b      	movlt	r3, #139	; 0x8b
 801127a:	602b      	strlt	r3, [r5, #0]
 801127c:	2c00      	cmp	r4, #0
 801127e:	d0e3      	beq.n	8011248 <_vsniprintf_r+0x16>
 8011280:	9b00      	ldr	r3, [sp, #0]
 8011282:	2200      	movs	r2, #0
 8011284:	701a      	strb	r2, [r3, #0]
 8011286:	e7df      	b.n	8011248 <_vsniprintf_r+0x16>

08011288 <vsniprintf>:
 8011288:	b507      	push	{r0, r1, r2, lr}
 801128a:	9300      	str	r3, [sp, #0]
 801128c:	4613      	mov	r3, r2
 801128e:	460a      	mov	r2, r1
 8011290:	4601      	mov	r1, r0
 8011292:	4803      	ldr	r0, [pc, #12]	; (80112a0 <vsniprintf+0x18>)
 8011294:	6800      	ldr	r0, [r0, #0]
 8011296:	f7ff ffcc 	bl	8011232 <_vsniprintf_r>
 801129a:	b003      	add	sp, #12
 801129c:	f85d fb04 	ldr.w	pc, [sp], #4
 80112a0:	20000228 	.word	0x20000228

080112a4 <memmove>:
 80112a4:	4288      	cmp	r0, r1
 80112a6:	b510      	push	{r4, lr}
 80112a8:	eb01 0402 	add.w	r4, r1, r2
 80112ac:	d902      	bls.n	80112b4 <memmove+0x10>
 80112ae:	4284      	cmp	r4, r0
 80112b0:	4623      	mov	r3, r4
 80112b2:	d807      	bhi.n	80112c4 <memmove+0x20>
 80112b4:	1e43      	subs	r3, r0, #1
 80112b6:	42a1      	cmp	r1, r4
 80112b8:	d008      	beq.n	80112cc <memmove+0x28>
 80112ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112c2:	e7f8      	b.n	80112b6 <memmove+0x12>
 80112c4:	4402      	add	r2, r0
 80112c6:	4601      	mov	r1, r0
 80112c8:	428a      	cmp	r2, r1
 80112ca:	d100      	bne.n	80112ce <memmove+0x2a>
 80112cc:	bd10      	pop	{r4, pc}
 80112ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80112d6:	e7f7      	b.n	80112c8 <memmove+0x24>

080112d8 <memset>:
 80112d8:	4402      	add	r2, r0
 80112da:	4603      	mov	r3, r0
 80112dc:	4293      	cmp	r3, r2
 80112de:	d100      	bne.n	80112e2 <memset+0xa>
 80112e0:	4770      	bx	lr
 80112e2:	f803 1b01 	strb.w	r1, [r3], #1
 80112e6:	e7f9      	b.n	80112dc <memset+0x4>

080112e8 <strdup>:
 80112e8:	4b02      	ldr	r3, [pc, #8]	; (80112f4 <strdup+0xc>)
 80112ea:	4601      	mov	r1, r0
 80112ec:	6818      	ldr	r0, [r3, #0]
 80112ee:	f000 b803 	b.w	80112f8 <_strdup_r>
 80112f2:	bf00      	nop
 80112f4:	20000228 	.word	0x20000228

080112f8 <_strdup_r>:
 80112f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112fa:	4604      	mov	r4, r0
 80112fc:	4608      	mov	r0, r1
 80112fe:	460d      	mov	r5, r1
 8011300:	f7ee ffc6 	bl	8000290 <strlen>
 8011304:	1c42      	adds	r2, r0, #1
 8011306:	4611      	mov	r1, r2
 8011308:	4620      	mov	r0, r4
 801130a:	9201      	str	r2, [sp, #4]
 801130c:	f7fe ff4e 	bl	80101ac <_malloc_r>
 8011310:	4604      	mov	r4, r0
 8011312:	b118      	cbz	r0, 801131c <_strdup_r+0x24>
 8011314:	9a01      	ldr	r2, [sp, #4]
 8011316:	4629      	mov	r1, r5
 8011318:	f000 f8dd 	bl	80114d6 <memcpy>
 801131c:	4620      	mov	r0, r4
 801131e:	b003      	add	sp, #12
 8011320:	bd30      	pop	{r4, r5, pc}

08011322 <strncmp>:
 8011322:	b510      	push	{r4, lr}
 8011324:	b16a      	cbz	r2, 8011342 <strncmp+0x20>
 8011326:	3901      	subs	r1, #1
 8011328:	1884      	adds	r4, r0, r2
 801132a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801132e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011332:	429a      	cmp	r2, r3
 8011334:	d103      	bne.n	801133e <strncmp+0x1c>
 8011336:	42a0      	cmp	r0, r4
 8011338:	d001      	beq.n	801133e <strncmp+0x1c>
 801133a:	2a00      	cmp	r2, #0
 801133c:	d1f5      	bne.n	801132a <strncmp+0x8>
 801133e:	1ad0      	subs	r0, r2, r3
 8011340:	bd10      	pop	{r4, pc}
 8011342:	4610      	mov	r0, r2
 8011344:	e7fc      	b.n	8011340 <strncmp+0x1e>

08011346 <_raise_r>:
 8011346:	291f      	cmp	r1, #31
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	4604      	mov	r4, r0
 801134c:	460d      	mov	r5, r1
 801134e:	d904      	bls.n	801135a <_raise_r+0x14>
 8011350:	2316      	movs	r3, #22
 8011352:	6003      	str	r3, [r0, #0]
 8011354:	f04f 30ff 	mov.w	r0, #4294967295
 8011358:	bd38      	pop	{r3, r4, r5, pc}
 801135a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801135c:	b112      	cbz	r2, 8011364 <_raise_r+0x1e>
 801135e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011362:	b94b      	cbnz	r3, 8011378 <_raise_r+0x32>
 8011364:	4620      	mov	r0, r4
 8011366:	f000 f865 	bl	8011434 <_getpid_r>
 801136a:	462a      	mov	r2, r5
 801136c:	4601      	mov	r1, r0
 801136e:	4620      	mov	r0, r4
 8011370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011374:	f000 b84c 	b.w	8011410 <_kill_r>
 8011378:	2b01      	cmp	r3, #1
 801137a:	d00a      	beq.n	8011392 <_raise_r+0x4c>
 801137c:	1c59      	adds	r1, r3, #1
 801137e:	d103      	bne.n	8011388 <_raise_r+0x42>
 8011380:	2316      	movs	r3, #22
 8011382:	6003      	str	r3, [r0, #0]
 8011384:	2001      	movs	r0, #1
 8011386:	e7e7      	b.n	8011358 <_raise_r+0x12>
 8011388:	2400      	movs	r4, #0
 801138a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801138e:	4628      	mov	r0, r5
 8011390:	4798      	blx	r3
 8011392:	2000      	movs	r0, #0
 8011394:	e7e0      	b.n	8011358 <_raise_r+0x12>
	...

08011398 <raise>:
 8011398:	4b02      	ldr	r3, [pc, #8]	; (80113a4 <raise+0xc>)
 801139a:	4601      	mov	r1, r0
 801139c:	6818      	ldr	r0, [r3, #0]
 801139e:	f7ff bfd2 	b.w	8011346 <_raise_r>
 80113a2:	bf00      	nop
 80113a4:	20000228 	.word	0x20000228

080113a8 <_close_r>:
 80113a8:	b538      	push	{r3, r4, r5, lr}
 80113aa:	4d06      	ldr	r5, [pc, #24]	; (80113c4 <_close_r+0x1c>)
 80113ac:	2300      	movs	r3, #0
 80113ae:	4604      	mov	r4, r0
 80113b0:	4608      	mov	r0, r1
 80113b2:	602b      	str	r3, [r5, #0]
 80113b4:	f7fa ffb1 	bl	800c31a <_close>
 80113b8:	1c43      	adds	r3, r0, #1
 80113ba:	d102      	bne.n	80113c2 <_close_r+0x1a>
 80113bc:	682b      	ldr	r3, [r5, #0]
 80113be:	b103      	cbz	r3, 80113c2 <_close_r+0x1a>
 80113c0:	6023      	str	r3, [r4, #0]
 80113c2:	bd38      	pop	{r3, r4, r5, pc}
 80113c4:	20003440 	.word	0x20003440

080113c8 <_lseek_r>:
 80113c8:	b538      	push	{r3, r4, r5, lr}
 80113ca:	4d07      	ldr	r5, [pc, #28]	; (80113e8 <_lseek_r+0x20>)
 80113cc:	4604      	mov	r4, r0
 80113ce:	4608      	mov	r0, r1
 80113d0:	4611      	mov	r1, r2
 80113d2:	2200      	movs	r2, #0
 80113d4:	602a      	str	r2, [r5, #0]
 80113d6:	461a      	mov	r2, r3
 80113d8:	f7fa ffc6 	bl	800c368 <_lseek>
 80113dc:	1c43      	adds	r3, r0, #1
 80113de:	d102      	bne.n	80113e6 <_lseek_r+0x1e>
 80113e0:	682b      	ldr	r3, [r5, #0]
 80113e2:	b103      	cbz	r3, 80113e6 <_lseek_r+0x1e>
 80113e4:	6023      	str	r3, [r4, #0]
 80113e6:	bd38      	pop	{r3, r4, r5, pc}
 80113e8:	20003440 	.word	0x20003440

080113ec <_read_r>:
 80113ec:	b538      	push	{r3, r4, r5, lr}
 80113ee:	4d07      	ldr	r5, [pc, #28]	; (801140c <_read_r+0x20>)
 80113f0:	4604      	mov	r4, r0
 80113f2:	4608      	mov	r0, r1
 80113f4:	4611      	mov	r1, r2
 80113f6:	2200      	movs	r2, #0
 80113f8:	602a      	str	r2, [r5, #0]
 80113fa:	461a      	mov	r2, r3
 80113fc:	f7fa ff54 	bl	800c2a8 <_read>
 8011400:	1c43      	adds	r3, r0, #1
 8011402:	d102      	bne.n	801140a <_read_r+0x1e>
 8011404:	682b      	ldr	r3, [r5, #0]
 8011406:	b103      	cbz	r3, 801140a <_read_r+0x1e>
 8011408:	6023      	str	r3, [r4, #0]
 801140a:	bd38      	pop	{r3, r4, r5, pc}
 801140c:	20003440 	.word	0x20003440

08011410 <_kill_r>:
 8011410:	b538      	push	{r3, r4, r5, lr}
 8011412:	4d07      	ldr	r5, [pc, #28]	; (8011430 <_kill_r+0x20>)
 8011414:	2300      	movs	r3, #0
 8011416:	4604      	mov	r4, r0
 8011418:	4608      	mov	r0, r1
 801141a:	4611      	mov	r1, r2
 801141c:	602b      	str	r3, [r5, #0]
 801141e:	f7fa ff29 	bl	800c274 <_kill>
 8011422:	1c43      	adds	r3, r0, #1
 8011424:	d102      	bne.n	801142c <_kill_r+0x1c>
 8011426:	682b      	ldr	r3, [r5, #0]
 8011428:	b103      	cbz	r3, 801142c <_kill_r+0x1c>
 801142a:	6023      	str	r3, [r4, #0]
 801142c:	bd38      	pop	{r3, r4, r5, pc}
 801142e:	bf00      	nop
 8011430:	20003440 	.word	0x20003440

08011434 <_getpid_r>:
 8011434:	f7fa bf16 	b.w	800c264 <_getpid>

08011438 <_sbrk_r>:
 8011438:	b538      	push	{r3, r4, r5, lr}
 801143a:	4d06      	ldr	r5, [pc, #24]	; (8011454 <_sbrk_r+0x1c>)
 801143c:	2300      	movs	r3, #0
 801143e:	4604      	mov	r4, r0
 8011440:	4608      	mov	r0, r1
 8011442:	602b      	str	r3, [r5, #0]
 8011444:	f7fa ff9e 	bl	800c384 <_sbrk>
 8011448:	1c43      	adds	r3, r0, #1
 801144a:	d102      	bne.n	8011452 <_sbrk_r+0x1a>
 801144c:	682b      	ldr	r3, [r5, #0]
 801144e:	b103      	cbz	r3, 8011452 <_sbrk_r+0x1a>
 8011450:	6023      	str	r3, [r4, #0]
 8011452:	bd38      	pop	{r3, r4, r5, pc}
 8011454:	20003440 	.word	0x20003440

08011458 <_write_r>:
 8011458:	b538      	push	{r3, r4, r5, lr}
 801145a:	4d07      	ldr	r5, [pc, #28]	; (8011478 <_write_r+0x20>)
 801145c:	4604      	mov	r4, r0
 801145e:	4608      	mov	r0, r1
 8011460:	4611      	mov	r1, r2
 8011462:	2200      	movs	r2, #0
 8011464:	602a      	str	r2, [r5, #0]
 8011466:	461a      	mov	r2, r3
 8011468:	f7fa ff3b 	bl	800c2e2 <_write>
 801146c:	1c43      	adds	r3, r0, #1
 801146e:	d102      	bne.n	8011476 <_write_r+0x1e>
 8011470:	682b      	ldr	r3, [r5, #0]
 8011472:	b103      	cbz	r3, 8011476 <_write_r+0x1e>
 8011474:	6023      	str	r3, [r4, #0]
 8011476:	bd38      	pop	{r3, r4, r5, pc}
 8011478:	20003440 	.word	0x20003440

0801147c <__errno>:
 801147c:	4b01      	ldr	r3, [pc, #4]	; (8011484 <__errno+0x8>)
 801147e:	6818      	ldr	r0, [r3, #0]
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop
 8011484:	20000228 	.word	0x20000228

08011488 <__libc_init_array>:
 8011488:	b570      	push	{r4, r5, r6, lr}
 801148a:	4d0d      	ldr	r5, [pc, #52]	; (80114c0 <__libc_init_array+0x38>)
 801148c:	4c0d      	ldr	r4, [pc, #52]	; (80114c4 <__libc_init_array+0x3c>)
 801148e:	1b64      	subs	r4, r4, r5
 8011490:	10a4      	asrs	r4, r4, #2
 8011492:	2600      	movs	r6, #0
 8011494:	42a6      	cmp	r6, r4
 8011496:	d109      	bne.n	80114ac <__libc_init_array+0x24>
 8011498:	4d0b      	ldr	r5, [pc, #44]	; (80114c8 <__libc_init_array+0x40>)
 801149a:	4c0c      	ldr	r4, [pc, #48]	; (80114cc <__libc_init_array+0x44>)
 801149c:	f002 fb5e 	bl	8013b5c <_init>
 80114a0:	1b64      	subs	r4, r4, r5
 80114a2:	10a4      	asrs	r4, r4, #2
 80114a4:	2600      	movs	r6, #0
 80114a6:	42a6      	cmp	r6, r4
 80114a8:	d105      	bne.n	80114b6 <__libc_init_array+0x2e>
 80114aa:	bd70      	pop	{r4, r5, r6, pc}
 80114ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80114b0:	4798      	blx	r3
 80114b2:	3601      	adds	r6, #1
 80114b4:	e7ee      	b.n	8011494 <__libc_init_array+0xc>
 80114b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80114ba:	4798      	blx	r3
 80114bc:	3601      	adds	r6, #1
 80114be:	e7f2      	b.n	80114a6 <__libc_init_array+0x1e>
 80114c0:	080148b8 	.word	0x080148b8
 80114c4:	080148b8 	.word	0x080148b8
 80114c8:	080148b8 	.word	0x080148b8
 80114cc:	080148c0 	.word	0x080148c0

080114d0 <__retarget_lock_init_recursive>:
 80114d0:	4770      	bx	lr

080114d2 <__retarget_lock_acquire_recursive>:
 80114d2:	4770      	bx	lr

080114d4 <__retarget_lock_release_recursive>:
 80114d4:	4770      	bx	lr

080114d6 <memcpy>:
 80114d6:	440a      	add	r2, r1
 80114d8:	4291      	cmp	r1, r2
 80114da:	f100 33ff 	add.w	r3, r0, #4294967295
 80114de:	d100      	bne.n	80114e2 <memcpy+0xc>
 80114e0:	4770      	bx	lr
 80114e2:	b510      	push	{r4, lr}
 80114e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114ec:	4291      	cmp	r1, r2
 80114ee:	d1f9      	bne.n	80114e4 <memcpy+0xe>
 80114f0:	bd10      	pop	{r4, pc}
 80114f2:	0000      	movs	r0, r0
 80114f4:	0000      	movs	r0, r0
	...

080114f8 <nan>:
 80114f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011500 <nan+0x8>
 80114fc:	4770      	bx	lr
 80114fe:	bf00      	nop
 8011500:	00000000 	.word	0x00000000
 8011504:	7ff80000 	.word	0x7ff80000

08011508 <_free_r>:
 8011508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801150a:	2900      	cmp	r1, #0
 801150c:	d044      	beq.n	8011598 <_free_r+0x90>
 801150e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011512:	9001      	str	r0, [sp, #4]
 8011514:	2b00      	cmp	r3, #0
 8011516:	f1a1 0404 	sub.w	r4, r1, #4
 801151a:	bfb8      	it	lt
 801151c:	18e4      	addlt	r4, r4, r3
 801151e:	f7fe fec5 	bl	80102ac <__malloc_lock>
 8011522:	4a1e      	ldr	r2, [pc, #120]	; (801159c <_free_r+0x94>)
 8011524:	9801      	ldr	r0, [sp, #4]
 8011526:	6813      	ldr	r3, [r2, #0]
 8011528:	b933      	cbnz	r3, 8011538 <_free_r+0x30>
 801152a:	6063      	str	r3, [r4, #4]
 801152c:	6014      	str	r4, [r2, #0]
 801152e:	b003      	add	sp, #12
 8011530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011534:	f7fe bec0 	b.w	80102b8 <__malloc_unlock>
 8011538:	42a3      	cmp	r3, r4
 801153a:	d908      	bls.n	801154e <_free_r+0x46>
 801153c:	6825      	ldr	r5, [r4, #0]
 801153e:	1961      	adds	r1, r4, r5
 8011540:	428b      	cmp	r3, r1
 8011542:	bf01      	itttt	eq
 8011544:	6819      	ldreq	r1, [r3, #0]
 8011546:	685b      	ldreq	r3, [r3, #4]
 8011548:	1949      	addeq	r1, r1, r5
 801154a:	6021      	streq	r1, [r4, #0]
 801154c:	e7ed      	b.n	801152a <_free_r+0x22>
 801154e:	461a      	mov	r2, r3
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	b10b      	cbz	r3, 8011558 <_free_r+0x50>
 8011554:	42a3      	cmp	r3, r4
 8011556:	d9fa      	bls.n	801154e <_free_r+0x46>
 8011558:	6811      	ldr	r1, [r2, #0]
 801155a:	1855      	adds	r5, r2, r1
 801155c:	42a5      	cmp	r5, r4
 801155e:	d10b      	bne.n	8011578 <_free_r+0x70>
 8011560:	6824      	ldr	r4, [r4, #0]
 8011562:	4421      	add	r1, r4
 8011564:	1854      	adds	r4, r2, r1
 8011566:	42a3      	cmp	r3, r4
 8011568:	6011      	str	r1, [r2, #0]
 801156a:	d1e0      	bne.n	801152e <_free_r+0x26>
 801156c:	681c      	ldr	r4, [r3, #0]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	6053      	str	r3, [r2, #4]
 8011572:	440c      	add	r4, r1
 8011574:	6014      	str	r4, [r2, #0]
 8011576:	e7da      	b.n	801152e <_free_r+0x26>
 8011578:	d902      	bls.n	8011580 <_free_r+0x78>
 801157a:	230c      	movs	r3, #12
 801157c:	6003      	str	r3, [r0, #0]
 801157e:	e7d6      	b.n	801152e <_free_r+0x26>
 8011580:	6825      	ldr	r5, [r4, #0]
 8011582:	1961      	adds	r1, r4, r5
 8011584:	428b      	cmp	r3, r1
 8011586:	bf04      	itt	eq
 8011588:	6819      	ldreq	r1, [r3, #0]
 801158a:	685b      	ldreq	r3, [r3, #4]
 801158c:	6063      	str	r3, [r4, #4]
 801158e:	bf04      	itt	eq
 8011590:	1949      	addeq	r1, r1, r5
 8011592:	6021      	streq	r1, [r4, #0]
 8011594:	6054      	str	r4, [r2, #4]
 8011596:	e7ca      	b.n	801152e <_free_r+0x26>
 8011598:	b003      	add	sp, #12
 801159a:	bd30      	pop	{r4, r5, pc}
 801159c:	200032fc 	.word	0x200032fc

080115a0 <rshift>:
 80115a0:	6903      	ldr	r3, [r0, #16]
 80115a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80115a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80115ae:	f100 0414 	add.w	r4, r0, #20
 80115b2:	dd45      	ble.n	8011640 <rshift+0xa0>
 80115b4:	f011 011f 	ands.w	r1, r1, #31
 80115b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80115bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80115c0:	d10c      	bne.n	80115dc <rshift+0x3c>
 80115c2:	f100 0710 	add.w	r7, r0, #16
 80115c6:	4629      	mov	r1, r5
 80115c8:	42b1      	cmp	r1, r6
 80115ca:	d334      	bcc.n	8011636 <rshift+0x96>
 80115cc:	1a9b      	subs	r3, r3, r2
 80115ce:	009b      	lsls	r3, r3, #2
 80115d0:	1eea      	subs	r2, r5, #3
 80115d2:	4296      	cmp	r6, r2
 80115d4:	bf38      	it	cc
 80115d6:	2300      	movcc	r3, #0
 80115d8:	4423      	add	r3, r4
 80115da:	e015      	b.n	8011608 <rshift+0x68>
 80115dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80115e0:	f1c1 0820 	rsb	r8, r1, #32
 80115e4:	40cf      	lsrs	r7, r1
 80115e6:	f105 0e04 	add.w	lr, r5, #4
 80115ea:	46a1      	mov	r9, r4
 80115ec:	4576      	cmp	r6, lr
 80115ee:	46f4      	mov	ip, lr
 80115f0:	d815      	bhi.n	801161e <rshift+0x7e>
 80115f2:	1a9a      	subs	r2, r3, r2
 80115f4:	0092      	lsls	r2, r2, #2
 80115f6:	3a04      	subs	r2, #4
 80115f8:	3501      	adds	r5, #1
 80115fa:	42ae      	cmp	r6, r5
 80115fc:	bf38      	it	cc
 80115fe:	2200      	movcc	r2, #0
 8011600:	18a3      	adds	r3, r4, r2
 8011602:	50a7      	str	r7, [r4, r2]
 8011604:	b107      	cbz	r7, 8011608 <rshift+0x68>
 8011606:	3304      	adds	r3, #4
 8011608:	1b1a      	subs	r2, r3, r4
 801160a:	42a3      	cmp	r3, r4
 801160c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011610:	bf08      	it	eq
 8011612:	2300      	moveq	r3, #0
 8011614:	6102      	str	r2, [r0, #16]
 8011616:	bf08      	it	eq
 8011618:	6143      	streq	r3, [r0, #20]
 801161a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801161e:	f8dc c000 	ldr.w	ip, [ip]
 8011622:	fa0c fc08 	lsl.w	ip, ip, r8
 8011626:	ea4c 0707 	orr.w	r7, ip, r7
 801162a:	f849 7b04 	str.w	r7, [r9], #4
 801162e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011632:	40cf      	lsrs	r7, r1
 8011634:	e7da      	b.n	80115ec <rshift+0x4c>
 8011636:	f851 cb04 	ldr.w	ip, [r1], #4
 801163a:	f847 cf04 	str.w	ip, [r7, #4]!
 801163e:	e7c3      	b.n	80115c8 <rshift+0x28>
 8011640:	4623      	mov	r3, r4
 8011642:	e7e1      	b.n	8011608 <rshift+0x68>

08011644 <__hexdig_fun>:
 8011644:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011648:	2b09      	cmp	r3, #9
 801164a:	d802      	bhi.n	8011652 <__hexdig_fun+0xe>
 801164c:	3820      	subs	r0, #32
 801164e:	b2c0      	uxtb	r0, r0
 8011650:	4770      	bx	lr
 8011652:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011656:	2b05      	cmp	r3, #5
 8011658:	d801      	bhi.n	801165e <__hexdig_fun+0x1a>
 801165a:	3847      	subs	r0, #71	; 0x47
 801165c:	e7f7      	b.n	801164e <__hexdig_fun+0xa>
 801165e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011662:	2b05      	cmp	r3, #5
 8011664:	d801      	bhi.n	801166a <__hexdig_fun+0x26>
 8011666:	3827      	subs	r0, #39	; 0x27
 8011668:	e7f1      	b.n	801164e <__hexdig_fun+0xa>
 801166a:	2000      	movs	r0, #0
 801166c:	4770      	bx	lr
	...

08011670 <__gethex>:
 8011670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011674:	4617      	mov	r7, r2
 8011676:	680a      	ldr	r2, [r1, #0]
 8011678:	b085      	sub	sp, #20
 801167a:	f102 0b02 	add.w	fp, r2, #2
 801167e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011682:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011686:	4681      	mov	r9, r0
 8011688:	468a      	mov	sl, r1
 801168a:	9302      	str	r3, [sp, #8]
 801168c:	32fe      	adds	r2, #254	; 0xfe
 801168e:	eb02 030b 	add.w	r3, r2, fp
 8011692:	46d8      	mov	r8, fp
 8011694:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011698:	9301      	str	r3, [sp, #4]
 801169a:	2830      	cmp	r0, #48	; 0x30
 801169c:	d0f7      	beq.n	801168e <__gethex+0x1e>
 801169e:	f7ff ffd1 	bl	8011644 <__hexdig_fun>
 80116a2:	4604      	mov	r4, r0
 80116a4:	2800      	cmp	r0, #0
 80116a6:	d138      	bne.n	801171a <__gethex+0xaa>
 80116a8:	49a7      	ldr	r1, [pc, #668]	; (8011948 <__gethex+0x2d8>)
 80116aa:	2201      	movs	r2, #1
 80116ac:	4640      	mov	r0, r8
 80116ae:	f7ff fe38 	bl	8011322 <strncmp>
 80116b2:	4606      	mov	r6, r0
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d169      	bne.n	801178c <__gethex+0x11c>
 80116b8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80116bc:	465d      	mov	r5, fp
 80116be:	f7ff ffc1 	bl	8011644 <__hexdig_fun>
 80116c2:	2800      	cmp	r0, #0
 80116c4:	d064      	beq.n	8011790 <__gethex+0x120>
 80116c6:	465a      	mov	r2, fp
 80116c8:	7810      	ldrb	r0, [r2, #0]
 80116ca:	2830      	cmp	r0, #48	; 0x30
 80116cc:	4690      	mov	r8, r2
 80116ce:	f102 0201 	add.w	r2, r2, #1
 80116d2:	d0f9      	beq.n	80116c8 <__gethex+0x58>
 80116d4:	f7ff ffb6 	bl	8011644 <__hexdig_fun>
 80116d8:	2301      	movs	r3, #1
 80116da:	fab0 f480 	clz	r4, r0
 80116de:	0964      	lsrs	r4, r4, #5
 80116e0:	465e      	mov	r6, fp
 80116e2:	9301      	str	r3, [sp, #4]
 80116e4:	4642      	mov	r2, r8
 80116e6:	4615      	mov	r5, r2
 80116e8:	3201      	adds	r2, #1
 80116ea:	7828      	ldrb	r0, [r5, #0]
 80116ec:	f7ff ffaa 	bl	8011644 <__hexdig_fun>
 80116f0:	2800      	cmp	r0, #0
 80116f2:	d1f8      	bne.n	80116e6 <__gethex+0x76>
 80116f4:	4994      	ldr	r1, [pc, #592]	; (8011948 <__gethex+0x2d8>)
 80116f6:	2201      	movs	r2, #1
 80116f8:	4628      	mov	r0, r5
 80116fa:	f7ff fe12 	bl	8011322 <strncmp>
 80116fe:	b978      	cbnz	r0, 8011720 <__gethex+0xb0>
 8011700:	b946      	cbnz	r6, 8011714 <__gethex+0xa4>
 8011702:	1c6e      	adds	r6, r5, #1
 8011704:	4632      	mov	r2, r6
 8011706:	4615      	mov	r5, r2
 8011708:	3201      	adds	r2, #1
 801170a:	7828      	ldrb	r0, [r5, #0]
 801170c:	f7ff ff9a 	bl	8011644 <__hexdig_fun>
 8011710:	2800      	cmp	r0, #0
 8011712:	d1f8      	bne.n	8011706 <__gethex+0x96>
 8011714:	1b73      	subs	r3, r6, r5
 8011716:	009e      	lsls	r6, r3, #2
 8011718:	e004      	b.n	8011724 <__gethex+0xb4>
 801171a:	2400      	movs	r4, #0
 801171c:	4626      	mov	r6, r4
 801171e:	e7e1      	b.n	80116e4 <__gethex+0x74>
 8011720:	2e00      	cmp	r6, #0
 8011722:	d1f7      	bne.n	8011714 <__gethex+0xa4>
 8011724:	782b      	ldrb	r3, [r5, #0]
 8011726:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801172a:	2b50      	cmp	r3, #80	; 0x50
 801172c:	d13d      	bne.n	80117aa <__gethex+0x13a>
 801172e:	786b      	ldrb	r3, [r5, #1]
 8011730:	2b2b      	cmp	r3, #43	; 0x2b
 8011732:	d02f      	beq.n	8011794 <__gethex+0x124>
 8011734:	2b2d      	cmp	r3, #45	; 0x2d
 8011736:	d031      	beq.n	801179c <__gethex+0x12c>
 8011738:	1c69      	adds	r1, r5, #1
 801173a:	f04f 0b00 	mov.w	fp, #0
 801173e:	7808      	ldrb	r0, [r1, #0]
 8011740:	f7ff ff80 	bl	8011644 <__hexdig_fun>
 8011744:	1e42      	subs	r2, r0, #1
 8011746:	b2d2      	uxtb	r2, r2
 8011748:	2a18      	cmp	r2, #24
 801174a:	d82e      	bhi.n	80117aa <__gethex+0x13a>
 801174c:	f1a0 0210 	sub.w	r2, r0, #16
 8011750:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011754:	f7ff ff76 	bl	8011644 <__hexdig_fun>
 8011758:	f100 3cff 	add.w	ip, r0, #4294967295
 801175c:	fa5f fc8c 	uxtb.w	ip, ip
 8011760:	f1bc 0f18 	cmp.w	ip, #24
 8011764:	d91d      	bls.n	80117a2 <__gethex+0x132>
 8011766:	f1bb 0f00 	cmp.w	fp, #0
 801176a:	d000      	beq.n	801176e <__gethex+0xfe>
 801176c:	4252      	negs	r2, r2
 801176e:	4416      	add	r6, r2
 8011770:	f8ca 1000 	str.w	r1, [sl]
 8011774:	b1dc      	cbz	r4, 80117ae <__gethex+0x13e>
 8011776:	9b01      	ldr	r3, [sp, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	bf14      	ite	ne
 801177c:	f04f 0800 	movne.w	r8, #0
 8011780:	f04f 0806 	moveq.w	r8, #6
 8011784:	4640      	mov	r0, r8
 8011786:	b005      	add	sp, #20
 8011788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178c:	4645      	mov	r5, r8
 801178e:	4626      	mov	r6, r4
 8011790:	2401      	movs	r4, #1
 8011792:	e7c7      	b.n	8011724 <__gethex+0xb4>
 8011794:	f04f 0b00 	mov.w	fp, #0
 8011798:	1ca9      	adds	r1, r5, #2
 801179a:	e7d0      	b.n	801173e <__gethex+0xce>
 801179c:	f04f 0b01 	mov.w	fp, #1
 80117a0:	e7fa      	b.n	8011798 <__gethex+0x128>
 80117a2:	230a      	movs	r3, #10
 80117a4:	fb03 0002 	mla	r0, r3, r2, r0
 80117a8:	e7d0      	b.n	801174c <__gethex+0xdc>
 80117aa:	4629      	mov	r1, r5
 80117ac:	e7e0      	b.n	8011770 <__gethex+0x100>
 80117ae:	eba5 0308 	sub.w	r3, r5, r8
 80117b2:	3b01      	subs	r3, #1
 80117b4:	4621      	mov	r1, r4
 80117b6:	2b07      	cmp	r3, #7
 80117b8:	dc0a      	bgt.n	80117d0 <__gethex+0x160>
 80117ba:	4648      	mov	r0, r9
 80117bc:	f000 fa5a 	bl	8011c74 <_Balloc>
 80117c0:	4604      	mov	r4, r0
 80117c2:	b940      	cbnz	r0, 80117d6 <__gethex+0x166>
 80117c4:	4b61      	ldr	r3, [pc, #388]	; (801194c <__gethex+0x2dc>)
 80117c6:	4602      	mov	r2, r0
 80117c8:	21e4      	movs	r1, #228	; 0xe4
 80117ca:	4861      	ldr	r0, [pc, #388]	; (8011950 <__gethex+0x2e0>)
 80117cc:	f002 f816 	bl	80137fc <__assert_func>
 80117d0:	3101      	adds	r1, #1
 80117d2:	105b      	asrs	r3, r3, #1
 80117d4:	e7ef      	b.n	80117b6 <__gethex+0x146>
 80117d6:	f100 0a14 	add.w	sl, r0, #20
 80117da:	2300      	movs	r3, #0
 80117dc:	495a      	ldr	r1, [pc, #360]	; (8011948 <__gethex+0x2d8>)
 80117de:	f8cd a004 	str.w	sl, [sp, #4]
 80117e2:	469b      	mov	fp, r3
 80117e4:	45a8      	cmp	r8, r5
 80117e6:	d342      	bcc.n	801186e <__gethex+0x1fe>
 80117e8:	9801      	ldr	r0, [sp, #4]
 80117ea:	f840 bb04 	str.w	fp, [r0], #4
 80117ee:	eba0 000a 	sub.w	r0, r0, sl
 80117f2:	1080      	asrs	r0, r0, #2
 80117f4:	6120      	str	r0, [r4, #16]
 80117f6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80117fa:	4658      	mov	r0, fp
 80117fc:	f000 fb2c 	bl	8011e58 <__hi0bits>
 8011800:	683d      	ldr	r5, [r7, #0]
 8011802:	eba8 0000 	sub.w	r0, r8, r0
 8011806:	42a8      	cmp	r0, r5
 8011808:	dd59      	ble.n	80118be <__gethex+0x24e>
 801180a:	eba0 0805 	sub.w	r8, r0, r5
 801180e:	4641      	mov	r1, r8
 8011810:	4620      	mov	r0, r4
 8011812:	f000 febb 	bl	801258c <__any_on>
 8011816:	4683      	mov	fp, r0
 8011818:	b1b8      	cbz	r0, 801184a <__gethex+0x1da>
 801181a:	f108 33ff 	add.w	r3, r8, #4294967295
 801181e:	1159      	asrs	r1, r3, #5
 8011820:	f003 021f 	and.w	r2, r3, #31
 8011824:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011828:	f04f 0b01 	mov.w	fp, #1
 801182c:	fa0b f202 	lsl.w	r2, fp, r2
 8011830:	420a      	tst	r2, r1
 8011832:	d00a      	beq.n	801184a <__gethex+0x1da>
 8011834:	455b      	cmp	r3, fp
 8011836:	dd06      	ble.n	8011846 <__gethex+0x1d6>
 8011838:	f1a8 0102 	sub.w	r1, r8, #2
 801183c:	4620      	mov	r0, r4
 801183e:	f000 fea5 	bl	801258c <__any_on>
 8011842:	2800      	cmp	r0, #0
 8011844:	d138      	bne.n	80118b8 <__gethex+0x248>
 8011846:	f04f 0b02 	mov.w	fp, #2
 801184a:	4641      	mov	r1, r8
 801184c:	4620      	mov	r0, r4
 801184e:	f7ff fea7 	bl	80115a0 <rshift>
 8011852:	4446      	add	r6, r8
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	42b3      	cmp	r3, r6
 8011858:	da41      	bge.n	80118de <__gethex+0x26e>
 801185a:	4621      	mov	r1, r4
 801185c:	4648      	mov	r0, r9
 801185e:	f000 fa49 	bl	8011cf4 <_Bfree>
 8011862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011864:	2300      	movs	r3, #0
 8011866:	6013      	str	r3, [r2, #0]
 8011868:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801186c:	e78a      	b.n	8011784 <__gethex+0x114>
 801186e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011872:	2a2e      	cmp	r2, #46	; 0x2e
 8011874:	d014      	beq.n	80118a0 <__gethex+0x230>
 8011876:	2b20      	cmp	r3, #32
 8011878:	d106      	bne.n	8011888 <__gethex+0x218>
 801187a:	9b01      	ldr	r3, [sp, #4]
 801187c:	f843 bb04 	str.w	fp, [r3], #4
 8011880:	f04f 0b00 	mov.w	fp, #0
 8011884:	9301      	str	r3, [sp, #4]
 8011886:	465b      	mov	r3, fp
 8011888:	7828      	ldrb	r0, [r5, #0]
 801188a:	9303      	str	r3, [sp, #12]
 801188c:	f7ff feda 	bl	8011644 <__hexdig_fun>
 8011890:	9b03      	ldr	r3, [sp, #12]
 8011892:	f000 000f 	and.w	r0, r0, #15
 8011896:	4098      	lsls	r0, r3
 8011898:	ea4b 0b00 	orr.w	fp, fp, r0
 801189c:	3304      	adds	r3, #4
 801189e:	e7a1      	b.n	80117e4 <__gethex+0x174>
 80118a0:	45a8      	cmp	r8, r5
 80118a2:	d8e8      	bhi.n	8011876 <__gethex+0x206>
 80118a4:	2201      	movs	r2, #1
 80118a6:	4628      	mov	r0, r5
 80118a8:	9303      	str	r3, [sp, #12]
 80118aa:	f7ff fd3a 	bl	8011322 <strncmp>
 80118ae:	4926      	ldr	r1, [pc, #152]	; (8011948 <__gethex+0x2d8>)
 80118b0:	9b03      	ldr	r3, [sp, #12]
 80118b2:	2800      	cmp	r0, #0
 80118b4:	d1df      	bne.n	8011876 <__gethex+0x206>
 80118b6:	e795      	b.n	80117e4 <__gethex+0x174>
 80118b8:	f04f 0b03 	mov.w	fp, #3
 80118bc:	e7c5      	b.n	801184a <__gethex+0x1da>
 80118be:	da0b      	bge.n	80118d8 <__gethex+0x268>
 80118c0:	eba5 0800 	sub.w	r8, r5, r0
 80118c4:	4621      	mov	r1, r4
 80118c6:	4642      	mov	r2, r8
 80118c8:	4648      	mov	r0, r9
 80118ca:	f000 fc2d 	bl	8012128 <__lshift>
 80118ce:	eba6 0608 	sub.w	r6, r6, r8
 80118d2:	4604      	mov	r4, r0
 80118d4:	f100 0a14 	add.w	sl, r0, #20
 80118d8:	f04f 0b00 	mov.w	fp, #0
 80118dc:	e7ba      	b.n	8011854 <__gethex+0x1e4>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	42b3      	cmp	r3, r6
 80118e2:	dd73      	ble.n	80119cc <__gethex+0x35c>
 80118e4:	1b9e      	subs	r6, r3, r6
 80118e6:	42b5      	cmp	r5, r6
 80118e8:	dc34      	bgt.n	8011954 <__gethex+0x2e4>
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2b02      	cmp	r3, #2
 80118ee:	d023      	beq.n	8011938 <__gethex+0x2c8>
 80118f0:	2b03      	cmp	r3, #3
 80118f2:	d025      	beq.n	8011940 <__gethex+0x2d0>
 80118f4:	2b01      	cmp	r3, #1
 80118f6:	d115      	bne.n	8011924 <__gethex+0x2b4>
 80118f8:	42b5      	cmp	r5, r6
 80118fa:	d113      	bne.n	8011924 <__gethex+0x2b4>
 80118fc:	2d01      	cmp	r5, #1
 80118fe:	d10b      	bne.n	8011918 <__gethex+0x2a8>
 8011900:	9a02      	ldr	r2, [sp, #8]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6013      	str	r3, [r2, #0]
 8011906:	2301      	movs	r3, #1
 8011908:	6123      	str	r3, [r4, #16]
 801190a:	f8ca 3000 	str.w	r3, [sl]
 801190e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011910:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011914:	601c      	str	r4, [r3, #0]
 8011916:	e735      	b.n	8011784 <__gethex+0x114>
 8011918:	1e69      	subs	r1, r5, #1
 801191a:	4620      	mov	r0, r4
 801191c:	f000 fe36 	bl	801258c <__any_on>
 8011920:	2800      	cmp	r0, #0
 8011922:	d1ed      	bne.n	8011900 <__gethex+0x290>
 8011924:	4621      	mov	r1, r4
 8011926:	4648      	mov	r0, r9
 8011928:	f000 f9e4 	bl	8011cf4 <_Bfree>
 801192c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801192e:	2300      	movs	r3, #0
 8011930:	6013      	str	r3, [r2, #0]
 8011932:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011936:	e725      	b.n	8011784 <__gethex+0x114>
 8011938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801193a:	2b00      	cmp	r3, #0
 801193c:	d1f2      	bne.n	8011924 <__gethex+0x2b4>
 801193e:	e7df      	b.n	8011900 <__gethex+0x290>
 8011940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011942:	2b00      	cmp	r3, #0
 8011944:	d1dc      	bne.n	8011900 <__gethex+0x290>
 8011946:	e7ed      	b.n	8011924 <__gethex+0x2b4>
 8011948:	080144d4 	.word	0x080144d4
 801194c:	08014641 	.word	0x08014641
 8011950:	08014652 	.word	0x08014652
 8011954:	f106 38ff 	add.w	r8, r6, #4294967295
 8011958:	f1bb 0f00 	cmp.w	fp, #0
 801195c:	d133      	bne.n	80119c6 <__gethex+0x356>
 801195e:	f1b8 0f00 	cmp.w	r8, #0
 8011962:	d004      	beq.n	801196e <__gethex+0x2fe>
 8011964:	4641      	mov	r1, r8
 8011966:	4620      	mov	r0, r4
 8011968:	f000 fe10 	bl	801258c <__any_on>
 801196c:	4683      	mov	fp, r0
 801196e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011972:	2301      	movs	r3, #1
 8011974:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011978:	f008 081f 	and.w	r8, r8, #31
 801197c:	fa03 f308 	lsl.w	r3, r3, r8
 8011980:	4213      	tst	r3, r2
 8011982:	4631      	mov	r1, r6
 8011984:	4620      	mov	r0, r4
 8011986:	bf18      	it	ne
 8011988:	f04b 0b02 	orrne.w	fp, fp, #2
 801198c:	1bad      	subs	r5, r5, r6
 801198e:	f7ff fe07 	bl	80115a0 <rshift>
 8011992:	687e      	ldr	r6, [r7, #4]
 8011994:	f04f 0802 	mov.w	r8, #2
 8011998:	f1bb 0f00 	cmp.w	fp, #0
 801199c:	d04a      	beq.n	8011a34 <__gethex+0x3c4>
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2b02      	cmp	r3, #2
 80119a2:	d016      	beq.n	80119d2 <__gethex+0x362>
 80119a4:	2b03      	cmp	r3, #3
 80119a6:	d018      	beq.n	80119da <__gethex+0x36a>
 80119a8:	2b01      	cmp	r3, #1
 80119aa:	d109      	bne.n	80119c0 <__gethex+0x350>
 80119ac:	f01b 0f02 	tst.w	fp, #2
 80119b0:	d006      	beq.n	80119c0 <__gethex+0x350>
 80119b2:	f8da 3000 	ldr.w	r3, [sl]
 80119b6:	ea4b 0b03 	orr.w	fp, fp, r3
 80119ba:	f01b 0f01 	tst.w	fp, #1
 80119be:	d10f      	bne.n	80119e0 <__gethex+0x370>
 80119c0:	f048 0810 	orr.w	r8, r8, #16
 80119c4:	e036      	b.n	8011a34 <__gethex+0x3c4>
 80119c6:	f04f 0b01 	mov.w	fp, #1
 80119ca:	e7d0      	b.n	801196e <__gethex+0x2fe>
 80119cc:	f04f 0801 	mov.w	r8, #1
 80119d0:	e7e2      	b.n	8011998 <__gethex+0x328>
 80119d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119d4:	f1c3 0301 	rsb	r3, r3, #1
 80119d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80119da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d0ef      	beq.n	80119c0 <__gethex+0x350>
 80119e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80119e4:	f104 0214 	add.w	r2, r4, #20
 80119e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80119ec:	9301      	str	r3, [sp, #4]
 80119ee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80119f2:	2300      	movs	r3, #0
 80119f4:	4694      	mov	ip, r2
 80119f6:	f852 1b04 	ldr.w	r1, [r2], #4
 80119fa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80119fe:	d01e      	beq.n	8011a3e <__gethex+0x3ce>
 8011a00:	3101      	adds	r1, #1
 8011a02:	f8cc 1000 	str.w	r1, [ip]
 8011a06:	f1b8 0f02 	cmp.w	r8, #2
 8011a0a:	f104 0214 	add.w	r2, r4, #20
 8011a0e:	d13d      	bne.n	8011a8c <__gethex+0x41c>
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	3b01      	subs	r3, #1
 8011a14:	42ab      	cmp	r3, r5
 8011a16:	d10b      	bne.n	8011a30 <__gethex+0x3c0>
 8011a18:	1169      	asrs	r1, r5, #5
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	f005 051f 	and.w	r5, r5, #31
 8011a20:	fa03 f505 	lsl.w	r5, r3, r5
 8011a24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a28:	421d      	tst	r5, r3
 8011a2a:	bf18      	it	ne
 8011a2c:	f04f 0801 	movne.w	r8, #1
 8011a30:	f048 0820 	orr.w	r8, r8, #32
 8011a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a36:	601c      	str	r4, [r3, #0]
 8011a38:	9b02      	ldr	r3, [sp, #8]
 8011a3a:	601e      	str	r6, [r3, #0]
 8011a3c:	e6a2      	b.n	8011784 <__gethex+0x114>
 8011a3e:	4290      	cmp	r0, r2
 8011a40:	f842 3c04 	str.w	r3, [r2, #-4]
 8011a44:	d8d6      	bhi.n	80119f4 <__gethex+0x384>
 8011a46:	68a2      	ldr	r2, [r4, #8]
 8011a48:	4593      	cmp	fp, r2
 8011a4a:	db17      	blt.n	8011a7c <__gethex+0x40c>
 8011a4c:	6861      	ldr	r1, [r4, #4]
 8011a4e:	4648      	mov	r0, r9
 8011a50:	3101      	adds	r1, #1
 8011a52:	f000 f90f 	bl	8011c74 <_Balloc>
 8011a56:	4682      	mov	sl, r0
 8011a58:	b918      	cbnz	r0, 8011a62 <__gethex+0x3f2>
 8011a5a:	4b1b      	ldr	r3, [pc, #108]	; (8011ac8 <__gethex+0x458>)
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	2184      	movs	r1, #132	; 0x84
 8011a60:	e6b3      	b.n	80117ca <__gethex+0x15a>
 8011a62:	6922      	ldr	r2, [r4, #16]
 8011a64:	3202      	adds	r2, #2
 8011a66:	f104 010c 	add.w	r1, r4, #12
 8011a6a:	0092      	lsls	r2, r2, #2
 8011a6c:	300c      	adds	r0, #12
 8011a6e:	f7ff fd32 	bl	80114d6 <memcpy>
 8011a72:	4621      	mov	r1, r4
 8011a74:	4648      	mov	r0, r9
 8011a76:	f000 f93d 	bl	8011cf4 <_Bfree>
 8011a7a:	4654      	mov	r4, sl
 8011a7c:	6922      	ldr	r2, [r4, #16]
 8011a7e:	1c51      	adds	r1, r2, #1
 8011a80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011a84:	6121      	str	r1, [r4, #16]
 8011a86:	2101      	movs	r1, #1
 8011a88:	6151      	str	r1, [r2, #20]
 8011a8a:	e7bc      	b.n	8011a06 <__gethex+0x396>
 8011a8c:	6921      	ldr	r1, [r4, #16]
 8011a8e:	4559      	cmp	r1, fp
 8011a90:	dd0b      	ble.n	8011aaa <__gethex+0x43a>
 8011a92:	2101      	movs	r1, #1
 8011a94:	4620      	mov	r0, r4
 8011a96:	f7ff fd83 	bl	80115a0 <rshift>
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	3601      	adds	r6, #1
 8011a9e:	42b3      	cmp	r3, r6
 8011aa0:	f6ff aedb 	blt.w	801185a <__gethex+0x1ea>
 8011aa4:	f04f 0801 	mov.w	r8, #1
 8011aa8:	e7c2      	b.n	8011a30 <__gethex+0x3c0>
 8011aaa:	f015 051f 	ands.w	r5, r5, #31
 8011aae:	d0f9      	beq.n	8011aa4 <__gethex+0x434>
 8011ab0:	9b01      	ldr	r3, [sp, #4]
 8011ab2:	441a      	add	r2, r3
 8011ab4:	f1c5 0520 	rsb	r5, r5, #32
 8011ab8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011abc:	f000 f9cc 	bl	8011e58 <__hi0bits>
 8011ac0:	42a8      	cmp	r0, r5
 8011ac2:	dbe6      	blt.n	8011a92 <__gethex+0x422>
 8011ac4:	e7ee      	b.n	8011aa4 <__gethex+0x434>
 8011ac6:	bf00      	nop
 8011ac8:	08014641 	.word	0x08014641

08011acc <L_shift>:
 8011acc:	f1c2 0208 	rsb	r2, r2, #8
 8011ad0:	0092      	lsls	r2, r2, #2
 8011ad2:	b570      	push	{r4, r5, r6, lr}
 8011ad4:	f1c2 0620 	rsb	r6, r2, #32
 8011ad8:	6843      	ldr	r3, [r0, #4]
 8011ada:	6804      	ldr	r4, [r0, #0]
 8011adc:	fa03 f506 	lsl.w	r5, r3, r6
 8011ae0:	432c      	orrs	r4, r5
 8011ae2:	40d3      	lsrs	r3, r2
 8011ae4:	6004      	str	r4, [r0, #0]
 8011ae6:	f840 3f04 	str.w	r3, [r0, #4]!
 8011aea:	4288      	cmp	r0, r1
 8011aec:	d3f4      	bcc.n	8011ad8 <L_shift+0xc>
 8011aee:	bd70      	pop	{r4, r5, r6, pc}

08011af0 <__match>:
 8011af0:	b530      	push	{r4, r5, lr}
 8011af2:	6803      	ldr	r3, [r0, #0]
 8011af4:	3301      	adds	r3, #1
 8011af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011afa:	b914      	cbnz	r4, 8011b02 <__match+0x12>
 8011afc:	6003      	str	r3, [r0, #0]
 8011afe:	2001      	movs	r0, #1
 8011b00:	bd30      	pop	{r4, r5, pc}
 8011b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011b0a:	2d19      	cmp	r5, #25
 8011b0c:	bf98      	it	ls
 8011b0e:	3220      	addls	r2, #32
 8011b10:	42a2      	cmp	r2, r4
 8011b12:	d0f0      	beq.n	8011af6 <__match+0x6>
 8011b14:	2000      	movs	r0, #0
 8011b16:	e7f3      	b.n	8011b00 <__match+0x10>

08011b18 <__hexnan>:
 8011b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1c:	680b      	ldr	r3, [r1, #0]
 8011b1e:	6801      	ldr	r1, [r0, #0]
 8011b20:	115e      	asrs	r6, r3, #5
 8011b22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011b26:	f013 031f 	ands.w	r3, r3, #31
 8011b2a:	b087      	sub	sp, #28
 8011b2c:	bf18      	it	ne
 8011b2e:	3604      	addne	r6, #4
 8011b30:	2500      	movs	r5, #0
 8011b32:	1f37      	subs	r7, r6, #4
 8011b34:	4682      	mov	sl, r0
 8011b36:	4690      	mov	r8, r2
 8011b38:	9301      	str	r3, [sp, #4]
 8011b3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011b3e:	46b9      	mov	r9, r7
 8011b40:	463c      	mov	r4, r7
 8011b42:	9502      	str	r5, [sp, #8]
 8011b44:	46ab      	mov	fp, r5
 8011b46:	784a      	ldrb	r2, [r1, #1]
 8011b48:	1c4b      	adds	r3, r1, #1
 8011b4a:	9303      	str	r3, [sp, #12]
 8011b4c:	b342      	cbz	r2, 8011ba0 <__hexnan+0x88>
 8011b4e:	4610      	mov	r0, r2
 8011b50:	9105      	str	r1, [sp, #20]
 8011b52:	9204      	str	r2, [sp, #16]
 8011b54:	f7ff fd76 	bl	8011644 <__hexdig_fun>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d14f      	bne.n	8011bfc <__hexnan+0xe4>
 8011b5c:	9a04      	ldr	r2, [sp, #16]
 8011b5e:	9905      	ldr	r1, [sp, #20]
 8011b60:	2a20      	cmp	r2, #32
 8011b62:	d818      	bhi.n	8011b96 <__hexnan+0x7e>
 8011b64:	9b02      	ldr	r3, [sp, #8]
 8011b66:	459b      	cmp	fp, r3
 8011b68:	dd13      	ble.n	8011b92 <__hexnan+0x7a>
 8011b6a:	454c      	cmp	r4, r9
 8011b6c:	d206      	bcs.n	8011b7c <__hexnan+0x64>
 8011b6e:	2d07      	cmp	r5, #7
 8011b70:	dc04      	bgt.n	8011b7c <__hexnan+0x64>
 8011b72:	462a      	mov	r2, r5
 8011b74:	4649      	mov	r1, r9
 8011b76:	4620      	mov	r0, r4
 8011b78:	f7ff ffa8 	bl	8011acc <L_shift>
 8011b7c:	4544      	cmp	r4, r8
 8011b7e:	d950      	bls.n	8011c22 <__hexnan+0x10a>
 8011b80:	2300      	movs	r3, #0
 8011b82:	f1a4 0904 	sub.w	r9, r4, #4
 8011b86:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b8a:	f8cd b008 	str.w	fp, [sp, #8]
 8011b8e:	464c      	mov	r4, r9
 8011b90:	461d      	mov	r5, r3
 8011b92:	9903      	ldr	r1, [sp, #12]
 8011b94:	e7d7      	b.n	8011b46 <__hexnan+0x2e>
 8011b96:	2a29      	cmp	r2, #41	; 0x29
 8011b98:	d155      	bne.n	8011c46 <__hexnan+0x12e>
 8011b9a:	3102      	adds	r1, #2
 8011b9c:	f8ca 1000 	str.w	r1, [sl]
 8011ba0:	f1bb 0f00 	cmp.w	fp, #0
 8011ba4:	d04f      	beq.n	8011c46 <__hexnan+0x12e>
 8011ba6:	454c      	cmp	r4, r9
 8011ba8:	d206      	bcs.n	8011bb8 <__hexnan+0xa0>
 8011baa:	2d07      	cmp	r5, #7
 8011bac:	dc04      	bgt.n	8011bb8 <__hexnan+0xa0>
 8011bae:	462a      	mov	r2, r5
 8011bb0:	4649      	mov	r1, r9
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f7ff ff8a 	bl	8011acc <L_shift>
 8011bb8:	4544      	cmp	r4, r8
 8011bba:	d934      	bls.n	8011c26 <__hexnan+0x10e>
 8011bbc:	f1a8 0204 	sub.w	r2, r8, #4
 8011bc0:	4623      	mov	r3, r4
 8011bc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011bc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8011bca:	429f      	cmp	r7, r3
 8011bcc:	d2f9      	bcs.n	8011bc2 <__hexnan+0xaa>
 8011bce:	1b3b      	subs	r3, r7, r4
 8011bd0:	f023 0303 	bic.w	r3, r3, #3
 8011bd4:	3304      	adds	r3, #4
 8011bd6:	3e03      	subs	r6, #3
 8011bd8:	3401      	adds	r4, #1
 8011bda:	42a6      	cmp	r6, r4
 8011bdc:	bf38      	it	cc
 8011bde:	2304      	movcc	r3, #4
 8011be0:	4443      	add	r3, r8
 8011be2:	2200      	movs	r2, #0
 8011be4:	f843 2b04 	str.w	r2, [r3], #4
 8011be8:	429f      	cmp	r7, r3
 8011bea:	d2fb      	bcs.n	8011be4 <__hexnan+0xcc>
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	b91b      	cbnz	r3, 8011bf8 <__hexnan+0xe0>
 8011bf0:	4547      	cmp	r7, r8
 8011bf2:	d126      	bne.n	8011c42 <__hexnan+0x12a>
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	603b      	str	r3, [r7, #0]
 8011bf8:	2005      	movs	r0, #5
 8011bfa:	e025      	b.n	8011c48 <__hexnan+0x130>
 8011bfc:	3501      	adds	r5, #1
 8011bfe:	2d08      	cmp	r5, #8
 8011c00:	f10b 0b01 	add.w	fp, fp, #1
 8011c04:	dd06      	ble.n	8011c14 <__hexnan+0xfc>
 8011c06:	4544      	cmp	r4, r8
 8011c08:	d9c3      	bls.n	8011b92 <__hexnan+0x7a>
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c10:	2501      	movs	r5, #1
 8011c12:	3c04      	subs	r4, #4
 8011c14:	6822      	ldr	r2, [r4, #0]
 8011c16:	f000 000f 	and.w	r0, r0, #15
 8011c1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011c1e:	6020      	str	r0, [r4, #0]
 8011c20:	e7b7      	b.n	8011b92 <__hexnan+0x7a>
 8011c22:	2508      	movs	r5, #8
 8011c24:	e7b5      	b.n	8011b92 <__hexnan+0x7a>
 8011c26:	9b01      	ldr	r3, [sp, #4]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d0df      	beq.n	8011bec <__hexnan+0xd4>
 8011c2c:	f1c3 0320 	rsb	r3, r3, #32
 8011c30:	f04f 32ff 	mov.w	r2, #4294967295
 8011c34:	40da      	lsrs	r2, r3
 8011c36:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011c3a:	4013      	ands	r3, r2
 8011c3c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011c40:	e7d4      	b.n	8011bec <__hexnan+0xd4>
 8011c42:	3f04      	subs	r7, #4
 8011c44:	e7d2      	b.n	8011bec <__hexnan+0xd4>
 8011c46:	2004      	movs	r0, #4
 8011c48:	b007      	add	sp, #28
 8011c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c4e <__ascii_mbtowc>:
 8011c4e:	b082      	sub	sp, #8
 8011c50:	b901      	cbnz	r1, 8011c54 <__ascii_mbtowc+0x6>
 8011c52:	a901      	add	r1, sp, #4
 8011c54:	b142      	cbz	r2, 8011c68 <__ascii_mbtowc+0x1a>
 8011c56:	b14b      	cbz	r3, 8011c6c <__ascii_mbtowc+0x1e>
 8011c58:	7813      	ldrb	r3, [r2, #0]
 8011c5a:	600b      	str	r3, [r1, #0]
 8011c5c:	7812      	ldrb	r2, [r2, #0]
 8011c5e:	1e10      	subs	r0, r2, #0
 8011c60:	bf18      	it	ne
 8011c62:	2001      	movne	r0, #1
 8011c64:	b002      	add	sp, #8
 8011c66:	4770      	bx	lr
 8011c68:	4610      	mov	r0, r2
 8011c6a:	e7fb      	b.n	8011c64 <__ascii_mbtowc+0x16>
 8011c6c:	f06f 0001 	mvn.w	r0, #1
 8011c70:	e7f8      	b.n	8011c64 <__ascii_mbtowc+0x16>
	...

08011c74 <_Balloc>:
 8011c74:	b570      	push	{r4, r5, r6, lr}
 8011c76:	69c6      	ldr	r6, [r0, #28]
 8011c78:	4604      	mov	r4, r0
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	b976      	cbnz	r6, 8011c9c <_Balloc+0x28>
 8011c7e:	2010      	movs	r0, #16
 8011c80:	f7fe fa64 	bl	801014c <malloc>
 8011c84:	4602      	mov	r2, r0
 8011c86:	61e0      	str	r0, [r4, #28]
 8011c88:	b920      	cbnz	r0, 8011c94 <_Balloc+0x20>
 8011c8a:	4b18      	ldr	r3, [pc, #96]	; (8011cec <_Balloc+0x78>)
 8011c8c:	4818      	ldr	r0, [pc, #96]	; (8011cf0 <_Balloc+0x7c>)
 8011c8e:	216b      	movs	r1, #107	; 0x6b
 8011c90:	f001 fdb4 	bl	80137fc <__assert_func>
 8011c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c98:	6006      	str	r6, [r0, #0]
 8011c9a:	60c6      	str	r6, [r0, #12]
 8011c9c:	69e6      	ldr	r6, [r4, #28]
 8011c9e:	68f3      	ldr	r3, [r6, #12]
 8011ca0:	b183      	cbz	r3, 8011cc4 <_Balloc+0x50>
 8011ca2:	69e3      	ldr	r3, [r4, #28]
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011caa:	b9b8      	cbnz	r0, 8011cdc <_Balloc+0x68>
 8011cac:	2101      	movs	r1, #1
 8011cae:	fa01 f605 	lsl.w	r6, r1, r5
 8011cb2:	1d72      	adds	r2, r6, #5
 8011cb4:	0092      	lsls	r2, r2, #2
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f001 fdbe 	bl	8013838 <_calloc_r>
 8011cbc:	b160      	cbz	r0, 8011cd8 <_Balloc+0x64>
 8011cbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011cc2:	e00e      	b.n	8011ce2 <_Balloc+0x6e>
 8011cc4:	2221      	movs	r2, #33	; 0x21
 8011cc6:	2104      	movs	r1, #4
 8011cc8:	4620      	mov	r0, r4
 8011cca:	f001 fdb5 	bl	8013838 <_calloc_r>
 8011cce:	69e3      	ldr	r3, [r4, #28]
 8011cd0:	60f0      	str	r0, [r6, #12]
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d1e4      	bne.n	8011ca2 <_Balloc+0x2e>
 8011cd8:	2000      	movs	r0, #0
 8011cda:	bd70      	pop	{r4, r5, r6, pc}
 8011cdc:	6802      	ldr	r2, [r0, #0]
 8011cde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ce8:	e7f7      	b.n	8011cda <_Balloc+0x66>
 8011cea:	bf00      	nop
 8011cec:	080146b2 	.word	0x080146b2
 8011cf0:	080146c9 	.word	0x080146c9

08011cf4 <_Bfree>:
 8011cf4:	b570      	push	{r4, r5, r6, lr}
 8011cf6:	69c6      	ldr	r6, [r0, #28]
 8011cf8:	4605      	mov	r5, r0
 8011cfa:	460c      	mov	r4, r1
 8011cfc:	b976      	cbnz	r6, 8011d1c <_Bfree+0x28>
 8011cfe:	2010      	movs	r0, #16
 8011d00:	f7fe fa24 	bl	801014c <malloc>
 8011d04:	4602      	mov	r2, r0
 8011d06:	61e8      	str	r0, [r5, #28]
 8011d08:	b920      	cbnz	r0, 8011d14 <_Bfree+0x20>
 8011d0a:	4b09      	ldr	r3, [pc, #36]	; (8011d30 <_Bfree+0x3c>)
 8011d0c:	4809      	ldr	r0, [pc, #36]	; (8011d34 <_Bfree+0x40>)
 8011d0e:	218f      	movs	r1, #143	; 0x8f
 8011d10:	f001 fd74 	bl	80137fc <__assert_func>
 8011d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d18:	6006      	str	r6, [r0, #0]
 8011d1a:	60c6      	str	r6, [r0, #12]
 8011d1c:	b13c      	cbz	r4, 8011d2e <_Bfree+0x3a>
 8011d1e:	69eb      	ldr	r3, [r5, #28]
 8011d20:	6862      	ldr	r2, [r4, #4]
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d28:	6021      	str	r1, [r4, #0]
 8011d2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d2e:	bd70      	pop	{r4, r5, r6, pc}
 8011d30:	080146b2 	.word	0x080146b2
 8011d34:	080146c9 	.word	0x080146c9

08011d38 <__multadd>:
 8011d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d3c:	690d      	ldr	r5, [r1, #16]
 8011d3e:	4607      	mov	r7, r0
 8011d40:	460c      	mov	r4, r1
 8011d42:	461e      	mov	r6, r3
 8011d44:	f101 0c14 	add.w	ip, r1, #20
 8011d48:	2000      	movs	r0, #0
 8011d4a:	f8dc 3000 	ldr.w	r3, [ip]
 8011d4e:	b299      	uxth	r1, r3
 8011d50:	fb02 6101 	mla	r1, r2, r1, r6
 8011d54:	0c1e      	lsrs	r6, r3, #16
 8011d56:	0c0b      	lsrs	r3, r1, #16
 8011d58:	fb02 3306 	mla	r3, r2, r6, r3
 8011d5c:	b289      	uxth	r1, r1
 8011d5e:	3001      	adds	r0, #1
 8011d60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011d64:	4285      	cmp	r5, r0
 8011d66:	f84c 1b04 	str.w	r1, [ip], #4
 8011d6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d6e:	dcec      	bgt.n	8011d4a <__multadd+0x12>
 8011d70:	b30e      	cbz	r6, 8011db6 <__multadd+0x7e>
 8011d72:	68a3      	ldr	r3, [r4, #8]
 8011d74:	42ab      	cmp	r3, r5
 8011d76:	dc19      	bgt.n	8011dac <__multadd+0x74>
 8011d78:	6861      	ldr	r1, [r4, #4]
 8011d7a:	4638      	mov	r0, r7
 8011d7c:	3101      	adds	r1, #1
 8011d7e:	f7ff ff79 	bl	8011c74 <_Balloc>
 8011d82:	4680      	mov	r8, r0
 8011d84:	b928      	cbnz	r0, 8011d92 <__multadd+0x5a>
 8011d86:	4602      	mov	r2, r0
 8011d88:	4b0c      	ldr	r3, [pc, #48]	; (8011dbc <__multadd+0x84>)
 8011d8a:	480d      	ldr	r0, [pc, #52]	; (8011dc0 <__multadd+0x88>)
 8011d8c:	21ba      	movs	r1, #186	; 0xba
 8011d8e:	f001 fd35 	bl	80137fc <__assert_func>
 8011d92:	6922      	ldr	r2, [r4, #16]
 8011d94:	3202      	adds	r2, #2
 8011d96:	f104 010c 	add.w	r1, r4, #12
 8011d9a:	0092      	lsls	r2, r2, #2
 8011d9c:	300c      	adds	r0, #12
 8011d9e:	f7ff fb9a 	bl	80114d6 <memcpy>
 8011da2:	4621      	mov	r1, r4
 8011da4:	4638      	mov	r0, r7
 8011da6:	f7ff ffa5 	bl	8011cf4 <_Bfree>
 8011daa:	4644      	mov	r4, r8
 8011dac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011db0:	3501      	adds	r5, #1
 8011db2:	615e      	str	r6, [r3, #20]
 8011db4:	6125      	str	r5, [r4, #16]
 8011db6:	4620      	mov	r0, r4
 8011db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dbc:	08014641 	.word	0x08014641
 8011dc0:	080146c9 	.word	0x080146c9

08011dc4 <__s2b>:
 8011dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dc8:	460c      	mov	r4, r1
 8011dca:	4615      	mov	r5, r2
 8011dcc:	461f      	mov	r7, r3
 8011dce:	2209      	movs	r2, #9
 8011dd0:	3308      	adds	r3, #8
 8011dd2:	4606      	mov	r6, r0
 8011dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8011dd8:	2100      	movs	r1, #0
 8011dda:	2201      	movs	r2, #1
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	db09      	blt.n	8011df4 <__s2b+0x30>
 8011de0:	4630      	mov	r0, r6
 8011de2:	f7ff ff47 	bl	8011c74 <_Balloc>
 8011de6:	b940      	cbnz	r0, 8011dfa <__s2b+0x36>
 8011de8:	4602      	mov	r2, r0
 8011dea:	4b19      	ldr	r3, [pc, #100]	; (8011e50 <__s2b+0x8c>)
 8011dec:	4819      	ldr	r0, [pc, #100]	; (8011e54 <__s2b+0x90>)
 8011dee:	21d3      	movs	r1, #211	; 0xd3
 8011df0:	f001 fd04 	bl	80137fc <__assert_func>
 8011df4:	0052      	lsls	r2, r2, #1
 8011df6:	3101      	adds	r1, #1
 8011df8:	e7f0      	b.n	8011ddc <__s2b+0x18>
 8011dfa:	9b08      	ldr	r3, [sp, #32]
 8011dfc:	6143      	str	r3, [r0, #20]
 8011dfe:	2d09      	cmp	r5, #9
 8011e00:	f04f 0301 	mov.w	r3, #1
 8011e04:	6103      	str	r3, [r0, #16]
 8011e06:	dd16      	ble.n	8011e36 <__s2b+0x72>
 8011e08:	f104 0909 	add.w	r9, r4, #9
 8011e0c:	46c8      	mov	r8, r9
 8011e0e:	442c      	add	r4, r5
 8011e10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011e14:	4601      	mov	r1, r0
 8011e16:	3b30      	subs	r3, #48	; 0x30
 8011e18:	220a      	movs	r2, #10
 8011e1a:	4630      	mov	r0, r6
 8011e1c:	f7ff ff8c 	bl	8011d38 <__multadd>
 8011e20:	45a0      	cmp	r8, r4
 8011e22:	d1f5      	bne.n	8011e10 <__s2b+0x4c>
 8011e24:	f1a5 0408 	sub.w	r4, r5, #8
 8011e28:	444c      	add	r4, r9
 8011e2a:	1b2d      	subs	r5, r5, r4
 8011e2c:	1963      	adds	r3, r4, r5
 8011e2e:	42bb      	cmp	r3, r7
 8011e30:	db04      	blt.n	8011e3c <__s2b+0x78>
 8011e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e36:	340a      	adds	r4, #10
 8011e38:	2509      	movs	r5, #9
 8011e3a:	e7f6      	b.n	8011e2a <__s2b+0x66>
 8011e3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011e40:	4601      	mov	r1, r0
 8011e42:	3b30      	subs	r3, #48	; 0x30
 8011e44:	220a      	movs	r2, #10
 8011e46:	4630      	mov	r0, r6
 8011e48:	f7ff ff76 	bl	8011d38 <__multadd>
 8011e4c:	e7ee      	b.n	8011e2c <__s2b+0x68>
 8011e4e:	bf00      	nop
 8011e50:	08014641 	.word	0x08014641
 8011e54:	080146c9 	.word	0x080146c9

08011e58 <__hi0bits>:
 8011e58:	0c03      	lsrs	r3, r0, #16
 8011e5a:	041b      	lsls	r3, r3, #16
 8011e5c:	b9d3      	cbnz	r3, 8011e94 <__hi0bits+0x3c>
 8011e5e:	0400      	lsls	r0, r0, #16
 8011e60:	2310      	movs	r3, #16
 8011e62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011e66:	bf04      	itt	eq
 8011e68:	0200      	lsleq	r0, r0, #8
 8011e6a:	3308      	addeq	r3, #8
 8011e6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011e70:	bf04      	itt	eq
 8011e72:	0100      	lsleq	r0, r0, #4
 8011e74:	3304      	addeq	r3, #4
 8011e76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011e7a:	bf04      	itt	eq
 8011e7c:	0080      	lsleq	r0, r0, #2
 8011e7e:	3302      	addeq	r3, #2
 8011e80:	2800      	cmp	r0, #0
 8011e82:	db05      	blt.n	8011e90 <__hi0bits+0x38>
 8011e84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011e88:	f103 0301 	add.w	r3, r3, #1
 8011e8c:	bf08      	it	eq
 8011e8e:	2320      	moveq	r3, #32
 8011e90:	4618      	mov	r0, r3
 8011e92:	4770      	bx	lr
 8011e94:	2300      	movs	r3, #0
 8011e96:	e7e4      	b.n	8011e62 <__hi0bits+0xa>

08011e98 <__lo0bits>:
 8011e98:	6803      	ldr	r3, [r0, #0]
 8011e9a:	f013 0207 	ands.w	r2, r3, #7
 8011e9e:	d00c      	beq.n	8011eba <__lo0bits+0x22>
 8011ea0:	07d9      	lsls	r1, r3, #31
 8011ea2:	d422      	bmi.n	8011eea <__lo0bits+0x52>
 8011ea4:	079a      	lsls	r2, r3, #30
 8011ea6:	bf49      	itett	mi
 8011ea8:	085b      	lsrmi	r3, r3, #1
 8011eaa:	089b      	lsrpl	r3, r3, #2
 8011eac:	6003      	strmi	r3, [r0, #0]
 8011eae:	2201      	movmi	r2, #1
 8011eb0:	bf5c      	itt	pl
 8011eb2:	6003      	strpl	r3, [r0, #0]
 8011eb4:	2202      	movpl	r2, #2
 8011eb6:	4610      	mov	r0, r2
 8011eb8:	4770      	bx	lr
 8011eba:	b299      	uxth	r1, r3
 8011ebc:	b909      	cbnz	r1, 8011ec2 <__lo0bits+0x2a>
 8011ebe:	0c1b      	lsrs	r3, r3, #16
 8011ec0:	2210      	movs	r2, #16
 8011ec2:	b2d9      	uxtb	r1, r3
 8011ec4:	b909      	cbnz	r1, 8011eca <__lo0bits+0x32>
 8011ec6:	3208      	adds	r2, #8
 8011ec8:	0a1b      	lsrs	r3, r3, #8
 8011eca:	0719      	lsls	r1, r3, #28
 8011ecc:	bf04      	itt	eq
 8011ece:	091b      	lsreq	r3, r3, #4
 8011ed0:	3204      	addeq	r2, #4
 8011ed2:	0799      	lsls	r1, r3, #30
 8011ed4:	bf04      	itt	eq
 8011ed6:	089b      	lsreq	r3, r3, #2
 8011ed8:	3202      	addeq	r2, #2
 8011eda:	07d9      	lsls	r1, r3, #31
 8011edc:	d403      	bmi.n	8011ee6 <__lo0bits+0x4e>
 8011ede:	085b      	lsrs	r3, r3, #1
 8011ee0:	f102 0201 	add.w	r2, r2, #1
 8011ee4:	d003      	beq.n	8011eee <__lo0bits+0x56>
 8011ee6:	6003      	str	r3, [r0, #0]
 8011ee8:	e7e5      	b.n	8011eb6 <__lo0bits+0x1e>
 8011eea:	2200      	movs	r2, #0
 8011eec:	e7e3      	b.n	8011eb6 <__lo0bits+0x1e>
 8011eee:	2220      	movs	r2, #32
 8011ef0:	e7e1      	b.n	8011eb6 <__lo0bits+0x1e>
	...

08011ef4 <__i2b>:
 8011ef4:	b510      	push	{r4, lr}
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	2101      	movs	r1, #1
 8011efa:	f7ff febb 	bl	8011c74 <_Balloc>
 8011efe:	4602      	mov	r2, r0
 8011f00:	b928      	cbnz	r0, 8011f0e <__i2b+0x1a>
 8011f02:	4b05      	ldr	r3, [pc, #20]	; (8011f18 <__i2b+0x24>)
 8011f04:	4805      	ldr	r0, [pc, #20]	; (8011f1c <__i2b+0x28>)
 8011f06:	f240 1145 	movw	r1, #325	; 0x145
 8011f0a:	f001 fc77 	bl	80137fc <__assert_func>
 8011f0e:	2301      	movs	r3, #1
 8011f10:	6144      	str	r4, [r0, #20]
 8011f12:	6103      	str	r3, [r0, #16]
 8011f14:	bd10      	pop	{r4, pc}
 8011f16:	bf00      	nop
 8011f18:	08014641 	.word	0x08014641
 8011f1c:	080146c9 	.word	0x080146c9

08011f20 <__multiply>:
 8011f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f24:	4691      	mov	r9, r2
 8011f26:	690a      	ldr	r2, [r1, #16]
 8011f28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	bfb8      	it	lt
 8011f30:	460b      	movlt	r3, r1
 8011f32:	460c      	mov	r4, r1
 8011f34:	bfbc      	itt	lt
 8011f36:	464c      	movlt	r4, r9
 8011f38:	4699      	movlt	r9, r3
 8011f3a:	6927      	ldr	r7, [r4, #16]
 8011f3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011f40:	68a3      	ldr	r3, [r4, #8]
 8011f42:	6861      	ldr	r1, [r4, #4]
 8011f44:	eb07 060a 	add.w	r6, r7, sl
 8011f48:	42b3      	cmp	r3, r6
 8011f4a:	b085      	sub	sp, #20
 8011f4c:	bfb8      	it	lt
 8011f4e:	3101      	addlt	r1, #1
 8011f50:	f7ff fe90 	bl	8011c74 <_Balloc>
 8011f54:	b930      	cbnz	r0, 8011f64 <__multiply+0x44>
 8011f56:	4602      	mov	r2, r0
 8011f58:	4b44      	ldr	r3, [pc, #272]	; (801206c <__multiply+0x14c>)
 8011f5a:	4845      	ldr	r0, [pc, #276]	; (8012070 <__multiply+0x150>)
 8011f5c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011f60:	f001 fc4c 	bl	80137fc <__assert_func>
 8011f64:	f100 0514 	add.w	r5, r0, #20
 8011f68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011f6c:	462b      	mov	r3, r5
 8011f6e:	2200      	movs	r2, #0
 8011f70:	4543      	cmp	r3, r8
 8011f72:	d321      	bcc.n	8011fb8 <__multiply+0x98>
 8011f74:	f104 0314 	add.w	r3, r4, #20
 8011f78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011f7c:	f109 0314 	add.w	r3, r9, #20
 8011f80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011f84:	9202      	str	r2, [sp, #8]
 8011f86:	1b3a      	subs	r2, r7, r4
 8011f88:	3a15      	subs	r2, #21
 8011f8a:	f022 0203 	bic.w	r2, r2, #3
 8011f8e:	3204      	adds	r2, #4
 8011f90:	f104 0115 	add.w	r1, r4, #21
 8011f94:	428f      	cmp	r7, r1
 8011f96:	bf38      	it	cc
 8011f98:	2204      	movcc	r2, #4
 8011f9a:	9201      	str	r2, [sp, #4]
 8011f9c:	9a02      	ldr	r2, [sp, #8]
 8011f9e:	9303      	str	r3, [sp, #12]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d80c      	bhi.n	8011fbe <__multiply+0x9e>
 8011fa4:	2e00      	cmp	r6, #0
 8011fa6:	dd03      	ble.n	8011fb0 <__multiply+0x90>
 8011fa8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d05b      	beq.n	8012068 <__multiply+0x148>
 8011fb0:	6106      	str	r6, [r0, #16]
 8011fb2:	b005      	add	sp, #20
 8011fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb8:	f843 2b04 	str.w	r2, [r3], #4
 8011fbc:	e7d8      	b.n	8011f70 <__multiply+0x50>
 8011fbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8011fc2:	f1ba 0f00 	cmp.w	sl, #0
 8011fc6:	d024      	beq.n	8012012 <__multiply+0xf2>
 8011fc8:	f104 0e14 	add.w	lr, r4, #20
 8011fcc:	46a9      	mov	r9, r5
 8011fce:	f04f 0c00 	mov.w	ip, #0
 8011fd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011fd6:	f8d9 1000 	ldr.w	r1, [r9]
 8011fda:	fa1f fb82 	uxth.w	fp, r2
 8011fde:	b289      	uxth	r1, r1
 8011fe0:	fb0a 110b 	mla	r1, sl, fp, r1
 8011fe4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011fe8:	f8d9 2000 	ldr.w	r2, [r9]
 8011fec:	4461      	add	r1, ip
 8011fee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011ff2:	fb0a c20b 	mla	r2, sl, fp, ip
 8011ff6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011ffa:	b289      	uxth	r1, r1
 8011ffc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012000:	4577      	cmp	r7, lr
 8012002:	f849 1b04 	str.w	r1, [r9], #4
 8012006:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801200a:	d8e2      	bhi.n	8011fd2 <__multiply+0xb2>
 801200c:	9a01      	ldr	r2, [sp, #4]
 801200e:	f845 c002 	str.w	ip, [r5, r2]
 8012012:	9a03      	ldr	r2, [sp, #12]
 8012014:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012018:	3304      	adds	r3, #4
 801201a:	f1b9 0f00 	cmp.w	r9, #0
 801201e:	d021      	beq.n	8012064 <__multiply+0x144>
 8012020:	6829      	ldr	r1, [r5, #0]
 8012022:	f104 0c14 	add.w	ip, r4, #20
 8012026:	46ae      	mov	lr, r5
 8012028:	f04f 0a00 	mov.w	sl, #0
 801202c:	f8bc b000 	ldrh.w	fp, [ip]
 8012030:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012034:	fb09 220b 	mla	r2, r9, fp, r2
 8012038:	4452      	add	r2, sl
 801203a:	b289      	uxth	r1, r1
 801203c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012040:	f84e 1b04 	str.w	r1, [lr], #4
 8012044:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012048:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801204c:	f8be 1000 	ldrh.w	r1, [lr]
 8012050:	fb09 110a 	mla	r1, r9, sl, r1
 8012054:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012058:	4567      	cmp	r7, ip
 801205a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801205e:	d8e5      	bhi.n	801202c <__multiply+0x10c>
 8012060:	9a01      	ldr	r2, [sp, #4]
 8012062:	50a9      	str	r1, [r5, r2]
 8012064:	3504      	adds	r5, #4
 8012066:	e799      	b.n	8011f9c <__multiply+0x7c>
 8012068:	3e01      	subs	r6, #1
 801206a:	e79b      	b.n	8011fa4 <__multiply+0x84>
 801206c:	08014641 	.word	0x08014641
 8012070:	080146c9 	.word	0x080146c9

08012074 <__pow5mult>:
 8012074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012078:	4615      	mov	r5, r2
 801207a:	f012 0203 	ands.w	r2, r2, #3
 801207e:	4606      	mov	r6, r0
 8012080:	460f      	mov	r7, r1
 8012082:	d007      	beq.n	8012094 <__pow5mult+0x20>
 8012084:	4c25      	ldr	r4, [pc, #148]	; (801211c <__pow5mult+0xa8>)
 8012086:	3a01      	subs	r2, #1
 8012088:	2300      	movs	r3, #0
 801208a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801208e:	f7ff fe53 	bl	8011d38 <__multadd>
 8012092:	4607      	mov	r7, r0
 8012094:	10ad      	asrs	r5, r5, #2
 8012096:	d03d      	beq.n	8012114 <__pow5mult+0xa0>
 8012098:	69f4      	ldr	r4, [r6, #28]
 801209a:	b97c      	cbnz	r4, 80120bc <__pow5mult+0x48>
 801209c:	2010      	movs	r0, #16
 801209e:	f7fe f855 	bl	801014c <malloc>
 80120a2:	4602      	mov	r2, r0
 80120a4:	61f0      	str	r0, [r6, #28]
 80120a6:	b928      	cbnz	r0, 80120b4 <__pow5mult+0x40>
 80120a8:	4b1d      	ldr	r3, [pc, #116]	; (8012120 <__pow5mult+0xac>)
 80120aa:	481e      	ldr	r0, [pc, #120]	; (8012124 <__pow5mult+0xb0>)
 80120ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 80120b0:	f001 fba4 	bl	80137fc <__assert_func>
 80120b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80120b8:	6004      	str	r4, [r0, #0]
 80120ba:	60c4      	str	r4, [r0, #12]
 80120bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80120c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80120c4:	b94c      	cbnz	r4, 80120da <__pow5mult+0x66>
 80120c6:	f240 2171 	movw	r1, #625	; 0x271
 80120ca:	4630      	mov	r0, r6
 80120cc:	f7ff ff12 	bl	8011ef4 <__i2b>
 80120d0:	2300      	movs	r3, #0
 80120d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80120d6:	4604      	mov	r4, r0
 80120d8:	6003      	str	r3, [r0, #0]
 80120da:	f04f 0900 	mov.w	r9, #0
 80120de:	07eb      	lsls	r3, r5, #31
 80120e0:	d50a      	bpl.n	80120f8 <__pow5mult+0x84>
 80120e2:	4639      	mov	r1, r7
 80120e4:	4622      	mov	r2, r4
 80120e6:	4630      	mov	r0, r6
 80120e8:	f7ff ff1a 	bl	8011f20 <__multiply>
 80120ec:	4639      	mov	r1, r7
 80120ee:	4680      	mov	r8, r0
 80120f0:	4630      	mov	r0, r6
 80120f2:	f7ff fdff 	bl	8011cf4 <_Bfree>
 80120f6:	4647      	mov	r7, r8
 80120f8:	106d      	asrs	r5, r5, #1
 80120fa:	d00b      	beq.n	8012114 <__pow5mult+0xa0>
 80120fc:	6820      	ldr	r0, [r4, #0]
 80120fe:	b938      	cbnz	r0, 8012110 <__pow5mult+0x9c>
 8012100:	4622      	mov	r2, r4
 8012102:	4621      	mov	r1, r4
 8012104:	4630      	mov	r0, r6
 8012106:	f7ff ff0b 	bl	8011f20 <__multiply>
 801210a:	6020      	str	r0, [r4, #0]
 801210c:	f8c0 9000 	str.w	r9, [r0]
 8012110:	4604      	mov	r4, r0
 8012112:	e7e4      	b.n	80120de <__pow5mult+0x6a>
 8012114:	4638      	mov	r0, r7
 8012116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801211a:	bf00      	nop
 801211c:	08014818 	.word	0x08014818
 8012120:	080146b2 	.word	0x080146b2
 8012124:	080146c9 	.word	0x080146c9

08012128 <__lshift>:
 8012128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801212c:	460c      	mov	r4, r1
 801212e:	6849      	ldr	r1, [r1, #4]
 8012130:	6923      	ldr	r3, [r4, #16]
 8012132:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012136:	68a3      	ldr	r3, [r4, #8]
 8012138:	4607      	mov	r7, r0
 801213a:	4691      	mov	r9, r2
 801213c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012140:	f108 0601 	add.w	r6, r8, #1
 8012144:	42b3      	cmp	r3, r6
 8012146:	db0b      	blt.n	8012160 <__lshift+0x38>
 8012148:	4638      	mov	r0, r7
 801214a:	f7ff fd93 	bl	8011c74 <_Balloc>
 801214e:	4605      	mov	r5, r0
 8012150:	b948      	cbnz	r0, 8012166 <__lshift+0x3e>
 8012152:	4602      	mov	r2, r0
 8012154:	4b28      	ldr	r3, [pc, #160]	; (80121f8 <__lshift+0xd0>)
 8012156:	4829      	ldr	r0, [pc, #164]	; (80121fc <__lshift+0xd4>)
 8012158:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801215c:	f001 fb4e 	bl	80137fc <__assert_func>
 8012160:	3101      	adds	r1, #1
 8012162:	005b      	lsls	r3, r3, #1
 8012164:	e7ee      	b.n	8012144 <__lshift+0x1c>
 8012166:	2300      	movs	r3, #0
 8012168:	f100 0114 	add.w	r1, r0, #20
 801216c:	f100 0210 	add.w	r2, r0, #16
 8012170:	4618      	mov	r0, r3
 8012172:	4553      	cmp	r3, sl
 8012174:	db33      	blt.n	80121de <__lshift+0xb6>
 8012176:	6920      	ldr	r0, [r4, #16]
 8012178:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801217c:	f104 0314 	add.w	r3, r4, #20
 8012180:	f019 091f 	ands.w	r9, r9, #31
 8012184:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012188:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801218c:	d02b      	beq.n	80121e6 <__lshift+0xbe>
 801218e:	f1c9 0e20 	rsb	lr, r9, #32
 8012192:	468a      	mov	sl, r1
 8012194:	2200      	movs	r2, #0
 8012196:	6818      	ldr	r0, [r3, #0]
 8012198:	fa00 f009 	lsl.w	r0, r0, r9
 801219c:	4310      	orrs	r0, r2
 801219e:	f84a 0b04 	str.w	r0, [sl], #4
 80121a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80121a6:	459c      	cmp	ip, r3
 80121a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80121ac:	d8f3      	bhi.n	8012196 <__lshift+0x6e>
 80121ae:	ebac 0304 	sub.w	r3, ip, r4
 80121b2:	3b15      	subs	r3, #21
 80121b4:	f023 0303 	bic.w	r3, r3, #3
 80121b8:	3304      	adds	r3, #4
 80121ba:	f104 0015 	add.w	r0, r4, #21
 80121be:	4584      	cmp	ip, r0
 80121c0:	bf38      	it	cc
 80121c2:	2304      	movcc	r3, #4
 80121c4:	50ca      	str	r2, [r1, r3]
 80121c6:	b10a      	cbz	r2, 80121cc <__lshift+0xa4>
 80121c8:	f108 0602 	add.w	r6, r8, #2
 80121cc:	3e01      	subs	r6, #1
 80121ce:	4638      	mov	r0, r7
 80121d0:	612e      	str	r6, [r5, #16]
 80121d2:	4621      	mov	r1, r4
 80121d4:	f7ff fd8e 	bl	8011cf4 <_Bfree>
 80121d8:	4628      	mov	r0, r5
 80121da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121de:	f842 0f04 	str.w	r0, [r2, #4]!
 80121e2:	3301      	adds	r3, #1
 80121e4:	e7c5      	b.n	8012172 <__lshift+0x4a>
 80121e6:	3904      	subs	r1, #4
 80121e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80121ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80121f0:	459c      	cmp	ip, r3
 80121f2:	d8f9      	bhi.n	80121e8 <__lshift+0xc0>
 80121f4:	e7ea      	b.n	80121cc <__lshift+0xa4>
 80121f6:	bf00      	nop
 80121f8:	08014641 	.word	0x08014641
 80121fc:	080146c9 	.word	0x080146c9

08012200 <__mcmp>:
 8012200:	b530      	push	{r4, r5, lr}
 8012202:	6902      	ldr	r2, [r0, #16]
 8012204:	690c      	ldr	r4, [r1, #16]
 8012206:	1b12      	subs	r2, r2, r4
 8012208:	d10e      	bne.n	8012228 <__mcmp+0x28>
 801220a:	f100 0314 	add.w	r3, r0, #20
 801220e:	3114      	adds	r1, #20
 8012210:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012214:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012218:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801221c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012220:	42a5      	cmp	r5, r4
 8012222:	d003      	beq.n	801222c <__mcmp+0x2c>
 8012224:	d305      	bcc.n	8012232 <__mcmp+0x32>
 8012226:	2201      	movs	r2, #1
 8012228:	4610      	mov	r0, r2
 801222a:	bd30      	pop	{r4, r5, pc}
 801222c:	4283      	cmp	r3, r0
 801222e:	d3f3      	bcc.n	8012218 <__mcmp+0x18>
 8012230:	e7fa      	b.n	8012228 <__mcmp+0x28>
 8012232:	f04f 32ff 	mov.w	r2, #4294967295
 8012236:	e7f7      	b.n	8012228 <__mcmp+0x28>

08012238 <__mdiff>:
 8012238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223c:	460c      	mov	r4, r1
 801223e:	4606      	mov	r6, r0
 8012240:	4611      	mov	r1, r2
 8012242:	4620      	mov	r0, r4
 8012244:	4690      	mov	r8, r2
 8012246:	f7ff ffdb 	bl	8012200 <__mcmp>
 801224a:	1e05      	subs	r5, r0, #0
 801224c:	d110      	bne.n	8012270 <__mdiff+0x38>
 801224e:	4629      	mov	r1, r5
 8012250:	4630      	mov	r0, r6
 8012252:	f7ff fd0f 	bl	8011c74 <_Balloc>
 8012256:	b930      	cbnz	r0, 8012266 <__mdiff+0x2e>
 8012258:	4b3a      	ldr	r3, [pc, #232]	; (8012344 <__mdiff+0x10c>)
 801225a:	4602      	mov	r2, r0
 801225c:	f240 2137 	movw	r1, #567	; 0x237
 8012260:	4839      	ldr	r0, [pc, #228]	; (8012348 <__mdiff+0x110>)
 8012262:	f001 facb 	bl	80137fc <__assert_func>
 8012266:	2301      	movs	r3, #1
 8012268:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801226c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012270:	bfa4      	itt	ge
 8012272:	4643      	movge	r3, r8
 8012274:	46a0      	movge	r8, r4
 8012276:	4630      	mov	r0, r6
 8012278:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801227c:	bfa6      	itte	ge
 801227e:	461c      	movge	r4, r3
 8012280:	2500      	movge	r5, #0
 8012282:	2501      	movlt	r5, #1
 8012284:	f7ff fcf6 	bl	8011c74 <_Balloc>
 8012288:	b920      	cbnz	r0, 8012294 <__mdiff+0x5c>
 801228a:	4b2e      	ldr	r3, [pc, #184]	; (8012344 <__mdiff+0x10c>)
 801228c:	4602      	mov	r2, r0
 801228e:	f240 2145 	movw	r1, #581	; 0x245
 8012292:	e7e5      	b.n	8012260 <__mdiff+0x28>
 8012294:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012298:	6926      	ldr	r6, [r4, #16]
 801229a:	60c5      	str	r5, [r0, #12]
 801229c:	f104 0914 	add.w	r9, r4, #20
 80122a0:	f108 0514 	add.w	r5, r8, #20
 80122a4:	f100 0e14 	add.w	lr, r0, #20
 80122a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80122ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80122b0:	f108 0210 	add.w	r2, r8, #16
 80122b4:	46f2      	mov	sl, lr
 80122b6:	2100      	movs	r1, #0
 80122b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80122bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80122c0:	fa11 f88b 	uxtah	r8, r1, fp
 80122c4:	b299      	uxth	r1, r3
 80122c6:	0c1b      	lsrs	r3, r3, #16
 80122c8:	eba8 0801 	sub.w	r8, r8, r1
 80122cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80122d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80122d4:	fa1f f888 	uxth.w	r8, r8
 80122d8:	1419      	asrs	r1, r3, #16
 80122da:	454e      	cmp	r6, r9
 80122dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80122e0:	f84a 3b04 	str.w	r3, [sl], #4
 80122e4:	d8e8      	bhi.n	80122b8 <__mdiff+0x80>
 80122e6:	1b33      	subs	r3, r6, r4
 80122e8:	3b15      	subs	r3, #21
 80122ea:	f023 0303 	bic.w	r3, r3, #3
 80122ee:	3304      	adds	r3, #4
 80122f0:	3415      	adds	r4, #21
 80122f2:	42a6      	cmp	r6, r4
 80122f4:	bf38      	it	cc
 80122f6:	2304      	movcc	r3, #4
 80122f8:	441d      	add	r5, r3
 80122fa:	4473      	add	r3, lr
 80122fc:	469e      	mov	lr, r3
 80122fe:	462e      	mov	r6, r5
 8012300:	4566      	cmp	r6, ip
 8012302:	d30e      	bcc.n	8012322 <__mdiff+0xea>
 8012304:	f10c 0203 	add.w	r2, ip, #3
 8012308:	1b52      	subs	r2, r2, r5
 801230a:	f022 0203 	bic.w	r2, r2, #3
 801230e:	3d03      	subs	r5, #3
 8012310:	45ac      	cmp	ip, r5
 8012312:	bf38      	it	cc
 8012314:	2200      	movcc	r2, #0
 8012316:	4413      	add	r3, r2
 8012318:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801231c:	b17a      	cbz	r2, 801233e <__mdiff+0x106>
 801231e:	6107      	str	r7, [r0, #16]
 8012320:	e7a4      	b.n	801226c <__mdiff+0x34>
 8012322:	f856 8b04 	ldr.w	r8, [r6], #4
 8012326:	fa11 f288 	uxtah	r2, r1, r8
 801232a:	1414      	asrs	r4, r2, #16
 801232c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012330:	b292      	uxth	r2, r2
 8012332:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012336:	f84e 2b04 	str.w	r2, [lr], #4
 801233a:	1421      	asrs	r1, r4, #16
 801233c:	e7e0      	b.n	8012300 <__mdiff+0xc8>
 801233e:	3f01      	subs	r7, #1
 8012340:	e7ea      	b.n	8012318 <__mdiff+0xe0>
 8012342:	bf00      	nop
 8012344:	08014641 	.word	0x08014641
 8012348:	080146c9 	.word	0x080146c9

0801234c <__ulp>:
 801234c:	b082      	sub	sp, #8
 801234e:	ed8d 0b00 	vstr	d0, [sp]
 8012352:	9a01      	ldr	r2, [sp, #4]
 8012354:	4b0f      	ldr	r3, [pc, #60]	; (8012394 <__ulp+0x48>)
 8012356:	4013      	ands	r3, r2
 8012358:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801235c:	2b00      	cmp	r3, #0
 801235e:	dc08      	bgt.n	8012372 <__ulp+0x26>
 8012360:	425b      	negs	r3, r3
 8012362:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012366:	ea4f 5223 	mov.w	r2, r3, asr #20
 801236a:	da04      	bge.n	8012376 <__ulp+0x2a>
 801236c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012370:	4113      	asrs	r3, r2
 8012372:	2200      	movs	r2, #0
 8012374:	e008      	b.n	8012388 <__ulp+0x3c>
 8012376:	f1a2 0314 	sub.w	r3, r2, #20
 801237a:	2b1e      	cmp	r3, #30
 801237c:	bfda      	itte	le
 801237e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012382:	40da      	lsrle	r2, r3
 8012384:	2201      	movgt	r2, #1
 8012386:	2300      	movs	r3, #0
 8012388:	4619      	mov	r1, r3
 801238a:	4610      	mov	r0, r2
 801238c:	ec41 0b10 	vmov	d0, r0, r1
 8012390:	b002      	add	sp, #8
 8012392:	4770      	bx	lr
 8012394:	7ff00000 	.word	0x7ff00000

08012398 <__b2d>:
 8012398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801239c:	6906      	ldr	r6, [r0, #16]
 801239e:	f100 0814 	add.w	r8, r0, #20
 80123a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80123a6:	1f37      	subs	r7, r6, #4
 80123a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80123ac:	4610      	mov	r0, r2
 80123ae:	f7ff fd53 	bl	8011e58 <__hi0bits>
 80123b2:	f1c0 0320 	rsb	r3, r0, #32
 80123b6:	280a      	cmp	r0, #10
 80123b8:	600b      	str	r3, [r1, #0]
 80123ba:	491b      	ldr	r1, [pc, #108]	; (8012428 <__b2d+0x90>)
 80123bc:	dc15      	bgt.n	80123ea <__b2d+0x52>
 80123be:	f1c0 0c0b 	rsb	ip, r0, #11
 80123c2:	fa22 f30c 	lsr.w	r3, r2, ip
 80123c6:	45b8      	cmp	r8, r7
 80123c8:	ea43 0501 	orr.w	r5, r3, r1
 80123cc:	bf34      	ite	cc
 80123ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80123d2:	2300      	movcs	r3, #0
 80123d4:	3015      	adds	r0, #21
 80123d6:	fa02 f000 	lsl.w	r0, r2, r0
 80123da:	fa23 f30c 	lsr.w	r3, r3, ip
 80123de:	4303      	orrs	r3, r0
 80123e0:	461c      	mov	r4, r3
 80123e2:	ec45 4b10 	vmov	d0, r4, r5
 80123e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ea:	45b8      	cmp	r8, r7
 80123ec:	bf3a      	itte	cc
 80123ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80123f2:	f1a6 0708 	subcc.w	r7, r6, #8
 80123f6:	2300      	movcs	r3, #0
 80123f8:	380b      	subs	r0, #11
 80123fa:	d012      	beq.n	8012422 <__b2d+0x8a>
 80123fc:	f1c0 0120 	rsb	r1, r0, #32
 8012400:	fa23 f401 	lsr.w	r4, r3, r1
 8012404:	4082      	lsls	r2, r0
 8012406:	4322      	orrs	r2, r4
 8012408:	4547      	cmp	r7, r8
 801240a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801240e:	bf8c      	ite	hi
 8012410:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012414:	2200      	movls	r2, #0
 8012416:	4083      	lsls	r3, r0
 8012418:	40ca      	lsrs	r2, r1
 801241a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801241e:	4313      	orrs	r3, r2
 8012420:	e7de      	b.n	80123e0 <__b2d+0x48>
 8012422:	ea42 0501 	orr.w	r5, r2, r1
 8012426:	e7db      	b.n	80123e0 <__b2d+0x48>
 8012428:	3ff00000 	.word	0x3ff00000

0801242c <__d2b>:
 801242c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012430:	460f      	mov	r7, r1
 8012432:	2101      	movs	r1, #1
 8012434:	ec59 8b10 	vmov	r8, r9, d0
 8012438:	4616      	mov	r6, r2
 801243a:	f7ff fc1b 	bl	8011c74 <_Balloc>
 801243e:	4604      	mov	r4, r0
 8012440:	b930      	cbnz	r0, 8012450 <__d2b+0x24>
 8012442:	4602      	mov	r2, r0
 8012444:	4b24      	ldr	r3, [pc, #144]	; (80124d8 <__d2b+0xac>)
 8012446:	4825      	ldr	r0, [pc, #148]	; (80124dc <__d2b+0xb0>)
 8012448:	f240 310f 	movw	r1, #783	; 0x30f
 801244c:	f001 f9d6 	bl	80137fc <__assert_func>
 8012450:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012454:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012458:	bb2d      	cbnz	r5, 80124a6 <__d2b+0x7a>
 801245a:	9301      	str	r3, [sp, #4]
 801245c:	f1b8 0300 	subs.w	r3, r8, #0
 8012460:	d026      	beq.n	80124b0 <__d2b+0x84>
 8012462:	4668      	mov	r0, sp
 8012464:	9300      	str	r3, [sp, #0]
 8012466:	f7ff fd17 	bl	8011e98 <__lo0bits>
 801246a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801246e:	b1e8      	cbz	r0, 80124ac <__d2b+0x80>
 8012470:	f1c0 0320 	rsb	r3, r0, #32
 8012474:	fa02 f303 	lsl.w	r3, r2, r3
 8012478:	430b      	orrs	r3, r1
 801247a:	40c2      	lsrs	r2, r0
 801247c:	6163      	str	r3, [r4, #20]
 801247e:	9201      	str	r2, [sp, #4]
 8012480:	9b01      	ldr	r3, [sp, #4]
 8012482:	61a3      	str	r3, [r4, #24]
 8012484:	2b00      	cmp	r3, #0
 8012486:	bf14      	ite	ne
 8012488:	2202      	movne	r2, #2
 801248a:	2201      	moveq	r2, #1
 801248c:	6122      	str	r2, [r4, #16]
 801248e:	b1bd      	cbz	r5, 80124c0 <__d2b+0x94>
 8012490:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012494:	4405      	add	r5, r0
 8012496:	603d      	str	r5, [r7, #0]
 8012498:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801249c:	6030      	str	r0, [r6, #0]
 801249e:	4620      	mov	r0, r4
 80124a0:	b003      	add	sp, #12
 80124a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80124aa:	e7d6      	b.n	801245a <__d2b+0x2e>
 80124ac:	6161      	str	r1, [r4, #20]
 80124ae:	e7e7      	b.n	8012480 <__d2b+0x54>
 80124b0:	a801      	add	r0, sp, #4
 80124b2:	f7ff fcf1 	bl	8011e98 <__lo0bits>
 80124b6:	9b01      	ldr	r3, [sp, #4]
 80124b8:	6163      	str	r3, [r4, #20]
 80124ba:	3020      	adds	r0, #32
 80124bc:	2201      	movs	r2, #1
 80124be:	e7e5      	b.n	801248c <__d2b+0x60>
 80124c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80124c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80124c8:	6038      	str	r0, [r7, #0]
 80124ca:	6918      	ldr	r0, [r3, #16]
 80124cc:	f7ff fcc4 	bl	8011e58 <__hi0bits>
 80124d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80124d4:	e7e2      	b.n	801249c <__d2b+0x70>
 80124d6:	bf00      	nop
 80124d8:	08014641 	.word	0x08014641
 80124dc:	080146c9 	.word	0x080146c9

080124e0 <__ratio>:
 80124e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e4:	4688      	mov	r8, r1
 80124e6:	4669      	mov	r1, sp
 80124e8:	4681      	mov	r9, r0
 80124ea:	f7ff ff55 	bl	8012398 <__b2d>
 80124ee:	a901      	add	r1, sp, #4
 80124f0:	4640      	mov	r0, r8
 80124f2:	ec55 4b10 	vmov	r4, r5, d0
 80124f6:	f7ff ff4f 	bl	8012398 <__b2d>
 80124fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012502:	eba3 0c02 	sub.w	ip, r3, r2
 8012506:	e9dd 3200 	ldrd	r3, r2, [sp]
 801250a:	1a9b      	subs	r3, r3, r2
 801250c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012510:	ec51 0b10 	vmov	r0, r1, d0
 8012514:	2b00      	cmp	r3, #0
 8012516:	bfd6      	itet	le
 8012518:	460a      	movle	r2, r1
 801251a:	462a      	movgt	r2, r5
 801251c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012520:	468b      	mov	fp, r1
 8012522:	462f      	mov	r7, r5
 8012524:	bfd4      	ite	le
 8012526:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801252a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801252e:	4620      	mov	r0, r4
 8012530:	ee10 2a10 	vmov	r2, s0
 8012534:	465b      	mov	r3, fp
 8012536:	4639      	mov	r1, r7
 8012538:	f7ee f998 	bl	800086c <__aeabi_ddiv>
 801253c:	ec41 0b10 	vmov	d0, r0, r1
 8012540:	b003      	add	sp, #12
 8012542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012546 <__copybits>:
 8012546:	3901      	subs	r1, #1
 8012548:	b570      	push	{r4, r5, r6, lr}
 801254a:	1149      	asrs	r1, r1, #5
 801254c:	6914      	ldr	r4, [r2, #16]
 801254e:	3101      	adds	r1, #1
 8012550:	f102 0314 	add.w	r3, r2, #20
 8012554:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012558:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801255c:	1f05      	subs	r5, r0, #4
 801255e:	42a3      	cmp	r3, r4
 8012560:	d30c      	bcc.n	801257c <__copybits+0x36>
 8012562:	1aa3      	subs	r3, r4, r2
 8012564:	3b11      	subs	r3, #17
 8012566:	f023 0303 	bic.w	r3, r3, #3
 801256a:	3211      	adds	r2, #17
 801256c:	42a2      	cmp	r2, r4
 801256e:	bf88      	it	hi
 8012570:	2300      	movhi	r3, #0
 8012572:	4418      	add	r0, r3
 8012574:	2300      	movs	r3, #0
 8012576:	4288      	cmp	r0, r1
 8012578:	d305      	bcc.n	8012586 <__copybits+0x40>
 801257a:	bd70      	pop	{r4, r5, r6, pc}
 801257c:	f853 6b04 	ldr.w	r6, [r3], #4
 8012580:	f845 6f04 	str.w	r6, [r5, #4]!
 8012584:	e7eb      	b.n	801255e <__copybits+0x18>
 8012586:	f840 3b04 	str.w	r3, [r0], #4
 801258a:	e7f4      	b.n	8012576 <__copybits+0x30>

0801258c <__any_on>:
 801258c:	f100 0214 	add.w	r2, r0, #20
 8012590:	6900      	ldr	r0, [r0, #16]
 8012592:	114b      	asrs	r3, r1, #5
 8012594:	4298      	cmp	r0, r3
 8012596:	b510      	push	{r4, lr}
 8012598:	db11      	blt.n	80125be <__any_on+0x32>
 801259a:	dd0a      	ble.n	80125b2 <__any_on+0x26>
 801259c:	f011 011f 	ands.w	r1, r1, #31
 80125a0:	d007      	beq.n	80125b2 <__any_on+0x26>
 80125a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80125a6:	fa24 f001 	lsr.w	r0, r4, r1
 80125aa:	fa00 f101 	lsl.w	r1, r0, r1
 80125ae:	428c      	cmp	r4, r1
 80125b0:	d10b      	bne.n	80125ca <__any_on+0x3e>
 80125b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125b6:	4293      	cmp	r3, r2
 80125b8:	d803      	bhi.n	80125c2 <__any_on+0x36>
 80125ba:	2000      	movs	r0, #0
 80125bc:	bd10      	pop	{r4, pc}
 80125be:	4603      	mov	r3, r0
 80125c0:	e7f7      	b.n	80125b2 <__any_on+0x26>
 80125c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80125c6:	2900      	cmp	r1, #0
 80125c8:	d0f5      	beq.n	80125b6 <__any_on+0x2a>
 80125ca:	2001      	movs	r0, #1
 80125cc:	e7f6      	b.n	80125bc <__any_on+0x30>

080125ce <_malloc_usable_size_r>:
 80125ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125d2:	1f18      	subs	r0, r3, #4
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	bfbc      	itt	lt
 80125d8:	580b      	ldrlt	r3, [r1, r0]
 80125da:	18c0      	addlt	r0, r0, r3
 80125dc:	4770      	bx	lr

080125de <__ascii_wctomb>:
 80125de:	b149      	cbz	r1, 80125f4 <__ascii_wctomb+0x16>
 80125e0:	2aff      	cmp	r2, #255	; 0xff
 80125e2:	bf85      	ittet	hi
 80125e4:	238a      	movhi	r3, #138	; 0x8a
 80125e6:	6003      	strhi	r3, [r0, #0]
 80125e8:	700a      	strbls	r2, [r1, #0]
 80125ea:	f04f 30ff 	movhi.w	r0, #4294967295
 80125ee:	bf98      	it	ls
 80125f0:	2001      	movls	r0, #1
 80125f2:	4770      	bx	lr
 80125f4:	4608      	mov	r0, r1
 80125f6:	4770      	bx	lr

080125f8 <__ssputs_r>:
 80125f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125fc:	688e      	ldr	r6, [r1, #8]
 80125fe:	461f      	mov	r7, r3
 8012600:	42be      	cmp	r6, r7
 8012602:	680b      	ldr	r3, [r1, #0]
 8012604:	4682      	mov	sl, r0
 8012606:	460c      	mov	r4, r1
 8012608:	4690      	mov	r8, r2
 801260a:	d82c      	bhi.n	8012666 <__ssputs_r+0x6e>
 801260c:	898a      	ldrh	r2, [r1, #12]
 801260e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012612:	d026      	beq.n	8012662 <__ssputs_r+0x6a>
 8012614:	6965      	ldr	r5, [r4, #20]
 8012616:	6909      	ldr	r1, [r1, #16]
 8012618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801261c:	eba3 0901 	sub.w	r9, r3, r1
 8012620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012624:	1c7b      	adds	r3, r7, #1
 8012626:	444b      	add	r3, r9
 8012628:	106d      	asrs	r5, r5, #1
 801262a:	429d      	cmp	r5, r3
 801262c:	bf38      	it	cc
 801262e:	461d      	movcc	r5, r3
 8012630:	0553      	lsls	r3, r2, #21
 8012632:	d527      	bpl.n	8012684 <__ssputs_r+0x8c>
 8012634:	4629      	mov	r1, r5
 8012636:	f7fd fdb9 	bl	80101ac <_malloc_r>
 801263a:	4606      	mov	r6, r0
 801263c:	b360      	cbz	r0, 8012698 <__ssputs_r+0xa0>
 801263e:	6921      	ldr	r1, [r4, #16]
 8012640:	464a      	mov	r2, r9
 8012642:	f7fe ff48 	bl	80114d6 <memcpy>
 8012646:	89a3      	ldrh	r3, [r4, #12]
 8012648:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801264c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012650:	81a3      	strh	r3, [r4, #12]
 8012652:	6126      	str	r6, [r4, #16]
 8012654:	6165      	str	r5, [r4, #20]
 8012656:	444e      	add	r6, r9
 8012658:	eba5 0509 	sub.w	r5, r5, r9
 801265c:	6026      	str	r6, [r4, #0]
 801265e:	60a5      	str	r5, [r4, #8]
 8012660:	463e      	mov	r6, r7
 8012662:	42be      	cmp	r6, r7
 8012664:	d900      	bls.n	8012668 <__ssputs_r+0x70>
 8012666:	463e      	mov	r6, r7
 8012668:	6820      	ldr	r0, [r4, #0]
 801266a:	4632      	mov	r2, r6
 801266c:	4641      	mov	r1, r8
 801266e:	f7fe fe19 	bl	80112a4 <memmove>
 8012672:	68a3      	ldr	r3, [r4, #8]
 8012674:	1b9b      	subs	r3, r3, r6
 8012676:	60a3      	str	r3, [r4, #8]
 8012678:	6823      	ldr	r3, [r4, #0]
 801267a:	4433      	add	r3, r6
 801267c:	6023      	str	r3, [r4, #0]
 801267e:	2000      	movs	r0, #0
 8012680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012684:	462a      	mov	r2, r5
 8012686:	f7fd fe25 	bl	80102d4 <_realloc_r>
 801268a:	4606      	mov	r6, r0
 801268c:	2800      	cmp	r0, #0
 801268e:	d1e0      	bne.n	8012652 <__ssputs_r+0x5a>
 8012690:	6921      	ldr	r1, [r4, #16]
 8012692:	4650      	mov	r0, sl
 8012694:	f7fe ff38 	bl	8011508 <_free_r>
 8012698:	230c      	movs	r3, #12
 801269a:	f8ca 3000 	str.w	r3, [sl]
 801269e:	89a3      	ldrh	r3, [r4, #12]
 80126a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126a4:	81a3      	strh	r3, [r4, #12]
 80126a6:	f04f 30ff 	mov.w	r0, #4294967295
 80126aa:	e7e9      	b.n	8012680 <__ssputs_r+0x88>

080126ac <_svfiprintf_r>:
 80126ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b0:	4698      	mov	r8, r3
 80126b2:	898b      	ldrh	r3, [r1, #12]
 80126b4:	061b      	lsls	r3, r3, #24
 80126b6:	b09d      	sub	sp, #116	; 0x74
 80126b8:	4607      	mov	r7, r0
 80126ba:	460d      	mov	r5, r1
 80126bc:	4614      	mov	r4, r2
 80126be:	d50e      	bpl.n	80126de <_svfiprintf_r+0x32>
 80126c0:	690b      	ldr	r3, [r1, #16]
 80126c2:	b963      	cbnz	r3, 80126de <_svfiprintf_r+0x32>
 80126c4:	2140      	movs	r1, #64	; 0x40
 80126c6:	f7fd fd71 	bl	80101ac <_malloc_r>
 80126ca:	6028      	str	r0, [r5, #0]
 80126cc:	6128      	str	r0, [r5, #16]
 80126ce:	b920      	cbnz	r0, 80126da <_svfiprintf_r+0x2e>
 80126d0:	230c      	movs	r3, #12
 80126d2:	603b      	str	r3, [r7, #0]
 80126d4:	f04f 30ff 	mov.w	r0, #4294967295
 80126d8:	e0d0      	b.n	801287c <_svfiprintf_r+0x1d0>
 80126da:	2340      	movs	r3, #64	; 0x40
 80126dc:	616b      	str	r3, [r5, #20]
 80126de:	2300      	movs	r3, #0
 80126e0:	9309      	str	r3, [sp, #36]	; 0x24
 80126e2:	2320      	movs	r3, #32
 80126e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80126ec:	2330      	movs	r3, #48	; 0x30
 80126ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012894 <_svfiprintf_r+0x1e8>
 80126f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126f6:	f04f 0901 	mov.w	r9, #1
 80126fa:	4623      	mov	r3, r4
 80126fc:	469a      	mov	sl, r3
 80126fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012702:	b10a      	cbz	r2, 8012708 <_svfiprintf_r+0x5c>
 8012704:	2a25      	cmp	r2, #37	; 0x25
 8012706:	d1f9      	bne.n	80126fc <_svfiprintf_r+0x50>
 8012708:	ebba 0b04 	subs.w	fp, sl, r4
 801270c:	d00b      	beq.n	8012726 <_svfiprintf_r+0x7a>
 801270e:	465b      	mov	r3, fp
 8012710:	4622      	mov	r2, r4
 8012712:	4629      	mov	r1, r5
 8012714:	4638      	mov	r0, r7
 8012716:	f7ff ff6f 	bl	80125f8 <__ssputs_r>
 801271a:	3001      	adds	r0, #1
 801271c:	f000 80a9 	beq.w	8012872 <_svfiprintf_r+0x1c6>
 8012720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012722:	445a      	add	r2, fp
 8012724:	9209      	str	r2, [sp, #36]	; 0x24
 8012726:	f89a 3000 	ldrb.w	r3, [sl]
 801272a:	2b00      	cmp	r3, #0
 801272c:	f000 80a1 	beq.w	8012872 <_svfiprintf_r+0x1c6>
 8012730:	2300      	movs	r3, #0
 8012732:	f04f 32ff 	mov.w	r2, #4294967295
 8012736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801273a:	f10a 0a01 	add.w	sl, sl, #1
 801273e:	9304      	str	r3, [sp, #16]
 8012740:	9307      	str	r3, [sp, #28]
 8012742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012746:	931a      	str	r3, [sp, #104]	; 0x68
 8012748:	4654      	mov	r4, sl
 801274a:	2205      	movs	r2, #5
 801274c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012750:	4850      	ldr	r0, [pc, #320]	; (8012894 <_svfiprintf_r+0x1e8>)
 8012752:	f7ed fd4d 	bl	80001f0 <memchr>
 8012756:	9a04      	ldr	r2, [sp, #16]
 8012758:	b9d8      	cbnz	r0, 8012792 <_svfiprintf_r+0xe6>
 801275a:	06d0      	lsls	r0, r2, #27
 801275c:	bf44      	itt	mi
 801275e:	2320      	movmi	r3, #32
 8012760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012764:	0711      	lsls	r1, r2, #28
 8012766:	bf44      	itt	mi
 8012768:	232b      	movmi	r3, #43	; 0x2b
 801276a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801276e:	f89a 3000 	ldrb.w	r3, [sl]
 8012772:	2b2a      	cmp	r3, #42	; 0x2a
 8012774:	d015      	beq.n	80127a2 <_svfiprintf_r+0xf6>
 8012776:	9a07      	ldr	r2, [sp, #28]
 8012778:	4654      	mov	r4, sl
 801277a:	2000      	movs	r0, #0
 801277c:	f04f 0c0a 	mov.w	ip, #10
 8012780:	4621      	mov	r1, r4
 8012782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012786:	3b30      	subs	r3, #48	; 0x30
 8012788:	2b09      	cmp	r3, #9
 801278a:	d94d      	bls.n	8012828 <_svfiprintf_r+0x17c>
 801278c:	b1b0      	cbz	r0, 80127bc <_svfiprintf_r+0x110>
 801278e:	9207      	str	r2, [sp, #28]
 8012790:	e014      	b.n	80127bc <_svfiprintf_r+0x110>
 8012792:	eba0 0308 	sub.w	r3, r0, r8
 8012796:	fa09 f303 	lsl.w	r3, r9, r3
 801279a:	4313      	orrs	r3, r2
 801279c:	9304      	str	r3, [sp, #16]
 801279e:	46a2      	mov	sl, r4
 80127a0:	e7d2      	b.n	8012748 <_svfiprintf_r+0x9c>
 80127a2:	9b03      	ldr	r3, [sp, #12]
 80127a4:	1d19      	adds	r1, r3, #4
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	9103      	str	r1, [sp, #12]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	bfbb      	ittet	lt
 80127ae:	425b      	neglt	r3, r3
 80127b0:	f042 0202 	orrlt.w	r2, r2, #2
 80127b4:	9307      	strge	r3, [sp, #28]
 80127b6:	9307      	strlt	r3, [sp, #28]
 80127b8:	bfb8      	it	lt
 80127ba:	9204      	strlt	r2, [sp, #16]
 80127bc:	7823      	ldrb	r3, [r4, #0]
 80127be:	2b2e      	cmp	r3, #46	; 0x2e
 80127c0:	d10c      	bne.n	80127dc <_svfiprintf_r+0x130>
 80127c2:	7863      	ldrb	r3, [r4, #1]
 80127c4:	2b2a      	cmp	r3, #42	; 0x2a
 80127c6:	d134      	bne.n	8012832 <_svfiprintf_r+0x186>
 80127c8:	9b03      	ldr	r3, [sp, #12]
 80127ca:	1d1a      	adds	r2, r3, #4
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	9203      	str	r2, [sp, #12]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	bfb8      	it	lt
 80127d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80127d8:	3402      	adds	r4, #2
 80127da:	9305      	str	r3, [sp, #20]
 80127dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80128a4 <_svfiprintf_r+0x1f8>
 80127e0:	7821      	ldrb	r1, [r4, #0]
 80127e2:	2203      	movs	r2, #3
 80127e4:	4650      	mov	r0, sl
 80127e6:	f7ed fd03 	bl	80001f0 <memchr>
 80127ea:	b138      	cbz	r0, 80127fc <_svfiprintf_r+0x150>
 80127ec:	9b04      	ldr	r3, [sp, #16]
 80127ee:	eba0 000a 	sub.w	r0, r0, sl
 80127f2:	2240      	movs	r2, #64	; 0x40
 80127f4:	4082      	lsls	r2, r0
 80127f6:	4313      	orrs	r3, r2
 80127f8:	3401      	adds	r4, #1
 80127fa:	9304      	str	r3, [sp, #16]
 80127fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012800:	4825      	ldr	r0, [pc, #148]	; (8012898 <_svfiprintf_r+0x1ec>)
 8012802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012806:	2206      	movs	r2, #6
 8012808:	f7ed fcf2 	bl	80001f0 <memchr>
 801280c:	2800      	cmp	r0, #0
 801280e:	d038      	beq.n	8012882 <_svfiprintf_r+0x1d6>
 8012810:	4b22      	ldr	r3, [pc, #136]	; (801289c <_svfiprintf_r+0x1f0>)
 8012812:	bb1b      	cbnz	r3, 801285c <_svfiprintf_r+0x1b0>
 8012814:	9b03      	ldr	r3, [sp, #12]
 8012816:	3307      	adds	r3, #7
 8012818:	f023 0307 	bic.w	r3, r3, #7
 801281c:	3308      	adds	r3, #8
 801281e:	9303      	str	r3, [sp, #12]
 8012820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012822:	4433      	add	r3, r6
 8012824:	9309      	str	r3, [sp, #36]	; 0x24
 8012826:	e768      	b.n	80126fa <_svfiprintf_r+0x4e>
 8012828:	fb0c 3202 	mla	r2, ip, r2, r3
 801282c:	460c      	mov	r4, r1
 801282e:	2001      	movs	r0, #1
 8012830:	e7a6      	b.n	8012780 <_svfiprintf_r+0xd4>
 8012832:	2300      	movs	r3, #0
 8012834:	3401      	adds	r4, #1
 8012836:	9305      	str	r3, [sp, #20]
 8012838:	4619      	mov	r1, r3
 801283a:	f04f 0c0a 	mov.w	ip, #10
 801283e:	4620      	mov	r0, r4
 8012840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012844:	3a30      	subs	r2, #48	; 0x30
 8012846:	2a09      	cmp	r2, #9
 8012848:	d903      	bls.n	8012852 <_svfiprintf_r+0x1a6>
 801284a:	2b00      	cmp	r3, #0
 801284c:	d0c6      	beq.n	80127dc <_svfiprintf_r+0x130>
 801284e:	9105      	str	r1, [sp, #20]
 8012850:	e7c4      	b.n	80127dc <_svfiprintf_r+0x130>
 8012852:	fb0c 2101 	mla	r1, ip, r1, r2
 8012856:	4604      	mov	r4, r0
 8012858:	2301      	movs	r3, #1
 801285a:	e7f0      	b.n	801283e <_svfiprintf_r+0x192>
 801285c:	ab03      	add	r3, sp, #12
 801285e:	9300      	str	r3, [sp, #0]
 8012860:	462a      	mov	r2, r5
 8012862:	4b0f      	ldr	r3, [pc, #60]	; (80128a0 <_svfiprintf_r+0x1f4>)
 8012864:	a904      	add	r1, sp, #16
 8012866:	4638      	mov	r0, r7
 8012868:	f3af 8000 	nop.w
 801286c:	1c42      	adds	r2, r0, #1
 801286e:	4606      	mov	r6, r0
 8012870:	d1d6      	bne.n	8012820 <_svfiprintf_r+0x174>
 8012872:	89ab      	ldrh	r3, [r5, #12]
 8012874:	065b      	lsls	r3, r3, #25
 8012876:	f53f af2d 	bmi.w	80126d4 <_svfiprintf_r+0x28>
 801287a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801287c:	b01d      	add	sp, #116	; 0x74
 801287e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012882:	ab03      	add	r3, sp, #12
 8012884:	9300      	str	r3, [sp, #0]
 8012886:	462a      	mov	r2, r5
 8012888:	4b05      	ldr	r3, [pc, #20]	; (80128a0 <_svfiprintf_r+0x1f4>)
 801288a:	a904      	add	r1, sp, #16
 801288c:	4638      	mov	r0, r7
 801288e:	f000 fb8f 	bl	8012fb0 <_printf_i>
 8012892:	e7eb      	b.n	801286c <_svfiprintf_r+0x1c0>
 8012894:	08014824 	.word	0x08014824
 8012898:	0801482e 	.word	0x0801482e
 801289c:	00000000 	.word	0x00000000
 80128a0:	080125f9 	.word	0x080125f9
 80128a4:	0801482a 	.word	0x0801482a

080128a8 <_sungetc_r>:
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	1c4b      	adds	r3, r1, #1
 80128ac:	4614      	mov	r4, r2
 80128ae:	d103      	bne.n	80128b8 <_sungetc_r+0x10>
 80128b0:	f04f 35ff 	mov.w	r5, #4294967295
 80128b4:	4628      	mov	r0, r5
 80128b6:	bd38      	pop	{r3, r4, r5, pc}
 80128b8:	8993      	ldrh	r3, [r2, #12]
 80128ba:	f023 0320 	bic.w	r3, r3, #32
 80128be:	8193      	strh	r3, [r2, #12]
 80128c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128c2:	6852      	ldr	r2, [r2, #4]
 80128c4:	b2cd      	uxtb	r5, r1
 80128c6:	b18b      	cbz	r3, 80128ec <_sungetc_r+0x44>
 80128c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80128ca:	4293      	cmp	r3, r2
 80128cc:	dd08      	ble.n	80128e0 <_sungetc_r+0x38>
 80128ce:	6823      	ldr	r3, [r4, #0]
 80128d0:	1e5a      	subs	r2, r3, #1
 80128d2:	6022      	str	r2, [r4, #0]
 80128d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80128d8:	6863      	ldr	r3, [r4, #4]
 80128da:	3301      	adds	r3, #1
 80128dc:	6063      	str	r3, [r4, #4]
 80128de:	e7e9      	b.n	80128b4 <_sungetc_r+0xc>
 80128e0:	4621      	mov	r1, r4
 80128e2:	f000 febc 	bl	801365e <__submore>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	d0f1      	beq.n	80128ce <_sungetc_r+0x26>
 80128ea:	e7e1      	b.n	80128b0 <_sungetc_r+0x8>
 80128ec:	6921      	ldr	r1, [r4, #16]
 80128ee:	6823      	ldr	r3, [r4, #0]
 80128f0:	b151      	cbz	r1, 8012908 <_sungetc_r+0x60>
 80128f2:	4299      	cmp	r1, r3
 80128f4:	d208      	bcs.n	8012908 <_sungetc_r+0x60>
 80128f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80128fa:	42a9      	cmp	r1, r5
 80128fc:	d104      	bne.n	8012908 <_sungetc_r+0x60>
 80128fe:	3b01      	subs	r3, #1
 8012900:	3201      	adds	r2, #1
 8012902:	6023      	str	r3, [r4, #0]
 8012904:	6062      	str	r2, [r4, #4]
 8012906:	e7d5      	b.n	80128b4 <_sungetc_r+0xc>
 8012908:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801290c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012910:	6363      	str	r3, [r4, #52]	; 0x34
 8012912:	2303      	movs	r3, #3
 8012914:	63a3      	str	r3, [r4, #56]	; 0x38
 8012916:	4623      	mov	r3, r4
 8012918:	f803 5f46 	strb.w	r5, [r3, #70]!
 801291c:	6023      	str	r3, [r4, #0]
 801291e:	2301      	movs	r3, #1
 8012920:	e7dc      	b.n	80128dc <_sungetc_r+0x34>

08012922 <__ssrefill_r>:
 8012922:	b510      	push	{r4, lr}
 8012924:	460c      	mov	r4, r1
 8012926:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012928:	b169      	cbz	r1, 8012946 <__ssrefill_r+0x24>
 801292a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801292e:	4299      	cmp	r1, r3
 8012930:	d001      	beq.n	8012936 <__ssrefill_r+0x14>
 8012932:	f7fe fde9 	bl	8011508 <_free_r>
 8012936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012938:	6063      	str	r3, [r4, #4]
 801293a:	2000      	movs	r0, #0
 801293c:	6360      	str	r0, [r4, #52]	; 0x34
 801293e:	b113      	cbz	r3, 8012946 <__ssrefill_r+0x24>
 8012940:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012942:	6023      	str	r3, [r4, #0]
 8012944:	bd10      	pop	{r4, pc}
 8012946:	6923      	ldr	r3, [r4, #16]
 8012948:	6023      	str	r3, [r4, #0]
 801294a:	2300      	movs	r3, #0
 801294c:	6063      	str	r3, [r4, #4]
 801294e:	89a3      	ldrh	r3, [r4, #12]
 8012950:	f043 0320 	orr.w	r3, r3, #32
 8012954:	81a3      	strh	r3, [r4, #12]
 8012956:	f04f 30ff 	mov.w	r0, #4294967295
 801295a:	e7f3      	b.n	8012944 <__ssrefill_r+0x22>

0801295c <__ssvfiscanf_r>:
 801295c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012960:	460c      	mov	r4, r1
 8012962:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012966:	2100      	movs	r1, #0
 8012968:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801296c:	49a6      	ldr	r1, [pc, #664]	; (8012c08 <__ssvfiscanf_r+0x2ac>)
 801296e:	91a0      	str	r1, [sp, #640]	; 0x280
 8012970:	f10d 0804 	add.w	r8, sp, #4
 8012974:	49a5      	ldr	r1, [pc, #660]	; (8012c0c <__ssvfiscanf_r+0x2b0>)
 8012976:	4fa6      	ldr	r7, [pc, #664]	; (8012c10 <__ssvfiscanf_r+0x2b4>)
 8012978:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8012c14 <__ssvfiscanf_r+0x2b8>
 801297c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012980:	4606      	mov	r6, r0
 8012982:	91a1      	str	r1, [sp, #644]	; 0x284
 8012984:	9300      	str	r3, [sp, #0]
 8012986:	7813      	ldrb	r3, [r2, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	f000 815a 	beq.w	8012c42 <__ssvfiscanf_r+0x2e6>
 801298e:	5cf9      	ldrb	r1, [r7, r3]
 8012990:	f011 0108 	ands.w	r1, r1, #8
 8012994:	f102 0501 	add.w	r5, r2, #1
 8012998:	d019      	beq.n	80129ce <__ssvfiscanf_r+0x72>
 801299a:	6863      	ldr	r3, [r4, #4]
 801299c:	2b00      	cmp	r3, #0
 801299e:	dd0f      	ble.n	80129c0 <__ssvfiscanf_r+0x64>
 80129a0:	6823      	ldr	r3, [r4, #0]
 80129a2:	781a      	ldrb	r2, [r3, #0]
 80129a4:	5cba      	ldrb	r2, [r7, r2]
 80129a6:	0712      	lsls	r2, r2, #28
 80129a8:	d401      	bmi.n	80129ae <__ssvfiscanf_r+0x52>
 80129aa:	462a      	mov	r2, r5
 80129ac:	e7eb      	b.n	8012986 <__ssvfiscanf_r+0x2a>
 80129ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80129b0:	3201      	adds	r2, #1
 80129b2:	9245      	str	r2, [sp, #276]	; 0x114
 80129b4:	6862      	ldr	r2, [r4, #4]
 80129b6:	3301      	adds	r3, #1
 80129b8:	3a01      	subs	r2, #1
 80129ba:	6062      	str	r2, [r4, #4]
 80129bc:	6023      	str	r3, [r4, #0]
 80129be:	e7ec      	b.n	801299a <__ssvfiscanf_r+0x3e>
 80129c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80129c2:	4621      	mov	r1, r4
 80129c4:	4630      	mov	r0, r6
 80129c6:	4798      	blx	r3
 80129c8:	2800      	cmp	r0, #0
 80129ca:	d0e9      	beq.n	80129a0 <__ssvfiscanf_r+0x44>
 80129cc:	e7ed      	b.n	80129aa <__ssvfiscanf_r+0x4e>
 80129ce:	2b25      	cmp	r3, #37	; 0x25
 80129d0:	d012      	beq.n	80129f8 <__ssvfiscanf_r+0x9c>
 80129d2:	469a      	mov	sl, r3
 80129d4:	6863      	ldr	r3, [r4, #4]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	f340 8091 	ble.w	8012afe <__ssvfiscanf_r+0x1a2>
 80129dc:	6822      	ldr	r2, [r4, #0]
 80129de:	7813      	ldrb	r3, [r2, #0]
 80129e0:	4553      	cmp	r3, sl
 80129e2:	f040 812e 	bne.w	8012c42 <__ssvfiscanf_r+0x2e6>
 80129e6:	6863      	ldr	r3, [r4, #4]
 80129e8:	3b01      	subs	r3, #1
 80129ea:	6063      	str	r3, [r4, #4]
 80129ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80129ee:	3201      	adds	r2, #1
 80129f0:	3301      	adds	r3, #1
 80129f2:	6022      	str	r2, [r4, #0]
 80129f4:	9345      	str	r3, [sp, #276]	; 0x114
 80129f6:	e7d8      	b.n	80129aa <__ssvfiscanf_r+0x4e>
 80129f8:	9141      	str	r1, [sp, #260]	; 0x104
 80129fa:	9143      	str	r1, [sp, #268]	; 0x10c
 80129fc:	7853      	ldrb	r3, [r2, #1]
 80129fe:	2b2a      	cmp	r3, #42	; 0x2a
 8012a00:	bf02      	ittt	eq
 8012a02:	2310      	moveq	r3, #16
 8012a04:	1c95      	addeq	r5, r2, #2
 8012a06:	9341      	streq	r3, [sp, #260]	; 0x104
 8012a08:	220a      	movs	r2, #10
 8012a0a:	46aa      	mov	sl, r5
 8012a0c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012a10:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012a14:	2b09      	cmp	r3, #9
 8012a16:	d91c      	bls.n	8012a52 <__ssvfiscanf_r+0xf6>
 8012a18:	487e      	ldr	r0, [pc, #504]	; (8012c14 <__ssvfiscanf_r+0x2b8>)
 8012a1a:	2203      	movs	r2, #3
 8012a1c:	f7ed fbe8 	bl	80001f0 <memchr>
 8012a20:	b138      	cbz	r0, 8012a32 <__ssvfiscanf_r+0xd6>
 8012a22:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012a24:	eba0 0009 	sub.w	r0, r0, r9
 8012a28:	2301      	movs	r3, #1
 8012a2a:	4083      	lsls	r3, r0
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	9341      	str	r3, [sp, #260]	; 0x104
 8012a30:	4655      	mov	r5, sl
 8012a32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012a36:	2b78      	cmp	r3, #120	; 0x78
 8012a38:	d806      	bhi.n	8012a48 <__ssvfiscanf_r+0xec>
 8012a3a:	2b57      	cmp	r3, #87	; 0x57
 8012a3c:	d810      	bhi.n	8012a60 <__ssvfiscanf_r+0x104>
 8012a3e:	2b25      	cmp	r3, #37	; 0x25
 8012a40:	d0c7      	beq.n	80129d2 <__ssvfiscanf_r+0x76>
 8012a42:	d857      	bhi.n	8012af4 <__ssvfiscanf_r+0x198>
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d065      	beq.n	8012b14 <__ssvfiscanf_r+0x1b8>
 8012a48:	2303      	movs	r3, #3
 8012a4a:	9347      	str	r3, [sp, #284]	; 0x11c
 8012a4c:	230a      	movs	r3, #10
 8012a4e:	9342      	str	r3, [sp, #264]	; 0x108
 8012a50:	e076      	b.n	8012b40 <__ssvfiscanf_r+0x1e4>
 8012a52:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012a54:	fb02 1103 	mla	r1, r2, r3, r1
 8012a58:	3930      	subs	r1, #48	; 0x30
 8012a5a:	9143      	str	r1, [sp, #268]	; 0x10c
 8012a5c:	4655      	mov	r5, sl
 8012a5e:	e7d4      	b.n	8012a0a <__ssvfiscanf_r+0xae>
 8012a60:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012a64:	2a20      	cmp	r2, #32
 8012a66:	d8ef      	bhi.n	8012a48 <__ssvfiscanf_r+0xec>
 8012a68:	a101      	add	r1, pc, #4	; (adr r1, 8012a70 <__ssvfiscanf_r+0x114>)
 8012a6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012a6e:	bf00      	nop
 8012a70:	08012b23 	.word	0x08012b23
 8012a74:	08012a49 	.word	0x08012a49
 8012a78:	08012a49 	.word	0x08012a49
 8012a7c:	08012b81 	.word	0x08012b81
 8012a80:	08012a49 	.word	0x08012a49
 8012a84:	08012a49 	.word	0x08012a49
 8012a88:	08012a49 	.word	0x08012a49
 8012a8c:	08012a49 	.word	0x08012a49
 8012a90:	08012a49 	.word	0x08012a49
 8012a94:	08012a49 	.word	0x08012a49
 8012a98:	08012a49 	.word	0x08012a49
 8012a9c:	08012b97 	.word	0x08012b97
 8012aa0:	08012b7d 	.word	0x08012b7d
 8012aa4:	08012afb 	.word	0x08012afb
 8012aa8:	08012afb 	.word	0x08012afb
 8012aac:	08012afb 	.word	0x08012afb
 8012ab0:	08012a49 	.word	0x08012a49
 8012ab4:	08012b39 	.word	0x08012b39
 8012ab8:	08012a49 	.word	0x08012a49
 8012abc:	08012a49 	.word	0x08012a49
 8012ac0:	08012a49 	.word	0x08012a49
 8012ac4:	08012a49 	.word	0x08012a49
 8012ac8:	08012ba7 	.word	0x08012ba7
 8012acc:	08012b75 	.word	0x08012b75
 8012ad0:	08012b1b 	.word	0x08012b1b
 8012ad4:	08012a49 	.word	0x08012a49
 8012ad8:	08012a49 	.word	0x08012a49
 8012adc:	08012ba3 	.word	0x08012ba3
 8012ae0:	08012a49 	.word	0x08012a49
 8012ae4:	08012b7d 	.word	0x08012b7d
 8012ae8:	08012a49 	.word	0x08012a49
 8012aec:	08012a49 	.word	0x08012a49
 8012af0:	08012b23 	.word	0x08012b23
 8012af4:	3b45      	subs	r3, #69	; 0x45
 8012af6:	2b02      	cmp	r3, #2
 8012af8:	d8a6      	bhi.n	8012a48 <__ssvfiscanf_r+0xec>
 8012afa:	2305      	movs	r3, #5
 8012afc:	e01f      	b.n	8012b3e <__ssvfiscanf_r+0x1e2>
 8012afe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012b00:	4621      	mov	r1, r4
 8012b02:	4630      	mov	r0, r6
 8012b04:	4798      	blx	r3
 8012b06:	2800      	cmp	r0, #0
 8012b08:	f43f af68 	beq.w	80129dc <__ssvfiscanf_r+0x80>
 8012b0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012b0e:	2800      	cmp	r0, #0
 8012b10:	f040 808d 	bne.w	8012c2e <__ssvfiscanf_r+0x2d2>
 8012b14:	f04f 30ff 	mov.w	r0, #4294967295
 8012b18:	e08f      	b.n	8012c3a <__ssvfiscanf_r+0x2de>
 8012b1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012b1c:	f042 0220 	orr.w	r2, r2, #32
 8012b20:	9241      	str	r2, [sp, #260]	; 0x104
 8012b22:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b28:	9241      	str	r2, [sp, #260]	; 0x104
 8012b2a:	2210      	movs	r2, #16
 8012b2c:	2b6f      	cmp	r3, #111	; 0x6f
 8012b2e:	9242      	str	r2, [sp, #264]	; 0x108
 8012b30:	bf34      	ite	cc
 8012b32:	2303      	movcc	r3, #3
 8012b34:	2304      	movcs	r3, #4
 8012b36:	e002      	b.n	8012b3e <__ssvfiscanf_r+0x1e2>
 8012b38:	2300      	movs	r3, #0
 8012b3a:	9342      	str	r3, [sp, #264]	; 0x108
 8012b3c:	2303      	movs	r3, #3
 8012b3e:	9347      	str	r3, [sp, #284]	; 0x11c
 8012b40:	6863      	ldr	r3, [r4, #4]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	dd3d      	ble.n	8012bc2 <__ssvfiscanf_r+0x266>
 8012b46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b48:	0659      	lsls	r1, r3, #25
 8012b4a:	d404      	bmi.n	8012b56 <__ssvfiscanf_r+0x1fa>
 8012b4c:	6823      	ldr	r3, [r4, #0]
 8012b4e:	781a      	ldrb	r2, [r3, #0]
 8012b50:	5cba      	ldrb	r2, [r7, r2]
 8012b52:	0712      	lsls	r2, r2, #28
 8012b54:	d43c      	bmi.n	8012bd0 <__ssvfiscanf_r+0x274>
 8012b56:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012b58:	2b02      	cmp	r3, #2
 8012b5a:	dc4b      	bgt.n	8012bf4 <__ssvfiscanf_r+0x298>
 8012b5c:	466b      	mov	r3, sp
 8012b5e:	4622      	mov	r2, r4
 8012b60:	a941      	add	r1, sp, #260	; 0x104
 8012b62:	4630      	mov	r0, r6
 8012b64:	f000 fb46 	bl	80131f4 <_scanf_chars>
 8012b68:	2801      	cmp	r0, #1
 8012b6a:	d06a      	beq.n	8012c42 <__ssvfiscanf_r+0x2e6>
 8012b6c:	2802      	cmp	r0, #2
 8012b6e:	f47f af1c 	bne.w	80129aa <__ssvfiscanf_r+0x4e>
 8012b72:	e7cb      	b.n	8012b0c <__ssvfiscanf_r+0x1b0>
 8012b74:	2308      	movs	r3, #8
 8012b76:	9342      	str	r3, [sp, #264]	; 0x108
 8012b78:	2304      	movs	r3, #4
 8012b7a:	e7e0      	b.n	8012b3e <__ssvfiscanf_r+0x1e2>
 8012b7c:	220a      	movs	r2, #10
 8012b7e:	e7d5      	b.n	8012b2c <__ssvfiscanf_r+0x1d0>
 8012b80:	4629      	mov	r1, r5
 8012b82:	4640      	mov	r0, r8
 8012b84:	f000 fd32 	bl	80135ec <__sccl>
 8012b88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b8e:	9341      	str	r3, [sp, #260]	; 0x104
 8012b90:	4605      	mov	r5, r0
 8012b92:	2301      	movs	r3, #1
 8012b94:	e7d3      	b.n	8012b3e <__ssvfiscanf_r+0x1e2>
 8012b96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b9c:	9341      	str	r3, [sp, #260]	; 0x104
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	e7cd      	b.n	8012b3e <__ssvfiscanf_r+0x1e2>
 8012ba2:	2302      	movs	r3, #2
 8012ba4:	e7cb      	b.n	8012b3e <__ssvfiscanf_r+0x1e2>
 8012ba6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012ba8:	06c3      	lsls	r3, r0, #27
 8012baa:	f53f aefe 	bmi.w	80129aa <__ssvfiscanf_r+0x4e>
 8012bae:	9b00      	ldr	r3, [sp, #0]
 8012bb0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012bb2:	1d19      	adds	r1, r3, #4
 8012bb4:	9100      	str	r1, [sp, #0]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	07c0      	lsls	r0, r0, #31
 8012bba:	bf4c      	ite	mi
 8012bbc:	801a      	strhmi	r2, [r3, #0]
 8012bbe:	601a      	strpl	r2, [r3, #0]
 8012bc0:	e6f3      	b.n	80129aa <__ssvfiscanf_r+0x4e>
 8012bc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012bc4:	4621      	mov	r1, r4
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	4798      	blx	r3
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d0bb      	beq.n	8012b46 <__ssvfiscanf_r+0x1ea>
 8012bce:	e79d      	b.n	8012b0c <__ssvfiscanf_r+0x1b0>
 8012bd0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012bd2:	3201      	adds	r2, #1
 8012bd4:	9245      	str	r2, [sp, #276]	; 0x114
 8012bd6:	6862      	ldr	r2, [r4, #4]
 8012bd8:	3a01      	subs	r2, #1
 8012bda:	2a00      	cmp	r2, #0
 8012bdc:	6062      	str	r2, [r4, #4]
 8012bde:	dd02      	ble.n	8012be6 <__ssvfiscanf_r+0x28a>
 8012be0:	3301      	adds	r3, #1
 8012be2:	6023      	str	r3, [r4, #0]
 8012be4:	e7b2      	b.n	8012b4c <__ssvfiscanf_r+0x1f0>
 8012be6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012be8:	4621      	mov	r1, r4
 8012bea:	4630      	mov	r0, r6
 8012bec:	4798      	blx	r3
 8012bee:	2800      	cmp	r0, #0
 8012bf0:	d0ac      	beq.n	8012b4c <__ssvfiscanf_r+0x1f0>
 8012bf2:	e78b      	b.n	8012b0c <__ssvfiscanf_r+0x1b0>
 8012bf4:	2b04      	cmp	r3, #4
 8012bf6:	dc0f      	bgt.n	8012c18 <__ssvfiscanf_r+0x2bc>
 8012bf8:	466b      	mov	r3, sp
 8012bfa:	4622      	mov	r2, r4
 8012bfc:	a941      	add	r1, sp, #260	; 0x104
 8012bfe:	4630      	mov	r0, r6
 8012c00:	f000 fb52 	bl	80132a8 <_scanf_i>
 8012c04:	e7b0      	b.n	8012b68 <__ssvfiscanf_r+0x20c>
 8012c06:	bf00      	nop
 8012c08:	080128a9 	.word	0x080128a9
 8012c0c:	08012923 	.word	0x08012923
 8012c10:	08014539 	.word	0x08014539
 8012c14:	0801482a 	.word	0x0801482a
 8012c18:	4b0b      	ldr	r3, [pc, #44]	; (8012c48 <__ssvfiscanf_r+0x2ec>)
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	f43f aec5 	beq.w	80129aa <__ssvfiscanf_r+0x4e>
 8012c20:	466b      	mov	r3, sp
 8012c22:	4622      	mov	r2, r4
 8012c24:	a941      	add	r1, sp, #260	; 0x104
 8012c26:	4630      	mov	r0, r6
 8012c28:	f3af 8000 	nop.w
 8012c2c:	e79c      	b.n	8012b68 <__ssvfiscanf_r+0x20c>
 8012c2e:	89a3      	ldrh	r3, [r4, #12]
 8012c30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012c34:	bf18      	it	ne
 8012c36:	f04f 30ff 	movne.w	r0, #4294967295
 8012c3a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8012c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c42:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012c44:	e7f9      	b.n	8012c3a <__ssvfiscanf_r+0x2de>
 8012c46:	bf00      	nop
 8012c48:	00000000 	.word	0x00000000

08012c4c <__sfputc_r>:
 8012c4c:	6893      	ldr	r3, [r2, #8]
 8012c4e:	3b01      	subs	r3, #1
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	b410      	push	{r4}
 8012c54:	6093      	str	r3, [r2, #8]
 8012c56:	da08      	bge.n	8012c6a <__sfputc_r+0x1e>
 8012c58:	6994      	ldr	r4, [r2, #24]
 8012c5a:	42a3      	cmp	r3, r4
 8012c5c:	db01      	blt.n	8012c62 <__sfputc_r+0x16>
 8012c5e:	290a      	cmp	r1, #10
 8012c60:	d103      	bne.n	8012c6a <__sfputc_r+0x1e>
 8012c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c66:	f000 bd34 	b.w	80136d2 <__swbuf_r>
 8012c6a:	6813      	ldr	r3, [r2, #0]
 8012c6c:	1c58      	adds	r0, r3, #1
 8012c6e:	6010      	str	r0, [r2, #0]
 8012c70:	7019      	strb	r1, [r3, #0]
 8012c72:	4608      	mov	r0, r1
 8012c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c78:	4770      	bx	lr

08012c7a <__sfputs_r>:
 8012c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c7c:	4606      	mov	r6, r0
 8012c7e:	460f      	mov	r7, r1
 8012c80:	4614      	mov	r4, r2
 8012c82:	18d5      	adds	r5, r2, r3
 8012c84:	42ac      	cmp	r4, r5
 8012c86:	d101      	bne.n	8012c8c <__sfputs_r+0x12>
 8012c88:	2000      	movs	r0, #0
 8012c8a:	e007      	b.n	8012c9c <__sfputs_r+0x22>
 8012c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c90:	463a      	mov	r2, r7
 8012c92:	4630      	mov	r0, r6
 8012c94:	f7ff ffda 	bl	8012c4c <__sfputc_r>
 8012c98:	1c43      	adds	r3, r0, #1
 8012c9a:	d1f3      	bne.n	8012c84 <__sfputs_r+0xa>
 8012c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ca0 <_vfiprintf_r>:
 8012ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca4:	460d      	mov	r5, r1
 8012ca6:	b09d      	sub	sp, #116	; 0x74
 8012ca8:	4614      	mov	r4, r2
 8012caa:	4698      	mov	r8, r3
 8012cac:	4606      	mov	r6, r0
 8012cae:	b118      	cbz	r0, 8012cb8 <_vfiprintf_r+0x18>
 8012cb0:	6a03      	ldr	r3, [r0, #32]
 8012cb2:	b90b      	cbnz	r3, 8012cb8 <_vfiprintf_r+0x18>
 8012cb4:	f7fe f9e4 	bl	8011080 <__sinit>
 8012cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012cba:	07d9      	lsls	r1, r3, #31
 8012cbc:	d405      	bmi.n	8012cca <_vfiprintf_r+0x2a>
 8012cbe:	89ab      	ldrh	r3, [r5, #12]
 8012cc0:	059a      	lsls	r2, r3, #22
 8012cc2:	d402      	bmi.n	8012cca <_vfiprintf_r+0x2a>
 8012cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cc6:	f7fe fc04 	bl	80114d2 <__retarget_lock_acquire_recursive>
 8012cca:	89ab      	ldrh	r3, [r5, #12]
 8012ccc:	071b      	lsls	r3, r3, #28
 8012cce:	d501      	bpl.n	8012cd4 <_vfiprintf_r+0x34>
 8012cd0:	692b      	ldr	r3, [r5, #16]
 8012cd2:	b99b      	cbnz	r3, 8012cfc <_vfiprintf_r+0x5c>
 8012cd4:	4629      	mov	r1, r5
 8012cd6:	4630      	mov	r0, r6
 8012cd8:	f000 fd38 	bl	801374c <__swsetup_r>
 8012cdc:	b170      	cbz	r0, 8012cfc <_vfiprintf_r+0x5c>
 8012cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ce0:	07dc      	lsls	r4, r3, #31
 8012ce2:	d504      	bpl.n	8012cee <_vfiprintf_r+0x4e>
 8012ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce8:	b01d      	add	sp, #116	; 0x74
 8012cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cee:	89ab      	ldrh	r3, [r5, #12]
 8012cf0:	0598      	lsls	r0, r3, #22
 8012cf2:	d4f7      	bmi.n	8012ce4 <_vfiprintf_r+0x44>
 8012cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cf6:	f7fe fbed 	bl	80114d4 <__retarget_lock_release_recursive>
 8012cfa:	e7f3      	b.n	8012ce4 <_vfiprintf_r+0x44>
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8012d00:	2320      	movs	r3, #32
 8012d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d0a:	2330      	movs	r3, #48	; 0x30
 8012d0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012ec0 <_vfiprintf_r+0x220>
 8012d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d14:	f04f 0901 	mov.w	r9, #1
 8012d18:	4623      	mov	r3, r4
 8012d1a:	469a      	mov	sl, r3
 8012d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d20:	b10a      	cbz	r2, 8012d26 <_vfiprintf_r+0x86>
 8012d22:	2a25      	cmp	r2, #37	; 0x25
 8012d24:	d1f9      	bne.n	8012d1a <_vfiprintf_r+0x7a>
 8012d26:	ebba 0b04 	subs.w	fp, sl, r4
 8012d2a:	d00b      	beq.n	8012d44 <_vfiprintf_r+0xa4>
 8012d2c:	465b      	mov	r3, fp
 8012d2e:	4622      	mov	r2, r4
 8012d30:	4629      	mov	r1, r5
 8012d32:	4630      	mov	r0, r6
 8012d34:	f7ff ffa1 	bl	8012c7a <__sfputs_r>
 8012d38:	3001      	adds	r0, #1
 8012d3a:	f000 80a9 	beq.w	8012e90 <_vfiprintf_r+0x1f0>
 8012d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d40:	445a      	add	r2, fp
 8012d42:	9209      	str	r2, [sp, #36]	; 0x24
 8012d44:	f89a 3000 	ldrb.w	r3, [sl]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	f000 80a1 	beq.w	8012e90 <_vfiprintf_r+0x1f0>
 8012d4e:	2300      	movs	r3, #0
 8012d50:	f04f 32ff 	mov.w	r2, #4294967295
 8012d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d58:	f10a 0a01 	add.w	sl, sl, #1
 8012d5c:	9304      	str	r3, [sp, #16]
 8012d5e:	9307      	str	r3, [sp, #28]
 8012d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d64:	931a      	str	r3, [sp, #104]	; 0x68
 8012d66:	4654      	mov	r4, sl
 8012d68:	2205      	movs	r2, #5
 8012d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d6e:	4854      	ldr	r0, [pc, #336]	; (8012ec0 <_vfiprintf_r+0x220>)
 8012d70:	f7ed fa3e 	bl	80001f0 <memchr>
 8012d74:	9a04      	ldr	r2, [sp, #16]
 8012d76:	b9d8      	cbnz	r0, 8012db0 <_vfiprintf_r+0x110>
 8012d78:	06d1      	lsls	r1, r2, #27
 8012d7a:	bf44      	itt	mi
 8012d7c:	2320      	movmi	r3, #32
 8012d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d82:	0713      	lsls	r3, r2, #28
 8012d84:	bf44      	itt	mi
 8012d86:	232b      	movmi	r3, #43	; 0x2b
 8012d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8012d90:	2b2a      	cmp	r3, #42	; 0x2a
 8012d92:	d015      	beq.n	8012dc0 <_vfiprintf_r+0x120>
 8012d94:	9a07      	ldr	r2, [sp, #28]
 8012d96:	4654      	mov	r4, sl
 8012d98:	2000      	movs	r0, #0
 8012d9a:	f04f 0c0a 	mov.w	ip, #10
 8012d9e:	4621      	mov	r1, r4
 8012da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012da4:	3b30      	subs	r3, #48	; 0x30
 8012da6:	2b09      	cmp	r3, #9
 8012da8:	d94d      	bls.n	8012e46 <_vfiprintf_r+0x1a6>
 8012daa:	b1b0      	cbz	r0, 8012dda <_vfiprintf_r+0x13a>
 8012dac:	9207      	str	r2, [sp, #28]
 8012dae:	e014      	b.n	8012dda <_vfiprintf_r+0x13a>
 8012db0:	eba0 0308 	sub.w	r3, r0, r8
 8012db4:	fa09 f303 	lsl.w	r3, r9, r3
 8012db8:	4313      	orrs	r3, r2
 8012dba:	9304      	str	r3, [sp, #16]
 8012dbc:	46a2      	mov	sl, r4
 8012dbe:	e7d2      	b.n	8012d66 <_vfiprintf_r+0xc6>
 8012dc0:	9b03      	ldr	r3, [sp, #12]
 8012dc2:	1d19      	adds	r1, r3, #4
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	9103      	str	r1, [sp, #12]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	bfbb      	ittet	lt
 8012dcc:	425b      	neglt	r3, r3
 8012dce:	f042 0202 	orrlt.w	r2, r2, #2
 8012dd2:	9307      	strge	r3, [sp, #28]
 8012dd4:	9307      	strlt	r3, [sp, #28]
 8012dd6:	bfb8      	it	lt
 8012dd8:	9204      	strlt	r2, [sp, #16]
 8012dda:	7823      	ldrb	r3, [r4, #0]
 8012ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8012dde:	d10c      	bne.n	8012dfa <_vfiprintf_r+0x15a>
 8012de0:	7863      	ldrb	r3, [r4, #1]
 8012de2:	2b2a      	cmp	r3, #42	; 0x2a
 8012de4:	d134      	bne.n	8012e50 <_vfiprintf_r+0x1b0>
 8012de6:	9b03      	ldr	r3, [sp, #12]
 8012de8:	1d1a      	adds	r2, r3, #4
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	9203      	str	r2, [sp, #12]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	bfb8      	it	lt
 8012df2:	f04f 33ff 	movlt.w	r3, #4294967295
 8012df6:	3402      	adds	r4, #2
 8012df8:	9305      	str	r3, [sp, #20]
 8012dfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012ed0 <_vfiprintf_r+0x230>
 8012dfe:	7821      	ldrb	r1, [r4, #0]
 8012e00:	2203      	movs	r2, #3
 8012e02:	4650      	mov	r0, sl
 8012e04:	f7ed f9f4 	bl	80001f0 <memchr>
 8012e08:	b138      	cbz	r0, 8012e1a <_vfiprintf_r+0x17a>
 8012e0a:	9b04      	ldr	r3, [sp, #16]
 8012e0c:	eba0 000a 	sub.w	r0, r0, sl
 8012e10:	2240      	movs	r2, #64	; 0x40
 8012e12:	4082      	lsls	r2, r0
 8012e14:	4313      	orrs	r3, r2
 8012e16:	3401      	adds	r4, #1
 8012e18:	9304      	str	r3, [sp, #16]
 8012e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e1e:	4829      	ldr	r0, [pc, #164]	; (8012ec4 <_vfiprintf_r+0x224>)
 8012e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e24:	2206      	movs	r2, #6
 8012e26:	f7ed f9e3 	bl	80001f0 <memchr>
 8012e2a:	2800      	cmp	r0, #0
 8012e2c:	d03f      	beq.n	8012eae <_vfiprintf_r+0x20e>
 8012e2e:	4b26      	ldr	r3, [pc, #152]	; (8012ec8 <_vfiprintf_r+0x228>)
 8012e30:	bb1b      	cbnz	r3, 8012e7a <_vfiprintf_r+0x1da>
 8012e32:	9b03      	ldr	r3, [sp, #12]
 8012e34:	3307      	adds	r3, #7
 8012e36:	f023 0307 	bic.w	r3, r3, #7
 8012e3a:	3308      	adds	r3, #8
 8012e3c:	9303      	str	r3, [sp, #12]
 8012e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e40:	443b      	add	r3, r7
 8012e42:	9309      	str	r3, [sp, #36]	; 0x24
 8012e44:	e768      	b.n	8012d18 <_vfiprintf_r+0x78>
 8012e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e4a:	460c      	mov	r4, r1
 8012e4c:	2001      	movs	r0, #1
 8012e4e:	e7a6      	b.n	8012d9e <_vfiprintf_r+0xfe>
 8012e50:	2300      	movs	r3, #0
 8012e52:	3401      	adds	r4, #1
 8012e54:	9305      	str	r3, [sp, #20]
 8012e56:	4619      	mov	r1, r3
 8012e58:	f04f 0c0a 	mov.w	ip, #10
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e62:	3a30      	subs	r2, #48	; 0x30
 8012e64:	2a09      	cmp	r2, #9
 8012e66:	d903      	bls.n	8012e70 <_vfiprintf_r+0x1d0>
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d0c6      	beq.n	8012dfa <_vfiprintf_r+0x15a>
 8012e6c:	9105      	str	r1, [sp, #20]
 8012e6e:	e7c4      	b.n	8012dfa <_vfiprintf_r+0x15a>
 8012e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e74:	4604      	mov	r4, r0
 8012e76:	2301      	movs	r3, #1
 8012e78:	e7f0      	b.n	8012e5c <_vfiprintf_r+0x1bc>
 8012e7a:	ab03      	add	r3, sp, #12
 8012e7c:	9300      	str	r3, [sp, #0]
 8012e7e:	462a      	mov	r2, r5
 8012e80:	4b12      	ldr	r3, [pc, #72]	; (8012ecc <_vfiprintf_r+0x22c>)
 8012e82:	a904      	add	r1, sp, #16
 8012e84:	4630      	mov	r0, r6
 8012e86:	f3af 8000 	nop.w
 8012e8a:	4607      	mov	r7, r0
 8012e8c:	1c78      	adds	r0, r7, #1
 8012e8e:	d1d6      	bne.n	8012e3e <_vfiprintf_r+0x19e>
 8012e90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e92:	07d9      	lsls	r1, r3, #31
 8012e94:	d405      	bmi.n	8012ea2 <_vfiprintf_r+0x202>
 8012e96:	89ab      	ldrh	r3, [r5, #12]
 8012e98:	059a      	lsls	r2, r3, #22
 8012e9a:	d402      	bmi.n	8012ea2 <_vfiprintf_r+0x202>
 8012e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e9e:	f7fe fb19 	bl	80114d4 <__retarget_lock_release_recursive>
 8012ea2:	89ab      	ldrh	r3, [r5, #12]
 8012ea4:	065b      	lsls	r3, r3, #25
 8012ea6:	f53f af1d 	bmi.w	8012ce4 <_vfiprintf_r+0x44>
 8012eaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012eac:	e71c      	b.n	8012ce8 <_vfiprintf_r+0x48>
 8012eae:	ab03      	add	r3, sp, #12
 8012eb0:	9300      	str	r3, [sp, #0]
 8012eb2:	462a      	mov	r2, r5
 8012eb4:	4b05      	ldr	r3, [pc, #20]	; (8012ecc <_vfiprintf_r+0x22c>)
 8012eb6:	a904      	add	r1, sp, #16
 8012eb8:	4630      	mov	r0, r6
 8012eba:	f000 f879 	bl	8012fb0 <_printf_i>
 8012ebe:	e7e4      	b.n	8012e8a <_vfiprintf_r+0x1ea>
 8012ec0:	08014824 	.word	0x08014824
 8012ec4:	0801482e 	.word	0x0801482e
 8012ec8:	00000000 	.word	0x00000000
 8012ecc:	08012c7b 	.word	0x08012c7b
 8012ed0:	0801482a 	.word	0x0801482a

08012ed4 <_printf_common>:
 8012ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed8:	4616      	mov	r6, r2
 8012eda:	4699      	mov	r9, r3
 8012edc:	688a      	ldr	r2, [r1, #8]
 8012ede:	690b      	ldr	r3, [r1, #16]
 8012ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ee4:	4293      	cmp	r3, r2
 8012ee6:	bfb8      	it	lt
 8012ee8:	4613      	movlt	r3, r2
 8012eea:	6033      	str	r3, [r6, #0]
 8012eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ef0:	4607      	mov	r7, r0
 8012ef2:	460c      	mov	r4, r1
 8012ef4:	b10a      	cbz	r2, 8012efa <_printf_common+0x26>
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	6033      	str	r3, [r6, #0]
 8012efa:	6823      	ldr	r3, [r4, #0]
 8012efc:	0699      	lsls	r1, r3, #26
 8012efe:	bf42      	ittt	mi
 8012f00:	6833      	ldrmi	r3, [r6, #0]
 8012f02:	3302      	addmi	r3, #2
 8012f04:	6033      	strmi	r3, [r6, #0]
 8012f06:	6825      	ldr	r5, [r4, #0]
 8012f08:	f015 0506 	ands.w	r5, r5, #6
 8012f0c:	d106      	bne.n	8012f1c <_printf_common+0x48>
 8012f0e:	f104 0a19 	add.w	sl, r4, #25
 8012f12:	68e3      	ldr	r3, [r4, #12]
 8012f14:	6832      	ldr	r2, [r6, #0]
 8012f16:	1a9b      	subs	r3, r3, r2
 8012f18:	42ab      	cmp	r3, r5
 8012f1a:	dc26      	bgt.n	8012f6a <_printf_common+0x96>
 8012f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012f20:	1e13      	subs	r3, r2, #0
 8012f22:	6822      	ldr	r2, [r4, #0]
 8012f24:	bf18      	it	ne
 8012f26:	2301      	movne	r3, #1
 8012f28:	0692      	lsls	r2, r2, #26
 8012f2a:	d42b      	bmi.n	8012f84 <_printf_common+0xb0>
 8012f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f30:	4649      	mov	r1, r9
 8012f32:	4638      	mov	r0, r7
 8012f34:	47c0      	blx	r8
 8012f36:	3001      	adds	r0, #1
 8012f38:	d01e      	beq.n	8012f78 <_printf_common+0xa4>
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	6922      	ldr	r2, [r4, #16]
 8012f3e:	f003 0306 	and.w	r3, r3, #6
 8012f42:	2b04      	cmp	r3, #4
 8012f44:	bf02      	ittt	eq
 8012f46:	68e5      	ldreq	r5, [r4, #12]
 8012f48:	6833      	ldreq	r3, [r6, #0]
 8012f4a:	1aed      	subeq	r5, r5, r3
 8012f4c:	68a3      	ldr	r3, [r4, #8]
 8012f4e:	bf0c      	ite	eq
 8012f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f54:	2500      	movne	r5, #0
 8012f56:	4293      	cmp	r3, r2
 8012f58:	bfc4      	itt	gt
 8012f5a:	1a9b      	subgt	r3, r3, r2
 8012f5c:	18ed      	addgt	r5, r5, r3
 8012f5e:	2600      	movs	r6, #0
 8012f60:	341a      	adds	r4, #26
 8012f62:	42b5      	cmp	r5, r6
 8012f64:	d11a      	bne.n	8012f9c <_printf_common+0xc8>
 8012f66:	2000      	movs	r0, #0
 8012f68:	e008      	b.n	8012f7c <_printf_common+0xa8>
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	4652      	mov	r2, sl
 8012f6e:	4649      	mov	r1, r9
 8012f70:	4638      	mov	r0, r7
 8012f72:	47c0      	blx	r8
 8012f74:	3001      	adds	r0, #1
 8012f76:	d103      	bne.n	8012f80 <_printf_common+0xac>
 8012f78:	f04f 30ff 	mov.w	r0, #4294967295
 8012f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f80:	3501      	adds	r5, #1
 8012f82:	e7c6      	b.n	8012f12 <_printf_common+0x3e>
 8012f84:	18e1      	adds	r1, r4, r3
 8012f86:	1c5a      	adds	r2, r3, #1
 8012f88:	2030      	movs	r0, #48	; 0x30
 8012f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012f8e:	4422      	add	r2, r4
 8012f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012f98:	3302      	adds	r3, #2
 8012f9a:	e7c7      	b.n	8012f2c <_printf_common+0x58>
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	4622      	mov	r2, r4
 8012fa0:	4649      	mov	r1, r9
 8012fa2:	4638      	mov	r0, r7
 8012fa4:	47c0      	blx	r8
 8012fa6:	3001      	adds	r0, #1
 8012fa8:	d0e6      	beq.n	8012f78 <_printf_common+0xa4>
 8012faa:	3601      	adds	r6, #1
 8012fac:	e7d9      	b.n	8012f62 <_printf_common+0x8e>
	...

08012fb0 <_printf_i>:
 8012fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fb4:	7e0f      	ldrb	r7, [r1, #24]
 8012fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012fb8:	2f78      	cmp	r7, #120	; 0x78
 8012fba:	4691      	mov	r9, r2
 8012fbc:	4680      	mov	r8, r0
 8012fbe:	460c      	mov	r4, r1
 8012fc0:	469a      	mov	sl, r3
 8012fc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012fc6:	d807      	bhi.n	8012fd8 <_printf_i+0x28>
 8012fc8:	2f62      	cmp	r7, #98	; 0x62
 8012fca:	d80a      	bhi.n	8012fe2 <_printf_i+0x32>
 8012fcc:	2f00      	cmp	r7, #0
 8012fce:	f000 80d4 	beq.w	801317a <_printf_i+0x1ca>
 8012fd2:	2f58      	cmp	r7, #88	; 0x58
 8012fd4:	f000 80c0 	beq.w	8013158 <_printf_i+0x1a8>
 8012fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012fe0:	e03a      	b.n	8013058 <_printf_i+0xa8>
 8012fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012fe6:	2b15      	cmp	r3, #21
 8012fe8:	d8f6      	bhi.n	8012fd8 <_printf_i+0x28>
 8012fea:	a101      	add	r1, pc, #4	; (adr r1, 8012ff0 <_printf_i+0x40>)
 8012fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ff0:	08013049 	.word	0x08013049
 8012ff4:	0801305d 	.word	0x0801305d
 8012ff8:	08012fd9 	.word	0x08012fd9
 8012ffc:	08012fd9 	.word	0x08012fd9
 8013000:	08012fd9 	.word	0x08012fd9
 8013004:	08012fd9 	.word	0x08012fd9
 8013008:	0801305d 	.word	0x0801305d
 801300c:	08012fd9 	.word	0x08012fd9
 8013010:	08012fd9 	.word	0x08012fd9
 8013014:	08012fd9 	.word	0x08012fd9
 8013018:	08012fd9 	.word	0x08012fd9
 801301c:	08013161 	.word	0x08013161
 8013020:	08013089 	.word	0x08013089
 8013024:	0801311b 	.word	0x0801311b
 8013028:	08012fd9 	.word	0x08012fd9
 801302c:	08012fd9 	.word	0x08012fd9
 8013030:	08013183 	.word	0x08013183
 8013034:	08012fd9 	.word	0x08012fd9
 8013038:	08013089 	.word	0x08013089
 801303c:	08012fd9 	.word	0x08012fd9
 8013040:	08012fd9 	.word	0x08012fd9
 8013044:	08013123 	.word	0x08013123
 8013048:	682b      	ldr	r3, [r5, #0]
 801304a:	1d1a      	adds	r2, r3, #4
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	602a      	str	r2, [r5, #0]
 8013050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013058:	2301      	movs	r3, #1
 801305a:	e09f      	b.n	801319c <_printf_i+0x1ec>
 801305c:	6820      	ldr	r0, [r4, #0]
 801305e:	682b      	ldr	r3, [r5, #0]
 8013060:	0607      	lsls	r7, r0, #24
 8013062:	f103 0104 	add.w	r1, r3, #4
 8013066:	6029      	str	r1, [r5, #0]
 8013068:	d501      	bpl.n	801306e <_printf_i+0xbe>
 801306a:	681e      	ldr	r6, [r3, #0]
 801306c:	e003      	b.n	8013076 <_printf_i+0xc6>
 801306e:	0646      	lsls	r6, r0, #25
 8013070:	d5fb      	bpl.n	801306a <_printf_i+0xba>
 8013072:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013076:	2e00      	cmp	r6, #0
 8013078:	da03      	bge.n	8013082 <_printf_i+0xd2>
 801307a:	232d      	movs	r3, #45	; 0x2d
 801307c:	4276      	negs	r6, r6
 801307e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013082:	485a      	ldr	r0, [pc, #360]	; (80131ec <_printf_i+0x23c>)
 8013084:	230a      	movs	r3, #10
 8013086:	e012      	b.n	80130ae <_printf_i+0xfe>
 8013088:	682b      	ldr	r3, [r5, #0]
 801308a:	6820      	ldr	r0, [r4, #0]
 801308c:	1d19      	adds	r1, r3, #4
 801308e:	6029      	str	r1, [r5, #0]
 8013090:	0605      	lsls	r5, r0, #24
 8013092:	d501      	bpl.n	8013098 <_printf_i+0xe8>
 8013094:	681e      	ldr	r6, [r3, #0]
 8013096:	e002      	b.n	801309e <_printf_i+0xee>
 8013098:	0641      	lsls	r1, r0, #25
 801309a:	d5fb      	bpl.n	8013094 <_printf_i+0xe4>
 801309c:	881e      	ldrh	r6, [r3, #0]
 801309e:	4853      	ldr	r0, [pc, #332]	; (80131ec <_printf_i+0x23c>)
 80130a0:	2f6f      	cmp	r7, #111	; 0x6f
 80130a2:	bf0c      	ite	eq
 80130a4:	2308      	moveq	r3, #8
 80130a6:	230a      	movne	r3, #10
 80130a8:	2100      	movs	r1, #0
 80130aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80130ae:	6865      	ldr	r5, [r4, #4]
 80130b0:	60a5      	str	r5, [r4, #8]
 80130b2:	2d00      	cmp	r5, #0
 80130b4:	bfa2      	ittt	ge
 80130b6:	6821      	ldrge	r1, [r4, #0]
 80130b8:	f021 0104 	bicge.w	r1, r1, #4
 80130bc:	6021      	strge	r1, [r4, #0]
 80130be:	b90e      	cbnz	r6, 80130c4 <_printf_i+0x114>
 80130c0:	2d00      	cmp	r5, #0
 80130c2:	d04b      	beq.n	801315c <_printf_i+0x1ac>
 80130c4:	4615      	mov	r5, r2
 80130c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80130ca:	fb03 6711 	mls	r7, r3, r1, r6
 80130ce:	5dc7      	ldrb	r7, [r0, r7]
 80130d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80130d4:	4637      	mov	r7, r6
 80130d6:	42bb      	cmp	r3, r7
 80130d8:	460e      	mov	r6, r1
 80130da:	d9f4      	bls.n	80130c6 <_printf_i+0x116>
 80130dc:	2b08      	cmp	r3, #8
 80130de:	d10b      	bne.n	80130f8 <_printf_i+0x148>
 80130e0:	6823      	ldr	r3, [r4, #0]
 80130e2:	07de      	lsls	r6, r3, #31
 80130e4:	d508      	bpl.n	80130f8 <_printf_i+0x148>
 80130e6:	6923      	ldr	r3, [r4, #16]
 80130e8:	6861      	ldr	r1, [r4, #4]
 80130ea:	4299      	cmp	r1, r3
 80130ec:	bfde      	ittt	le
 80130ee:	2330      	movle	r3, #48	; 0x30
 80130f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80130f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80130f8:	1b52      	subs	r2, r2, r5
 80130fa:	6122      	str	r2, [r4, #16]
 80130fc:	f8cd a000 	str.w	sl, [sp]
 8013100:	464b      	mov	r3, r9
 8013102:	aa03      	add	r2, sp, #12
 8013104:	4621      	mov	r1, r4
 8013106:	4640      	mov	r0, r8
 8013108:	f7ff fee4 	bl	8012ed4 <_printf_common>
 801310c:	3001      	adds	r0, #1
 801310e:	d14a      	bne.n	80131a6 <_printf_i+0x1f6>
 8013110:	f04f 30ff 	mov.w	r0, #4294967295
 8013114:	b004      	add	sp, #16
 8013116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801311a:	6823      	ldr	r3, [r4, #0]
 801311c:	f043 0320 	orr.w	r3, r3, #32
 8013120:	6023      	str	r3, [r4, #0]
 8013122:	4833      	ldr	r0, [pc, #204]	; (80131f0 <_printf_i+0x240>)
 8013124:	2778      	movs	r7, #120	; 0x78
 8013126:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801312a:	6823      	ldr	r3, [r4, #0]
 801312c:	6829      	ldr	r1, [r5, #0]
 801312e:	061f      	lsls	r7, r3, #24
 8013130:	f851 6b04 	ldr.w	r6, [r1], #4
 8013134:	d402      	bmi.n	801313c <_printf_i+0x18c>
 8013136:	065f      	lsls	r7, r3, #25
 8013138:	bf48      	it	mi
 801313a:	b2b6      	uxthmi	r6, r6
 801313c:	07df      	lsls	r7, r3, #31
 801313e:	bf48      	it	mi
 8013140:	f043 0320 	orrmi.w	r3, r3, #32
 8013144:	6029      	str	r1, [r5, #0]
 8013146:	bf48      	it	mi
 8013148:	6023      	strmi	r3, [r4, #0]
 801314a:	b91e      	cbnz	r6, 8013154 <_printf_i+0x1a4>
 801314c:	6823      	ldr	r3, [r4, #0]
 801314e:	f023 0320 	bic.w	r3, r3, #32
 8013152:	6023      	str	r3, [r4, #0]
 8013154:	2310      	movs	r3, #16
 8013156:	e7a7      	b.n	80130a8 <_printf_i+0xf8>
 8013158:	4824      	ldr	r0, [pc, #144]	; (80131ec <_printf_i+0x23c>)
 801315a:	e7e4      	b.n	8013126 <_printf_i+0x176>
 801315c:	4615      	mov	r5, r2
 801315e:	e7bd      	b.n	80130dc <_printf_i+0x12c>
 8013160:	682b      	ldr	r3, [r5, #0]
 8013162:	6826      	ldr	r6, [r4, #0]
 8013164:	6961      	ldr	r1, [r4, #20]
 8013166:	1d18      	adds	r0, r3, #4
 8013168:	6028      	str	r0, [r5, #0]
 801316a:	0635      	lsls	r5, r6, #24
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	d501      	bpl.n	8013174 <_printf_i+0x1c4>
 8013170:	6019      	str	r1, [r3, #0]
 8013172:	e002      	b.n	801317a <_printf_i+0x1ca>
 8013174:	0670      	lsls	r0, r6, #25
 8013176:	d5fb      	bpl.n	8013170 <_printf_i+0x1c0>
 8013178:	8019      	strh	r1, [r3, #0]
 801317a:	2300      	movs	r3, #0
 801317c:	6123      	str	r3, [r4, #16]
 801317e:	4615      	mov	r5, r2
 8013180:	e7bc      	b.n	80130fc <_printf_i+0x14c>
 8013182:	682b      	ldr	r3, [r5, #0]
 8013184:	1d1a      	adds	r2, r3, #4
 8013186:	602a      	str	r2, [r5, #0]
 8013188:	681d      	ldr	r5, [r3, #0]
 801318a:	6862      	ldr	r2, [r4, #4]
 801318c:	2100      	movs	r1, #0
 801318e:	4628      	mov	r0, r5
 8013190:	f7ed f82e 	bl	80001f0 <memchr>
 8013194:	b108      	cbz	r0, 801319a <_printf_i+0x1ea>
 8013196:	1b40      	subs	r0, r0, r5
 8013198:	6060      	str	r0, [r4, #4]
 801319a:	6863      	ldr	r3, [r4, #4]
 801319c:	6123      	str	r3, [r4, #16]
 801319e:	2300      	movs	r3, #0
 80131a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131a4:	e7aa      	b.n	80130fc <_printf_i+0x14c>
 80131a6:	6923      	ldr	r3, [r4, #16]
 80131a8:	462a      	mov	r2, r5
 80131aa:	4649      	mov	r1, r9
 80131ac:	4640      	mov	r0, r8
 80131ae:	47d0      	blx	sl
 80131b0:	3001      	adds	r0, #1
 80131b2:	d0ad      	beq.n	8013110 <_printf_i+0x160>
 80131b4:	6823      	ldr	r3, [r4, #0]
 80131b6:	079b      	lsls	r3, r3, #30
 80131b8:	d413      	bmi.n	80131e2 <_printf_i+0x232>
 80131ba:	68e0      	ldr	r0, [r4, #12]
 80131bc:	9b03      	ldr	r3, [sp, #12]
 80131be:	4298      	cmp	r0, r3
 80131c0:	bfb8      	it	lt
 80131c2:	4618      	movlt	r0, r3
 80131c4:	e7a6      	b.n	8013114 <_printf_i+0x164>
 80131c6:	2301      	movs	r3, #1
 80131c8:	4632      	mov	r2, r6
 80131ca:	4649      	mov	r1, r9
 80131cc:	4640      	mov	r0, r8
 80131ce:	47d0      	blx	sl
 80131d0:	3001      	adds	r0, #1
 80131d2:	d09d      	beq.n	8013110 <_printf_i+0x160>
 80131d4:	3501      	adds	r5, #1
 80131d6:	68e3      	ldr	r3, [r4, #12]
 80131d8:	9903      	ldr	r1, [sp, #12]
 80131da:	1a5b      	subs	r3, r3, r1
 80131dc:	42ab      	cmp	r3, r5
 80131de:	dcf2      	bgt.n	80131c6 <_printf_i+0x216>
 80131e0:	e7eb      	b.n	80131ba <_printf_i+0x20a>
 80131e2:	2500      	movs	r5, #0
 80131e4:	f104 0619 	add.w	r6, r4, #25
 80131e8:	e7f5      	b.n	80131d6 <_printf_i+0x226>
 80131ea:	bf00      	nop
 80131ec:	08014835 	.word	0x08014835
 80131f0:	08014846 	.word	0x08014846

080131f4 <_scanf_chars>:
 80131f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131f8:	4615      	mov	r5, r2
 80131fa:	688a      	ldr	r2, [r1, #8]
 80131fc:	4680      	mov	r8, r0
 80131fe:	460c      	mov	r4, r1
 8013200:	b932      	cbnz	r2, 8013210 <_scanf_chars+0x1c>
 8013202:	698a      	ldr	r2, [r1, #24]
 8013204:	2a00      	cmp	r2, #0
 8013206:	bf0c      	ite	eq
 8013208:	2201      	moveq	r2, #1
 801320a:	f04f 32ff 	movne.w	r2, #4294967295
 801320e:	608a      	str	r2, [r1, #8]
 8013210:	6822      	ldr	r2, [r4, #0]
 8013212:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80132a4 <_scanf_chars+0xb0>
 8013216:	06d1      	lsls	r1, r2, #27
 8013218:	bf5f      	itttt	pl
 801321a:	681a      	ldrpl	r2, [r3, #0]
 801321c:	1d11      	addpl	r1, r2, #4
 801321e:	6019      	strpl	r1, [r3, #0]
 8013220:	6816      	ldrpl	r6, [r2, #0]
 8013222:	2700      	movs	r7, #0
 8013224:	69a0      	ldr	r0, [r4, #24]
 8013226:	b188      	cbz	r0, 801324c <_scanf_chars+0x58>
 8013228:	2801      	cmp	r0, #1
 801322a:	d107      	bne.n	801323c <_scanf_chars+0x48>
 801322c:	682a      	ldr	r2, [r5, #0]
 801322e:	7811      	ldrb	r1, [r2, #0]
 8013230:	6962      	ldr	r2, [r4, #20]
 8013232:	5c52      	ldrb	r2, [r2, r1]
 8013234:	b952      	cbnz	r2, 801324c <_scanf_chars+0x58>
 8013236:	2f00      	cmp	r7, #0
 8013238:	d031      	beq.n	801329e <_scanf_chars+0xaa>
 801323a:	e022      	b.n	8013282 <_scanf_chars+0x8e>
 801323c:	2802      	cmp	r0, #2
 801323e:	d120      	bne.n	8013282 <_scanf_chars+0x8e>
 8013240:	682b      	ldr	r3, [r5, #0]
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013248:	071b      	lsls	r3, r3, #28
 801324a:	d41a      	bmi.n	8013282 <_scanf_chars+0x8e>
 801324c:	6823      	ldr	r3, [r4, #0]
 801324e:	06da      	lsls	r2, r3, #27
 8013250:	bf5e      	ittt	pl
 8013252:	682b      	ldrpl	r3, [r5, #0]
 8013254:	781b      	ldrbpl	r3, [r3, #0]
 8013256:	f806 3b01 	strbpl.w	r3, [r6], #1
 801325a:	682a      	ldr	r2, [r5, #0]
 801325c:	686b      	ldr	r3, [r5, #4]
 801325e:	3201      	adds	r2, #1
 8013260:	602a      	str	r2, [r5, #0]
 8013262:	68a2      	ldr	r2, [r4, #8]
 8013264:	3b01      	subs	r3, #1
 8013266:	3a01      	subs	r2, #1
 8013268:	606b      	str	r3, [r5, #4]
 801326a:	3701      	adds	r7, #1
 801326c:	60a2      	str	r2, [r4, #8]
 801326e:	b142      	cbz	r2, 8013282 <_scanf_chars+0x8e>
 8013270:	2b00      	cmp	r3, #0
 8013272:	dcd7      	bgt.n	8013224 <_scanf_chars+0x30>
 8013274:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013278:	4629      	mov	r1, r5
 801327a:	4640      	mov	r0, r8
 801327c:	4798      	blx	r3
 801327e:	2800      	cmp	r0, #0
 8013280:	d0d0      	beq.n	8013224 <_scanf_chars+0x30>
 8013282:	6823      	ldr	r3, [r4, #0]
 8013284:	f013 0310 	ands.w	r3, r3, #16
 8013288:	d105      	bne.n	8013296 <_scanf_chars+0xa2>
 801328a:	68e2      	ldr	r2, [r4, #12]
 801328c:	3201      	adds	r2, #1
 801328e:	60e2      	str	r2, [r4, #12]
 8013290:	69a2      	ldr	r2, [r4, #24]
 8013292:	b102      	cbz	r2, 8013296 <_scanf_chars+0xa2>
 8013294:	7033      	strb	r3, [r6, #0]
 8013296:	6923      	ldr	r3, [r4, #16]
 8013298:	443b      	add	r3, r7
 801329a:	6123      	str	r3, [r4, #16]
 801329c:	2000      	movs	r0, #0
 801329e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132a2:	bf00      	nop
 80132a4:	08014539 	.word	0x08014539

080132a8 <_scanf_i>:
 80132a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ac:	4698      	mov	r8, r3
 80132ae:	4b74      	ldr	r3, [pc, #464]	; (8013480 <_scanf_i+0x1d8>)
 80132b0:	460c      	mov	r4, r1
 80132b2:	4682      	mov	sl, r0
 80132b4:	4616      	mov	r6, r2
 80132b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80132ba:	b087      	sub	sp, #28
 80132bc:	ab03      	add	r3, sp, #12
 80132be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80132c2:	4b70      	ldr	r3, [pc, #448]	; (8013484 <_scanf_i+0x1dc>)
 80132c4:	69a1      	ldr	r1, [r4, #24]
 80132c6:	4a70      	ldr	r2, [pc, #448]	; (8013488 <_scanf_i+0x1e0>)
 80132c8:	2903      	cmp	r1, #3
 80132ca:	bf18      	it	ne
 80132cc:	461a      	movne	r2, r3
 80132ce:	68a3      	ldr	r3, [r4, #8]
 80132d0:	9201      	str	r2, [sp, #4]
 80132d2:	1e5a      	subs	r2, r3, #1
 80132d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80132d8:	bf88      	it	hi
 80132da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80132de:	4627      	mov	r7, r4
 80132e0:	bf82      	ittt	hi
 80132e2:	eb03 0905 	addhi.w	r9, r3, r5
 80132e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80132ea:	60a3      	strhi	r3, [r4, #8]
 80132ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80132f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80132f4:	bf98      	it	ls
 80132f6:	f04f 0900 	movls.w	r9, #0
 80132fa:	6023      	str	r3, [r4, #0]
 80132fc:	463d      	mov	r5, r7
 80132fe:	f04f 0b00 	mov.w	fp, #0
 8013302:	6831      	ldr	r1, [r6, #0]
 8013304:	ab03      	add	r3, sp, #12
 8013306:	7809      	ldrb	r1, [r1, #0]
 8013308:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801330c:	2202      	movs	r2, #2
 801330e:	f7ec ff6f 	bl	80001f0 <memchr>
 8013312:	b328      	cbz	r0, 8013360 <_scanf_i+0xb8>
 8013314:	f1bb 0f01 	cmp.w	fp, #1
 8013318:	d159      	bne.n	80133ce <_scanf_i+0x126>
 801331a:	6862      	ldr	r2, [r4, #4]
 801331c:	b92a      	cbnz	r2, 801332a <_scanf_i+0x82>
 801331e:	6822      	ldr	r2, [r4, #0]
 8013320:	2308      	movs	r3, #8
 8013322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013326:	6063      	str	r3, [r4, #4]
 8013328:	6022      	str	r2, [r4, #0]
 801332a:	6822      	ldr	r2, [r4, #0]
 801332c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013330:	6022      	str	r2, [r4, #0]
 8013332:	68a2      	ldr	r2, [r4, #8]
 8013334:	1e51      	subs	r1, r2, #1
 8013336:	60a1      	str	r1, [r4, #8]
 8013338:	b192      	cbz	r2, 8013360 <_scanf_i+0xb8>
 801333a:	6832      	ldr	r2, [r6, #0]
 801333c:	1c51      	adds	r1, r2, #1
 801333e:	6031      	str	r1, [r6, #0]
 8013340:	7812      	ldrb	r2, [r2, #0]
 8013342:	f805 2b01 	strb.w	r2, [r5], #1
 8013346:	6872      	ldr	r2, [r6, #4]
 8013348:	3a01      	subs	r2, #1
 801334a:	2a00      	cmp	r2, #0
 801334c:	6072      	str	r2, [r6, #4]
 801334e:	dc07      	bgt.n	8013360 <_scanf_i+0xb8>
 8013350:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013354:	4631      	mov	r1, r6
 8013356:	4650      	mov	r0, sl
 8013358:	4790      	blx	r2
 801335a:	2800      	cmp	r0, #0
 801335c:	f040 8085 	bne.w	801346a <_scanf_i+0x1c2>
 8013360:	f10b 0b01 	add.w	fp, fp, #1
 8013364:	f1bb 0f03 	cmp.w	fp, #3
 8013368:	d1cb      	bne.n	8013302 <_scanf_i+0x5a>
 801336a:	6863      	ldr	r3, [r4, #4]
 801336c:	b90b      	cbnz	r3, 8013372 <_scanf_i+0xca>
 801336e:	230a      	movs	r3, #10
 8013370:	6063      	str	r3, [r4, #4]
 8013372:	6863      	ldr	r3, [r4, #4]
 8013374:	4945      	ldr	r1, [pc, #276]	; (801348c <_scanf_i+0x1e4>)
 8013376:	6960      	ldr	r0, [r4, #20]
 8013378:	1ac9      	subs	r1, r1, r3
 801337a:	f000 f937 	bl	80135ec <__sccl>
 801337e:	f04f 0b00 	mov.w	fp, #0
 8013382:	68a3      	ldr	r3, [r4, #8]
 8013384:	6822      	ldr	r2, [r4, #0]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d03d      	beq.n	8013406 <_scanf_i+0x15e>
 801338a:	6831      	ldr	r1, [r6, #0]
 801338c:	6960      	ldr	r0, [r4, #20]
 801338e:	f891 c000 	ldrb.w	ip, [r1]
 8013392:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013396:	2800      	cmp	r0, #0
 8013398:	d035      	beq.n	8013406 <_scanf_i+0x15e>
 801339a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801339e:	d124      	bne.n	80133ea <_scanf_i+0x142>
 80133a0:	0510      	lsls	r0, r2, #20
 80133a2:	d522      	bpl.n	80133ea <_scanf_i+0x142>
 80133a4:	f10b 0b01 	add.w	fp, fp, #1
 80133a8:	f1b9 0f00 	cmp.w	r9, #0
 80133ac:	d003      	beq.n	80133b6 <_scanf_i+0x10e>
 80133ae:	3301      	adds	r3, #1
 80133b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80133b4:	60a3      	str	r3, [r4, #8]
 80133b6:	6873      	ldr	r3, [r6, #4]
 80133b8:	3b01      	subs	r3, #1
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	6073      	str	r3, [r6, #4]
 80133be:	dd1b      	ble.n	80133f8 <_scanf_i+0x150>
 80133c0:	6833      	ldr	r3, [r6, #0]
 80133c2:	3301      	adds	r3, #1
 80133c4:	6033      	str	r3, [r6, #0]
 80133c6:	68a3      	ldr	r3, [r4, #8]
 80133c8:	3b01      	subs	r3, #1
 80133ca:	60a3      	str	r3, [r4, #8]
 80133cc:	e7d9      	b.n	8013382 <_scanf_i+0xda>
 80133ce:	f1bb 0f02 	cmp.w	fp, #2
 80133d2:	d1ae      	bne.n	8013332 <_scanf_i+0x8a>
 80133d4:	6822      	ldr	r2, [r4, #0]
 80133d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80133da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80133de:	d1bf      	bne.n	8013360 <_scanf_i+0xb8>
 80133e0:	2310      	movs	r3, #16
 80133e2:	6063      	str	r3, [r4, #4]
 80133e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80133e8:	e7a2      	b.n	8013330 <_scanf_i+0x88>
 80133ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80133ee:	6022      	str	r2, [r4, #0]
 80133f0:	780b      	ldrb	r3, [r1, #0]
 80133f2:	f805 3b01 	strb.w	r3, [r5], #1
 80133f6:	e7de      	b.n	80133b6 <_scanf_i+0x10e>
 80133f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80133fc:	4631      	mov	r1, r6
 80133fe:	4650      	mov	r0, sl
 8013400:	4798      	blx	r3
 8013402:	2800      	cmp	r0, #0
 8013404:	d0df      	beq.n	80133c6 <_scanf_i+0x11e>
 8013406:	6823      	ldr	r3, [r4, #0]
 8013408:	05d9      	lsls	r1, r3, #23
 801340a:	d50d      	bpl.n	8013428 <_scanf_i+0x180>
 801340c:	42bd      	cmp	r5, r7
 801340e:	d909      	bls.n	8013424 <_scanf_i+0x17c>
 8013410:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013414:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013418:	4632      	mov	r2, r6
 801341a:	4650      	mov	r0, sl
 801341c:	4798      	blx	r3
 801341e:	f105 39ff 	add.w	r9, r5, #4294967295
 8013422:	464d      	mov	r5, r9
 8013424:	42bd      	cmp	r5, r7
 8013426:	d028      	beq.n	801347a <_scanf_i+0x1d2>
 8013428:	6822      	ldr	r2, [r4, #0]
 801342a:	f012 0210 	ands.w	r2, r2, #16
 801342e:	d113      	bne.n	8013458 <_scanf_i+0x1b0>
 8013430:	702a      	strb	r2, [r5, #0]
 8013432:	6863      	ldr	r3, [r4, #4]
 8013434:	9e01      	ldr	r6, [sp, #4]
 8013436:	4639      	mov	r1, r7
 8013438:	4650      	mov	r0, sl
 801343a:	47b0      	blx	r6
 801343c:	f8d8 3000 	ldr.w	r3, [r8]
 8013440:	6821      	ldr	r1, [r4, #0]
 8013442:	1d1a      	adds	r2, r3, #4
 8013444:	f8c8 2000 	str.w	r2, [r8]
 8013448:	f011 0f20 	tst.w	r1, #32
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	d00f      	beq.n	8013470 <_scanf_i+0x1c8>
 8013450:	6018      	str	r0, [r3, #0]
 8013452:	68e3      	ldr	r3, [r4, #12]
 8013454:	3301      	adds	r3, #1
 8013456:	60e3      	str	r3, [r4, #12]
 8013458:	6923      	ldr	r3, [r4, #16]
 801345a:	1bed      	subs	r5, r5, r7
 801345c:	445d      	add	r5, fp
 801345e:	442b      	add	r3, r5
 8013460:	6123      	str	r3, [r4, #16]
 8013462:	2000      	movs	r0, #0
 8013464:	b007      	add	sp, #28
 8013466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801346a:	f04f 0b00 	mov.w	fp, #0
 801346e:	e7ca      	b.n	8013406 <_scanf_i+0x15e>
 8013470:	07ca      	lsls	r2, r1, #31
 8013472:	bf4c      	ite	mi
 8013474:	8018      	strhmi	r0, [r3, #0]
 8013476:	6018      	strpl	r0, [r3, #0]
 8013478:	e7eb      	b.n	8013452 <_scanf_i+0x1aa>
 801347a:	2001      	movs	r0, #1
 801347c:	e7f2      	b.n	8013464 <_scanf_i+0x1bc>
 801347e:	bf00      	nop
 8013480:	0801443c 	.word	0x0801443c
 8013484:	08013a51 	.word	0x08013a51
 8013488:	08013969 	.word	0x08013969
 801348c:	08014867 	.word	0x08014867

08013490 <__sflush_r>:
 8013490:	898a      	ldrh	r2, [r1, #12]
 8013492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013496:	4605      	mov	r5, r0
 8013498:	0710      	lsls	r0, r2, #28
 801349a:	460c      	mov	r4, r1
 801349c:	d458      	bmi.n	8013550 <__sflush_r+0xc0>
 801349e:	684b      	ldr	r3, [r1, #4]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	dc05      	bgt.n	80134b0 <__sflush_r+0x20>
 80134a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	dc02      	bgt.n	80134b0 <__sflush_r+0x20>
 80134aa:	2000      	movs	r0, #0
 80134ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134b2:	2e00      	cmp	r6, #0
 80134b4:	d0f9      	beq.n	80134aa <__sflush_r+0x1a>
 80134b6:	2300      	movs	r3, #0
 80134b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80134bc:	682f      	ldr	r7, [r5, #0]
 80134be:	6a21      	ldr	r1, [r4, #32]
 80134c0:	602b      	str	r3, [r5, #0]
 80134c2:	d032      	beq.n	801352a <__sflush_r+0x9a>
 80134c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80134c6:	89a3      	ldrh	r3, [r4, #12]
 80134c8:	075a      	lsls	r2, r3, #29
 80134ca:	d505      	bpl.n	80134d8 <__sflush_r+0x48>
 80134cc:	6863      	ldr	r3, [r4, #4]
 80134ce:	1ac0      	subs	r0, r0, r3
 80134d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80134d2:	b10b      	cbz	r3, 80134d8 <__sflush_r+0x48>
 80134d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80134d6:	1ac0      	subs	r0, r0, r3
 80134d8:	2300      	movs	r3, #0
 80134da:	4602      	mov	r2, r0
 80134dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134de:	6a21      	ldr	r1, [r4, #32]
 80134e0:	4628      	mov	r0, r5
 80134e2:	47b0      	blx	r6
 80134e4:	1c43      	adds	r3, r0, #1
 80134e6:	89a3      	ldrh	r3, [r4, #12]
 80134e8:	d106      	bne.n	80134f8 <__sflush_r+0x68>
 80134ea:	6829      	ldr	r1, [r5, #0]
 80134ec:	291d      	cmp	r1, #29
 80134ee:	d82b      	bhi.n	8013548 <__sflush_r+0xb8>
 80134f0:	4a29      	ldr	r2, [pc, #164]	; (8013598 <__sflush_r+0x108>)
 80134f2:	410a      	asrs	r2, r1
 80134f4:	07d6      	lsls	r6, r2, #31
 80134f6:	d427      	bmi.n	8013548 <__sflush_r+0xb8>
 80134f8:	2200      	movs	r2, #0
 80134fa:	6062      	str	r2, [r4, #4]
 80134fc:	04d9      	lsls	r1, r3, #19
 80134fe:	6922      	ldr	r2, [r4, #16]
 8013500:	6022      	str	r2, [r4, #0]
 8013502:	d504      	bpl.n	801350e <__sflush_r+0x7e>
 8013504:	1c42      	adds	r2, r0, #1
 8013506:	d101      	bne.n	801350c <__sflush_r+0x7c>
 8013508:	682b      	ldr	r3, [r5, #0]
 801350a:	b903      	cbnz	r3, 801350e <__sflush_r+0x7e>
 801350c:	6560      	str	r0, [r4, #84]	; 0x54
 801350e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013510:	602f      	str	r7, [r5, #0]
 8013512:	2900      	cmp	r1, #0
 8013514:	d0c9      	beq.n	80134aa <__sflush_r+0x1a>
 8013516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801351a:	4299      	cmp	r1, r3
 801351c:	d002      	beq.n	8013524 <__sflush_r+0x94>
 801351e:	4628      	mov	r0, r5
 8013520:	f7fd fff2 	bl	8011508 <_free_r>
 8013524:	2000      	movs	r0, #0
 8013526:	6360      	str	r0, [r4, #52]	; 0x34
 8013528:	e7c0      	b.n	80134ac <__sflush_r+0x1c>
 801352a:	2301      	movs	r3, #1
 801352c:	4628      	mov	r0, r5
 801352e:	47b0      	blx	r6
 8013530:	1c41      	adds	r1, r0, #1
 8013532:	d1c8      	bne.n	80134c6 <__sflush_r+0x36>
 8013534:	682b      	ldr	r3, [r5, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d0c5      	beq.n	80134c6 <__sflush_r+0x36>
 801353a:	2b1d      	cmp	r3, #29
 801353c:	d001      	beq.n	8013542 <__sflush_r+0xb2>
 801353e:	2b16      	cmp	r3, #22
 8013540:	d101      	bne.n	8013546 <__sflush_r+0xb6>
 8013542:	602f      	str	r7, [r5, #0]
 8013544:	e7b1      	b.n	80134aa <__sflush_r+0x1a>
 8013546:	89a3      	ldrh	r3, [r4, #12]
 8013548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801354c:	81a3      	strh	r3, [r4, #12]
 801354e:	e7ad      	b.n	80134ac <__sflush_r+0x1c>
 8013550:	690f      	ldr	r7, [r1, #16]
 8013552:	2f00      	cmp	r7, #0
 8013554:	d0a9      	beq.n	80134aa <__sflush_r+0x1a>
 8013556:	0793      	lsls	r3, r2, #30
 8013558:	680e      	ldr	r6, [r1, #0]
 801355a:	bf08      	it	eq
 801355c:	694b      	ldreq	r3, [r1, #20]
 801355e:	600f      	str	r7, [r1, #0]
 8013560:	bf18      	it	ne
 8013562:	2300      	movne	r3, #0
 8013564:	eba6 0807 	sub.w	r8, r6, r7
 8013568:	608b      	str	r3, [r1, #8]
 801356a:	f1b8 0f00 	cmp.w	r8, #0
 801356e:	dd9c      	ble.n	80134aa <__sflush_r+0x1a>
 8013570:	6a21      	ldr	r1, [r4, #32]
 8013572:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013574:	4643      	mov	r3, r8
 8013576:	463a      	mov	r2, r7
 8013578:	4628      	mov	r0, r5
 801357a:	47b0      	blx	r6
 801357c:	2800      	cmp	r0, #0
 801357e:	dc06      	bgt.n	801358e <__sflush_r+0xfe>
 8013580:	89a3      	ldrh	r3, [r4, #12]
 8013582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013586:	81a3      	strh	r3, [r4, #12]
 8013588:	f04f 30ff 	mov.w	r0, #4294967295
 801358c:	e78e      	b.n	80134ac <__sflush_r+0x1c>
 801358e:	4407      	add	r7, r0
 8013590:	eba8 0800 	sub.w	r8, r8, r0
 8013594:	e7e9      	b.n	801356a <__sflush_r+0xda>
 8013596:	bf00      	nop
 8013598:	dfbffffe 	.word	0xdfbffffe

0801359c <_fflush_r>:
 801359c:	b538      	push	{r3, r4, r5, lr}
 801359e:	690b      	ldr	r3, [r1, #16]
 80135a0:	4605      	mov	r5, r0
 80135a2:	460c      	mov	r4, r1
 80135a4:	b913      	cbnz	r3, 80135ac <_fflush_r+0x10>
 80135a6:	2500      	movs	r5, #0
 80135a8:	4628      	mov	r0, r5
 80135aa:	bd38      	pop	{r3, r4, r5, pc}
 80135ac:	b118      	cbz	r0, 80135b6 <_fflush_r+0x1a>
 80135ae:	6a03      	ldr	r3, [r0, #32]
 80135b0:	b90b      	cbnz	r3, 80135b6 <_fflush_r+0x1a>
 80135b2:	f7fd fd65 	bl	8011080 <__sinit>
 80135b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d0f3      	beq.n	80135a6 <_fflush_r+0xa>
 80135be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80135c0:	07d0      	lsls	r0, r2, #31
 80135c2:	d404      	bmi.n	80135ce <_fflush_r+0x32>
 80135c4:	0599      	lsls	r1, r3, #22
 80135c6:	d402      	bmi.n	80135ce <_fflush_r+0x32>
 80135c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135ca:	f7fd ff82 	bl	80114d2 <__retarget_lock_acquire_recursive>
 80135ce:	4628      	mov	r0, r5
 80135d0:	4621      	mov	r1, r4
 80135d2:	f7ff ff5d 	bl	8013490 <__sflush_r>
 80135d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135d8:	07da      	lsls	r2, r3, #31
 80135da:	4605      	mov	r5, r0
 80135dc:	d4e4      	bmi.n	80135a8 <_fflush_r+0xc>
 80135de:	89a3      	ldrh	r3, [r4, #12]
 80135e0:	059b      	lsls	r3, r3, #22
 80135e2:	d4e1      	bmi.n	80135a8 <_fflush_r+0xc>
 80135e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135e6:	f7fd ff75 	bl	80114d4 <__retarget_lock_release_recursive>
 80135ea:	e7dd      	b.n	80135a8 <_fflush_r+0xc>

080135ec <__sccl>:
 80135ec:	b570      	push	{r4, r5, r6, lr}
 80135ee:	780b      	ldrb	r3, [r1, #0]
 80135f0:	4604      	mov	r4, r0
 80135f2:	2b5e      	cmp	r3, #94	; 0x5e
 80135f4:	bf0b      	itete	eq
 80135f6:	784b      	ldrbeq	r3, [r1, #1]
 80135f8:	1c4a      	addne	r2, r1, #1
 80135fa:	1c8a      	addeq	r2, r1, #2
 80135fc:	2100      	movne	r1, #0
 80135fe:	bf08      	it	eq
 8013600:	2101      	moveq	r1, #1
 8013602:	3801      	subs	r0, #1
 8013604:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013608:	f800 1f01 	strb.w	r1, [r0, #1]!
 801360c:	42a8      	cmp	r0, r5
 801360e:	d1fb      	bne.n	8013608 <__sccl+0x1c>
 8013610:	b90b      	cbnz	r3, 8013616 <__sccl+0x2a>
 8013612:	1e50      	subs	r0, r2, #1
 8013614:	bd70      	pop	{r4, r5, r6, pc}
 8013616:	f081 0101 	eor.w	r1, r1, #1
 801361a:	54e1      	strb	r1, [r4, r3]
 801361c:	4610      	mov	r0, r2
 801361e:	4602      	mov	r2, r0
 8013620:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013624:	2d2d      	cmp	r5, #45	; 0x2d
 8013626:	d005      	beq.n	8013634 <__sccl+0x48>
 8013628:	2d5d      	cmp	r5, #93	; 0x5d
 801362a:	d016      	beq.n	801365a <__sccl+0x6e>
 801362c:	2d00      	cmp	r5, #0
 801362e:	d0f1      	beq.n	8013614 <__sccl+0x28>
 8013630:	462b      	mov	r3, r5
 8013632:	e7f2      	b.n	801361a <__sccl+0x2e>
 8013634:	7846      	ldrb	r6, [r0, #1]
 8013636:	2e5d      	cmp	r6, #93	; 0x5d
 8013638:	d0fa      	beq.n	8013630 <__sccl+0x44>
 801363a:	42b3      	cmp	r3, r6
 801363c:	dcf8      	bgt.n	8013630 <__sccl+0x44>
 801363e:	3002      	adds	r0, #2
 8013640:	461a      	mov	r2, r3
 8013642:	3201      	adds	r2, #1
 8013644:	4296      	cmp	r6, r2
 8013646:	54a1      	strb	r1, [r4, r2]
 8013648:	dcfb      	bgt.n	8013642 <__sccl+0x56>
 801364a:	1af2      	subs	r2, r6, r3
 801364c:	3a01      	subs	r2, #1
 801364e:	1c5d      	adds	r5, r3, #1
 8013650:	42b3      	cmp	r3, r6
 8013652:	bfa8      	it	ge
 8013654:	2200      	movge	r2, #0
 8013656:	18ab      	adds	r3, r5, r2
 8013658:	e7e1      	b.n	801361e <__sccl+0x32>
 801365a:	4610      	mov	r0, r2
 801365c:	e7da      	b.n	8013614 <__sccl+0x28>

0801365e <__submore>:
 801365e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013662:	460c      	mov	r4, r1
 8013664:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801366a:	4299      	cmp	r1, r3
 801366c:	d11d      	bne.n	80136aa <__submore+0x4c>
 801366e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013672:	f7fc fd9b 	bl	80101ac <_malloc_r>
 8013676:	b918      	cbnz	r0, 8013680 <__submore+0x22>
 8013678:	f04f 30ff 	mov.w	r0, #4294967295
 801367c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013684:	63a3      	str	r3, [r4, #56]	; 0x38
 8013686:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801368a:	6360      	str	r0, [r4, #52]	; 0x34
 801368c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013690:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013694:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013698:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801369c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80136a0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80136a4:	6020      	str	r0, [r4, #0]
 80136a6:	2000      	movs	r0, #0
 80136a8:	e7e8      	b.n	801367c <__submore+0x1e>
 80136aa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80136ac:	0077      	lsls	r7, r6, #1
 80136ae:	463a      	mov	r2, r7
 80136b0:	f7fc fe10 	bl	80102d4 <_realloc_r>
 80136b4:	4605      	mov	r5, r0
 80136b6:	2800      	cmp	r0, #0
 80136b8:	d0de      	beq.n	8013678 <__submore+0x1a>
 80136ba:	eb00 0806 	add.w	r8, r0, r6
 80136be:	4601      	mov	r1, r0
 80136c0:	4632      	mov	r2, r6
 80136c2:	4640      	mov	r0, r8
 80136c4:	f7fd ff07 	bl	80114d6 <memcpy>
 80136c8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80136cc:	f8c4 8000 	str.w	r8, [r4]
 80136d0:	e7e9      	b.n	80136a6 <__submore+0x48>

080136d2 <__swbuf_r>:
 80136d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136d4:	460e      	mov	r6, r1
 80136d6:	4614      	mov	r4, r2
 80136d8:	4605      	mov	r5, r0
 80136da:	b118      	cbz	r0, 80136e4 <__swbuf_r+0x12>
 80136dc:	6a03      	ldr	r3, [r0, #32]
 80136de:	b90b      	cbnz	r3, 80136e4 <__swbuf_r+0x12>
 80136e0:	f7fd fcce 	bl	8011080 <__sinit>
 80136e4:	69a3      	ldr	r3, [r4, #24]
 80136e6:	60a3      	str	r3, [r4, #8]
 80136e8:	89a3      	ldrh	r3, [r4, #12]
 80136ea:	071a      	lsls	r2, r3, #28
 80136ec:	d525      	bpl.n	801373a <__swbuf_r+0x68>
 80136ee:	6923      	ldr	r3, [r4, #16]
 80136f0:	b31b      	cbz	r3, 801373a <__swbuf_r+0x68>
 80136f2:	6823      	ldr	r3, [r4, #0]
 80136f4:	6922      	ldr	r2, [r4, #16]
 80136f6:	1a98      	subs	r0, r3, r2
 80136f8:	6963      	ldr	r3, [r4, #20]
 80136fa:	b2f6      	uxtb	r6, r6
 80136fc:	4283      	cmp	r3, r0
 80136fe:	4637      	mov	r7, r6
 8013700:	dc04      	bgt.n	801370c <__swbuf_r+0x3a>
 8013702:	4621      	mov	r1, r4
 8013704:	4628      	mov	r0, r5
 8013706:	f7ff ff49 	bl	801359c <_fflush_r>
 801370a:	b9e0      	cbnz	r0, 8013746 <__swbuf_r+0x74>
 801370c:	68a3      	ldr	r3, [r4, #8]
 801370e:	3b01      	subs	r3, #1
 8013710:	60a3      	str	r3, [r4, #8]
 8013712:	6823      	ldr	r3, [r4, #0]
 8013714:	1c5a      	adds	r2, r3, #1
 8013716:	6022      	str	r2, [r4, #0]
 8013718:	701e      	strb	r6, [r3, #0]
 801371a:	6962      	ldr	r2, [r4, #20]
 801371c:	1c43      	adds	r3, r0, #1
 801371e:	429a      	cmp	r2, r3
 8013720:	d004      	beq.n	801372c <__swbuf_r+0x5a>
 8013722:	89a3      	ldrh	r3, [r4, #12]
 8013724:	07db      	lsls	r3, r3, #31
 8013726:	d506      	bpl.n	8013736 <__swbuf_r+0x64>
 8013728:	2e0a      	cmp	r6, #10
 801372a:	d104      	bne.n	8013736 <__swbuf_r+0x64>
 801372c:	4621      	mov	r1, r4
 801372e:	4628      	mov	r0, r5
 8013730:	f7ff ff34 	bl	801359c <_fflush_r>
 8013734:	b938      	cbnz	r0, 8013746 <__swbuf_r+0x74>
 8013736:	4638      	mov	r0, r7
 8013738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801373a:	4621      	mov	r1, r4
 801373c:	4628      	mov	r0, r5
 801373e:	f000 f805 	bl	801374c <__swsetup_r>
 8013742:	2800      	cmp	r0, #0
 8013744:	d0d5      	beq.n	80136f2 <__swbuf_r+0x20>
 8013746:	f04f 37ff 	mov.w	r7, #4294967295
 801374a:	e7f4      	b.n	8013736 <__swbuf_r+0x64>

0801374c <__swsetup_r>:
 801374c:	b538      	push	{r3, r4, r5, lr}
 801374e:	4b2a      	ldr	r3, [pc, #168]	; (80137f8 <__swsetup_r+0xac>)
 8013750:	4605      	mov	r5, r0
 8013752:	6818      	ldr	r0, [r3, #0]
 8013754:	460c      	mov	r4, r1
 8013756:	b118      	cbz	r0, 8013760 <__swsetup_r+0x14>
 8013758:	6a03      	ldr	r3, [r0, #32]
 801375a:	b90b      	cbnz	r3, 8013760 <__swsetup_r+0x14>
 801375c:	f7fd fc90 	bl	8011080 <__sinit>
 8013760:	89a3      	ldrh	r3, [r4, #12]
 8013762:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013766:	0718      	lsls	r0, r3, #28
 8013768:	d422      	bmi.n	80137b0 <__swsetup_r+0x64>
 801376a:	06d9      	lsls	r1, r3, #27
 801376c:	d407      	bmi.n	801377e <__swsetup_r+0x32>
 801376e:	2309      	movs	r3, #9
 8013770:	602b      	str	r3, [r5, #0]
 8013772:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013776:	81a3      	strh	r3, [r4, #12]
 8013778:	f04f 30ff 	mov.w	r0, #4294967295
 801377c:	e034      	b.n	80137e8 <__swsetup_r+0x9c>
 801377e:	0758      	lsls	r0, r3, #29
 8013780:	d512      	bpl.n	80137a8 <__swsetup_r+0x5c>
 8013782:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013784:	b141      	cbz	r1, 8013798 <__swsetup_r+0x4c>
 8013786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801378a:	4299      	cmp	r1, r3
 801378c:	d002      	beq.n	8013794 <__swsetup_r+0x48>
 801378e:	4628      	mov	r0, r5
 8013790:	f7fd feba 	bl	8011508 <_free_r>
 8013794:	2300      	movs	r3, #0
 8013796:	6363      	str	r3, [r4, #52]	; 0x34
 8013798:	89a3      	ldrh	r3, [r4, #12]
 801379a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801379e:	81a3      	strh	r3, [r4, #12]
 80137a0:	2300      	movs	r3, #0
 80137a2:	6063      	str	r3, [r4, #4]
 80137a4:	6923      	ldr	r3, [r4, #16]
 80137a6:	6023      	str	r3, [r4, #0]
 80137a8:	89a3      	ldrh	r3, [r4, #12]
 80137aa:	f043 0308 	orr.w	r3, r3, #8
 80137ae:	81a3      	strh	r3, [r4, #12]
 80137b0:	6923      	ldr	r3, [r4, #16]
 80137b2:	b94b      	cbnz	r3, 80137c8 <__swsetup_r+0x7c>
 80137b4:	89a3      	ldrh	r3, [r4, #12]
 80137b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80137ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137be:	d003      	beq.n	80137c8 <__swsetup_r+0x7c>
 80137c0:	4621      	mov	r1, r4
 80137c2:	4628      	mov	r0, r5
 80137c4:	f000 f96c 	bl	8013aa0 <__smakebuf_r>
 80137c8:	89a0      	ldrh	r0, [r4, #12]
 80137ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80137ce:	f010 0301 	ands.w	r3, r0, #1
 80137d2:	d00a      	beq.n	80137ea <__swsetup_r+0x9e>
 80137d4:	2300      	movs	r3, #0
 80137d6:	60a3      	str	r3, [r4, #8]
 80137d8:	6963      	ldr	r3, [r4, #20]
 80137da:	425b      	negs	r3, r3
 80137dc:	61a3      	str	r3, [r4, #24]
 80137de:	6923      	ldr	r3, [r4, #16]
 80137e0:	b943      	cbnz	r3, 80137f4 <__swsetup_r+0xa8>
 80137e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80137e6:	d1c4      	bne.n	8013772 <__swsetup_r+0x26>
 80137e8:	bd38      	pop	{r3, r4, r5, pc}
 80137ea:	0781      	lsls	r1, r0, #30
 80137ec:	bf58      	it	pl
 80137ee:	6963      	ldrpl	r3, [r4, #20]
 80137f0:	60a3      	str	r3, [r4, #8]
 80137f2:	e7f4      	b.n	80137de <__swsetup_r+0x92>
 80137f4:	2000      	movs	r0, #0
 80137f6:	e7f7      	b.n	80137e8 <__swsetup_r+0x9c>
 80137f8:	20000228 	.word	0x20000228

080137fc <__assert_func>:
 80137fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137fe:	4614      	mov	r4, r2
 8013800:	461a      	mov	r2, r3
 8013802:	4b09      	ldr	r3, [pc, #36]	; (8013828 <__assert_func+0x2c>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	4605      	mov	r5, r0
 8013808:	68d8      	ldr	r0, [r3, #12]
 801380a:	b14c      	cbz	r4, 8013820 <__assert_func+0x24>
 801380c:	4b07      	ldr	r3, [pc, #28]	; (801382c <__assert_func+0x30>)
 801380e:	9100      	str	r1, [sp, #0]
 8013810:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013814:	4906      	ldr	r1, [pc, #24]	; (8013830 <__assert_func+0x34>)
 8013816:	462b      	mov	r3, r5
 8013818:	f7fd fc4a 	bl	80110b0 <fiprintf>
 801381c:	f7fc fc8e 	bl	801013c <abort>
 8013820:	4b04      	ldr	r3, [pc, #16]	; (8013834 <__assert_func+0x38>)
 8013822:	461c      	mov	r4, r3
 8013824:	e7f3      	b.n	801380e <__assert_func+0x12>
 8013826:	bf00      	nop
 8013828:	20000228 	.word	0x20000228
 801382c:	08014872 	.word	0x08014872
 8013830:	0801487f 	.word	0x0801487f
 8013834:	080148ad 	.word	0x080148ad

08013838 <_calloc_r>:
 8013838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801383a:	fba1 2402 	umull	r2, r4, r1, r2
 801383e:	b94c      	cbnz	r4, 8013854 <_calloc_r+0x1c>
 8013840:	4611      	mov	r1, r2
 8013842:	9201      	str	r2, [sp, #4]
 8013844:	f7fc fcb2 	bl	80101ac <_malloc_r>
 8013848:	9a01      	ldr	r2, [sp, #4]
 801384a:	4605      	mov	r5, r0
 801384c:	b930      	cbnz	r0, 801385c <_calloc_r+0x24>
 801384e:	4628      	mov	r0, r5
 8013850:	b003      	add	sp, #12
 8013852:	bd30      	pop	{r4, r5, pc}
 8013854:	220c      	movs	r2, #12
 8013856:	6002      	str	r2, [r0, #0]
 8013858:	2500      	movs	r5, #0
 801385a:	e7f8      	b.n	801384e <_calloc_r+0x16>
 801385c:	4621      	mov	r1, r4
 801385e:	f7fd fd3b 	bl	80112d8 <memset>
 8013862:	e7f4      	b.n	801384e <_calloc_r+0x16>

08013864 <_strtol_l.constprop.0>:
 8013864:	2b01      	cmp	r3, #1
 8013866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801386a:	d001      	beq.n	8013870 <_strtol_l.constprop.0+0xc>
 801386c:	2b24      	cmp	r3, #36	; 0x24
 801386e:	d906      	bls.n	801387e <_strtol_l.constprop.0+0x1a>
 8013870:	f7fd fe04 	bl	801147c <__errno>
 8013874:	2316      	movs	r3, #22
 8013876:	6003      	str	r3, [r0, #0]
 8013878:	2000      	movs	r0, #0
 801387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801387e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013964 <_strtol_l.constprop.0+0x100>
 8013882:	460d      	mov	r5, r1
 8013884:	462e      	mov	r6, r5
 8013886:	f815 4b01 	ldrb.w	r4, [r5], #1
 801388a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801388e:	f017 0708 	ands.w	r7, r7, #8
 8013892:	d1f7      	bne.n	8013884 <_strtol_l.constprop.0+0x20>
 8013894:	2c2d      	cmp	r4, #45	; 0x2d
 8013896:	d132      	bne.n	80138fe <_strtol_l.constprop.0+0x9a>
 8013898:	782c      	ldrb	r4, [r5, #0]
 801389a:	2701      	movs	r7, #1
 801389c:	1cb5      	adds	r5, r6, #2
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d05b      	beq.n	801395a <_strtol_l.constprop.0+0xf6>
 80138a2:	2b10      	cmp	r3, #16
 80138a4:	d109      	bne.n	80138ba <_strtol_l.constprop.0+0x56>
 80138a6:	2c30      	cmp	r4, #48	; 0x30
 80138a8:	d107      	bne.n	80138ba <_strtol_l.constprop.0+0x56>
 80138aa:	782c      	ldrb	r4, [r5, #0]
 80138ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80138b0:	2c58      	cmp	r4, #88	; 0x58
 80138b2:	d14d      	bne.n	8013950 <_strtol_l.constprop.0+0xec>
 80138b4:	786c      	ldrb	r4, [r5, #1]
 80138b6:	2310      	movs	r3, #16
 80138b8:	3502      	adds	r5, #2
 80138ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80138be:	f108 38ff 	add.w	r8, r8, #4294967295
 80138c2:	f04f 0e00 	mov.w	lr, #0
 80138c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80138ca:	4676      	mov	r6, lr
 80138cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80138d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80138d4:	f1bc 0f09 	cmp.w	ip, #9
 80138d8:	d816      	bhi.n	8013908 <_strtol_l.constprop.0+0xa4>
 80138da:	4664      	mov	r4, ip
 80138dc:	42a3      	cmp	r3, r4
 80138de:	dd24      	ble.n	801392a <_strtol_l.constprop.0+0xc6>
 80138e0:	f1be 3fff 	cmp.w	lr, #4294967295
 80138e4:	d008      	beq.n	80138f8 <_strtol_l.constprop.0+0x94>
 80138e6:	45b1      	cmp	r9, r6
 80138e8:	d31c      	bcc.n	8013924 <_strtol_l.constprop.0+0xc0>
 80138ea:	d101      	bne.n	80138f0 <_strtol_l.constprop.0+0x8c>
 80138ec:	45a2      	cmp	sl, r4
 80138ee:	db19      	blt.n	8013924 <_strtol_l.constprop.0+0xc0>
 80138f0:	fb06 4603 	mla	r6, r6, r3, r4
 80138f4:	f04f 0e01 	mov.w	lr, #1
 80138f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138fc:	e7e8      	b.n	80138d0 <_strtol_l.constprop.0+0x6c>
 80138fe:	2c2b      	cmp	r4, #43	; 0x2b
 8013900:	bf04      	itt	eq
 8013902:	782c      	ldrbeq	r4, [r5, #0]
 8013904:	1cb5      	addeq	r5, r6, #2
 8013906:	e7ca      	b.n	801389e <_strtol_l.constprop.0+0x3a>
 8013908:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801390c:	f1bc 0f19 	cmp.w	ip, #25
 8013910:	d801      	bhi.n	8013916 <_strtol_l.constprop.0+0xb2>
 8013912:	3c37      	subs	r4, #55	; 0x37
 8013914:	e7e2      	b.n	80138dc <_strtol_l.constprop.0+0x78>
 8013916:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801391a:	f1bc 0f19 	cmp.w	ip, #25
 801391e:	d804      	bhi.n	801392a <_strtol_l.constprop.0+0xc6>
 8013920:	3c57      	subs	r4, #87	; 0x57
 8013922:	e7db      	b.n	80138dc <_strtol_l.constprop.0+0x78>
 8013924:	f04f 3eff 	mov.w	lr, #4294967295
 8013928:	e7e6      	b.n	80138f8 <_strtol_l.constprop.0+0x94>
 801392a:	f1be 3fff 	cmp.w	lr, #4294967295
 801392e:	d105      	bne.n	801393c <_strtol_l.constprop.0+0xd8>
 8013930:	2322      	movs	r3, #34	; 0x22
 8013932:	6003      	str	r3, [r0, #0]
 8013934:	4646      	mov	r6, r8
 8013936:	b942      	cbnz	r2, 801394a <_strtol_l.constprop.0+0xe6>
 8013938:	4630      	mov	r0, r6
 801393a:	e79e      	b.n	801387a <_strtol_l.constprop.0+0x16>
 801393c:	b107      	cbz	r7, 8013940 <_strtol_l.constprop.0+0xdc>
 801393e:	4276      	negs	r6, r6
 8013940:	2a00      	cmp	r2, #0
 8013942:	d0f9      	beq.n	8013938 <_strtol_l.constprop.0+0xd4>
 8013944:	f1be 0f00 	cmp.w	lr, #0
 8013948:	d000      	beq.n	801394c <_strtol_l.constprop.0+0xe8>
 801394a:	1e69      	subs	r1, r5, #1
 801394c:	6011      	str	r1, [r2, #0]
 801394e:	e7f3      	b.n	8013938 <_strtol_l.constprop.0+0xd4>
 8013950:	2430      	movs	r4, #48	; 0x30
 8013952:	2b00      	cmp	r3, #0
 8013954:	d1b1      	bne.n	80138ba <_strtol_l.constprop.0+0x56>
 8013956:	2308      	movs	r3, #8
 8013958:	e7af      	b.n	80138ba <_strtol_l.constprop.0+0x56>
 801395a:	2c30      	cmp	r4, #48	; 0x30
 801395c:	d0a5      	beq.n	80138aa <_strtol_l.constprop.0+0x46>
 801395e:	230a      	movs	r3, #10
 8013960:	e7ab      	b.n	80138ba <_strtol_l.constprop.0+0x56>
 8013962:	bf00      	nop
 8013964:	08014539 	.word	0x08014539

08013968 <_strtol_r>:
 8013968:	f7ff bf7c 	b.w	8013864 <_strtol_l.constprop.0>

0801396c <_strtoul_l.constprop.0>:
 801396c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013970:	4f36      	ldr	r7, [pc, #216]	; (8013a4c <_strtoul_l.constprop.0+0xe0>)
 8013972:	4686      	mov	lr, r0
 8013974:	460d      	mov	r5, r1
 8013976:	4628      	mov	r0, r5
 8013978:	f815 4b01 	ldrb.w	r4, [r5], #1
 801397c:	5d3e      	ldrb	r6, [r7, r4]
 801397e:	f016 0608 	ands.w	r6, r6, #8
 8013982:	d1f8      	bne.n	8013976 <_strtoul_l.constprop.0+0xa>
 8013984:	2c2d      	cmp	r4, #45	; 0x2d
 8013986:	d130      	bne.n	80139ea <_strtoul_l.constprop.0+0x7e>
 8013988:	782c      	ldrb	r4, [r5, #0]
 801398a:	2601      	movs	r6, #1
 801398c:	1c85      	adds	r5, r0, #2
 801398e:	2b00      	cmp	r3, #0
 8013990:	d057      	beq.n	8013a42 <_strtoul_l.constprop.0+0xd6>
 8013992:	2b10      	cmp	r3, #16
 8013994:	d109      	bne.n	80139aa <_strtoul_l.constprop.0+0x3e>
 8013996:	2c30      	cmp	r4, #48	; 0x30
 8013998:	d107      	bne.n	80139aa <_strtoul_l.constprop.0+0x3e>
 801399a:	7828      	ldrb	r0, [r5, #0]
 801399c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80139a0:	2858      	cmp	r0, #88	; 0x58
 80139a2:	d149      	bne.n	8013a38 <_strtoul_l.constprop.0+0xcc>
 80139a4:	786c      	ldrb	r4, [r5, #1]
 80139a6:	2310      	movs	r3, #16
 80139a8:	3502      	adds	r5, #2
 80139aa:	f04f 38ff 	mov.w	r8, #4294967295
 80139ae:	2700      	movs	r7, #0
 80139b0:	fbb8 f8f3 	udiv	r8, r8, r3
 80139b4:	fb03 f908 	mul.w	r9, r3, r8
 80139b8:	ea6f 0909 	mvn.w	r9, r9
 80139bc:	4638      	mov	r0, r7
 80139be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80139c2:	f1bc 0f09 	cmp.w	ip, #9
 80139c6:	d815      	bhi.n	80139f4 <_strtoul_l.constprop.0+0x88>
 80139c8:	4664      	mov	r4, ip
 80139ca:	42a3      	cmp	r3, r4
 80139cc:	dd23      	ble.n	8013a16 <_strtoul_l.constprop.0+0xaa>
 80139ce:	f1b7 3fff 	cmp.w	r7, #4294967295
 80139d2:	d007      	beq.n	80139e4 <_strtoul_l.constprop.0+0x78>
 80139d4:	4580      	cmp	r8, r0
 80139d6:	d31b      	bcc.n	8013a10 <_strtoul_l.constprop.0+0xa4>
 80139d8:	d101      	bne.n	80139de <_strtoul_l.constprop.0+0x72>
 80139da:	45a1      	cmp	r9, r4
 80139dc:	db18      	blt.n	8013a10 <_strtoul_l.constprop.0+0xa4>
 80139de:	fb00 4003 	mla	r0, r0, r3, r4
 80139e2:	2701      	movs	r7, #1
 80139e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80139e8:	e7e9      	b.n	80139be <_strtoul_l.constprop.0+0x52>
 80139ea:	2c2b      	cmp	r4, #43	; 0x2b
 80139ec:	bf04      	itt	eq
 80139ee:	782c      	ldrbeq	r4, [r5, #0]
 80139f0:	1c85      	addeq	r5, r0, #2
 80139f2:	e7cc      	b.n	801398e <_strtoul_l.constprop.0+0x22>
 80139f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80139f8:	f1bc 0f19 	cmp.w	ip, #25
 80139fc:	d801      	bhi.n	8013a02 <_strtoul_l.constprop.0+0x96>
 80139fe:	3c37      	subs	r4, #55	; 0x37
 8013a00:	e7e3      	b.n	80139ca <_strtoul_l.constprop.0+0x5e>
 8013a02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013a06:	f1bc 0f19 	cmp.w	ip, #25
 8013a0a:	d804      	bhi.n	8013a16 <_strtoul_l.constprop.0+0xaa>
 8013a0c:	3c57      	subs	r4, #87	; 0x57
 8013a0e:	e7dc      	b.n	80139ca <_strtoul_l.constprop.0+0x5e>
 8013a10:	f04f 37ff 	mov.w	r7, #4294967295
 8013a14:	e7e6      	b.n	80139e4 <_strtoul_l.constprop.0+0x78>
 8013a16:	1c7b      	adds	r3, r7, #1
 8013a18:	d106      	bne.n	8013a28 <_strtoul_l.constprop.0+0xbc>
 8013a1a:	2322      	movs	r3, #34	; 0x22
 8013a1c:	f8ce 3000 	str.w	r3, [lr]
 8013a20:	4638      	mov	r0, r7
 8013a22:	b932      	cbnz	r2, 8013a32 <_strtoul_l.constprop.0+0xc6>
 8013a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a28:	b106      	cbz	r6, 8013a2c <_strtoul_l.constprop.0+0xc0>
 8013a2a:	4240      	negs	r0, r0
 8013a2c:	2a00      	cmp	r2, #0
 8013a2e:	d0f9      	beq.n	8013a24 <_strtoul_l.constprop.0+0xb8>
 8013a30:	b107      	cbz	r7, 8013a34 <_strtoul_l.constprop.0+0xc8>
 8013a32:	1e69      	subs	r1, r5, #1
 8013a34:	6011      	str	r1, [r2, #0]
 8013a36:	e7f5      	b.n	8013a24 <_strtoul_l.constprop.0+0xb8>
 8013a38:	2430      	movs	r4, #48	; 0x30
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d1b5      	bne.n	80139aa <_strtoul_l.constprop.0+0x3e>
 8013a3e:	2308      	movs	r3, #8
 8013a40:	e7b3      	b.n	80139aa <_strtoul_l.constprop.0+0x3e>
 8013a42:	2c30      	cmp	r4, #48	; 0x30
 8013a44:	d0a9      	beq.n	801399a <_strtoul_l.constprop.0+0x2e>
 8013a46:	230a      	movs	r3, #10
 8013a48:	e7af      	b.n	80139aa <_strtoul_l.constprop.0+0x3e>
 8013a4a:	bf00      	nop
 8013a4c:	08014539 	.word	0x08014539

08013a50 <_strtoul_r>:
 8013a50:	f7ff bf8c 	b.w	801396c <_strtoul_l.constprop.0>

08013a54 <__swhatbuf_r>:
 8013a54:	b570      	push	{r4, r5, r6, lr}
 8013a56:	460c      	mov	r4, r1
 8013a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a5c:	2900      	cmp	r1, #0
 8013a5e:	b096      	sub	sp, #88	; 0x58
 8013a60:	4615      	mov	r5, r2
 8013a62:	461e      	mov	r6, r3
 8013a64:	da0d      	bge.n	8013a82 <__swhatbuf_r+0x2e>
 8013a66:	89a3      	ldrh	r3, [r4, #12]
 8013a68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013a6c:	f04f 0100 	mov.w	r1, #0
 8013a70:	bf0c      	ite	eq
 8013a72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013a76:	2340      	movne	r3, #64	; 0x40
 8013a78:	2000      	movs	r0, #0
 8013a7a:	6031      	str	r1, [r6, #0]
 8013a7c:	602b      	str	r3, [r5, #0]
 8013a7e:	b016      	add	sp, #88	; 0x58
 8013a80:	bd70      	pop	{r4, r5, r6, pc}
 8013a82:	466a      	mov	r2, sp
 8013a84:	f000 f848 	bl	8013b18 <_fstat_r>
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	dbec      	blt.n	8013a66 <__swhatbuf_r+0x12>
 8013a8c:	9901      	ldr	r1, [sp, #4]
 8013a8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013a92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013a96:	4259      	negs	r1, r3
 8013a98:	4159      	adcs	r1, r3
 8013a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a9e:	e7eb      	b.n	8013a78 <__swhatbuf_r+0x24>

08013aa0 <__smakebuf_r>:
 8013aa0:	898b      	ldrh	r3, [r1, #12]
 8013aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013aa4:	079d      	lsls	r5, r3, #30
 8013aa6:	4606      	mov	r6, r0
 8013aa8:	460c      	mov	r4, r1
 8013aaa:	d507      	bpl.n	8013abc <__smakebuf_r+0x1c>
 8013aac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ab0:	6023      	str	r3, [r4, #0]
 8013ab2:	6123      	str	r3, [r4, #16]
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	6163      	str	r3, [r4, #20]
 8013ab8:	b002      	add	sp, #8
 8013aba:	bd70      	pop	{r4, r5, r6, pc}
 8013abc:	ab01      	add	r3, sp, #4
 8013abe:	466a      	mov	r2, sp
 8013ac0:	f7ff ffc8 	bl	8013a54 <__swhatbuf_r>
 8013ac4:	9900      	ldr	r1, [sp, #0]
 8013ac6:	4605      	mov	r5, r0
 8013ac8:	4630      	mov	r0, r6
 8013aca:	f7fc fb6f 	bl	80101ac <_malloc_r>
 8013ace:	b948      	cbnz	r0, 8013ae4 <__smakebuf_r+0x44>
 8013ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ad4:	059a      	lsls	r2, r3, #22
 8013ad6:	d4ef      	bmi.n	8013ab8 <__smakebuf_r+0x18>
 8013ad8:	f023 0303 	bic.w	r3, r3, #3
 8013adc:	f043 0302 	orr.w	r3, r3, #2
 8013ae0:	81a3      	strh	r3, [r4, #12]
 8013ae2:	e7e3      	b.n	8013aac <__smakebuf_r+0xc>
 8013ae4:	89a3      	ldrh	r3, [r4, #12]
 8013ae6:	6020      	str	r0, [r4, #0]
 8013ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013aec:	81a3      	strh	r3, [r4, #12]
 8013aee:	9b00      	ldr	r3, [sp, #0]
 8013af0:	6163      	str	r3, [r4, #20]
 8013af2:	9b01      	ldr	r3, [sp, #4]
 8013af4:	6120      	str	r0, [r4, #16]
 8013af6:	b15b      	cbz	r3, 8013b10 <__smakebuf_r+0x70>
 8013af8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013afc:	4630      	mov	r0, r6
 8013afe:	f000 f81d 	bl	8013b3c <_isatty_r>
 8013b02:	b128      	cbz	r0, 8013b10 <__smakebuf_r+0x70>
 8013b04:	89a3      	ldrh	r3, [r4, #12]
 8013b06:	f023 0303 	bic.w	r3, r3, #3
 8013b0a:	f043 0301 	orr.w	r3, r3, #1
 8013b0e:	81a3      	strh	r3, [r4, #12]
 8013b10:	89a3      	ldrh	r3, [r4, #12]
 8013b12:	431d      	orrs	r5, r3
 8013b14:	81a5      	strh	r5, [r4, #12]
 8013b16:	e7cf      	b.n	8013ab8 <__smakebuf_r+0x18>

08013b18 <_fstat_r>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	4d07      	ldr	r5, [pc, #28]	; (8013b38 <_fstat_r+0x20>)
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	4604      	mov	r4, r0
 8013b20:	4608      	mov	r0, r1
 8013b22:	4611      	mov	r1, r2
 8013b24:	602b      	str	r3, [r5, #0]
 8013b26:	f7f8 fc04 	bl	800c332 <_fstat>
 8013b2a:	1c43      	adds	r3, r0, #1
 8013b2c:	d102      	bne.n	8013b34 <_fstat_r+0x1c>
 8013b2e:	682b      	ldr	r3, [r5, #0]
 8013b30:	b103      	cbz	r3, 8013b34 <_fstat_r+0x1c>
 8013b32:	6023      	str	r3, [r4, #0]
 8013b34:	bd38      	pop	{r3, r4, r5, pc}
 8013b36:	bf00      	nop
 8013b38:	20003440 	.word	0x20003440

08013b3c <_isatty_r>:
 8013b3c:	b538      	push	{r3, r4, r5, lr}
 8013b3e:	4d06      	ldr	r5, [pc, #24]	; (8013b58 <_isatty_r+0x1c>)
 8013b40:	2300      	movs	r3, #0
 8013b42:	4604      	mov	r4, r0
 8013b44:	4608      	mov	r0, r1
 8013b46:	602b      	str	r3, [r5, #0]
 8013b48:	f7f8 fc03 	bl	800c352 <_isatty>
 8013b4c:	1c43      	adds	r3, r0, #1
 8013b4e:	d102      	bne.n	8013b56 <_isatty_r+0x1a>
 8013b50:	682b      	ldr	r3, [r5, #0]
 8013b52:	b103      	cbz	r3, 8013b56 <_isatty_r+0x1a>
 8013b54:	6023      	str	r3, [r4, #0]
 8013b56:	bd38      	pop	{r3, r4, r5, pc}
 8013b58:	20003440 	.word	0x20003440

08013b5c <_init>:
 8013b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5e:	bf00      	nop
 8013b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b62:	bc08      	pop	{r3}
 8013b64:	469e      	mov	lr, r3
 8013b66:	4770      	bx	lr

08013b68 <_fini>:
 8013b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b6a:	bf00      	nop
 8013b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b6e:	bc08      	pop	{r3}
 8013b70:	469e      	mov	lr, r3
 8013b72:	4770      	bx	lr
